
hankyo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bfe0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e40  0801c1c0  0801c1c0  0002c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d000  0801d000  000301f8  2**0
                  CONTENTS
  4 .ARM          00000000  0801d000  0801d000  000301f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d000  0801d000  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d000  0801d000  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d004  0801d004  0002d004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801d008  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e55c  200001f8  0801d200  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e754  0801d200  0003e754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181bc  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417a  00000000  00000000  00048427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0004c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010dd  00000000  00000000  0004dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002873a  00000000  00000000  0004ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd80  00000000  00000000  00077467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c11  00000000  00000000  000931e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007488  00000000  00000000  00166df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801c1a8 	.word	0x0801c1a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0801c1a8 	.word	0x0801c1a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d002      	beq.n	8000d7a <LL_ADC_SetGainCompensation+0x36>
 8000d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d78:	e000      	b.n	8000d7c <LL_ADC_SetGainCompensation+0x38>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	; 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	211f      	movs	r1, #31
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e9b      	lsrs	r3, r3, #26
 8000dc6:	f003 011f 	and.w	r1, r3, #31
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0e5b      	lsrs	r3, r3, #25
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0d1b      	lsrs	r3, r3, #20
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2107      	movs	r1, #7
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0d1b      	lsrs	r3, r3, #20
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6093      	str	r3, [r2, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsEnabled+0x18>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsEnabled+0x1a>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001006:	d101      	bne.n	800100c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	f043 0204 	orr.w	r2, r3, #4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	b29b      	uxth	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2208      	movs	r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80010ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 800112a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800112e:	f7ff ffc3 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ffc0 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f013 ff2d 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001150:	2302      	movs	r3, #2
 8001152:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f013 ff21 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f013 ff15 	bl	8014faa <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800118c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001196:	f013 fd4d 	bl	8014c34 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 800119e:	2305      	movs	r3, #5
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011be:	f013 fd5f 	bl	8014c80 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011c8:	f7ff fdbc 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011cc:	2100      	movs	r1, #0
 80011ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011d2:	f7ff fe57 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80011d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011da:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	484a      	ldr	r0, [pc, #296]	; (8001310 <MX_ADC1_Init+0x228>)
 80011e8:	f013 fcc0 	bl	8014b6c <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80011ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f0:	f7ff fe5d 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80011f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f8:	f7ff fe7f 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <MX_ADC1_Init+0x22c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	099b      	lsrs	r3, r3, #6
 8001202:	4a45      	ldr	r2, [pc, #276]	; (8001318 <MX_ADC1_Init+0x230>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	099a      	lsrs	r2, r3, #6
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <MX_ADC1_Init+0x234>)
 8001216:	fba3 2302 	umull	r2, r3, r3, r2
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800121e:	e002      	b.n	8001226 <MX_ADC1_Init+0x13e>
  {
    wait_loop_index--;
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001222:	3b01      	subs	r3, #1
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <MX_ADC1_Init+0x138>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 800122c:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <MX_ADC1_Init+0x238>)
 800122e:	2106      	movs	r1, #6
 8001230:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001234:	f7ff fdab 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001238:	2202      	movs	r2, #2
 800123a:	4939      	ldr	r1, [pc, #228]	; (8001320 <MX_ADC1_Init+0x238>)
 800123c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001240:	f7ff fdd1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	4936      	ldr	r1, [pc, #216]	; (8001320 <MX_ADC1_Init+0x238>)
 8001248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800124c:	f7ff fdf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_ADC1_Init+0x238>)
 8001252:	210c      	movs	r1, #12
 8001254:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001258:	f7ff fd99 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800125c:	2202      	movs	r2, #2
 800125e:	4930      	ldr	r1, [pc, #192]	; (8001320 <MX_ADC1_Init+0x238>)
 8001260:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001264:	f7ff fdbf 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001268:	227f      	movs	r2, #127	; 0x7f
 800126a:	492d      	ldr	r1, [pc, #180]	; (8001320 <MX_ADC1_Init+0x238>)
 800126c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001270:	f7ff fde4 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001276:	2112      	movs	r1, #18
 8001278:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800127c:	f7ff fd87 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001280:	2202      	movs	r2, #2
 8001282:	4928      	ldr	r1, [pc, #160]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001284:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001288:	f7ff fdad 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800128c:	227f      	movs	r2, #127	; 0x7f
 800128e:	4925      	ldr	r1, [pc, #148]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001294:	f7ff fdd2 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_ADC1_Init+0x23c>)
 800129a:	2118      	movs	r1, #24
 800129c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012a0:	f7ff fd75 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012a4:	2202      	movs	r2, #2
 80012a6:	491f      	ldr	r1, [pc, #124]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ac:	f7ff fd9b 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80012b0:	227f      	movs	r2, #127	; 0x7f
 80012b2:	491c      	ldr	r1, [pc, #112]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012b8:	f7ff fdc0 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_1);
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <MX_ADC1_Init+0x240>)
 80012be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012c6:	f7ff fd62 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012ca:	2202      	movs	r2, #2
 80012cc:	4916      	ldr	r1, [pc, #88]	; (8001328 <MX_ADC1_Init+0x240>)
 80012ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d2:	f7ff fd88 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012d6:	227f      	movs	r2, #127	; 0x7f
 80012d8:	4913      	ldr	r1, [pc, #76]	; (8001328 <MX_ADC1_Init+0x240>)
 80012da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012de:	f7ff fdad 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_1);
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_ADC1_Init+0x240>)
 80012e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ec:	f7ff fd4f 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012f0:	2202      	movs	r2, #2
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <MX_ADC1_Init+0x240>)
 80012f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012f8:	f7ff fd75 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012fc:	227f      	movs	r2, #127	; 0x7f
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <MX_ADC1_Init+0x240>)
 8001300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001304:	f7ff fd9a 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	50000300 	.word	0x50000300
 8001314:	20000004 	.word	0x20000004
 8001318:	053e2d63 	.word	0x053e2d63
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	08600004 	.word	0x08600004
 8001324:	0c900008 	.word	0x0c900008
 8001328:	04300002 	.word	0x04300002

0800132c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 800136e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001372:	f7ff fea1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff fe9e 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB1   ------> ADC3_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800137c:	2302      	movs	r3, #2
 800137e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	483a      	ldr	r0, [pc, #232]	; (8001478 <MX_ADC3_Init+0x14c>)
 800138e:	f013 fe0c 	bl	8014faa <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800139e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <MX_ADC3_Init+0x150>)
 80013a6:	f013 fc45 	bl	8014c34 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <MX_ADC3_Init+0x150>)
 80013cc:	f013 fc58 	bl	8014c80 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC3, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_ADC3_Init+0x150>)
 80013d4:	f7ff fcb6 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 80013d8:	2100      	movs	r1, #0
 80013da:	4828      	ldr	r0, [pc, #160]	; (800147c <MX_ADC3_Init+0x150>)
 80013dc:	f7ff fd52 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_ADC3_Init+0x154>)
 80013f2:	f013 fbbb 	bl	8014b6c <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 80013f6:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_ADC3_Init+0x150>)
 80013f8:	f7ff fd59 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <MX_ADC3_Init+0x150>)
 80013fe:	f7ff fd7c 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC3_Init+0x158>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	099b      	lsrs	r3, r3, #6
 8001408:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <MX_ADC3_Init+0x15c>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	099a      	lsrs	r2, r3, #6
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_ADC3_Init+0x160>)
 800141c:	fba3 2302 	umull	r2, r3, r3, r2
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001424:	e002      	b.n	800142c <MX_ADC3_Init+0x100>
  {
    wait_loop_index--;
 8001426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001428:	3b01      	subs	r3, #1
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <MX_ADC3_Init+0xfa>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MX_ADC3_Init+0x164>)
 8001434:	2106      	movs	r1, #6
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_ADC3_Init+0x150>)
 8001438:	f7ff fca9 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800143c:	2202      	movs	r2, #2
 800143e:	4914      	ldr	r1, [pc, #80]	; (8001490 <MX_ADC3_Init+0x164>)
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <MX_ADC3_Init+0x150>)
 8001442:	f7ff fcd0 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001446:	227f      	movs	r2, #127	; 0x7f
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <MX_ADC3_Init+0x164>)
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_ADC3_Init+0x150>)
 800144c:	f7ff fcf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_ADC3_Init+0x164>)
 8001452:	210c      	movs	r1, #12
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <MX_ADC3_Init+0x150>)
 8001456:	f7ff fc9a 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800145a:	2202      	movs	r2, #2
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <MX_ADC3_Init+0x164>)
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_ADC3_Init+0x150>)
 8001460:	f7ff fcc1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001464:	227f      	movs	r2, #127	; 0x7f
 8001466:	490a      	ldr	r1, [pc, #40]	; (8001490 <MX_ADC3_Init+0x164>)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_ADC3_Init+0x150>)
 800146a:	f7ff fce7 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	; 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400
 800147c:	50000400 	.word	0x50000400
 8001480:	50000700 	.word	0x50000700
 8001484:	20000004 	.word	0x20000004
 8001488:	053e2d63 	.word	0x053e2d63
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	04300002 	.word	0x04300002

08001494 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	; 0x40
 8001498:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800149a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80014c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014cc:	f7ff fdf4 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff fdf1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB12   ------> ADC4_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014dc:	2303      	movs	r3, #3
 80014de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <MX_ADC4_Init+0x108>)
 80014ea:	f013 fd5e 	bl	8014faa <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 80014fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fe:	4619      	mov	r1, r3
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001502:	f013 fb97 	bl	8014c34 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001526:	f013 fbab 	bl	8014c80 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC4, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800152e:	f7ff fc09 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC4, LL_ADC_OVS_DISABLE);
 8001532:	2100      	movs	r1, #0
 8001534:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001536:	f7ff fca5 	bl	8000e84 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC4);
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800153c:	f7ff fcb7 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC4);
 8001540:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001542:	f7ff fcda 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_ADC4_Init+0x110>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <MX_ADC4_Init+0x114>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	099a      	lsrs	r2, r3, #6
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	461a      	mov	r2, r3
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_ADC4_Init+0x118>)
 8001560:	fba3 2302 	umull	r2, r3, r3, r2
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001568:	e002      	b.n	8001570 <MX_ADC4_Init+0xdc>
  {
    wait_loop_index--;
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	3b01      	subs	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <MX_ADC4_Init+0xd6>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001578:	2106      	movs	r1, #6
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800157c:	f7ff fc07 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8001580:	2203      	movs	r2, #3
 8001582:	490b      	ldr	r1, [pc, #44]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001586:	f7ff fc2e 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800158a:	227f      	movs	r2, #127	; 0x7f
 800158c:	4908      	ldr	r1, [pc, #32]	; (80015b0 <MX_ADC4_Init+0x11c>)
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001590:	f7ff fc54 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001594:	bf00      	nop
 8001596:	3740      	adds	r7, #64	; 0x40
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48000400 	.word	0x48000400
 80015a0:	50000500 	.word	0x50000500
 80015a4:	20000004 	.word	0x20000004
 80015a8:	053e2d63 	.word	0x053e2d63
 80015ac:	cccccccd 	.word	0xcccccccd
 80015b0:	0c900008 	.word	0x0c900008

080015b4 <ADC1_Calibration>:
#define ADC_CONVERT_DATA_BUFFR_SIZE	((uint32_t)3)

uint16_t adcConvertData[ADC_CONVERT_DATA_BUFFR_SIZE];

void ADC1_Calibration(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 80015b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015bc:	f7ff fc89 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11f      	bne.n	8001606 <ADC1_Calibration+0x52>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 80015c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015ca:	f7ff fcaa 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11a      	bne.n	800160a <ADC1_Calibration+0x56>
	if(LL_ADC_IsEnabled(ADC1) != 0){
 80015d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015d8:	f7ff fcdf 	bl	8000f9a <LL_ADC_IsEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <ADC1_Calibration+0x36>
		LL_ADC_Disable(ADC1);
 80015e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015e6:	f7ff fcc4 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC1,LL_ADC_SINGLE_ENDED);
 80015ea:	217f      	movs	r1, #127	; 0x7f
 80015ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f0:	f7ff fce6 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)==1);
 80015f4:	bf00      	nop
 80015f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015fa:	f7ff fcfa 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d0f8      	beq.n	80015f6 <ADC1_Calibration+0x42>
 8001604:	e002      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 800160a:	bf00      	nop
}
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <ADC2_Calibration>:

void ADC2_Calibration(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <ADC2_Calibration+0x50>)
 8001616:	f7ff fc5c 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11a      	bne.n	8001656 <ADC2_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <ADC2_Calibration+0x50>)
 8001622:	f7ff fc7e 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d116      	bne.n	800165a <ADC2_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC2) != 0){
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <ADC2_Calibration+0x50>)
 800162e:	f7ff fcb4 	bl	8000f9a <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <ADC2_Calibration+0x2e>
		LL_ADC_Disable(ADC2);
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <ADC2_Calibration+0x50>)
 800163a:	f7ff fc9a 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC2,LL_ADC_SINGLE_ENDED);
 800163e:	217f      	movs	r1, #127	; 0x7f
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <ADC2_Calibration+0x50>)
 8001642:	f7ff fcbd 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2)==1);
 8001646:	bf00      	nop
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <ADC2_Calibration+0x50>)
 800164a:	f7ff fcd2 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f9      	beq.n	8001648 <ADC2_Calibration+0x38>
 8001654:	e002      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 800165a:	bf00      	nop
}
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	50000100 	.word	0x50000100

08001664 <ADC3_Calibration>:

void ADC3_Calibration(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <ADC3_Calibration+0x50>)
 800166a:	f7ff fc32 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11a      	bne.n	80016aa <ADC3_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <ADC3_Calibration+0x50>)
 8001676:	f7ff fc54 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d116      	bne.n	80016ae <ADC3_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC3) != 0){
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <ADC3_Calibration+0x50>)
 8001682:	f7ff fc8a 	bl	8000f9a <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <ADC3_Calibration+0x2e>
		LL_ADC_Disable(ADC3);
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <ADC3_Calibration+0x50>)
 800168e:	f7ff fc70 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC3,LL_ADC_SINGLE_ENDED);
 8001692:	217f      	movs	r1, #127	; 0x7f
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <ADC3_Calibration+0x50>)
 8001696:	f7ff fc93 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC3)==1);
 800169a:	bf00      	nop
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <ADC3_Calibration+0x50>)
 800169e:	f7ff fca8 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d0f9      	beq.n	800169c <ADC3_Calibration+0x38>
 80016a8:	e002      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016ae:	bf00      	nop
}
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50000400 	.word	0x50000400

080016b8 <ADC4_Calibration>:

void ADC4_Calibration(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <ADC4_Calibration+0x50>)
 80016be:	f7ff fc08 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <ADC4_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <ADC4_Calibration+0x50>)
 80016ca:	f7ff fc2a 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d116      	bne.n	8001702 <ADC4_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC4) != 0){
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <ADC4_Calibration+0x50>)
 80016d6:	f7ff fc60 	bl	8000f9a <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <ADC4_Calibration+0x2e>
		LL_ADC_Disable(ADC4);
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <ADC4_Calibration+0x50>)
 80016e2:	f7ff fc46 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC4,LL_ADC_SINGLE_ENDED);
 80016e6:	217f      	movs	r1, #127	; 0x7f
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <ADC4_Calibration+0x50>)
 80016ea:	f7ff fc69 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC4)==1);
 80016ee:	bf00      	nop
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <ADC4_Calibration+0x50>)
 80016f2:	f7ff fc7e 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d0f9      	beq.n	80016f0 <ADC4_Calibration+0x38>
 80016fc:	e002      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 8001702:	bf00      	nop
}
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	50000500 	.word	0x50000500

0800170c <ADC4_Start>:

void ADC4_Start(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  ADC4_Calibration();
 8001710:	f7ff ffd2 	bl	80016b8 <ADC4_Calibration>
//	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_7);
	LL_ADC_Enable(ADC4);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <ADC4_Start+0x14>)
 8001716:	f7ff fc18 	bl	8000f4a <LL_ADC_Enable>

//	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_7,ADC_CONVERT_DATA_BUFFR_SIZE);

//	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_7);

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	50000500 	.word	0x50000500

08001724 <ADC3_Start>:

void ADC3_Start(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  ADC3_Calibration();
 8001728:	f7ff ff9c 	bl	8001664 <ADC3_Calibration>
	LL_ADC_Enable(ADC3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <ADC3_Start+0x14>)
 800172e:	f7ff fc0c 	bl	8000f4a <LL_ADC_Enable>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	50000400 	.word	0x50000400

0800173c <ADC2_Start>:

void ADC2_Start(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  ADC2_Calibration();
 8001740:	f7ff ff66 	bl	8001610 <ADC2_Calibration>
	LL_ADC_Enable(ADC2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <ADC2_Start+0x14>)
 8001746:	f7ff fc00 	bl	8000f4a <LL_ADC_Enable>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	50000100 	.word	0x50000100

08001754 <ADC1_Start>:

void ADC1_Start(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  ADC1_Calibration();
 8001758:	f7ff ff2c 	bl	80015b4 <ADC1_Calibration>
	LL_ADC_Enable(ADC1);
 800175c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001760:	f7ff fbf3 	bl	8000f4a <LL_ADC_Enable>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <GetSensor_FL>:

uint16_t GetSensor_FL(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC3);
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <GetSensor_FL+0x2c>)
 800176e:	f7ff fc54 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC3)==0);
 8001772:	bf00      	nop
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <GetSensor_FL+0x2c>)
 8001776:	f7ff fc71 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <GetSensor_FL+0xc>
	LL_ADC_ClearFlag_EOC(ADC3);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <GetSensor_FL+0x2c>)
 8001782:	f7ff fc7e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC3);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <GetSensor_FL+0x2c>)
 8001788:	f7ff fc5b 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	50000400 	.word	0x50000400

08001798 <ADC3_clearEOS>:

void ADC3_clearEOS(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC3);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <ADC3_clearEOS+0x10>)
 800179e:	f7ff fc7d 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	50000400 	.word	0x50000400

080017ac <ADC2_clearEOS>:

void ADC2_clearEOS(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <ADC2_clearEOS+0x10>)
 80017b2:	f7ff fc73 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	50000100 	.word	0x50000100

080017c0 <ADC1_clearEOS>:

void ADC1_clearEOS(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC1);
 80017c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c8:	f7ff fc68 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GetSensor_SL>:


uint16_t GetSensor_SL(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 80017d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d8:	f7ff fc1f 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 80017dc:	bf00      	nop
 80017de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e2:	f7ff fc3b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <GetSensor_SL+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 80017ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f0:	f7ff fc47 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 80017f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f8:	f7ff fc23 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}

08001802 <GetSensor_SR>:

uint16_t GetSensor_SR(void){
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001806:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800180a:	f7ff fc06 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 800180e:	bf00      	nop
 8001810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001814:	f7ff fc22 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f8      	beq.n	8001810 <GetSensor_SR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 800181e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001822:	f7ff fc2e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001826:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800182a:	f7ff fc0a 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800182e:	4603      	mov	r3, r0
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}

08001834 <GetSensor_FR>:

uint16_t GetSensor_FR(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001838:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800183c:	f7ff fbed 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001840:	bf00      	nop
 8001842:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001846:	f7ff fc09 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f8      	beq.n	8001842 <GetSensor_FR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 8001850:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001854:	f7ff fc15 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001858:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800185c:	f7ff fbf1 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <GetBatVal>:

uint16_t GetBatVal(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC4);
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <GetBatVal+0x2c>)
 800186e:	f7ff fbd4 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC4)==0);
 8001872:	bf00      	nop
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <GetBatVal+0x2c>)
 8001876:	f7ff fbf1 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f9      	beq.n	8001874 <GetBatVal+0xc>
	LL_ADC_ClearFlag_EOC(ADC4);
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <GetBatVal+0x2c>)
 8001882:	f7ff fbfe 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC4);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <GetBatVal+0x2c>)
 8001888:	f7ff fbdb 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	50000500 	.word	0x50000500

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <LL_AHB1_GRP1_EnableClock>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff ffe3 	bl	80019ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff ffe0 	bl	80019ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ec:	f7ff ff54 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffa4 	bl	8001944 <NVIC_EncodePriority>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	200b      	movs	r0, #11
 8001a02:	f7ff ff75 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff ff54 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a0c:	f7ff ff44 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff94 	bl	8001944 <NVIC_EncodePriority>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	200c      	movs	r0, #12
 8001a22:	f7ff ff65 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a26:	200c      	movs	r0, #12
 8001a28:	f7ff ff44 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a2c:	f7ff ff34 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff84 	bl	8001944 <NVIC_EncodePriority>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	200d      	movs	r0, #13
 8001a42:	f7ff ff55 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a46:	200d      	movs	r0, #13
 8001a48:	f7ff ff34 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a4c:	f7ff ff24 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff74 	bl	8001944 <NVIC_EncodePriority>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	200e      	movs	r0, #14
 8001a62:	f7ff ff45 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a66:	200e      	movs	r0, #14
 8001a68:	f7ff ff24 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a6c:	f7ff ff14 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff64 	bl	8001944 <NVIC_EncodePriority>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	200f      	movs	r0, #15
 8001a82:	f7ff ff35 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f7ff ff14 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a8c:	f7ff ff04 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <NVIC_EncodePriority>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	2010      	movs	r0, #16
 8001aa2:	f7ff ff25 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ff04 	bl	80018b4 <__NVIC_EnableIRQ>

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <FLASH_Lock>:

#define sta_add_127 0x0807F800
#define end_add_127 0x0807FFFF

__STATIC_INLINE void FLASH_Lock(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <FLASH_Lock+0x1c>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <FLASH_Lock+0x1c>)
 8001aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001abe:	6153      	str	r3, [r2, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_Unlock>:

__STATIC_INLINE void FLASH_Unlock(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <FLASH_Unlock+0x1c>)
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <FLASH_Unlock+0x20>)
 8001ad8:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <FLASH_Unlock+0x1c>)
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <FLASH_Unlock+0x24>)
 8001ade:	609a      	str	r2, [r3, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	45670123 	.word	0x45670123
 8001af4:	cdef89ab 	.word	0xcdef89ab

08001af8 <FLASH_WaitBusy>:
#define FLASH_TYPEPROGRAM_BYTE	0x00000000U

//#define FLASH

void FLASH_WaitBusy(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	while(((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY)==1);
 8001afc:	bf00      	nop
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <FLASH_WaitBusy+0x20>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d0f8      	beq.n	8001afe <FLASH_WaitBusy+0x6>
//	while((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY);
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40022000 	.word	0x40022000

08001b1c <FLASH_Erase>:

void FLASH_Erase(uint8_t page)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	FLASH_WaitBusy();
 8001b26:	f7ff ffe7 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->SR &= 0x00000000;	//error clear?
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <FLASH_Erase+0x64>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <FLASH_Erase+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <FLASH_Erase+0x64>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <FLASH_Erase+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_BKER);	//set bank2
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <FLASH_Erase+0x64>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <FLASH_Erase+0x64>)
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b48:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_PER;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <FLASH_Erase+0x64>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <FLASH_Erase+0x64>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page<<3));
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <FLASH_Erase+0x64>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	f403 737e 	and.w	r3, r3, #1016	; 0x3f8
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <FLASH_Erase+0x64>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	614b      	str	r3, [r1, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6153      	str	r3, [r2, #20]
	FLASH_WaitBusy();
 8001b74:	f7ff ffc0 	bl	8001af8 <FLASH_WaitBusy>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40022000 	.word	0x40022000

08001b84 <FLASH_WriteByte>:

void FLASH_WriteByte(uint32_t address, uint64_t data)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t data2 = (uint32_t)(data >> 32);
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
	FLASH_WaitBusy();
 8001ba4:	f7ff ffa8 	bl	8001af8 <FLASH_WaitBusy>
	FLASH->SR &= 0x00000000;	//error clear
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PG;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6153      	str	r3, [r2, #20]

	*(__IO uint32_t*)address = (uint32_t)data;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
	*(__IO uint32_t*)(address+4) = data2;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	6013      	str	r3, [r2, #0]
	FLASH_WaitBusy();
 8001bd8:	f7ff ff8e 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->CR &= ~(FLASH_CR_PG);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6153      	str	r3, [r2, #20]
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <FLASH_WriteData>:

void FLASH_WriteData(uint8_t page,uint32_t address, uint64_t* data, uint32_t size)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	FLASH_Unlock();
 8001c04:	f7ff ff64 	bl	8001ad0 <FLASH_Unlock>

	FLASH_Erase(page);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff86 	bl	8001b1c <FLASH_Erase>

	do {
		FLASH_WriteByte(address, *data);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7ff ffb4 	bl	8001b84 <FLASH_WriteByte>
		address+=8;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
		data++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3308      	adds	r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
		size -=8;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	603b      	str	r3, [r7, #0]
	}while(size > 0);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ed      	bne.n	8001c10 <FLASH_WriteData+0x1c>

	FLASH_Lock();
 8001c34:	f7ff ff3c 	bl	8001ab0 <FLASH_Lock>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <FLASH_ReadData>:

void FLASH_ReadData(uint32_t address, uint64_t* data, uint32_t size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address,size);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f015 fdb3 	bl	80177be <memcpy>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_AHB2_GRP1_EnableClock>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000

08001c90 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d101      	bne.n	8001cac <LL_GPIO_IsInputPinSet+0x1c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_GPIO_IsInputPinSet+0x1e>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f7ff ffa8 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ffa5 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ffa2 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff ff9f 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SEN3_GPIO_Port, SEN3_Pin);
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	48a5      	ldr	r0, [pc, #660]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d28:	f7ff ffd5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN2_GPIO_Port, SEN2_Pin);
 8001d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d30:	48a2      	ldr	r0, [pc, #648]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d32:	f7ff ffd0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3a:	48a0      	ldr	r0, [pc, #640]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d3c:	f7ff ffcb 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001d40:	2101      	movs	r1, #1
 8001d42:	489f      	ldr	r0, [pc, #636]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d44:	f7ff ffc7 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001d48:	2102      	movs	r1, #2
 8001d4a:	489d      	ldr	r0, [pc, #628]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d4c:	f7ff ffc3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN1_GPIO_Port, SEN1_Pin);
 8001d50:	2108      	movs	r1, #8
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f7ff ffbe 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN0_GPIO_Port, SEN0_Pin);
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f7ff ffb9 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001d64:	2104      	movs	r1, #4
 8001d66:	4897      	ldr	r0, [pc, #604]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d68:	f7ff ffb5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port, BAT_LED_Pin);
 8001d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d70:	4894      	ldr	r0, [pc, #592]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d72:	f7ff ffb0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT0_GPIO_Port, MOT0_Pin);
 8001d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f7ff ffaa 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT1_GPIO_Port, MOT1_Pin);
 8001d82:	2110      	movs	r1, #16
 8001d84:	488f      	ldr	r0, [pc, #572]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d86:	f7ff ffa6 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	488d      	ldr	r0, [pc, #564]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d8e:	f7ff ffa2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8001d92:	2101      	movs	r1, #1
 8001d94:	488b      	ldr	r0, [pc, #556]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d96:	f7ff ff90 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4889      	ldr	r0, [pc, #548]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da0:	f7ff ff8b 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4887      	ldr	r0, [pc, #540]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da8:	f7ff ff87 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SEN3_Pin;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001db2:	2301      	movs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN3_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	487d      	ldr	r0, [pc, #500]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001dc8:	f013 f8ef 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN2_Pin;
 8001dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN2_GPIO_Port, &GPIO_InitStruct);
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	4875      	ldr	r0, [pc, #468]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001de8:	f013 f8df 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001df2:	2301      	movs	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001e02:	463b      	mov	r3, r7
 8001e04:	4619      	mov	r1, r3
 8001e06:	486d      	ldr	r0, [pc, #436]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001e08:	f013 f8cf 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e10:	2301      	movs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001e20:	463b      	mov	r3, r7
 8001e22:	4619      	mov	r1, r3
 8001e24:	4866      	ldr	r0, [pc, #408]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e26:	f013 f8c0 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	485f      	ldr	r0, [pc, #380]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e44:	f013 f8b1 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN1_Pin;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f013 f8a1 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN0_Pin;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f013 f891 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_gyro_Pin;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_gyro_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4848      	ldr	r0, [pc, #288]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ea2:	f013 f882 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ec0:	f013 f873 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enL_Pin;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enL_GPIO_Port, &GPIO_InitStruct);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4619      	mov	r1, r3
 8001ede:	4839      	ldr	r0, [pc, #228]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ee0:	f013 f863 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAT_LED_Pin;
 8001ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4619      	mov	r1, r3
 8001efe:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f00:	f013 f853 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f013 f846 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f013 f839 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT0_Pin;
 8001f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT0_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f013 f828 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT1_Pin;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f74:	f013 f819 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f92:	f013 f80a 	bl	8014faa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enR_Pin;
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enR_GPIO_Port, &GPIO_InitStruct);
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001fb0:	f012 fffb 	bl	8014faa <LL_GPIO_Init>

}
 8001fb4:	bf00      	nop
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	48001400 	.word	0x48001400
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(uint8_t data){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if((data&0x01)==0x01){ 	LL_GPIO_SetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <SetLED+0x1e>
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <SetLED+0xa4>)
 8001fe0:	f7ff fe6b 	bl	8001cba <LL_GPIO_SetOutputPin>
 8001fe4:	e003      	b.n	8001fee <SetLED+0x26>
	}else{					LL_GPIO_ResetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	4820      	ldr	r0, [pc, #128]	; (800206c <SetLED+0xa4>)
 8001fea:	f7ff fe74 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x02)==0x02){ 	LL_GPIO_SetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <SetLED+0x3a>
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	481d      	ldr	r0, [pc, #116]	; (8002070 <SetLED+0xa8>)
 8001ffc:	f7ff fe5d 	bl	8001cba <LL_GPIO_SetOutputPin>
 8002000:	e003      	b.n	800200a <SetLED+0x42>
	}else{					LL_GPIO_ResetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8002002:	2102      	movs	r1, #2
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <SetLED+0xa8>)
 8002006:	f7ff fe66 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x04)==0x04){ 	LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <SetLED+0x56>
 8002014:	2101      	movs	r1, #1
 8002016:	4816      	ldr	r0, [pc, #88]	; (8002070 <SetLED+0xa8>)
 8002018:	f7ff fe4f 	bl	8001cba <LL_GPIO_SetOutputPin>
 800201c:	e003      	b.n	8002026 <SetLED+0x5e>
	}else{					LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800201e:	2101      	movs	r1, #1
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <SetLED+0xa8>)
 8002022:	f7ff fe58 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x08)==0x08){ 	LL_GPIO_SetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <SetLED+0x74>
 8002030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <SetLED+0xac>)
 8002036:	f7ff fe40 	bl	8001cba <LL_GPIO_SetOutputPin>
 800203a:	e004      	b.n	8002046 <SetLED+0x7e>
	}else{					LL_GPIO_ResetOutputPin(LED3_GPIO_Port,LED3_Pin);
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <SetLED+0xac>)
 8002042:	f7ff fe48 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x10)==0x10){ 	LL_GPIO_SetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <SetLED+0x92>
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <SetLED+0xa4>)
 8002054:	f7ff fe31 	bl	8001cba <LL_GPIO_SetOutputPin>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
	}
}
 8002058:	e003      	b.n	8002062 <SetLED+0x9a>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <SetLED+0xa4>)
 800205e:	f7ff fe3a 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	48000400 	.word	0x48000400
 8002070:	48001400 	.word	0x48001400
 8002074:	48000800 	.word	0x48000800

08002078 <SetBatLED>:

void SetBatLED(uint8_t data){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <SetBatLED+0x1c>
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <SetBatLED+0x30>)
 800208e:	f7ff fe14 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
}
 8002092:	e004      	b.n	800209e <SetBatLED+0x26>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <SetBatLED+0x30>)
 800209a:	f7ff fe1c 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	48000400 	.word	0x48000400

080020ac <SW_IsOn_0>:

int8_t SW_IsOn_0(void){//virtical
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW0_GPIO_Port,SW0_Pin);
 80020b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f7ff fdea 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020bc:	4603      	mov	r3, r0
 80020be:	b25b      	sxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SW_IsOn_1>:

int8_t SW_IsOn_1(void){//horizontal
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW1_GPIO_Port,SW1_Pin);
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f7ff fdde 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b25b      	sxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}

080020dc <Set_SenFL>:

void Set_SenFL(uint8_t data){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <Set_SenFL+0x1c>
 80020ec:	2110      	movs	r1, #16
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f7ff fde2 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
}
 80020f6:	e004      	b.n	8002102 <Set_SenFL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020f8:	2110      	movs	r1, #16
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7ff fdea 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Set_SenSL>:

void Set_SenSL(uint8_t data){
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <Set_SenSL+0x1c>
 800211a:	2108      	movs	r1, #8
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fdcb 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
}
 8002124:	e004      	b.n	8002130 <Set_SenSL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002126:	2108      	movs	r1, #8
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff fdd3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <Set_SenSR>:

void Set_SenSR(uint8_t data){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <Set_SenSR+0x1c>
 8002148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <Set_SenSR+0x30>)
 800214e:	f7ff fdb4 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
}
 8002152:	e004      	b.n	800215e <Set_SenSR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <Set_SenSR+0x30>)
 800215a:	f7ff fdbc 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	48000800 	.word	0x48000800

0800216c <Set_SenFR>:

void Set_SenFR(uint8_t data){
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <Set_SenFR+0x1c>
 800217c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <Set_SenFR+0x30>)
 8002182:	f7ff fd9a 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
}
 8002186:	e004      	b.n	8002192 <Set_SenFR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <Set_SenFR+0x30>)
 800218e:	f7ff fda2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	48000800 	.word	0x48000800

080021a0 <Set_MOT0>:

void Set_MOT0(uint8_t data){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <Set_MOT0+0x1e>
 80021b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f7ff fd7f 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
}
 80021bc:	e005      	b.n	80021ca <Set_MOT0+0x2a>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f7ff fd86 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <Set_MOT1>:

void Set_MOT1(uint8_t data){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <Set_MOT1+0x1a>
 80021e4:	2110      	movs	r1, #16
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <Set_MOT1+0x2c>)
 80021e8:	f7ff fd67 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
}
 80021ec:	e003      	b.n	80021f6 <Set_MOT1+0x22>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021ee:	2110      	movs	r1, #16
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <Set_MOT1+0x2c>)
 80021f2:	f7ff fd70 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	48000400 	.word	0x48000400

08002204 <__NVIC_SetPriorityGrouping>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <LL_RCC_HSI_IsReady+0x24>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d101      	bne.n	8002282 <LL_RCC_HSI_IsReady+0x16>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_HSI_IsReady+0x18>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 0203 	bic.w	r2, r3, #3
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <LL_RCC_GetSysClkSource+0x18>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000

0800232c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002386:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	43db      	mvns	r3, r3
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2103      	movs	r1, #3
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <LL_RCC_PLL_IsReady+0x24>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d101      	bne.n	800242e <LL_RCC_PLL_IsReady+0x16>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_RCC_PLL_IsReady+0x18>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002454:	4013      	ands	r3, r2
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	4311      	orrs	r1, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	f9ff800c 	.word	0xf9ff800c

08002480 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000

080024d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40022000 	.word	0x40022000

08002528 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <LL_FLASH_GetLatency+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000

08002544 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002576:	6093      	str	r3, [r2, #8]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(ch);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 f819 	bl	80055cc <USART_TransmitByte>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff ff91 	bl	80024d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80025ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80025b2:	f7ff ff75 	bl	80024a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f7ff fe24 	bl	8002204 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80025bc:	f7ff ffd4 	bl	8002568 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c0:	f000 f85c 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c4:	f7ff fb96 	bl	8001cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c8:	f7ff fa08 	bl	80019dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025cc:	f002 ff22 	bl	8005414 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80025d0:	f001 f9ec 	bl	80039ac <MX_SPI2_Init>
  MX_ADC1_Init();
 80025d4:	f7fe fd88 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80025d8:	f7fe fea8 	bl	800132c <MX_ADC3_Init>
  MX_SPI1_Init();
 80025dc:	f001 f91a 	bl	8003814 <MX_SPI1_Init>
  MX_ADC4_Init();
 80025e0:	f7fe ff58 	bl	8001494 <MX_ADC4_Init>
  MX_TIM2_Init();
 80025e4:	f002 f9b6 	bl	8004954 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025e8:	f002 fa24 	bl	8004a34 <MX_TIM3_Init>
  MX_TIM1_Init();
 80025ec:	f002 f95a 	bl	80048a4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80025f0:	f002 fa8c 	bl	8004b0c <MX_TIM4_Init>
  MX_TIM5_Init();
 80025f4:	f002 fac8 	bl	8004b88 <MX_TIM5_Init>
  MX_TIM6_Init();
 80025f8:	f002 fb04 	bl	8004c04 <MX_TIM6_Init>
  MX_TIM8_Init();
 80025fc:	f002 fb3c 	bl	8004c78 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  SetLED(0x0E);
 8002600:	200e      	movs	r0, #14
 8002602:	f7ff fce1 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002606:	20c8      	movs	r0, #200	; 0xc8
 8002608:	f013 fec6 	bl	8016398 <LL_mDelay>
  SetLED(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fcdb 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002612:	20c8      	movs	r0, #200	; 0xc8
 8002614:	f013 fec0 	bl	8016398 <LL_mDelay>
  SetLED(0x0E);
 8002618:	200e      	movs	r0, #14
 800261a:	f7ff fcd5 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 800261e:	20c8      	movs	r0, #200	; 0xc8
 8002620:	f013 feba 	bl	8016398 <LL_mDelay>
  SetLED(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fccf 	bl	8001fc8 <SetLED>

  Communication_Initialize();
 800262a:	f002 ffc1 	bl	80055b0 <Communication_Initialize>
  HAL_init();
 800262e:	f006 fa33 	bl	8008a98 <HAL_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002632:	f7ff fd47 	bl	80020c4 <SW_IsOn_1>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <main+0xaa>
		MODE_inc();								// モードを1つ進める
 800263c:	f006 fc94 	bl	8008f68 <MODE_inc>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002640:	20c8      	movs	r0, #200	; 0xc8
 8002642:	f013 fea9 	bl	8016398 <LL_mDelay>
		printf("mode selecting\r\n");
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <main+0xd4>)
 8002648:	f014 fe84 	bl	8017354 <puts>
 800264c:	e00e      	b.n	800266c <main+0xc8>
	}
	else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800264e:	f7ff fd2d 	bl	80020ac <SW_IsOn_0>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d004      	beq.n	8002662 <main+0xbe>
 8002658:	f008 fbf3 	bl	800ae42 <MODE_CheckExe>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <main+0xc8>
//		else if ( SW_ON == SW_EXE_PIN ){
		MODE_exe();								// モード実行
 8002662:	f008 fa03 	bl	800aa6c <MODE_exe>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002666:	20c8      	movs	r0, #200	; 0xc8
 8002668:	f013 fe96 	bl	8016398 <LL_mDelay>
	}
    LL_mDelay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f013 fe93 	bl	8016398 <LL_mDelay>
  Get_Sen_Nowdata();
 8002672:	f00b fbd1 	bl	800de18 <Get_Sen_Nowdata>
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002676:	e7dc      	b.n	8002632 <main+0x8e>
 8002678:	0801c1c0 	.word	0x0801c1c0

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002680:	2004      	movs	r0, #4
 8002682:	f7ff ff3d 	bl	8002500 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8002686:	bf00      	nop
 8002688:	f7ff ff4e 	bl	8002528 <LL_FLASH_GetLatency>
 800268c:	4603      	mov	r3, r0
 800268e:	2b04      	cmp	r3, #4
 8002690:	d1fa      	bne.n	8002688 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8002692:	f7ff ff57 	bl	8002544 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 8002696:	f7ff fdd9 	bl	800224c <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800269a:	bf00      	nop
 800269c:	f7ff fde6 	bl	800226c <LL_RCC_HSI_IsReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d1fa      	bne.n	800269c <SystemClock_Config+0x20>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80026a6:	2040      	movs	r0, #64	; 0x40
 80026a8:	f7ff fdf4 	bl	8002294 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80026ac:	2300      	movs	r3, #0
 80026ae:	2255      	movs	r2, #85	; 0x55
 80026b0:	2130      	movs	r1, #48	; 0x30
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff fec4 	bl	8002440 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80026b8:	f7ff fee2 	bl	8002480 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80026bc:	f7ff fe9c 	bl	80023f8 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026c0:	bf00      	nop
 80026c2:	f7ff fea9 	bl	8002418 <LL_RCC_PLL_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d1fa      	bne.n	80026c2 <SystemClock_Config+0x46>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f7ff fdf7 	bl	80022c0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80026d2:	2080      	movs	r0, #128	; 0x80
 80026d4:	f7ff fe16 	bl	8002304 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026d8:	bf00      	nop
 80026da:	f7ff fe05 	bl	80022e8 <LL_RCC_GetSysClkSource>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d1fa      	bne.n	80026da <SystemClock_Config+0x5e>
  {
  }

  /* Insure 1��s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <SystemClock_Config+0xc8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <SystemClock_Config+0xc8>)
 80026ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ee:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <SystemClock_Config+0xcc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <SystemClock_Config+0xcc>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <SystemClock_Config+0xcc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8002702:	bf00      	nop
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <SystemClock_Config+0xcc>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b63      	cmp	r3, #99	; 0x63
 800270a:	d9fb      	bls.n	8002704 <SystemClock_Config+0x88>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fdf9 	bl	8002304 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fe0a 	bl	800232c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fe1b 	bl	8002354 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <SystemClock_Config+0xd0>)
 8002720:	f013 fe2c 	bl	801637c <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <SystemClock_Config+0xd0>)
 8002726:	f013 fe5f 	bl	80163e8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800272a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800272e:	f7ff fe25 	bl	800237c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <SystemClock_Config+0xd4>)
 8002734:	f7ff fe3c 	bl	80023b0 <LL_RCC_SetADCClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <SystemClock_Config+0xd8>)
 800273a:	f7ff fe39 	bl	80023b0 <LL_RCC_SetADCClockSource>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000edf0 	.word	0xe000edf0
 8002748:	e0001000 	.word	0xe0001000
 800274c:	0a21fe80 	.word	0x0a21fe80
 8002750:	001c0002 	.word	0x001c0002
 8002754:	001e0002 	.word	0x001e0002

08002758 <PARAM_setSpeedType>:
/* ============== */
/*  GainData  */
/* ============== */

void PARAM_setSpeedType( enPARAM_MODE en_mode, enPARAM_MOVE_SPEED en_speed )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	switch( en_mode ){
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	2b17      	cmp	r3, #23
 800276c:	d00e      	beq.n	800278c <PARAM_setSpeedType+0x34>
 800276e:	2b17      	cmp	r3, #23
 8002770:	dc10      	bgt.n	8002794 <PARAM_setSpeedType+0x3c>
 8002772:	2b15      	cmp	r3, #21
 8002774:	d002      	beq.n	800277c <PARAM_setSpeedType+0x24>
 8002776:	2b16      	cmp	r3, #22
 8002778:	d004      	beq.n	8002784 <PARAM_setSpeedType+0x2c>
 800277a:	e00b      	b.n	8002794 <PARAM_setSpeedType+0x3c>
		
		case PARAM_ST:
			en_Speed_st = en_speed;
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <PARAM_setSpeedType+0x4c>)
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	7013      	strb	r3, [r2, #0]
			break;
 8002782:	e00b      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_TRUN:
			en_Speed_trun = en_speed;
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <PARAM_setSpeedType+0x50>)
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	7013      	strb	r3, [r2, #0]
			break;
 800278a:	e007      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_SLA:
			en_Speed_sla = en_speed;
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <PARAM_setSpeedType+0x54>)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	7013      	strb	r3, [r2, #0]
			break;
 8002792:	e003      	b.n	800279c <PARAM_setSpeedType+0x44>
			
		default:
			printf("Can't find parameter type \n\r");
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <PARAM_setSpeedType+0x58>)
 8002796:	f014 fd6f 	bl	8017278 <iprintf>
			break;
 800279a:	bf00      	nop
	}
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000001 	.word	0x20000001
 80027ac:	20000002 	.word	0x20000002
 80027b0:	0801c1d0 	.word	0x0801c1d0

080027b4 <PARAM_getSpeed>:

const stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	const stSPEED* p_adr;
	
	switch( en_mode ){
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b17      	cmp	r3, #23
 80027c2:	bf8c      	ite	hi
 80027c4:	2201      	movhi	r2, #1
 80027c6:	2200      	movls	r2, #0
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d133      	bne.n	8002836 <PARAM_getSpeed+0x82>
 80027ce:	2201      	movs	r2, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <PARAM_getSpeed+0xa0>)
 80027d6:	401a      	ands	r2, r3
 80027d8:	2a00      	cmp	r2, #0
 80027da:	bf14      	ite	ne
 80027dc:	2201      	movne	r2, #1
 80027de:	2200      	moveq	r2, #0
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d112      	bne.n	800280c <PARAM_getSpeed+0x58>
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <PARAM_getSpeed+0xa4>)
 80027e8:	401a      	ands	r2, r3
 80027ea:	2a00      	cmp	r2, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2201      	movne	r2, #1
 80027f0:	2200      	moveq	r2, #0
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	2a00      	cmp	r2, #0
 80027f6:	d117      	bne.n	8002828 <PARAM_getSpeed+0x74>
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <PARAM_getSpeed+0xa8>)
 80027fa:	401a      	ands	r2, r3
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <PARAM_getSpeed+0x66>
 800280a:	e014      	b.n	8002836 <PARAM_getSpeed+0x82>
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StSpeedData[en_Speed_st];
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <PARAM_getSpeed+0xac>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <PARAM_getSpeed+0xb0>)
 8002814:	4413      	add	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
			break;
 8002818:	e017      	b.n	800284a <PARAM_getSpeed+0x96>
			
		case PARAM_TRUN:												// 旋回
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnSpeedData[en_Speed_trun];
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <PARAM_getSpeed+0xb4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <PARAM_getSpeed+0xb8>)
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
			break;
 8002826:	e010      	b.n	800284a <PARAM_getSpeed+0x96>
		case PARAM_ENTRY_SURA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SURA:											// 加速中(スラローム)
		case PARAM_CONST_SURA:											// 等速中(スラローム)
		case PARAM_DEC_SURA:											// 減速中(スラローム)
		case PARAM_EXIT_SURA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <PARAM_getSpeed+0xbc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <PARAM_getSpeed+0xc0>)
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
			break;
 8002834:	e009      	b.n	800284a <PARAM_getSpeed+0x96>

		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("Can't find speed type \n\r");
 8002836:	4810      	ldr	r0, [pc, #64]	; (8002878 <PARAM_getSpeed+0xc4>)
 8002838:	f014 fd1e 	bl	8017278 <iprintf>
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <PARAM_getSpeed+0xbc>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <PARAM_getSpeed+0xc0>)
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
			break;
 8002848:	bf00      	nop
	}
	
	return p_adr;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	002000fe 	.word	0x002000fe
 8002858:	008f8000 	.word	0x008f8000
 800285c:	00401c00 	.word	0x00401c00
 8002860:	20000000 	.word	0x20000000
 8002864:	0801c5f4 	.word	0x0801c5f4
 8002868:	20000001 	.word	0x20000001
 800286c:	0801c644 	.word	0x0801c644
 8002870:	20000002 	.word	0x20000002
 8002874:	0801c694 	.word	0x0801c694
 8002878:	0801c1f0 	.word	0x0801c1f0
 800287c:	00000000 	.word	0x00000000

08002880 <PARAM_makeSra>:
	return p_adr;
}
*/

void PARAM_makeSra( float f_speed, float f_angAcc, float f_g , enSLA_TYPE en_mode)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b094      	sub	sp, #80	; 0x50
 8002884:	af00      	add	r7, sp, #0
 8002886:	ed87 0a03 	vstr	s0, [r7, #12]
 800288a:	edc7 0a02 	vstr	s1, [r7, #8]
 800288e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002892:	4603      	mov	r3, r0
 8002894:	70fb      	strb	r3, [r7, #3]
	float	f_start_x;					// 開始x位置 [mm]
	float	f_start_y;					// 開始y位置 [mm]
	float	f_final_x;					// 最終x位置 [mm]
	float	f_final_y;					// 最終y位置 [mm]
	float	f_final_ang;				// 角減速時の最終角度 [rad]	
	float	f_maxAngleV		= 0;		// 最大角速度[rad/s]
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float	f_timeAcc		= 0;		// 加速時間[s]
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
	float	f_accAngle		= 0;		// 加速角度[rad]
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
	float	f_timeConst		= 0;		// 等速時間[s]
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
	float	f_constAngle	= 0;		// 等速角度[rad]
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
	float	f_ang			= 0;		// 演算用、角度 [rad]
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
	float	f_time			= 0;		// 演算用、時間 [s]
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
	float	f_x;						// 演算用x位置 [mm]
	float	f_y;						// 演算用y位置 [mm]
	uint16_t	i = 0;						// ループ用
 80028c0:	2300      	movs	r3, #0
 80028c2:	867b      	strh	r3, [r7, #50]	; 0x32
	stSLA* 	p_adr = &st_Sla[en_mode];		// 記録する走行データ
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4aa8      	ldr	r2, [pc, #672]	; (8002b70 <PARAM_makeSra+0x2f0>)
 80028d0:	4413      	add	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

	// スラロームに応じた設定値からスラロームに必要なパラメータを演算する 
	switch(en_mode){
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d83a      	bhi.n	8002950 <PARAM_makeSra+0xd0>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <PARAM_makeSra+0x60>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002909 	.word	0x08002909
 80028e8:	08002939 	.word	0x08002939
 80028ec:	08002921 	.word	0x08002921

		case SLA_90:
			f_start_x   = HALF_BLOCK;
 80028f0:	4ba0      	ldr	r3, [pc, #640]	; (8002b74 <PARAM_makeSra+0x2f4>)
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK;
 80028fa:	4b9f      	ldr	r3, [pc, #636]	; (8002b78 <PARAM_makeSra+0x2f8>)
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK;
 80028fe:	4b9d      	ldr	r3, [pc, #628]	; (8002b74 <PARAM_makeSra+0x2f4>)
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002902:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <PARAM_makeSra+0x2fc>)
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002906:	e024      	b.n	8002952 <PARAM_makeSra+0xd2>

		case SLA_45:
			f_start_x   = HALF_BLOCK;
 8002908:	4b9a      	ldr	r3, [pc, #616]	; (8002b74 <PARAM_makeSra+0x2f4>)
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 0.75f;
 8002912:	4b9b      	ldr	r3, [pc, #620]	; (8002b80 <PARAM_makeSra+0x300>)
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.75f;
 8002916:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <PARAM_makeSra+0x300>)
 8002918:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 45.0f * DEG_TO_RAD;
 800291a:	4b9a      	ldr	r3, [pc, #616]	; (8002b84 <PARAM_makeSra+0x304>)
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800291e:	e018      	b.n	8002952 <PARAM_makeSra+0xd2>
			
		case SLA_N90:
			f_start_x   = HALF_BLOCK * 0.5f * 1.4142f;
 8002920:	4b99      	ldr	r3, [pc, #612]	; (8002b88 <PARAM_makeSra+0x308>)
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = HALF_BLOCK * 1.4142f;
 800292a:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <PARAM_makeSra+0x30c>)
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK * 0.5f * 1.4142f;
 800292e:	4b96      	ldr	r3, [pc, #600]	; (8002b88 <PARAM_makeSra+0x308>)
 8002930:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002932:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <PARAM_makeSra+0x2fc>)
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002936:	e00c      	b.n	8002952 <PARAM_makeSra+0xd2>
			
		case SLA_135:
			f_start_x   = HALF_BLOCK;
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <PARAM_makeSra+0x2f4>)
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 1.25f;
 8002942:	4b93      	ldr	r3, [pc, #588]	; (8002b90 <PARAM_makeSra+0x310>)
 8002944:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.25;
 8002946:	4b93      	ldr	r3, [pc, #588]	; (8002b94 <PARAM_makeSra+0x314>)
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 135.0f * DEG_TO_RAD;
 800294a:	4b93      	ldr	r3, [pc, #588]	; (8002b98 <PARAM_makeSra+0x318>)
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800294e:	e000      	b.n	8002952 <PARAM_makeSra+0xd2>

		default:
			break;
 8002950:	bf00      	nop
	}

	// caluculate acc and dec angle speed 
	f_maxAngleV		= f_g / f_speed;							// max angle speed[rad/s] (omega[rad/s] = g[m/s^2] / v[m/s] )
 8002952:	edd7 6a01 	vldr	s13, [r7, #4]
 8002956:	ed97 7a03 	vldr	s14, [r7, #12]
 800295a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	f_timeAcc		= f_maxAngleV / f_angAcc;					// acc time[s]
 8002962:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002966:	ed97 7a02 	vldr	s14, [r7, #8]
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_accAngle		= 0.5f * f_angAcc * f_timeAcc * f_timeAcc;	// acc angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002972:	edd7 7a02 	vldr	s15, [r7, #8]
 8002976:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800297a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	f_constAngle	= f_final_ang - f_accAngle * 2;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
 8002992:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002996:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800299a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc7 7a07 	vstr	s15, [r7, #28]
	f_timeConst		= f_constAngle / f_maxAngleV;				// max angle speed time[s]( t[s] = theta[rad] / omega[rad/s] )
 80029a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80029aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	edc7 7a08 	vstr	s15, [r7, #32]

	// -------------------------------- 
	// sla end position 
	// -------------------------------- 
	// start position 
	f_x		= f_start_x;
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
	f_y		= f_start_y;
 80029ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34

	// ACC 
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80029be:	2300      	movs	r3, #0
 80029c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80029c2:	e05b      	b.n	8002a7c <PARAM_makeSra+0x1fc>
	
		f_time	=  0.001f * (float)i;								// time[s]
 80029c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002b9c <PARAM_makeSra+0x31c>
 80029d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 80029da:	edd7 7a02 	vldr	s15, [r7, #8]
 80029de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 80029fa:	69b8      	ldr	r0, [r7, #24]
 80029fc:	f7fd fdcc 	bl	8000598 <__aeabi_f2d>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	ec43 2b10 	vmov	d0, r2, r3
 8002a08:	f018 fab2 	bl	801af70 <sin>
 8002a0c:	ec53 2b10 	vmov	r2, r3, d0
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f910 	bl	8000c38 <__aeabi_d2f>
 8002a18:	ee07 0a10 	vmov	s14, r0
 8002a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a24:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002b9c <PARAM_makeSra+0x31c>
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 8002a38:	69b8      	ldr	r0, [r7, #24]
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	ec43 2b10 	vmov	d0, r2, r3
 8002a46:	f018 fa3f 	bl	801aec8 <cos>
 8002a4a:	ec53 2b10 	vmov	r2, r3, d0
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f8f1 	bl	8000c38 <__aeabi_d2f>
 8002a56:	ee07 0a10 	vmov	s14, r0
 8002a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002b9c <PARAM_makeSra+0x31c>
 8002a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002a76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a78:	3301      	adds	r3, #1
 8002a7a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a80:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ba0 <PARAM_makeSra+0x320>
 8002a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a8c:	ee17 3a90 	vmov	r3, s15
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d395      	bcc.n	80029c4 <PARAM_makeSra+0x144>
	}
	
	// CONST 
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a9c:	e057      	b.n	8002b4e <PARAM_makeSra+0x2ce>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002a9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002b9c <PARAM_makeSra+0x31c>
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 8002ab4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002ab8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002acc:	69b8      	ldr	r0, [r7, #24]
 8002ace:	f7fd fd63 	bl	8000598 <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	ec43 2b10 	vmov	d0, r2, r3
 8002ada:	f018 fa49 	bl	801af70 <sin>
 8002ade:	ec53 2b10 	vmov	r2, r3, d0
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f8a7 	bl	8000c38 <__aeabi_d2f>
 8002aea:	ee07 0a10 	vmov	s14, r0
 8002aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002b9c <PARAM_makeSra+0x31c>
 8002afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002b0a:	69b8      	ldr	r0, [r7, #24]
 8002b0c:	f7fd fd44 	bl	8000598 <__aeabi_f2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	ec43 2b10 	vmov	d0, r2, r3
 8002b18:	f018 f9d6 	bl	801aec8 <cos>
 8002b1c:	ec53 2b10 	vmov	r2, r3, d0
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe f888 	bl	8000c38 <__aeabi_d2f>
 8002b28:	ee07 0a10 	vmov	s14, r0
 8002b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b34:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002b9c <PARAM_makeSra+0x31c>
 8002b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002b48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b52:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ba0 <PARAM_makeSra+0x320>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5e:	ee17 3a90 	vmov	r3, s15
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d399      	bcc.n	8002a9e <PARAM_makeSra+0x21e>
	}

	// DEC
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b6e:	e07d      	b.n	8002c6c <PARAM_makeSra+0x3ec>
 8002b70:	2000147c 	.word	0x2000147c
 8002b74:	3d3851ec 	.word	0x3d3851ec
 8002b78:	3db851ec 	.word	0x3db851ec
 8002b7c:	3fc90ff9 	.word	0x3fc90ff9
 8002b80:	3d8a3d71 	.word	0x3d8a3d71
 8002b84:	3f490ff9 	.word	0x3f490ff9
 8002b88:	3d02552a 	.word	0x3d02552a
 8002b8c:	3d82552a 	.word	0x3d82552a
 8002b90:	3de66667 	.word	0x3de66667
 8002b94:	3cb851ec 	.word	0x3cb851ec
 8002b98:	4016cbfb 	.word	0x4016cbfb
 8002b9c:	3a83126f 	.word	0x3a83126f
 8002ba0:	447a0000 	.word	0x447a0000
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002ba4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002b9c <PARAM_makeSra+0x31c>
 8002bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_constAngle +0.5f * f_angAcc * f_time * f_time;	// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002bba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002bea:	69b8      	ldr	r0, [r7, #24]
 8002bec:	f7fd fcd4 	bl	8000598 <__aeabi_f2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	ec43 2b10 	vmov	d0, r2, r3
 8002bf8:	f018 f9ba 	bl	801af70 <sin>
 8002bfc:	ec53 2b10 	vmov	r2, r3, d0
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fe f818 	bl	8000c38 <__aeabi_d2f>
 8002c08:	ee07 0a10 	vmov	s14, r0
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 8002b9c <PARAM_makeSra+0x31c>
 8002c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002c28:	69b8      	ldr	r0, [r7, #24]
 8002c2a:	f7fd fcb5 	bl	8000598 <__aeabi_f2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	ec43 2b10 	vmov	d0, r2, r3
 8002c36:	f018 f947 	bl	801aec8 <cos>
 8002c3a:	ec53 2b10 	vmov	r2, r3, d0
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7fd fff9 	bl	8000c38 <__aeabi_d2f>
 8002c46:	ee07 0a10 	vmov	s14, r0
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8002b9c <PARAM_makeSra+0x31c>
 8002c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002c66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002c68:	3301      	adds	r3, #1
 8002c6a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c70:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8002ba0 <PARAM_makeSra+0x320>
 8002c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7c:	ee17 3a90 	vmov	r3, s15
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d38d      	bcc.n	8002ba4 <PARAM_makeSra+0x324>
	}

	// ---------------------------- 
	//  sla parameter  
	// ---------------------------- 
	p_adr->f_speed				= f_speed;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]
	printf("enter speed %5.2f\n\r",f_speed);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7fd fc82 	bl	8000598 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	48c9      	ldr	r0, [pc, #804]	; (8002fc0 <PARAM_makeSra+0x740>)
 8002c9a:	f014 faed 	bl	8017278 <iprintf>
	p_adr->f_angAcc				= f_angAcc;// * RAD_TO_DEG ;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	605a      	str	r2, [r3, #4]
	printf("angle acc%5.2f\n\r",f_angAcc);// * RAD_TO_DEG);
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	f7fd fc77 	bl	8000598 <__aeabi_f2d>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	48c5      	ldr	r0, [pc, #788]	; (8002fc4 <PARAM_makeSra+0x744>)
 8002cb0:	f014 fae2 	bl	8017278 <iprintf>
	p_adr->f_angvel				= f_maxAngleV;// * RAD_TO_DEG;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb8:	609a      	str	r2, [r3, #8]
	printf("max angle speed%5.2f\n\r",f_maxAngleV);// * RAD_TO_DEG);
 8002cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cbc:	f7fd fc6c 	bl	8000598 <__aeabi_f2d>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	48c0      	ldr	r0, [pc, #768]	; (8002fc8 <PARAM_makeSra+0x748>)
 8002cc6:	f014 fad7 	bl	8017278 <iprintf>
	p_adr->us_accAngvelTime		= (uint16_t)( f_timeAcc * 1000.0f );
 8002cca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002fcc <PARAM_makeSra+0x74c>
 8002cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cda:	ee17 3a90 	vmov	r3, s15
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	829a      	strh	r2, [r3, #20]
	printf("time of angle acc %5.2f\n\r",f_timeAcc * 1000.0f);
 8002ce4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ce8:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002fcc <PARAM_makeSra+0x74c>
 8002cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf0:	ee17 0a90 	vmov	r0, s15
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	48b4      	ldr	r0, [pc, #720]	; (8002fd0 <PARAM_makeSra+0x750>)
 8002cfe:	f014 fabb 	bl	8017278 <iprintf>
	p_adr->us_constAngvelTime	= (uint16_t)( f_timeConst * 1000.0f );
 8002d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d06:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002fcc <PARAM_makeSra+0x74c>
 8002d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d12:	ee17 3a90 	vmov	r3, s15
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	82da      	strh	r2, [r3, #22]
	printf("time of constant angle acc %5.2f\n\r",f_timeConst * 1000.0f);
 8002d1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d20:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002fcc <PARAM_makeSra+0x74c>
 8002d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d28:	ee17 0a90 	vmov	r0, s15
 8002d2c:	f7fd fc34 	bl	8000598 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	48a7      	ldr	r0, [pc, #668]	; (8002fd4 <PARAM_makeSra+0x754>)
 8002d36:	f014 fa9f 	bl	8017278 <iprintf>
	p_adr->f_ang_AccEnd			= f_accAngle;// * RAD_TO_DEG;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	619a      	str	r2, [r3, #24]
	printf("acc angle[deg] %5.2f\n\r",f_accAngle);// * RAD_TO_DEG);
 8002d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d42:	f7fd fc29 	bl	8000598 <__aeabi_f2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	48a3      	ldr	r0, [pc, #652]	; (8002fd8 <PARAM_makeSra+0x758>)
 8002d4c:	f014 fa94 	bl	8017278 <iprintf>
	p_adr->f_ang_ConstEnd		= ( f_accAngle + f_constAngle );// * RAD_TO_DEG;
 8002d50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	edc3 7a07 	vstr	s15, [r3, #28]
	printf("const angle[deg] %5.2f\n\r",( f_accAngle + f_constAngle ));// * RAD_TO_DEG);
 8002d62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	ee17 0a90 	vmov	r0, s15
 8002d72:	f7fd fc11 	bl	8000598 <__aeabi_f2d>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4898      	ldr	r0, [pc, #608]	; (8002fdc <PARAM_makeSra+0x75c>)
 8002d7c:	f014 fa7c 	bl	8017278 <iprintf>
	p_adr->f_ang_Total			= f_final_ang;// * RAD_TO_DEG;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d84:	621a      	str	r2, [r3, #32]
	printf("angle [deg] %5.2f\n\r",f_final_ang);// * RAD_TO_DEG);
 8002d86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d88:	f7fd fc06 	bl	8000598 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4893      	ldr	r0, [pc, #588]	; (8002fe0 <PARAM_makeSra+0x760>)
 8002d92:	f014 fa71 	bl	8017278 <iprintf>
	
	// calaculate enter and exit length 
	switch(en_mode){
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	f200 80dc 	bhi.w	8002f56 <PARAM_makeSra+0x6d6>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <PARAM_makeSra+0x524>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002e17 	.word	0x08002e17
 8002dac:	08002edd 	.word	0x08002edd
 8002db0:	08002e7b 	.word	0x08002e7b
		case SLA_90:
			p_adr->f_escapeLen = f_final_x - f_x+0.003 ;
 8002db4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002db8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc0:	ee17 0a90 	vmov	r0, s15
 8002dc4:	f7fd fbe8 	bl	8000598 <__aeabi_f2d>
 8002dc8:	a375      	add	r3, pc, #468	; (adr r3, 8002fa0 <PARAM_makeSra+0x720>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fa85 	bl	80002dc <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd ff2d 	bl	8000c38 <__aeabi_d2f>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.001 ;
 8002de4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002de8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df0:	ee17 0a90 	vmov	r0, s15
 8002df4:	f7fd fbd0 	bl	8000598 <__aeabi_f2d>
 8002df8:	a36b      	add	r3, pc, #428	; (adr r3, 8002fa8 <PARAM_makeSra+0x728>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fa6b 	bl	80002d8 <__aeabi_dsub>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd ff15 	bl	8000c38 <__aeabi_d2f>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	60da      	str	r2, [r3, #12]
			break;
 8002e14:	e0a0      	b.n	8002f58 <PARAM_makeSra+0x6d8>

		case SLA_45:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.00;
 8002e16:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e22:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002fe4 <PARAM_makeSra+0x764>
 8002e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002fe8 <PARAM_makeSra+0x768>
 8002e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	edc3 7a04 	vstr	s15, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y - ( f_final_x - f_x )+0.003;
 8002e38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e44:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e54:	ee17 0a90 	vmov	r0, s15
 8002e58:	f7fd fb9e 	bl	8000598 <__aeabi_f2d>
 8002e5c:	a350      	add	r3, pc, #320	; (adr r3, 8002fa0 <PARAM_makeSra+0x720>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fa3b 	bl	80002dc <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fee3 	bl	8000c38 <__aeabi_d2f>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	60da      	str	r2, [r3, #12]
			break;
 8002e78:	e06e      	b.n	8002f58 <PARAM_makeSra+0x6d8>

		case SLA_N90:
			p_adr->f_escapeLen = f_final_x - f_x+0.002;
 8002e7a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e7e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	ee17 0a90 	vmov	r0, s15
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	a348      	add	r3, pc, #288	; (adr r3, 8002fb0 <PARAM_makeSra+0x730>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fa22 	bl	80002dc <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd feca 	bl	8000c38 <__aeabi_d2f>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.002;
 8002eaa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002eae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb6:	ee17 0a90 	vmov	r0, s15
 8002eba:	f7fd fb6d 	bl	8000598 <__aeabi_f2d>
 8002ebe:	a33c      	add	r3, pc, #240	; (adr r3, 8002fb0 <PARAM_makeSra+0x730>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fa08 	bl	80002d8 <__aeabi_dsub>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f7fd feb2 	bl	8000c38 <__aeabi_d2f>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	60da      	str	r2, [r3, #12]
			break;
 8002eda:	e03d      	b.n	8002f58 <PARAM_makeSra+0x6d8>

		case SLA_135:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.005;
 8002edc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ee0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002fe4 <PARAM_makeSra+0x764>
 8002eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef0:	ee17 0a90 	vmov	r0, s15
 8002ef4:	f7fd fb50 	bl	8000598 <__aeabi_f2d>
 8002ef8:	a32f      	add	r3, pc, #188	; (adr r3, 8002fb8 <PARAM_makeSra+0x738>)
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	f7fd f9ed 	bl	80002dc <__adddf3>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7fd fe95 	bl	8000c38 <__aeabi_d2f>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y + ( f_final_x - f_x )-0.003;
 8002f14:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f20:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002f24:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fb30 	bl	8000598 <__aeabi_f2d>
 8002f38:	a319      	add	r3, pc, #100	; (adr r3, 8002fa0 <PARAM_makeSra+0x720>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd f9cb 	bl	80002d8 <__aeabi_dsub>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fe75 	bl	8000c38 <__aeabi_d2f>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	60da      	str	r2, [r3, #12]
			break;
 8002f54:	e000      	b.n	8002f58 <PARAM_makeSra+0x6d8>

		default:
			break;
 8002f56:	bf00      	nop
	}
	printf("entry %6.4f\n\r",f_final_x - f_x);
 8002f58:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002f5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	ee17 0a90 	vmov	r0, s15
 8002f68:	f7fd fb16 	bl	8000598 <__aeabi_f2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	481e      	ldr	r0, [pc, #120]	; (8002fec <PARAM_makeSra+0x76c>)
 8002f72:	f014 f981 	bl	8017278 <iprintf>
	printf("escape %6.4f\n\r",f_final_y - f_y);
 8002f76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	ee17 0a90 	vmov	r0, s15
 8002f86:	f7fd fb07 	bl	8000598 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <PARAM_makeSra+0x770>)
 8002f90:	f014 f972 	bl	8017278 <iprintf>
}
 8002f94:	bf00      	nop
 8002f96:	3750      	adds	r7, #80	; 0x50
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	bc6a7efa 	.word	0xbc6a7efa
 8002fa4:	3f689374 	.word	0x3f689374
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fb4:	3f60624d 	.word	0x3f60624d
 8002fb8:	47ae147b 	.word	0x47ae147b
 8002fbc:	3f747ae1 	.word	0x3f747ae1
 8002fc0:	0801c20c 	.word	0x0801c20c
 8002fc4:	0801c220 	.word	0x0801c220
 8002fc8:	0801c234 	.word	0x0801c234
 8002fcc:	447a0000 	.word	0x447a0000
 8002fd0:	0801c24c 	.word	0x0801c24c
 8002fd4:	0801c268 	.word	0x0801c268
 8002fd8:	0801c28c 	.word	0x0801c28c
 8002fdc:	0801c2a4 	.word	0x0801c2a4
 8002fe0:	0801c2c0 	.word	0x0801c2c0
 8002fe4:	3fb50481 	.word	0x3fb50481
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	0801c2d4 	.word	0x0801c2d4
 8002ff0:	0801c2e4 	.word	0x0801c2e4

08002ff4 <PARAM_getSra>:

stSLA* PARAM_getSra( enSLA_TYPE en_mode )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	return &st_Sla[en_mode];
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4a03      	ldr	r2, [pc, #12]	; (8003018 <PARAM_getSra+0x24>)
 800300a:	4413      	add	r3, r2
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	2000147c 	.word	0x2000147c

0800301c <initQueue>:
	}
	printf("\n");
}

//キューの初期化
void initQueue(queue_t* pQueue) {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	int i;
	//キューの中身を0埋め
	for (i = 0; i <= SIZE - 1; i++) {
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e013      	b.n	8003052 <initQueue+0x36>
		pQueue->data[i].x =  0 ;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	2100      	movs	r1, #0
 8003030:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		pQueue->data[i].y =  0 ;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	705a      	strb	r2, [r3, #1]
		pQueue->data[i].step =  0 ;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	2200      	movs	r2, #0
 800304a:	805a      	strh	r2, [r3, #2]
	for (i = 0; i <= SIZE - 1; i++) {
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b3f      	cmp	r3, #63	; 0x3f
 8003056:	dde8      	ble.n	800302a <initQueue+0xe>
	}
	//初期化
	pQueue->head = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pQueue->tail = 0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pQueue->flag = EMPTY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
//	printQueue(pQueue);
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <enqueue>:


//enqueue関数
void enqueue(queue_t* pQueue, stPOSITION value) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
//	printf("enQ(%d)\n", value);
	//キューがFullの処理
	if (pQueue->flag == FULL) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800308c:	2b02      	cmp	r3, #2
 800308e:	d103      	bne.n	8003098 <enqueue+0x1c>
		printf("Full\n");
 8003090:	4817      	ldr	r0, [pc, #92]	; (80030f0 <enqueue+0x74>)
 8003092:	f014 f95f 	bl	8017354 <puts>
		return;
 8003096:	e028      	b.n	80030ea <enqueue+0x6e>
	}
	//キューがFullでないので、enqueue操作
	pQueue->data[pQueue->tail] = value;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	//リングバッファのため、tailが配列の終端だったら0にする
	if (pQueue->tail == SIZE - 1) {
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030ac:	2b3f      	cmp	r3, #63	; 0x3f
 80030ae:	d104      	bne.n	80030ba <enqueue+0x3e>
		pQueue->tail = 0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80030b8:	e006      	b.n	80030c8 <enqueue+0x4c>
		//終端でなければ、tailをインクリメント
	}
	else {
		pQueue->tail++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d104      	bne.n	80030e2 <enqueue+0x66>
		pQueue->flag = FULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80030e0:	e003      	b.n	80030ea <enqueue+0x6e>
	}
	else {
		pQueue->flag = AVAILABLE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);
}
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	0801c2f8 	.word	0x0801c2f8

080030f4 <dequeue>:

//dequeue関数
stPOSITION dequeue(queue_t* pQueue) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
//	printf("deQ\n");
	stPOSITION dequeue;
	//キューがEmptyの処理
	if (pQueue->flag == EMPTY) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <dequeue+0x2a>
		printf("Empty\n");
 8003106:	482c      	ldr	r0, [pc, #176]	; (80031b8 <dequeue+0xc4>)
 8003108:	f014 f924 	bl	8017354 <puts>
		dequeue.x = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	723b      	strb	r3, [r7, #8]
		dequeue.y = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	727b      	strb	r3, [r7, #9]
		dequeue.step = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	817b      	strh	r3, [r7, #10]
		return  dequeue ;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e041      	b.n	80031a2 <dequeue+0xae>
	}
	dequeue = pQueue->data[pQueue->head];
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	60bb      	str	r3, [r7, #8]
	//キューがEmptyでなければ、dequeue操作
	pQueue->data[pQueue->head].x =  0 ;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2100      	movs	r1, #0
 8003136:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pQueue->data[pQueue->head].y =  0 ;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	2200      	movs	r2, #0
 8003148:	705a      	strb	r2, [r3, #1]
	pQueue->data[pQueue->head].step =  0 ;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	805a      	strh	r2, [r3, #2]
	//リングバッファのため、headが配列の終端だったら0にする
	if (pQueue->head == SIZE - 1) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	2b3f      	cmp	r3, #63	; 0x3f
 8003162:	d104      	bne.n	800316e <dequeue+0x7a>
		pQueue->head = 0;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800316c:	e006      	b.n	800317c <dequeue+0x88>
		//終端でなければ、headをインクリメント
	}
	else {
		pQueue->head++;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003188:	429a      	cmp	r2, r3
 800318a:	d104      	bne.n	8003196 <dequeue+0xa2>
		pQueue->flag = EMPTY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8003194:	e003      	b.n	800319e <dequeue+0xaa>
	}
	else {
		pQueue->flag = AVAILABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);

	return dequeue;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	60fb      	str	r3, [r7, #12]
}
 80031a2:	2300      	movs	r3, #0
 80031a4:	89ba      	ldrh	r2, [r7, #12]
 80031a6:	f362 030f 	bfi	r3, r2, #0, #16
 80031aa:	89fa      	ldrh	r2, [r7, #14]
 80031ac:	f362 431f 	bfi	r3, r2, #16, #16
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0801c300 	.word	0x0801c300

080031bc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <LL_DMA_EnableChannel+0x40>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <LL_DMA_EnableChannel+0x40>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	440a      	add	r2, r1
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	4611      	mov	r1, r2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	440a      	add	r2, r1
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6013      	str	r3, [r2, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	0801c6e4 	.word	0x0801c6e4

08003200 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <LL_DMA_DisableChannel+0x40>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <LL_DMA_DisableChannel+0x40>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	440a      	add	r2, r1
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	4611      	mov	r1, r2
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	440a      	add	r2, r1
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	0801c6e4 	.word	0x0801c6e4

08003244 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <LL_DMA_SetDataTransferDirection+0x4c>)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4413      	add	r3, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	4908      	ldr	r1, [pc, #32]	; (8003290 <LL_DMA_SetDataTransferDirection+0x4c>)
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	440a      	add	r2, r1
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	4611      	mov	r1, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	440a      	add	r2, r1
 800327a:	4611      	mov	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	0801c6e4 	.word	0x0801c6e4

08003294 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <LL_DMA_SetMode+0x48>)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	4413      	add	r3, r2
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 0220 	bic.w	r2, r3, #32
 80032b8:	4908      	ldr	r1, [pc, #32]	; (80032dc <LL_DMA_SetMode+0x48>)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	440b      	add	r3, r1
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	440b      	add	r3, r1
 80032c6:	4619      	mov	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	0801c6e4 	.word	0x0801c6e4

080032e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <LL_DMA_SetPeriphIncMode+0x48>)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4413      	add	r3, r2
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003304:	4908      	ldr	r1, [pc, #32]	; (8003328 <LL_DMA_SetPeriphIncMode+0x48>)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	440b      	add	r3, r1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	440b      	add	r3, r1
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	0801c6e4 	.word	0x0801c6e4

0800332c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <LL_DMA_SetMemoryIncMode+0x48>)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4413      	add	r3, r2
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003350:	4908      	ldr	r1, [pc, #32]	; (8003374 <LL_DMA_SetMemoryIncMode+0x48>)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	440b      	add	r3, r1
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	440b      	add	r3, r1
 800335e:	4619      	mov	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	0801c6e4 	.word	0x0801c6e4

08003378 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <LL_DMA_SetPeriphSize+0x48>)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4413      	add	r3, r2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	4413      	add	r3, r2
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339c:	4908      	ldr	r1, [pc, #32]	; (80033c0 <LL_DMA_SetPeriphSize+0x48>)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	440b      	add	r3, r1
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	440b      	add	r3, r1
 80033aa:	4619      	mov	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	0801c6e4 	.word	0x0801c6e4

080033c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <LL_DMA_SetMemorySize+0x48>)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	4413      	add	r3, r2
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033e8:	4908      	ldr	r1, [pc, #32]	; (800340c <LL_DMA_SetMemorySize+0x48>)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	440b      	add	r3, r1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	440b      	add	r3, r1
 80033f6:	4619      	mov	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	0801c6e4 	.word	0x0801c6e4

08003410 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8003420:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003434:	4908      	ldr	r1, [pc, #32]	; (8003458 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	440b      	add	r3, r1
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	440b      	add	r3, r1
 8003442:	4619      	mov	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
             Priority);
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	0801c6e4 	.word	0x0801c6e4

0800345c <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <LL_DMA_SetDataLength+0x48>)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4413      	add	r3, r2
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	4908      	ldr	r1, [pc, #32]	; (80034a4 <LL_DMA_SetDataLength+0x48>)
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	440a      	add	r2, r1
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	4611      	mov	r1, r2
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	440a      	add	r2, r1
 800348e:	4611      	mov	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	0801c6e4 	.word	0x0801c6e4

080034a8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d114      	bne.n	80034ea <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <LL_DMA_ConfigAddresses+0x78>)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	4413      	add	r3, r2
 80034ce:	461a      	mov	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <LL_DMA_ConfigAddresses+0x78>)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	4413      	add	r3, r2
 80034e2:	461a      	mov	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 80034e8:	e013      	b.n	8003512 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <LL_DMA_ConfigAddresses+0x78>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4413      	add	r3, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <LL_DMA_ConfigAddresses+0x78>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	4413      	add	r3, r2
 800350c:	461a      	mov	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	60d3      	str	r3, [r2, #12]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	0801c6e4 	.word	0x0801c6e4

08003524 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003538:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800354c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003562:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <LL_DMA_EnableIT_TC+0x40>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4908      	ldr	r1, [pc, #32]	; (80035b8 <LL_DMA_EnableIT_TC+0x40>)
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	440a      	add	r2, r1
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	4611      	mov	r1, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	440a      	add	r2, r1
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6013      	str	r3, [r2, #0]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	0801c6e4 	.word	0x0801c6e4

080035bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <LL_DMA_EnableIT_TE+0x40>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <LL_DMA_EnableIT_TE+0x40>)
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	440a      	add	r2, r1
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	4611      	mov	r1, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	440a      	add	r2, r1
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	0801c6e4 	.word	0x0801c6e4

08003600 <LL_AHB2_GRP1_EnableClock>:
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800360a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360c:	4907      	ldr	r1, [pc, #28]	; (800362c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4313      	orrs	r3, r2
 8003612:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40021000 	.word	0x40021000

08003630 <LL_APB1_GRP1_EnableClock>:
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003638:	4b08      	ldr	r3, [pc, #32]	; (800365c <LL_APB1_GRP1_EnableClock+0x2c>)
 800363a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <LL_APB1_GRP1_EnableClock+0x2c>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003646:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000

08003660 <LL_APB2_GRP1_EnableClock>:
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <LL_APB2_GRP1_EnableClock+0x2c>)
 800366a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <LL_APB2_GRP1_EnableClock+0x2c>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4313      	orrs	r3, r2
 8003672:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40021000 	.word	0x40021000

08003690 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d101      	bne.n	80036c8 <LL_SPI_IsEnabled+0x18>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <LL_SPI_IsEnabled+0x1a>
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 0210 	bic.w	r2, r3, #16
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f023 0208 	bic.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f043 0202 	orr.w	r2, r3, #2
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	605a      	str	r2, [r3, #4]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	330c      	adds	r3, #12
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	b2db      	uxtb	r3, r3
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_GPIO_SetOutputPin>:
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_GPIO_ResetOutputPin>:
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b090      	sub	sp, #64	; 0x40
 8003818:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800381a:	f107 0318 	add.w	r3, r7, #24
 800381e:	2228      	movs	r2, #40	; 0x28
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f013 ff4c 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	463b      	mov	r3, r7
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003838:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800383c:	f7ff ff10 	bl	8003660 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003840:	2001      	movs	r0, #1
 8003842:	f7ff fedd 	bl	8003600 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003846:	2320      	movs	r3, #32
 8003848:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800384a:	2302      	movs	r3, #2
 800384c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800385a:	2305      	movs	r3, #5
 800385c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	463b      	mov	r3, r7
 8003860:	4619      	mov	r1, r3
 8003862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003866:	f011 fba0 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800386e:	2302      	movs	r3, #2
 8003870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800387e:	2305      	movs	r3, #5
 8003880:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	463b      	mov	r3, r7
 8003884:	4619      	mov	r1, r3
 8003886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388a:	f011 fb8e 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003892:	2302      	movs	r3, #2
 8003894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80038a2:	2305      	movs	r3, #5
 80038a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	463b      	mov	r3, r7
 80038a8:	4619      	mov	r1, r3
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f011 fb7c 	bl	8014faa <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_SPI1_RX);
 80038b2:	220a      	movs	r2, #10
 80038b4:	2100      	movs	r1, #0
 80038b6:	483b      	ldr	r0, [pc, #236]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038b8:	f7ff fe34 	bl	8003524 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	4838      	ldr	r0, [pc, #224]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038c2:	f7ff fcbf 	bl	8003244 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	4836      	ldr	r0, [pc, #216]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038cc:	f7ff fda0 	bl	8003410 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2100      	movs	r1, #0
 80038d4:	4833      	ldr	r0, [pc, #204]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038d6:	f7ff fcdd 	bl	8003294 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	4831      	ldr	r0, [pc, #196]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038e0:	f7ff fcfe 	bl	80032e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	2100      	movs	r1, #0
 80038e8:	482e      	ldr	r0, [pc, #184]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038ea:	f7ff fd1f 	bl	800332c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	482c      	ldr	r0, [pc, #176]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038f4:	f7ff fd40 	bl	8003378 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	4829      	ldr	r0, [pc, #164]	; (80039a4 <MX_SPI1_Init+0x190>)
 80038fe:	f7ff fd61 	bl	80033c4 <LL_DMA_SetMemorySize>

  /* SPI1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_SPI1_TX);
 8003902:	220b      	movs	r2, #11
 8003904:	2101      	movs	r1, #1
 8003906:	4827      	ldr	r0, [pc, #156]	; (80039a4 <MX_SPI1_Init+0x190>)
 8003908:	f7ff fe0c 	bl	8003524 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800390c:	2210      	movs	r2, #16
 800390e:	2101      	movs	r1, #1
 8003910:	4824      	ldr	r0, [pc, #144]	; (80039a4 <MX_SPI1_Init+0x190>)
 8003912:	f7ff fc97 	bl	8003244 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003916:	2200      	movs	r2, #0
 8003918:	2101      	movs	r1, #1
 800391a:	4822      	ldr	r0, [pc, #136]	; (80039a4 <MX_SPI1_Init+0x190>)
 800391c:	f7ff fd78 	bl	8003410 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8003920:	2200      	movs	r2, #0
 8003922:	2101      	movs	r1, #1
 8003924:	481f      	ldr	r0, [pc, #124]	; (80039a4 <MX_SPI1_Init+0x190>)
 8003926:	f7ff fcb5 	bl	8003294 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800392a:	2200      	movs	r2, #0
 800392c:	2101      	movs	r1, #1
 800392e:	481d      	ldr	r0, [pc, #116]	; (80039a4 <MX_SPI1_Init+0x190>)
 8003930:	f7ff fcd6 	bl	80032e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	2101      	movs	r1, #1
 8003938:	481a      	ldr	r0, [pc, #104]	; (80039a4 <MX_SPI1_Init+0x190>)
 800393a:	f7ff fcf7 	bl	800332c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800393e:	2200      	movs	r2, #0
 8003940:	2101      	movs	r1, #1
 8003942:	4818      	ldr	r0, [pc, #96]	; (80039a4 <MX_SPI1_Init+0x190>)
 8003944:	f7ff fd18 	bl	8003378 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8003948:	2200      	movs	r2, #0
 800394a:	2101      	movs	r1, #1
 800394c:	4815      	ldr	r0, [pc, #84]	; (80039a4 <MX_SPI1_Init+0x190>)
 800394e:	f7ff fd39 	bl	80033c4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003956:	f44f 7382 	mov.w	r3, #260	; 0x104
 800395a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800395c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003960:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003962:	2302      	movs	r3, #2
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003966:	2301      	movs	r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003970:	2318      	movs	r3, #24
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800397c:	2307      	movs	r3, #7
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003980:	f107 0318 	add.w	r3, r7, #24
 8003984:	4619      	mov	r1, r3
 8003986:	4808      	ldr	r0, [pc, #32]	; (80039a8 <MX_SPI1_Init+0x194>)
 8003988:	f011 fe49 	bl	801561e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800398c:	2100      	movs	r1, #0
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <MX_SPI1_Init+0x194>)
 8003990:	f7ff fea1 	bl	80036d6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <MX_SPI1_Init+0x194>)
 8003996:	f7ff fec4 	bl	8003722 <LL_SPI_DisableNSSPulseMgt>

}
 800399a:	bf00      	nop
 800399c:	3740      	adds	r7, #64	; 0x40
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40013000 	.word	0x40013000

080039ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b090      	sub	sp, #64	; 0x40
 80039b0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039b2:	f107 0318 	add.w	r3, r7, #24
 80039b6:	2228      	movs	r2, #40	; 0x28
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f013 fe80 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	463b      	mov	r3, r7
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039d4:	f7ff fe2c 	bl	8003630 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80039d8:	2002      	movs	r0, #2
 80039da:	f7ff fe11 	bl	8003600 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80039de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039e4:	2302      	movs	r3, #2
 80039e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039f4:	2305      	movs	r3, #5
 80039f6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f8:	463b      	mov	r3, r7
 80039fa:	4619      	mov	r1, r3
 80039fc:	484f      	ldr	r0, [pc, #316]	; (8003b3c <MX_SPI2_Init+0x190>)
 80039fe:	f011 fad4 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8003a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a18:	2305      	movs	r3, #5
 8003a1a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4846      	ldr	r0, [pc, #280]	; (8003b3c <MX_SPI2_Init+0x190>)
 8003a22:	f011 fac2 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a3c:	2305      	movs	r3, #5
 8003a3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	463b      	mov	r3, r7
 8003a42:	4619      	mov	r1, r3
 8003a44:	483d      	ldr	r0, [pc, #244]	; (8003b3c <MX_SPI2_Init+0x190>)
 8003a46:	f011 fab0 	bl	8014faa <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_RX);
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	483c      	ldr	r0, [pc, #240]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a50:	f7ff fd68 	bl	8003524 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2102      	movs	r1, #2
 8003a58:	4839      	ldr	r0, [pc, #228]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a5a:	f7ff fbf3 	bl	8003244 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2102      	movs	r1, #2
 8003a62:	4837      	ldr	r0, [pc, #220]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a64:	f7ff fcd4 	bl	8003410 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4834      	ldr	r0, [pc, #208]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a6e:	f7ff fc11 	bl	8003294 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2102      	movs	r1, #2
 8003a76:	4832      	ldr	r0, [pc, #200]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a78:	f7ff fc32 	bl	80032e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	2102      	movs	r1, #2
 8003a80:	482f      	ldr	r0, [pc, #188]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a82:	f7ff fc53 	bl	800332c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2102      	movs	r1, #2
 8003a8a:	482d      	ldr	r0, [pc, #180]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a8c:	f7ff fc74 	bl	8003378 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8003a90:	2200      	movs	r2, #0
 8003a92:	2102      	movs	r1, #2
 8003a94:	482a      	ldr	r0, [pc, #168]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003a96:	f7ff fc95 	bl	80033c4 <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_SPI2_TX);
 8003a9a:	220d      	movs	r2, #13
 8003a9c:	2103      	movs	r1, #3
 8003a9e:	4828      	ldr	r0, [pc, #160]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003aa0:	f7ff fd40 	bl	8003524 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	2103      	movs	r1, #3
 8003aa8:	4825      	ldr	r0, [pc, #148]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003aaa:	f7ff fbcb 	bl	8003244 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	4823      	ldr	r0, [pc, #140]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003ab4:	f7ff fcac 	bl	8003410 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2103      	movs	r1, #3
 8003abc:	4820      	ldr	r0, [pc, #128]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003abe:	f7ff fbe9 	bl	8003294 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2103      	movs	r1, #3
 8003ac6:	481e      	ldr	r0, [pc, #120]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003ac8:	f7ff fc0a 	bl	80032e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	2103      	movs	r1, #3
 8003ad0:	481b      	ldr	r0, [pc, #108]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003ad2:	f7ff fc2b 	bl	800332c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4819      	ldr	r0, [pc, #100]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003adc:	f7ff fc4c 	bl	8003378 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	4816      	ldr	r0, [pc, #88]	; (8003b40 <MX_SPI2_Init+0x194>)
 8003ae6:	f7ff fc6d 	bl	80033c4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003aee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003af2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003af4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003af8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003afa:	2302      	movs	r3, #2
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003b08:	2318      	movs	r3, #24
 8003b0a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003b14:	2307      	movs	r3, #7
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003b18:	f107 0318 	add.w	r3, r7, #24
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4809      	ldr	r0, [pc, #36]	; (8003b44 <MX_SPI2_Init+0x198>)
 8003b20:	f011 fd7d 	bl	801561e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003b24:	2100      	movs	r1, #0
 8003b26:	4807      	ldr	r0, [pc, #28]	; (8003b44 <MX_SPI2_Init+0x198>)
 8003b28:	f7ff fdd5 	bl	80036d6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003b2c:	4805      	ldr	r0, [pc, #20]	; (8003b44 <MX_SPI2_Init+0x198>)
 8003b2e:	f7ff fdf8 	bl	8003722 <LL_SPI_DisableNSSPulseMgt>

}
 8003b32:	bf00      	nop
 8003b34:	3740      	adds	r7, #64	; 0x40
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	48000400 	.word	0x48000400
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40003800 	.word	0x40003800

08003b48 <DMA1_Channel1_Init>:

//uint8_t rx_flag = 0;
//uint8_t tx_flag = 0;

void DMA1_Channel1_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_1);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4806      	ldr	r0, [pc, #24]	; (8003b68 <DMA1_Channel1_Init+0x20>)
 8003b50:	f7ff fd12 	bl	8003578 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_1);
 8003b54:	2100      	movs	r1, #0
 8003b56:	4804      	ldr	r0, [pc, #16]	; (8003b68 <DMA1_Channel1_Init+0x20>)
 8003b58:	f7ff fd30 	bl	80035bc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4802      	ldr	r0, [pc, #8]	; (8003b68 <DMA1_Channel1_Init+0x20>)
 8003b60:	f7ff fb4e 	bl	8003200 <LL_DMA_DisableChannel>
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40020000 	.word	0x40020000

08003b6c <DMA1_Channel2_Init>:

void DMA1_Channel2_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_2);
 8003b70:	2101      	movs	r1, #1
 8003b72:	4806      	ldr	r0, [pc, #24]	; (8003b8c <DMA1_Channel2_Init+0x20>)
 8003b74:	f7ff fd00 	bl	8003578 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_2);
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <DMA1_Channel2_Init+0x20>)
 8003b7c:	f7ff fd1e 	bl	80035bc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003b80:	2101      	movs	r1, #1
 8003b82:	4802      	ldr	r0, [pc, #8]	; (8003b8c <DMA1_Channel2_Init+0x20>)
 8003b84:	f7ff fb3c 	bl	8003200 <LL_DMA_DisableChannel>
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40020000 	.word	0x40020000

08003b90 <DMA1_Channel3_Init>:

void DMA1_Channel3_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_3);
 8003b94:	2102      	movs	r1, #2
 8003b96:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <DMA1_Channel3_Init+0x20>)
 8003b98:	f7ff fcee 	bl	8003578 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_3);
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <DMA1_Channel3_Init+0x20>)
 8003ba0:	f7ff fd0c 	bl	80035bc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA1_Channel3_Init+0x20>)
 8003ba8:	f7ff fb2a 	bl	8003200 <LL_DMA_DisableChannel>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <DMA1_Channel4_Init>:

void DMA1_Channel4_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_4);
 8003bb8:	2103      	movs	r1, #3
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <DMA1_Channel4_Init+0x20>)
 8003bbc:	f7ff fcdc 	bl	8003578 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_4);
 8003bc0:	2103      	movs	r1, #3
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <DMA1_Channel4_Init+0x20>)
 8003bc4:	f7ff fcfa 	bl	80035bc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <DMA1_Channel4_Init+0x20>)
 8003bcc:	f7ff fb18 	bl	8003200 <LL_DMA_DisableChannel>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <SPI1_Start>:

void SPI1_Start(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
 8003bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <SPI1_Start+0x2c>)
 8003be2:	f7ff fd8b 	bl	80036fc <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel1_Init();
 8003be6:	f7ff ffaf 	bl	8003b48 <DMA1_Channel1_Init>
	DMA1_Channel2_Init();
 8003bea:	f7ff ffbf 	bl	8003b6c <DMA1_Channel2_Init>
	LL_SPI_EnableDMAReq_RX(SPI1);
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <SPI1_Start+0x2c>)
 8003bf0:	f7ff fdba 	bl	8003768 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI1);
 8003bf4:	4803      	ldr	r0, [pc, #12]	; (8003c04 <SPI1_Start+0x2c>)
 8003bf6:	f7ff fdc7 	bl	8003788 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI1);
 8003bfa:	4802      	ldr	r0, [pc, #8]	; (8003c04 <SPI1_Start+0x2c>)
 8003bfc:	f7ff fd48 	bl	8003690 <LL_SPI_Enable>
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40013000 	.word	0x40013000

08003c08 <SPI1_DMA_Communication>:

void SPI1_DMA_Communication(uint8_t length)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003c12:	2101      	movs	r1, #1
 8003c14:	4822      	ldr	r0, [pc, #136]	; (8003ca0 <SPI1_DMA_Communication+0x98>)
 8003c16:	f7ff fdee 	bl	80037f6 <LL_GPIO_ResetOutputPin>

	if( LL_SPI_IsActiveFlag_RXNE(SPI1) == SET)LL_SPI_ReceiveData8(SPI1);
 8003c1a:	4822      	ldr	r0, [pc, #136]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c1c:	f7ff fd91 	bl	8003742 <LL_SPI_IsActiveFlag_RXNE>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <SPI1_DMA_Communication+0x24>
 8003c26:	481f      	ldr	r0, [pc, #124]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c28:	f7ff fdca 	bl	80037c0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI1) == RESET) LL_SPI_Enable(SPI1);
 8003c2c:	481d      	ldr	r0, [pc, #116]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c2e:	f7ff fd3f 	bl	80036b0 <LL_SPI_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <SPI1_DMA_Communication+0x36>
 8003c38:	481a      	ldr	r0, [pc, #104]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c3a:	f7ff fd29 	bl	8003690 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_2,(uint32_t)SPI1TransmitData,
 8003c3e:	4c1a      	ldr	r4, [pc, #104]	; (8003ca8 <SPI1_DMA_Communication+0xa0>)
 8003c40:	4818      	ldr	r0, [pc, #96]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c42:	f7ff fdb1 	bl	80037a8 <LL_SPI_DMA_GetRegAddr>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2210      	movs	r2, #16
 8003c4a:	9200      	str	r2, [sp, #0]
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4816      	ldr	r0, [pc, #88]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c52:	f7ff fc29 	bl	80034a8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI1),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_2,length);
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4813      	ldr	r0, [pc, #76]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c5e:	f7ff fbfd 	bl	800345c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_1,LL_SPI_DMA_GetRegAddr(SPI1),
 8003c62:	4810      	ldr	r0, [pc, #64]	; (8003ca4 <SPI1_DMA_Communication+0x9c>)
 8003c64:	f7ff fda0 	bl	80037a8 <LL_SPI_DMA_GetRegAddr>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4911      	ldr	r1, [pc, #68]	; (8003cb0 <SPI1_DMA_Communication+0xa8>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	2100      	movs	r1, #0
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c76:	f7ff fc17 	bl	80034a8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI1ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,length);
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2100      	movs	r1, #0
 8003c80:	480a      	ldr	r0, [pc, #40]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c82:	f7ff fbeb 	bl	800345c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003c86:	2101      	movs	r1, #1
 8003c88:	4808      	ldr	r0, [pc, #32]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c8a:	f7ff fa97 	bl	80031bc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4806      	ldr	r0, [pc, #24]	; (8003cac <SPI1_DMA_Communication+0xa4>)
 8003c92:	f7ff fa93 	bl	80031bc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	48000400 	.word	0x48000400
 8003ca4:	40013000 	.word	0x40013000
 8003ca8:	2000150c 	.word	0x2000150c
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	20001514 	.word	0x20001514

08003cb4 <SPI1_DMA1_ReceiveComplete_Callback>:

void SPI1_DMA1_ReceiveComplete_Callback(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4804      	ldr	r0, [pc, #16]	; (8003ccc <SPI1_DMA1_ReceiveComplete_Callback+0x18>)
 8003cbc:	f7ff faa0 	bl	8003200 <LL_DMA_DisableChannel>
	LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <SPI1_DMA1_ReceiveComplete_Callback+0x1c>)
 8003cc4:	f7ff fd89 	bl	80037da <LL_GPIO_SetOutputPin>
//	rx_flag = 1;
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	48000400 	.word	0x48000400

08003cd4 <SPI1_DMA1_TransmitComplete_Callback>:

void SPI1_DMA1_TransmitComplete_Callback(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <SPI1_DMA1_TransmitComplete_Callback+0x10>)
 8003cdc:	f7ff fa90 	bl	8003200 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <Get_SPI1ReciveData>:

uint8_t Get_SPI1ReciveData(uint8_t num){
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
	return SPI1ReciveData[num];
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <Get_SPI1ReciveData+0x1c>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20001514 	.word	0x20001514

08003d08 <SetSPI1TransmitData>:

void SetSPI1TransmitData(uint8_t num, uint8_t data){
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460a      	mov	r2, r1
 8003d12:	71fb      	strb	r3, [r7, #7]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71bb      	strb	r3, [r7, #6]
	SPI1TransmitData[num] = data;
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	4904      	ldr	r1, [pc, #16]	; (8003d2c <SetSPI1TransmitData+0x24>)
 8003d1c:	79ba      	ldrb	r2, [r7, #6]
 8003d1e:	54ca      	strb	r2, [r1, r3]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	2000150c 	.word	0x2000150c

08003d30 <SPI2_Start>:

uint8_t SPI2ReciveData[SPI2_DATA_BUFFR_SIZE];
uint8_t SPI2TransmitData[SPI2_DATA_BUFFR_SIZE];

void SPI2_Start(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 8003d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d38:	4808      	ldr	r0, [pc, #32]	; (8003d5c <SPI2_Start+0x2c>)
 8003d3a:	f7ff fcdf 	bl	80036fc <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel3_Init();
 8003d3e:	f7ff ff27 	bl	8003b90 <DMA1_Channel3_Init>
	DMA1_Channel4_Init();
 8003d42:	f7ff ff37 	bl	8003bb4 <DMA1_Channel4_Init>
	LL_SPI_EnableDMAReq_RX(SPI2);
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <SPI2_Start+0x2c>)
 8003d48:	f7ff fd0e 	bl	8003768 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI2);
 8003d4c:	4803      	ldr	r0, [pc, #12]	; (8003d5c <SPI2_Start+0x2c>)
 8003d4e:	f7ff fd1b 	bl	8003788 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI2);
 8003d52:	4802      	ldr	r0, [pc, #8]	; (8003d5c <SPI2_Start+0x2c>)
 8003d54:	f7ff fc9c 	bl	8003690 <LL_SPI_Enable>
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40003800 	.word	0x40003800

08003d60 <SPI2_DMA_Communication>:

void SPI2_DMA_Communication(uint8_t length,uint8_t dir)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	4603      	mov	r3, r0
 8003d68:	460a      	mov	r2, r1
 8003d6a:	71fb      	strb	r3, [r7, #7]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71bb      	strb	r3, [r7, #6]
  if(dir == enL){
 8003d70:	79bb      	ldrb	r3, [r7, #6]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <SPI2_DMA_Communication+0x22>
	  LL_GPIO_ResetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7a:	4825      	ldr	r0, [pc, #148]	; (8003e10 <SPI2_DMA_Communication+0xb0>)
 8003d7c:	f7ff fd3b 	bl	80037f6 <LL_GPIO_ResetOutputPin>
 8003d80:	e003      	b.n	8003d8a <SPI2_DMA_Communication+0x2a>
  }else{
    LL_GPIO_ResetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	4822      	ldr	r0, [pc, #136]	; (8003e10 <SPI2_DMA_Communication+0xb0>)
 8003d86:	f7ff fd36 	bl	80037f6 <LL_GPIO_ResetOutputPin>
  }
	if( LL_SPI_IsActiveFlag_RXNE(SPI2) == SET)LL_SPI_ReceiveData8(SPI2);
 8003d8a:	4822      	ldr	r0, [pc, #136]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003d8c:	f7ff fcd9 	bl	8003742 <LL_SPI_IsActiveFlag_RXNE>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <SPI2_DMA_Communication+0x3c>
 8003d96:	481f      	ldr	r0, [pc, #124]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003d98:	f7ff fd12 	bl	80037c0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI2) == RESET) LL_SPI_Enable(SPI2);
 8003d9c:	481d      	ldr	r0, [pc, #116]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003d9e:	f7ff fc87 	bl	80036b0 <LL_SPI_IsEnabled>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <SPI2_DMA_Communication+0x4e>
 8003da8:	481a      	ldr	r0, [pc, #104]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003daa:	f7ff fc71 	bl	8003690 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_4,(uint32_t)SPI2TransmitData,
 8003dae:	4c1a      	ldr	r4, [pc, #104]	; (8003e18 <SPI2_DMA_Communication+0xb8>)
 8003db0:	4818      	ldr	r0, [pc, #96]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003db2:	f7ff fcf9 	bl	80037a8 <LL_SPI_DMA_GetRegAddr>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2210      	movs	r2, #16
 8003dba:	9200      	str	r2, [sp, #0]
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	4816      	ldr	r0, [pc, #88]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003dc2:	f7ff fb71 	bl	80034a8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI2),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_4,length);
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2103      	movs	r1, #3
 8003dcc:	4813      	ldr	r0, [pc, #76]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003dce:	f7ff fb45 	bl	800345c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_3,LL_SPI_DMA_GetRegAddr(SPI2),
 8003dd2:	4810      	ldr	r0, [pc, #64]	; (8003e14 <SPI2_DMA_Communication+0xb4>)
 8003dd4:	f7ff fce8 	bl	80037a8 <LL_SPI_DMA_GetRegAddr>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4911      	ldr	r1, [pc, #68]	; (8003e20 <SPI2_DMA_Communication+0xc0>)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	460b      	mov	r3, r1
 8003de2:	2102      	movs	r1, #2
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003de6:	f7ff fb5f 	bl	80034a8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI2ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,length);
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	461a      	mov	r2, r3
 8003dee:	2102      	movs	r1, #2
 8003df0:	480a      	ldr	r0, [pc, #40]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003df2:	f7ff fb33 	bl	800345c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003df6:	2103      	movs	r1, #3
 8003df8:	4808      	ldr	r0, [pc, #32]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003dfa:	f7ff f9df 	bl	80031bc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4806      	ldr	r0, [pc, #24]	; (8003e1c <SPI2_DMA_Communication+0xbc>)
 8003e02:	f7ff f9db 	bl	80031bc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	48000400 	.word	0x48000400
 8003e14:	40003800 	.word	0x40003800
 8003e18:	20001510 	.word	0x20001510
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	20001518 	.word	0x20001518

08003e24 <SPI2_DMA1_ReceiveComplete_Callback>:

void SPI2_DMA1_ReceiveComplete_Callback(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4809      	ldr	r0, [pc, #36]	; (8003e50 <SPI2_DMA1_ReceiveComplete_Callback+0x2c>)
 8003e2c:	f7ff f9e8 	bl	8003200 <LL_DMA_DisableChannel>
  if(encoderdir == enL){
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <SPI2_DMA1_ReceiveComplete_Callback+0x30>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <SPI2_DMA1_ReceiveComplete_Callback+0x20>
	  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e3c:	4806      	ldr	r0, [pc, #24]	; (8003e58 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e3e:	f7ff fccc 	bl	80037da <LL_GPIO_SetOutputPin>
  }else{
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
  }
//	rx_flag = 1;
}
 8003e42:	e003      	b.n	8003e4c <SPI2_DMA1_ReceiveComplete_Callback+0x28>
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	4804      	ldr	r0, [pc, #16]	; (8003e58 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e48:	f7ff fcc7 	bl	80037da <LL_GPIO_SetOutputPin>
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020000 	.word	0x40020000
 8003e54:	20000c66 	.word	0x20000c66
 8003e58:	48000400 	.word	0x48000400

08003e5c <SPI2_DMA1_TransmitComplete_Callback>:

void SPI2_DMA1_TransmitComplete_Callback(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003e60:	2103      	movs	r1, #3
 8003e62:	4802      	ldr	r0, [pc, #8]	; (8003e6c <SPI2_DMA1_TransmitComplete_Callback+0x10>)
 8003e64:	f7ff f9cc 	bl	8003200 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40020000 	.word	0x40020000

08003e70 <Get_SPI2ReciveData>:

uint8_t Get_SPI2ReciveData(uint8_t num){
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
	return SPI2ReciveData[num];
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <Get_SPI2ReciveData+0x1c>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20001518 	.word	0x20001518

08003e90 <SetSPI2TransmitData>:

void SetSPI2TransmitData(uint8_t num, uint8_t data){
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	460a      	mov	r2, r1
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71bb      	strb	r3, [r7, #6]
	SPI2TransmitData[num] = data;
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <SetSPI2TransmitData+0x24>)
 8003ea4:	79ba      	ldrb	r2, [r7, #6]
 8003ea6:	54ca      	strb	r2, [r1, r3]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20001510 	.word	0x20001510

08003eb8 <LL_DMA_IsActiveFlag_TC1>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d101      	bne.n	8003ed0 <LL_DMA_IsActiveFlag_TC1+0x18>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_DMA_IsActiveFlag_TC2>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d101      	bne.n	8003ef6 <LL_DMA_IsActiveFlag_TC2+0x18>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_DMA_IsActiveFlag_TC3>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f18:	d101      	bne.n	8003f1e <LL_DMA_IsActiveFlag_TC3+0x1a>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_DMA_IsActiveFlag_TC3+0x1c>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_DMA_IsActiveFlag_TC4>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f40:	d101      	bne.n	8003f46 <LL_DMA_IsActiveFlag_TC4+0x1a>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <LL_DMA_IsActiveFlag_TC4+0x1c>
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_DMA_ClearFlag_GI1>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	605a      	str	r2, [r3, #4]
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_DMA_ClearFlag_GI2>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	605a      	str	r2, [r3, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_DMA_ClearFlag_GI3>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f96:	605a      	str	r2, [r3, #4]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <LL_DMA_ClearFlag_GI4>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fb2:	605a      	str	r2, [r3, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f06f 0201 	mvn.w	r2, #1
 8003fce:	611a      	str	r2, [r3, #16]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004014:	e7fe      	b.n	8004014 <HardFault_Handler+0x4>

08004016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800401a:	e7fe      	b.n	800401a <MemManage_Handler+0x4>

0800401c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004020:	e7fe      	b.n	8004020 <BusFault_Handler+0x4>

08004022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004026:	e7fe      	b.n	8004026 <UsageFault_Handler+0x4>

08004028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1){
 8004064:	4806      	ldr	r0, [pc, #24]	; (8004080 <DMA1_Channel1_IRQHandler+0x20>)
 8004066:	f7ff ff27 	bl	8003eb8 <LL_DMA_IsActiveFlag_TC1>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d104      	bne.n	800407a <DMA1_Channel1_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI1(DMA1);
 8004070:	4803      	ldr	r0, [pc, #12]	; (8004080 <DMA1_Channel1_IRQHandler+0x20>)
 8004072:	f7ff ff6f 	bl	8003f54 <LL_DMA_ClearFlag_GI1>
		SPI1_DMA1_ReceiveComplete_Callback();
 8004076:	f7ff fe1d 	bl	8003cb4 <SPI1_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40020000 	.word	0x40020000

08004084 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1) == 1){
 8004088:	4806      	ldr	r0, [pc, #24]	; (80040a4 <DMA1_Channel2_IRQHandler+0x20>)
 800408a:	f7ff ff28 	bl	8003ede <LL_DMA_IsActiveFlag_TC2>
 800408e:	4603      	mov	r3, r0
 8004090:	2b01      	cmp	r3, #1
 8004092:	d104      	bne.n	800409e <DMA1_Channel2_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI2(DMA1);
 8004094:	4803      	ldr	r0, [pc, #12]	; (80040a4 <DMA1_Channel2_IRQHandler+0x20>)
 8004096:	f7ff ff6a 	bl	8003f6e <LL_DMA_ClearFlag_GI2>
		SPI1_DMA1_TransmitComplete_Callback();
 800409a:	f7ff fe1b 	bl	8003cd4 <SPI1_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40020000 	.word	0x40020000

080040a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1) == 1){
 80040ac:	4806      	ldr	r0, [pc, #24]	; (80040c8 <DMA1_Channel3_IRQHandler+0x20>)
 80040ae:	f7ff ff29 	bl	8003f04 <LL_DMA_IsActiveFlag_TC3>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d104      	bne.n	80040c2 <DMA1_Channel3_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI3(DMA1);
 80040b8:	4803      	ldr	r0, [pc, #12]	; (80040c8 <DMA1_Channel3_IRQHandler+0x20>)
 80040ba:	f7ff ff65 	bl	8003f88 <LL_DMA_ClearFlag_GI3>
		SPI2_DMA1_ReceiveComplete_Callback();
 80040be:	f7ff feb1 	bl	8003e24 <SPI2_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40020000 	.word	0x40020000

080040cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1){
 80040d0:	4806      	ldr	r0, [pc, #24]	; (80040ec <DMA1_Channel4_IRQHandler+0x20>)
 80040d2:	f7ff ff2b 	bl	8003f2c <LL_DMA_IsActiveFlag_TC4>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d104      	bne.n	80040e6 <DMA1_Channel4_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI4(DMA1);
 80040dc:	4803      	ldr	r0, [pc, #12]	; (80040ec <DMA1_Channel4_IRQHandler+0x20>)
 80040de:	f7ff ff61 	bl	8003fa4 <LL_DMA_ClearFlag_GI4>
	  SPI2_DMA1_TransmitComplete_Callback();
 80040e2:	f7ff febb 	bl	8003e5c <SPI2_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40020000 	.word	0x40020000

080040f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM1)==1){
 8004110:	4806      	ldr	r0, [pc, #24]	; (800412c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004112:	f7ff ff63 	bl	8003fdc <LL_TIM_IsActiveFlag_UPDATE>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <TIM1_UP_TIM16_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM1);
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <TIM1_UP_TIM16_IRQHandler+0x20>)
 800411e:	f7ff ff4f 	bl	8003fc0 <LL_TIM_ClearFlag_UPDATE>
	}
  INTC_sys();
 8004122:	f001 fadd 	bl	80056e0 <INTC_sys>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00

08004130 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM4)==1){
 8004134:	481e      	ldr	r0, [pc, #120]	; (80041b0 <TIM4_IRQHandler+0x80>)
 8004136:	f7ff ff51 	bl	8003fdc <LL_TIM_IsActiveFlag_UPDATE>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d102      	bne.n	8004146 <TIM4_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8004140:	481b      	ldr	r0, [pc, #108]	; (80041b0 <TIM4_IRQHandler+0x80>)
 8004142:	f7ff ff3d 	bl	8003fc0 <LL_TIM_ClearFlag_UPDATE>
	}
  switch(i){
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <TIM4_IRQHandler+0x84>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d821      	bhi.n	8004192 <TIM4_IRQHandler+0x62>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <TIM4_IRQHandler+0x24>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004165 	.word	0x08004165
 8004158:	0800416d 	.word	0x0800416d
 800415c:	0800417b 	.word	0x0800417b
 8004160:	08004189 	.word	0x08004189
		case 0:
			recv_spi_encoder(enL);
 8004164:	2000      	movs	r0, #0
 8004166:	f004 f9d1 	bl	800850c <recv_spi_encoder>
			break;
 800416a:	e012      	b.n	8004192 <TIM4_IRQHandler+0x62>
		case 1:
			Set_encoder_data(enL);
 800416c:	2000      	movs	r0, #0
 800416e:	f004 f9db 	bl	8008528 <Set_encoder_data>
      recv_spi_encoder(enR);
 8004172:	2001      	movs	r0, #1
 8004174:	f004 f9ca 	bl	800850c <recv_spi_encoder>
			break;
 8004178:	e00b      	b.n	8004192 <TIM4_IRQHandler+0x62>
		case 2:
      Set_encoder_data(enR);
 800417a:	2001      	movs	r0, #1
 800417c:	f004 f9d4 	bl	8008528 <Set_encoder_data>
      ICM_42688_GyroRead_DMA(0x29);
 8004180:	2029      	movs	r0, #41	; 0x29
 8004182:	f004 fb50 	bl	8008826 <ICM_42688_GyroRead_DMA>
			break;
 8004186:	e004      	b.n	8004192 <TIM4_IRQHandler+0x62>
		case 3:
			ICM_42688_GyroData();
 8004188:	f004 fb5c 	bl	8008844 <ICM_42688_GyroData>
			GYRO_Pol();
 800418c:	f004 fc0c 	bl	80089a8 <GYRO_Pol>
			break;
 8004190:	bf00      	nop
	}
	i = (i+1)%4;
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <TIM4_IRQHandler+0x84>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	425a      	negs	r2, r3
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	f002 0203 	and.w	r2, r2, #3
 80041a2:	bf58      	it	pl
 80041a4:	4253      	negpl	r3, r2
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <TIM4_IRQHandler+0x84>)
 80041aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40000800 	.word	0x40000800
 80041b4:	20000214 	.word	0x20000214

080041b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM5)==1){
 80041bc:	4819      	ldr	r0, [pc, #100]	; (8004224 <TIM5_IRQHandler+0x6c>)
 80041be:	f7ff ff0d 	bl	8003fdc <LL_TIM_IsActiveFlag_UPDATE>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d102      	bne.n	80041ce <TIM5_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 80041c8:	4816      	ldr	r0, [pc, #88]	; (8004224 <TIM5_IRQHandler+0x6c>)
 80041ca:	f7ff fef9 	bl	8003fc0 <LL_TIM_ClearFlag_UPDATE>
	}
	switch(i){
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <TIM5_IRQHandler+0x70>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d816      	bhi.n	8004204 <TIM5_IRQHandler+0x4c>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <TIM5_IRQHandler+0x24>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f3 	.word	0x080041f3
 80041e4:	080041f9 	.word	0x080041f9
 80041e8:	080041ff 	.word	0x080041ff
		case 0:
			DIST_Pol_FL();
 80041ec:	f009 fd36 	bl	800dc5c <DIST_Pol_FL>
			break;
 80041f0:	e008      	b.n	8004204 <TIM5_IRQHandler+0x4c>
		case 1:
			DIST_Pol_SR();
 80041f2:	f009 fddb 	bl	800ddac <DIST_Pol_SR>
			break;
 80041f6:	e005      	b.n	8004204 <TIM5_IRQHandler+0x4c>
		case 2:
			DIST_Pol_SL();
 80041f8:	f009 fda0 	bl	800dd3c <DIST_Pol_SL>
			break;
 80041fc:	e002      	b.n	8004204 <TIM5_IRQHandler+0x4c>
		case 3:
			DIST_Pol_FR();
 80041fe:	f009 fd65 	bl	800dccc <DIST_Pol_FR>
			break;
 8004202:	bf00      	nop
	}
	i = (i+1)%4;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <TIM5_IRQHandler+0x70>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	425a      	negs	r2, r3
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	f002 0203 	and.w	r2, r2, #3
 8004214:	bf58      	it	pl
 8004216:	4253      	negpl	r3, r2
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b03      	ldr	r3, [pc, #12]	; (8004228 <TIM5_IRQHandler+0x70>)
 800421c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40000c00 	.word	0x40000c00
 8004228:	20000215 	.word	0x20000215

0800422c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM6)==1){
 8004230:	4807      	ldr	r0, [pc, #28]	; (8004250 <TIM6_DAC_IRQHandler+0x24>)
 8004232:	f7ff fed3 	bl	8003fdc <LL_TIM_IsActiveFlag_UPDATE>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d102      	bne.n	8004242 <TIM6_DAC_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 800423c:	4804      	ldr	r0, [pc, #16]	; (8004250 <TIM6_DAC_IRQHandler+0x24>)
 800423e:	f7ff febf 	bl	8003fc0 <LL_TIM_ClearFlag_UPDATE>
	}
	BAT_Pol();
 8004242:	f009 fa15 	bl	800d670 <BAT_Pol>
	log_interrupt ();
 8004246:	f004 fcff 	bl	8008c48 <log_interrupt>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40001000 	.word	0x40001000

08004254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
	return 1;
 8004258:	2301      	movs	r3, #1
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_kill>:

int _kill(int pid, int sig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800426e:	f013 fa79 	bl	8017764 <__errno>
 8004272:	4603      	mov	r3, r0
 8004274:	2216      	movs	r2, #22
 8004276:	601a      	str	r2, [r3, #0]
	return -1;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <_exit>:

void _exit (int status)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800428c:	f04f 31ff 	mov.w	r1, #4294967295
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ffe7 	bl	8004264 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004296:	e7fe      	b.n	8004296 <_exit+0x12>

08004298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e00a      	b.n	80042c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042aa:	f3af 8000 	nop.w
 80042ae:	4601      	mov	r1, r0
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	60ba      	str	r2, [r7, #8]
 80042b6:	b2ca      	uxtb	r2, r1
 80042b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3301      	adds	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dbf0      	blt.n	80042aa <_read+0x12>
	}

return len;
 80042c8:	687b      	ldr	r3, [r7, #4]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e009      	b.n	80042f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	60ba      	str	r2, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f94b 	bl	8002588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	dbf1      	blt.n	80042e4 <_write+0x12>
	}
	return len;
 8004300:	687b      	ldr	r3, [r7, #4]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_close>:

int _close(int file)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
	return -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004332:	605a      	str	r2, [r3, #4]
	return 0;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <_isatty>:

int _isatty(int file)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
	return 1;
 800434a:	2301      	movs	r3, #1
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
	return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <_sbrk+0x5c>)
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <_sbrk+0x60>)
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <_sbrk+0x64>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <_sbrk+0x64>)
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <_sbrk+0x68>)
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <_sbrk+0x64>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4413      	add	r3, r2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d207      	bcs.n	80043b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043a4:	f013 f9de 	bl	8017764 <__errno>
 80043a8:	4603      	mov	r3, r0
 80043aa:	220c      	movs	r2, #12
 80043ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e009      	b.n	80043c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <_sbrk+0x64>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <_sbrk+0x64>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <_sbrk+0x64>)
 80043c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20020000 	.word	0x20020000
 80043d4:	00000400 	.word	0x00000400
 80043d8:	20000218 	.word	0x20000218
 80043dc:	2000e758 	.word	0x2000e758

080043e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <SystemInit+0x28>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <SystemInit+0x28>)
 80043ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <SystemInit+0x28>)
 80043f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043fa:	609a      	str	r2, [r3, #8]
#endif
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_GetPriorityGrouping>:
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__NVIC_GetPriorityGrouping+0x18>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 0307 	and.w	r3, r3, #7
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_EnableIRQ>:
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db0b      	blt.n	8004452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4907      	ldr	r1, [pc, #28]	; (8004460 <__NVIC_EnableIRQ+0x38>)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2001      	movs	r0, #1
 800444a:	fa00 f202 	lsl.w	r2, r0, r2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000e100 	.word	0xe000e100

08004464 <__NVIC_SetPriority>:
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004474:	2b00      	cmp	r3, #0
 8004476:	db0a      	blt.n	800448e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	490c      	ldr	r1, [pc, #48]	; (80044b0 <__NVIC_SetPriority+0x4c>)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	0112      	lsls	r2, r2, #4
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	440b      	add	r3, r1
 8004488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800448c:	e00a      	b.n	80044a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4908      	ldr	r1, [pc, #32]	; (80044b4 <__NVIC_SetPriority+0x50>)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	3b04      	subs	r3, #4
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	440b      	add	r3, r1
 80044a2:	761a      	strb	r2, [r3, #24]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <NVIC_EncodePriority>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f1c3 0307 	rsb	r3, r3, #7
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	bf28      	it	cs
 80044d6:	2304      	movcs	r3, #4
 80044d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3304      	adds	r3, #4
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d902      	bls.n	80044e8 <NVIC_EncodePriority+0x30>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3b03      	subs	r3, #3
 80044e6:	e000      	b.n	80044ea <NVIC_EncodePriority+0x32>
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	401a      	ands	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004500:	f04f 31ff 	mov.w	r1, #4294967295
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	43d9      	mvns	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	4313      	orrs	r3, r2
}
 8004512:	4618      	mov	r0, r3
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <LL_AHB2_GRP1_EnableClock>:
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800452a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800452c:	4907      	ldr	r1, [pc, #28]	; (800454c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4313      	orrs	r3, r2
 8004532:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40021000 	.word	0x40021000

08004550 <LL_APB1_GRP1_EnableClock>:
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <LL_APB1_GRP1_EnableClock+0x2c>)
 800455a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <LL_APB1_GRP1_EnableClock+0x2c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4313      	orrs	r3, r2
 8004562:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004566:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4013      	ands	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40021000 	.word	0x40021000

08004580 <LL_APB2_GRP1_EnableClock>:
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800458a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800458c:	4907      	ldr	r1, [pc, #28]	; (80045ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4313      	orrs	r3, r2
 8004592:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8004596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40021000 	.word	0x40021000

080045b0 <LL_TIM_EnableCounter>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_TIM_EnableARRPreload>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_TIM_DisableARRPreload>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_TIM_CC_EnableChannel>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <LL_TIM_OC_DisableFast>:
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d02e      	beq.n	80046a2 <LL_TIM_OC_DisableFast+0x6e>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d029      	beq.n	800469e <LL_TIM_OC_DisableFast+0x6a>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b10      	cmp	r3, #16
 800464e:	d024      	beq.n	800469a <LL_TIM_OC_DisableFast+0x66>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d01f      	beq.n	8004696 <LL_TIM_OC_DisableFast+0x62>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465c:	d019      	beq.n	8004692 <LL_TIM_OC_DisableFast+0x5e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004664:	d013      	beq.n	800468e <LL_TIM_OC_DisableFast+0x5a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d00d      	beq.n	800468a <LL_TIM_OC_DisableFast+0x56>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004674:	d007      	beq.n	8004686 <LL_TIM_OC_DisableFast+0x52>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d101      	bne.n	8004682 <LL_TIM_OC_DisableFast+0x4e>
 800467e:	2308      	movs	r3, #8
 8004680:	e010      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 8004682:	2309      	movs	r3, #9
 8004684:	e00e      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 8004686:	2307      	movs	r3, #7
 8004688:	e00c      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 800468a:	2306      	movs	r3, #6
 800468c:	e00a      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 800468e:	2305      	movs	r3, #5
 8004690:	e008      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 8004692:	2304      	movs	r3, #4
 8004694:	e006      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 8004696:	2303      	movs	r3, #3
 8004698:	e004      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 800469a:	2302      	movs	r3, #2
 800469c:	e002      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_TIM_OC_DisableFast+0x70>
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3318      	adds	r3, #24
 80046aa:	4619      	mov	r1, r3
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <LL_TIM_OC_DisableFast+0xa8>)
 80046b0:	5cd3      	ldrb	r3, [r2, r3]
 80046b2:	440b      	add	r3, r1
 80046b4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	4908      	ldr	r1, [pc, #32]	; (80046e0 <LL_TIM_OC_DisableFast+0xac>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	4619      	mov	r1, r3
 80046c2:	2304      	movs	r3, #4
 80046c4:	408b      	lsls	r3, r1
 80046c6:	43db      	mvns	r3, r3
 80046c8:	401a      	ands	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	0801c704 	.word	0x0801c704
 80046e0:	0801c710 	.word	0x0801c710

080046e4 <LL_TIM_OC_EnablePreload>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d02e      	beq.n	8004752 <LL_TIM_OC_EnablePreload+0x6e>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d029      	beq.n	800474e <LL_TIM_OC_EnablePreload+0x6a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d024      	beq.n	800474a <LL_TIM_OC_EnablePreload+0x66>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d01f      	beq.n	8004746 <LL_TIM_OC_EnablePreload+0x62>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470c:	d019      	beq.n	8004742 <LL_TIM_OC_EnablePreload+0x5e>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d013      	beq.n	800473e <LL_TIM_OC_EnablePreload+0x5a>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471c:	d00d      	beq.n	800473a <LL_TIM_OC_EnablePreload+0x56>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004724:	d007      	beq.n	8004736 <LL_TIM_OC_EnablePreload+0x52>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d101      	bne.n	8004732 <LL_TIM_OC_EnablePreload+0x4e>
 800472e:	2308      	movs	r3, #8
 8004730:	e010      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 8004732:	2309      	movs	r3, #9
 8004734:	e00e      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 8004736:	2307      	movs	r3, #7
 8004738:	e00c      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 800473a:	2306      	movs	r3, #6
 800473c:	e00a      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 800473e:	2305      	movs	r3, #5
 8004740:	e008      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 8004742:	2304      	movs	r3, #4
 8004744:	e006      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 8004746:	2303      	movs	r3, #3
 8004748:	e004      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 800474a:	2302      	movs	r3, #2
 800474c:	e002      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <LL_TIM_OC_EnablePreload+0x70>
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3318      	adds	r3, #24
 800475a:	4619      	mov	r1, r3
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <LL_TIM_OC_EnablePreload+0xa4>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	440b      	add	r3, r1
 8004764:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	4907      	ldr	r1, [pc, #28]	; (800478c <LL_TIM_OC_EnablePreload+0xa8>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	4619      	mov	r1, r3
 8004772:	2308      	movs	r3, #8
 8004774:	408b      	lsls	r3, r1
 8004776:	431a      	orrs	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	601a      	str	r2, [r3, #0]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	0801c704 	.word	0x0801c704
 800478c:	0801c710 	.word	0x0801c710

08004790 <LL_TIM_OC_SetCompareCH2>:
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_TIM_OC_SetCompareCH3>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_TIM_SetClockSource>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_TIM_SetTriggerOutput>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_TIM_SetTriggerOutput2>:
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_TIM_DisableMasterSlaveMode>:
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <LL_TIM_EnableAllOutputs>:
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b092      	sub	sp, #72	; 0x48
 80048a8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80048aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	611a      	str	r2, [r3, #16]
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	2230      	movs	r2, #48	; 0x30
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f012 fefd 	bl	80176c0 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80048c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048ca:	f7ff fe59 	bl	8004580 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80048ce:	f7ff fd9d 	bl	800440c <__NVIC_GetPriorityGrouping>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fded 	bl	80044b8 <NVIC_EncodePriority>
 80048de:	4603      	mov	r3, r0
 80048e0:	4619      	mov	r1, r3
 80048e2:	2019      	movs	r0, #25
 80048e4:	f7ff fdbe 	bl	8004464 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80048e8:	2019      	movs	r0, #25
 80048ea:	f7ff fd9d 	bl	8004428 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 80048ee:	23a9      	movs	r3, #169	; 0xa9
 80048f0:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80048f2:	2300      	movs	r3, #0
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 999;
 80048f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80048fc:	2300      	movs	r3, #0
 80048fe:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.RepetitionCounter = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004908:	4619      	mov	r1, r3
 800490a:	4811      	ldr	r0, [pc, #68]	; (8004950 <MX_TIM1_Init+0xac>)
 800490c:	f010 ff6c 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004910:	480f      	ldr	r0, [pc, #60]	; (8004950 <MX_TIM1_Init+0xac>)
 8004912:	f7ff fe6d 	bl	80045f0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004916:	2100      	movs	r1, #0
 8004918:	480d      	ldr	r0, [pc, #52]	; (8004950 <MX_TIM1_Init+0xac>)
 800491a:	f7ff ff55 	bl	80047c8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800491e:	2100      	movs	r1, #0
 8004920:	480b      	ldr	r0, [pc, #44]	; (8004950 <MX_TIM1_Init+0xac>)
 8004922:	f7ff ff66 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8004926:	2100      	movs	r1, #0
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <MX_TIM1_Init+0xac>)
 800492a:	f7ff ff77 	bl	800481c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800492e:	4808      	ldr	r0, [pc, #32]	; (8004950 <MX_TIM1_Init+0xac>)
 8004930:	f7ff ff87 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4803      	ldr	r0, [pc, #12]	; (8004950 <MX_TIM1_Init+0xac>)
 8004942:	f011 f853 	bl	80159ec <LL_TIM_BDTR_Init>

}
 8004946:	bf00      	nop
 8004948:	3748      	adds	r7, #72	; 0x48
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00

08004954 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b094      	sub	sp, #80	; 0x50
 8004958:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800495a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800496a:	f107 031c 	add.w	r3, r7, #28
 800496e:	2220      	movs	r2, #32
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f012 fea4 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	611a      	str	r2, [r3, #16]
 8004986:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004988:	2001      	movs	r0, #1
 800498a:	f7ff fde1 	bl	8004550 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004992:	2300      	movs	r3, #0
 8004994:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 8004996:	f240 3351 	movw	r3, #849	; 0x351
 800499a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800499c:	2300      	movs	r3, #0
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80049a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049a4:	4619      	mov	r1, r3
 80049a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049aa:	f010 ff1d 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80049ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049b2:	f7ff fe0d 	bl	80045d0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80049b6:	2110      	movs	r1, #16
 80049b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049bc:	f7ff fe92 	bl	80046e4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80049c0:	2360      	movs	r3, #96	; 0x60
 80049c2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80049d4:	f107 031c 	add.w	r3, r7, #28
 80049d8:	461a      	mov	r2, r3
 80049da:	2110      	movs	r1, #16
 80049dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049e0:	f010 ffa4 	bl	801592c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80049e4:	2110      	movs	r1, #16
 80049e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ea:	f7ff fe23 	bl	8004634 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80049ee:	2100      	movs	r1, #0
 80049f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049f4:	f7ff fefd 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80049f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049fc:	f7ff ff21 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7ff fd8d 	bl	8004520 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004a06:	2308      	movs	r3, #8
 8004a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4803      	ldr	r0, [pc, #12]	; (8004a30 <MX_TIM2_Init+0xdc>)
 8004a24:	f010 fac1 	bl	8014faa <LL_GPIO_Init>

}
 8004a28:	bf00      	nop
 8004a2a:	3750      	adds	r7, #80	; 0x50
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	48000400 	.word	0x48000400

08004a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b094      	sub	sp, #80	; 0x50
 8004a38:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004a4a:	f107 031c 	add.w	r3, r7, #28
 8004a4e:	2220      	movs	r2, #32
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f012 fe34 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f7ff fd71 	bl	8004550 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a72:	2300      	movs	r3, #0
 8004a74:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 8004a76:	f240 3351 	movw	r3, #849	; 0x351
 8004a7a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004a80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a84:	4619      	mov	r1, r3
 8004a86:	481f      	ldr	r0, [pc, #124]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004a88:	f010 feae 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004a8c:	481d      	ldr	r0, [pc, #116]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004a8e:	f7ff fd9f 	bl	80045d0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8004a92:	2110      	movs	r1, #16
 8004a94:	481b      	ldr	r0, [pc, #108]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004a96:	f7ff fe25 	bl	80046e4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004a9a:	2360      	movs	r3, #96	; 0x60
 8004a9c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004aae:	f107 031c 	add.w	r3, r7, #28
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2110      	movs	r1, #16
 8004ab6:	4813      	ldr	r0, [pc, #76]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004ab8:	f010 ff38 	bl	801592c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8004abc:	2110      	movs	r1, #16
 8004abe:	4811      	ldr	r0, [pc, #68]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004ac0:	f7ff fdb8 	bl	8004634 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	480f      	ldr	r0, [pc, #60]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004ac8:	f7ff fe93 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <MX_TIM3_Init+0xd0>)
 8004ace:	f7ff feb8 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7ff fd24 	bl	8004520 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004adc:	2302      	movs	r3, #2
 8004ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004aec:	2302      	movs	r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4804      	ldr	r0, [pc, #16]	; (8004b08 <MX_TIM3_Init+0xd4>)
 8004af6:	f010 fa58 	bl	8014faa <LL_GPIO_Init>

}
 8004afa:	bf00      	nop
 8004afc:	3750      	adds	r7, #80	; 0x50
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40000400 	.word	0x40000400
 8004b08:	48000400 	.word	0x48000400

08004b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8004b20:	2004      	movs	r0, #4
 8004b22:	f7ff fd15 	bl	8004550 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b26:	f7ff fc71 	bl	800440c <__NVIC_GetPriorityGrouping>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fcc1 	bl	80044b8 <NVIC_EncodePriority>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	201e      	movs	r0, #30
 8004b3c:	f7ff fc92 	bl	8004464 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8004b40:	201e      	movs	r0, #30
 8004b42:	f7ff fc71 	bl	8004428 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004b46:	23a9      	movs	r3, #169	; 0xa9
 8004b48:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004b4e:	23f9      	movs	r3, #249	; 0xf9
 8004b50:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	480a      	ldr	r0, [pc, #40]	; (8004b84 <MX_TIM4_Init+0x78>)
 8004b5c:	f010 fe44 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8004b60:	4808      	ldr	r0, [pc, #32]	; (8004b84 <MX_TIM4_Init+0x78>)
 8004b62:	f7ff fd45 	bl	80045f0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004b66:	2100      	movs	r1, #0
 8004b68:	4806      	ldr	r0, [pc, #24]	; (8004b84 <MX_TIM4_Init+0x78>)
 8004b6a:	f7ff fe2d 	bl	80047c8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4804      	ldr	r0, [pc, #16]	; (8004b84 <MX_TIM4_Init+0x78>)
 8004b72:	f7ff fe3e 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8004b76:	4803      	ldr	r0, [pc, #12]	; (8004b84 <MX_TIM4_Init+0x78>)
 8004b78:	f7ff fe63 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>

}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40000800 	.word	0x40000800

08004b88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004b9c:	2008      	movs	r0, #8
 8004b9e:	f7ff fcd7 	bl	8004550 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004ba2:	f7ff fc33 	bl	800440c <__NVIC_GetPriorityGrouping>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fc83 	bl	80044b8 <NVIC_EncodePriority>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2032      	movs	r0, #50	; 0x32
 8004bb8:	f7ff fc54 	bl	8004464 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8004bbc:	2032      	movs	r0, #50	; 0x32
 8004bbe:	f7ff fc33 	bl	8004428 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004bc2:	23a9      	movs	r3, #169	; 0xa9
 8004bc4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004bca:	23f9      	movs	r3, #249	; 0xf9
 8004bcc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	480a      	ldr	r0, [pc, #40]	; (8004c00 <MX_TIM5_Init+0x78>)
 8004bd8:	f010 fe06 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004bdc:	4808      	ldr	r0, [pc, #32]	; (8004c00 <MX_TIM5_Init+0x78>)
 8004bde:	f7ff fd07 	bl	80045f0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004be2:	2100      	movs	r1, #0
 8004be4:	4806      	ldr	r0, [pc, #24]	; (8004c00 <MX_TIM5_Init+0x78>)
 8004be6:	f7ff fdef 	bl	80047c8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004bea:	2100      	movs	r1, #0
 8004bec:	4804      	ldr	r0, [pc, #16]	; (8004c00 <MX_TIM5_Init+0x78>)
 8004bee:	f7ff fe00 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004bf2:	4803      	ldr	r0, [pc, #12]	; (8004c00 <MX_TIM5_Init+0x78>)
 8004bf4:	f7ff fe25 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>

}
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40000c00 	.word	0x40000c00

08004c04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8004c18:	2010      	movs	r0, #16
 8004c1a:	f7ff fc99 	bl	8004550 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c1e:	f7ff fbf5 	bl	800440c <__NVIC_GetPriorityGrouping>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2200      	movs	r2, #0
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fc45 	bl	80044b8 <NVIC_EncodePriority>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4619      	mov	r1, r3
 8004c32:	2036      	movs	r0, #54	; 0x36
 8004c34:	f7ff fc16 	bl	8004464 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c38:	2036      	movs	r0, #54	; 0x36
 8004c3a:	f7ff fbf5 	bl	8004428 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004c3e:	23a9      	movs	r3, #169	; 0xa9
 8004c40:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8004c46:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c4a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8004c4c:	1d3b      	adds	r3, r7, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4808      	ldr	r0, [pc, #32]	; (8004c74 <MX_TIM6_Init+0x70>)
 8004c52:	f010 fdc9 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8004c56:	4807      	ldr	r0, [pc, #28]	; (8004c74 <MX_TIM6_Init+0x70>)
 8004c58:	f7ff fcca 	bl	80045f0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4805      	ldr	r0, [pc, #20]	; (8004c74 <MX_TIM6_Init+0x70>)
 8004c60:	f7ff fdc7 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <MX_TIM6_Init+0x70>)
 8004c66:	f7ff fdec 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>

}
 8004c6a:	bf00      	nop
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40001000 	.word	0x40001000

08004c78 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0a0      	sub	sp, #128	; 0x80
 8004c7c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c92:	2220      	movs	r2, #32
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f012 fd12 	bl	80176c0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	2230      	movs	r2, #48	; 0x30
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f012 fd0b 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	611a      	str	r2, [r3, #16]
 8004cb8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8004cba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cbe:	f7ff fc5f 	bl	8004580 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 849;
 8004ccc:	f240 3351 	movw	r3, #849	; 0x351
 8004cd0:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4837      	ldr	r0, [pc, #220]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004ce2:	f010 fd81 	bl	80157e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8004ce6:	4836      	ldr	r0, [pc, #216]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004ce8:	f7ff fc82 	bl	80045f0 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
 8004cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf0:	4833      	ldr	r0, [pc, #204]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004cf2:	f7ff fcf7 	bl	80046e4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004cf6:	2360      	movs	r3, #96	; 0x60
 8004cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d06:	2300      	movs	r3, #0
 8004d08:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d12:	2300      	movs	r3, #0
 8004d14:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004d16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d20:	4827      	ldr	r0, [pc, #156]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d22:	f010 fe03 	bl	801592c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH3);
 8004d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d2a:	4825      	ldr	r0, [pc, #148]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d2c:	f7ff fc82 	bl	8004634 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8004d30:	2100      	movs	r1, #0
 8004d32:	4823      	ldr	r0, [pc, #140]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d34:	f7ff fd5d 	bl	80047f2 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4821      	ldr	r0, [pc, #132]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d3c:	f7ff fd6e 	bl	800481c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8004d40:	481f      	ldr	r0, [pc, #124]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d42:	f7ff fd7e 	bl	8004842 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004d62:	2300      	movs	r3, #0
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004d74:	2300      	movs	r3, #0
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	4619      	mov	r1, r3
 8004d86:	480e      	ldr	r0, [pc, #56]	; (8004dc0 <MX_TIM8_Init+0x148>)
 8004d88:	f010 fe30 	bl	80159ec <LL_TIM_BDTR_Init>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d8c:	2002      	movs	r0, #2
 8004d8e:	f7ff fbc7 	bl	8004520 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PB9     ------> TIM8_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004da8:	230a      	movs	r3, #10
 8004daa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4804      	ldr	r0, [pc, #16]	; (8004dc4 <MX_TIM8_Init+0x14c>)
 8004db2:	f010 f8fa 	bl	8014faa <LL_GPIO_Init>

}
 8004db6:	bf00      	nop
 8004db8:	3780      	adds	r7, #128	; 0x80
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	48000400 	.word	0x48000400

08004dc8 <TIMER_init>:

/* USER CODE BEGIN 1 */
void TIMER_init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  //sensor encode gyro
  LL_TIM_EnableIT_UPDATE(TIM4);
 8004dcc:	481a      	ldr	r0, [pc, #104]	; (8004e38 <TIMER_init+0x70>)
 8004dce:	f7ff fd58 	bl	8004882 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM4);
 8004dd2:	4819      	ldr	r0, [pc, #100]	; (8004e38 <TIMER_init+0x70>)
 8004dd4:	f7ff fbec 	bl	80045b0 <LL_TIM_EnableCounter>
  //wall sensor
  LL_TIM_EnableIT_UPDATE(TIM5);
 8004dd8:	4818      	ldr	r0, [pc, #96]	; (8004e3c <TIMER_init+0x74>)
 8004dda:	f7ff fd52 	bl	8004882 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8004dde:	4817      	ldr	r0, [pc, #92]	; (8004e3c <TIMER_init+0x74>)
 8004de0:	f7ff fbe6 	bl	80045b0 <LL_TIM_EnableCounter>
  //batt_LV
  LL_TIM_EnableIT_UPDATE(TIM6);
 8004de4:	4816      	ldr	r0, [pc, #88]	; (8004e40 <TIMER_init+0x78>)
 8004de6:	f7ff fd4c 	bl	8004882 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8004dea:	4815      	ldr	r0, [pc, #84]	; (8004e40 <TIMER_init+0x78>)
 8004dec:	f7ff fbe0 	bl	80045b0 <LL_TIM_EnableCounter>
  //motor
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8004df0:	2110      	movs	r1, #16
 8004df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004df6:	f7ff fc0b 	bl	8004610 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8004dfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004dfe:	f7ff fbd7 	bl	80045b0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8004e02:	2110      	movs	r1, #16
 8004e04:	480f      	ldr	r0, [pc, #60]	; (8004e44 <TIMER_init+0x7c>)
 8004e06:	f7ff fc03 	bl	8004610 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8004e0a:	480e      	ldr	r0, [pc, #56]	; (8004e44 <TIMER_init+0x7c>)
 8004e0c:	f7ff fbd0 	bl	80045b0 <LL_TIM_EnableCounter>
  //fan
  LL_TIM_EnableAllOutputs(TIM8);
 8004e10:	480d      	ldr	r0, [pc, #52]	; (8004e48 <TIMER_init+0x80>)
 8004e12:	f7ff fd26 	bl	8004862 <LL_TIM_EnableAllOutputs>
  LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH3);
 8004e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e1a:	480b      	ldr	r0, [pc, #44]	; (8004e48 <TIMER_init+0x80>)
 8004e1c:	f7ff fbf8 	bl	8004610 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM8);
 8004e20:	4809      	ldr	r0, [pc, #36]	; (8004e48 <TIMER_init+0x80>)
 8004e22:	f7ff fbc5 	bl	80045b0 <LL_TIM_EnableCounter>
  //ctrl
  LL_TIM_EnableIT_UPDATE(TIM1);
 8004e26:	4809      	ldr	r0, [pc, #36]	; (8004e4c <TIMER_init+0x84>)
 8004e28:	f7ff fd2b 	bl	8004882 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8004e2c:	4807      	ldr	r0, [pc, #28]	; (8004e4c <TIMER_init+0x84>)
 8004e2e:	f7ff fbbf 	bl	80045b0 <LL_TIM_EnableCounter>
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40001000 	.word	0x40001000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40013400 	.word	0x40013400
 8004e4c:	40012c00 	.word	0x40012c00

08004e50 <Enable_TIM2>:

void Enable_TIM2(void){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM2);
 8004e54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e58:	f7ff fbaa 	bl	80045b0 <LL_TIM_EnableCounter>
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <Enable_TIM3>:

void Disable_TIM2(void){
  LL_TIM_DisableCounter(TIM2);
}

void Enable_TIM3(void){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM3);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <Enable_TIM3+0x10>)
 8004e66:	f7ff fba3 	bl	80045b0 <LL_TIM_EnableCounter>
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40000400 	.word	0x40000400
 8004e74:	00000000 	.word	0x00000000

08004e78 <Set_DutyTIM2>:

void Disable_TIM3(void){
  LL_TIM_DisableCounter(TIM3);
}

void Set_DutyTIM2(uint16_t duty){
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	ee17 0a90 	vmov	r0, s15
 8004e90:	f7fb fb82 	bl	8000598 <__aeabi_f2d>
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <Set_DutyTIM2+0x78>)
 8004e9a:	f7fb fcff 	bl	800089c <__aeabi_ddiv>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	a310      	add	r3, pc, #64	; (adr r3, 8004ee8 <Set_DutyTIM2+0x70>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fbcc 	bl	8000648 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7fb fe9e 	bl	8000bf8 <__aeabi_d2uiz>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004ec0:	89fb      	ldrh	r3, [r7, #14]
 8004ec2:	f240 3251 	movw	r2, #849	; 0x351
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d902      	bls.n	8004ed0 <Set_DutyTIM2+0x58>
    compare = 849;
 8004eca:	f240 3351 	movw	r3, #849	; 0x351
 8004ece:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM2,compare);
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004ed8:	f7ff fc5a 	bl	8004790 <LL_TIM_OC_SetCompareCH2>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	408a8800 	.word	0x408a8800
 8004ef0:	408f4000 	.word	0x408f4000
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <Set_DutyTIM3>:

void Set_DutyTIM3(uint16_t duty){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	ee07 3a90 	vmov	s15, r3
 8004f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0c:	ee17 0a90 	vmov	r0, s15
 8004f10:	f7fb fb42 	bl	8000598 <__aeabi_f2d>
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <Set_DutyTIM3+0x78>)
 8004f1a:	f7fb fcbf 	bl	800089c <__aeabi_ddiv>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	a310      	add	r3, pc, #64	; (adr r3, 8004f68 <Set_DutyTIM3+0x70>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f7fb fb8c 	bl	8000648 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f7fb fe5e 	bl	8000bf8 <__aeabi_d2uiz>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	f240 3251 	movw	r2, #849	; 0x351
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d902      	bls.n	8004f50 <Set_DutyTIM3+0x58>
    compare = 849;
 8004f4a:	f240 3351 	movw	r3, #849	; 0x351
 8004f4e:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM3,compare);
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4807      	ldr	r0, [pc, #28]	; (8004f74 <Set_DutyTIM3+0x7c>)
 8004f56:	f7ff fc1b 	bl	8004790 <LL_TIM_OC_SetCompareCH2>
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	f3af 8000 	nop.w
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	408a8800 	.word	0x408a8800
 8004f70:	408f4000 	.word	0x408f4000
 8004f74:	40000400 	.word	0x40000400

08004f78 <Set_DutyTIM8>:

void Disable_TIM8(void){
  LL_TIM_DisableCounter(TIM8);
}

void Set_DutyTIM8(uint16_t duty){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8c:	ee17 0a90 	vmov	r0, s15
 8004f90:	f7fb fb02 	bl	8000598 <__aeabi_f2d>
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <Set_DutyTIM8+0x78>)
 8004f9a:	f7fb fc7f 	bl	800089c <__aeabi_ddiv>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	a310      	add	r3, pc, #64	; (adr r3, 8004fe8 <Set_DutyTIM8+0x70>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb fb4c 	bl	8000648 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f7fb fe1e 	bl	8000bf8 <__aeabi_d2uiz>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004fc0:	89fb      	ldrh	r3, [r7, #14]
 8004fc2:	f240 3251 	movw	r2, #849	; 0x351
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d902      	bls.n	8004fd0 <Set_DutyTIM8+0x58>
    compare = 849;
 8004fca:	f240 3351 	movw	r3, #849	; 0x351
 8004fce:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH3(TIM8,compare);
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <Set_DutyTIM8+0x7c>)
 8004fd6:	f7ff fbe9 	bl	80047ac <LL_TIM_OC_SetCompareCH3>
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	408a8800 	.word	0x408a8800
 8004ff0:	408f4000 	.word	0x408f4000
 8004ff4:	40013400 	.word	0x40013400

08004ff8 <LL_DMA_SetDataTransferDirection>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005008:	4a0e      	ldr	r2, [pc, #56]	; (8005044 <LL_DMA_SetDataTransferDirection+0x4c>)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	4413      	add	r3, r2
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	4908      	ldr	r1, [pc, #32]	; (8005044 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	440a      	add	r2, r1
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	4611      	mov	r1, r2
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	440a      	add	r2, r1
 800502e:	4611      	mov	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	0801c71c 	.word	0x0801c71c

08005048 <LL_DMA_SetMode>:
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <LL_DMA_SetMode+0x48>)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	4413      	add	r3, r2
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 0220 	bic.w	r2, r3, #32
 800506c:	4908      	ldr	r1, [pc, #32]	; (8005090 <LL_DMA_SetMode+0x48>)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	440b      	add	r3, r1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	440b      	add	r3, r1
 800507a:	4619      	mov	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	0801c71c 	.word	0x0801c71c

08005094 <LL_DMA_SetPeriphIncMode>:
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <LL_DMA_SetPeriphIncMode+0x48>)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4413      	add	r3, r2
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050b8:	4908      	ldr	r1, [pc, #32]	; (80050dc <LL_DMA_SetPeriphIncMode+0x48>)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	440b      	add	r3, r1
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4619      	mov	r1, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	440b      	add	r3, r1
 80050c6:	4619      	mov	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	0801c71c 	.word	0x0801c71c

080050e0 <LL_DMA_SetMemoryIncMode>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <LL_DMA_SetMemoryIncMode+0x48>)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005104:	4908      	ldr	r1, [pc, #32]	; (8005128 <LL_DMA_SetMemoryIncMode+0x48>)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	440b      	add	r3, r1
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	4619      	mov	r1, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	440b      	add	r3, r1
 8005112:	4619      	mov	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	0801c71c 	.word	0x0801c71c

0800512c <LL_DMA_SetPeriphSize>:
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <LL_DMA_SetPeriphSize+0x48>)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4413      	add	r3, r2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005150:	4908      	ldr	r1, [pc, #32]	; (8005174 <LL_DMA_SetPeriphSize+0x48>)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	440b      	add	r3, r1
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	4619      	mov	r1, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	440b      	add	r3, r1
 800515e:	4619      	mov	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	0801c71c 	.word	0x0801c71c

08005178 <LL_DMA_SetMemorySize>:
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005188:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <LL_DMA_SetMemorySize+0x48>)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4413      	add	r3, r2
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800519c:	4908      	ldr	r1, [pc, #32]	; (80051c0 <LL_DMA_SetMemorySize+0x48>)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	440b      	add	r3, r1
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	4619      	mov	r1, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	440b      	add	r3, r1
 80051aa:	4619      	mov	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	0801c71c 	.word	0x0801c71c

080051c4 <LL_DMA_SetChannelPriorityLevel>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051e8:	4908      	ldr	r1, [pc, #32]	; (800520c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	440b      	add	r3, r1
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	440b      	add	r3, r1
 80051f6:	4619      	mov	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	0801c71c 	.word	0x0801c71c

08005210 <LL_DMA_SetPeriphRequest>:
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	0a9b      	lsrs	r3, r3, #10
 8005220:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005224:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005238:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800524e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <LL_AHB2_GRP1_EnableClock>:
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800526c:	4b08      	ldr	r3, [pc, #32]	; (8005290 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800526e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005270:	4907      	ldr	r1, [pc, #28]	; (8005290 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800527a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4013      	ands	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40021000 	.word	0x40021000

08005294 <LL_APB2_GRP1_EnableClock>:
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800529e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052a0:	4907      	ldr	r1, [pc, #28]	; (80052c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4013      	ands	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40021000 	.word	0x40021000

080052c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	075b      	lsls	r3, r3, #29
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	065b      	lsls	r3, r3, #25
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d101      	bne.n	8005398 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ba:	d101      	bne.n	80053c0 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e2:	d101      	bne.n	80053e8 <LL_USART_IsActiveFlag_REACK+0x1a>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <LL_USART_IsActiveFlag_REACK+0x1c>
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08e      	sub	sp, #56	; 0x38
 8005418:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800541a:	f107 0318 	add.w	r3, r7, #24
 800541e:	2220      	movs	r2, #32
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f012 f94c 	bl	80176c0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	463b      	mov	r3, r7
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	611a      	str	r2, [r3, #16]
 8005436:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8005438:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800543c:	f7ff ff2a 	bl	8005294 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005440:	2001      	movs	r0, #1
 8005442:	f7ff ff0f 	bl	8005264 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800544a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800544c:	2302      	movs	r3, #2
 800544e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800545c:	2307      	movs	r3, #7
 800545e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005460:	463b      	mov	r3, r7
 8005462:	4619      	mov	r1, r3
 8005464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005468:	f00f fd9f 	bl	8014faa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800546c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005470:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005472:	2302      	movs	r3, #2
 8005474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005482:	2307      	movs	r3, #7
 8005484:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005486:	463b      	mov	r3, r7
 8005488:	4619      	mov	r1, r3
 800548a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800548e:	f00f fd8c 	bl	8014faa <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMAMUX_REQ_USART1_RX);
 8005492:	2218      	movs	r2, #24
 8005494:	2104      	movs	r1, #4
 8005496:	4844      	ldr	r0, [pc, #272]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 8005498:	f7ff feba 	bl	8005210 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800549c:	2200      	movs	r2, #0
 800549e:	2104      	movs	r1, #4
 80054a0:	4841      	ldr	r0, [pc, #260]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054a2:	f7ff fda9 	bl	8004ff8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2104      	movs	r1, #4
 80054aa:	483f      	ldr	r0, [pc, #252]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054ac:	f7ff fe8a 	bl	80051c4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2104      	movs	r1, #4
 80054b4:	483c      	ldr	r0, [pc, #240]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054b6:	f7ff fdc7 	bl	8005048 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80054ba:	2200      	movs	r2, #0
 80054bc:	2104      	movs	r1, #4
 80054be:	483a      	ldr	r0, [pc, #232]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054c0:	f7ff fde8 	bl	8005094 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80054c4:	2280      	movs	r2, #128	; 0x80
 80054c6:	2104      	movs	r1, #4
 80054c8:	4837      	ldr	r0, [pc, #220]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054ca:	f7ff fe09 	bl	80050e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2104      	movs	r1, #4
 80054d2:	4835      	ldr	r0, [pc, #212]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054d4:	f7ff fe2a 	bl	800512c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 80054d8:	2200      	movs	r2, #0
 80054da:	2104      	movs	r1, #4
 80054dc:	4832      	ldr	r0, [pc, #200]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054de:	f7ff fe4b 	bl	8005178 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMAMUX_REQ_USART1_TX);
 80054e2:	2219      	movs	r2, #25
 80054e4:	2105      	movs	r1, #5
 80054e6:	4830      	ldr	r0, [pc, #192]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054e8:	f7ff fe92 	bl	8005210 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80054ec:	2210      	movs	r2, #16
 80054ee:	2105      	movs	r1, #5
 80054f0:	482d      	ldr	r0, [pc, #180]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054f2:	f7ff fd81 	bl	8004ff8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2105      	movs	r1, #5
 80054fa:	482b      	ldr	r0, [pc, #172]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 80054fc:	f7ff fe62 	bl	80051c4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8005500:	2200      	movs	r2, #0
 8005502:	2105      	movs	r1, #5
 8005504:	4828      	ldr	r0, [pc, #160]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 8005506:	f7ff fd9f 	bl	8005048 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800550a:	2200      	movs	r2, #0
 800550c:	2105      	movs	r1, #5
 800550e:	4826      	ldr	r0, [pc, #152]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 8005510:	f7ff fdc0 	bl	8005094 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8005514:	2280      	movs	r2, #128	; 0x80
 8005516:	2105      	movs	r1, #5
 8005518:	4823      	ldr	r0, [pc, #140]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 800551a:	f7ff fde1 	bl	80050e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800551e:	2200      	movs	r2, #0
 8005520:	2105      	movs	r1, #5
 8005522:	4821      	ldr	r0, [pc, #132]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 8005524:	f7ff fe02 	bl	800512c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8005528:	2200      	movs	r2, #0
 800552a:	2105      	movs	r1, #5
 800552c:	481e      	ldr	r0, [pc, #120]	; (80055a8 <MX_USART1_UART_Init+0x194>)
 800552e:	f7ff fe23 	bl	8005178 <LL_DMA_SetMemorySize>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8005536:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800553a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800553c:	2300      	movs	r3, #0
 800553e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005544:	2300      	movs	r3, #0
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005548:	230c      	movs	r3, #12
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800554c:	2300      	movs	r3, #0
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8005554:	f107 0318 	add.w	r3, r7, #24
 8005558:	4619      	mov	r1, r3
 800555a:	4814      	ldr	r0, [pc, #80]	; (80055ac <MX_USART1_UART_Init+0x198>)
 800555c:	f010 fe6e 	bl	801623c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005560:	2100      	movs	r1, #0
 8005562:	4812      	ldr	r0, [pc, #72]	; (80055ac <MX_USART1_UART_Init+0x198>)
 8005564:	f7ff fece 	bl	8005304 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005568:	2100      	movs	r1, #0
 800556a:	4810      	ldr	r0, [pc, #64]	; (80055ac <MX_USART1_UART_Init+0x198>)
 800556c:	f7ff fede 	bl	800532c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8005570:	480e      	ldr	r0, [pc, #56]	; (80055ac <MX_USART1_UART_Init+0x198>)
 8005572:	f7ff feb7 	bl	80052e4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8005576:	480d      	ldr	r0, [pc, #52]	; (80055ac <MX_USART1_UART_Init+0x198>)
 8005578:	f7ff feec 	bl	8005354 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 800557c:	480b      	ldr	r0, [pc, #44]	; (80055ac <MX_USART1_UART_Init+0x198>)
 800557e:	f7ff fea1 	bl	80052c4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8005582:	bf00      	nop
 8005584:	4809      	ldr	r0, [pc, #36]	; (80055ac <MX_USART1_UART_Init+0x198>)
 8005586:	f7ff ff0e 	bl	80053a6 <LL_USART_IsActiveFlag_TEACK>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f9      	beq.n	8005584 <MX_USART1_UART_Init+0x170>
 8005590:	4806      	ldr	r0, [pc, #24]	; (80055ac <MX_USART1_UART_Init+0x198>)
 8005592:	f7ff ff1c 	bl	80053ce <LL_USART_IsActiveFlag_REACK>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f3      	beq.n	8005584 <MX_USART1_UART_Init+0x170>
  {
  }

}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3738      	adds	r7, #56	; 0x38
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40020000 	.word	0x40020000
 80055ac:	40013800 	.word	0x40013800

080055b0 <Communication_Initialize>:

/* USER CODE BEGIN 1 */
void Communication_Initialize(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
    setbuf(stdout,NULL);
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <Communication_Initialize+0x18>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f011 fed1 	bl	8017364 <setbuf>
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000074 	.word	0x20000074

080055cc <USART_TransmitByte>:

void USART_TransmitByte(uint8_t ch){
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1,ch);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4619      	mov	r1, r3
 80055da:	4807      	ldr	r0, [pc, #28]	; (80055f8 <USART_TransmitByte+0x2c>)
 80055dc:	f7ff ff0b 	bl	80053f6 <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1)==0);
 80055e0:	bf00      	nop
 80055e2:	4805      	ldr	r0, [pc, #20]	; (80055f8 <USART_TransmitByte+0x2c>)
 80055e4:	f7ff fecc 	bl	8005380 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f9      	beq.n	80055e2 <USART_TransmitByte+0x16>
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40013800 	.word	0x40013800

080055fc <Get_NowSpeed>:
float  			f_ErrChkAngle; 			  // ジャイロセンサのエラー検出用の角度
bool   			bl_ErrChk; 				  // ジャイロセンサのエラー検出（FALSE：検知しない、TRUE：検知する）
bool			bl_failsafe		= FALSE;	// マウスがの制御不能（TRUE：制御不能、FALSE：制御可能）


float Get_NowSpeed(void){
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	return f_NowSpeed;
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <Get_NowSpeed+0x18>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	ee07 3a90 	vmov	s15, r3
}
 8005608:	eeb0 0a67 	vmov.f32	s0, s15
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000230 	.word	0x20000230

08005618 <Get_NowDist>:

float Get_NowDist(void){
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
	return f_NowDist;
 800561c:	4b04      	ldr	r3, [pc, #16]	; (8005630 <Get_NowDist+0x18>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	ee07 3a90 	vmov	s15, r3
}
 8005624:	eeb0 0a67 	vmov.f32	s0, s15
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	20000254 	.word	0x20000254

08005634 <Get_TrgtDist>:

float Get_TrgtDist(void){
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
	return f_TrgtDist;
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <Get_TrgtDist+0x18>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	ee07 3a90 	vmov	s15, r3
}
 8005640:	eeb0 0a67 	vmov.f32	s0, s15
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000250 	.word	0x20000250

08005650 <Get_TrgtSpeed>:

float Get_TrgtSpeed(void){
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	return f_TrgtSpeed;
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <Get_TrgtSpeed+0x18>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	ee07 3a90 	vmov	s15, r3
}
 800565c:	eeb0 0a67 	vmov.f32	s0, s15
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000234 	.word	0x20000234

0800566c <Set_TrgtSpeed>:

void Set_TrgtSpeed(float speed){
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	ed87 0a01 	vstr	s0, [r7, #4]
	f_TrgtSpeed = speed;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <Set_TrgtSpeed+0x1c>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000234 	.word	0x20000234

0800568c <Get_NowAngle>:

float Get_NowAngle(void){
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
	return f_NowAngle;
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <Get_NowAngle+0x18>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	ee07 3a90 	vmov	s15, r3
}
 8005698:	eeb0 0a67 	vmov.f32	s0, s15
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000284 	.word	0x20000284

080056a8 <Get_TrgtAngle>:

float Get_TrgtAngle(void){
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
	return f_TrgtAngle;
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <Get_TrgtAngle+0x18>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	ee07 3a90 	vmov	s15, r3
}
 80056b4:	eeb0 0a67 	vmov.f32	s0, s15
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000288 	.word	0x20000288

080056c4 <Get_TrgtAngleS>:

float Get_TrgtAngleS(void){
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
	return f_TrgtAngleS;
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <Get_TrgtAngleS+0x18>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	ee07 3a90 	vmov	s15, r3
}
 80056d0:	eeb0 0a67 	vmov.f32	s0, s15
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	20000270 	.word	0x20000270

080056e0 <INTC_sys>:

void INTC_sys(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
	Msec_in++;					// msec
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <INTC_sys+0x58>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <INTC_sys+0x58>)
 80056f0:	801a      	strh	r2, [r3, #0]
	if( Msec_in > 999 ){		// msec → sec
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <INTC_sys+0x58>)
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056fc:	d309      	bcc.n	8005712 <INTC_sys+0x32>
		Msec_in  = 0;
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <INTC_sys+0x58>)
 8005700:	2200      	movs	r2, #0
 8005702:	801a      	strh	r2, [r3, #0]
		Sec_in++;
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <INTC_sys+0x5c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	3301      	adds	r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <INTC_sys+0x5c>)
 8005710:	701a      	strb	r2, [r3, #0]
	}
	if( Sec_in > 59 ){			// sec → min
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <INTC_sys+0x5c>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b3b      	cmp	r3, #59	; 0x3b
 800571a:	d909      	bls.n	8005730 <INTC_sys+0x50>
		Sec_in = 0;
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <INTC_sys+0x5c>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
		Min_in++;
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <INTC_sys+0x60>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3301      	adds	r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <INTC_sys+0x60>)
 800572e:	701a      	strb	r2, [r3, #0]
	}

	CTRL_pol();
 8005730:	f001 fdc6 	bl	80072c0 <CTRL_pol>
}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000c64 	.word	0x20000c64
 800573c:	20000838 	.word	0x20000838
 8005740:	2000042c 	.word	0x2000042c

08005744 <CTRL_sta>:

void CTRL_sta( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	uc_CtrlFlag = TRUE;
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <CTRL_sta+0x14>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	2000021c 	.word	0x2000021c

0800575c <CTRL_stop>:

void CTRL_stop( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
	uc_CtrlFlag = FALSE;
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <CTRL_stop+0x1c>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
	DCM_brakeMot( DCM_R );		// ブレーキ
 8005766:	2000      	movs	r0, #0
 8005768:	f002 fe3e 	bl	80083e8 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800576c:	2001      	movs	r0, #1
 800576e:	f002 fe3b 	bl	80083e8 <DCM_brakeMot>
}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2000021c 	.word	0x2000021c

0800577c <CTRL_clrData>:

void CTRL_clrData( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
	s_GyroVal		= 0;						// ジャイロ値クリア
	f_GyroNowAngle	= 0;							// ジャイロ値クリア

	/* 目標値 */
	f_TrgtSpeed		= 0;						// [速度制御]   目標移動速度 [mm/s]			（1[msec]毎に更新される）
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <CTRL_clrData+0x74>)
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
	f_TrgtDist 		= 0;						// [距離制御]   目標移動距離				（1[msec]毎に更新される）
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <CTRL_clrData+0x78>)
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
	f_TrgtAngleS	= 0;							// [角速度制御] 目標角速度 [rad/s]			（1[msec]毎に更新される）
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <CTRL_clrData+0x7c>)
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
	f_TrgtAngle		= 0;						// [角度制御]   目標角度					（1[msec]毎に更新される）
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <CTRL_clrData+0x80>)
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

	/* 制御データ */
	f_SpeedErrSum	= 0;
 80057a0:	4b17      	ldr	r3, [pc, #92]	; (8005800 <CTRL_clrData+0x84>)
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
	f_DistErrSum 	= 0;						// [距離制御]   距離積分制御のサム値			（1[msec]毎に更新される）
 80057a8:	4b16      	ldr	r3, [pc, #88]	; (8005804 <CTRL_clrData+0x88>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
//	f_AngleSErrSum	= 0;
//	f_AngleErrSum 	= 0;						// [角度制御]   角度積分制御のサム値			（1[msec]毎に更新される）
	f_ErrSpeedBuf	= 0;
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <CTRL_clrData+0x8c>)
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
	f_ErrDistBuf	= 0;						// [壁制御]     距離センサーエラー値のバッファ		（1[msec]毎に更新される）
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <CTRL_clrData+0x90>)
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
	f_ErrAngleSBuf  = 0;
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <CTRL_clrData+0x94>)
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
	l_frontSen_vErr		=0;
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <CTRL_clrData+0x98>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
	l_frontSen_omegaErr		=0;
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <CTRL_clrData+0x9c>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_vBuf	= 0;
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <CTRL_clrData+0xa0>)
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_omegaBuf	= 0;
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <CTRL_clrData+0xa4>)
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	20000234 	.word	0x20000234
 80057f4:	20000250 	.word	0x20000250
 80057f8:	20000270 	.word	0x20000270
 80057fc:	20000288 	.word	0x20000288
 8005800:	2000023c 	.word	0x2000023c
 8005804:	20000260 	.word	0x20000260
 8005808:	20000238 	.word	0x20000238
 800580c:	20000294 	.word	0x20000294
 8005810:	20000274 	.word	0x20000274
 8005814:	20000298 	.word	0x20000298
 8005818:	2000029c 	.word	0x2000029c
 800581c:	200002a0 	.word	0x200002a0
 8005820:	200002a4 	.word	0x200002a4

08005824 <CTRL_clrAngleErrSum>:

void CTRL_clrAngleErrSum(void){
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
	f_AngleErrSum = 0.0;
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <CTRL_clrAngleErrSum+0x20>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
	f_AngleSErrSum = 0.0;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <CTRL_clrAngleErrSum+0x24>)
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000028c 	.word	0x2000028c
 8005848:	20000278 	.word	0x20000278

0800584c <CTRL_clrNowData>:

void CTRL_clrNowData(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
	ENC_setref();
 8005850:	f002 ff6e 	bl	8008730 <ENC_setref>
	l_CntR			= 0;						// カウンタクリア
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <CTRL_clrNowData+0x50>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <CTRL_clrNowData+0x54>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;						// 移動距離リセット
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <CTRL_clrNowData+0x58>)
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <CTRL_clrNowData+0x5c>)
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <CTRL_clrNowData+0x60>)
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <CTRL_clrNowData+0x64>)
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <CTRL_clrNowData+0x68>)
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
	s_GyroVal		= 0;						// ジャイロ値クリア
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <CTRL_clrNowData+0x6c>)
 800588a:	2200      	movs	r2, #0
 800588c:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <CTRL_clrNowData+0x70>)
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20001520 	.word	0x20001520
 80058a0:	2000151c 	.word	0x2000151c
 80058a4:	20000254 	.word	0x20000254
 80058a8:	20000258 	.word	0x20000258
 80058ac:	2000025c 	.word	0x2000025c
 80058b0:	20000230 	.word	0x20000230
 80058b4:	20000284 	.word	0x20000284
 80058b8:	2000084e 	.word	0x2000084e
 80058bc:	20000428 	.word	0x20000428

080058c0 <CTRL_setNowData_Err>:

void CTRL_setNowData_Err(/*float trgt_Dist, */float trgt_Angle){
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	ed87 0a01 	vstr	s0, [r7, #4]
	ENC_setref();
 80058ca:	f002 ff31 	bl	8008730 <ENC_setref>
	l_CntR			= 0;						// カウンタクリア
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <CTRL_setNowData_Err+0x64>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <CTRL_setNowData_Err+0x68>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;//f_NowDist - trgt_Dist;//本来こっちにしたいが妥協						// 移動距離リセット
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <CTRL_setNowData_Err+0x6c>)
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <CTRL_setNowData_Err+0x70>)
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <CTRL_setNowData_Err+0x74>)
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <CTRL_setNowData_Err+0x78>)
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
	f_NowAngle		= f_NowAngle - trgt_Angle;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 80058fa:	4b10      	ldr	r3, [pc, #64]	; (800593c <CTRL_setNowData_Err+0x7c>)
 80058fc:	ed93 7a00 	vldr	s14, [r3]
 8005900:	edd7 7a01 	vldr	s15, [r7, #4]
 8005904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <CTRL_setNowData_Err+0x7c>)
 800590a:	edc3 7a00 	vstr	s15, [r3]
	s_GyroVal		= 0;						// ジャイロ値クリア
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <CTRL_setNowData_Err+0x80>)
 8005910:	2200      	movs	r2, #0
 8005912:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <CTRL_setNowData_Err+0x84>)
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20001520 	.word	0x20001520
 8005928:	2000151c 	.word	0x2000151c
 800592c:	20000254 	.word	0x20000254
 8005930:	20000258 	.word	0x20000258
 8005934:	2000025c 	.word	0x2000025c
 8005938:	20000230 	.word	0x20000230
 800593c:	20000284 	.word	0x20000284
 8005940:	2000084e 	.word	0x2000084e
 8005944:	20000428 	.word	0x20000428

08005948 <CTRL_setData>:

void CTRL_setData( stCTRL_DATA* p_data )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	/* 制御方法 */
	en_Type					= p_data->en_type;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <CTRL_setData+0x84>)
 8005956:	701a      	strb	r2, [r3, #0]

	/* 速度制御 */
	f_Acc 					= p_data->f_acc;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <CTRL_setData+0x88>)
 800595e:	6013      	str	r3, [r2, #0]
	f_BaseSpeed				= p_data->f_now;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <CTRL_setData+0x8c>)
 8005966:	6013      	str	r3, [r2, #0]
	f_LastSpeed				= p_data->f_trgt;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <CTRL_setData+0x90>)
 800596e:	6013      	str	r3, [r2, #0]

	/* 距離制御 */
	f_BaseDist 				= p_data->f_nowDist;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <CTRL_setData+0x94>)
 8005976:	6013      	str	r3, [r2, #0]
	f_LastDist 				= p_data->f_dist;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <CTRL_setData+0x98>)
 800597e:	6013      	str	r3, [r2, #0]

	/* 角速度制御 */
	f_AccAngleS 			= p_data->f_accAngleS;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <CTRL_setData+0x9c>)
 8005986:	6013      	str	r3, [r2, #0]
	f_BaseAngleS			= p_data->f_nowAngleS;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <CTRL_setData+0xa0>)
 800598e:	6013      	str	r3, [r2, #0]
	f_LastAngleS			= p_data->f_trgtAngleS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <CTRL_setData+0xa4>)
 8005996:	6013      	str	r3, [r2, #0]

	/* 角度制御 */
	f_BaseAngle 			= p_data->f_nowAngle;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	4a14      	ldr	r2, [pc, #80]	; (80059f0 <CTRL_setData+0xa8>)
 800599e:	6013      	str	r3, [r2, #0]
	f_LastAngle 			= p_data->f_angle;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <CTRL_setData+0xac>)
 80059a6:	6013      	str	r3, [r2, #0]

	f_Time 					= 0;
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <CTRL_setData+0xb0>)
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
	f_TrgtTime				= p_data->f_time;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a11      	ldr	r2, [pc, #68]	; (80059fc <CTRL_setData+0xb4>)
 80059b6:	6013      	str	r3, [r2, #0]

	escape_wait			= 0;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <CTRL_setData+0xb8>)
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

	CTRL_sta();				// 制御開始
 80059c0:	f7ff fec0 	bl	8005744 <CTRL_sta>

}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2000083a 	.word	0x2000083a
 80059d0:	20000224 	.word	0x20000224
 80059d4:	20000228 	.word	0x20000228
 80059d8:	2000022c 	.word	0x2000022c
 80059dc:	20000248 	.word	0x20000248
 80059e0:	2000024c 	.word	0x2000024c
 80059e4:	20000264 	.word	0x20000264
 80059e8:	20000268 	.word	0x20000268
 80059ec:	2000026c 	.word	0x2000026c
 80059f0:	2000027c 	.word	0x2000027c
 80059f4:	20000280 	.word	0x20000280
 80059f8:	20000220 	.word	0x20000220
 80059fc:	20000008 	.word	0x20000008
 8005a00:	20000c54 	.word	0x20000c54

08005a04 <CTRL_refNow>:

void CTRL_refNow( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
	float f_speedR		= 0;							// 右モータ現在速度 [mm/s]
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
	float f_speedL		= 0;							// 左モータ現在速度 [mm/s]
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
	float f_r 			= F_CNT2MM(l_CntR);				// 右モータの進んだ距離 [mm]
 8005a16:	4b3c      	ldr	r3, [pc, #240]	; (8005b08 <CTRL_refNow+0x104>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a22:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005b0c <CTRL_refNow+0x108>
 8005a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a2a:	edc7 7a01 	vstr	s15, [r7, #4]
	float f_l 			= F_CNT2MM(l_CntL);				// 左モータの進んだ距離 [mm]
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <CTRL_refNow+0x10c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005b0c <CTRL_refNow+0x108>
 8005a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a42:	edc7 7a00 	vstr	s15, [r7]

	/* 速度更新 */
	f_speedR = f_r * 1000.0;								// 右モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8005a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a4a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005b14 <CTRL_refNow+0x110>
 8005a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a52:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speedL = f_l * 1000.0;								// 左モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8005a56:	edd7 7a00 	vldr	s15, [r7]
 8005a5a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005b14 <CTRL_refNow+0x110>
 8005a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a62:	edc7 7a02 	vstr	s15, [r7, #8]
	f_NowSpeed  = ( f_speedR + f_speedL ) / 2;			// マウス（進行方向中心軸） [1mm/s] 
 8005a66:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a7a:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <CTRL_refNow+0x114>)
 8005a7c:	edc3 7a00 	vstr	s15, [r3]
	
	/*motor AngleS*/
	f_MotorR_AngleS	= f_speedR /(PI*TIRE_D)*GEAR_RATIO;
 8005a80:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a84:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005b1c <CTRL_refNow+0x118>
 8005a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005b20 <CTRL_refNow+0x11c>
 8005a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <CTRL_refNow+0x120>)
 8005a96:	edc3 7a00 	vstr	s15, [r3]
	f_MotorL_AngleS = f_speedL /(PI*TIRE_D)*GEAR_RATIO;
 8005a9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a9e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005b1c <CTRL_refNow+0x118>
 8005aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aa6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005b20 <CTRL_refNow+0x11c>
 8005aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <CTRL_refNow+0x124>)
 8005ab0:	edc3 7a00 	vstr	s15, [r3]

	/* 距離更新 */
	f_NowDistR += f_r;									// カウント更新
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <CTRL_refNow+0x128>)
 8005ab6:	ed93 7a00 	vldr	s14, [r3]
 8005aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8005abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <CTRL_refNow+0x128>)
 8005ac4:	edc3 7a00 	vstr	s15, [r3]
	f_NowDistL += f_l;									// カウント更新
 8005ac8:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <CTRL_refNow+0x12c>)
 8005aca:	ed93 7a00 	vldr	s14, [r3]
 8005ace:	edd7 7a00 	vldr	s15, [r7]
 8005ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad6:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <CTRL_refNow+0x12c>)
 8005ad8:	edc3 7a00 	vstr	s15, [r3]
	f_NowDist  = ( f_NowDistR + f_NowDistL ) / 2.0;		// 平均値更新
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <CTRL_refNow+0x128>)
 8005ade:	ed93 7a00 	vldr	s14, [r3]
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <CTRL_refNow+0x12c>)
 8005ae4:	edd3 7a00 	vldr	s15, [r3]
 8005ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <CTRL_refNow+0x130>)
 8005af6:	edc3 7a00 	vstr	s15, [r3]
//	f_NowDist  += (f_r + f_l) / 2.0; 	//setNowdataの残り　うまく行かないため上に戻し
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20001520 	.word	0x20001520
 8005b0c:	3720d973 	.word	0x3720d973
 8005b10:	2000151c 	.word	0x2000151c
 8005b14:	447a0000 	.word	0x447a0000
 8005b18:	20000230 	.word	0x20000230
 8005b1c:	3d20d973 	.word	0x3d20d973
 8005b20:	40666666 	.word	0x40666666
 8005b24:	20000240 	.word	0x20000240
 8005b28:	20000244 	.word	0x20000244
 8005b2c:	20000258 	.word	0x20000258
 8005b30:	2000025c 	.word	0x2000025c
 8005b34:	20000254 	.word	0x20000254

08005b38 <CTRL_refTarget>:

void CTRL_refTarget( void )
{
 8005b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b3c:	af00      	add	r7, sp, #0
	/* mode */
	switch( en_Type ){
 8005b3e:	4ba8      	ldr	r3, [pc, #672]	; (8005de0 <CTRL_refTarget+0x2a8>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b0e      	cmp	r3, #14
 8005b44:	f200 859b 	bhi.w	800667e <CTRL_refTarget+0xb46>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <CTRL_refTarget+0x18>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005c0b 	.word	0x08005c0b
 8005b58:	08005c17 	.word	0x08005c17
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005c0b 	.word	0x08005c0b
 8005b64:	08005c17 	.word	0x08005c17
 8005b68:	0800667f 	.word	0x0800667f
 8005b6c:	08005ccf 	.word	0x08005ccf
 8005b70:	0800667f 	.word	0x0800667f
 8005b74:	08005e19 	.word	0x08005e19
 8005b78:	08005f91 	.word	0x08005f91
 8005b7c:	0800600b 	.word	0x0800600b
 8005b80:	08006231 	.word	0x08006231
 8005b84:	080063fd 	.word	0x080063fd
 8005b88:	080065f5 	.word	0x080065f5

		/* acc(straight) */
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
			if( f_TrgtSpeed < (f_LastSpeed -(f_Acc * 0.001)) ){								// 加速目標更新区間
 8005b8c:	4b95      	ldr	r3, [pc, #596]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fa fd01 	bl	8000598 <__aeabi_f2d>
 8005b96:	4604      	mov	r4, r0
 8005b98:	460d      	mov	r5, r1
 8005b9a:	4b93      	ldr	r3, [pc, #588]	; (8005de8 <CTRL_refTarget+0x2b0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fa fcfa 	bl	8000598 <__aeabi_f2d>
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	4689      	mov	r9, r1
 8005ba8:	4b90      	ldr	r3, [pc, #576]	; (8005dec <CTRL_refTarget+0x2b4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fcf3 	bl	8000598 <__aeabi_f2d>
 8005bb2:	a389      	add	r3, pc, #548	; (adr r3, 8005dd8 <CTRL_refTarget+0x2a0>)
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f7fa fd46 	bl	8000648 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	f7fa fb88 	bl	80002d8 <__aeabi_dsub>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa ffac 	bl	8000b2c <__aeabi_dcmplt>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <CTRL_refTarget+0xc6>
				f_TrgtSpeed = f_BaseSpeed + f_Acc * f_Time;									// 目標速度
 8005bda:	4b84      	ldr	r3, [pc, #528]	; (8005dec <CTRL_refTarget+0x2b4>)
 8005bdc:	ed93 7a00 	vldr	s14, [r3]
 8005be0:	4b83      	ldr	r3, [pc, #524]	; (8005df0 <CTRL_refTarget+0x2b8>)
 8005be2:	edd3 7a00 	vldr	s15, [r3]
 8005be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bea:	4b82      	ldr	r3, [pc, #520]	; (8005df4 <CTRL_refTarget+0x2bc>)
 8005bec:	edd3 7a00 	vldr	s15, [r3]
 8005bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf4:	4b7b      	ldr	r3, [pc, #492]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005bf6:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtSpeed = f_LastSpeed;
			}
			break;
 8005bfa:	f000 bd41 	b.w	8006680 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005bfe:	4b7a      	ldr	r3, [pc, #488]	; (8005de8 <CTRL_refTarget+0x2b0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a78      	ldr	r2, [pc, #480]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005c04:	6013      	str	r3, [r2, #0]
			break;
 8005c06:	f000 bd3b 	b.w	8006680 <CTRL_refTarget+0xb48>

		/* const(straight) */
		case CTRL_CONST:
		case CTRL_SKEW_CONST:
			f_TrgtSpeed = f_BaseSpeed;														// 目標速度
 8005c0a:	4b7a      	ldr	r3, [pc, #488]	; (8005df4 <CTRL_refTarget+0x2bc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a75      	ldr	r2, [pc, #468]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005c10:	6013      	str	r3, [r2, #0]
			break;
 8005c12:	f000 bd35 	b.w	8006680 <CTRL_refTarget+0xb48>

		/* dec(straight) */
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
			/* speed CTRL + position CTRL */
			if( f_TrgtSpeed > (f_LastSpeed +(f_Acc * 0.001))){								// 減速目標更新区間
 8005c16:	4b73      	ldr	r3, [pc, #460]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fa fcbc 	bl	8000598 <__aeabi_f2d>
 8005c20:	4604      	mov	r4, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	4b70      	ldr	r3, [pc, #448]	; (8005de8 <CTRL_refTarget+0x2b0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fa fcb5 	bl	8000598 <__aeabi_f2d>
 8005c2e:	4680      	mov	r8, r0
 8005c30:	4689      	mov	r9, r1
 8005c32:	4b6e      	ldr	r3, [pc, #440]	; (8005dec <CTRL_refTarget+0x2b4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fa fcae 	bl	8000598 <__aeabi_f2d>
 8005c3c:	a366      	add	r3, pc, #408	; (adr r3, 8005dd8 <CTRL_refTarget+0x2a0>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fd01 	bl	8000648 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fb45 	bl	80002dc <__adddf3>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa ff85 	bl	8000b68 <__aeabi_dcmpgt>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02a      	beq.n	8005cba <CTRL_refTarget+0x182>
				f_TrgtSpeed = f_BaseSpeed - f_Acc * f_Time;									// 目標速度
 8005c64:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <CTRL_refTarget+0x2bc>)
 8005c66:	ed93 7a00 	vldr	s14, [r3]
 8005c6a:	4b60      	ldr	r3, [pc, #384]	; (8005dec <CTRL_refTarget+0x2b4>)
 8005c6c:	edd3 6a00 	vldr	s13, [r3]
 8005c70:	4b5f      	ldr	r3, [pc, #380]	; (8005df0 <CTRL_refTarget+0x2b8>)
 8005c72:	edd3 7a00 	vldr	s15, [r3]
 8005c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7e:	4b59      	ldr	r3, [pc, #356]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005c80:	edc3 7a00 	vstr	s15, [r3]
				f_TrgtDist  = f_BaseDist + ( f_BaseSpeed + f_TrgtSpeed ) * f_Time / 2;		// 目標距離
 8005c84:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <CTRL_refTarget+0x2bc>)
 8005c86:	ed93 7a00 	vldr	s14, [r3]
 8005c8a:	4b56      	ldr	r3, [pc, #344]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005c8c:	edd3 7a00 	vldr	s15, [r3]
 8005c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c94:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <CTRL_refTarget+0x2b8>)
 8005c96:	edd3 7a00 	vldr	s15, [r3]
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005ca2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ca6:	4b54      	ldr	r3, [pc, #336]	; (8005df8 <CTRL_refTarget+0x2c0>)
 8005ca8:	edd3 7a00 	vldr	s15, [r3]
 8005cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb0:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <CTRL_refTarget+0x2c4>)
 8005cb2:	edc3 7a00 	vstr	s15, [r3]
			/* position CTRL */
			else{
				f_TrgtSpeed = f_LastSpeed;
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8005cb6:	f000 bce3 	b.w	8006680 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005cba:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <CTRL_refTarget+0x2b0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a49      	ldr	r2, [pc, #292]	; (8005de4 <CTRL_refTarget+0x2ac>)
 8005cc0:	6013      	str	r3, [r2, #0]
				f_TrgtDist  = f_LastDist;													// 目標距離
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	; (8005e00 <CTRL_refTarget+0x2c8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4d      	ldr	r2, [pc, #308]	; (8005dfc <CTRL_refTarget+0x2c4>)
 8005cc8:	6013      	str	r3, [r2, #0]
			break;
 8005cca:	f000 bcd9 	b.w	8006680 <CTRL_refTarget+0xb48>

		/* acc(Turn) */
		case CTRL_ACC_TRUN:

			/* CCW  hidari*/
			if( f_LastAngle > 0 ){
 8005cce:	4b4d      	ldr	r3, [pc, #308]	; (8005e04 <CTRL_refTarget+0x2cc>)
 8005cd0:	edd3 7a00 	vldr	s15, [r3]
 8005cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	dd3d      	ble.n	8005d5a <CTRL_refTarget+0x222>
				if ( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fc58 	bl	8000598 <__aeabi_f2d>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	4b47      	ldr	r3, [pc, #284]	; (8005e0c <CTRL_refTarget+0x2d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fa fc51 	bl	8000598 <__aeabi_f2d>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	4689      	mov	r9, r1
 8005cfa:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <CTRL_refTarget+0x2d8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fc4a 	bl	8000598 <__aeabi_f2d>
 8005d04:	a334      	add	r3, pc, #208	; (adr r3, 8005dd8 <CTRL_refTarget+0x2a0>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fc9d 	bl	8000648 <__aeabi_dmul>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4640      	mov	r0, r8
 8005d14:	4649      	mov	r1, r9
 8005d16:	f7fa fadf 	bl	80002d8 <__aeabi_dsub>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa ff03 	bl	8000b2c <__aeabi_dcmplt>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <CTRL_refTarget+0x216>
					f_TrgtAngleS = 0.0 + f_AccAngleS * f_Time;									// 目標角速度
 8005d2c:	4b38      	ldr	r3, [pc, #224]	; (8005e10 <CTRL_refTarget+0x2d8>)
 8005d2e:	ed93 7a00 	vldr	s14, [r3]
 8005d32:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <CTRL_refTarget+0x2b8>)
 8005d34:	edd3 7a00 	vldr	s15, [r3]
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005e14 <CTRL_refTarget+0x2dc>
 8005d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005d46:	edc3 7a00 	vstr	s15, [r3]
				}
				else{
					f_TrgtAngleS = f_LastAngleS;
				}
			}
			break;
 8005d4a:	f000 bc99 	b.w	8006680 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <CTRL_refTarget+0x2d4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005d54:	6013      	str	r3, [r2, #0]
			break;
 8005d56:	f000 bc93 	b.w	8006680 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){
 8005d5a:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fc1a 	bl	8000598 <__aeabi_f2d>
 8005d64:	4604      	mov	r4, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	4b28      	ldr	r3, [pc, #160]	; (8005e0c <CTRL_refTarget+0x2d4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa fc13 	bl	8000598 <__aeabi_f2d>
 8005d72:	4680      	mov	r8, r0
 8005d74:	4689      	mov	r9, r1
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <CTRL_refTarget+0x2d8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fa fc0c 	bl	8000598 <__aeabi_f2d>
 8005d80:	a315      	add	r3, pc, #84	; (adr r3, 8005dd8 <CTRL_refTarget+0x2a0>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fc5f 	bl	8000648 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4640      	mov	r0, r8
 8005d90:	4649      	mov	r1, r9
 8005d92:	f7fa faa3 	bl	80002dc <__adddf3>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fee3 	bl	8000b68 <__aeabi_dcmpgt>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d010      	beq.n	8005dca <CTRL_refTarget+0x292>
				f_TrgtAngleS = 0.0 - f_AccAngleS * f_Time;									// 目標角速度
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <CTRL_refTarget+0x2d8>)
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <CTRL_refTarget+0x2b8>)
 8005db0:	edd3 7a00 	vldr	s15, [r3]
 8005db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005e14 <CTRL_refTarget+0x2dc>
 8005dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005dc2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005dc6:	f000 bc5b 	b.w	8006680 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <CTRL_refTarget+0x2d4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <CTRL_refTarget+0x2d0>)
 8005dd0:	6013      	str	r3, [r2, #0]
			break;
 8005dd2:	f000 bc55 	b.w	8006680 <CTRL_refTarget+0xb48>
 8005dd6:	bf00      	nop
 8005dd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ddc:	3f50624d 	.word	0x3f50624d
 8005de0:	2000083a 	.word	0x2000083a
 8005de4:	20000234 	.word	0x20000234
 8005de8:	2000022c 	.word	0x2000022c
 8005dec:	20000224 	.word	0x20000224
 8005df0:	20000220 	.word	0x20000220
 8005df4:	20000228 	.word	0x20000228
 8005df8:	20000248 	.word	0x20000248
 8005dfc:	20000250 	.word	0x20000250
 8005e00:	2000024c 	.word	0x2000024c
 8005e04:	20000280 	.word	0x20000280
 8005e08:	20000270 	.word	0x20000270
 8005e0c:	2000026c 	.word	0x2000026c
 8005e10:	20000264 	.word	0x20000264
 8005e14:	00000000 	.word	0x00000000
			break;

		/* dec(Turn) */
		case CTRL_DEC_TRUN:
			/* CCW */
			if( f_LastAngle > 0 ){
 8005e18:	4baf      	ldr	r3, [pc, #700]	; (80060d8 <CTRL_refTarget+0x5a0>)
 8005e1a:	edd3 7a00 	vldr	s15, [r3]
 8005e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e26:	dd59      	ble.n	8005edc <CTRL_refTarget+0x3a4>

				/* Angle speed CTRL + Angle CTRL */
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){						// 減速目標更新区間
 8005e28:	4bac      	ldr	r3, [pc, #688]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fbb3 	bl	8000598 <__aeabi_f2d>
 8005e32:	4604      	mov	r4, r0
 8005e34:	460d      	mov	r5, r1
 8005e36:	4baa      	ldr	r3, [pc, #680]	; (80060e0 <CTRL_refTarget+0x5a8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa fbac 	bl	8000598 <__aeabi_f2d>
 8005e40:	4680      	mov	r8, r0
 8005e42:	4689      	mov	r9, r1
 8005e44:	4ba7      	ldr	r3, [pc, #668]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fa fba5 	bl	8000598 <__aeabi_f2d>
 8005e4e:	a3a0      	add	r3, pc, #640	; (adr r3, 80060d0 <CTRL_refTarget+0x598>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f7fa fbf8 	bl	8000648 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	4649      	mov	r1, r9
 8005e60:	f7fa fa3c 	bl	80002dc <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	f7fa fe7c 	bl	8000b68 <__aeabi_dcmpgt>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d029      	beq.n	8005eca <CTRL_refTarget+0x392>
					f_TrgtAngleS = f_BaseAngleS - f_AccAngleS * f_Time;							// 目標角速度
 8005e76:	4b9c      	ldr	r3, [pc, #624]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8005e78:	ed93 7a00 	vldr	s14, [r3]
 8005e7c:	4b99      	ldr	r3, [pc, #612]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8005e7e:	edd3 6a00 	vldr	s13, [r3]
 8005e82:	4b9a      	ldr	r3, [pc, #616]	; (80060ec <CTRL_refTarget+0x5b4>)
 8005e84:	edd3 7a00 	vldr	s15, [r3]
 8005e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e90:	4b92      	ldr	r3, [pc, #584]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005e92:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005e96:	4b94      	ldr	r3, [pc, #592]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8005e98:	ed93 7a00 	vldr	s14, [r3]
 8005e9c:	4b8f      	ldr	r3, [pc, #572]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005e9e:	edd3 7a00 	vldr	s15, [r3]
 8005ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ea6:	4b91      	ldr	r3, [pc, #580]	; (80060ec <CTRL_refTarget+0x5b4>)
 8005ea8:	edd3 7a00 	vldr	s15, [r3]
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005eb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005eb8:	4b8d      	ldr	r3, [pc, #564]	; (80060f0 <CTRL_refTarget+0x5b8>)
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec2:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <CTRL_refTarget+0x5bc>)
 8005ec4:	edc3 7a00 	vstr	s15, [r3]
				else{
					f_TrgtAngleS = f_LastAngleS;
					f_TrgtAngle  = f_LastAngle;													// 目標距離
				}
			}
			break;
 8005ec8:	e3da      	b.n	8006680 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005eca:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <CTRL_refTarget+0x5a8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a83      	ldr	r2, [pc, #524]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005ed0:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005ed2:	4b81      	ldr	r3, [pc, #516]	; (80060d8 <CTRL_refTarget+0x5a0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a87      	ldr	r2, [pc, #540]	; (80060f4 <CTRL_refTarget+0x5bc>)
 8005ed8:	6013      	str	r3, [r2, #0]
			break;
 8005eda:	e3d1      	b.n	8006680 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001))){						// 減速目標更新区間
 8005edc:	4b7f      	ldr	r3, [pc, #508]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fa fb59 	bl	8000598 <__aeabi_f2d>
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	460d      	mov	r5, r1
 8005eea:	4b7d      	ldr	r3, [pc, #500]	; (80060e0 <CTRL_refTarget+0x5a8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa fb52 	bl	8000598 <__aeabi_f2d>
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	4689      	mov	r9, r1
 8005ef8:	4b7a      	ldr	r3, [pc, #488]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fa fb4b 	bl	8000598 <__aeabi_f2d>
 8005f02:	a373      	add	r3, pc, #460	; (adr r3, 80060d0 <CTRL_refTarget+0x598>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa fb9e 	bl	8000648 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4640      	mov	r0, r8
 8005f12:	4649      	mov	r1, r9
 8005f14:	f7fa f9e0 	bl	80002d8 <__aeabi_dsub>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fe04 	bl	8000b2c <__aeabi_dcmplt>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d029      	beq.n	8005f7e <CTRL_refTarget+0x446>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8005f2a:	4b6e      	ldr	r3, [pc, #440]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8005f2c:	ed93 7a00 	vldr	s14, [r3]
 8005f30:	4b6e      	ldr	r3, [pc, #440]	; (80060ec <CTRL_refTarget+0x5b4>)
 8005f32:	edd3 7a00 	vldr	s15, [r3]
 8005f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f3a:	4b6b      	ldr	r3, [pc, #428]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8005f3c:	edd3 7a00 	vldr	s15, [r3]
 8005f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f44:	4b65      	ldr	r3, [pc, #404]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005f46:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005f4a:	4b67      	ldr	r3, [pc, #412]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8005f4c:	ed93 7a00 	vldr	s14, [r3]
 8005f50:	4b62      	ldr	r3, [pc, #392]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005f52:	edd3 7a00 	vldr	s15, [r3]
 8005f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f5a:	4b64      	ldr	r3, [pc, #400]	; (80060ec <CTRL_refTarget+0x5b4>)
 8005f5c:	edd3 7a00 	vldr	s15, [r3]
 8005f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f6c:	4b60      	ldr	r3, [pc, #384]	; (80060f0 <CTRL_refTarget+0x5b8>)
 8005f6e:	edd3 7a00 	vldr	s15, [r3]
 8005f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f76:	4b5f      	ldr	r3, [pc, #380]	; (80060f4 <CTRL_refTarget+0x5bc>)
 8005f78:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005f7c:	e380      	b.n	8006680 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005f7e:	4b58      	ldr	r3, [pc, #352]	; (80060e0 <CTRL_refTarget+0x5a8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a56      	ldr	r2, [pc, #344]	; (80060dc <CTRL_refTarget+0x5a4>)
 8005f84:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005f86:	4b54      	ldr	r3, [pc, #336]	; (80060d8 <CTRL_refTarget+0x5a0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <CTRL_refTarget+0x5bc>)
 8005f8c:	6013      	str	r3, [r2, #0]
			break;
 8005f8e:	e377      	b.n	8006680 <CTRL_refTarget+0xb48>

		/* entry(sura) */
		case CTRL_ENTRY_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8005f90:	4b59      	ldr	r3, [pc, #356]	; (80060f8 <CTRL_refTarget+0x5c0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a59      	ldr	r2, [pc, #356]	; (80060fc <CTRL_refTarget+0x5c4>)
 8005f96:	6013      	str	r3, [r2, #0]
			if( f_TrgtDist <= f_LastDist - (f_TrgtSpeed * 0.001) ){
 8005f98:	4b59      	ldr	r3, [pc, #356]	; (8006100 <CTRL_refTarget+0x5c8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fa fafb 	bl	8000598 <__aeabi_f2d>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	4b57      	ldr	r3, [pc, #348]	; (8006104 <CTRL_refTarget+0x5cc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa faf4 	bl	8000598 <__aeabi_f2d>
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	4689      	mov	r9, r1
 8005fb4:	4b51      	ldr	r3, [pc, #324]	; (80060fc <CTRL_refTarget+0x5c4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fa faed 	bl	8000598 <__aeabi_f2d>
 8005fbe:	a344      	add	r3, pc, #272	; (adr r3, 80060d0 <CTRL_refTarget+0x598>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f7fa fb40 	bl	8000648 <__aeabi_dmul>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4640      	mov	r0, r8
 8005fce:	4649      	mov	r1, r9
 8005fd0:	f7fa f982 	bl	80002d8 <__aeabi_dsub>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa fdb0 	bl	8000b40 <__aeabi_dcmple>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d100      	bne.n	8005fe8 <CTRL_refTarget+0x4b0>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
			}
			break;
 8005fe6:	e34b      	b.n	8006680 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 8005fe8:	4b44      	ldr	r3, [pc, #272]	; (80060fc <CTRL_refTarget+0x5c4>)
 8005fea:	ed93 7a00 	vldr	s14, [r3]
 8005fee:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <CTRL_refTarget+0x5b4>)
 8005ff0:	edd3 7a00 	vldr	s15, [r3]
 8005ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ff8:	4b43      	ldr	r3, [pc, #268]	; (8006108 <CTRL_refTarget+0x5d0>)
 8005ffa:	edd3 7a00 	vldr	s15, [r3]
 8005ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006002:	4b3f      	ldr	r3, [pc, #252]	; (8006100 <CTRL_refTarget+0x5c8>)
 8006004:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006008:	e33a      	b.n	8006680 <CTRL_refTarget+0xb48>

		/* acc(スラローム) */
		case CTRL_ACC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 800600a:	4b3b      	ldr	r3, [pc, #236]	; (80060f8 <CTRL_refTarget+0x5c0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3b      	ldr	r2, [pc, #236]	; (80060fc <CTRL_refTarget+0x5c4>)
 8006010:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006012:	4b31      	ldr	r3, [pc, #196]	; (80060d8 <CTRL_refTarget+0x5a0>)
 8006014:	edd3 7a00 	vldr	s15, [r3]
 8006018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	dd74      	ble.n	800610c <CTRL_refTarget+0x5d4>
				if( f_TrgtAngleS < (f_LastAngleS +(f_AccAngleS * 0.001))){
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <CTRL_refTarget+0x5a4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa fab6 	bl	8000598 <__aeabi_f2d>
 800602c:	4604      	mov	r4, r0
 800602e:	460d      	mov	r5, r1
 8006030:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <CTRL_refTarget+0x5a8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fa faaf 	bl	8000598 <__aeabi_f2d>
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa faa8 	bl	8000598 <__aeabi_f2d>
 8006048:	a321      	add	r3, pc, #132	; (adr r3, 80060d0 <CTRL_refTarget+0x598>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fafb 	bl	8000648 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4640      	mov	r0, r8
 8006058:	4649      	mov	r1, r9
 800605a:	f7fa f93f 	bl	80002dc <__adddf3>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa fd61 	bl	8000b2c <__aeabi_dcmplt>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d029      	beq.n	80060c4 <CTRL_refTarget+0x58c>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006070:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <CTRL_refTarget+0x5ac>)
 8006072:	ed93 7a00 	vldr	s14, [r3]
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <CTRL_refTarget+0x5b4>)
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006080:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8006082:	edd3 7a00 	vldr	s15, [r3]
 8006086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <CTRL_refTarget+0x5a4>)
 800608c:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006090:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <CTRL_refTarget+0x5b0>)
 8006092:	ed93 7a00 	vldr	s14, [r3]
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <CTRL_refTarget+0x5a4>)
 8006098:	edd3 7a00 	vldr	s15, [r3]
 800609c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <CTRL_refTarget+0x5b4>)
 80060a2:	edd3 7a00 	vldr	s15, [r3]
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80060ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <CTRL_refTarget+0x5b8>)
 80060b4:	edd3 7a00 	vldr	s15, [r3]
 80060b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <CTRL_refTarget+0x5bc>)
 80060be:	edc3 7a00 	vstr	s15, [r3]
 80060c2:	e078      	b.n	80061b6 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <CTRL_refTarget+0x5a0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <CTRL_refTarget+0x5bc>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e073      	b.n	80061b6 <CTRL_refTarget+0x67e>
 80060ce:	bf00      	nop
 80060d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80060d4:	3f50624d 	.word	0x3f50624d
 80060d8:	20000280 	.word	0x20000280
 80060dc:	20000270 	.word	0x20000270
 80060e0:	2000026c 	.word	0x2000026c
 80060e4:	20000264 	.word	0x20000264
 80060e8:	20000268 	.word	0x20000268
 80060ec:	20000220 	.word	0x20000220
 80060f0:	2000027c 	.word	0x2000027c
 80060f4:	20000288 	.word	0x20000288
 80060f8:	20000228 	.word	0x20000228
 80060fc:	20000234 	.word	0x20000234
 8006100:	20000250 	.word	0x20000250
 8006104:	2000024c 	.word	0x2000024c
 8006108:	20000248 	.word	0x20000248
				}
			}
			/* CW */
			else{
				if( f_TrgtAngleS > (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 800610c:	4bae      	ldr	r3, [pc, #696]	; (80063c8 <CTRL_refTarget+0x890>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fa fa41 	bl	8000598 <__aeabi_f2d>
 8006116:	4604      	mov	r4, r0
 8006118:	460d      	mov	r5, r1
 800611a:	4bac      	ldr	r3, [pc, #688]	; (80063cc <CTRL_refTarget+0x894>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fa fa3a 	bl	8000598 <__aeabi_f2d>
 8006124:	4680      	mov	r8, r0
 8006126:	4689      	mov	r9, r1
 8006128:	4ba9      	ldr	r3, [pc, #676]	; (80063d0 <CTRL_refTarget+0x898>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa33 	bl	8000598 <__aeabi_f2d>
 8006132:	a3a3      	add	r3, pc, #652	; (adr r3, 80063c0 <CTRL_refTarget+0x888>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa86 	bl	8000648 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f8c8 	bl	80002d8 <__aeabi_dsub>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fd0a 	bl	8000b68 <__aeabi_dcmpgt>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d029      	beq.n	80061ae <CTRL_refTarget+0x676>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 800615a:	4b9d      	ldr	r3, [pc, #628]	; (80063d0 <CTRL_refTarget+0x898>)
 800615c:	ed93 7a00 	vldr	s14, [r3]
 8006160:	4b9c      	ldr	r3, [pc, #624]	; (80063d4 <CTRL_refTarget+0x89c>)
 8006162:	edd3 7a00 	vldr	s15, [r3]
 8006166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800616a:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <CTRL_refTarget+0x8a0>)
 800616c:	edd3 7a00 	vldr	s15, [r3]
 8006170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006174:	4b94      	ldr	r3, [pc, #592]	; (80063c8 <CTRL_refTarget+0x890>)
 8006176:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 800617a:	4b97      	ldr	r3, [pc, #604]	; (80063d8 <CTRL_refTarget+0x8a0>)
 800617c:	ed93 7a00 	vldr	s14, [r3]
 8006180:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <CTRL_refTarget+0x890>)
 8006182:	edd3 7a00 	vldr	s15, [r3]
 8006186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <CTRL_refTarget+0x89c>)
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006194:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006198:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800619c:	4b8f      	ldr	r3, [pc, #572]	; (80063dc <CTRL_refTarget+0x8a4>)
 800619e:	edd3 7a00 	vldr	s15, [r3]
 80061a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a6:	4b8e      	ldr	r3, [pc, #568]	; (80063e0 <CTRL_refTarget+0x8a8>)
 80061a8:	edc3 7a00 	vstr	s15, [r3]
 80061ac:	e003      	b.n	80061b6 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80061ae:	4b8d      	ldr	r3, [pc, #564]	; (80063e4 <CTRL_refTarget+0x8ac>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a8b      	ldr	r2, [pc, #556]	; (80063e0 <CTRL_refTarget+0x8a8>)
 80061b4:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 80061b6:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <CTRL_refTarget+0x8b0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fa f9ec 	bl	8000598 <__aeabi_f2d>
 80061c0:	4604      	mov	r4, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	4b89      	ldr	r3, [pc, #548]	; (80063ec <CTRL_refTarget+0x8b4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fa f9e5 	bl	8000598 <__aeabi_f2d>
 80061ce:	4680      	mov	r8, r0
 80061d0:	4689      	mov	r9, r1
 80061d2:	4b87      	ldr	r3, [pc, #540]	; (80063f0 <CTRL_refTarget+0x8b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fa f9de 	bl	8000598 <__aeabi_f2d>
 80061dc:	a378      	add	r3, pc, #480	; (adr r3, 80063c0 <CTRL_refTarget+0x888>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa fa31 	bl	8000648 <__aeabi_dmul>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	f7fa f873 	bl	80002d8 <__aeabi_dsub>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa fcb5 	bl	8000b68 <__aeabi_dcmpgt>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d010      	beq.n	8006226 <CTRL_refTarget+0x6ee>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 8006204:	4b7a      	ldr	r3, [pc, #488]	; (80063f0 <CTRL_refTarget+0x8b8>)
 8006206:	ed93 7a00 	vldr	s14, [r3]
 800620a:	4b72      	ldr	r3, [pc, #456]	; (80063d4 <CTRL_refTarget+0x89c>)
 800620c:	edd3 7a00 	vldr	s15, [r3]
 8006210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006214:	4b77      	ldr	r3, [pc, #476]	; (80063f4 <CTRL_refTarget+0x8bc>)
 8006216:	edd3 7a00 	vldr	s15, [r3]
 800621a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621e:	4b73      	ldr	r3, [pc, #460]	; (80063ec <CTRL_refTarget+0x8b4>)
 8006220:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006224:	e22c      	b.n	8006680 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006226:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <CTRL_refTarget+0x8b0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a70      	ldr	r2, [pc, #448]	; (80063ec <CTRL_refTarget+0x8b4>)
 800622c:	6013      	str	r3, [r2, #0]
			break;
 800622e:	e227      	b.n	8006680 <CTRL_refTarget+0xb48>

		/* const(sura) */
		case CTRL_CONST_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8006230:	4b71      	ldr	r3, [pc, #452]	; (80063f8 <CTRL_refTarget+0x8c0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a6e      	ldr	r2, [pc, #440]	; (80063f0 <CTRL_refTarget+0x8b8>)
 8006236:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = f_BaseAngleS;							// 目標角速度
 8006238:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <CTRL_refTarget+0x8a0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a62      	ldr	r2, [pc, #392]	; (80063c8 <CTRL_refTarget+0x890>)
 800623e:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006240:	4b68      	ldr	r3, [pc, #416]	; (80063e4 <CTRL_refTarget+0x8ac>)
 8006242:	edd3 7a00 	vldr	s15, [r3]
 8006246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624e:	dd3c      	ble.n	80062ca <CTRL_refTarget+0x792>
				if( f_TrgtAngle < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 8006250:	4b63      	ldr	r3, [pc, #396]	; (80063e0 <CTRL_refTarget+0x8a8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fa f99f 	bl	8000598 <__aeabi_f2d>
 800625a:	4604      	mov	r4, r0
 800625c:	460d      	mov	r5, r1
 800625e:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <CTRL_refTarget+0x8ac>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa f998 	bl	8000598 <__aeabi_f2d>
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	4b58      	ldr	r3, [pc, #352]	; (80063d0 <CTRL_refTarget+0x898>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f7fa f991 	bl	8000598 <__aeabi_f2d>
 8006276:	a352      	add	r3, pc, #328	; (adr r3, 80063c0 <CTRL_refTarget+0x888>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9e4 	bl	8000648 <__aeabi_dmul>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4640      	mov	r0, r8
 8006286:	4649      	mov	r1, r9
 8006288:	f7fa f828 	bl	80002dc <__adddf3>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa fc4a 	bl	8000b2c <__aeabi_dcmplt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <CTRL_refTarget+0x788>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 800629e:	4b4a      	ldr	r3, [pc, #296]	; (80063c8 <CTRL_refTarget+0x890>)
 80062a0:	ed93 7a00 	vldr	s14, [r3]
 80062a4:	4b4b      	ldr	r3, [pc, #300]	; (80063d4 <CTRL_refTarget+0x89c>)
 80062a6:	edd3 7a00 	vldr	s15, [r3]
 80062aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062ae:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <CTRL_refTarget+0x8a4>)
 80062b0:	edd3 7a00 	vldr	s15, [r3]
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <CTRL_refTarget+0x8a8>)
 80062ba:	edc3 7a00 	vstr	s15, [r3]
 80062be:	e040      	b.n	8006342 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 80062c0:	4b48      	ldr	r3, [pc, #288]	; (80063e4 <CTRL_refTarget+0x8ac>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a46      	ldr	r2, [pc, #280]	; (80063e0 <CTRL_refTarget+0x8a8>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	e03b      	b.n	8006342 <CTRL_refTarget+0x80a>
				}
			}
			/* CW */
			else{
				if( f_TrgtAngle > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 80062ca:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <CTRL_refTarget+0x8a8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fa f962 	bl	8000598 <__aeabi_f2d>
 80062d4:	4604      	mov	r4, r0
 80062d6:	460d      	mov	r5, r1
 80062d8:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <CTRL_refTarget+0x8ac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fa f95b 	bl	8000598 <__aeabi_f2d>
 80062e2:	4680      	mov	r8, r0
 80062e4:	4689      	mov	r9, r1
 80062e6:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <CTRL_refTarget+0x898>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f954 	bl	8000598 <__aeabi_f2d>
 80062f0:	a333      	add	r3, pc, #204	; (adr r3, 80063c0 <CTRL_refTarget+0x888>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f9a7 	bl	8000648 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7f9 ffe9 	bl	80002d8 <__aeabi_dsub>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4620      	mov	r0, r4
 800630c:	4629      	mov	r1, r5
 800630e:	f7fa fc2b 	bl	8000b68 <__aeabi_dcmpgt>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d010      	beq.n	800633a <CTRL_refTarget+0x802>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <CTRL_refTarget+0x890>)
 800631a:	ed93 7a00 	vldr	s14, [r3]
 800631e:	4b2d      	ldr	r3, [pc, #180]	; (80063d4 <CTRL_refTarget+0x89c>)
 8006320:	edd3 7a00 	vldr	s15, [r3]
 8006324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006328:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <CTRL_refTarget+0x8a4>)
 800632a:	edd3 7a00 	vldr	s15, [r3]
 800632e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <CTRL_refTarget+0x8a8>)
 8006334:	edc3 7a00 	vstr	s15, [r3]
 8006338:	e003      	b.n	8006342 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 800633a:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <CTRL_refTarget+0x8ac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <CTRL_refTarget+0x8a8>)
 8006340:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8006342:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <CTRL_refTarget+0x8b0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fa f926 	bl	8000598 <__aeabi_f2d>
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	4b26      	ldr	r3, [pc, #152]	; (80063ec <CTRL_refTarget+0x8b4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f7fa f91f 	bl	8000598 <__aeabi_f2d>
 800635a:	4680      	mov	r8, r0
 800635c:	4689      	mov	r9, r1
 800635e:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <CTRL_refTarget+0x8b8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fa f918 	bl	8000598 <__aeabi_f2d>
 8006368:	a315      	add	r3, pc, #84	; (adr r3, 80063c0 <CTRL_refTarget+0x888>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa f96b 	bl	8000648 <__aeabi_dmul>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f7f9 ffad 	bl	80002d8 <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa fbef 	bl	8000b68 <__aeabi_dcmpgt>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <CTRL_refTarget+0x87a>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <CTRL_refTarget+0x8b8>)
 8006392:	ed93 7a00 	vldr	s14, [r3]
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <CTRL_refTarget+0x89c>)
 8006398:	edd3 7a00 	vldr	s15, [r3]
 800639c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063a0:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <CTRL_refTarget+0x8bc>)
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <CTRL_refTarget+0x8b4>)
 80063ac:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80063b0:	e166      	b.n	8006680 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <CTRL_refTarget+0x8b0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <CTRL_refTarget+0x8b4>)
 80063b8:	6013      	str	r3, [r2, #0]
			break;
 80063ba:	e161      	b.n	8006680 <CTRL_refTarget+0xb48>
 80063bc:	f3af 8000 	nop.w
 80063c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063c4:	3f50624d 	.word	0x3f50624d
 80063c8:	20000270 	.word	0x20000270
 80063cc:	2000026c 	.word	0x2000026c
 80063d0:	20000264 	.word	0x20000264
 80063d4:	20000220 	.word	0x20000220
 80063d8:	20000268 	.word	0x20000268
 80063dc:	2000027c 	.word	0x2000027c
 80063e0:	20000288 	.word	0x20000288
 80063e4:	20000280 	.word	0x20000280
 80063e8:	2000024c 	.word	0x2000024c
 80063ec:	20000250 	.word	0x20000250
 80063f0:	20000234 	.word	0x20000234
 80063f4:	20000248 	.word	0x20000248
 80063f8:	20000228 	.word	0x20000228

		/* dec(sura) */
		case CTRL_DEC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 80063fc:	4ba4      	ldr	r3, [pc, #656]	; (8006690 <CTRL_refTarget+0xb58>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4aa4      	ldr	r2, [pc, #656]	; (8006694 <CTRL_refTarget+0xb5c>)
 8006402:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006404:	4ba4      	ldr	r3, [pc, #656]	; (8006698 <CTRL_refTarget+0xb60>)
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006412:	dd59      	ble.n	80064c8 <CTRL_refTarget+0x990>
				if( f_TrgtAngleS > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 8006414:	4ba1      	ldr	r3, [pc, #644]	; (800669c <CTRL_refTarget+0xb64>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fa f8bd 	bl	8000598 <__aeabi_f2d>
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	4b9d      	ldr	r3, [pc, #628]	; (8006698 <CTRL_refTarget+0xb60>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fa f8b6 	bl	8000598 <__aeabi_f2d>
 800642c:	4680      	mov	r8, r0
 800642e:	4689      	mov	r9, r1
 8006430:	4b9b      	ldr	r3, [pc, #620]	; (80066a0 <CTRL_refTarget+0xb68>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f7fa f8af 	bl	8000598 <__aeabi_f2d>
 800643a:	a393      	add	r3, pc, #588	; (adr r3, 8006688 <CTRL_refTarget+0xb50>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7fa f902 	bl	8000648 <__aeabi_dmul>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7f9 ff44 	bl	80002d8 <__aeabi_dsub>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4620      	mov	r0, r4
 8006456:	4629      	mov	r1, r5
 8006458:	f7fa fb86 	bl	8000b68 <__aeabi_dcmpgt>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <CTRL_refTarget+0x97e>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006462:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <CTRL_refTarget+0xb68>)
 8006464:	ed93 7a00 	vldr	s14, [r3]
 8006468:	4b8e      	ldr	r3, [pc, #568]	; (80066a4 <CTRL_refTarget+0xb6c>)
 800646a:	edd3 7a00 	vldr	s15, [r3]
 800646e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006472:	4b8d      	ldr	r3, [pc, #564]	; (80066a8 <CTRL_refTarget+0xb70>)
 8006474:	edd3 7a00 	vldr	s15, [r3]
 8006478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800647c:	4b87      	ldr	r3, [pc, #540]	; (800669c <CTRL_refTarget+0xb64>)
 800647e:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006482:	4b89      	ldr	r3, [pc, #548]	; (80066a8 <CTRL_refTarget+0xb70>)
 8006484:	ed93 7a00 	vldr	s14, [r3]
 8006488:	4b84      	ldr	r3, [pc, #528]	; (800669c <CTRL_refTarget+0xb64>)
 800648a:	edd3 7a00 	vldr	s15, [r3]
 800648e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006492:	4b84      	ldr	r3, [pc, #528]	; (80066a4 <CTRL_refTarget+0xb6c>)
 8006494:	edd3 7a00 	vldr	s15, [r3]
 8006498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80064a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064a4:	4b81      	ldr	r3, [pc, #516]	; (80066ac <CTRL_refTarget+0xb74>)
 80064a6:	edd3 7a00 	vldr	s15, [r3]
 80064aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ae:	4b80      	ldr	r3, [pc, #512]	; (80066b0 <CTRL_refTarget+0xb78>)
 80064b0:	edc3 7a00 	vstr	s15, [r3]
 80064b4:	e061      	b.n	800657a <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 80064b6:	4b79      	ldr	r3, [pc, #484]	; (800669c <CTRL_refTarget+0xb64>)
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80064be:	4b76      	ldr	r3, [pc, #472]	; (8006698 <CTRL_refTarget+0xb60>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a7b      	ldr	r2, [pc, #492]	; (80066b0 <CTRL_refTarget+0xb78>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e058      	b.n	800657a <CTRL_refTarget+0xa42>
				}
			}
			/*CW*/
			else{
				if( f_TrgtAngleS < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 80064c8:	4b74      	ldr	r3, [pc, #464]	; (800669c <CTRL_refTarget+0xb64>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fa f863 	bl	8000598 <__aeabi_f2d>
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	4b70      	ldr	r3, [pc, #448]	; (8006698 <CTRL_refTarget+0xb60>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa f85c 	bl	8000598 <__aeabi_f2d>
 80064e0:	4680      	mov	r8, r0
 80064e2:	4689      	mov	r9, r1
 80064e4:	4b6e      	ldr	r3, [pc, #440]	; (80066a0 <CTRL_refTarget+0xb68>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fa f855 	bl	8000598 <__aeabi_f2d>
 80064ee:	a366      	add	r3, pc, #408	; (adr r3, 8006688 <CTRL_refTarget+0xb50>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fa f8a8 	bl	8000648 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7f9 feec 	bl	80002dc <__adddf3>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4620      	mov	r0, r4
 800650a:	4629      	mov	r1, r5
 800650c:	f7fa fb0e 	bl	8000b2c <__aeabi_dcmplt>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d029      	beq.n	800656a <CTRL_refTarget+0xa32>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006516:	4b62      	ldr	r3, [pc, #392]	; (80066a0 <CTRL_refTarget+0xb68>)
 8006518:	ed93 7a00 	vldr	s14, [r3]
 800651c:	4b61      	ldr	r3, [pc, #388]	; (80066a4 <CTRL_refTarget+0xb6c>)
 800651e:	edd3 7a00 	vldr	s15, [r3]
 8006522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006526:	4b60      	ldr	r3, [pc, #384]	; (80066a8 <CTRL_refTarget+0xb70>)
 8006528:	edd3 7a00 	vldr	s15, [r3]
 800652c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006530:	4b5a      	ldr	r3, [pc, #360]	; (800669c <CTRL_refTarget+0xb64>)
 8006532:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006536:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <CTRL_refTarget+0xb70>)
 8006538:	ed93 7a00 	vldr	s14, [r3]
 800653c:	4b57      	ldr	r3, [pc, #348]	; (800669c <CTRL_refTarget+0xb64>)
 800653e:	edd3 7a00 	vldr	s15, [r3]
 8006542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006546:	4b57      	ldr	r3, [pc, #348]	; (80066a4 <CTRL_refTarget+0xb6c>)
 8006548:	edd3 7a00 	vldr	s15, [r3]
 800654c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006550:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006554:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006558:	4b54      	ldr	r3, [pc, #336]	; (80066ac <CTRL_refTarget+0xb74>)
 800655a:	edd3 7a00 	vldr	s15, [r3]
 800655e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006562:	4b53      	ldr	r3, [pc, #332]	; (80066b0 <CTRL_refTarget+0xb78>)
 8006564:	edc3 7a00 	vstr	s15, [r3]
 8006568:	e007      	b.n	800657a <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 800656a:	4b4c      	ldr	r3, [pc, #304]	; (800669c <CTRL_refTarget+0xb64>)
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8006572:	4b49      	ldr	r3, [pc, #292]	; (8006698 <CTRL_refTarget+0xb60>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a4e      	ldr	r2, [pc, #312]	; (80066b0 <CTRL_refTarget+0xb78>)
 8006578:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <CTRL_refTarget+0xb7c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fa f80a 	bl	8000598 <__aeabi_f2d>
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <CTRL_refTarget+0xb80>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fa f803 	bl	8000598 <__aeabi_f2d>
 8006592:	4680      	mov	r8, r0
 8006594:	4689      	mov	r9, r1
 8006596:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <CTRL_refTarget+0xb5c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7f9 fffc 	bl	8000598 <__aeabi_f2d>
 80065a0:	a339      	add	r3, pc, #228	; (adr r3, 8006688 <CTRL_refTarget+0xb50>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7fa f84f 	bl	8000648 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f7f9 fe91 	bl	80002d8 <__aeabi_dsub>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa fad3 	bl	8000b68 <__aeabi_dcmpgt>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <CTRL_refTarget+0xab2>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 80065c8:	4b32      	ldr	r3, [pc, #200]	; (8006694 <CTRL_refTarget+0xb5c>)
 80065ca:	ed93 7a00 	vldr	s14, [r3]
 80065ce:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <CTRL_refTarget+0xb6c>)
 80065d0:	edd3 7a00 	vldr	s15, [r3]
 80065d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065d8:	4b38      	ldr	r3, [pc, #224]	; (80066bc <CTRL_refTarget+0xb84>)
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e2:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <CTRL_refTarget+0xb80>)
 80065e4:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80065e8:	e04a      	b.n	8006680 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80065ea:	4b32      	ldr	r3, [pc, #200]	; (80066b4 <CTRL_refTarget+0xb7c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a32      	ldr	r2, [pc, #200]	; (80066b8 <CTRL_refTarget+0xb80>)
 80065f0:	6013      	str	r3, [r2, #0]
			break;
 80065f2:	e045      	b.n	8006680 <CTRL_refTarget+0xb48>

		/* escape(sura) */
		case CTRL_EXIT_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 80065f4:	4b26      	ldr	r3, [pc, #152]	; (8006690 <CTRL_refTarget+0xb58>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a26      	ldr	r2, [pc, #152]	; (8006694 <CTRL_refTarget+0xb5c>)
 80065fa:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = 0;
 80065fc:	4b27      	ldr	r3, [pc, #156]	; (800669c <CTRL_refTarget+0xb64>)
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
			if( f_TrgtDist <= (f_LastDist -f_TrgtSpeed * 0.001)){
 8006604:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <CTRL_refTarget+0xb80>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 ffc5 	bl	8000598 <__aeabi_f2d>
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <CTRL_refTarget+0xb7c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 ffbe 	bl	8000598 <__aeabi_f2d>
 800661c:	4680      	mov	r8, r0
 800661e:	4689      	mov	r9, r1
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <CTRL_refTarget+0xb5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7f9 ffb7 	bl	8000598 <__aeabi_f2d>
 800662a:	a317      	add	r3, pc, #92	; (adr r3, 8006688 <CTRL_refTarget+0xb50>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7fa f80a 	bl	8000648 <__aeabi_dmul>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7f9 fe4c 	bl	80002d8 <__aeabi_dsub>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7fa fa7a 	bl	8000b40 <__aeabi_dcmple>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <CTRL_refTarget+0xb3c>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <CTRL_refTarget+0xb5c>)
 8006654:	ed93 7a00 	vldr	s14, [r3]
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <CTRL_refTarget+0xb6c>)
 800665a:	edd3 7a00 	vldr	s15, [r3]
 800665e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006662:	4b16      	ldr	r3, [pc, #88]	; (80066bc <CTRL_refTarget+0xb84>)
 8006664:	edd3 7a00 	vldr	s15, [r3]
 8006668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <CTRL_refTarget+0xb80>)
 800666e:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;														// 目標距離
			}
			break;
 8006672:	e005      	b.n	8006680 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;														// 目標距離
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <CTRL_refTarget+0xb7c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a0f      	ldr	r2, [pc, #60]	; (80066b8 <CTRL_refTarget+0xb80>)
 800667a:	6013      	str	r3, [r2, #0]
			break;
 800667c:	e000      	b.n	8006680 <CTRL_refTarget+0xb48>

		/* etc */
		default:
			break;
 800667e:	bf00      	nop
	}
}
 8006680:	bf00      	nop
 8006682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006686:	bf00      	nop
 8006688:	d2f1a9fc 	.word	0xd2f1a9fc
 800668c:	3f50624d 	.word	0x3f50624d
 8006690:	20000228 	.word	0x20000228
 8006694:	20000234 	.word	0x20000234
 8006698:	20000280 	.word	0x20000280
 800669c:	20000270 	.word	0x20000270
 80066a0:	20000264 	.word	0x20000264
 80066a4:	20000220 	.word	0x20000220
 80066a8:	20000268 	.word	0x20000268
 80066ac:	2000027c 	.word	0x2000027c
 80066b0:	20000288 	.word	0x20000288
 80066b4:	2000024c 	.word	0x2000024c
 80066b8:	20000250 	.word	0x20000250
 80066bc:	20000248 	.word	0x20000248

080066c0 <CTRL_getFF_speed>:
		default:			return PARAM_NC;
	}
}

void CTRL_getFF_speed( float* p_err )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 80066c8:	4b26      	ldr	r3, [pc, #152]	; (8006764 <CTRL_getFF_speed+0xa4>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b0e      	cmp	r3, #14
 80066ce:	bf8c      	ite	hi
 80066d0:	2201      	movhi	r2, #1
 80066d2:	2200      	movls	r2, #0
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	d139      	bne.n	800674e <CTRL_getFF_speed+0x8e>
 80066da:	2201      	movs	r2, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	f245 5212 	movw	r2, #21778	; 0x5512
 80066e4:	401a      	ands	r2, r3
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2201      	movne	r2, #1
 80066ec:	2200      	moveq	r2, #0
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	d131      	bne.n	8006758 <CTRL_getFF_speed+0x98>
 80066f4:	f242 2264 	movw	r2, #8804	; 0x2264
 80066f8:	401a      	ands	r2, r3
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	bf14      	ite	ne
 80066fe:	2201      	movne	r2, #1
 8006700:	2200      	moveq	r2, #0
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	2a00      	cmp	r2, #0
 8006706:	d10e      	bne.n	8006726 <CTRL_getFF_speed+0x66>
 8006708:	f640 0289 	movw	r2, #2185	; 0x889
 800670c:	401a      	ands	r2, r3
 800670e:	2a00      	cmp	r2, #0
 8006710:	bf14      	ite	ne
 8006712:	2301      	movne	r3, #1
 8006714:	2300      	moveq	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d018      	beq.n	800674e <CTRL_getFF_speed+0x8e>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err = f_Acc;
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <CTRL_getFF_speed+0xa8>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
			break;
 8006724:	e019      	b.n	800675a <CTRL_getFF_speed+0x9a>
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
		case CTRL_HIT_WALL:
			*p_err = f_Acc * (-1.0);
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <CTRL_getFF_speed+0xa8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7f9 ff34 	bl	8000598 <__aeabi_f2d>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	f7fa fa7e 	bl	8000c38 <__aeabi_d2f>
 800673c:	4603      	mov	r3, r0
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef1 7a67 	vneg.f32	s15, s15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	edc3 7a00 	vstr	s15, [r3]
			break;
 800674c:	e005      	b.n	800675a <CTRL_getFF_speed+0x9a>

		// 加速以外 
		default:
			*p_err = 0;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006756:	e000      	b.n	800675a <CTRL_getFF_speed+0x9a>
			break;
 8006758:	bf00      	nop
	}

}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	2000083a 	.word	0x2000083a
 8006768:	20000224 	.word	0x20000224

0800676c <CTRL_getFF_angle>:

void CTRL_getFF_angle( float* p_err )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8006774:	4b36      	ldr	r3, [pc, #216]	; (8006850 <CTRL_getFF_angle+0xe4>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b0e      	cmp	r3, #14
 800677a:	bf8c      	ite	hi
 800677c:	2201      	movhi	r2, #1
 800677e:	2200      	movls	r2, #0
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	2a00      	cmp	r2, #0
 8006784:	d159      	bne.n	800683a <CTRL_getFF_angle+0xce>
 8006786:	2201      	movs	r2, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	f245 5212 	movw	r2, #21778	; 0x5512
 8006790:	401a      	ands	r2, r3
 8006792:	2a00      	cmp	r2, #0
 8006794:	bf14      	ite	ne
 8006796:	2201      	movne	r2, #1
 8006798:	2200      	moveq	r2, #0
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	2a00      	cmp	r2, #0
 800679e:	d151      	bne.n	8006844 <CTRL_getFF_angle+0xd8>
 80067a0:	f242 2224 	movw	r2, #8740	; 0x2224
 80067a4:	401a      	ands	r2, r3
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	bf14      	ite	ne
 80067aa:	2201      	movne	r2, #1
 80067ac:	2200      	moveq	r2, #0
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	d11e      	bne.n	80067f2 <CTRL_getFF_angle+0x86>
 80067b4:	f640 0289 	movw	r2, #2185	; 0x889
 80067b8:	401a      	ands	r2, r3
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d038      	beq.n	800683a <CTRL_getFF_angle+0xce>
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err =FABS(f_AccAngleS);
 80067c8:	4b22      	ldr	r3, [pc, #136]	; (8006854 <CTRL_getFF_angle+0xe8>)
 80067ca:	edd3 7a00 	vldr	s15, [r3]
 80067ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	db03      	blt.n	80067e0 <CTRL_getFF_angle+0x74>
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <CTRL_getFF_angle+0xe8>)
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	e004      	b.n	80067ea <CTRL_getFF_angle+0x7e>
 80067e0:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <CTRL_getFF_angle+0xe8>)
 80067e2:	edd3 7a00 	vldr	s15, [r3]
 80067e6:	eef1 7a67 	vneg.f32	s15, s15
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	edc3 7a00 	vstr	s15, [r3]
			break;
 80067f0:	e029      	b.n	8006846 <CTRL_getFF_angle+0xda>

		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
			*p_err = FABS(f_AccAngleS) *(-1.0);
 80067f2:	4b18      	ldr	r3, [pc, #96]	; (8006854 <CTRL_getFF_angle+0xe8>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006800:	db02      	blt.n	8006808 <CTRL_getFF_angle+0x9c>
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <CTRL_getFF_angle+0xe8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	e006      	b.n	8006816 <CTRL_getFF_angle+0xaa>
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <CTRL_getFF_angle+0xe8>)
 800680a:	edd3 7a00 	vldr	s15, [r3]
 800680e:	eef1 7a67 	vneg.f32	s15, s15
 8006812:	ee17 3a90 	vmov	r3, s15
 8006816:	4618      	mov	r0, r3
 8006818:	f7f9 febe 	bl	8000598 <__aeabi_f2d>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4610      	mov	r0, r2
 8006822:	4619      	mov	r1, r3
 8006824:	f7fa fa08 	bl	8000c38 <__aeabi_d2f>
 8006828:	4603      	mov	r3, r0
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef1 7a67 	vneg.f32	s15, s15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006838:	e005      	b.n	8006846 <CTRL_getFF_angle+0xda>

		// 加速以外 
		default:
			*p_err = 0;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006842:	e000      	b.n	8006846 <CTRL_getFF_angle+0xda>
			break;
 8006844:	bf00      	nop
	}

}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2000083a 	.word	0x2000083a
 8006854:	20000264 	.word	0x20000264

08006858 <CTRL_getSpeedFB>:

void CTRL_getSpeedFB( float* p_err )
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	float		f_speedErr;					// [速度制御] 速度偏差
	float		f_kp = 0.0f;
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
	float		f_ki = 0.0f;
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	613b      	str	r3, [r7, #16]
	float		f_kd = 0.0f;
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
	/* 速度制御 */
	f_speedErr  = f_TrgtSpeed - f_NowSpeed;					// 速度偏差[mm/s]
 8006872:	4b28      	ldr	r3, [pc, #160]	; (8006914 <CTRL_getSpeedFB+0xbc>)
 8006874:	ed93 7a00 	vldr	s14, [r3]
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <CTRL_getSpeedFB+0xc0>)
 800687a:	edd3 7a00 	vldr	s15, [r3]
 800687e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006882:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_speed_kp;
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <CTRL_getSpeedFB+0xc4>)
 8006888:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_speed_ki;
 800688a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800688e:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_speed_kd;
 8006890:	4b23      	ldr	r3, [pc, #140]	; (8006920 <CTRL_getSpeedFB+0xc8>)
 8006892:	60fb      	str	r3, [r7, #12]

	/* I成分演算 */
	f_SpeedErrSum += f_speedErr;// * f_ki;			// I成分更新
 8006894:	4b23      	ldr	r3, [pc, #140]	; (8006924 <CTRL_getSpeedFB+0xcc>)
 8006896:	ed93 7a00 	vldr	s14, [r3]
 800689a:	edd7 7a02 	vldr	s15, [r7, #8]
 800689e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a2:	4b20      	ldr	r3, [pc, #128]	; (8006924 <CTRL_getSpeedFB+0xcc>)
 80068a4:	edc3 7a00 	vstr	s15, [r3]
	if( f_SpeedErrSum > 10000.0 ){
 80068a8:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <CTRL_getSpeedFB+0xcc>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006928 <CTRL_getSpeedFB+0xd0>
 80068b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	dd02      	ble.n	80068c2 <CTRL_getSpeedFB+0x6a>
		f_SpeedErrSum = 10000.0;			// 上限リミッター
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <CTRL_getSpeedFB+0xcc>)
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <CTRL_getSpeedFB+0xd4>)
 80068c0:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_speedErr * f_kp + f_SpeedErrSum* f_ki + ( f_speedErr - f_ErrSpeedBuf ) * f_kd;				// PI制御量算出
 80068c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80068c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80068ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <CTRL_getSpeedFB+0xcc>)
 80068d0:	edd3 6a00 	vldr	s13, [r3]
 80068d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80068d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068e0:	4b13      	ldr	r3, [pc, #76]	; (8006930 <CTRL_getSpeedFB+0xd8>)
 80068e2:	edd3 7a00 	vldr	s15, [r3]
 80068e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80068ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80068f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	edc3 7a00 	vstr	s15, [r3]

	f_ErrSpeedBuf = f_speedErr;		// 偏差をバッファリング	
 8006900:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <CTRL_getSpeedFB+0xd8>)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6013      	str	r3, [r2, #0]
/*	if((f_speedErr>1.5)||(f_speedErr<-1.5)){
		Failsafe_flag();
	}
*/
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000234 	.word	0x20000234
 8006918:	20000230 	.word	0x20000230
 800691c:	420c0000 	.word	0x420c0000
 8006920:	3dcccccd 	.word	0x3dcccccd
 8006924:	2000023c 	.word	0x2000023c
 8006928:	461c4000 	.word	0x461c4000
 800692c:	461c4000 	.word	0x461c4000
 8006930:	20000238 	.word	0x20000238

08006934 <CTRL_getAngleSpeedFB>:

void CTRL_getAngleSpeedFB( float* p_err )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	ed2d 8b02 	vpush	{d8}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	float f_err;					// [入力] ジャイロセンサーエラー値､
	float f_kp = 0.0f;				// 比例ゲイン
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
	float f_ki = 0.0f;
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
	float f_kd = 0.0f;
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]


	f_err = f_TrgtAngleS - GYRO_getSpeedErr();			// 目標角度 - ジャイロセンサ[deg/s]
 8006952:	4b3c      	ldr	r3, [pc, #240]	; (8006a44 <CTRL_getAngleSpeedFB+0x110>)
 8006954:	ed93 8a00 	vldr	s16, [r3]
 8006958:	f001 ffba 	bl	80088d0 <GYRO_getSpeedErr>
 800695c:	eef0 7a40 	vmov.f32	s15, s0
 8006960:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006964:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_angleS_kp;
 8006968:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <CTRL_getAngleSpeedFB+0x114>)
 800696a:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_angleS_ki;
 800696c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006970:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_angleS_kd;
 8006972:	4b36      	ldr	r3, [pc, #216]	; (8006a4c <CTRL_getAngleSpeedFB+0x118>)
 8006974:	60fb      	str	r3, [r7, #12]

	f_AngleSErrSum += f_err;//*f_ki;
 8006976:	4b36      	ldr	r3, [pc, #216]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 8006978:	ed93 7a00 	vldr	s14, [r3]
 800697c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006984:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 8006986:	edc3 7a00 	vstr	s15, [r3]

	if(f_AngleSErrSum > 200.0){
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006a54 <CTRL_getAngleSpeedFB+0x120>
 8006994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699c:	dd03      	ble.n	80069a6 <CTRL_getAngleSpeedFB+0x72>
		f_AngleSErrSum = 200.0;			//上限リミッター
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 80069a0:	4a2d      	ldr	r2, [pc, #180]	; (8006a58 <CTRL_getAngleSpeedFB+0x124>)
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e00c      	b.n	80069c0 <CTRL_getAngleSpeedFB+0x8c>
	}
	else if(f_AngleSErrSum <-200.0){
 80069a6:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 80069a8:	edd3 7a00 	vldr	s15, [r3]
 80069ac:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006a5c <CTRL_getAngleSpeedFB+0x128>
 80069b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	d502      	bpl.n	80069c0 <CTRL_getAngleSpeedFB+0x8c>
		f_AngleSErrSum = -200.0;
 80069ba:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <CTRL_getAngleSpeedFB+0x12c>)
 80069be:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_err * f_kp + f_AngleSErrSum*f_ki + ( f_err - f_ErrAngleSBuf ) * f_kd;		// PID制御
 80069c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80069c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80069c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069cc:	4b20      	ldr	r3, [pc, #128]	; (8006a50 <CTRL_getAngleSpeedFB+0x11c>)
 80069ce:	edd3 6a00 	vldr	s13, [r3]
 80069d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80069d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069de:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <CTRL_getAngleSpeedFB+0x130>)
 80069e0:	edd3 7a00 	vldr	s15, [r3]
 80069e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80069e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80069ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80069f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	edc3 7a00 	vstr	s15, [r3]

	f_ErrAngleSBuf = f_err;		// 偏差をバッファリング	
 80069fe:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <CTRL_getAngleSpeedFB+0x130>)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6013      	str	r3, [r2, #0]
	if((f_err>30.0)||(f_err<-30.0)){
 8006a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a08:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	dc09      	bgt.n	8006a2a <CTRL_getAngleSpeedFB+0xf6>
 8006a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a1a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8006a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a26:	d400      	bmi.n	8006a2a <CTRL_getAngleSpeedFB+0xf6>
		if(!(en_Type == CTRL_HIT_WALL)){
			Failsafe_flag();
		}
	}
}
 8006a28:	e005      	b.n	8006a36 <CTRL_getAngleSpeedFB+0x102>
		if(!(en_Type == CTRL_HIT_WALL)){
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <CTRL_getAngleSpeedFB+0x134>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d001      	beq.n	8006a36 <CTRL_getAngleSpeedFB+0x102>
			Failsafe_flag();
 8006a32:	f001 fc8f 	bl	8008354 <Failsafe_flag>
}
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	ecbd 8b02 	vpop	{d8}
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000270 	.word	0x20000270
 8006a48:	425c0000 	.word	0x425c0000
 8006a4c:	41200000 	.word	0x41200000
 8006a50:	20000278 	.word	0x20000278
 8006a54:	43480000 	.word	0x43480000
 8006a58:	43480000 	.word	0x43480000
 8006a5c:	c3480000 	.word	0xc3480000
 8006a60:	c3480000 	.word	0xc3480000
 8006a64:	20000274 	.word	0x20000274
 8006a68:	2000083a 	.word	0x2000083a

08006a6c <CTRL_getAngleFB>:

void CTRL_getAngleFB( float* p_err )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	ed2d 8b02 	vpush	{d8}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    float f_err;                    // [入力] 角度偏差[deg]
    float f_kp = 0.0f;              // 比例ゲイン
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
    float f_ki = 0.0f;
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]

    f_err = f_TrgtAngle - GYRO_getNowAngle();          // 現在角度[deg]
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <CTRL_getAngleFB+0xb0>)
 8006a86:	ed93 8a00 	vldr	s16, [r3]
 8006a8a:	f001 ff6f 	bl	800896c <GYRO_getNowAngle>
 8006a8e:	eef0 7a40 	vmov.f32	s15, s0
 8006a92:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006a96:	edc7 7a03 	vstr	s15, [r7, #12]
    f_kp = f_FB_angle_kp;
 8006a9a:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <CTRL_getAngleFB+0xb4>)
 8006a9c:	617b      	str	r3, [r7, #20]
    f_ki = f_FB_angle_ki;
 8006a9e:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <CTRL_getAngleFB+0xb8>)
 8006aa0:	613b      	str	r3, [r7, #16]
    f_AngleErrSum += f_err;//*f_ki;
 8006aa2:	4b21      	ldr	r3, [pc, #132]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006aa4:	ed93 7a00 	vldr	s14, [r3]
 8006aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ab0:	4b1d      	ldr	r3, [pc, #116]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006ab2:	edc3 7a00 	vstr	s15, [r3]
    if(f_AngleErrSum > 100.0){
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006ab8:	edd3 7a00 	vldr	s15, [r3]
 8006abc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006b2c <CTRL_getAngleFB+0xc0>
 8006ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac8:	dd03      	ble.n	8006ad2 <CTRL_getAngleFB+0x66>
        f_AngleErrSum = 100.0;           //上限リミッター
 8006aca:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006acc:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <CTRL_getAngleFB+0xc4>)
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e00c      	b.n	8006aec <CTRL_getAngleFB+0x80>
    }
    else if(f_AngleErrSum <-100.0){
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006ad4:	edd3 7a00 	vldr	s15, [r3]
 8006ad8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006b34 <CTRL_getAngleFB+0xc8>
 8006adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	d502      	bpl.n	8006aec <CTRL_getAngleFB+0x80>
        f_AngleErrSum = -100.0;
 8006ae6:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006ae8:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <CTRL_getAngleFB+0xcc>)
 8006aea:	601a      	str	r2, [r3, #0]
    }
    *p_err = f_err * f_kp + f_AngleErrSum*f_ki;        // PID制御｡
 8006aec:	ed97 7a03 	vldr	s14, [r7, #12]
 8006af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <CTRL_getAngleFB+0xbc>)
 8006afa:	edd3 6a00 	vldr	s13, [r3]
 8006afe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	edc3 7a00 	vstr	s15, [r3]

}
 8006b10:	bf00      	nop
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	ecbd 8b02 	vpop	{d8}
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000288 	.word	0x20000288
 8006b20:	3dcccccd 	.word	0x3dcccccd
 8006b24:	3d4ccccd 	.word	0x3d4ccccd
 8006b28:	2000028c 	.word	0x2000028c
 8006b2c:	42c80000 	.word	0x42c80000
 8006b30:	42c80000 	.word	0x42c80000
 8006b34:	c2c80000 	.word	0xc2c80000
 8006b38:	c2c80000 	.word	0xc2c80000

08006b3c <CTRL_getSenFB>:


void CTRL_getSenFB( float* p_err )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	float f_err 	= 0;
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]
	float f_kp 		= 0.0f;				// 比例ゲイン
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
	float f_kd 		= 0.0f;				// 微分ゲイン
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	60bb      	str	r3, [r7, #8]

	/* 直進時 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00f      	beq.n	8006b84 <CTRL_getSenFB+0x48>
 8006b64:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d00b      	beq.n	8006b84 <CTRL_getSenFB+0x48>
 8006b6c:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d007      	beq.n	8006b84 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006b74:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006b78:	2b0a      	cmp	r3, #10
 8006b7a:	d003      	beq.n	8006b84 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b0e      	cmp	r3, #14
 8006b82:	d128      	bne.n	8006bd6 <CTRL_getSenFB+0x9a>

		f_kp = f_FB_wall_kp;
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <CTRL_getSenFB+0xdc>)
 8006b86:	613b      	str	r3, [r7, #16]
		f_kd = f_FB_wall_kd;
 8006b88:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <CTRL_getSenFB+0xe0>)
 8006b8a:	60fb      	str	r3, [r7, #12]

		/* 偏差取得 */
		DIST_getErr( &l_WallErr );
 8006b8c:	4824      	ldr	r0, [pc, #144]	; (8006c20 <CTRL_getSenFB+0xe4>)
 8006b8e:	f006 fe83 	bl	800d898 <DIST_getErr>
		f_err = (float)l_WallErr;
 8006b92:	4b23      	ldr	r3, [pc, #140]	; (8006c20 <CTRL_getSenFB+0xe4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b9e:	edc7 7a05 	vstr	s15, [r7, #20]
//		templog2 = f_err;
		/* PD制御 */

		f_ErrDistBuf = f_err;		// 偏差をバッファリング
 8006ba2:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <CTRL_getSenFB+0xe8>)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6013      	str	r3, [r2, #0]

		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
 8006ba8:	ed97 7a05 	vldr	s14, [r7, #20]
 8006bac:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <CTRL_getSenFB+0xe8>)
 8006bb6:	edd3 7a00 	vldr	s15, [r3]
 8006bba:	edd7 6a05 	vldr	s13, [r7, #20]
 8006bbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006bc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	edc3 7a00 	vstr	s15, [r3]

//		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
		*p_err = f_err;
	}

}
 8006bd4:	e019      	b.n	8006c0a <CTRL_getSenFB+0xce>
	else if( ( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC ) ){
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d007      	beq.n	8006bee <CTRL_getSenFB+0xb2>
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d003      	beq.n	8006bee <CTRL_getSenFB+0xb2>
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <CTRL_getSenFB+0xd8>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d10d      	bne.n	8006c0a <CTRL_getSenFB+0xce>
		DIST_getErrSkew( &l_WallErr );
 8006bee:	480c      	ldr	r0, [pc, #48]	; (8006c20 <CTRL_getSenFB+0xe4>)
 8006bf0:	f006 ffe8 	bl	800dbc4 <DIST_getErrSkew>
		f_err = (float)l_WallErr;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <CTRL_getSenFB+0xe4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c00:	edc7 7a05 	vstr	s15, [r7, #20]
		*p_err = f_err;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	601a      	str	r2, [r3, #0]
}
 8006c0a:	bf00      	nop
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	2000083a 	.word	0x2000083a
 8006c18:	3f266666 	.word	0x3f266666
 8006c1c:	3e4ccccd 	.word	0x3e4ccccd
 8006c20:	20000290 	.word	0x20000290
 8006c24:	20000294 	.word	0x20000294

08006c28 <CTRL_get_frontwall_v_FB>:

void CTRL_get_frontwall_v_FB( float* p_err)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b089      	sub	sp, #36	; 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	float f_v_err 	= 0;
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
	float f_omega_err 	= 0;
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
	float f_v_kp 		= 0.0f;				// 比例ゲイン
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
	float f_v_ki 		= 0.0f;				// 比例ゲイン
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]
	float f_v_kd 		= 0.0f;				// 微分ゲイン
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	60bb      	str	r3, [r7, #8]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <CTRL_get_frontwall_v_FB+0xf4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d15a      	bne.n	8006d12 <CTRL_get_frontwall_v_FB+0xea>

		f_v_kp = f_FB_front_wall_v_kp;
 8006c5c:	4b30      	ldr	r3, [pc, #192]	; (8006d20 <CTRL_get_frontwall_v_FB+0xf8>)
 8006c5e:	617b      	str	r3, [r7, #20]
		f_v_ki = f_FB_front_wall_v_ki;
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
		f_v_kd = f_FB_front_wall_v_kd;
 8006c66:	4b2f      	ldr	r3, [pc, #188]	; (8006d24 <CTRL_get_frontwall_v_FB+0xfc>)
 8006c68:	60fb      	str	r3, [r7, #12]

		if( en_Type == CTRL_FRONT_WALL){
 8006c6a:	4b2c      	ldr	r3, [pc, #176]	; (8006d1c <CTRL_get_frontwall_v_FB+0xf4>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d14f      	bne.n	8006d12 <CTRL_get_frontwall_v_FB+0xea>
			l_frontSen_vErr = ((L_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_L_FRONT )) + ((R_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 8006c72:	2001      	movs	r0, #1
 8006c74:	f006 fdf8 	bl	800d868 <DIST_getNowVal>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f5c3 7408 	rsb	r4, r3, #544	; 0x220
 8006c7e:	3401      	adds	r4, #1
 8006c80:	2000      	movs	r0, #0
 8006c82:	f006 fdf1 	bl	800d868 <DIST_getNowVal>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	4423      	add	r3, r4
 8006c90:	4a25      	ldr	r2, [pc, #148]	; (8006d28 <CTRL_get_frontwall_v_FB+0x100>)
 8006c92:	6013      	str	r3, [r2, #0]
			f_v_err = (float)l_frontSen_vErr;
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <CTRL_get_frontwall_v_FB+0x100>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ca0:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_vBuf = f_v_err;		// 偏差をバッファリング
 8006ca4:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <CTRL_get_frontwall_v_FB+0x104>)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	6013      	str	r3, [r2, #0]

			*p_err = f_v_err * f_v_kp + ( f_v_err - f_ErrFrontSen_vBuf ) * f_v_kd;		// PD制御
 8006caa:	ed97 7a07 	vldr	s14, [r7, #28]
 8006cae:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cb6:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <CTRL_get_frontwall_v_FB+0x104>)
 8006cb8:	edd3 7a00 	vldr	s15, [r3]
 8006cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	edc3 7a00 	vstr	s15, [r3]
			if(*p_err < - 0.5)*p_err = -0.5;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	edd3 7a00 	vldr	s15, [r3]
 8006cdc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8006ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce8:	d504      	bpl.n	8006cf4 <CTRL_get_frontwall_v_FB+0xcc>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8006cf0:	601a      	str	r2, [r3, #0]
			else if(*p_err > 0.5)*p_err = 0.5;
		}
	}

}
 8006cf2:	e00e      	b.n	8006d12 <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	edd3 7a00 	vldr	s15, [r3]
 8006cfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d06:	dc00      	bgt.n	8006d0a <CTRL_get_frontwall_v_FB+0xe2>
}
 8006d08:	e003      	b.n	8006d12 <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	3724      	adds	r7, #36	; 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd90      	pop	{r4, r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000083a 	.word	0x2000083a
 8006d20:	3a83126f 	.word	0x3a83126f
 8006d24:	38d1b717 	.word	0x38d1b717
 8006d28:	20000298 	.word	0x20000298
 8006d2c:	200002a0 	.word	0x200002a0

08006d30 <CTRL_get_frontwall_omega_FB>:

void CTRL_get_frontwall_omega_FB( float* p_err)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b089      	sub	sp, #36	; 0x24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	float f_omega_err 	= 0;
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
	
	float f_omega_kp 		= 0.0f;				// 比例ゲイン
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
	float f_omega_ki 		= 0.0f;				// 比例ゲイン
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
	float f_omega_kd 		= 0.0f;				// 微分ゲイン
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
	float gyro		= 0.0f;
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 8006d56:	4b2a      	ldr	r3, [pc, #168]	; (8006e00 <CTRL_get_frontwall_omega_FB+0xd0>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d14c      	bne.n	8006df8 <CTRL_get_frontwall_omega_FB+0xc8>
		f_omega_kp = f_FB_front_wall_omega_kp;
 8006d5e:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <CTRL_get_frontwall_omega_FB+0xd4>)
 8006d60:	61bb      	str	r3, [r7, #24]
		f_omega_ki = f_FB_front_wall_omega_ki;
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
		f_omega_kd = f_FB_front_wall_omega_kd;
 8006d68:	4b27      	ldr	r3, [pc, #156]	; (8006e08 <CTRL_get_frontwall_omega_FB+0xd8>)
 8006d6a:	613b      	str	r3, [r7, #16]

		if( en_Type == CTRL_FRONT_WALL){	
 8006d6c:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <CTRL_get_frontwall_omega_FB+0xd0>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b0f      	cmp	r3, #15
 8006d72:	d141      	bne.n	8006df8 <CTRL_get_frontwall_omega_FB+0xc8>
			l_frontSen_omegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_minus)) + 
 8006d74:	2001      	movs	r0, #1
 8006d76:	f006 fd77 	bl	800d868 <DIST_getNowVal>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f2a3 2421 	subw	r4, r3, #545	; 0x221
									((R_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 8006d80:	2000      	movs	r0, #0
 8006d82:	f006 fd71 	bl	800d868 <DIST_getNowVal>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 8006d8c:	3303      	adds	r3, #3
			l_frontSen_omegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_minus)) + 
 8006d8e:	4423      	add	r3, r4
 8006d90:	4a1e      	ldr	r2, [pc, #120]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d92:	6013      	str	r3, [r2, #0]
			if(l_frontSen_omegaErr > 500)l_frontSen_omegaErr = 500;
 8006d94:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d9c:	dd03      	ble.n	8006da6 <CTRL_get_frontwall_omega_FB+0x76>
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006da0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006da4:	601a      	str	r2, [r3, #0]
			if(l_frontSen_omegaErr < -500)l_frontSen_omegaErr = -500;
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006dae:	da02      	bge.n	8006db6 <CTRL_get_frontwall_omega_FB+0x86>
 8006db0:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006db2:	4a17      	ldr	r2, [pc, #92]	; (8006e10 <CTRL_get_frontwall_omega_FB+0xe0>)
 8006db4:	601a      	str	r2, [r3, #0]
			f_omega_err = (float)l_frontSen_omegaErr;
 8006db6:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <CTRL_get_frontwall_omega_FB+0xdc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_omegaBuf = f_omega_err;		// 偏差をバッファリング
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <CTRL_get_frontwall_omega_FB+0xe4>)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	6013      	str	r3, [r2, #0]

			*p_err =f_omega_err * f_omega_kp + ( f_omega_err - f_ErrFrontSen_omegaBuf ) * f_omega_kd;		// PD制御
 8006dcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8006dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <CTRL_get_frontwall_omega_FB+0xe4>)
 8006dda:	edd3 7a00 	vldr	s15, [r3]
 8006dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006de6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	edc3 7a00 	vstr	s15, [r3]
		}
	}

}
 8006df8:	bf00      	nop
 8006dfa:	3724      	adds	r7, #36	; 0x24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd90      	pop	{r4, r7, pc}
 8006e00:	2000083a 	.word	0x2000083a
 8006e04:	3f666666 	.word	0x3f666666
 8006e08:	3e99999a 	.word	0x3e99999a
 8006e0c:	2000029c 	.word	0x2000029c
 8006e10:	fffffe0c 	.word	0xfffffe0c
 8006e14:	200002a4 	.word	0x200002a4

08006e18 <CTRL_getFloorFriction>:

void CTRL_getFloorFriction(float* p_err){
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	float tread;
	if(( en_Type == CTRL_ACC_TRUN) || (en_Type == CTRL_CONST_TRUN)||( en_Type == CTRL_DEC_TRUN )){
 8006e20:	4bc3      	ldr	r3, [pc, #780]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b07      	cmp	r3, #7
 8006e26:	d007      	beq.n	8006e38 <CTRL_getFloorFriction+0x20>
 8006e28:	4bc1      	ldr	r3, [pc, #772]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d003      	beq.n	8006e38 <CTRL_getFloorFriction+0x20>
 8006e30:	4bbf      	ldr	r3, [pc, #764]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d102      	bne.n	8006e3e <CTRL_getFloorFriction+0x26>
		tread = TREAD_imagin;
 8006e38:	4bbe      	ldr	r3, [pc, #760]	; (8007134 <CTRL_getFloorFriction+0x31c>)
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	e001      	b.n	8006e42 <CTRL_getFloorFriction+0x2a>
	}else{
		tread = TREAD;
 8006e3e:	4bbe      	ldr	r3, [pc, #760]	; (8007138 <CTRL_getFloorFriction+0x320>)
 8006e40:	60fb      	str	r3, [r7, #12]
	}
//	*p_err = 0;
	if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8006e42:	4bbb      	ldr	r3, [pc, #748]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b0b      	cmp	r3, #11
 8006e48:	d008      	beq.n	8006e5c <CTRL_getFloorFriction+0x44>
 8006e4a:	4bb9      	ldr	r3, [pc, #740]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b0c      	cmp	r3, #12
 8006e50:	d004      	beq.n	8006e5c <CTRL_getFloorFriction+0x44>
 8006e52:	4bb7      	ldr	r3, [pc, #732]	; (8007130 <CTRL_getFloorFriction+0x318>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b0d      	cmp	r3, #13
 8006e58:	f040 8086 	bne.w	8006f68 <CTRL_getFloorFriction+0x150>
		if(f_TrgtAngleS<0){
 8006e5c:	4bb7      	ldr	r3, [pc, #732]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006e5e:	edd3 7a00 	vldr	s15, [r3]
 8006e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d53a      	bpl.n	8006ee2 <CTRL_getFloorFriction+0xca>
//			if(Get_NowAngle() > -0.002)
//				*p_err = (-1.0)*0.38/1000.0 + (-1.0)*0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2.0/PI/950.0;
	//			*p_err = (-1)*0.35/1000.0 + (-1)*0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
	//		else
				*p_err = (-1.0)*(0.5/1000.0+FABS(f_TrgtSpeed)/300.0*0.05);
 8006e6c:	4bb4      	ldr	r3, [pc, #720]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006e6e:	edd3 7a00 	vldr	s15, [r3]
 8006e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7a:	db02      	blt.n	8006e82 <CTRL_getFloorFriction+0x6a>
 8006e7c:	4bb0      	ldr	r3, [pc, #704]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	e006      	b.n	8006e90 <CTRL_getFloorFriction+0x78>
 8006e82:	4baf      	ldr	r3, [pc, #700]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006e84:	edd3 7a00 	vldr	s15, [r3]
 8006e88:	eef1 7a67 	vneg.f32	s15, s15
 8006e8c:	ee17 3a90 	vmov	r3, s15
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7f9 fb81 	bl	8000598 <__aeabi_f2d>
 8006e96:	a398      	add	r3, pc, #608	; (adr r3, 80070f8 <CTRL_getFloorFriction+0x2e0>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fcfe 	bl	800089c <__aeabi_ddiv>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	a395      	add	r3, pc, #596	; (adr r3, 8007100 <CTRL_getFloorFriction+0x2e8>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fbcb 	bl	8000648 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	a393      	add	r3, pc, #588	; (adr r3, 8007108 <CTRL_getFloorFriction+0x2f0>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 fa0c 	bl	80002dc <__adddf3>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f7f9 feb4 	bl	8000c38 <__aeabi_d2f>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef1 7a67 	vneg.f32	s15, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	edc3 7a00 	vstr	s15, [r3]
		if(f_TrgtAngleS<0){
 8006ee0:	e13d      	b.n	800715e <CTRL_getFloorFriction+0x346>
			}
		else if(f_TrgtAngleS>0){
 8006ee2:	4b96      	ldr	r3, [pc, #600]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006ee4:	edd3 7a00 	vldr	s15, [r3]
 8006ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef0:	dd35      	ble.n	8006f5e <CTRL_getFloorFriction+0x146>
	//		if(Get_NowAngle() < 0.002)
	//			*p_err = 0.38/1000.0 + 0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2.0/PI/950.0;
	//			*p_err = 0.35/1000.0 + 0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
	//		else
				*p_err = 0.5/1000.0+FABS(f_TrgtSpeed)/300.0*0.05;
 8006ef2:	4b93      	ldr	r3, [pc, #588]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006ef4:	edd3 7a00 	vldr	s15, [r3]
 8006ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f00:	db02      	blt.n	8006f08 <CTRL_getFloorFriction+0xf0>
 8006f02:	4b8f      	ldr	r3, [pc, #572]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	e006      	b.n	8006f16 <CTRL_getFloorFriction+0xfe>
 8006f08:	4b8d      	ldr	r3, [pc, #564]	; (8007140 <CTRL_getFloorFriction+0x328>)
 8006f0a:	edd3 7a00 	vldr	s15, [r3]
 8006f0e:	eef1 7a67 	vneg.f32	s15, s15
 8006f12:	ee17 3a90 	vmov	r3, s15
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7f9 fb3e 	bl	8000598 <__aeabi_f2d>
 8006f1c:	a376      	add	r3, pc, #472	; (adr r3, 80070f8 <CTRL_getFloorFriction+0x2e0>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 fcbb 	bl	800089c <__aeabi_ddiv>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	a374      	add	r3, pc, #464	; (adr r3, 8007100 <CTRL_getFloorFriction+0x2e8>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 fb88 	bl	8000648 <__aeabi_dmul>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	a371      	add	r3, pc, #452	; (adr r3, 8007108 <CTRL_getFloorFriction+0x2f0>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f9c9 	bl	80002dc <__adddf3>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	f7f9 fe71 	bl	8000c38 <__aeabi_d2f>
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006f5c:	e0ff      	b.n	800715e <CTRL_getFloorFriction+0x346>
		}else{
			*p_err = 0;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006f66:	e0fa      	b.n	800715e <CTRL_getFloorFriction+0x346>
		}
	}
	else{
		if(f_TrgtAngleS<0){
 8006f68:	4b74      	ldr	r3, [pc, #464]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006f6a:	edd3 7a00 	vldr	s15, [r3]
 8006f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f76:	d55b      	bpl.n	8007030 <CTRL_getFloorFriction+0x218>
			if(Get_NowAngle() > -0.002)
 8006f78:	f7fe fb88 	bl	800568c <Get_NowAngle>
 8006f7c:	ee10 3a10 	vmov	r3, s0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7f9 fb09 	bl	8000598 <__aeabi_f2d>
 8006f86:	a362      	add	r3, pc, #392	; (adr r3, 8007110 <CTRL_getFloorFriction+0x2f8>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 fdec 	bl	8000b68 <__aeabi_dcmpgt>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d048      	beq.n	8007028 <CTRL_getFloorFriction+0x210>
				*p_err = (-1.0)*0.43/1000.0 + (-1.0)*0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2.0/PI/740.0;
 8006f96:	4b69      	ldr	r3, [pc, #420]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006f98:	edd3 7a00 	vldr	s15, [r3]
 8006f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	db03      	blt.n	8006fae <CTRL_getFloorFriction+0x196>
 8006fa6:	4b65      	ldr	r3, [pc, #404]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006fa8:	edd3 7a00 	vldr	s15, [r3]
 8006fac:	e004      	b.n	8006fb8 <CTRL_getFloorFriction+0x1a0>
 8006fae:	4b63      	ldr	r3, [pc, #396]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006fb0:	edd3 7a00 	vldr	s15, [r3]
 8006fb4:	eef1 7a67 	vneg.f32	s15, s15
 8006fb8:	4b60      	ldr	r3, [pc, #384]	; (800713c <CTRL_getFloorFriction+0x324>)
 8006fba:	ed93 7a00 	vldr	s14, [r3]
 8006fbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006fc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	ee17 0a90 	vmov	r0, s15
 8006fce:	f7f9 fae3 	bl	8000598 <__aeabi_f2d>
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fda:	f7f9 fc5f 	bl	800089c <__aeabi_ddiv>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	a34c      	add	r3, pc, #304	; (adr r3, 8007118 <CTRL_getFloorFriction+0x300>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fc56 	bl	800089c <__aeabi_ddiv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	4b51      	ldr	r3, [pc, #324]	; (8007144 <CTRL_getFloorFriction+0x32c>)
 8006ffe:	f7f9 fc4d 	bl	800089c <__aeabi_ddiv>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4610      	mov	r0, r2
 8007008:	4619      	mov	r1, r3
 800700a:	a345      	add	r3, pc, #276	; (adr r3, 8007120 <CTRL_getFloorFriction+0x308>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f7f9 f962 	bl	80002d8 <__aeabi_dsub>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4610      	mov	r0, r2
 800701a:	4619      	mov	r1, r3
 800701c:	f7f9 fe0c 	bl	8000c38 <__aeabi_d2f>
 8007020:	4602      	mov	r2, r0
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
/*	if(*p_err>0.0014)
		*p_err = 0.0014;
	if(*p_err<-0.0014)
		*p_err = -0.0014;
*/
}
 8007026:	e09a      	b.n	800715e <CTRL_getFloorFriction+0x346>
				*p_err = (-1.0)*0.37/1000.0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a47      	ldr	r2, [pc, #284]	; (8007148 <CTRL_getFloorFriction+0x330>)
 800702c:	601a      	str	r2, [r3, #0]
}
 800702e:	e096      	b.n	800715e <CTRL_getFloorFriction+0x346>
		else if(f_TrgtAngleS>0){
 8007030:	4b42      	ldr	r3, [pc, #264]	; (800713c <CTRL_getFloorFriction+0x324>)
 8007032:	edd3 7a00 	vldr	s15, [r3]
 8007036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800703a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703e:	f340 8089 	ble.w	8007154 <CTRL_getFloorFriction+0x33c>
			if(Get_NowAngle() < 0.002)
 8007042:	f7fe fb23 	bl	800568c <Get_NowAngle>
 8007046:	ee10 3a10 	vmov	r3, s0
 800704a:	4618      	mov	r0, r3
 800704c:	f7f9 faa4 	bl	8000598 <__aeabi_f2d>
 8007050:	a335      	add	r3, pc, #212	; (adr r3, 8007128 <CTRL_getFloorFriction+0x310>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 fd69 	bl	8000b2c <__aeabi_dcmplt>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d075      	beq.n	800714c <CTRL_getFloorFriction+0x334>
				*p_err = 0.43/1000.0 + 0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2.0/PI/740.0;
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <CTRL_getFloorFriction+0x324>)
 8007062:	edd3 7a00 	vldr	s15, [r3]
 8007066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800706a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706e:	db03      	blt.n	8007078 <CTRL_getFloorFriction+0x260>
 8007070:	4b32      	ldr	r3, [pc, #200]	; (800713c <CTRL_getFloorFriction+0x324>)
 8007072:	edd3 7a00 	vldr	s15, [r3]
 8007076:	e004      	b.n	8007082 <CTRL_getFloorFriction+0x26a>
 8007078:	4b30      	ldr	r3, [pc, #192]	; (800713c <CTRL_getFloorFriction+0x324>)
 800707a:	edd3 7a00 	vldr	s15, [r3]
 800707e:	eef1 7a67 	vneg.f32	s15, s15
 8007082:	4b2e      	ldr	r3, [pc, #184]	; (800713c <CTRL_getFloorFriction+0x324>)
 8007084:	ed93 7a00 	vldr	s14, [r3]
 8007088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800708c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007094:	ee17 0a90 	vmov	r0, s15
 8007098:	f7f9 fa7e 	bl	8000598 <__aeabi_f2d>
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070a4:	f7f9 fbfa 	bl	800089c <__aeabi_ddiv>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4610      	mov	r0, r2
 80070ae:	4619      	mov	r1, r3
 80070b0:	a319      	add	r3, pc, #100	; (adr r3, 8007118 <CTRL_getFloorFriction+0x300>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 fbf1 	bl	800089c <__aeabi_ddiv>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <CTRL_getFloorFriction+0x32c>)
 80070c8:	f7f9 fbe8 	bl	800089c <__aeabi_ddiv>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	a312      	add	r3, pc, #72	; (adr r3, 8007120 <CTRL_getFloorFriction+0x308>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f8ff 	bl	80002dc <__adddf3>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	f7f9 fda7 	bl	8000c38 <__aeabi_d2f>
 80070ea:	4602      	mov	r2, r0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
}
 80070f0:	e035      	b.n	800715e <CTRL_getFloorFriction+0x346>
 80070f2:	bf00      	nop
 80070f4:	f3af 8000 	nop.w
 80070f8:	00000000 	.word	0x00000000
 80070fc:	4072c000 	.word	0x4072c000
 8007100:	9999999a 	.word	0x9999999a
 8007104:	3fa99999 	.word	0x3fa99999
 8007108:	d2f1a9fc 	.word	0xd2f1a9fc
 800710c:	3f40624d 	.word	0x3f40624d
 8007110:	d2f1a9fc 	.word	0xd2f1a9fc
 8007114:	bf60624d 	.word	0xbf60624d
 8007118:	00000000 	.word	0x00000000
 800711c:	400921fa 	.word	0x400921fa
 8007120:	725c3dee 	.word	0x725c3dee
 8007124:	3f4d29dc 	.word	0x3f4d29dc
 8007128:	d2f1a9fc 	.word	0xd2f1a9fc
 800712c:	3f60624d 	.word	0x3f60624d
 8007130:	2000083a 	.word	0x2000083a
 8007134:	3d1e1b09 	.word	0x3d1e1b09
 8007138:	3d09374c 	.word	0x3d09374c
 800713c:	20000270 	.word	0x20000270
 8007140:	20000234 	.word	0x20000234
 8007144:	40872000 	.word	0x40872000
 8007148:	b9c1fc8f 	.word	0xb9c1fc8f
				*p_err = 0.37/1000.0;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a06      	ldr	r2, [pc, #24]	; (8007168 <CTRL_getFloorFriction+0x350>)
 8007150:	601a      	str	r2, [r3, #0]
}
 8007152:	e004      	b.n	800715e <CTRL_getFloorFriction+0x346>
			*p_err = 0;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
}
 800715c:	e7ff      	b.n	800715e <CTRL_getFloorFriction+0x346>
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	39c1fc8f 	.word	0x39c1fc8f

0800716c <CTRL_outMot>:

void CTRL_outMot( float f_duty10_R, float f_duty10_L )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	ed87 0a01 	vstr	s0, [r7, #4]
 8007176:	edc7 0a00 	vstr	s1, [r7]
	float	f_temp;			// 計算用

	/* 電圧に応じてPWM出力を変更する */
	f_duty10_R = f_duty10_R*1000.0;
 800717a:	edd7 7a01 	vldr	s15, [r7, #4]
 800717e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80072b0 <CTRL_outMot+0x144>
 8007182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007186:	edc7 7a01 	vstr	s15, [r7, #4]
	f_duty10_L = f_duty10_L*1000.0;
 800718a:	edd7 7a00 	vldr	s15, [r7]
 800718e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80072b0 <CTRL_outMot+0x144>
 8007192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007196:	edc7 7a00 	vstr	s15, [r7]

	/* 右モータ */
	if( 60 < f_duty10_R ){									// 前進
 800719a:	edd7 7a01 	vldr	s15, [r7, #4]
 800719e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80072b4 <CTRL_outMot+0x148>
 80071a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	dd0e      	ble.n	80071ca <CTRL_outMot+0x5e>
		DCM_setDirCw( DCM_R );
 80071ac:	2000      	movs	r0, #0
 80071ae:	f001 f8f5 	bl	800839c <DCM_setDirCw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_duty10_R );
 80071b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80071b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ba:	ee17 3a90 	vmov	r3, s15
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	2000      	movs	r0, #0
 80071c4:	f001 f93e 	bl	8008444 <DCM_setPwmDuty>
 80071c8:	e02a      	b.n	8007220 <CTRL_outMot+0xb4>
	}
	else if( f_duty10_R < -60 ){							// 後退
 80071ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80071ce:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80072b8 <CTRL_outMot+0x14c>
 80071d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071da:	d51e      	bpl.n	800721a <CTRL_outMot+0xae>
		f_temp = f_duty10_R * -1.0;
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7f9 f9db 	bl	8000598 <__aeabi_f2d>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	f7f9 fd25 	bl	8000c38 <__aeabi_d2f>
 80071ee:	4603      	mov	r3, r0
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef1 7a67 	vneg.f32	s15, s15
 80071f8:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_R );
 80071fc:	2000      	movs	r0, #0
 80071fe:	f001 f8e0 	bl	80083c2 <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_temp );
 8007202:	edd7 7a03 	vldr	s15, [r7, #12]
 8007206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720a:	ee17 3a90 	vmov	r3, s15
 800720e:	b29b      	uxth	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	2000      	movs	r0, #0
 8007214:	f001 f916 	bl	8008444 <DCM_setPwmDuty>
 8007218:	e002      	b.n	8007220 <CTRL_outMot+0xb4>
	}
	else{
		DCM_brakeMot( DCM_R );								// ブレーキ
 800721a:	2000      	movs	r0, #0
 800721c:	f001 f8e4 	bl	80083e8 <DCM_brakeMot>
	}

	/* 左モータ */
	if( 60 < f_duty10_L ){									// 前進
 8007220:	edd7 7a00 	vldr	s15, [r7]
 8007224:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80072b4 <CTRL_outMot+0x148>
 8007228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	dd0e      	ble.n	8007250 <CTRL_outMot+0xe4>
		DCM_setDirCw( DCM_L );
 8007232:	2001      	movs	r0, #1
 8007234:	f001 f8b2 	bl	800839c <DCM_setDirCw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_duty10_L );
 8007238:	edd7 7a00 	vldr	s15, [r7]
 800723c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007240:	ee17 3a90 	vmov	r3, s15
 8007244:	b29b      	uxth	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	2001      	movs	r0, #1
 800724a:	f001 f8fb 	bl	8008444 <DCM_setPwmDuty>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
	}
	else{
		DCM_brakeMot( DCM_L );								// ブレーキ
	}
}
 800724e:	e02a      	b.n	80072a6 <CTRL_outMot+0x13a>
	else if( f_duty10_L < -60 ){							// 後退
 8007250:	edd7 7a00 	vldr	s15, [r7]
 8007254:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80072b8 <CTRL_outMot+0x14c>
 8007258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	d51e      	bpl.n	80072a0 <CTRL_outMot+0x134>
		f_temp = f_duty10_L * -1.0;
 8007262:	6838      	ldr	r0, [r7, #0]
 8007264:	f7f9 f998 	bl	8000598 <__aeabi_f2d>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	f7f9 fce2 	bl	8000c38 <__aeabi_d2f>
 8007274:	4603      	mov	r3, r0
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef1 7a67 	vneg.f32	s15, s15
 800727e:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_L );
 8007282:	2001      	movs	r0, #1
 8007284:	f001 f89d 	bl	80083c2 <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
 8007288:	edd7 7a03 	vldr	s15, [r7, #12]
 800728c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007290:	ee17 3a90 	vmov	r3, s15
 8007294:	b29b      	uxth	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	2001      	movs	r0, #1
 800729a:	f001 f8d3 	bl	8008444 <DCM_setPwmDuty>
}
 800729e:	e002      	b.n	80072a6 <CTRL_outMot+0x13a>
		DCM_brakeMot( DCM_L );								// ブレーキ
 80072a0:	2001      	movs	r0, #1
 80072a2:	f001 f8a1 	bl	80083e8 <DCM_brakeMot>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	447a0000 	.word	0x447a0000
 80072b4:	42700000 	.word	0x42700000
 80072b8:	c2700000 	.word	0xc2700000
 80072bc:	00000000 	.word	0x00000000

080072c0 <CTRL_pol>:

void CTRL_pol( void )
{
 80072c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80072c4:	b090      	sub	sp, #64	; 0x40
 80072c6:	af00      	add	r7, sp, #0
	float f_feedFoard_speed		= 0;		// [制御] フィードフォワード速度制御
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
	float f_feedFoard_angle		= 0;		// [制御] フィードフォワード角度制御
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	623b      	str	r3, [r7, #32]
	float f_speedCtrl			= 0;		// [制御] 速度制御量
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
	float f_angleSpeedCtrl			= 0;	// [制御] 角速度制御量
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	61bb      	str	r3, [r7, #24]
	float f_angleCtrl			= 0;		// [制御] 角度制御量
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
	float f_distSenCtrl			= 0;		// [制御] 距離センサー制御量
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
	float f_frontwall_v_Ctrl		= 0;
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
	float f_frontwall_omega_Ctrl	= 0;
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
	float f_floorfriction		= 0;
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
	float f_duty10_R;						// [出力] 右モータPWM-DUTY比[0.1%]
	float f_duty10_L;						// [出力] 左モータPWM-DUTY比[0.1%]

	float TR = 0.0;
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
	float TL = 0.0;
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
	float Ir = 0.0;
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
	float Il = 0.0;
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	633b      	str	r3, [r7, #48]	; 0x30

	/* 制御を行うかのチェック */
	if( uc_CtrlFlag != TRUE ){
 8007316:	4bb8      	ldr	r3, [pc, #736]	; (80075f8 <CTRL_pol+0x338>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	f041 8015 	bne.w	800834a <CTRL_pol+0x108a>
		 return;		// 制御無効状態
	}
	if(SW_ON == SW_IsOn_0()){
 8007320:	f7fa fec4 	bl	80020ac <SW_IsOn_0>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <CTRL_pol+0x6e>
		Failsafe_flag();
 800732a:	f001 f813 	bl	8008354 <Failsafe_flag>
	}

	/* 制御不能 */
	if (SYS_isOutOfCtrl() == TRUE ){
 800732e:	f001 f829 	bl	8008384 <SYS_isOutOfCtrl>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d019      	beq.n	800736c <CTRL_pol+0xac>

		f_DistErrSum = 0;				// 累積偏差クリア
 8007338:	4bb0      	ldr	r3, [pc, #704]	; (80075fc <CTRL_pol+0x33c>)
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
		f_NowDist = f_LastDist;			// 強制的に最終目標位置に変更
 8007340:	4baf      	ldr	r3, [pc, #700]	; (8007600 <CTRL_pol+0x340>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4aaf      	ldr	r2, [pc, #700]	; (8007604 <CTRL_pol+0x344>)
 8007346:	6013      	str	r3, [r2, #0]
		f_NowAngle = f_LastAngle;		// 強制的に最終目標時間に変更
 8007348:	4baf      	ldr	r3, [pc, #700]	; (8007608 <CTRL_pol+0x348>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4aaf      	ldr	r2, [pc, #700]	; (800760c <CTRL_pol+0x34c>)
 800734e:	6013      	str	r3, [r2, #0]
		f_Time = f_TrgtTime;			// 強制的に最終目標時間に変更
 8007350:	4baf      	ldr	r3, [pc, #700]	; (8007610 <CTRL_pol+0x350>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4aaf      	ldr	r2, [pc, #700]	; (8007614 <CTRL_pol+0x354>)
 8007356:	6013      	str	r3, [r2, #0]

	 	CTRL_stop();				// 制御停止
 8007358:	f7fe fa00 	bl	800575c <CTRL_stop>
		CTRL_clrData();					// データクリア
 800735c:	f7fe fa0e 	bl	800577c <CTRL_clrData>
		DCM_brakeMot( DCM_R );			// ブレーキ
 8007360:	2000      	movs	r0, #0
 8007362:	f001 f841 	bl	80083e8 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );			// ブレーキ
 8007366:	2001      	movs	r0, #1
 8007368:	f001 f83e 	bl	80083e8 <DCM_brakeMot>
	}

	/* 各種センサ入力 */
	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
 800736c:	49aa      	ldr	r1, [pc, #680]	; (8007618 <CTRL_pol+0x358>)
 800736e:	48ab      	ldr	r0, [pc, #684]	; (800761c <CTRL_pol+0x35c>)
 8007370:	f001 f952 	bl	8008618 <ENC_GetDiv>
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
 8007374:	f7fe fb46 	bl	8005a04 <CTRL_refNow>
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
 8007378:	f7fe fbde 	bl	8005b38 <CTRL_refTarget>

	f_NowAngle = GYRO_getNowAngle();					// 現在角度[deg]
 800737c:	f001 faf6 	bl	800896c <GYRO_getNowAngle>
 8007380:	eef0 7a40 	vmov.f32	s15, s0
 8007384:	4ba1      	ldr	r3, [pc, #644]	; (800760c <CTRL_pol+0x34c>)
 8007386:	edc3 7a00 	vstr	s15, [r3]

	/* 制御値取得 */
	CTRL_getFF_speed( &f_feedFoard_speed );					// [制御] フィードフォワード
 800738a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff f996 	bl	80066c0 <CTRL_getFF_speed>
	CTRL_getFF_angle( &f_feedFoard_angle );					// [制御] フィードフォワード
 8007394:	f107 0320 	add.w	r3, r7, #32
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff f9e7 	bl	800676c <CTRL_getFF_angle>
	CTRL_getSpeedFB( &f_speedCtrl );				// [制御] 速度
 800739e:	f107 031c 	add.w	r3, r7, #28
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fa58 	bl	8006858 <CTRL_getSpeedFB>
	CTRL_getAngleSpeedFB( &f_angleSpeedCtrl );		// [制御] 角速度
 80073a8:	f107 0318 	add.w	r3, r7, #24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fac1 	bl	8006934 <CTRL_getAngleSpeedFB>
	CTRL_getAngleFB( &f_angleCtrl );		//angle ctrl
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fb58 	bl	8006a6c <CTRL_getAngleFB>
	CTRL_getSenFB( &f_distSenCtrl );				// [制御] 壁
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fbbb 	bl	8006b3c <CTRL_getSenFB>
	CTRL_getFloorFriction( &f_floorfriction );
 80073c6:	1d3b      	adds	r3, r7, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fd25 	bl	8006e18 <CTRL_getFloorFriction>
	CTRL_get_frontwall_v_FB( &f_frontwall_v_Ctrl);
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fc28 	bl	8006c28 <CTRL_get_frontwall_v_FB>
	CTRL_get_frontwall_omega_FB( &f_frontwall_omega_Ctrl);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fca7 	bl	8006d30 <CTRL_get_frontwall_omega_FB>

	/* 直進制御 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 80073e2:	4b8f      	ldr	r3, [pc, #572]	; (8007620 <CTRL_pol+0x360>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01c      	beq.n	8007424 <CTRL_pol+0x164>
 80073ea:	4b8d      	ldr	r3, [pc, #564]	; (8007620 <CTRL_pol+0x360>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d018      	beq.n	8007424 <CTRL_pol+0x164>
 80073f2:	4b8b      	ldr	r3, [pc, #556]	; (8007620 <CTRL_pol+0x360>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d014      	beq.n	8007424 <CTRL_pol+0x164>
 80073fa:	4b89      	ldr	r3, [pc, #548]	; (8007620 <CTRL_pol+0x360>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b0a      	cmp	r3, #10
 8007400:	d010      	beq.n	8007424 <CTRL_pol+0x164>
 8007402:	4b87      	ldr	r3, [pc, #540]	; (8007620 <CTRL_pol+0x360>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b0e      	cmp	r3, #14
 8007408:	d00c      	beq.n	8007424 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 800740a:	4b85      	ldr	r3, [pc, #532]	; (8007620 <CTRL_pol+0x360>)
 800740c:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 800740e:	2b03      	cmp	r3, #3
 8007410:	d008      	beq.n	8007424 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 8007412:	4b83      	ldr	r3, [pc, #524]	; (8007620 <CTRL_pol+0x360>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d004      	beq.n	8007424 <CTRL_pol+0x164>
 800741a:	4b81      	ldr	r3, [pc, #516]	; (8007620 <CTRL_pol+0x360>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b05      	cmp	r3, #5
 8007420:	f040 8104 	bne.w	800762c <CTRL_pol+0x36c>
	){
		TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 8007424:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007428:	edd7 7a07 	vldr	s15, [r7, #28]
 800742c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007430:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8007624 <CTRL_pol+0x364>
 8007434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007438:	ee17 0a90 	vmov	r0, s15
 800743c:	f7f9 f8ac 	bl	8000598 <__aeabi_f2d>
 8007440:	a361      	add	r3, pc, #388	; (adr r3, 80075c8 <CTRL_pol+0x308>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f8 ff49 	bl	80002dc <__adddf3>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	a35f      	add	r3, pc, #380	; (adr r3, 80075d0 <CTRL_pol+0x310>)
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f7f9 f8f6 	bl	8000648 <__aeabi_dmul>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	ed97 7a08 	vldr	s14, [r7, #32]
 8007468:	edd7 7a06 	vldr	s15, [r7, #24]
 800746c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007470:	edd7 7a04 	vldr	s15, [r7, #16]
 8007474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007478:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007628 <CTRL_pol+0x368>
 800747c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007480:	ee17 0a90 	vmov	r0, s15
 8007484:	f7f9 f888 	bl	8000598 <__aeabi_f2d>
 8007488:	a353      	add	r3, pc, #332	; (adr r3, 80075d8 <CTRL_pol+0x318>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f7f9 f8db 	bl	8000648 <__aeabi_dmul>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f8 ff1f 	bl	80002dc <__adddf3>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	a34e      	add	r3, pc, #312	; (adr r3, 80075e0 <CTRL_pol+0x320>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f7f9 f9f6 	bl	800089c <__aeabi_ddiv>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4610      	mov	r0, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	f7f9 fbbe 	bl	8000c38 <__aeabi_d2f>
 80074bc:	4603      	mov	r3, r0
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
		TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 80074c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80074c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80074c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074cc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007624 <CTRL_pol+0x364>
 80074d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074d4:	ee17 0a90 	vmov	r0, s15
 80074d8:	f7f9 f85e 	bl	8000598 <__aeabi_f2d>
 80074dc:	a33a      	add	r3, pc, #232	; (adr r3, 80075c8 <CTRL_pol+0x308>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f7f8 fefb 	bl	80002dc <__adddf3>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	a338      	add	r3, pc, #224	; (adr r3, 80075d0 <CTRL_pol+0x310>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f7f9 f8a8 	bl	8000648 <__aeabi_dmul>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	461d      	mov	r5, r3
 8007500:	ed97 7a08 	vldr	s14, [r7, #32]
 8007504:	edd7 7a06 	vldr	s15, [r7, #24]
 8007508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800750c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007514:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007628 <CTRL_pol+0x368>
 8007518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800751c:	ee17 0a90 	vmov	r0, s15
 8007520:	f7f9 f83a 	bl	8000598 <__aeabi_f2d>
 8007524:	a32c      	add	r3, pc, #176	; (adr r3, 80075d8 <CTRL_pol+0x318>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f9 f88d 	bl	8000648 <__aeabi_dmul>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	f7f8 fecf 	bl	80002d8 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	a327      	add	r3, pc, #156	; (adr r3, 80075e0 <CTRL_pol+0x320>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f9 f9a8 	bl	800089c <__aeabi_ddiv>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	f7f9 fb70 	bl	8000c38 <__aeabi_d2f>
 8007558:	4603      	mov	r3, r0
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
		Ir = (TR+0.0255/1000.0)/Torque_constant;
 800755c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800755e:	f7f9 f81b 	bl	8000598 <__aeabi_f2d>
 8007562:	a321      	add	r3, pc, #132	; (adr r3, 80075e8 <CTRL_pol+0x328>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f8 feb8 	bl	80002dc <__adddf3>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	a31e      	add	r3, pc, #120	; (adr r3, 80075f0 <CTRL_pol+0x330>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f7f9 f98f 	bl	800089c <__aeabi_ddiv>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f7f9 fb57 	bl	8000c38 <__aeabi_d2f>
 800758a:	4603      	mov	r3, r0
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
		Il = (TL+0.0255/1000.0)/Torque_constant;
 800758e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007590:	f7f9 f802 	bl	8000598 <__aeabi_f2d>
 8007594:	a314      	add	r3, pc, #80	; (adr r3, 80075e8 <CTRL_pol+0x328>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f7f8 fe9f 	bl	80002dc <__adddf3>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	a312      	add	r3, pc, #72	; (adr r3, 80075f0 <CTRL_pol+0x330>)
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f7f9 f976 	bl	800089c <__aeabi_ddiv>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4610      	mov	r0, r2
 80075b6:	4619      	mov	r1, r3
 80075b8:	f7f9 fb3e 	bl	8000c38 <__aeabi_d2f>
 80075bc:	4603      	mov	r3, r0
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
 80075c0:	f000 bd84 	b.w	80080cc <CTRL_pol+0xe0c>
 80075c4:	f3af 8000 	nop.w
 80075c8:	47ae147b 	.word	0x47ae147b
 80075cc:	3f847ae1 	.word	0x3f847ae1
 80075d0:	a0000000 	.word	0xa0000000
 80075d4:	3f699999 	.word	0x3f699999
 80075d8:	ca518cec 	.word	0xca518cec
 80075dc:	3fc7e16e 	.word	0x3fc7e16e
 80075e0:	c0000000 	.word	0xc0000000
 80075e4:	400ccccc 	.word	0x400ccccc
 80075e8:	a821f299 	.word	0xa821f299
 80075ec:	3efabd1a 	.word	0x3efabd1a
 80075f0:	40000000 	.word	0x40000000
 80075f4:	3f4376d5 	.word	0x3f4376d5
 80075f8:	2000021c 	.word	0x2000021c
 80075fc:	20000260 	.word	0x20000260
 8007600:	2000024c 	.word	0x2000024c
 8007604:	20000254 	.word	0x20000254
 8007608:	20000280 	.word	0x20000280
 800760c:	20000284 	.word	0x20000284
 8007610:	20000008 	.word	0x20000008
 8007614:	20000220 	.word	0x20000220
 8007618:	2000151c 	.word	0x2000151c
 800761c:	20001520 	.word	0x20001520
 8007620:	2000083a 	.word	0x2000083a
 8007624:	3c9374bc 	.word	0x3c9374bc
 8007628:	369a59b3 	.word	0x369a59b3
	}

	/* 壁あて制御 */
	else if( en_Type == CTRL_HIT_WALL ){
 800762c:	4bc6      	ldr	r3, [pc, #792]	; (8007948 <CTRL_pol+0x688>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b06      	cmp	r3, #6
 8007632:	d179      	bne.n	8007728 <CTRL_pol+0x468>
		TR = (TIRE_D/2.0/2.0)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/3500.0 ));		
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	4618      	mov	r0, r3
 8007638:	f7f8 ffae 	bl	8000598 <__aeabi_f2d>
 800763c:	a3b0      	add	r3, pc, #704	; (adr r3, 8007900 <CTRL_pol+0x640>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f9 f92b 	bl	800089c <__aeabi_ddiv>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	a3ae      	add	r3, pc, #696	; (adr r3, 8007908 <CTRL_pol+0x648>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 fff8 	bl	8000648 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4610      	mov	r0, r2
 800765e:	4619      	mov	r1, r3
 8007660:	a3ab      	add	r3, pc, #684	; (adr r3, 8007910 <CTRL_pol+0x650>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 ffef 	bl	8000648 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4610      	mov	r0, r2
 8007670:	4619      	mov	r1, r3
 8007672:	f7f9 fae1 	bl	8000c38 <__aeabi_d2f>
 8007676:	4603      	mov	r3, r0
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
		TL = (TIRE_D/2.0/2.0)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/3500.0 ));
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	4618      	mov	r0, r3
 800767e:	f7f8 ff8b 	bl	8000598 <__aeabi_f2d>
 8007682:	a39f      	add	r3, pc, #636	; (adr r3, 8007900 <CTRL_pol+0x640>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f9 f908 	bl	800089c <__aeabi_ddiv>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4610      	mov	r0, r2
 8007692:	4619      	mov	r1, r3
 8007694:	a39c      	add	r3, pc, #624	; (adr r3, 8007908 <CTRL_pol+0x648>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f7f8 ffd5 	bl	8000648 <__aeabi_dmul>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	a39a      	add	r3, pc, #616	; (adr r3, 8007910 <CTRL_pol+0x650>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 ffcc 	bl	8000648 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	f7f9 fabe 	bl	8000c38 <__aeabi_d2f>
 80076bc:	4603      	mov	r3, r0
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
		Ir = (TR-0.0255/1000.0)/Torque_constant;
 80076c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076c2:	f7f8 ff69 	bl	8000598 <__aeabi_f2d>
 80076c6:	a394      	add	r3, pc, #592	; (adr r3, 8007918 <CTRL_pol+0x658>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f8 fe04 	bl	80002d8 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	a391      	add	r3, pc, #580	; (adr r3, 8007920 <CTRL_pol+0x660>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f9 f8dd 	bl	800089c <__aeabi_ddiv>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	f7f9 faa5 	bl	8000c38 <__aeabi_d2f>
 80076ee:	4603      	mov	r3, r0
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
		Il = (TL-0.0255/1000.0)/Torque_constant;
 80076f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f4:	f7f8 ff50 	bl	8000598 <__aeabi_f2d>
 80076f8:	a387      	add	r3, pc, #540	; (adr r3, 8007918 <CTRL_pol+0x658>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f8 fdeb 	bl	80002d8 <__aeabi_dsub>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	a385      	add	r3, pc, #532	; (adr r3, 8007920 <CTRL_pol+0x660>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f9 f8c4 	bl	800089c <__aeabi_ddiv>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4610      	mov	r0, r2
 800771a:	4619      	mov	r1, r3
 800771c:	f7f9 fa8c 	bl	8000c38 <__aeabi_d2f>
 8007720:	4603      	mov	r3, r0
 8007722:	633b      	str	r3, [r7, #48]	; 0x30
 8007724:	f000 bcd2 	b.w	80080cc <CTRL_pol+0xe0c>
	}

	/* スラローム制御 */
	else if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8007728:	4b87      	ldr	r3, [pc, #540]	; (8007948 <CTRL_pol+0x688>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b0b      	cmp	r3, #11
 800772e:	d008      	beq.n	8007742 <CTRL_pol+0x482>
 8007730:	4b85      	ldr	r3, [pc, #532]	; (8007948 <CTRL_pol+0x688>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b0c      	cmp	r3, #12
 8007736:	d004      	beq.n	8007742 <CTRL_pol+0x482>
 8007738:	4b83      	ldr	r3, [pc, #524]	; (8007948 <CTRL_pol+0x688>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b0d      	cmp	r3, #13
 800773e:	f040 8206 	bne.w	8007b4e <CTRL_pol+0x88e>
		/* 左旋回 */
		if( f_LastAngle > 0 ){
 8007742:	4b82      	ldr	r3, [pc, #520]	; (800794c <CTRL_pol+0x68c>)
 8007744:	edd3 7a00 	vldr	s15, [r3]
 8007748:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	f340 8102 	ble.w	8007958 <CTRL_pol+0x698>
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007754:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007758:	edd7 7a07 	vldr	s15, [r7, #28]
 800775c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007760:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8007954 <CTRL_pol+0x694>
 8007764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007768:	ee17 0a90 	vmov	r0, s15
 800776c:	f7f8 ff14 	bl	8000598 <__aeabi_f2d>
 8007770:	a36d      	add	r3, pc, #436	; (adr r3, 8007928 <CTRL_pol+0x668>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 fdb1 	bl	80002dc <__adddf3>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	a363      	add	r3, pc, #396	; (adr r3, 8007910 <CTRL_pol+0x650>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 ff5e 	bl	8000648 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4614      	mov	r4, r2
 8007792:	461d      	mov	r5, r3
 8007794:	ed97 7a08 	vldr	s14, [r7, #32]
 8007798:	edd7 7a06 	vldr	s15, [r7, #24]
 800779c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80077a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a8:	ee17 0a90 	vmov	r0, s15
 80077ac:	f7f8 fef4 	bl	8000598 <__aeabi_f2d>
 80077b0:	a35f      	add	r3, pc, #380	; (adr r3, 8007930 <CTRL_pol+0x670>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 ff47 	bl	8000648 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4690      	mov	r8, r2
 80077c0:	4699      	mov	r9, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7f8 fee7 	bl	8000598 <__aeabi_f2d>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f8 fd83 	bl	80002dc <__adddf3>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4610      	mov	r0, r2
 80077dc:	4619      	mov	r1, r3
 80077de:	a356      	add	r3, pc, #344	; (adr r3, 8007938 <CTRL_pol+0x678>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 ff30 	bl	8000648 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd74 	bl	80002dc <__adddf3>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	a350      	add	r3, pc, #320	; (adr r3, 8007940 <CTRL_pol+0x680>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	f7f9 f84b 	bl	800089c <__aeabi_ddiv>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	f7f9 fa13 	bl	8000c38 <__aeabi_d2f>
 8007812:	4603      	mov	r3, r0
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007816:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800781a:	edd7 7a07 	vldr	s15, [r7, #28]
 800781e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007822:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007954 <CTRL_pol+0x694>
 8007826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800782a:	ee17 0a90 	vmov	r0, s15
 800782e:	f7f8 feb3 	bl	8000598 <__aeabi_f2d>
 8007832:	a33d      	add	r3, pc, #244	; (adr r3, 8007928 <CTRL_pol+0x668>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fd50 	bl	80002dc <__adddf3>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	a332      	add	r3, pc, #200	; (adr r3, 8007910 <CTRL_pol+0x650>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fefd 	bl	8000648 <__aeabi_dmul>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4614      	mov	r4, r2
 8007854:	461d      	mov	r5, r3
 8007856:	ed97 7a08 	vldr	s14, [r7, #32]
 800785a:	edd7 7a06 	vldr	s15, [r7, #24]
 800785e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007862:	edd7 7a05 	vldr	s15, [r7, #20]
 8007866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800786a:	ee17 0a90 	vmov	r0, s15
 800786e:	f7f8 fe93 	bl	8000598 <__aeabi_f2d>
 8007872:	a32f      	add	r3, pc, #188	; (adr r3, 8007930 <CTRL_pol+0x670>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fee6 	bl	8000648 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4690      	mov	r8, r2
 8007882:	4699      	mov	r9, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fe86 	bl	8000598 <__aeabi_f2d>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4640      	mov	r0, r8
 8007892:	4649      	mov	r1, r9
 8007894:	f7f8 fd22 	bl	80002dc <__adddf3>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4610      	mov	r0, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	a325      	add	r3, pc, #148	; (adr r3, 8007938 <CTRL_pol+0x678>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fecf 	bl	8000648 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fd11 	bl	80002d8 <__aeabi_dsub>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	a320      	add	r3, pc, #128	; (adr r3, 8007940 <CTRL_pol+0x680>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 ffea 	bl	800089c <__aeabi_ddiv>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	f7f9 f9b2 	bl	8000c38 <__aeabi_d2f>
 80078d4:	4603      	mov	r3, r0
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR/*+0.0255/1000.0*/)/Torque_constant;
 80078d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80078dc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8007950 <CTRL_pol+0x690>
 80078e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			Il = (TL/*+0.0255/1000.0*/)/Torque_constant;
 80078e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80078ec:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007950 <CTRL_pol+0x690>
 80078f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if( f_LastAngle > 0 ){
 80078f8:	e3e8      	b.n	80080cc <CTRL_pol+0xe0c>
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w
 8007900:	00000000 	.word	0x00000000
 8007904:	40ab5800 	.word	0x40ab5800
 8007908:	80000000 	.word	0x80000000
 800790c:	3f926e97 	.word	0x3f926e97
 8007910:	a0000000 	.word	0xa0000000
 8007914:	3f699999 	.word	0x3f699999
 8007918:	a821f299 	.word	0xa821f299
 800791c:	3efabd1a 	.word	0x3efabd1a
 8007920:	40000000 	.word	0x40000000
 8007924:	3f4376d5 	.word	0x3f4376d5
 8007928:	47ae147b 	.word	0x47ae147b
 800792c:	3f847ae1 	.word	0x3f847ae1
 8007930:	5f379dfc 	.word	0x5f379dfc
 8007934:	3ed34b36 	.word	0x3ed34b36
 8007938:	ca518cec 	.word	0xca518cec
 800793c:	3fc7e16e 	.word	0x3fc7e16e
 8007940:	c0000000 	.word	0xc0000000
 8007944:	400ccccc 	.word	0x400ccccc
 8007948:	2000083a 	.word	0x2000083a
 800794c:	20000280 	.word	0x20000280
 8007950:	3a1bb6aa 	.word	0x3a1bb6aa
 8007954:	3c9374bc 	.word	0x3c9374bc
		}
		/*右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007958:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800795c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007964:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8007954 <CTRL_pol+0x694>
 8007968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800796c:	ee17 0a90 	vmov	r0, s15
 8007970:	f7f8 fe12 	bl	8000598 <__aeabi_f2d>
 8007974:	a3ba      	add	r3, pc, #744	; (adr r3, 8007c60 <CTRL_pol+0x9a0>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fcaf 	bl	80002dc <__adddf3>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	a3b8      	add	r3, pc, #736	; (adr r3, 8007c68 <CTRL_pol+0x9a8>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fe5c 	bl	8000648 <__aeabi_dmul>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4690      	mov	r8, r2
 8007996:	4699      	mov	r9, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fdfc 	bl	8000598 <__aeabi_f2d>
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f8 fdf6 	bl	8000598 <__aeabi_f2d>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fc90 	bl	80002d8 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	461d      	mov	r5, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7f8 fde8 	bl	8000598 <__aeabi_f2d>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4620      	mov	r0, r4
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7f8 fc84 	bl	80002dc <__adddf3>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	a3a4      	add	r3, pc, #656	; (adr r3, 8007c70 <CTRL_pol+0x9b0>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fe31 	bl	8000648 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4614      	mov	r4, r2
 80079ec:	461d      	mov	r5, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f8 fdd1 	bl	8000598 <__aeabi_f2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fc6d 	bl	80002dc <__adddf3>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4610      	mov	r0, r2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	a39b      	add	r3, pc, #620	; (adr r3, 8007c78 <CTRL_pol+0x9b8>)
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f7f8 fe1a 	bl	8000648 <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 fc5e 	bl	80002dc <__adddf3>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	a395      	add	r3, pc, #596	; (adr r3, 8007c80 <CTRL_pol+0x9c0>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 ff35 	bl	800089c <__aeabi_ddiv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f7f9 f8fd 	bl	8000c38 <__aeabi_d2f>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007a42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007a46:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a4e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8007c88 <CTRL_pol+0x9c8>
 8007a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a56:	ee17 0a90 	vmov	r0, s15
 8007a5a:	f7f8 fd9d 	bl	8000598 <__aeabi_f2d>
 8007a5e:	a380      	add	r3, pc, #512	; (adr r3, 8007c60 <CTRL_pol+0x9a0>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 fc3a 	bl	80002dc <__adddf3>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4619      	mov	r1, r3
 8007a70:	a37d      	add	r3, pc, #500	; (adr r3, 8007c68 <CTRL_pol+0x9a8>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fde7 	bl	8000648 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4690      	mov	r8, r2
 8007a80:	4699      	mov	r9, r3
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7f8 fd87 	bl	8000598 <__aeabi_f2d>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f8 fd81 	bl	8000598 <__aeabi_f2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f8 fc1b 	bl	80002d8 <__aeabi_dsub>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd73 	bl	8000598 <__aeabi_f2d>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f8 fc0f 	bl	80002dc <__adddf3>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	a36a      	add	r3, pc, #424	; (adr r3, 8007c70 <CTRL_pol+0x9b0>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f7f8 fdbc 	bl	8000648 <__aeabi_dmul>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7f8 fd5c 	bl	8000598 <__aeabi_f2d>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f7f8 fbf8 	bl	80002dc <__adddf3>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4610      	mov	r0, r2
 8007af2:	4619      	mov	r1, r3
 8007af4:	a360      	add	r3, pc, #384	; (adr r3, 8007c78 <CTRL_pol+0x9b8>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 fda5 	bl	8000648 <__aeabi_dmul>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4640      	mov	r0, r8
 8007b04:	4649      	mov	r1, r9
 8007b06:	f7f8 fbe7 	bl	80002d8 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	a35b      	add	r3, pc, #364	; (adr r3, 8007c80 <CTRL_pol+0x9c0>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fec0 	bl	800089c <__aeabi_ddiv>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f7f9 f888 	bl	8000c38 <__aeabi_d2f>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR/*+0.0255/1000.0*/)/Torque_constant;
 8007b2c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007b30:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007c8c <CTRL_pol+0x9cc>
 8007b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			Il = (TL/*+0.0255/1000.0*/)/Torque_constant;
 8007b3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007b40:	eddf 6a52 	vldr	s13, [pc, #328]	; 8007c8c <CTRL_pol+0x9cc>
 8007b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if( f_LastAngle > 0 ){
 8007b4c:	e2be      	b.n	80080cc <CTRL_pol+0xe0c>
		}
	}

	else if( en_Type == CTRL_FRONT_WALL){
 8007b4e:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <CTRL_pol+0x9d0>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b0f      	cmp	r3, #15
 8007b54:	f040 80a0 	bne.w	8007c98 <CTRL_pol+0x9d8>
		TR = ((TIRE_D/2.0/2.0)*(Weight*f_frontwall_v_Ctrl)+(TIRE_D/2.0/TREAD)*(Inertia*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8007b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007c88 <CTRL_pol+0x9c8>
 8007b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b64:	ee17 0a90 	vmov	r0, s15
 8007b68:	f7f8 fd16 	bl	8000598 <__aeabi_f2d>
 8007b6c:	a33e      	add	r3, pc, #248	; (adr r3, 8007c68 <CTRL_pol+0x9a8>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fd69 	bl	8000648 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	461d      	mov	r5, r3
 8007b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b82:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007c94 <CTRL_pol+0x9d4>
 8007b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b8a:	ee17 0a90 	vmov	r0, s15
 8007b8e:	f7f8 fd03 	bl	8000598 <__aeabi_f2d>
 8007b92:	a339      	add	r3, pc, #228	; (adr r3, 8007c78 <CTRL_pol+0x9b8>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fd56 	bl	8000648 <__aeabi_dmul>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f7f8 fb9a 	bl	80002dc <__adddf3>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4610      	mov	r0, r2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	a333      	add	r3, pc, #204	; (adr r3, 8007c80 <CTRL_pol+0x9c0>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fe71 	bl	800089c <__aeabi_ddiv>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f7f9 f839 	bl	8000c38 <__aeabi_d2f>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		TL = ((TIRE_D/2.0/2.0)*(Weight*f_frontwall_v_Ctrl)-(TIRE_D/2.0/TREAD)*(Inertia*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8007bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bce:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007c88 <CTRL_pol+0x9c8>
 8007bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bd6:	ee17 0a90 	vmov	r0, s15
 8007bda:	f7f8 fcdd 	bl	8000598 <__aeabi_f2d>
 8007bde:	a322      	add	r3, pc, #136	; (adr r3, 8007c68 <CTRL_pol+0x9a8>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fd30 	bl	8000648 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	461d      	mov	r5, r3
 8007bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007bf4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8007c94 <CTRL_pol+0x9d4>
 8007bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bfc:	ee17 0a90 	vmov	r0, s15
 8007c00:	f7f8 fcca 	bl	8000598 <__aeabi_f2d>
 8007c04:	a31c      	add	r3, pc, #112	; (adr r3, 8007c78 <CTRL_pol+0x9b8>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fd1d 	bl	8000648 <__aeabi_dmul>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4620      	mov	r0, r4
 8007c14:	4629      	mov	r1, r5
 8007c16:	f7f8 fb5f 	bl	80002d8 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	a317      	add	r3, pc, #92	; (adr r3, 8007c80 <CTRL_pol+0x9c0>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fe38 	bl	800089c <__aeabi_ddiv>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4610      	mov	r0, r2
 8007c32:	4619      	mov	r1, r3
 8007c34:	f7f9 f800 	bl	8000c38 <__aeabi_d2f>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	62bb      	str	r3, [r7, #40]	; 0x28
		Ir = (TR)/Torque_constant;
 8007c3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007c40:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007c8c <CTRL_pol+0x9cc>
 8007c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c48:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		Il = (TL)/Torque_constant;
 8007c4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007c50:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007c8c <CTRL_pol+0x9cc>
 8007c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c58:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8007c5c:	e236      	b.n	80080cc <CTRL_pol+0xe0c>
 8007c5e:	bf00      	nop
 8007c60:	47ae147b 	.word	0x47ae147b
 8007c64:	3f847ae1 	.word	0x3f847ae1
 8007c68:	a0000000 	.word	0xa0000000
 8007c6c:	3f699999 	.word	0x3f699999
 8007c70:	5f379dfc 	.word	0x5f379dfc
 8007c74:	3ed34b36 	.word	0x3ed34b36
 8007c78:	ca518cec 	.word	0xca518cec
 8007c7c:	3fc7e16e 	.word	0x3fc7e16e
 8007c80:	c0000000 	.word	0xc0000000
 8007c84:	400ccccc 	.word	0x400ccccc
 8007c88:	3c9374bc 	.word	0x3c9374bc
 8007c8c:	3a1bb6aa 	.word	0x3a1bb6aa
 8007c90:	2000083a 	.word	0x2000083a
 8007c94:	369a59b3 	.word	0x369a59b3
	}

	/* 超信地旋回 */
	else{
		/* 左旋回 */
		if( f_LastAngle > 0 ){			
 8007c98:	4b7b      	ldr	r3, [pc, #492]	; (8007e88 <CTRL_pol+0xbc8>)
 8007c9a:	edd3 7a00 	vldr	s15, [r3]
 8007c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	f340 80f5 	ble.w	8007e94 <CTRL_pol+0xbd4>
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007caa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007cae:	edd7 7a07 	vldr	s15, [r7, #28]
 8007cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007e90 <CTRL_pol+0xbd0>
 8007cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cbe:	ee17 0a90 	vmov	r0, s15
 8007cc2:	f7f8 fc69 	bl	8000598 <__aeabi_f2d>
 8007cc6:	a364      	add	r3, pc, #400	; (adr r3, 8007e58 <CTRL_pol+0xb98>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fb06 	bl	80002dc <__adddf3>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	a361      	add	r3, pc, #388	; (adr r3, 8007e60 <CTRL_pol+0xba0>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 fcb3 	bl	8000648 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	461d      	mov	r5, r3
 8007cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8007cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cfe:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8007e8c <CTRL_pol+0xbcc>
 8007d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d0e:	ee17 0a90 	vmov	r0, s15
 8007d12:	f7f8 fc41 	bl	8000598 <__aeabi_f2d>
 8007d16:	a354      	add	r3, pc, #336	; (adr r3, 8007e68 <CTRL_pol+0xba8>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fc94 	bl	8000648 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fad8 	bl	80002dc <__adddf3>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	a34e      	add	r3, pc, #312	; (adr r3, 8007e70 <CTRL_pol+0xbb0>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fdaf 	bl	800089c <__aeabi_ddiv>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7f8 ff77 	bl	8000c38 <__aeabi_d2f>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007d4e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d5a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007e90 <CTRL_pol+0xbd0>
 8007d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d62:	ee17 0a90 	vmov	r0, s15
 8007d66:	f7f8 fc17 	bl	8000598 <__aeabi_f2d>
 8007d6a:	a33b      	add	r3, pc, #236	; (adr r3, 8007e58 <CTRL_pol+0xb98>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fab4 	bl	80002dc <__adddf3>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	a338      	add	r3, pc, #224	; (adr r3, 8007e60 <CTRL_pol+0xba0>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fc61 	bl	8000648 <__aeabi_dmul>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4614      	mov	r4, r2
 8007d8c:	461d      	mov	r5, r3
 8007d8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8007d92:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007e8c <CTRL_pol+0xbcc>
 8007da6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007db2:	ee17 0a90 	vmov	r0, s15
 8007db6:	f7f8 fbef 	bl	8000598 <__aeabi_f2d>
 8007dba:	a32b      	add	r3, pc, #172	; (adr r3, 8007e68 <CTRL_pol+0xba8>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fc42 	bl	8000648 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fa84 	bl	80002d8 <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	a325      	add	r3, pc, #148	; (adr r3, 8007e70 <CTRL_pol+0xbb0>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fd5d 	bl	800089c <__aeabi_ddiv>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 ff25 	bl	8000c38 <__aeabi_d2f>
 8007dee:	4603      	mov	r3, r0
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 8007df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df4:	f7f8 fbd0 	bl	8000598 <__aeabi_f2d>
 8007df8:	a31f      	add	r3, pc, #124	; (adr r3, 8007e78 <CTRL_pol+0xbb8>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa6d 	bl	80002dc <__adddf3>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	a31d      	add	r3, pc, #116	; (adr r3, 8007e80 <CTRL_pol+0xbc0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fd44 	bl	800089c <__aeabi_ddiv>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7f8 ff0c 	bl	8000c38 <__aeabi_d2f>
 8007e20:	4603      	mov	r3, r0
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL-0.0255/1000.0)/Torque_constant;
 8007e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e26:	f7f8 fbb7 	bl	8000598 <__aeabi_f2d>
 8007e2a:	a313      	add	r3, pc, #76	; (adr r3, 8007e78 <CTRL_pol+0xbb8>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f7f8 fa52 	bl	80002d8 <__aeabi_dsub>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	a310      	add	r3, pc, #64	; (adr r3, 8007e80 <CTRL_pol+0xbc0>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f7f8 fd2b 	bl	800089c <__aeabi_ddiv>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	f7f8 fef3 	bl	8000c38 <__aeabi_d2f>
 8007e52:	4603      	mov	r3, r0
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30
 8007e56:	e139      	b.n	80080cc <CTRL_pol+0xe0c>
 8007e58:	47ae147b 	.word	0x47ae147b
 8007e5c:	3f847ae1 	.word	0x3f847ae1
 8007e60:	a0000000 	.word	0xa0000000
 8007e64:	3f699999 	.word	0x3f699999
 8007e68:	090e2dab 	.word	0x090e2dab
 8007e6c:	3fc4b9b3 	.word	0x3fc4b9b3
 8007e70:	c0000000 	.word	0xc0000000
 8007e74:	400ccccc 	.word	0x400ccccc
 8007e78:	a821f299 	.word	0xa821f299
 8007e7c:	3efabd1a 	.word	0x3efabd1a
 8007e80:	40000000 	.word	0x40000000
 8007e84:	3f4376d5 	.word	0x3f4376d5
 8007e88:	20000280 	.word	0x20000280
 8007e8c:	369a59b3 	.word	0x369a59b3
 8007e90:	3c9374bc 	.word	0x3c9374bc
		}
		/* 右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007e94:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8007e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ea0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8007e90 <CTRL_pol+0xbd0>
 8007ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ea8:	ee17 0a90 	vmov	r0, s15
 8007eac:	f7f8 fb74 	bl	8000598 <__aeabi_f2d>
 8007eb0:	a3fb      	add	r3, pc, #1004	; (adr r3, 80082a0 <CTRL_pol+0xfe0>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 fa11 	bl	80002dc <__adddf3>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	a3f9      	add	r3, pc, #996	; (adr r3, 80082a8 <CTRL_pol+0xfe8>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fbbe 	bl	8000648 <__aeabi_dmul>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4690      	mov	r8, r2
 8007ed2:	4699      	mov	r9, r3
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 fb5e 	bl	8000598 <__aeabi_f2d>
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f8 fb58 	bl	8000598 <__aeabi_f2d>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 f9f2 	bl	80002d8 <__aeabi_dsub>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	461d      	mov	r5, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f8 fb4a 	bl	8000598 <__aeabi_f2d>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f7f8 f9e6 	bl	80002dc <__adddf3>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4610      	mov	r0, r2
 8007f16:	4619      	mov	r1, r3
 8007f18:	a3e5      	add	r3, pc, #916	; (adr r3, 80082b0 <CTRL_pol+0xff0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 fb93 	bl	8000648 <__aeabi_dmul>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4614      	mov	r4, r2
 8007f28:	461d      	mov	r5, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7f8 fb33 	bl	8000598 <__aeabi_f2d>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 f9cf 	bl	80002dc <__adddf3>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	a3dc      	add	r3, pc, #880	; (adr r3, 80082b8 <CTRL_pol+0xff8>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fb7c 	bl	8000648 <__aeabi_dmul>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 f9c0 	bl	80002dc <__adddf3>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	a3d6      	add	r3, pc, #856	; (adr r3, 80082c0 <CTRL_pol+0x1000>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 fc97 	bl	800089c <__aeabi_ddiv>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4610      	mov	r0, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	f7f8 fe5f 	bl	8000c38 <__aeabi_d2f>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1.0) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007f7e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007f82:	edd7 7a07 	vldr	s15, [r7, #28]
 8007f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f8a:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80082e8 <CTRL_pol+0x1028>
 8007f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f92:	ee17 0a90 	vmov	r0, s15
 8007f96:	f7f8 faff 	bl	8000598 <__aeabi_f2d>
 8007f9a:	a3c1      	add	r3, pc, #772	; (adr r3, 80082a0 <CTRL_pol+0xfe0>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 f99c 	bl	80002dc <__adddf3>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	a3be      	add	r3, pc, #760	; (adr r3, 80082a8 <CTRL_pol+0xfe8>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 fb49 	bl	8000648 <__aeabi_dmul>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4690      	mov	r8, r2
 8007fbc:	4699      	mov	r9, r3
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f8 fae9 	bl	8000598 <__aeabi_f2d>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7f8 fae3 	bl	8000598 <__aeabi_f2d>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	f7f8 f97d 	bl	80002d8 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	461d      	mov	r5, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7f8 fad5 	bl	8000598 <__aeabi_f2d>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 f971 	bl	80002dc <__adddf3>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	a3ab      	add	r3, pc, #684	; (adr r3, 80082b0 <CTRL_pol+0xff0>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 fb1e 	bl	8000648 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	f7f8 fabe 	bl	8000598 <__aeabi_f2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	f7f8 f95a 	bl	80002dc <__adddf3>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4610      	mov	r0, r2
 800802e:	4619      	mov	r1, r3
 8008030:	a3a1      	add	r3, pc, #644	; (adr r3, 80082b8 <CTRL_pol+0xff8>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fb07 	bl	8000648 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	f7f8 f949 	bl	80002d8 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	a39c      	add	r3, pc, #624	; (adr r3, 80082c0 <CTRL_pol+0x1000>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 fc22 	bl	800089c <__aeabi_ddiv>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4610      	mov	r0, r2
 800805e:	4619      	mov	r1, r3
 8008060:	f7f8 fdea 	bl	8000c38 <__aeabi_d2f>
 8008064:	4603      	mov	r3, r0
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR-0.0255/1000.0)/Torque_constant;
 8008068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800806a:	f7f8 fa95 	bl	8000598 <__aeabi_f2d>
 800806e:	a396      	add	r3, pc, #600	; (adr r3, 80082c8 <CTRL_pol+0x1008>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f930 	bl	80002d8 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4610      	mov	r0, r2
 800807e:	4619      	mov	r1, r3
 8008080:	a393      	add	r3, pc, #588	; (adr r3, 80082d0 <CTRL_pol+0x1010>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fc09 	bl	800089c <__aeabi_ddiv>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4610      	mov	r0, r2
 8008090:	4619      	mov	r1, r3
 8008092:	f7f8 fdd1 	bl	8000c38 <__aeabi_d2f>
 8008096:	4603      	mov	r3, r0
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL+0.0255/1000.0)/Torque_constant;
 800809a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809c:	f7f8 fa7c 	bl	8000598 <__aeabi_f2d>
 80080a0:	a389      	add	r3, pc, #548	; (adr r3, 80082c8 <CTRL_pol+0x1008>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	f7f8 f919 	bl	80002dc <__adddf3>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4610      	mov	r0, r2
 80080b0:	4619      	mov	r1, r3
 80080b2:	a387      	add	r3, pc, #540	; (adr r3, 80082d0 <CTRL_pol+0x1010>)
 80080b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b8:	f7f8 fbf0 	bl	800089c <__aeabi_ddiv>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4610      	mov	r0, r2
 80080c2:	4619      	mov	r1, r3
 80080c4:	f7f8 fdb8 	bl	8000c38 <__aeabi_d2f>
 80080c8:	4603      	mov	r3, r0
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
		}
	}
	f_duty10_R = FF_BALANCE_R*(Motor_Register*Ir+f_MotorR_AngleS*0.062/1000.0/60.0)/get_battLv();	
 80080cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80080d0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80082ec <CTRL_pol+0x102c>
 80080d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080d8:	ee17 0a90 	vmov	r0, s15
 80080dc:	f7f8 fa5c 	bl	8000598 <__aeabi_f2d>
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <CTRL_pol+0x1030>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7f8 fa55 	bl	8000598 <__aeabi_f2d>
 80080ee:	a37a      	add	r3, pc, #488	; (adr r3, 80082d8 <CTRL_pol+0x1018>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 faa8 	bl	8000648 <__aeabi_dmul>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4610      	mov	r0, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	4b7b      	ldr	r3, [pc, #492]	; (80082f4 <CTRL_pol+0x1034>)
 8008106:	f7f8 fbc9 	bl	800089c <__aeabi_ddiv>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4610      	mov	r0, r2
 8008110:	4619      	mov	r1, r3
 8008112:	f04f 0200 	mov.w	r2, #0
 8008116:	4b78      	ldr	r3, [pc, #480]	; (80082f8 <CTRL_pol+0x1038>)
 8008118:	f7f8 fbc0 	bl	800089c <__aeabi_ddiv>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4620      	mov	r0, r4
 8008122:	4629      	mov	r1, r5
 8008124:	f7f8 f8da 	bl	80002dc <__adddf3>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4614      	mov	r4, r2
 800812e:	461d      	mov	r5, r3
 8008130:	f005 fb06 	bl	800d740 <get_battLv>
 8008134:	ee10 3a10 	vmov	r3, s0
 8008138:	4618      	mov	r0, r3
 800813a:	f7f8 fa2d 	bl	8000598 <__aeabi_f2d>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 fba9 	bl	800089c <__aeabi_ddiv>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4610      	mov	r0, r2
 8008150:	4619      	mov	r1, r3
 8008152:	f7f8 fd71 	bl	8000c38 <__aeabi_d2f>
 8008156:	4603      	mov	r3, r0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
	f_duty10_L = FF_BALANCE_L*(Motor_Register*Il+f_MotorL_AngleS*0.062/1000.0/60.0)/get_battLv();	
 800815a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800815e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80082ec <CTRL_pol+0x102c>
 8008162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008166:	ee17 0a90 	vmov	r0, s15
 800816a:	f7f8 fa15 	bl	8000598 <__aeabi_f2d>
 800816e:	4604      	mov	r4, r0
 8008170:	460d      	mov	r5, r1
 8008172:	4b62      	ldr	r3, [pc, #392]	; (80082fc <CTRL_pol+0x103c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7f8 fa0e 	bl	8000598 <__aeabi_f2d>
 800817c:	a356      	add	r3, pc, #344	; (adr r3, 80082d8 <CTRL_pol+0x1018>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 fa61 	bl	8000648 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	4b58      	ldr	r3, [pc, #352]	; (80082f4 <CTRL_pol+0x1034>)
 8008194:	f7f8 fb82 	bl	800089c <__aeabi_ddiv>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4610      	mov	r0, r2
 800819e:	4619      	mov	r1, r3
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	4b54      	ldr	r3, [pc, #336]	; (80082f8 <CTRL_pol+0x1038>)
 80081a6:	f7f8 fb79 	bl	800089c <__aeabi_ddiv>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 f893 	bl	80002dc <__adddf3>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4614      	mov	r4, r2
 80081bc:	461d      	mov	r5, r3
 80081be:	f005 fabf 	bl	800d740 <get_battLv>
 80081c2:	ee10 3a10 	vmov	r3, s0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f9e6 	bl	8000598 <__aeabi_f2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4620      	mov	r0, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 fb62 	bl	800089c <__aeabi_ddiv>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4610      	mov	r0, r2
 80081de:	4619      	mov	r1, r3
 80081e0:	f7f8 fd2a 	bl	8000c38 <__aeabi_d2f>
 80081e4:	4603      	mov	r3, r0
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38

	if(f_duty10_R>1){
 80081e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80081ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f8:	dd02      	ble.n	8008200 <CTRL_pol+0xf40>
		f_duty10_R = 1.0;
 80081fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if(f_duty10_L>1){
 8008200:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800820c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008210:	dd02      	ble.n	8008218 <CTRL_pol+0xf58>
		f_duty10_L = 1.0;
 8008212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008216:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	templog1 = f_AngleSErrSum;//TR;//f_floorfriction;//f_duty10_R;
 8008218:	4b39      	ldr	r3, [pc, #228]	; (8008300 <CTRL_pol+0x1040>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a39      	ldr	r2, [pc, #228]	; (8008304 <CTRL_pol+0x1044>)
 800821e:	6013      	str	r3, [r2, #0]
	templog2 = f_angleSpeedCtrl;//TL;//f_duty10_L;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	4a39      	ldr	r2, [pc, #228]	; (8008308 <CTRL_pol+0x1048>)
 8008224:	6013      	str	r3, [r2, #0]
//	templog1 = DIST_getNowVal(DIST_SEN_L_SIDE);
//	templog2 = DIST_getNowVal(DIST_SEN_R_SIDE);

	escape_wait = escape_wait+0.001;
 8008226:	4b39      	ldr	r3, [pc, #228]	; (800830c <CTRL_pol+0x104c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 f9b4 	bl	8000598 <__aeabi_f2d>
 8008230:	a32b      	add	r3, pc, #172	; (adr r3, 80082e0 <CTRL_pol+0x1020>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f8 f851 	bl	80002dc <__adddf3>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	f7f8 fcf9 	bl	8000c38 <__aeabi_d2f>
 8008246:	4603      	mov	r3, r0
 8008248:	4a30      	ldr	r2, [pc, #192]	; (800830c <CTRL_pol+0x104c>)
 800824a:	6013      	str	r3, [r2, #0]
	CTRL_outMot( f_duty10_R, f_duty10_L );				// モータへ出力
 800824c:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8008250:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8008254:	f7fe ff8a 	bl	800716c <CTRL_outMot>

	f_Time += 0.001;
 8008258:	4b2d      	ldr	r3, [pc, #180]	; (8008310 <CTRL_pol+0x1050>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f7f8 f99b 	bl	8000598 <__aeabi_f2d>
 8008262:	a31f      	add	r3, pc, #124	; (adr r3, 80082e0 <CTRL_pol+0x1020>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f8 f838 	bl	80002dc <__adddf3>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4610      	mov	r0, r2
 8008272:	4619      	mov	r1, r3
 8008274:	f7f8 fce0 	bl	8000c38 <__aeabi_d2f>
 8008278:	4603      	mov	r3, r0
 800827a:	4a25      	ldr	r2, [pc, #148]	; (8008310 <CTRL_pol+0x1050>)
 800827c:	6013      	str	r3, [r2, #0]

	/* 壁切れチェック */
	if( MOT_getWallEdgeType() == MOT_WALL_EDGE_RIGHT ){
 800827e:	f005 f8f3 	bl	800d468 <MOT_getWallEdgeType>
 8008282:	4603      	mov	r3, r0
 8008284:	2b01      	cmp	r3, #1
 8008286:	d14c      	bne.n	8008322 <CTRL_pol+0x1062>

		/* 壁抜け */
		if( DIST_isWall_R_SIDE() == FALSE ){
 8008288:	f005 fdfc 	bl	800de84 <DIST_isWall_R_SIDE>
 800828c:	4603      	mov	r3, r0
 800828e:	f083 0301 	eor.w	r3, r3, #1
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d059      	beq.n	800834c <CTRL_pol+0x108c>
 8008298:	e03c      	b.n	8008314 <CTRL_pol+0x1054>
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w
 80082a0:	47ae147b 	.word	0x47ae147b
 80082a4:	3f847ae1 	.word	0x3f847ae1
 80082a8:	a0000000 	.word	0xa0000000
 80082ac:	3f699999 	.word	0x3f699999
 80082b0:	60000000 	.word	0x60000000
 80082b4:	3ed34b36 	.word	0x3ed34b36
 80082b8:	090e2dab 	.word	0x090e2dab
 80082bc:	3fc4b9b3 	.word	0x3fc4b9b3
 80082c0:	c0000000 	.word	0xc0000000
 80082c4:	400ccccc 	.word	0x400ccccc
 80082c8:	a821f299 	.word	0xa821f299
 80082cc:	3efabd1a 	.word	0x3efabd1a
 80082d0:	40000000 	.word	0x40000000
 80082d4:	3f4376d5 	.word	0x3f4376d5
 80082d8:	c8b43958 	.word	0xc8b43958
 80082dc:	3fafbe76 	.word	0x3fafbe76
 80082e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80082e4:	3f50624d 	.word	0x3f50624d
 80082e8:	3c9374bc 	.word	0x3c9374bc
 80082ec:	4099999a 	.word	0x4099999a
 80082f0:	20000240 	.word	0x20000240
 80082f4:	408f4000 	.word	0x408f4000
 80082f8:	404e0000 	.word	0x404e0000
 80082fc:	20000244 	.word	0x20000244
 8008300:	20000278 	.word	0x20000278
 8008304:	20000c6c 	.word	0x20000c6c
 8008308:	20000834 	.word	0x20000834
 800830c:	20000c54 	.word	0x20000c54
 8008310:	20000220 	.word	0x20000220
			SetLED(0x10);
 8008314:	2010      	movs	r0, #16
 8008316:	f7f9 fe57 	bl	8001fc8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 800831a:	2001      	movs	r0, #1
 800831c:	f005 f8b0 	bl	800d480 <MOT_setWallEdge>
 8008320:	e014      	b.n	800834c <CTRL_pol+0x108c>
		}
	}
	else if( MOT_getWallEdgeType() == MOT_WALL_EDGE_LEFT ){
 8008322:	f005 f8a1 	bl	800d468 <MOT_getWallEdgeType>
 8008326:	4603      	mov	r3, r0
 8008328:	2b02      	cmp	r3, #2
 800832a:	d10f      	bne.n	800834c <CTRL_pol+0x108c>

		/* 壁抜け */
		if( DIST_isWall_L_SIDE() == FALSE ){
 800832c:	f005 fdc0 	bl	800deb0 <DIST_isWall_L_SIDE>
 8008330:	4603      	mov	r3, r0
 8008332:	f083 0301 	eor.w	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <CTRL_pol+0x108c>
			SetLED(0x01);
 800833c:	2001      	movs	r0, #1
 800833e:	f7f9 fe43 	bl	8001fc8 <SetLED>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8008342:	2001      	movs	r0, #1
 8008344:	f005 f89c 	bl	800d480 <MOT_setWallEdge>
 8008348:	e000      	b.n	800834c <CTRL_pol+0x108c>
		 return;		// 制御無効状態
 800834a:	bf00      	nop
		}
	}
}
 800834c:	3740      	adds	r7, #64	; 0x40
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008354 <Failsafe_flag>:

void Failsafe_flag(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
	bl_failsafe = TRUE;
 8008358:	4b03      	ldr	r3, [pc, #12]	; (8008368 <Failsafe_flag+0x14>)
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
	SetLED(0x1F);
 800835e:	201f      	movs	r0, #31
 8008360:	f7f9 fe32 	bl	8001fc8 <SetLED>
}
 8008364:	bf00      	nop
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200002a8 	.word	0x200002a8

0800836c <Failsafe_flag_off>:

void Failsafe_flag_off(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
	bl_failsafe = FALSE;
 8008370:	4b03      	ldr	r3, [pc, #12]	; (8008380 <Failsafe_flag_off+0x14>)
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	200002a8 	.word	0x200002a8

08008384 <SYS_isOutOfCtrl>:

bool SYS_isOutOfCtrl( void )
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
	return bl_failsafe;
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <SYS_isOutOfCtrl+0x14>)
 800838a:	781b      	ldrb	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	200002a8 	.word	0x200002a8

0800839c <DCM_setDirCw>:
 */

#include "hal/DCM.h"

void DCM_setDirCw( enDCM_ID en_id )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <DCM_setDirCw+0x18>
		Set_MOT0(1);	//tmp
 80083ac:	2001      	movs	r0, #1
 80083ae:	f7f9 fef7 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(0);	//tmp

	}
}
 80083b2:	e002      	b.n	80083ba <DCM_setDirCw+0x1e>
		Set_MOT1(0);	//tmp
 80083b4:	2000      	movs	r0, #0
 80083b6:	f7f9 ff0d 	bl	80021d4 <Set_MOT1>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <DCM_setDirCcw>:

void DCM_setDirCcw( enDCM_ID en_id )
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	4603      	mov	r3, r0
 80083ca:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <DCM_setDirCcw+0x18>
		Set_MOT0(0);	//tmp
 80083d2:	2000      	movs	r0, #0
 80083d4:	f7f9 fee4 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(1);	//tmp
	}
}
 80083d8:	e002      	b.n	80083e0 <DCM_setDirCcw+0x1e>
		Set_MOT1(1);	//tmp
 80083da:	2001      	movs	r0, #1
 80083dc:	f7f9 fefa 	bl	80021d4 <Set_MOT1>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <DCM_brakeMot>:

void DCM_brakeMot( enDCM_ID en_id )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
	/* 停止設定 */
	if( en_id == DCM_R ){			// 右
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <DCM_brakeMot+0x18>
		Set_DutyTIM2(0);
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7fc fd3d 	bl	8004e78 <Set_DutyTIM2>
	}
	else{							// 左
		Set_DutyTIM3(0);
	}
}
 80083fe:	e002      	b.n	8008406 <DCM_brakeMot+0x1e>
		Set_DutyTIM3(0);
 8008400:	2000      	movs	r0, #0
 8008402:	f7fc fd79 	bl	8004ef8 <Set_DutyTIM3>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <DCM_staMot>:

void DCM_staMot( enDCM_ID en_id )
{	
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	4603      	mov	r3, r0
 8008416:	71fb      	strb	r3, [r7, #7]
	/* タイマスタート */
	if( en_id == DCM_R ){			// 右
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <DCM_staMot+0x16>
		Enable_TIM2();
 800841e:	f7fc fd17 	bl	8004e50 <Enable_TIM2>
	}
	else{							// 左
	   Enable_TIM3();
	}
}
 8008422:	e001      	b.n	8008428 <DCM_staMot+0x1a>
	   Enable_TIM3();
 8008424:	f7fc fd1c 	bl	8004e60 <Enable_TIM3>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <DCM_staMotAll>:

void DCM_staMotAll( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
	DCM_staMot(DCM_R);									// 右モータON
 8008434:	2000      	movs	r0, #0
 8008436:	f7ff ffea 	bl	800840e <DCM_staMot>
	DCM_staMot(DCM_L);									// 左モータON
 800843a:	2001      	movs	r0, #1
 800843c:	f7ff ffe7 	bl	800840e <DCM_staMot>
}
 8008440:	bf00      	nop
 8008442:	bd80      	pop	{r7, pc}

08008444 <DCM_setPwmDuty>:

void DCM_setPwmDuty( enDCM_ID en_id, uint16_t us_duty10 )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	460a      	mov	r2, r1
 800844e:	71fb      	strb	r3, [r7, #7]
 8008450:	4613      	mov	r3, r2
 8008452:	80bb      	strh	r3, [r7, #4]
	/* PWM設定 */
	if( en_id == DCM_R ){				// 右
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d110      	bne.n	800847c <DCM_setPwmDuty+0x38>

		if( 0 == us_duty10 ){			// Duty0%設定
 800845a:	88bb      	ldrh	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <DCM_setPwmDuty+0x26>
			DCM_brakeMot( en_id );
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff ffc0 	bl	80083e8 <DCM_brakeMot>
		else{
			Set_DutyTIM3(us_duty10);
			DCM_staMot( en_id );		// 回転開始
		}
	}
}
 8008468:	e018      	b.n	800849c <DCM_setPwmDuty+0x58>
			Set_DutyTIM2(us_duty10);
 800846a:	88bb      	ldrh	r3, [r7, #4]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fc fd03 	bl	8004e78 <Set_DutyTIM2>
			DCM_staMot( en_id );		// 回転開始
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff ffca 	bl	800840e <DCM_staMot>
}
 800847a:	e00f      	b.n	800849c <DCM_setPwmDuty+0x58>
		if( 0 == us_duty10 ){			// Duty0%
 800847c:	88bb      	ldrh	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <DCM_setPwmDuty+0x48>
			DCM_brakeMot( en_id );
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ffaf 	bl	80083e8 <DCM_brakeMot>
}
 800848a:	e007      	b.n	800849c <DCM_setPwmDuty+0x58>
			Set_DutyTIM3(us_duty10);
 800848c:	88bb      	ldrh	r3, [r7, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fc fd32 	bl	8004ef8 <Set_DutyTIM3>
			DCM_staMot( en_id );		// 回転開始
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff ffb9 	bl	800840e <DCM_staMot>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <Get_encoder_value>:
uint16_t ENC_R_CNT;
uint16_t ENC_L_CNT_old;
uint16_t ENC_R_CNT_old;

uint16_t Get_encoder_value(en_endir dir)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) return ENC_L_CNT;
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <Get_encoder_value+0x16>
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <Get_encoder_value+0x28>)
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	e001      	b.n	80084be <Get_encoder_value+0x1a>
	else return ENC_R_CNT;
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <Get_encoder_value+0x2c>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20001524 	.word	0x20001524
 80084d0:	20001528 	.word	0x20001528

080084d4 <MA702_ReadByte>:

void MA702_ReadByte(en_endir dir)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	71fb      	strb	r3, [r7, #7]
	encoderdir = dir;
 80084de:	4a0a      	ldr	r2, [pc, #40]	; (8008508 <MA702_ReadByte+0x34>)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	7013      	strb	r3, [r2, #0]
	SetSPI2TransmitData(0,0x00);
 80084e4:	2100      	movs	r1, #0
 80084e6:	2000      	movs	r0, #0
 80084e8:	f7fb fcd2 	bl	8003e90 <SetSPI2TransmitData>
	SetSPI2TransmitData(1,0x00);
 80084ec:	2100      	movs	r1, #0
 80084ee:	2001      	movs	r0, #1
 80084f0:	f7fb fcce 	bl	8003e90 <SetSPI2TransmitData>

	SPI2_DMA_Communication(2,encoderdir);
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <MA702_ReadByte+0x34>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	4619      	mov	r1, r3
 80084fa:	2002      	movs	r0, #2
 80084fc:	f7fb fc30 	bl	8003d60 <SPI2_DMA_Communication>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000c66 	.word	0x20000c66

0800850c <recv_spi_encoder>:

void recv_spi_encoder(en_endir dir)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
	MA702_ReadByte(dir);
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ffdb 	bl	80084d4 <MA702_ReadByte>
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <Set_encoder_data>:

void Set_encoder_data(en_endir dir)
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) ENC_L_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d112      	bne.n	800855e <Set_encoder_data+0x36>
 8008538:	2000      	movs	r0, #0
 800853a:	f7fb fc99 	bl	8003e70 <Get_SPI2ReciveData>
 800853e:	4603      	mov	r3, r0
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	b21c      	sxth	r4, r3
 8008544:	2001      	movs	r0, #1
 8008546:	f7fb fc93 	bl	8003e70 <Get_SPI2ReciveData>
 800854a:	4603      	mov	r3, r0
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	b2db      	uxtb	r3, r3
 8008550:	b21b      	sxth	r3, r3
 8008552:	4323      	orrs	r3, r4
 8008554:	b21b      	sxth	r3, r3
 8008556:	b29a      	uxth	r2, r3
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <Set_encoder_data+0x64>)
 800855a:	801a      	strh	r2, [r3, #0]
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
}
 800855c:	e011      	b.n	8008582 <Set_encoder_data+0x5a>
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 800855e:	2000      	movs	r0, #0
 8008560:	f7fb fc86 	bl	8003e70 <Get_SPI2ReciveData>
 8008564:	4603      	mov	r3, r0
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	b21c      	sxth	r4, r3
 800856a:	2001      	movs	r0, #1
 800856c:	f7fb fc80 	bl	8003e70 <Get_SPI2ReciveData>
 8008570:	4603      	mov	r3, r0
 8008572:	091b      	lsrs	r3, r3, #4
 8008574:	b2db      	uxtb	r3, r3
 8008576:	b21b      	sxth	r3, r3
 8008578:	4323      	orrs	r3, r4
 800857a:	b21b      	sxth	r3, r3
 800857c:	b29a      	uxth	r2, r3
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <Set_encoder_data+0x68>)
 8008580:	801a      	strh	r2, [r3, #0]
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bd90      	pop	{r4, r7, pc}
 800858a:	bf00      	nop
 800858c:	20001524 	.word	0x20001524
 8008590:	20001528 	.word	0x20001528

08008594 <Runmode_check>:


uint8_t Runmode_check( enDCM_ID en_id )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	71fb      	strb	r3, [r7, #7]
	if(en_id == DCM_R){
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d117      	bne.n	80085d4 <Runmode_check+0x40>
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Right)) ){
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <Runmode_check+0x7c>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b06      	cmp	r3, #6
 80085aa:	d00f      	beq.n	80085cc <Runmode_check+0x38>
 80085ac:	4b18      	ldr	r3, [pc, #96]	; (8008610 <Runmode_check+0x7c>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d007      	beq.n	80085c4 <Runmode_check+0x30>
 80085b4:	4b16      	ldr	r3, [pc, #88]	; (8008610 <Runmode_check+0x7c>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d003      	beq.n	80085c4 <Runmode_check+0x30>
 80085bc:	4b14      	ldr	r3, [pc, #80]	; (8008610 <Runmode_check+0x7c>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d105      	bne.n	80085d0 <Runmode_check+0x3c>
 80085c4:	4b13      	ldr	r3, [pc, #76]	; (8008614 <Runmode_check+0x80>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <Runmode_check+0x3c>
			return(0);
 80085cc:	2300      	movs	r3, #0
 80085ce:	e018      	b.n	8008602 <Runmode_check+0x6e>
		}
		else{
			return(1);
 80085d0:	2301      	movs	r3, #1
 80085d2:	e016      	b.n	8008602 <Runmode_check+0x6e>
		}
	}
	else{
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Left)) ){
 80085d4:	4b0e      	ldr	r3, [pc, #56]	; (8008610 <Runmode_check+0x7c>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b06      	cmp	r3, #6
 80085da:	d00f      	beq.n	80085fc <Runmode_check+0x68>
 80085dc:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <Runmode_check+0x7c>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b07      	cmp	r3, #7
 80085e2:	d007      	beq.n	80085f4 <Runmode_check+0x60>
 80085e4:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <Runmode_check+0x7c>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d003      	beq.n	80085f4 <Runmode_check+0x60>
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <Runmode_check+0x7c>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b09      	cmp	r3, #9
 80085f2:	d105      	bne.n	8008600 <Runmode_check+0x6c>
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <Runmode_check+0x80>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <Runmode_check+0x6c>
			return(0);
 80085fc:	2300      	movs	r3, #0
 80085fe:	e000      	b.n	8008602 <Runmode_check+0x6e>
		}
		else{
			return(1);
 8008600:	2301      	movs	r3, #1
		}
	}
}
 8008602:	4618      	mov	r0, r3
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	2000083a 	.word	0x2000083a
 8008614:	2000084c 	.word	0x2000084c

08008618 <ENC_GetDiv>:

void ENC_GetDiv( int32_t* p_r, int32_t* p_l )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
	int32_t cntR;
	int32_t cntL;
	int32_t cntR_dif;
	int32_t cntL_dif;
//	recv_spi_encoder();
	cntR_dif = ENC_R_CNT - ENC_R_CNT_old;
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <ENC_GetDiv+0x108>)
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <ENC_GetDiv+0x10c>)
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	60fb      	str	r3, [r7, #12]
	cntL_dif = ENC_L_CNT_old - ENC_L_CNT;
 8008630:	4b3d      	ldr	r3, [pc, #244]	; (8008728 <ENC_GetDiv+0x110>)
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	4b3d      	ldr	r3, [pc, #244]	; (800872c <ENC_GetDiv+0x114>)
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	60bb      	str	r3, [r7, #8]

	//モードを使って正逆をチェックして加算方法を決める
	if(Runmode_check(DCM_R) == 1){	//正方向カウント
 800863e:	2000      	movs	r0, #0
 8008640:	f7ff ffa8 	bl	8008594 <Runmode_check>
 8008644:	4603      	mov	r3, r0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d114      	bne.n	8008674 <ENC_GetDiv+0x5c>
		//右
		if(cntR_dif<(-32768>>4)){
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8008650:	da04      	bge.n	800865c <ENC_GetDiv+0x44>
			cntR = cntR_dif + (65536>>4);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e01f      	b.n	800869c <ENC_GetDiv+0x84>
		}
		else if (cntR_dif>(32768>>4)){
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008662:	dd04      	ble.n	800866e <ENC_GetDiv+0x56>
			cntR = cntR_dif - (65536>>4);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e016      	b.n	800869c <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e013      	b.n	800869c <ENC_GetDiv+0x84>
		}
	}
	else{
		if(cntR_dif>(32768>>4)){
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800867a:	dd04      	ble.n	8008686 <ENC_GetDiv+0x6e>
			cntR = cntR_dif - (65536>>4);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e00a      	b.n	800869c <ENC_GetDiv+0x84>
		}
		else if(cntR_dif<(-32768>>4)){
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 800868c:	da04      	bge.n	8008698 <ENC_GetDiv+0x80>
			cntR = cntR_dif + (65536>>4);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e001      	b.n	800869c <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	617b      	str	r3, [r7, #20]
		}
	}

	if(Runmode_check(DCM_L) == 1){
 800869c:	2001      	movs	r0, #1
 800869e:	f7ff ff79 	bl	8008594 <Runmode_check>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d114      	bne.n	80086d2 <ENC_GetDiv+0xba>
		//左
		if(cntL_dif<(-32768>>4)){
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80086ae:	da04      	bge.n	80086ba <ENC_GetDiv+0xa2>
			cntL = cntL_dif + (65536>>4);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b6:	613b      	str	r3, [r7, #16]
 80086b8:	e01f      	b.n	80086fa <ENC_GetDiv+0xe2>
		}
		else if (cntL_dif >(32768>>4)){
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c0:	dd04      	ble.n	80086cc <ENC_GetDiv+0xb4>
			cntL = cntL_dif -(65536>>4);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	e016      	b.n	80086fa <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	e013      	b.n	80086fa <ENC_GetDiv+0xe2>
		}
	}
	else{
		if(cntL_dif>(32768>>4)){
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d8:	dd04      	ble.n	80086e4 <ENC_GetDiv+0xcc>
			cntL = cntL_dif - (65536>>4);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	e00a      	b.n	80086fa <ENC_GetDiv+0xe2>
		}
		else if(cntL_dif<(-32768>>4)){
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80086ea:	da04      	bge.n	80086f6 <ENC_GetDiv+0xde>
			cntL = cntL_dif + (65536>>4);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	e001      	b.n	80086fa <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	613b      	str	r3, [r7, #16]
		}
	}

	*p_r = cntR;		//2^12(4096) LSB/1回転
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	601a      	str	r2, [r3, #0]
	*p_l = cntL;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	601a      	str	r2, [r3, #0]

	ENC_R_CNT_old = ENC_R_CNT;
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <ENC_GetDiv+0x108>)
 8008708:	881a      	ldrh	r2, [r3, #0]
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <ENC_GetDiv+0x10c>)
 800870c:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <ENC_GetDiv+0x114>)
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <ENC_GetDiv+0x110>)
 8008714:	801a      	strh	r2, [r3, #0]
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001528 	.word	0x20001528
 8008724:	2000152a 	.word	0x2000152a
 8008728:	20001526 	.word	0x20001526
 800872c:	20001524 	.word	0x20001524

08008730 <ENC_setref>:

void ENC_setref(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
	ENC_R_CNT_old = ENC_R_CNT;
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <ENC_setref+0x20>)
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	4b06      	ldr	r3, [pc, #24]	; (8008754 <ENC_setref+0x24>)
 800873a:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <ENC_setref+0x28>)
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <ENC_setref+0x2c>)
 8008742:	801a      	strh	r2, [r3, #0]
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20001528 	.word	0x20001528
 8008754:	2000152a 	.word	0x2000152a
 8008758:	20001524 	.word	0x20001524
 800875c:	20001526 	.word	0x20001526

08008760 <ICM_42688_whoami>:
uint16_t Get_s_gyro(void)
{
	return s_GyroVal;
}
void ICM_42688_whoami(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
	SetSPI1TransmitData(0,(0x75 | 0x80));
 8008764:	21f5      	movs	r1, #245	; 0xf5
 8008766:	2000      	movs	r0, #0
 8008768:	f7fb face 	bl	8003d08 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, 0x00);
 800876c:	2100      	movs	r1, #0
 800876e:	2001      	movs	r0, #1
 8008770:	f7fb faca 	bl	8003d08 <SetSPI1TransmitData>
	SPI1_DMA_Communication(2);
 8008774:	2002      	movs	r0, #2
 8008776:	f7fb fa47 	bl	8003c08 <SPI1_DMA_Communication>
	printf("who am i = %x\r\n",Get_SPI1ReciveData(1));
 800877a:	2001      	movs	r0, #1
 800877c:	f7fb fab4 	bl	8003ce8 <Get_SPI1ReciveData>
 8008780:	4603      	mov	r3, r0
 8008782:	4619      	mov	r1, r3
 8008784:	4802      	ldr	r0, [pc, #8]	; (8008790 <ICM_42688_whoami+0x30>)
 8008786:	f00e fd77 	bl	8017278 <iprintf>

}
 800878a:	bf00      	nop
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	0801c308 	.word	0x0801c308

08008794 <ICM_42688_WriteByte>:

void ICM_42688_WriteByte(uint8_t reg,uint8_t data)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	460a      	mov	r2, r1
 800879e:	71fb      	strb	r3, [r7, #7]
 80087a0:	4613      	mov	r3, r2
 80087a2:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0, reg);
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	4619      	mov	r1, r3
 80087a8:	2000      	movs	r0, #0
 80087aa:	f7fb faad 	bl	8003d08 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, data);
 80087ae:	79bb      	ldrb	r3, [r7, #6]
 80087b0:	4619      	mov	r1, r3
 80087b2:	2001      	movs	r0, #1
 80087b4:	f7fb faa8 	bl	8003d08 <SetSPI1TransmitData>

	SPI1_DMA_Communication(2);
 80087b8:	2002      	movs	r0, #2
 80087ba:	f7fb fa25 	bl	8003c08 <SPI1_DMA_Communication>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <ICM_42688_ReadByte>:

void ICM_42688_ReadByte(uint8_t reg,uint8_t length)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	4603      	mov	r3, r0
 80087ce:	460a      	mov	r2, r1
 80087d0:	71fb      	strb	r3, [r7, #7]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0,(reg | 0x80));
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	4619      	mov	r1, r3
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7fb fa91 	bl	8003d08 <SetSPI1TransmitData>
	SetSPI1TransmitData(1,0x00);
 80087e6:	2100      	movs	r1, #0
 80087e8:	2001      	movs	r0, #1
 80087ea:	f7fb fa8d 	bl	8003d08 <SetSPI1TransmitData>
	SetSPI1TransmitData(2,0x00);
 80087ee:	2100      	movs	r1, #0
 80087f0:	2002      	movs	r0, #2
 80087f2:	f7fb fa89 	bl	8003d08 <SetSPI1TransmitData>

	SPI1_DMA_Communication(3);
 80087f6:	2003      	movs	r0, #3
 80087f8:	f7fb fa06 	bl	8003c08 <SPI1_DMA_Communication>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <ICM_42688_init>:


void ICM_42688_init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
	uint8_t reg78 = 0x4E;	//pwr_mgmt0
 800880a:	234e      	movs	r3, #78	; 0x4e
 800880c:	71fb      	strb	r3, [r7, #7]
	uint16_t reg107 = 0x6B;
	uint16_t reg106 = 0x6A;
	uint16_t reg27 = 0x1B;
	uint16_t reg28 = 0x1C;
*/
	ICM_42688_WriteByte(reg78,0x0F);
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	210f      	movs	r1, #15
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff ffbe 	bl	8008794 <ICM_42688_WriteByte>
	LL_mDelay(1);
 8008818:	2001      	movs	r0, #1
 800881a:	f00d fdbd 	bl	8016398 <LL_mDelay>
	ICM_42688_WriteByte(reg27,0x18);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg28,0x18);
	LL_mDelay(1);
*/
}
 800881e:	bf00      	nop
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <ICM_42688_GyroRead_DMA>:

void ICM_42688_GyroRead_DMA(uint8_t reg) //reg 29 2A
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	4603      	mov	r3, r0
 800882e:	71fb      	strb	r3, [r7, #7]
	ICM_42688_ReadByte(reg,3);
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	2103      	movs	r1, #3
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff ffc6 	bl	80087c6 <ICM_42688_ReadByte>
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <ICM_42688_GyroData>:

void ICM_42688_GyroData(void)
{
 8008844:	b598      	push	{r3, r4, r7, lr}
 8008846:	af00      	add	r7, sp, #0
	s_GyroVal=((uint16_t)Get_SPI1ReciveData(1)<<8|Get_SPI1ReciveData(2));
 8008848:	2001      	movs	r0, #1
 800884a:	f7fb fa4d 	bl	8003ce8 <Get_SPI1ReciveData>
 800884e:	4603      	mov	r3, r0
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b21c      	sxth	r4, r3
 8008854:	2002      	movs	r0, #2
 8008856:	f7fb fa47 	bl	8003ce8 <Get_SPI1ReciveData>
 800885a:	4603      	mov	r3, r0
 800885c:	b21b      	sxth	r3, r3
 800885e:	4323      	orrs	r3, r4
 8008860:	b21a      	sxth	r2, r3
 8008862:	4b02      	ldr	r3, [pc, #8]	; (800886c <ICM_42688_GyroData+0x28>)
 8008864:	801a      	strh	r2, [r3, #0]
}
 8008866:	bf00      	nop
 8008868:	bd98      	pop	{r3, r4, r7, pc}
 800886a:	bf00      	nop
 800886c:	2000084e 	.word	0x2000084e

08008870 <GYRO_SetRef>:

void GYRO_SetRef( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
	uint16_t i;
	uint32_t ul_ref = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	603b      	str	r3, [r7, #0]

	/* データサンプリング */
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 800887a:	2300      	movs	r3, #0
 800887c:	80fb      	strh	r3, [r7, #6]
 800887e:	e00c      	b.n	800889a <GYRO_SetRef+0x2a>
		ul_ref += (uint32_t)s_GyroVal;
 8008880:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <GYRO_SetRef+0x50>)
 8008882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008886:	461a      	mov	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	4413      	add	r3, r2
 800888c:	603b      	str	r3, [r7, #0]
		LL_mDelay(1);
 800888e:	2001      	movs	r0, #1
 8008890:	f00d fd82 	bl	8016398 <LL_mDelay>
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	3301      	adds	r3, #1
 8008898:	80fb      	strh	r3, [r7, #6]
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	2bc7      	cmp	r3, #199	; 0xc7
 800889e:	d9ef      	bls.n	8008880 <GYRO_SetRef+0x10>
	}

	/* 基準値算出（平均値） */
	l_GyroRef = (ul_ref * 100) / GYRO_REF_NUM ;		// 精度を100倍にする
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2264      	movs	r2, #100	; 0x64
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	4a06      	ldr	r2, [pc, #24]	; (80088c4 <GYRO_SetRef+0x54>)
 80088aa:	fba2 2303 	umull	r2, r3, r2, r3
 80088ae:	099b      	lsrs	r3, r3, #6
 80088b0:	461a      	mov	r2, r3
 80088b2:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <GYRO_SetRef+0x58>)
 80088b4:	601a      	str	r2, [r3, #0]
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000084e 	.word	0x2000084e
 80088c4:	51eb851f 	.word	0x51eb851f
 80088c8:	20000c68 	.word	0x20000c68
 80088cc:	00000000 	.word	0x00000000

080088d0 <GYRO_getSpeedErr>:

float GYRO_getSpeedErr( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
	int32_t  l_val = (int32_t)s_GyroVal * 100 ;				// 精度を100倍にする
 80088d6:	4b22      	ldr	r3, [pc, #136]	; (8008960 <GYRO_getSpeedErr+0x90>)
 80088d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088dc:	461a      	mov	r2, r3
 80088de:	2364      	movs	r3, #100	; 0x64
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	60fb      	str	r3, [r7, #12]
	int32_t  l_err = l_val - l_GyroRef ;
 80088e6:	4b1f      	ldr	r3, [pc, #124]	; (8008964 <GYRO_getSpeedErr+0x94>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	60bb      	str	r3, [r7, #8]
	float f_res;

	/* 角速度の偏差算出 */
//	if( ( l_err < -0.01 * 100 ) || ( 0.01 * 100 < l_err ) ){
		f_res = (float)l_err /16.4 / 100.0 * DEG_TO_RAD;		
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088fa:	ee17 0a90 	vmov	r0, s15
 80088fe:	f7f7 fe4b 	bl	8000598 <__aeabi_f2d>
 8008902:	a313      	add	r3, pc, #76	; (adr r3, 8008950 <GYRO_getSpeedErr+0x80>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 ffc8 	bl	800089c <__aeabi_ddiv>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	4b13      	ldr	r3, [pc, #76]	; (8008968 <GYRO_getSpeedErr+0x98>)
 800891a:	f7f7 ffbf 	bl	800089c <__aeabi_ddiv>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4610      	mov	r0, r2
 8008924:	4619      	mov	r1, r3
 8008926:	a30c      	add	r3, pc, #48	; (adr r3, 8008958 <GYRO_getSpeedErr+0x88>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fe8c 	bl	8000648 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	f7f8 f97e 	bl	8000c38 <__aeabi_d2f>
 800893c:	4603      	mov	r3, r0
 800893e:	607b      	str	r3, [r7, #4]
//	}
/*	else{
		f_res = 0;									// [deg/s]
	}
*/
	return f_res;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	ee07 3a90 	vmov	s15, r3
}
 8008946:	eeb0 0a67 	vmov.f32	s0, s15
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	66666666 	.word	0x66666666
 8008954:	40306666 	.word	0x40306666
 8008958:	60000000 	.word	0x60000000
 800895c:	3f91df49 	.word	0x3f91df49
 8008960:	2000084e 	.word	0x2000084e
 8008964:	20000c68 	.word	0x20000c68
 8008968:	40590000 	.word	0x40590000

0800896c <GYRO_getNowAngle>:

float GYRO_getNowAngle( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
	return f_GyroNowAngle;
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <GYRO_getNowAngle+0x18>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	ee07 3a90 	vmov	s15, r3
}
 8008978:	eeb0 0a67 	vmov.f32	s0, s15
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000428 	.word	0x20000428

08008988 <GYRO_getRef>:

float GYRO_getRef( void )
{
 8008988:	b480      	push	{r7}
 800898a:	af00      	add	r7, sp, #0
	return l_GyroRef;
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <GYRO_getRef+0x1c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008998:	eeb0 0a67 	vmov.f32	s0, s15
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	20000c68 	.word	0x20000c68

080089a8 <GYRO_Pol>:

void GYRO_Pol( void )
{
 80089a8:	b5b0      	push	{r4, r5, r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
	float f_speed;

	/* 現在の角度を更新する */
	f_speed = GYRO_getSpeedErr();			// 角速度取得 (0.001sec毎の角速度)
 80089ae:	f7ff ff8f 	bl	80088d0 <GYRO_getSpeedErr>
 80089b2:	ed87 0a01 	vstr	s0, [r7, #4]
	f_GyroNowAngle += f_speed / 1000.0;		// 角度設定   (0.001sec毎に加算するため)
 80089b6:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <GYRO_Pol+0x98>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f7 fdec 	bl	8000598 <__aeabi_f2d>
 80089c0:	4604      	mov	r4, r0
 80089c2:	460d      	mov	r5, r1
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7f7 fde7 	bl	8000598 <__aeabi_f2d>
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <GYRO_Pol+0x9c>)
 80089d0:	f7f7 ff64 	bl	800089c <__aeabi_ddiv>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 fc7e 	bl	80002dc <__adddf3>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	f7f8 f926 	bl	8000c38 <__aeabi_d2f>
 80089ec:	4603      	mov	r3, r0
 80089ee:	4a14      	ldr	r2, [pc, #80]	; (8008a40 <GYRO_Pol+0x98>)
 80089f0:	6013      	str	r3, [r2, #0]

	/* エラーチェック */
	if( bl_ErrChk == TRUE ){
 80089f2:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <GYRO_Pol+0xa0>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d01d      	beq.n	8008a36 <GYRO_Pol+0x8e>

		f_ErrChkAngle += f_speed/1000.0;		// 角度設定   (0.001sec毎に加算するため)
 80089fa:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <GYRO_Pol+0xa4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f7 fdca 	bl	8000598 <__aeabi_f2d>
 8008a04:	4604      	mov	r4, r0
 8008a06:	460d      	mov	r5, r1
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7f7 fdc5 	bl	8000598 <__aeabi_f2d>
 8008a0e:	f04f 0200 	mov.w	r2, #0
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <GYRO_Pol+0x9c>)
 8008a14:	f7f7 ff42 	bl	800089c <__aeabi_ddiv>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc5c 	bl	80002dc <__adddf3>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f7f8 f904 	bl	8000c38 <__aeabi_d2f>
 8008a30:	4603      	mov	r3, r0
 8008a32:	4a06      	ldr	r2, [pc, #24]	; (8008a4c <GYRO_Pol+0xa4>)
 8008a34:	6013      	str	r3, [r2, #0]

			Failsafe_flag();
		}
*/
	}
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000428 	.word	0x20000428
 8008a44:	408f4000 	.word	0x408f4000
 8008a48:	2000083b 	.word	0x2000083b
 8008a4c:	20000c58 	.word	0x20000c58

08008a50 <GYRO_staErrChkAngle>:
//	f_NowAccel = Accel_getSpeedErr();			// 加速度取得 (0.001sec毎の加速度)

}

void GYRO_staErrChkAngle( void )
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <GYRO_staErrChkAngle+0x1c>)
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
	bl_ErrChk = TRUE;
 8008a5c:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <GYRO_staErrChkAngle+0x20>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]

}
 8008a62:	bf00      	nop
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	20000c58 	.word	0x20000c58
 8008a70:	2000083b 	.word	0x2000083b

08008a74 <GYRO_endErrChkAngle>:

void GYRO_endErrChkAngle( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8008a78:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <GYRO_endErrChkAngle+0x1c>)
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8008a80:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <GYRO_endErrChkAngle+0x20>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]

}
 8008a86:	bf00      	nop
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	20000c58 	.word	0x20000c58
 8008a94:	2000083b 	.word	0x2000083b

08008a98 <HAL_init>:
#include "hal/init.h"



void HAL_init( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
	TIME_init();
 8008a9c:	f000 f834 	bl	8008b08 <TIME_init>
	/* ジャイロセンサ */
	f_GyroNowAngle = 0;			// ジャイロセンサの現在角度(0にしても探索他は動くが、宴会とかtestrunとかは動かない)修正済みと思われる
 8008aa0:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <HAL_init+0x60>)
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
	l_GyroRef  = 0;				// ジャイロセンサの基準値
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <HAL_init+0x64>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]

	f_ErrChkAngle = 0;
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <HAL_init+0x68>)
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8008ab6:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <HAL_init+0x6c>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
	DIST_init();
 8008abc:	f004 fe8a 	bl	800d7d4 <DIST_init>
	MAP_Goal_init();
 8008ac0:	f008 fe6e 	bl	80117a0 <MAP_Goal_init>
	ADC4_Start();
 8008ac4:	f7f8 fe22 	bl	800170c <ADC4_Start>
  	ADC3_Start();
 8008ac8:	f7f8 fe2c 	bl	8001724 <ADC3_Start>
  	ADC2_Start();
 8008acc:	f7f8 fe36 	bl	800173c <ADC2_Start>
  	ADC1_Start();
 8008ad0:	f7f8 fe40 	bl	8001754 <ADC1_Start>

  	SPI1_Start();
 8008ad4:	f7fb f880 	bl	8003bd8 <SPI1_Start>
  	SPI2_Start();
 8008ad8:	f7fb f92a 	bl	8003d30 <SPI2_Start>
  	ICM_42688_init();
 8008adc:	f7ff fe92 	bl	8008804 <ICM_42688_init>
  	ICM_42688_whoami();
 8008ae0:	f7ff fe3e 	bl	8008760 <ICM_42688_whoami>
	TIMER_init();
 8008ae4:	f7fc f970 	bl	8004dc8 <TIMER_init>
	SYS_start();
 8008ae8:	f000 f9ce 	bl	8008e88 <SYS_start>
	MAP_init();
 8008aec:	f008 fe38 	bl	8011760 <MAP_init>
	GYRO_SetRef();
 8008af0:	f7ff febe 	bl	8008870 <GYRO_SetRef>
}
 8008af4:	bf00      	nop
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000428 	.word	0x20000428
 8008afc:	20000c68 	.word	0x20000c68
 8008b00:	20000c58 	.word	0x20000c58
 8008b04:	2000083b 	.word	0x2000083b

08008b08 <TIME_init>:

void TIME_init( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
	/* 初期化 */
	Msec_in = 0;		// 内部時計[msec]
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <TIME_init+0x20>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	801a      	strh	r2, [r3, #0]
	Sec_in  = 0;		// 内部時計[sec]
 8008b12:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <TIME_init+0x24>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
	Min_in  = 0;		// 内部時計[min]
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <TIME_init+0x28>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	20000c64 	.word	0x20000c64
 8008b2c:	20000838 	.word	0x20000838
 8008b30:	2000042c 	.word	0x2000042c

08008b34 <log_in2>:
			float log5,float log6,
			float log7,float log8,
			float log9,float log10)/*,
			float log11,float log12)
*/
{
 8008b34:	b480      	push	{r7}
 8008b36:	b08b      	sub	sp, #44	; 0x2c
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8008b3e:	edc7 0a08 	vstr	s1, [r7, #32]
 8008b42:	ed87 1a07 	vstr	s2, [r7, #28]
 8008b46:	edc7 1a06 	vstr	s3, [r7, #24]
 8008b4a:	ed87 2a05 	vstr	s4, [r7, #20]
 8008b4e:	edc7 2a04 	vstr	s5, [r7, #16]
 8008b52:	ed87 3a03 	vstr	s6, [r7, #12]
 8008b56:	edc7 3a02 	vstr	s7, [r7, #8]
 8008b5a:	ed87 4a01 	vstr	s8, [r7, #4]
 8008b5e:	edc7 4a00 	vstr	s9, [r7]
	if((b_logflag == TRUE)&&(log_count < log_num)){
 8008b62:	4b2d      	ldr	r3, [pc, #180]	; (8008c18 <log_in2+0xe4>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d050      	beq.n	8008c0c <log_in2+0xd8>
 8008b6a:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <log_in2+0xe8>)
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b72:	d24b      	bcs.n	8008c0c <log_in2+0xd8>
		Log_1[log_count] = log1;
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <log_in2+0xe8>)
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	4a29      	ldr	r2, [pc, #164]	; (8008c20 <log_in2+0xec>)
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b80:	601a      	str	r2, [r3, #0]
		Log_2[log_count] = log2;
 8008b82:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <log_in2+0xe8>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <log_in2+0xf0>)
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	6a3a      	ldr	r2, [r7, #32]
 8008b8e:	601a      	str	r2, [r3, #0]
		Log_3[log_count] = log3;
 8008b90:	4b22      	ldr	r3, [pc, #136]	; (8008c1c <log_in2+0xe8>)
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	4a24      	ldr	r2, [pc, #144]	; (8008c28 <log_in2+0xf4>)
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	601a      	str	r2, [r3, #0]
		Log_4[log_count] = log4;
 8008b9e:	4b1f      	ldr	r3, [pc, #124]	; (8008c1c <log_in2+0xe8>)
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	4a22      	ldr	r2, [pc, #136]	; (8008c2c <log_in2+0xf8>)
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	601a      	str	r2, [r3, #0]
		Log_5[log_count] = log5;
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <log_in2+0xe8>)
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	4a1f      	ldr	r2, [pc, #124]	; (8008c30 <log_in2+0xfc>)
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	601a      	str	r2, [r3, #0]
		Log_6[log_count] = log6;
 8008bba:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <log_in2+0xe8>)
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <log_in2+0x100>)
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	601a      	str	r2, [r3, #0]
		Log_7[log_count] = log7;
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <log_in2+0xe8>)
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	4a1a      	ldr	r2, [pc, #104]	; (8008c38 <log_in2+0x104>)
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]
		Log_8[log_count] = log8;
 8008bd6:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <log_in2+0xe8>)
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <log_in2+0x108>)
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	601a      	str	r2, [r3, #0]
		Log_9[log_count] = log9;
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <log_in2+0xe8>)
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <log_in2+0x10c>)
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	601a      	str	r2, [r3, #0]
		Log_10[log_count] = log10;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <log_in2+0xe8>)
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	4a13      	ldr	r2, [pc, #76]	; (8008c44 <log_in2+0x110>)
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	601a      	str	r2, [r3, #0]
/*		Log_11[log_count] = log11;
		Log_12[log_count] = log12;
*/
		log_count++;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <log_in2+0xe8>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <log_in2+0xe8>)
 8008c0a:	801a      	strh	r2, [r3, #0]
	}
}
 8008c0c:	bf00      	nop
 8008c0e:	372c      	adds	r7, #44	; 0x2c
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	200002ac 	.word	0x200002ac
 8008c1c:	200002aa 	.word	0x200002aa
 8008c20:	2000922c 	.word	0x2000922c
 8008c24:	2000634c 	.word	0x2000634c
 8008c28:	200053ac 	.word	0x200053ac
 8008c2c:	200024cc 	.word	0x200024cc
 8008c30:	200072ec 	.word	0x200072ec
 8008c34:	2000828c 	.word	0x2000828c
 8008c38:	2000440c 	.word	0x2000440c
 8008c3c:	2000a1cc 	.word	0x2000a1cc
 8008c40:	2000152c 	.word	0x2000152c
 8008c44:	2000346c 	.word	0x2000346c

08008c48 <log_interrupt>:

void log_interrupt ( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	ed2d 8b08 	vpush	{d8-d11}
 8008c4e:	af00      	add	r7, sp, #0
//			Get_NowDist(), Get_TrgtDist(),templog2);
/*
	log_in2(DIST_getNowVal( DIST_SEN_R_FRONT ), DIST_getNowVal( DIST_SEN_L_FRONT ),
		DIST_getNowVal( DIST_SEN_R_SIDE ), DIST_getNowVal( DIST_SEN_L_SIDE ));
*/
	log_in2(GYRO_getSpeedErr(), Get_TrgtAngleS(),
 8008c50:	f7ff fe3e 	bl	80088d0 <GYRO_getSpeedErr>
 8008c54:	eeb0 8a40 	vmov.f32	s16, s0
 8008c58:	f7fc fd34 	bl	80056c4 <Get_TrgtAngleS>
 8008c5c:	eef0 8a40 	vmov.f32	s17, s0
 8008c60:	f7fc fd14 	bl	800568c <Get_NowAngle>
 8008c64:	eeb0 9a40 	vmov.f32	s18, s0
 8008c68:	f7fc fd1e 	bl	80056a8 <Get_TrgtAngle>
 8008c6c:	eef0 9a40 	vmov.f32	s19, s0
 8008c70:	f7fc fcc4 	bl	80055fc <Get_NowSpeed>
 8008c74:	eeb0 aa40 	vmov.f32	s20, s0
 8008c78:	f7fc fcea 	bl	8005650 <Get_TrgtSpeed>
 8008c7c:	eef0 aa40 	vmov.f32	s21, s0
 8008c80:	f7fc fcca 	bl	8005618 <Get_NowDist>
 8008c84:	eeb0 ba40 	vmov.f32	s22, s0
 8008c88:	f7fc fcd4 	bl	8005634 <Get_TrgtDist>
 8008c8c:	eef0 6a40 	vmov.f32	s13, s0
 8008c90:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <log_interrupt+0x8c>)
 8008c92:	edd3 7a00 	vldr	s15, [r3]
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <log_interrupt+0x90>)
 8008c98:	ed93 7a00 	vldr	s14, [r3]
 8008c9c:	eef0 4a47 	vmov.f32	s9, s14
 8008ca0:	eeb0 4a67 	vmov.f32	s8, s15
 8008ca4:	eef0 3a66 	vmov.f32	s7, s13
 8008ca8:	eeb0 3a4b 	vmov.f32	s6, s22
 8008cac:	eef0 2a6a 	vmov.f32	s5, s21
 8008cb0:	eeb0 2a4a 	vmov.f32	s4, s20
 8008cb4:	eef0 1a69 	vmov.f32	s3, s19
 8008cb8:	eeb0 1a49 	vmov.f32	s2, s18
 8008cbc:	eef0 0a68 	vmov.f32	s1, s17
 8008cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc4:	f7ff ff36 	bl	8008b34 <log_in2>
			Get_NowAngle(),Get_TrgtAngle(),
			Get_NowSpeed(), Get_TrgtSpeed(),
			Get_NowDist(), Get_TrgtDist(),templog1,templog2);
}
 8008cc8:	bf00      	nop
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	ecbd 8b08 	vpop	{d8-d11}
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000c6c 	.word	0x20000c6c
 8008cd8:	20000834 	.word	0x20000834

08008cdc <log_flag_on>:

void log_flag_on(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
	b_logflag = TRUE;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <log_flag_on+0x14>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	200002ac 	.word	0x200002ac

08008cf4 <log_flag_off>:

void log_flag_off(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
	b_logflag = FALSE;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <log_flag_off+0x14>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
}
 8008cfe:	bf00      	nop
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	200002ac 	.word	0x200002ac

08008d0c <log_read2>:

void log_read2(void)
{
 8008d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d10:	b0a0      	sub	sp, #128	; 0x80
 8008d12:	af12      	add	r7, sp, #72	; 0x48
	int16_t i=0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	86fb      	strh	r3, [r7, #54]	; 0x36
		printf("%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i]);
		i++;
	}
*/
	while(i<log_num){
 8008d18:	e094      	b.n	8008e44 <log_read2+0x138>
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d1a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d1e:	4a4f      	ldr	r2, [pc, #316]	; (8008e5c <log_read2+0x150>)
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f7 fc36 	bl	8000598 <__aeabi_f2d>
 8008d2c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d34:	4a4a      	ldr	r2, [pc, #296]	; (8008e60 <log_read2+0x154>)
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f7 fc2b 	bl	8000598 <__aeabi_f2d>
 8008d42:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d46:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d4a:	4a46      	ldr	r2, [pc, #280]	; (8008e64 <log_read2+0x158>)
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fc20 	bl	8000598 <__aeabi_f2d>
 8008d58:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d5c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d60:	4a41      	ldr	r2, [pc, #260]	; (8008e68 <log_read2+0x15c>)
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7f7 fc15 	bl	8000598 <__aeabi_f2d>
 8008d6e:	e9c7 0104 	strd	r0, r1, [r7, #16]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d76:	4a3d      	ldr	r2, [pc, #244]	; (8008e6c <log_read2+0x160>)
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7f7 fc0a 	bl	8000598 <__aeabi_f2d>
 8008d84:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d8c:	4a38      	ldr	r2, [pc, #224]	; (8008e70 <log_read2+0x164>)
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7f7 fbff 	bl	8000598 <__aeabi_f2d>
 8008d9a:	e9c7 0100 	strd	r0, r1, [r7]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d9e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008da2:	4a34      	ldr	r2, [pc, #208]	; (8008e74 <log_read2+0x168>)
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f7 fbf4 	bl	8000598 <__aeabi_f2d>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008db4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008db8:	4a2f      	ldr	r2, [pc, #188]	; (8008e78 <log_read2+0x16c>)
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7f7 fbe9 	bl	8000598 <__aeabi_f2d>
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	4689      	mov	r9, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008dca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008dce:	4a2b      	ldr	r2, [pc, #172]	; (8008e7c <log_read2+0x170>)
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f7 fbde 	bl	8000598 <__aeabi_f2d>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008de0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008de4:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <log_read2+0x174>)
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f7 fbd3 	bl	8000598 <__aeabi_f2d>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008dfa:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8008dfe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008e02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008e06:	ed97 7b00 	vldr	d7, [r7]
 8008e0a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008e0e:	ed97 7b02 	vldr	d7, [r7, #8]
 8008e12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e16:	ed97 7b04 	vldr	d7, [r7, #16]
 8008e1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e1e:	ed97 7b06 	vldr	d7, [r7, #24]
 8008e22:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e26:	ed97 7b08 	vldr	d7, [r7, #32]
 8008e2a:	ed8d 7b00 	vstr	d7, [sp]
 8008e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e32:	4814      	ldr	r0, [pc, #80]	; (8008e84 <log_read2+0x178>)
 8008e34:	f00e fa20 	bl	8017278 <iprintf>
		i++;
 8008e38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3301      	adds	r3, #1
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(i<log_num){
 8008e44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e4c:	f6ff af65 	blt.w	8008d1a <log_read2+0xe>
	}

}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3738      	adds	r7, #56	; 0x38
 8008e56:	46bd      	mov	sp, r7
 8008e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5c:	2000922c 	.word	0x2000922c
 8008e60:	2000634c 	.word	0x2000634c
 8008e64:	200053ac 	.word	0x200053ac
 8008e68:	200024cc 	.word	0x200024cc
 8008e6c:	200072ec 	.word	0x200072ec
 8008e70:	2000828c 	.word	0x2000828c
 8008e74:	2000440c 	.word	0x2000440c
 8008e78:	2000a1cc 	.word	0x2000a1cc
 8008e7c:	2000152c 	.word	0x2000152c
 8008e80:	2000346c 	.word	0x2000346c
 8008e84:	0801c318 	.word	0x0801c318

08008e88 <SYS_start>:
uint8_t		wall_hit_flag = 0; //0 = not wall_hit

extern uint8_t			SLA_count;

void SYS_start( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
	/* タイトル表示 */
	printf(" ------------------------------\r\n");
 8008e8c:	4827      	ldr	r0, [pc, #156]	; (8008f2c <SYS_start+0xa4>)
 8008e8e:	f00e fa61 	bl	8017354 <puts>
	printf(" | Robo Name  : hankyo2       |\r\n");
 8008e92:	4827      	ldr	r0, [pc, #156]	; (8008f30 <SYS_start+0xa8>)
 8008e94:	f00e fa5e 	bl	8017354 <puts>
	printf(" | Developer  : sho sato      |\r\n");
 8008e98:	4826      	ldr	r0, [pc, #152]	; (8008f34 <SYS_start+0xac>)
 8008e9a:	f00e fa5b 	bl	8017354 <puts>
	printf(" | Version    : ver1          |\r\n");
 8008e9e:	4826      	ldr	r0, [pc, #152]	; (8008f38 <SYS_start+0xb0>)
 8008ea0:	f00e fa58 	bl	8017354 <puts>
	printf(" | Project By : RT Corporation|\r\n");
 8008ea4:	4825      	ldr	r0, [pc, #148]	; (8008f3c <SYS_start+0xb4>)
 8008ea6:	f00e fa55 	bl	8017354 <puts>
	printf(" ------------------------------\r\n");
 8008eaa:	4820      	ldr	r0, [pc, #128]	; (8008f2c <SYS_start+0xa4>)
 8008eac:	f00e fa52 	bl	8017354 <puts>

	printf("\r\n turn N90 \r\r");	
 8008eb0:	4823      	ldr	r0, [pc, #140]	; (8008f40 <SYS_start+0xb8>)
 8008eb2:	f00e f9e1 	bl	8017278 <iprintf>
	PARAM_makeSra( 0.6, 1050.0f, 21.00f, SLA_N90 );	
 8008eb6:	2003      	movs	r0, #3
 8008eb8:	eeb3 1a05 	vmov.f32	s2, #53	; 0x41a80000  21.0
 8008ebc:	eddf 0a21 	vldr	s1, [pc, #132]	; 8008f44 <SYS_start+0xbc>
 8008ec0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8008f48 <SYS_start+0xc0>
 8008ec4:	f7f9 fcdc 	bl	8002880 <PARAM_makeSra>

	printf("\r\n turn 45 \r\r");
 8008ec8:	4820      	ldr	r0, [pc, #128]	; (8008f4c <SYS_start+0xc4>)
 8008eca:	f00e f9d5 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 8008ece:	2001      	movs	r0, #1
 8008ed0:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 8008ed4:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8008f50 <SYS_start+0xc8>
 8008ed8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8008f54 <SYS_start+0xcc>
 8008edc:	f7f9 fcd0 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 8008ee0:	481d      	ldr	r0, [pc, #116]	; (8008f58 <SYS_start+0xd0>)
 8008ee2:	f00e f9c9 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 8008eec:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008f5c <SYS_start+0xd4>
 8008ef0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008f54 <SYS_start+0xcc>
 8008ef4:	f7f9 fcc4 	bl	8002880 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 8008ef8:	4819      	ldr	r0, [pc, #100]	; (8008f60 <SYS_start+0xd8>)
 8008efa:	f00e f9bd 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 8008efe:	2002      	movs	r0, #2
 8008f00:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8008f04:	eddf 0a15 	vldr	s1, [pc, #84]	; 8008f5c <SYS_start+0xd4>
 8008f08:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8008f54 <SYS_start+0xcc>
 8008f0c:	f7f9 fcb8 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 8008f10:	480b      	ldr	r0, [pc, #44]	; (8008f40 <SYS_start+0xb8>)
 8008f12:	f00e f9b1 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );		
 8008f16:	2003      	movs	r0, #3
 8008f18:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8008f1c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8008f64 <SYS_start+0xdc>
 8008f20:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008f54 <SYS_start+0xcc>
 8008f24:	f7f9 fcac 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
	PARAM_makeSra( 0.6, 850.0f, 18.00f, SLA_135 );	
	printf("\r\n turn N90 \r\r");	
	PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
*/
}
 8008f28:	bf00      	nop
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0801c358 	.word	0x0801c358
 8008f30:	0801c37c 	.word	0x0801c37c
 8008f34:	0801c3a0 	.word	0x0801c3a0
 8008f38:	0801c3c4 	.word	0x0801c3c4
 8008f3c:	0801c3e8 	.word	0x0801c3e8
 8008f40:	0801c40c 	.word	0x0801c40c
 8008f44:	44834000 	.word	0x44834000
 8008f48:	3f19999a 	.word	0x3f19999a
 8008f4c:	0801c41c 	.word	0x0801c41c
 8008f50:	42c80000 	.word	0x42c80000
 8008f54:	3e99999a 	.word	0x3e99999a
 8008f58:	0801c42c 	.word	0x0801c42c
 8008f5c:	43480000 	.word	0x43480000
 8008f60:	0801c43c 	.word	0x0801c43c
 8008f64:	43960000 	.word	0x43960000

08008f68 <MODE_inc>:

void MODE_inc( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
	en_Mode++;		// モードを�?�?
 8008f6c:	4b35      	ldr	r3, [pc, #212]	; (8009044 <MODE_inc+0xdc>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	3301      	adds	r3, #1
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	4b33      	ldr	r3, [pc, #204]	; (8009044 <MODE_inc+0xdc>)
 8008f76:	701a      	strb	r2, [r3, #0]

	/* 最大値チェ�?ク */
	if( MODE_MAX == en_Mode ){
 8008f78:	4b32      	ldr	r3, [pc, #200]	; (8009044 <MODE_inc+0xdc>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d102      	bne.n	8008f86 <MODE_inc+0x1e>
		en_Mode = MODE_0;
 8008f80:	4b30      	ldr	r3, [pc, #192]	; (8009044 <MODE_inc+0xdc>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
	}

	/* モード表示 */
	switch( en_Mode ){
 8008f86:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <MODE_inc+0xdc>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	d857      	bhi.n	800903e <MODE_inc+0xd6>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <MODE_inc+0x2c>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fc1 	.word	0x08008fc1
 8008f9c:	08008fd3 	.word	0x08008fd3
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	08008ff7 	.word	0x08008ff7
 8008fa8:	08009009 	.word	0x08009009
 8008fac:	0800901b 	.word	0x0800901b
 8008fb0:	0800902d 	.word	0x0800902d

		case MODE_0:
			SetLED(0x00 | now_mode);
 8008fb4:	4b24      	ldr	r3, [pc, #144]	; (8009048 <MODE_inc+0xe0>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f9 f805 	bl	8001fc8 <SetLED>
			break;
 8008fbe:	e03f      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_1:
			SetLED((0x01<<1) | now_mode);
 8008fc0:	4b21      	ldr	r3, [pc, #132]	; (8009048 <MODE_inc+0xe0>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f043 0302 	orr.w	r3, r3, #2
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f8 fffc 	bl	8001fc8 <SetLED>
			break;
 8008fd0:	e036      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_2:
			SetLED((0x02<<1) | now_mode);
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <MODE_inc+0xe0>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f043 0304 	orr.w	r3, r3, #4
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f8 fff3 	bl	8001fc8 <SetLED>
			break;
 8008fe2:	e02d      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_3:
			SetLED((0x03<<1) | now_mode);
 8008fe4:	4b18      	ldr	r3, [pc, #96]	; (8009048 <MODE_inc+0xe0>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f043 0306 	orr.w	r3, r3, #6
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7f8 ffea 	bl	8001fc8 <SetLED>
			break;
 8008ff4:	e024      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_4:
			SetLED((0x04<<1) | now_mode);
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <MODE_inc+0xe0>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f043 0308 	orr.w	r3, r3, #8
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	4618      	mov	r0, r3
 8009002:	f7f8 ffe1 	bl	8001fc8 <SetLED>
			break;
 8009006:	e01b      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_5:
			SetLED((0x05<<1) | now_mode);
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <MODE_inc+0xe0>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f043 030a 	orr.w	r3, r3, #10
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4618      	mov	r0, r3
 8009014:	f7f8 ffd8 	bl	8001fc8 <SetLED>
			break;
 8009018:	e012      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_6:
			SetLED((0x06<<1) | now_mode);
 800901a:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <MODE_inc+0xe0>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f043 030c 	orr.w	r3, r3, #12
 8009022:	b2db      	uxtb	r3, r3
 8009024:	4618      	mov	r0, r3
 8009026:	f7f8 ffcf 	bl	8001fc8 <SetLED>
			break;
 800902a:	e009      	b.n	8009040 <MODE_inc+0xd8>

		case MODE_7:
			SetLED((0x07<<1) | now_mode);
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <MODE_inc+0xe0>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	f043 030e 	orr.w	r3, r3, #14
 8009034:	b2db      	uxtb	r3, r3
 8009036:	4618      	mov	r0, r3
 8009038:	f7f8 ffc6 	bl	8001fc8 <SetLED>
			break;
 800903c:	e000      	b.n	8009040 <MODE_inc+0xd8>

		default:
			break;
 800903e:	bf00      	nop
	}
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	2000b16c 	.word	0x2000b16c
 8009048:	2000000c 	.word	0x2000000c

0800904c <MODE_exe_m0>:

void MODE_exe_m0( void )
{
 800904c:	b5b0      	push	{r4, r5, r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;
	GYRO_SetRef();
 8009052:	f7ff fc0d 	bl	8008870 <GYRO_SetRef>

	CTRL_clrData();
 8009056:	f7fc fb91 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800905a:	f7fc fbe3 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 800905e:	f7fc fbf5 	bl	800584c <CTRL_clrNowData>
	/* モード表示 */
	switch( en_Mode ){
 8009062:	4be1      	ldr	r3, [pc, #900]	; (80093e8 <MODE_exe_m0+0x39c>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b07      	cmp	r3, #7
 8009068:	f200 8233 	bhi.w	80094d2 <MODE_exe_m0+0x486>
 800906c:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <MODE_exe_m0+0x28>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	08009095 	.word	0x08009095
 8009078:	080090f1 	.word	0x080090f1
 800907c:	08009131 	.word	0x08009131
 8009080:	0800913d 	.word	0x0800913d
 8009084:	080091c9 	.word	0x080091c9
 8009088:	08009247 	.word	0x08009247
 800908c:	08009431 	.word	0x08009431
 8009090:	080094cb 	.word	0x080094cb

		case MODE_0:
			SetLED(0x0e);
 8009094:	200e      	movs	r0, #14
 8009096:	f7f8 ff97 	bl	8001fc8 <SetLED>
			CTRL_clrNowData();
 800909a:	f7fc fbd7 	bl	800584c <CTRL_clrNowData>
			CTRL_clrData();
 800909e:	f7fc fb6d 	bl	800577c <CTRL_clrData>
//			LL_TIM_EnableIT_UPDATE(TIM4);
//			LL_TIM_EnableCounter(TIM4);
			printf("\n");
 80090a2:	200a      	movs	r0, #10
 80090a4:	f00e f8fa 	bl	801729c <putchar>
			LL_mDelay(1000);
 80090a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090ac:	f00d f974 	bl	8016398 <LL_mDelay>
			GYRO_SetRef();
 80090b0:	f7ff fbde 	bl	8008870 <GYRO_SetRef>
			while(1){
				printf("  gyro%5.2f ref%5.2f \r", 
					GYRO_getNowAngle(),GYRO_getRef()
 80090b4:	f7ff fc5a 	bl	800896c <GYRO_getNowAngle>
 80090b8:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f7 fa6b 	bl	8000598 <__aeabi_f2d>
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
					GYRO_getNowAngle(),GYRO_getRef()
 80090c6:	f7ff fc5f 	bl	8008988 <GYRO_getRef>
 80090ca:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7f7 fa62 	bl	8000598 <__aeabi_f2d>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	e9cd 2300 	strd	r2, r3, [sp]
 80090dc:	4622      	mov	r2, r4
 80090de:	462b      	mov	r3, r5
 80090e0:	48c2      	ldr	r0, [pc, #776]	; (80093ec <MODE_exe_m0+0x3a0>)
 80090e2:	f00e f8c9 	bl	8017278 <iprintf>
				);
				LL_mDelay( 500 );
 80090e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090ea:	f00d f955 	bl	8016398 <LL_mDelay>
				printf("  gyro%5.2f ref%5.2f \r", 
 80090ee:	e7e1      	b.n	80090b4 <MODE_exe_m0+0x68>
			}
			break;

		case MODE_1:
			SetLED(0x0e);
 80090f0:	200e      	movs	r0, #14
 80090f2:	f7f8 ff69 	bl	8001fc8 <SetLED>
			printf("\n");
 80090f6:	200a      	movs	r0, #10
 80090f8:	f00e f8d0 	bl	801729c <putchar>
			LL_mDelay(1000);
 80090fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009100:	f00d f94a 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 8009104:	2000      	movs	r0, #0
 8009106:	f7f8 ff5f 	bl	8001fc8 <SetLED>
			while(1){
				printf("  ENC_R%5d ENC_L%5d \r", 
					Get_encoder_value(enR),Get_encoder_value(enL)
 800910a:	2001      	movs	r0, #1
 800910c:	f7ff f9ca 	bl	80084a4 <Get_encoder_value>
 8009110:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 8009112:	461c      	mov	r4, r3
					Get_encoder_value(enR),Get_encoder_value(enL)
 8009114:	2000      	movs	r0, #0
 8009116:	f7ff f9c5 	bl	80084a4 <Get_encoder_value>
 800911a:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800911c:	461a      	mov	r2, r3
 800911e:	4621      	mov	r1, r4
 8009120:	48b3      	ldr	r0, [pc, #716]	; (80093f0 <MODE_exe_m0+0x3a4>)
 8009122:	f00e f8a9 	bl	8017278 <iprintf>
				);
				LL_mDelay( 500 );
 8009126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800912a:	f00d f935 	bl	8016398 <LL_mDelay>
				printf("  ENC_R%5d ENC_L%5d \r", 
 800912e:	e7ec      	b.n	800910a <MODE_exe_m0+0xbe>
			}
			break;

		case MODE_2:
			SetLED(0x0e);
 8009130:	200e      	movs	r0, #14
 8009132:	f7f8 ff49 	bl	8001fc8 <SetLED>
			log_read2();
 8009136:	f7ff fde9 	bl	8008d0c <log_read2>
			break;
 800913a:	e1cb      	b.n	80094d4 <MODE_exe_m0+0x488>

		case MODE_3:
			SetLED(0x0e);
 800913c:	200e      	movs	r0, #14
 800913e:	f7f8 ff43 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009142:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8009428 <MODE_exe_m0+0x3dc>
 8009146:	f003 fc77 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800914a:	2000      	movs	r0, #0
 800914c:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8009428 <MODE_exe_m0+0x3dc>
 8009150:	f003 fc10 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009154:	2001      	movs	r0, #1
 8009156:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8009428 <MODE_exe_m0+0x3dc>
 800915a:	f003 fc0b 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800915e:	2002      	movs	r0, #2
 8009160:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8009428 <MODE_exe_m0+0x3dc>
 8009164:	f003 fc06 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);
 8009168:	2003      	movs	r0, #3
 800916a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8009428 <MODE_exe_m0+0x3dc>
 800916e:	f003 fc01 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普�?
 8009172:	2100      	movs	r1, #0
 8009174:	2015      	movs	r0, #21
 8009176:	f7f9 faef 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
 800917a:	2100      	movs	r1, #0
 800917c:	2016      	movs	r0, #22
 800917e:	f7f9 faeb 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
 8009182:	2100      	movs	r1, #0
 8009184:	2017      	movs	r0, #23
 8009186:	f7f9 fae7 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800918a:	2000      	movs	r0, #0
 800918c:	f7f8 ff1c 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8009190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009194:	f00d f900 	bl	8016398 <LL_mDelay>
			CTRL_clrData();
 8009198:	f7fc faf0 	bl	800577c <CTRL_clrData>
			CTRL_clrAngleErrSum();
 800919c:	f7fc fb42 	bl	8005824 <CTRL_clrAngleErrSum>
			CTRL_clrNowData();
 80091a0:	f7fc fb54 	bl	800584c <CTRL_clrNowData>
			log_flag_on();
 80091a4:	f7ff fd9a 	bl	8008cdc <log_flag_on>
			DIST_Front_Wall_correction();
 80091a8:	f004 f9da 	bl	800d560 <DIST_Front_Wall_correction>
			log_flag_off();
 80091ac:	f7ff fda2 	bl	8008cf4 <log_flag_off>
			CTRL_stop();
 80091b0:	f7fc fad4 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// �u���[�L
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7ff f917 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// �u���[�L
 80091ba:	2001      	movs	r0, #1
 80091bc:	f7ff f914 	bl	80083e8 <DCM_brakeMot>
			SetLED(0x0e);
 80091c0:	200e      	movs	r0, #14
 80091c2:	f7f8 ff01 	bl	8001fc8 <SetLED>
			break;
 80091c6:	e185      	b.n	80094d4 <MODE_exe_m0+0x488>

		case MODE_4:
			SetLED(0x0e);
 80091c8:	200e      	movs	r0, #14
 80091ca:	f7f8 fefd 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*10);
 80091ce:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80091d2:	f003 fc31 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 80091d6:	2000      	movs	r0, #0
 80091d8:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8009428 <MODE_exe_m0+0x3dc>
 80091dc:	f003 fbca 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 80091e0:	2001      	movs	r0, #1
 80091e2:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8009428 <MODE_exe_m0+0x3dc>
 80091e6:	f003 fbc5 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 80091ea:	2002      	movs	r0, #2
 80091ec:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8009428 <MODE_exe_m0+0x3dc>
 80091f0:	f003 fbc0 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);
 80091f4:	2003      	movs	r0, #3
 80091f6:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8009428 <MODE_exe_m0+0x3dc>
 80091fa:	f003 fbbb 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
 80091fe:	2104      	movs	r1, #4
 8009200:	2015      	movs	r0, #21
 8009202:	f7f9 faa9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
 8009206:	2100      	movs	r1, #0
 8009208:	2016      	movs	r0, #22
 800920a:	f7f9 faa5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
 800920e:	2100      	movs	r1, #0
 8009210:	2017      	movs	r0, #23
 8009212:	f7f9 faa1 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009216:	2000      	movs	r0, #0
 8009218:	f7f8 fed6 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 800921c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009220:	f00d f8ba 	bl	8016398 <LL_mDelay>
			CTRL_clrData();
 8009224:	f7fc faaa 	bl	800577c <CTRL_clrData>
			CTRL_clrAngleErrSum();
 8009228:	f7fc fafc 	bl	8005824 <CTRL_clrAngleErrSum>
			CTRL_clrNowData();
 800922c:	f7fc fb0e 	bl	800584c <CTRL_clrNowData>
			log_flag_on();
 8009230:	f7ff fd54 	bl	8008cdc <log_flag_on>
			MOT_goSla(MOT_L45S_S2N,PARAM_getSra( SLA_45 ));
			MOT_goSkewBlock_FinSpeed(0.5,SEARCH_SPEED);
			MOT_goSla(MOT_R135S_N2S,PARAM_getSra( SLA_135 ));
			MOT_goBlock_FinSpeed(0.5, 0);
*/
			MOT_goBlock_FinSpeed(10.0,0);
 8009234:	eddf 0a7d 	vldr	s1, [pc, #500]	; 800942c <MODE_exe_m0+0x3e0>
 8009238:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800923c:	f002 fe84 	bl	800bf48 <MOT_goBlock_FinSpeed>
			log_flag_off();
 8009240:	f7ff fd58 	bl	8008cf4 <log_flag_off>
			break;
 8009244:	e146      	b.n	80094d4 <MODE_exe_m0+0x488>

		case MODE_5:
			SetLED(0x0e);
 8009246:	200e      	movs	r0, #14
 8009248:	f7f8 febe 	bl	8001fc8 <SetLED>

			printf("\r\n turn 45 \r\r");
 800924c:	4869      	ldr	r0, [pc, #420]	; (80093f4 <MODE_exe_m0+0x3a8>)
 800924e:	f00e f813 	bl	8017278 <iprintf>
			PARAM_makeSra( 0.6, 550.0f, 7.50f, SLA_45 );
 8009252:	2001      	movs	r0, #1
 8009254:	eeb1 1a0e 	vmov.f32	s2, #30	; 0x40f00000  7.5
 8009258:	eddf 0a67 	vldr	s1, [pc, #412]	; 80093f8 <MODE_exe_m0+0x3ac>
 800925c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80093fc <MODE_exe_m0+0x3b0>
 8009260:	f7f9 fb0e 	bl	8002880 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 8009264:	4866      	ldr	r0, [pc, #408]	; (8009400 <MODE_exe_m0+0x3b4>)
 8009266:	f00e f807 	bl	8017278 <iprintf>
			PARAM_makeSra( 0.6, 900.0f, 10.00f, SLA_90 );	
 800926a:	2000      	movs	r0, #0
 800926c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8009270:	eddf 0a64 	vldr	s1, [pc, #400]	; 8009404 <MODE_exe_m0+0x3b8>
 8009274:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80093fc <MODE_exe_m0+0x3b0>
 8009278:	f7f9 fb02 	bl	8002880 <PARAM_makeSra>
			printf("\r\n turn 135 \r\r");	
 800927c:	4862      	ldr	r0, [pc, #392]	; (8009408 <MODE_exe_m0+0x3bc>)
 800927e:	f00d fffb 	bl	8017278 <iprintf>
			PARAM_makeSra( 0.6, 850.0f, 18.00f, SLA_135 );	
 8009282:	2002      	movs	r0, #2
 8009284:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8009288:	eddf 0a60 	vldr	s1, [pc, #384]	; 800940c <MODE_exe_m0+0x3c0>
 800928c:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80093fc <MODE_exe_m0+0x3b0>
 8009290:	f7f9 faf6 	bl	8002880 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 8009294:	485e      	ldr	r0, [pc, #376]	; (8009410 <MODE_exe_m0+0x3c4>)
 8009296:	f00d ffef 	bl	8017278 <iprintf>
			PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
 800929a:	2003      	movs	r0, #3
 800929c:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 80092a0:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8009414 <MODE_exe_m0+0x3c8>
 80092a4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80093fc <MODE_exe_m0+0x3b0>
 80092a8:	f7f9 faea 	bl	8002880 <PARAM_makeSra>

			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 80092ac:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8009418 <MODE_exe_m0+0x3cc>
 80092b0:	f003 fbc2 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED * 2.0, SLA_90);							// スラロー�?開始速度設�?
 80092b4:	2000      	movs	r0, #0
 80092b6:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80093fc <MODE_exe_m0+0x3b0>
 80092ba:	f003 fb5b 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED * 2.0, SLA_45);
 80092be:	2001      	movs	r0, #1
 80092c0:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80093fc <MODE_exe_m0+0x3b0>
 80092c4:	f003 fb56 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED * 2.0, SLA_135);
 80092c8:	2002      	movs	r0, #2
 80092ca:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80093fc <MODE_exe_m0+0x3b0>
 80092ce:	f003 fb51 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED * 2.0, SLA_N90);
 80092d2:	2003      	movs	r0, #3
 80092d4:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80093fc <MODE_exe_m0+0x3b0>
 80092d8:	f003 fb4c 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
 80092dc:	2104      	movs	r1, #4
 80092de:	2015      	movs	r0, #21
 80092e0:	f7f9 fa3a 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							// [旋回] 速度普�?
 80092e4:	2102      	movs	r1, #2
 80092e6:	2016      	movs	r0, #22
 80092e8:	f7f9 fa36 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							// [スラ] 速度普�?
 80092ec:	2102      	movs	r1, #2
 80092ee:	2017      	movs	r0, #23
 80092f0:	f7f9 fa32 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80092f4:	2000      	movs	r0, #0
 80092f6:	f7f8 fe67 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 80092fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092fe:	f00d f84b 	bl	8016398 <LL_mDelay>
			CTRL_clrData();
 8009302:	f7fc fa3b 	bl	800577c <CTRL_clrData>
			CTRL_clrAngleErrSum();
 8009306:	f7fc fa8d 	bl	8005824 <CTRL_clrAngleErrSum>
			CTRL_clrNowData();
 800930a:	f7fc fa9f 	bl	800584c <CTRL_clrNowData>
			Set_DutyTIM8(600);
 800930e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009312:	f7fb fe31 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);
 8009316:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800931a:	f00d f83d 	bl	8016398 <LL_mDelay>
			log_flag_on();
 800931e:	f7ff fcdd 	bl	8008cdc <log_flag_on>
			MOT_goSkewBlock_FinSpeed(0.5, SEARCH_SPEED*2.0);
			MOT_goSla(MOT_R90S_N, PARAM_getSra( SLA_N90 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/

			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED*2.0);
 8009322:	eddf 0a36 	vldr	s1, [pc, #216]	; 80093fc <MODE_exe_m0+0x3b0>
 8009326:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800932a:	f002 fe0d 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
 800932e:	2002      	movs	r0, #2
 8009330:	f7f9 fe60 	bl	8002ff4 <PARAM_getSra>
 8009334:	4603      	mov	r3, r0
 8009336:	4619      	mov	r1, r3
 8009338:	2008      	movs	r0, #8
 800933a:	f003 fbf9 	bl	800cb30 <MOT_goSla>
			MOT_goSkewBlock_FinSpeed(0.5, 0);
 800933e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800942c <MODE_exe_m0+0x3e0>
 8009342:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009346:	f002 fe11 	bl	800bf6c <MOT_goSkewBlock_FinSpeed>

			log_flag_off();
 800934a:	f7ff fcd3 	bl	8008cf4 <log_flag_off>

			Set_DutyTIM8(0);
 800934e:	2000      	movs	r0, #0
 8009350:	f7fb fe12 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);
 8009354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009358:	f00d f81e 	bl	8016398 <LL_mDelay>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 800935c:	2001      	movs	r0, #1
 800935e:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 8009362:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800941c <MODE_exe_m0+0x3d0>
 8009366:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009428 <MODE_exe_m0+0x3dc>
 800936a:	f7f9 fa89 	bl	8002880 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 800936e:	4824      	ldr	r0, [pc, #144]	; (8009400 <MODE_exe_m0+0x3b4>)
 8009370:	f00d ff82 	bl	8017278 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 8009374:	2000      	movs	r0, #0
 8009376:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 800937a:	eddf 0a29 	vldr	s1, [pc, #164]	; 8009420 <MODE_exe_m0+0x3d4>
 800937e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8009428 <MODE_exe_m0+0x3dc>
 8009382:	f7f9 fa7d 	bl	8002880 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			printf("\r\n turn 135 \r\r");	
 8009386:	4820      	ldr	r0, [pc, #128]	; (8009408 <MODE_exe_m0+0x3bc>)
 8009388:	f00d ff76 	bl	8017278 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 800938c:	2002      	movs	r0, #2
 800938e:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8009392:	eddf 0a23 	vldr	s1, [pc, #140]	; 8009420 <MODE_exe_m0+0x3d4>
 8009396:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8009428 <MODE_exe_m0+0x3dc>
 800939a:	f7f9 fa71 	bl	8002880 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 800939e:	481c      	ldr	r0, [pc, #112]	; (8009410 <MODE_exe_m0+0x3c4>)
 80093a0:	f00d ff6a 	bl	8017278 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );		
 80093a4:	2003      	movs	r0, #3
 80093a6:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80093aa:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8009424 <MODE_exe_m0+0x3d8>
 80093ae:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8009428 <MODE_exe_m0+0x3dc>
 80093b2:	f7f9 fa65 	bl	8002880 <PARAM_makeSra>

			MOT_setTrgtSpeed(SEARCH_SPEED);
 80093b6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8009428 <MODE_exe_m0+0x3dc>
 80093ba:	f003 fb3d 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 80093be:	2000      	movs	r0, #0
 80093c0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009428 <MODE_exe_m0+0x3dc>
 80093c4:	f003 fad6 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 80093c8:	2001      	movs	r0, #1
 80093ca:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8009428 <MODE_exe_m0+0x3dc>
 80093ce:	f003 fad1 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 80093d2:	2002      	movs	r0, #2
 80093d4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009428 <MODE_exe_m0+0x3dc>
 80093d8:	f003 facc 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);
 80093dc:	2003      	movs	r0, #3
 80093de:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009428 <MODE_exe_m0+0x3dc>
 80093e2:	f003 fac7 	bl	800c974 <MOT_setSuraStaSpeed>
			break;
 80093e6:	e075      	b.n	80094d4 <MODE_exe_m0+0x488>
 80093e8:	2000b16c 	.word	0x2000b16c
 80093ec:	0801c44c 	.word	0x0801c44c
 80093f0:	0801c464 	.word	0x0801c464
 80093f4:	0801c41c 	.word	0x0801c41c
 80093f8:	44098000 	.word	0x44098000
 80093fc:	3f19999a 	.word	0x3f19999a
 8009400:	0801c42c 	.word	0x0801c42c
 8009404:	44610000 	.word	0x44610000
 8009408:	0801c43c 	.word	0x0801c43c
 800940c:	44548000 	.word	0x44548000
 8009410:	0801c40c 	.word	0x0801c40c
 8009414:	44bb8000 	.word	0x44bb8000
 8009418:	3f99999a 	.word	0x3f99999a
 800941c:	42c80000 	.word	0x42c80000
 8009420:	43480000 	.word	0x43480000
 8009424:	43960000 	.word	0x43960000
 8009428:	3e99999a 	.word	0x3e99999a
 800942c:	00000000 	.word	0x00000000

		case MODE_6:
			SetLED(0x0e);
 8009430:	200e      	movs	r0, #14
 8009432:	f7f8 fdc9 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009436:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8009428 <MODE_exe_m0+0x3dc>
 800943a:	f003 fafd 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800943e:	2000      	movs	r0, #0
 8009440:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 8009428 <MODE_exe_m0+0x3dc>
 8009444:	f003 fa96 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009448:	2001      	movs	r0, #1
 800944a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8009428 <MODE_exe_m0+0x3dc>
 800944e:	f003 fa91 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009452:	2002      	movs	r0, #2
 8009454:	ed1f 0a0c 	vldr	s0, [pc, #-48]	; 8009428 <MODE_exe_m0+0x3dc>
 8009458:	f003 fa8c 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);
 800945c:	2003      	movs	r0, #3
 800945e:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 8009428 <MODE_exe_m0+0x3dc>
 8009462:	f003 fa87 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
 8009466:	2104      	movs	r1, #4
 8009468:	2015      	movs	r0, #21
 800946a:	f7f9 f975 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							// [旋回] 速度普�?
 800946e:	2104      	movs	r1, #4
 8009470:	2016      	movs	r0, #22
 8009472:	f7f9 f971 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							// [スラ] 速度普�?
 8009476:	2104      	movs	r1, #4
 8009478:	2017      	movs	r0, #23
 800947a:	f7f9 f96d 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800947e:	2000      	movs	r0, #0
 8009480:	f7f8 fda2 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8009484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009488:	f00c ff86 	bl	8016398 <LL_mDelay>
			CTRL_clrData();
 800948c:	f7fc f976 	bl	800577c <CTRL_clrData>
			CTRL_clrAngleErrSum();
 8009490:	f7fc f9c8 	bl	8005824 <CTRL_clrAngleErrSum>
			CTRL_clrNowData();
 8009494:	f7fc f9da 	bl	800584c <CTRL_clrNowData>
			log_flag_on();
 8009498:	f7ff fc20 	bl	8008cdc <log_flag_on>
			MOT_goSkewBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R90S_N, PARAM_getSra( SLA_N90 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/

			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
 800949c:	ed5f 0a1e 	vldr	s1, [pc, #-120]	; 8009428 <MODE_exe_m0+0x3dc>
 80094a0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80094a4:	f002 fd50 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
 80094a8:	2002      	movs	r0, #2
 80094aa:	f7f9 fda3 	bl	8002ff4 <PARAM_getSra>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4619      	mov	r1, r3
 80094b2:	2008      	movs	r0, #8
 80094b4:	f003 fb3c 	bl	800cb30 <MOT_goSla>
			MOT_goSkewBlock_FinSpeed(0.5, 0);
 80094b8:	ed5f 0a24 	vldr	s1, [pc, #-144]	; 800942c <MODE_exe_m0+0x3e0>
 80094bc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80094c0:	f002 fd54 	bl	800bf6c <MOT_goSkewBlock_FinSpeed>

			log_flag_off();
 80094c4:	f7ff fc16 	bl	8008cf4 <log_flag_off>
			break;
 80094c8:	e004      	b.n	80094d4 <MODE_exe_m0+0x488>

		case MODE_7:
			SetLED(0x0e);
 80094ca:	200e      	movs	r0, #14
 80094cc:	f7f8 fd7c 	bl	8001fc8 <SetLED>
			//cant use
			break;
 80094d0:	e000      	b.n	80094d4 <MODE_exe_m0+0x488>

		default:
			break;
 80094d2:	bf00      	nop
	}
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bdb0      	pop	{r4, r5, r7, pc}
 80094da:	bf00      	nop

080094dc <MODE_exe_m1>:

void MODE_exe_m1( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 80094ee:	f7ff f9bf 	bl	8008870 <GYRO_SetRef>
	CTRL_clrData();
 80094f2:	f7fc f943 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 80094f6:	f7fc f995 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 80094fa:	f7fc f9a7 	bl	800584c <CTRL_clrNowData>

	switch( en_Mode ){
 80094fe:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <MODE_exe_m1+0xe4>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b07      	cmp	r3, #7
 8009504:	d857      	bhi.n	80095b6 <MODE_exe_m1+0xda>
 8009506:	a201      	add	r2, pc, #4	; (adr r2, 800950c <MODE_exe_m1+0x30>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	0800952d 	.word	0x0800952d
 8009510:	08009535 	.word	0x08009535
 8009514:	08009541 	.word	0x08009541
 8009518:	0800954d 	.word	0x0800954d
 800951c:	08009559 	.word	0x08009559
 8009520:	08009565 	.word	0x08009565
 8009524:	080095a7 	.word	0x080095a7
 8009528:	080095af 	.word	0x080095af

		case MODE_0:
			SetLED(0x0e);
 800952c:	200e      	movs	r0, #14
 800952e:	f7f8 fd4b 	bl	8001fc8 <SetLED>
			break;
 8009532:	e041      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_1:
			SetLED(0x0e);
 8009534:	200e      	movs	r0, #14
 8009536:	f7f8 fd47 	bl	8001fc8 <SetLED>
			map_erase();
 800953a:	f008 f905 	bl	8011748 <map_erase>
			break;
 800953e:	e03b      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_2:
			SetLED(0x0e);
 8009540:	200e      	movs	r0, #14
 8009542:	f7f8 fd41 	bl	8001fc8 <SetLED>
			MAP_showLog();
 8009546:	f008 f95f 	bl	8011808 <MAP_showLog>
			break;
 800954a:	e035      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_3:
			SetLED(0x0e);
 800954c:	200e      	movs	r0, #14
 800954e:	f7f8 fd3b 	bl	8001fc8 <SetLED>
			map_copy();
 8009552:	f008 f8d3 	bl	80116fc <map_copy>
			break;
 8009556:	e02f      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_4:
			SetLED(0x0e);
 8009558:	200e      	movs	r0, #14
 800955a:	f7f8 fd35 	bl	8001fc8 <SetLED>
			map_write();
 800955e:	f008 f8b9 	bl	80116d4 <map_write>
			break;
 8009562:	e029      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_5:
			SetLED(0x0e);
 8009564:	200e      	movs	r0, #14
 8009566:	f7f8 fd2f 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2000      	movs	r0, #0
 8009570:	f008 f928 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009574:	2001      	movs	r0, #1
 8009576:	f009 fc7b 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800957a:	2201      	movs	r2, #1
 800957c:	2100      	movs	r1, #0
 800957e:	2001      	movs	r0, #1
 8009580:	f008 fdc0 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009584:	1dfb      	adds	r3, r7, #7
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	2300      	movs	r3, #0
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	2301      	movs	r3, #1
 800958e:	2200      	movs	r2, #0
 8009590:	2100      	movs	r1, #0
 8009592:	2000      	movs	r0, #0
 8009594:	f005 fc94 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009598:	f005 feea 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800959c:	f006 f864 	bl	800f668 <MAP_makeSkewCmdList>
			MAP_showCmdLog();
 80095a0:	f005 fc3e 	bl	800ee20 <MAP_showCmdLog>
			break;
 80095a4:	e008      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_6:
			SetLED(0x0e);
 80095a6:	200e      	movs	r0, #14
 80095a8:	f7f8 fd0e 	bl	8001fc8 <SetLED>
			break;
 80095ac:	e004      	b.n	80095b8 <MODE_exe_m1+0xdc>

		case MODE_7:
			SetLED(0x0e);
 80095ae:	200e      	movs	r0, #14
 80095b0:	f7f8 fd0a 	bl	8001fc8 <SetLED>
			//cant use
			break;
 80095b4:	e000      	b.n	80095b8 <MODE_exe_m1+0xdc>

		default:
			break;
 80095b6:	bf00      	nop
	}
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	2000b16c 	.word	0x2000b16c

080095c4 <MODE_exe_m2>:

void MODE_exe_m2( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	f04f 0300 	mov.w	r3, #0
 80095d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 80095d6:	4be5      	ldr	r3, [pc, #916]	; (800996c <MODE_exe_m2+0x3a8>)
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 80095dc:	4be4      	ldr	r3, [pc, #912]	; (8009970 <MODE_exe_m2+0x3ac>)
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 80095e2:	4be4      	ldr	r3, [pc, #912]	; (8009974 <MODE_exe_m2+0x3b0>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 80095e8:	f7ff f942 	bl	8008870 <GYRO_SetRef>
	CTRL_clrData();
 80095ec:	f7fc f8c6 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 80095f0:	f7fc f918 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 80095f4:	f7fc f92a 	bl	800584c <CTRL_clrNowData>

	switch( en_Mode ){
 80095f8:	4bdf      	ldr	r3, [pc, #892]	; (8009978 <MODE_exe_m2+0x3b4>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b07      	cmp	r3, #7
 80095fe:	f200 81a9 	bhi.w	8009954 <MODE_exe_m2+0x390>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <MODE_exe_m2+0x44>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009629 	.word	0x08009629
 800960c:	08009729 	.word	0x08009729
 8009610:	08009831 	.word	0x08009831
 8009614:	0800992d 	.word	0x0800992d
 8009618:	08009935 	.word	0x08009935
 800961c:	0800993d 	.word	0x0800993d
 8009620:	08009945 	.word	0x08009945
 8009624:	0800994d 	.word	0x0800994d

		case MODE_0:
			SetLED(0x0e);
 8009628:	200e      	movs	r0, #14
 800962a:	f7f8 fccd 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800962e:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 800997c <MODE_exe_m2+0x3b8>
 8009632:	f003 fa01 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009636:	2000      	movs	r0, #0
 8009638:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 800997c <MODE_exe_m2+0x3b8>
 800963c:	f003 f99a 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009640:	2001      	movs	r0, #1
 8009642:	ed9f 0ace 	vldr	s0, [pc, #824]	; 800997c <MODE_exe_m2+0x3b8>
 8009646:	f003 f995 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800964a:	2002      	movs	r0, #2
 800964c:	ed9f 0acb 	vldr	s0, [pc, #812]	; 800997c <MODE_exe_m2+0x3b8>
 8009650:	f003 f990 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);						
 8009654:	2003      	movs	r0, #3
 8009656:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800997c <MODE_exe_m2+0x3b8>
 800965a:	f003 f98b 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800965e:	2101      	movs	r1, #1
 8009660:	2015      	movs	r0, #21
 8009662:	f7f9 f879 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009666:	2101      	movs	r1, #1
 8009668:	2016      	movs	r0, #22
 800966a:	f7f9 f875 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800966e:	2101      	movs	r1, #1
 8009670:	2017      	movs	r0, #23
 8009672:	f7f9 f871 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009676:	2000      	movs	r0, #0
 8009678:	f7f8 fca6 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 800967c:	2064      	movs	r0, #100	; 0x64
 800967e:	f00c fe8b 	bl	8016398 <LL_mDelay>
			MAP_Goalsize(1);
 8009682:	2001      	movs	r0, #1
 8009684:	f009 fbf4 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 8009688:	2200      	movs	r2, #0
 800968a:	2100      	movs	r1, #0
 800968c:	2000      	movs	r0, #0
 800968e:	f008 f899 	bl	80117c4 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8009692:	2301      	movs	r3, #1
 8009694:	2200      	movs	r2, #0
 8009696:	2100      	movs	r1, #0
 8009698:	2001      	movs	r0, #1
 800969a:	f00a fc37 	bl	8013f0c <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800969e:	f7f8 fd11 	bl	80020c4 <SW_IsOn_1>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d006      	beq.n	80096b6 <MODE_exe_m2+0xf2>
 80096a8:	f7fe fe6c 	bl	8008384 <SYS_isOutOfCtrl>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <MODE_exe_m2+0xf2>
			else{
				map_write();
 80096b2:	f008 f80f 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 80096b6:	200e      	movs	r0, #14
 80096b8:	f7f8 fc86 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 80096bc:	2001      	movs	r0, #1
 80096be:	f009 fbd7 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 80096c2:	2000      	movs	r0, #0
 80096c4:	f7f8 fc80 	bl	8001fc8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
 80096c8:	2301      	movs	r3, #1
 80096ca:	2200      	movs	r2, #0
 80096cc:	2100      	movs	r1, #0
 80096ce:	2000      	movs	r0, #0
 80096d0:	f00a fc1c 	bl	8013f0c <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 80096d4:	f7f8 fcf6 	bl	80020c4 <SW_IsOn_1>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b01      	cmp	r3, #1
 80096dc:	f000 813c 	beq.w	8009958 <MODE_exe_m2+0x394>
 80096e0:	f7fe fe50 	bl	8008384 <SYS_isOutOfCtrl>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f040 8136 	bne.w	8009958 <MODE_exe_m2+0x394>
			else{
				map_write();
 80096ec:	f007 fff2 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 80096f0:	2200      	movs	r2, #0
 80096f2:	2100      	movs	r1, #0
 80096f4:	2000      	movs	r0, #0
 80096f6:	f008 f865 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 80096fa:	2201      	movs	r2, #1
 80096fc:	2100      	movs	r1, #0
 80096fe:	2001      	movs	r0, #1
 8009700:	f008 fd00 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009704:	1dfb      	adds	r3, r7, #7
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	2300      	movs	r3, #0
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	2301      	movs	r3, #1
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	2000      	movs	r0, #0
 8009714:	f005 fbd4 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009718:	f005 fe2a 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 800971c:	f005 ffa4 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009720:	2000      	movs	r0, #0
 8009722:	f7f8 fc51 	bl	8001fc8 <SetLED>
			}
			break;
 8009726:	e117      	b.n	8009958 <MODE_exe_m2+0x394>

		case MODE_1:
			SetLED(0x0e);
 8009728:	200e      	movs	r0, #14
 800972a:	f7f8 fc4d 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800972e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800997c <MODE_exe_m2+0x3b8>
 8009732:	f003 f981 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009736:	2000      	movs	r0, #0
 8009738:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800997c <MODE_exe_m2+0x3b8>
 800973c:	f003 f91a 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009740:	2001      	movs	r0, #1
 8009742:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800997c <MODE_exe_m2+0x3b8>
 8009746:	f003 f915 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800974a:	2002      	movs	r0, #2
 800974c:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800997c <MODE_exe_m2+0x3b8>
 8009750:	f003 f910 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);						
 8009754:	2003      	movs	r0, #3
 8009756:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800997c <MODE_exe_m2+0x3b8>
 800975a:	f003 f90b 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800975e:	2101      	movs	r1, #1
 8009760:	2015      	movs	r0, #21
 8009762:	f7f8 fff9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009766:	2101      	movs	r1, #1
 8009768:	2016      	movs	r0, #22
 800976a:	f7f8 fff5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800976e:	2101      	movs	r1, #1
 8009770:	2017      	movs	r0, #23
 8009772:	f7f8 fff1 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009776:	2000      	movs	r0, #0
 8009778:	f7f8 fc26 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 800977c:	2064      	movs	r0, #100	; 0x64
 800977e:	f00c fe0b 	bl	8016398 <LL_mDelay>
			MAP_Goalsize(1);
 8009782:	2001      	movs	r0, #1
 8009784:	f009 fb74 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8009788:	2200      	movs	r2, #0
 800978a:	2100      	movs	r1, #0
 800978c:	2000      	movs	r0, #0
 800978e:	f008 f819 	bl	80117c4 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8009792:	2301      	movs	r3, #1
 8009794:	2200      	movs	r2, #0
 8009796:	2100      	movs	r1, #0
 8009798:	2001      	movs	r0, #1
 800979a:	f00a fd0f 	bl	80141bc <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800979e:	f7f8 fc91 	bl	80020c4 <SW_IsOn_1>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d006      	beq.n	80097b6 <MODE_exe_m2+0x1f2>
 80097a8:	f7fe fdec 	bl	8008384 <SYS_isOutOfCtrl>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <MODE_exe_m2+0x1f2>
			else{
				map_write();
 80097b2:	f007 ff8f 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 80097b6:	200e      	movs	r0, #14
 80097b8:	f7f8 fc06 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 80097bc:	2001      	movs	r0, #1
 80097be:	f009 fb57 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 80097c2:	2000      	movs	r0, #0
 80097c4:	f7f8 fc00 	bl	8001fc8 <SetLED>
			log_flag_on();
 80097c8:	f7ff fa88 	bl	8008cdc <log_flag_on>
			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 80097cc:	2301      	movs	r3, #1
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	2000      	movs	r0, #0
 80097d4:	f00a fcf2 	bl	80141bc <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );
			log_flag_off();
 80097d8:	f7ff fa8c 	bl	8008cf4 <log_flag_off>
			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 80097dc:	f7f8 fc72 	bl	80020c4 <SW_IsOn_1>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	f000 80ba 	beq.w	800995c <MODE_exe_m2+0x398>
 80097e8:	f7fe fdcc 	bl	8008384 <SYS_isOutOfCtrl>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 80b4 	bne.w	800995c <MODE_exe_m2+0x398>
			else{
				map_write();
 80097f4:	f007 ff6e 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	2000      	movs	r0, #0
 80097fe:	f007 ffe1 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009802:	2201      	movs	r2, #1
 8009804:	2100      	movs	r1, #0
 8009806:	2001      	movs	r0, #1
 8009808:	f008 fc7c 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800980c:	1dfb      	adds	r3, r7, #7
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2301      	movs	r3, #1
 8009816:	2200      	movs	r2, #0
 8009818:	2100      	movs	r1, #0
 800981a:	2000      	movs	r0, #0
 800981c:	f005 fb50 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009820:	f005 fda6 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009824:	f005 ff20 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009828:	2000      	movs	r0, #0
 800982a:	f7f8 fbcd 	bl	8001fc8 <SetLED>
			}
			break;
 800982e:	e095      	b.n	800995c <MODE_exe_m2+0x398>

		case MODE_2:
			SetLED(0x0e);
 8009830:	200e      	movs	r0, #14
 8009832:	f7f8 fbc9 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009836:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800997c <MODE_exe_m2+0x3b8>
 800983a:	f003 f8fd 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800983e:	2000      	movs	r0, #0
 8009840:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800997c <MODE_exe_m2+0x3b8>
 8009844:	f003 f896 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009848:	2001      	movs	r0, #1
 800984a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800997c <MODE_exe_m2+0x3b8>
 800984e:	f003 f891 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009852:	2002      	movs	r0, #2
 8009854:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800997c <MODE_exe_m2+0x3b8>
 8009858:	f003 f88c 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 800985c:	2003      	movs	r0, #3
 800985e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800997c <MODE_exe_m2+0x3b8>
 8009862:	f003 f887 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009866:	2101      	movs	r1, #1
 8009868:	2015      	movs	r0, #21
 800986a:	f7f8 ff75 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800986e:	2101      	movs	r1, #1
 8009870:	2016      	movs	r0, #22
 8009872:	f7f8 ff71 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009876:	2101      	movs	r1, #1
 8009878:	2017      	movs	r0, #23
 800987a:	f7f8 ff6d 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800987e:	2000      	movs	r0, #0
 8009880:	f7f8 fba2 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8009884:	2064      	movs	r0, #100	; 0x64
 8009886:	f00c fd87 	bl	8016398 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			MAP_Goalsize(1);
 800988a:	2001      	movs	r0, #1
 800988c:	f009 faf0 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8009890:	2200      	movs	r2, #0
 8009892:	2100      	movs	r1, #0
 8009894:	2000      	movs	r0, #0
 8009896:	f007 ff95 	bl	80117c4 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800989a:	2301      	movs	r3, #1
 800989c:	2200      	movs	r2, #0
 800989e:	2100      	movs	r1, #0
 80098a0:	2001      	movs	r0, #1
 80098a2:	f00a fc8b 	bl	80141bc <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 80098a6:	f7f8 fc0d 	bl	80020c4 <SW_IsOn_1>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d006      	beq.n	80098be <MODE_exe_m2+0x2fa>
 80098b0:	f7fe fd68 	bl	8008384 <SYS_isOutOfCtrl>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <MODE_exe_m2+0x2fa>
			else{
				map_write();
 80098ba:	f007 ff0b 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 80098be:	200e      	movs	r0, #14
 80098c0:	f7f8 fb82 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 80098c4:	2001      	movs	r0, #1
 80098c6:	f009 fad3 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 80098ca:	2000      	movs	r0, #0
 80098cc:	f7f8 fb7c 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 80098d0:	2301      	movs	r3, #1
 80098d2:	2200      	movs	r2, #0
 80098d4:	2100      	movs	r1, #0
 80098d6:	2000      	movs	r0, #0
 80098d8:	f00a fc70 	bl	80141bc <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 80098dc:	f7f8 fbf2 	bl	80020c4 <SW_IsOn_1>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d03c      	beq.n	8009960 <MODE_exe_m2+0x39c>
 80098e6:	f7fe fd4d 	bl	8008384 <SYS_isOutOfCtrl>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d137      	bne.n	8009960 <MODE_exe_m2+0x39c>
			else{
				map_write();
 80098f0:	f007 fef0 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 80098f4:	2200      	movs	r2, #0
 80098f6:	2100      	movs	r1, #0
 80098f8:	2000      	movs	r0, #0
 80098fa:	f007 ff63 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 80098fe:	2201      	movs	r2, #1
 8009900:	2100      	movs	r1, #0
 8009902:	2001      	movs	r0, #1
 8009904:	f008 fbfe 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009908:	1dfb      	adds	r3, r7, #7
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	2300      	movs	r3, #0
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	2301      	movs	r3, #1
 8009912:	2200      	movs	r2, #0
 8009914:	2100      	movs	r1, #0
 8009916:	2000      	movs	r0, #0
 8009918:	f005 fad2 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800991c:	f005 fd28 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009920:	f005 fea2 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009924:	2000      	movs	r0, #0
 8009926:	f7f8 fb4f 	bl	8001fc8 <SetLED>
			}
			break;
 800992a:	e019      	b.n	8009960 <MODE_exe_m2+0x39c>

		case MODE_3:
			SetLED(0x0e);
 800992c:	200e      	movs	r0, #14
 800992e:	f7f8 fb4b 	bl	8001fc8 <SetLED>
			
			break;
 8009932:	e016      	b.n	8009962 <MODE_exe_m2+0x39e>

		case MODE_4:
			SetLED(0x0e);
 8009934:	200e      	movs	r0, #14
 8009936:	f7f8 fb47 	bl	8001fc8 <SetLED>
			break;
 800993a:	e012      	b.n	8009962 <MODE_exe_m2+0x39e>

		case MODE_5:
			SetLED(0x0e);
 800993c:	200e      	movs	r0, #14
 800993e:	f7f8 fb43 	bl	8001fc8 <SetLED>
			break;
 8009942:	e00e      	b.n	8009962 <MODE_exe_m2+0x39e>

		case MODE_6:
			SetLED(0x0e);
 8009944:	200e      	movs	r0, #14
 8009946:	f7f8 fb3f 	bl	8001fc8 <SetLED>
			break;
 800994a:	e00a      	b.n	8009962 <MODE_exe_m2+0x39e>

		case MODE_7:
			SetLED(0x0e);
 800994c:	200e      	movs	r0, #14
 800994e:	f7f8 fb3b 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8009952:	e006      	b.n	8009962 <MODE_exe_m2+0x39e>

		default:
			break;
 8009954:	bf00      	nop
 8009956:	e004      	b.n	8009962 <MODE_exe_m2+0x39e>
			break;
 8009958:	bf00      	nop
 800995a:	e002      	b.n	8009962 <MODE_exe_m2+0x39e>
			break;
 800995c:	bf00      	nop
 800995e:	e000      	b.n	8009962 <MODE_exe_m2+0x39e>
			break;
 8009960:	bf00      	nop
	}
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	2000042c 	.word	0x2000042c
 8009970:	20000838 	.word	0x20000838
 8009974:	20000c64 	.word	0x20000c64
 8009978:	2000b16c 	.word	0x2000b16c
 800997c:	3e99999a 	.word	0x3e99999a

08009980 <MODE_exe_m3>:

void MODE_exe_m3( void )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	map_copy();
 8009992:	f007 feb3 	bl	80116fc <map_copy>

	GYRO_SetRef();
 8009996:	f7fe ff6b 	bl	8008870 <GYRO_SetRef>
	CTRL_clrData();
 800999a:	f7fb feef 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800999e:	f7fb ff41 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 80099a2:	f7fb ff53 	bl	800584c <CTRL_clrNowData>

	switch( en_Mode ){
 80099a6:	4bda      	ldr	r3, [pc, #872]	; (8009d10 <MODE_exe_m3+0x390>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b07      	cmp	r3, #7
 80099ac:	f200 82f0 	bhi.w	8009f90 <MODE_exe_m3+0x610>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <MODE_exe_m3+0x38>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	08009aa5 	.word	0x08009aa5
 80099c0:	08009b71 	.word	0x08009b71
 80099c4:	08009c3d 	.word	0x08009c3d
 80099c8:	08009d21 	.word	0x08009d21
 80099cc:	08009ded 	.word	0x08009ded
 80099d0:	08009eb9 	.word	0x08009eb9
 80099d4:	08009f89 	.word	0x08009f89

		case MODE_0:
			SetLED(0x0e);
 80099d8:	200e      	movs	r0, #14
 80099da:	f7f8 faf5 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 80099de:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8009d14 <MODE_exe_m3+0x394>
 80099e2:	f003 f829 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 80099e6:	2000      	movs	r0, #0
 80099e8:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8009d1c <MODE_exe_m3+0x39c>
 80099ec:	f002 ffc2 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 80099f0:	2001      	movs	r0, #1
 80099f2:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8009d1c <MODE_exe_m3+0x39c>
 80099f6:	f002 ffbd 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 80099fa:	2002      	movs	r0, #2
 80099fc:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8009d1c <MODE_exe_m3+0x39c>
 8009a00:	f002 ffb8 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009a04:	2003      	movs	r0, #3
 8009a06:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8009d1c <MODE_exe_m3+0x39c>
 8009a0a:	f002 ffb3 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009a0e:	2101      	movs	r1, #1
 8009a10:	2015      	movs	r0, #21
 8009a12:	f7f8 fea1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009a16:	2101      	movs	r1, #1
 8009a18:	2016      	movs	r0, #22
 8009a1a:	f7f8 fe9d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009a1e:	2101      	movs	r1, #1
 8009a20:	2017      	movs	r0, #23
 8009a22:	f7f8 fe99 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009a26:	2000      	movs	r0, #0
 8009a28:	f7f8 face 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2100      	movs	r1, #0
 8009a30:	2000      	movs	r0, #0
 8009a32:	f007 fec7 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009a36:	2001      	movs	r0, #1
 8009a38:	f009 fa1a 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	2100      	movs	r1, #0
 8009a40:	2001      	movs	r0, #1
 8009a42:	f008 fb5f 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009a46:	1dfb      	adds	r3, r7, #7
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	2200      	movs	r2, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	2000      	movs	r0, #0
 8009a56:	f005 fa33 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009a5a:	f005 fc89 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009a5e:	f005 fe03 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a66:	f00c fc97 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009a6a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009a6e:	f7fb fa83 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);
 8009a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a76:	f00c fc8f 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );													
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	f006 fdaa 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009a80:	2000      	movs	r0, #0
 8009a82:	f7fb fa79 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a8a:	f00c fc85 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009a8e:	2002      	movs	r0, #2
 8009a90:	f002 fbc2 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009a94:	f009 f9b6 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f7fb fa6d 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009a9e:	f7fe fc65 	bl	800836c <Failsafe_flag_off>
			break;
 8009aa2:	e276      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_1:
			SetLED(0x0e);
 8009aa4:	200e      	movs	r0, #14
 8009aa6:	f7f8 fa8f 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009aaa:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009aae:	f002 ffc3 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ab8:	f002 ff5c 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009abc:	2001      	movs	r0, #1
 8009abe:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ac2:	f002 ff57 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009ac6:	2002      	movs	r0, #2
 8009ac8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8009d1c <MODE_exe_m3+0x39c>
 8009acc:	f002 ff52 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009ad0:	2003      	movs	r0, #3
 8009ad2:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ad6:	f002 ff4d 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009ada:	2102      	movs	r1, #2
 8009adc:	2015      	movs	r0, #21
 8009ade:	f7f8 fe3b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	2016      	movs	r0, #22
 8009ae6:	f7f8 fe37 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009aea:	2102      	movs	r1, #2
 8009aec:	2017      	movs	r0, #23
 8009aee:	f7f8 fe33 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009af2:	2000      	movs	r0, #0
 8009af4:	f7f8 fa68 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009af8:	2200      	movs	r2, #0
 8009afa:	2100      	movs	r1, #0
 8009afc:	2000      	movs	r0, #0
 8009afe:	f007 fe61 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009b02:	2001      	movs	r0, #1
 8009b04:	f009 f9b4 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009b08:	2201      	movs	r2, #1
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f008 faf9 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009b12:	1dfb      	adds	r3, r7, #7
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	2000      	movs	r0, #0
 8009b22:	f005 f9cd 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009b26:	f005 fc23 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009b2a:	f005 fd9d 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b32:	f00c fc31 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009b36:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009b3a:	f7fb fa1d 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009b3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b42:	f00c fc29 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 8009b46:	2001      	movs	r0, #1
 8009b48:	f006 fd44 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f7fb fa13 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b56:	f00c fc1f 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009b5a:	2002      	movs	r0, #2
 8009b5c:	f002 fb5c 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009b60:	f009 f950 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7fb fa07 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009b6a:	f7fe fbff 	bl	800836c <Failsafe_flag_off>
			break;
 8009b6e:	e210      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_2:
			SetLED(0x0e);
 8009b70:	200e      	movs	r0, #14
 8009b72:	f7f8 fa29 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 8009b76:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8009d18 <MODE_exe_m3+0x398>
 8009b7a:	f002 ff5d 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009b7e:	2000      	movs	r0, #0
 8009b80:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8009d1c <MODE_exe_m3+0x39c>
 8009b84:	f002 fef6 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009b88:	2001      	movs	r0, #1
 8009b8a:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8009d1c <MODE_exe_m3+0x39c>
 8009b8e:	f002 fef1 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009b92:	2002      	movs	r0, #2
 8009b94:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8009d1c <MODE_exe_m3+0x39c>
 8009b98:	f002 feec 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009b9c:	2003      	movs	r0, #3
 8009b9e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ba2:	f002 fee7 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	2015      	movs	r0, #21
 8009baa:	f7f8 fdd5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 8009bae:	2104      	movs	r1, #4
 8009bb0:	2016      	movs	r0, #22
 8009bb2:	f7f8 fdd1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 8009bb6:	2104      	movs	r1, #4
 8009bb8:	2017      	movs	r0, #23
 8009bba:	f7f8 fdcd 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f7f8 fa02 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f007 fdfb 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009bce:	2001      	movs	r0, #1
 8009bd0:	f009 f94e 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f008 fa93 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009bde:	1dfb      	adds	r3, r7, #7
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2301      	movs	r3, #1
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	2000      	movs	r0, #0
 8009bee:	f005 f967 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009bf2:	f005 fbbd 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009bf6:	f005 fd37 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bfe:	f00c fbcb 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009c02:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009c06:	f7fb f9b7 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);												
 8009c0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c0e:	f00c fbc3 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 8009c12:	2001      	movs	r0, #1
 8009c14:	f006 fcde 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7fb f9ad 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c22:	f00c fbb9 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009c26:	2002      	movs	r0, #2
 8009c28:	f002 faf6 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009c2c:	f009 f8ea 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 8009c30:	2000      	movs	r0, #0
 8009c32:	f7fb f9a1 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009c36:	f7fe fb99 	bl	800836c <Failsafe_flag_off>
			break;
 8009c3a:	e1aa      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_3:
			SetLED(0x0e);
 8009c3c:	200e      	movs	r0, #14
 8009c3e:	f7f8 f9c3 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 8009c42:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8009d14 <MODE_exe_m3+0x394>
 8009c46:	f002 fef7 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009d1c <MODE_exe_m3+0x39c>
 8009c50:	f002 fe90 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009c54:	2001      	movs	r0, #1
 8009c56:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009d1c <MODE_exe_m3+0x39c>
 8009c5a:	f002 fe8b 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009c5e:	2002      	movs	r0, #2
 8009c60:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8009d1c <MODE_exe_m3+0x39c>
 8009c64:	f002 fe86 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);						
 8009c68:	2003      	movs	r0, #3
 8009c6a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009d1c <MODE_exe_m3+0x39c>
 8009c6e:	f002 fe81 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009c72:	2101      	movs	r1, #1
 8009c74:	2015      	movs	r0, #21
 8009c76:	f7f8 fd6f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	2016      	movs	r0, #22
 8009c7e:	f7f8 fd6b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009c82:	2101      	movs	r1, #1
 8009c84:	2017      	movs	r0, #23
 8009c86:	f7f8 fd67 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	f7f8 f99c 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	2000      	movs	r0, #0
 8009c96:	f007 fd95 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	f009 f8e8 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	f008 fa2d 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009caa:	1dfb      	adds	r3, r7, #7
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	2000      	movs	r0, #0
 8009cba:	f005 f901 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009cbe:	f005 fb57 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009cc2:	f005 fcd1 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009cc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cca:	f00c fb65 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009cce:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009cd2:	f7fb f951 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);		
 8009cd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cda:	f00c fb5d 	bl	8016398 <LL_mDelay>
			
			log_flag_on();
 8009cde:	f7fe fffd 	bl	8008cdc <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 8009ce2:	2002      	movs	r0, #2
 8009ce4:	f006 fc76 	bl	80105d4 <MAP_drive>

			log_flag_off();
 8009ce8:	f7ff f804 	bl	8008cf4 <log_flag_off>
			Set_DutyTIM8(0);
 8009cec:	2000      	movs	r0, #0
 8009cee:	f7fb f943 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cf6:	f00c fb4f 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009cfa:	2002      	movs	r0, #2
 8009cfc:	f002 fa8c 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009d00:	f009 f880 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009d04:	2000      	movs	r0, #0
 8009d06:	f7fb f937 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009d0a:	f7fe fb2f 	bl	800836c <Failsafe_flag_off>
			break;
 8009d0e:	e140      	b.n	8009f92 <MODE_exe_m3+0x612>
 8009d10:	2000b16c 	.word	0x2000b16c
 8009d14:	3f99999a 	.word	0x3f99999a
 8009d18:	3fe66666 	.word	0x3fe66666
 8009d1c:	3e99999a 	.word	0x3e99999a

		case MODE_4:
			SetLED(0x0e);
 8009d20:	200e      	movs	r0, #14
 8009d22:	f7f8 f951 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009d26:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009d2a:	f002 fe85 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009d2e:	2000      	movs	r0, #0
 8009d30:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8009d1c <MODE_exe_m3+0x39c>
 8009d34:	f002 fe1e 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009d38:	2001      	movs	r0, #1
 8009d3a:	ed1f 0a08 	vldr	s0, [pc, #-32]	; 8009d1c <MODE_exe_m3+0x39c>
 8009d3e:	f002 fe19 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009d42:	2002      	movs	r0, #2
 8009d44:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8009d1c <MODE_exe_m3+0x39c>
 8009d48:	f002 fe14 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009d4c:	2003      	movs	r0, #3
 8009d4e:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 8009d1c <MODE_exe_m3+0x39c>
 8009d52:	f002 fe0f 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009d56:	2102      	movs	r1, #2
 8009d58:	2015      	movs	r0, #21
 8009d5a:	f7f8 fcfd 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009d5e:	2102      	movs	r1, #2
 8009d60:	2016      	movs	r0, #22
 8009d62:	f7f8 fcf9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009d66:	2102      	movs	r1, #2
 8009d68:	2017      	movs	r0, #23
 8009d6a:	f7f8 fcf5 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f7f8 f92a 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009d74:	2200      	movs	r2, #0
 8009d76:	2100      	movs	r1, #0
 8009d78:	2000      	movs	r0, #0
 8009d7a:	f007 fd23 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009d7e:	2001      	movs	r0, #1
 8009d80:	f009 f876 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009d84:	2201      	movs	r2, #1
 8009d86:	2100      	movs	r1, #0
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f008 f9bb 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009d8e:	1dfb      	adds	r3, r7, #7
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	2301      	movs	r3, #1
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f005 f88f 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009da2:	f005 fae5 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009da6:	f005 fc5f 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dae:	f00c faf3 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009db2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009db6:	f7fb f8df 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009dbe:	f00c faeb 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009dc2:	2002      	movs	r0, #2
 8009dc4:	f006 fc06 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f7fb f8d5 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dd2:	f00c fae1 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009dd6:	2002      	movs	r0, #2
 8009dd8:	f002 fa1e 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009ddc:	f009 f812 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009de0:	2000      	movs	r0, #0
 8009de2:	f7fb f8c9 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009de6:	f7fe fac1 	bl	800836c <Failsafe_flag_off>
			break;
 8009dea:	e0d2      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_5:
			SetLED(0x0e);
 8009dec:	200e      	movs	r0, #14
 8009dee:	f7f8 f8eb 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 8009df2:	ed1f 0a37 	vldr	s0, [pc, #-220]	; 8009d18 <MODE_exe_m3+0x398>
 8009df6:	f002 fe1f 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 8009d1c <MODE_exe_m3+0x39c>
 8009e00:	f002 fdb8 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009e04:	2001      	movs	r0, #1
 8009e06:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 8009d1c <MODE_exe_m3+0x39c>
 8009e0a:	f002 fdb3 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009e0e:	2002      	movs	r0, #2
 8009e10:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 8009d1c <MODE_exe_m3+0x39c>
 8009e14:	f002 fdae 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009e18:	2003      	movs	r0, #3
 8009e1a:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 8009d1c <MODE_exe_m3+0x39c>
 8009e1e:	f002 fda9 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 8009e22:	2104      	movs	r1, #4
 8009e24:	2015      	movs	r0, #21
 8009e26:	f7f8 fc97 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	2016      	movs	r0, #22
 8009e2e:	f7f8 fc93 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 8009e32:	2104      	movs	r1, #4
 8009e34:	2017      	movs	r0, #23
 8009e36:	f7f8 fc8f 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	f7f8 f8c4 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	2000      	movs	r0, #0
 8009e46:	f007 fcbd 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f009 f810 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009e50:	2201      	movs	r2, #1
 8009e52:	2100      	movs	r1, #0
 8009e54:	2001      	movs	r0, #1
 8009e56:	f008 f955 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009e5a:	1dfb      	adds	r3, r7, #7
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	2301      	movs	r3, #1
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f005 f829 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009e6e:	f005 fa7f 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009e72:	f005 fbf9 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009e76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e7a:	f00c fa8d 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009e7e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009e82:	f7fb f879 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009e86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e8a:	f00c fa85 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009e8e:	2002      	movs	r0, #2
 8009e90:	f006 fba0 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009e94:	2000      	movs	r0, #0
 8009e96:	f7fb f86f 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e9e:	f00c fa7b 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009ea2:	2002      	movs	r0, #2
 8009ea4:	f002 f9b8 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009ea8:	f008 ffac 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009eac:	2000      	movs	r0, #0
 8009eae:	f7fb f863 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009eb2:	f7fe fa5b 	bl	800836c <Failsafe_flag_off>
			break;
 8009eb6:	e06c      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_6:
			SetLED(0x0e);
 8009eb8:	200e      	movs	r0, #14
 8009eba:	f7f8 f885 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009ebe:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009ec2:	f002 fdb9 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	ed1f 0a6c 	vldr	s0, [pc, #-432]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ecc:	f002 fd52 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ed6:	f002 fd4d 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 8009eda:	2002      	movs	r0, #2
 8009edc:	ed1f 0a71 	vldr	s0, [pc, #-452]	; 8009d1c <MODE_exe_m3+0x39c>
 8009ee0:	f002 fd48 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 8009ee4:	2003      	movs	r0, #3
 8009ee6:	ed1f 0a73 	vldr	s0, [pc, #-460]	; 8009d1c <MODE_exe_m3+0x39c>
 8009eea:	f002 fd43 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009eee:	2102      	movs	r1, #2
 8009ef0:	2015      	movs	r0, #21
 8009ef2:	f7f8 fc31 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	2016      	movs	r0, #22
 8009efa:	f7f8 fc2d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009efe:	2102      	movs	r1, #2
 8009f00:	2017      	movs	r0, #23
 8009f02:	f7f8 fc29 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009f06:	2000      	movs	r0, #0
 8009f08:	f7f8 f85e 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	2000      	movs	r0, #0
 8009f12:	f007 fc57 	bl	80117c4 <MAP_setPos>

			MAP_Goal_init();
 8009f16:	f007 fc43 	bl	80117a0 <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_def,GOAL_MAP_Y_def, BEST_WAY);
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f00a fb0a 	bl	8014538 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 8009f24:	2001      	movs	r0, #1
 8009f26:	f008 ffa3 	bl	8012e70 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_def,GOAL_MAP_Y_def, &en_endDir2);		// ドライブコマンド作成
 8009f2a:	1dfb      	adds	r3, r7, #7
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	2301      	movs	r3, #1
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f007 f94f 	bl	80111dc <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8009f3e:	f005 fa17 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();
 8009f42:	f005 fb91 	bl	800f668 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 8009f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f4a:	f00c fa25 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 8009f4e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009f52:	f7fb f811 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009f56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f5a:	f00c fa1d 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009f5e:	2002      	movs	r0, #2
 8009f60:	f006 fb38 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 8009f64:	2000      	movs	r0, #0
 8009f66:	f7fb f807 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 8009f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f6e:	f00c fa13 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009f72:	2002      	movs	r0, #2
 8009f74:	f002 f950 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 8009f78:	f008 ff44 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f7fa fffb 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009f82:	f7fe f9f3 	bl	800836c <Failsafe_flag_off>

			break;
 8009f86:	e004      	b.n	8009f92 <MODE_exe_m3+0x612>

		case MODE_7:
			SetLED(0x0e);
 8009f88:	200e      	movs	r0, #14
 8009f8a:	f7f8 f81d 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8009f8e:	e000      	b.n	8009f92 <MODE_exe_m3+0x612>

		default:
			break;
 8009f90:	bf00      	nop
	}
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop

08009f9c <MODE_exe_m4>:

void MODE_exe_m4( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	f04f 0300 	mov.w	r3, #0
 8009faa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 8009fae:	4be3      	ldr	r3, [pc, #908]	; (800a33c <MODE_exe_m4+0x3a0>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 8009fb4:	4be2      	ldr	r3, [pc, #904]	; (800a340 <MODE_exe_m4+0x3a4>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 8009fba:	4be2      	ldr	r3, [pc, #904]	; (800a344 <MODE_exe_m4+0x3a8>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 8009fc0:	f7fe fc56 	bl	8008870 <GYRO_SetRef>
	CTRL_clrData();
 8009fc4:	f7fb fbda 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 8009fc8:	f7fb fc2c 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 8009fcc:	f7fb fc3e 	bl	800584c <CTRL_clrNowData>

	switch( en_Mode ){
 8009fd0:	4bdd      	ldr	r3, [pc, #884]	; (800a348 <MODE_exe_m4+0x3ac>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	f200 81a5 	bhi.w	800a324 <MODE_exe_m4+0x388>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <MODE_exe_m4+0x44>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	0800a101 	.word	0x0800a101
 8009fe8:	0800a201 	.word	0x0800a201
 8009fec:	0800a2fd 	.word	0x0800a2fd
 8009ff0:	0800a305 	.word	0x0800a305
 8009ff4:	0800a30d 	.word	0x0800a30d
 8009ff8:	0800a315 	.word	0x0800a315
 8009ffc:	0800a31d 	.word	0x0800a31d

		case MODE_0:
			SetLED(0x0e);
 800a000:	200e      	movs	r0, #14
 800a002:	f7f7 ffe1 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800a006:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800a34c <MODE_exe_m4+0x3b0>
 800a00a:	f002 fd15 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800a00e:	2000      	movs	r0, #0
 800a010:	ed9f 0ace 	vldr	s0, [pc, #824]	; 800a34c <MODE_exe_m4+0x3b0>
 800a014:	f002 fcae 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 800a018:	2001      	movs	r0, #1
 800a01a:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800a34c <MODE_exe_m4+0x3b0>
 800a01e:	f002 fca9 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800a022:	2002      	movs	r0, #2
 800a024:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800a34c <MODE_exe_m4+0x3b0>
 800a028:	f002 fca4 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 800a02c:	2003      	movs	r0, #3
 800a02e:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 800a34c <MODE_exe_m4+0x3b0>
 800a032:	f002 fc9f 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a036:	2101      	movs	r1, #1
 800a038:	2015      	movs	r0, #21
 800a03a:	f7f8 fb8d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a03e:	2101      	movs	r1, #1
 800a040:	2016      	movs	r0, #22
 800a042:	f7f8 fb89 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a046:	2101      	movs	r1, #1
 800a048:	2017      	movs	r0, #23
 800a04a:	f7f8 fb85 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a04e:	2000      	movs	r0, #0
 800a050:	f7f7 ffba 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 800a054:	2064      	movs	r0, #100	; 0x64
 800a056:	f00c f99f 	bl	8016398 <LL_mDelay>
			MAP_Goalsize(1);
 800a05a:	2001      	movs	r0, #1
 800a05c:	f008 ff08 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	2000      	movs	r0, #0
 800a066:	f007 fbad 	bl	80117c4 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800a06a:	2301      	movs	r3, #1
 800a06c:	2200      	movs	r2, #0
 800a06e:	2100      	movs	r1, #0
 800a070:	2001      	movs	r0, #1
 800a072:	f009 ff4b 	bl	8013f0c <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a076:	f7f8 f825 	bl	80020c4 <SW_IsOn_1>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d006      	beq.n	800a08e <MODE_exe_m4+0xf2>
 800a080:	f7fe f980 	bl	8008384 <SYS_isOutOfCtrl>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <MODE_exe_m4+0xf2>
			else{
				map_write();
 800a08a:	f007 fb23 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 800a08e:	200e      	movs	r0, #14
 800a090:	f7f7 ff9a 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 800a094:	2001      	movs	r0, #1
 800a096:	f008 feeb 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 800a09a:	2000      	movs	r0, #0
 800a09c:	f7f7 ff94 	bl	8001fc8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	f009 ff30 	bl	8013f0c <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a0ac:	f7f8 f80a 	bl	80020c4 <SW_IsOn_1>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	f000 8138 	beq.w	800a328 <MODE_exe_m4+0x38c>
 800a0b8:	f7fe f964 	bl	8008384 <SYS_isOutOfCtrl>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f040 8132 	bne.w	800a328 <MODE_exe_m4+0x38c>
			else{
				map_write();
 800a0c4:	f007 fb06 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f007 fb79 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	f008 f814 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a0dc:	1dfb      	adds	r3, r7, #7
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f004 fee8 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a0f0:	f005 f93e 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 800a0f4:	f005 fab8 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f7f7 ff65 	bl	8001fc8 <SetLED>
			}
			break;
 800a0fe:	e113      	b.n	800a328 <MODE_exe_m4+0x38c>

		case MODE_1:
			SetLED(0x0e);
 800a100:	200e      	movs	r0, #14
 800a102:	f7f7 ff61 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800a106:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800a34c <MODE_exe_m4+0x3b0>
 800a10a:	f002 fc95 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800a10e:	2000      	movs	r0, #0
 800a110:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800a34c <MODE_exe_m4+0x3b0>
 800a114:	f002 fc2e 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 800a118:	2001      	movs	r0, #1
 800a11a:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800a34c <MODE_exe_m4+0x3b0>
 800a11e:	f002 fc29 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800a122:	2002      	movs	r0, #2
 800a124:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800a34c <MODE_exe_m4+0x3b0>
 800a128:	f002 fc24 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 800a12c:	2003      	movs	r0, #3
 800a12e:	ed9f 0a87 	vldr	s0, [pc, #540]	; 800a34c <MODE_exe_m4+0x3b0>
 800a132:	f002 fc1f 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a136:	2101      	movs	r1, #1
 800a138:	2015      	movs	r0, #21
 800a13a:	f7f8 fb0d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a13e:	2101      	movs	r1, #1
 800a140:	2016      	movs	r0, #22
 800a142:	f7f8 fb09 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a146:	2101      	movs	r1, #1
 800a148:	2017      	movs	r0, #23
 800a14a:	f7f8 fb05 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a14e:	2000      	movs	r0, #0
 800a150:	f7f7 ff3a 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 800a154:	2064      	movs	r0, #100	; 0x64
 800a156:	f00c f91f 	bl	8016398 <LL_mDelay>
			MAP_Goalsize(1);
 800a15a:	2001      	movs	r0, #1
 800a15c:	f008 fe88 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	2000      	movs	r0, #0
 800a166:	f007 fb2d 	bl	80117c4 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800a16a:	2301      	movs	r3, #1
 800a16c:	2200      	movs	r2, #0
 800a16e:	2100      	movs	r1, #0
 800a170:	2001      	movs	r0, #1
 800a172:	f00a f823 	bl	80141bc <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a176:	f7f7 ffa5 	bl	80020c4 <SW_IsOn_1>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d006      	beq.n	800a18e <MODE_exe_m4+0x1f2>
 800a180:	f7fe f900 	bl	8008384 <SYS_isOutOfCtrl>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <MODE_exe_m4+0x1f2>
			else{
				map_write();
 800a18a:	f007 faa3 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 800a18e:	200e      	movs	r0, #14
 800a190:	f7f7 ff1a 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 800a194:	2001      	movs	r0, #1
 800a196:	f008 fe6b 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 800a19a:	2000      	movs	r0, #0
 800a19c:	f7f7 ff14 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f00a f808 	bl	80141bc <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a1ac:	f7f7 ff8a 	bl	80020c4 <SW_IsOn_1>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	f000 80ba 	beq.w	800a32c <MODE_exe_m4+0x390>
 800a1b8:	f7fe f8e4 	bl	8008384 <SYS_isOutOfCtrl>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f040 80b4 	bne.w	800a32c <MODE_exe_m4+0x390>
			else{
				map_write();
 800a1c4:	f007 fa86 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f007 faf9 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f007 ff94 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a1dc:	1dfb      	adds	r3, r7, #7
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f004 fe68 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a1f0:	f005 f8be 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 800a1f4:	f005 fa38 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	f7f7 fee5 	bl	8001fc8 <SetLED>
			}
			break;
 800a1fe:	e095      	b.n	800a32c <MODE_exe_m4+0x390>

		case MODE_2:
			SetLED(0x0e);
 800a200:	200e      	movs	r0, #14
 800a202:	f7f7 fee1 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800a206:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800a34c <MODE_exe_m4+0x3b0>
 800a20a:	f002 fc15 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_90);							// スラロー�?開始速度設�?
 800a20e:	2000      	movs	r0, #0
 800a210:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800a34c <MODE_exe_m4+0x3b0>
 800a214:	f002 fbae 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_45);
 800a218:	2001      	movs	r0, #1
 800a21a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800a34c <MODE_exe_m4+0x3b0>
 800a21e:	f002 fba9 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_135);
 800a222:	2002      	movs	r0, #2
 800a224:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800a34c <MODE_exe_m4+0x3b0>
 800a228:	f002 fba4 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED , SLA_N90);							
 800a22c:	2003      	movs	r0, #3
 800a22e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800a34c <MODE_exe_m4+0x3b0>
 800a232:	f002 fb9f 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a236:	2101      	movs	r1, #1
 800a238:	2015      	movs	r0, #21
 800a23a:	f7f8 fa8d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a23e:	2101      	movs	r1, #1
 800a240:	2016      	movs	r0, #22
 800a242:	f7f8 fa89 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a246:	2101      	movs	r1, #1
 800a248:	2017      	movs	r0, #23
 800a24a:	f7f8 fa85 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a24e:	2000      	movs	r0, #0
 800a250:	f7f7 feba 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 800a254:	2064      	movs	r0, #100	; 0x64
 800a256:	f00c f89f 	bl	8016398 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			MAP_Goalsize(1);
 800a25a:	2001      	movs	r0, #1
 800a25c:	f008 fe08 	bl	8012e70 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	2000      	movs	r0, #0
 800a266:	f007 faad 	bl	80117c4 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800a26a:	2301      	movs	r3, #1
 800a26c:	2200      	movs	r2, #0
 800a26e:	2100      	movs	r1, #0
 800a270:	2001      	movs	r0, #1
 800a272:	f009 ffa3 	bl	80141bc <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a276:	f7f7 ff25 	bl	80020c4 <SW_IsOn_1>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d006      	beq.n	800a28e <MODE_exe_m4+0x2f2>
 800a280:	f7fe f880 	bl	8008384 <SYS_isOutOfCtrl>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <MODE_exe_m4+0x2f2>
			else{
				map_write();
 800a28a:	f007 fa23 	bl	80116d4 <map_write>
			}
			
			SetLED(0x0e);
 800a28e:	200e      	movs	r0, #14
 800a290:	f7f7 fe9a 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 800a294:	2001      	movs	r0, #1
 800a296:	f008 fdeb 	bl	8012e70 <MAP_Goalsize>
			SetLED(0x00);
 800a29a:	2000      	movs	r0, #0
 800a29c:	f7f7 fe94 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f009 ff88 	bl	80141bc <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800a2ac:	f7f7 ff0a 	bl	80020c4 <SW_IsOn_1>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d03c      	beq.n	800a330 <MODE_exe_m4+0x394>
 800a2b6:	f7fe f865 	bl	8008384 <SYS_isOutOfCtrl>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d137      	bne.n	800a330 <MODE_exe_m4+0x394>
			else{
				map_write();
 800a2c0:	f007 fa08 	bl	80116d4 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f007 fa7b 	bl	80117c4 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	f007 ff16 	bl	8012104 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a2d8:	1dfb      	adds	r3, r7, #7
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f004 fdea 	bl	800eec0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a2ec:	f005 f840 	bl	800f370 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 800a2f0:	f005 f9ba 	bl	800f668 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f7f7 fe67 	bl	8001fc8 <SetLED>
			}
			break;
 800a2fa:	e019      	b.n	800a330 <MODE_exe_m4+0x394>

		case MODE_3:
			SetLED(0x0e);
 800a2fc:	200e      	movs	r0, #14
 800a2fe:	f7f7 fe63 	bl	8001fc8 <SetLED>
			
			break;
 800a302:	e016      	b.n	800a332 <MODE_exe_m4+0x396>

		case MODE_4:
			SetLED(0x0e);
 800a304:	200e      	movs	r0, #14
 800a306:	f7f7 fe5f 	bl	8001fc8 <SetLED>
			break;
 800a30a:	e012      	b.n	800a332 <MODE_exe_m4+0x396>

		case MODE_5:
			SetLED(0x0e);
 800a30c:	200e      	movs	r0, #14
 800a30e:	f7f7 fe5b 	bl	8001fc8 <SetLED>
			break;
 800a312:	e00e      	b.n	800a332 <MODE_exe_m4+0x396>

		case MODE_6:
			SetLED(0x0e);
 800a314:	200e      	movs	r0, #14
 800a316:	f7f7 fe57 	bl	8001fc8 <SetLED>
			break;
 800a31a:	e00a      	b.n	800a332 <MODE_exe_m4+0x396>

		case MODE_7:
			SetLED(0x0e);
 800a31c:	200e      	movs	r0, #14
 800a31e:	f7f7 fe53 	bl	8001fc8 <SetLED>
			//cant use
			break;
 800a322:	e006      	b.n	800a332 <MODE_exe_m4+0x396>

		default:
			break;
 800a324:	bf00      	nop
 800a326:	e004      	b.n	800a332 <MODE_exe_m4+0x396>
			break;
 800a328:	bf00      	nop
 800a32a:	e002      	b.n	800a332 <MODE_exe_m4+0x396>
			break;
 800a32c:	bf00      	nop
 800a32e:	e000      	b.n	800a332 <MODE_exe_m4+0x396>
			break;
 800a330:	bf00      	nop
	}
}
 800a332:	bf00      	nop
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	2000042c 	.word	0x2000042c
 800a340:	20000838 	.word	0x20000838
 800a344:	20000c64 	.word	0x20000c64
 800a348:	2000b16c 	.word	0x2000b16c
 800a34c:	3e99999a 	.word	0x3e99999a

0800a350 <MODE_exe_m5>:

void MODE_exe_m5( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	printf("\r\n turn 45 \r\r");
 800a362:	48c2      	ldr	r0, [pc, #776]	; (800a66c <MODE_exe_m5+0x31c>)
 800a364:	f00c ff88 	bl	8017278 <iprintf>
	PARAM_makeSra( 0.6, 550.0f, 7.50f, SLA_45 );
 800a368:	2001      	movs	r0, #1
 800a36a:	eeb1 1a0e 	vmov.f32	s2, #30	; 0x40f00000  7.5
 800a36e:	eddf 0ac0 	vldr	s1, [pc, #768]	; 800a670 <MODE_exe_m5+0x320>
 800a372:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800a698 <MODE_exe_m5+0x348>
 800a376:	f7f8 fa83 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a37a:	48be      	ldr	r0, [pc, #760]	; (800a674 <MODE_exe_m5+0x324>)
 800a37c:	f00c ff7c 	bl	8017278 <iprintf>
	PARAM_makeSra( 0.6, 900.0f, 10.00f, SLA_90 );	
 800a380:	2000      	movs	r0, #0
 800a382:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800a386:	eddf 0abc 	vldr	s1, [pc, #752]	; 800a678 <MODE_exe_m5+0x328>
 800a38a:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 800a698 <MODE_exe_m5+0x348>
 800a38e:	f7f8 fa77 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
 800a392:	48ba      	ldr	r0, [pc, #744]	; (800a67c <MODE_exe_m5+0x32c>)
 800a394:	f00c ff70 	bl	8017278 <iprintf>
	PARAM_makeSra( 0.6, 850.0f, 18.00f, SLA_135 );	
 800a398:	2002      	movs	r0, #2
 800a39a:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 800a39e:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800a680 <MODE_exe_m5+0x330>
 800a3a2:	ed9f 0abd 	vldr	s0, [pc, #756]	; 800a698 <MODE_exe_m5+0x348>
 800a3a6:	f7f8 fa6b 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800a3aa:	48b6      	ldr	r0, [pc, #728]	; (800a684 <MODE_exe_m5+0x334>)
 800a3ac:	f00c ff64 	bl	8017278 <iprintf>
	PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
 800a3b0:	2003      	movs	r0, #3
 800a3b2:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 800a3b6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800a688 <MODE_exe_m5+0x338>
 800a3ba:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800a698 <MODE_exe_m5+0x348>
 800a3be:	f7f8 fa5f 	bl	8002880 <PARAM_makeSra>

	map_copy();
 800a3c2:	f007 f99b 	bl	80116fc <map_copy>

	GYRO_SetRef();
 800a3c6:	f7fe fa53 	bl	8008870 <GYRO_SetRef>
	CTRL_clrData();
 800a3ca:	f7fb f9d7 	bl	800577c <CTRL_clrData>
	CTRL_clrAngleErrSum();
 800a3ce:	f7fb fa29 	bl	8005824 <CTRL_clrAngleErrSum>
	CTRL_clrNowData();
 800a3d2:	f7fb fa3b 	bl	800584c <CTRL_clrNowData>

	switch( en_Mode ){
 800a3d6:	4bad      	ldr	r3, [pc, #692]	; (800a68c <MODE_exe_m5+0x33c>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b07      	cmp	r3, #7
 800a3dc:	f200 8300 	bhi.w	800a9e0 <MODE_exe_m5+0x690>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <MODE_exe_m5+0x98>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a409 	.word	0x0800a409
 800a3ec:	0800a4d5 	.word	0x0800a4d5
 800a3f0:	0800a5a1 	.word	0x0800a5a1
 800a3f4:	0800a69d 	.word	0x0800a69d
 800a3f8:	0800a771 	.word	0x0800a771
 800a3fc:	0800a83d 	.word	0x0800a83d
 800a400:	0800a909 	.word	0x0800a909
 800a404:	0800a9d9 	.word	0x0800a9d9

		case MODE_0:
			SetLED(0x0e);
 800a408:	200e      	movs	r0, #14
 800a40a:	f7f7 fddd 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 800a40e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800a690 <MODE_exe_m5+0x340>
 800a412:	f002 fb11 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a416:	2000      	movs	r0, #0
 800a418:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800a698 <MODE_exe_m5+0x348>
 800a41c:	f002 faaa 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a420:	2001      	movs	r0, #1
 800a422:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800a698 <MODE_exe_m5+0x348>
 800a426:	f002 faa5 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a42a:	2002      	movs	r0, #2
 800a42c:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800a698 <MODE_exe_m5+0x348>
 800a430:	f002 faa0 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a434:	2003      	movs	r0, #3
 800a436:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a698 <MODE_exe_m5+0x348>
 800a43a:	f002 fa9b 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a43e:	2101      	movs	r1, #1
 800a440:	2015      	movs	r0, #21
 800a442:	f7f8 f989 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a446:	2101      	movs	r1, #1
 800a448:	2016      	movs	r0, #22
 800a44a:	f7f8 f985 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a44e:	2101      	movs	r1, #1
 800a450:	2017      	movs	r0, #23
 800a452:	f7f8 f981 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);	
 800a456:	2000      	movs	r0, #0
 800a458:	f7f7 fdb6 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a45c:	2200      	movs	r2, #0
 800a45e:	2100      	movs	r1, #0
 800a460:	2000      	movs	r0, #0
 800a462:	f007 f9af 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a466:	2001      	movs	r0, #1
 800a468:	f008 fd02 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a46c:	2201      	movs	r2, #1
 800a46e:	2100      	movs	r1, #0
 800a470:	2001      	movs	r0, #1
 800a472:	f007 fe47 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a476:	1dfb      	adds	r3, r7, #7
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	2301      	movs	r3, #1
 800a480:	2200      	movs	r2, #0
 800a482:	2100      	movs	r1, #0
 800a484:	2000      	movs	r0, #0
 800a486:	f004 fd1b 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a48a:	f004 ff71 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a48e:	f005 f8eb 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a496:	f00b ff7f 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a49a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a49e:	f7fa fd6b 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);	
 800a4a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4a6:	f00b ff77 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );												
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	f006 f892 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f7fa fd61 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a4b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4ba:	f00b ff6d 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a4be:	2002      	movs	r0, #2
 800a4c0:	f001 feaa 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a4c4:	f008 fc9e 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	f7fa fd55 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a4ce:	f7fd ff4d 	bl	800836c <Failsafe_flag_off>
			break;
 800a4d2:	e286      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_1:
			SetLED(0x0e);
 800a4d4:	200e      	movs	r0, #14
 800a4d6:	f7f7 fd77 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 800a4da:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800a4de:	f002 faab 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800a698 <MODE_exe_m5+0x348>
 800a4e8:	f002 fa44 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800a698 <MODE_exe_m5+0x348>
 800a4f2:	f002 fa3f 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a4f6:	2002      	movs	r0, #2
 800a4f8:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800a698 <MODE_exe_m5+0x348>
 800a4fc:	f002 fa3a 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a500:	2003      	movs	r0, #3
 800a502:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800a698 <MODE_exe_m5+0x348>
 800a506:	f002 fa35 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 800a50a:	2102      	movs	r1, #2
 800a50c:	2015      	movs	r0, #21
 800a50e:	f7f8 f923 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 800a512:	2102      	movs	r1, #2
 800a514:	2016      	movs	r0, #22
 800a516:	f7f8 f91f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 800a51a:	2102      	movs	r1, #2
 800a51c:	2017      	movs	r0, #23
 800a51e:	f7f8 f91b 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a522:	2000      	movs	r0, #0
 800a524:	f7f7 fd50 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	2000      	movs	r0, #0
 800a52e:	f007 f949 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a532:	2001      	movs	r0, #1
 800a534:	f008 fc9c 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a538:	2201      	movs	r2, #1
 800a53a:	2100      	movs	r1, #0
 800a53c:	2001      	movs	r0, #1
 800a53e:	f007 fde1 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a542:	1dfb      	adds	r3, r7, #7
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	2300      	movs	r3, #0
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	2301      	movs	r3, #1
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	2000      	movs	r0, #0
 800a552:	f004 fcb5 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a556:	f004 ff0b 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a55a:	f005 f885 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a55e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a562:	f00b ff19 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a566:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a56a:	f7fa fd05 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a56e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a572:	f00b ff11 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 800a576:	2001      	movs	r0, #1
 800a578:	f006 f82c 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a57c:	2000      	movs	r0, #0
 800a57e:	f7fa fcfb 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a586:	f00b ff07 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a58a:	2002      	movs	r0, #2
 800a58c:	f001 fe44 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a590:	f008 fc38 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a594:	2000      	movs	r0, #0
 800a596:	f7fa fcef 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a59a:	f7fd fee7 	bl	800836c <Failsafe_flag_off>
			break;
 800a59e:	e220      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_2:
			SetLED(0x0e);
 800a5a0:	200e      	movs	r0, #14
 800a5a2:	f7f7 fd11 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a5a6:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800a694 <MODE_exe_m5+0x344>
 800a5aa:	f002 fa45 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800a698 <MODE_exe_m5+0x348>
 800a5b4:	f002 f9de 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a5b8:	2001      	movs	r0, #1
 800a5ba:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800a698 <MODE_exe_m5+0x348>
 800a5be:	f002 f9d9 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a5c2:	2002      	movs	r0, #2
 800a5c4:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800a698 <MODE_exe_m5+0x348>
 800a5c8:	f002 f9d4 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a5cc:	2003      	movs	r0, #3
 800a5ce:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800a698 <MODE_exe_m5+0x348>
 800a5d2:	f002 f9cf 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a5d6:	2104      	movs	r1, #4
 800a5d8:	2015      	movs	r0, #21
 800a5da:	f7f8 f8bd 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a5de:	2104      	movs	r1, #4
 800a5e0:	2016      	movs	r0, #22
 800a5e2:	f7f8 f8b9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a5e6:	2104      	movs	r1, #4
 800a5e8:	2017      	movs	r0, #23
 800a5ea:	f7f8 f8b5 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	f7f7 fcea 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f007 f8e3 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a5fe:	2001      	movs	r0, #1
 800a600:	f008 fc36 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a604:	2201      	movs	r2, #1
 800a606:	2100      	movs	r1, #0
 800a608:	2001      	movs	r0, #1
 800a60a:	f007 fd7b 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a60e:	1dfb      	adds	r3, r7, #7
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	2300      	movs	r3, #0
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	2301      	movs	r3, #1
 800a618:	2200      	movs	r2, #0
 800a61a:	2100      	movs	r1, #0
 800a61c:	2000      	movs	r0, #0
 800a61e:	f004 fc4f 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a622:	f004 fea5 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a626:	f005 f81f 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a62a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a62e:	f00b feb3 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a632:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a636:	f7fa fc9f 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800a63a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a63e:	f00b feab 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 800a642:	2001      	movs	r0, #1
 800a644:	f005 ffc6 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a648:	2000      	movs	r0, #0
 800a64a:	f7fa fc95 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a64e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a652:	f00b fea1 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a656:	2002      	movs	r0, #2
 800a658:	f001 fdde 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a65c:	f008 fbd2 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800a660:	2000      	movs	r0, #0
 800a662:	f7fa fc89 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a666:	f7fd fe81 	bl	800836c <Failsafe_flag_off>
			break;
 800a66a:	e1ba      	b.n	800a9e2 <MODE_exe_m5+0x692>
 800a66c:	0801c41c 	.word	0x0801c41c
 800a670:	44098000 	.word	0x44098000
 800a674:	0801c42c 	.word	0x0801c42c
 800a678:	44610000 	.word	0x44610000
 800a67c:	0801c43c 	.word	0x0801c43c
 800a680:	44548000 	.word	0x44548000
 800a684:	0801c40c 	.word	0x0801c40c
 800a688:	44bb8000 	.word	0x44bb8000
 800a68c:	2000b16c 	.word	0x2000b16c
 800a690:	3f99999a 	.word	0x3f99999a
 800a694:	3fe66666 	.word	0x3fe66666
 800a698:	3f19999a 	.word	0x3f19999a

		case MODE_3:
			SetLED(0x0e);
 800a69c:	200e      	movs	r0, #14
 800a69e:	f7f7 fc93 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 800a6a2:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 800a690 <MODE_exe_m5+0x340>
 800a6a6:	f002 f9c7 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 800a698 <MODE_exe_m5+0x348>
 800a6b0:	f002 f960 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	ed1f 0a08 	vldr	s0, [pc, #-32]	; 800a698 <MODE_exe_m5+0x348>
 800a6ba:	f002 f95b 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a6be:	2002      	movs	r0, #2
 800a6c0:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 800a698 <MODE_exe_m5+0x348>
 800a6c4:	f002 f956 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);								
 800a6c8:	2003      	movs	r0, #3
 800a6ca:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 800a698 <MODE_exe_m5+0x348>
 800a6ce:	f002 f951 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	2015      	movs	r0, #21
 800a6d6:	f7f8 f83f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a6da:	2101      	movs	r1, #1
 800a6dc:	2016      	movs	r0, #22
 800a6de:	f7f8 f83b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	2017      	movs	r0, #23
 800a6e6:	f7f8 f837 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f7f7 fc6c 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f007 f865 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	f008 fbb8 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a700:	2201      	movs	r2, #1
 800a702:	2100      	movs	r1, #0
 800a704:	2001      	movs	r0, #1
 800a706:	f007 fcfd 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a70a:	1dfb      	adds	r3, r7, #7
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	2300      	movs	r3, #0
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	2301      	movs	r3, #1
 800a714:	2200      	movs	r2, #0
 800a716:	2100      	movs	r1, #0
 800a718:	2000      	movs	r0, #0
 800a71a:	f004 fbd1 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a71e:	f004 fe27 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a722:	f004 ffa1 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a72a:	f00b fe35 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a72e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a732:	f7fa fc21 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);			
 800a736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a73a:	f00b fe2d 	bl	8016398 <LL_mDelay>

			log_flag_on();										
 800a73e:	f7fe facd 	bl	8008cdc <log_flag_on>
			MAP_drive( MAP_DRIVE_SKEW );
 800a742:	2002      	movs	r0, #2
 800a744:	f005 ff46 	bl	80105d4 <MAP_drive>
			log_flag_off();
 800a748:	f7fe fad4 	bl	8008cf4 <log_flag_off>
			Set_DutyTIM8(0);
 800a74c:	2000      	movs	r0, #0
 800a74e:	f7fa fc13 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a756:	f00b fe1f 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a75a:	2002      	movs	r0, #2
 800a75c:	f001 fd5c 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a760:	f008 fb50 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a764:	2000      	movs	r0, #0
 800a766:	f7fa fc07 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a76a:	f7fd fdff 	bl	800836c <Failsafe_flag_off>
			break;
 800a76e:	e138      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_4:
			SetLED(0x0e);
 800a770:	200e      	movs	r0, #14
 800a772:	f7f7 fc29 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 800a776:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800a77a:	f002 f95d 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a77e:	2000      	movs	r0, #0
 800a780:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 800a698 <MODE_exe_m5+0x348>
 800a784:	f002 f8f6 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a788:	2001      	movs	r0, #1
 800a78a:	ed1f 0a3d 	vldr	s0, [pc, #-244]	; 800a698 <MODE_exe_m5+0x348>
 800a78e:	f002 f8f1 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a792:	2002      	movs	r0, #2
 800a794:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 800a698 <MODE_exe_m5+0x348>
 800a798:	f002 f8ec 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a79c:	2003      	movs	r0, #3
 800a79e:	ed1f 0a42 	vldr	s0, [pc, #-264]	; 800a698 <MODE_exe_m5+0x348>
 800a7a2:	f002 f8e7 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	2015      	movs	r0, #21
 800a7aa:	f7f7 ffd5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	2016      	movs	r0, #22
 800a7b2:	f7f7 ffd1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	2017      	movs	r0, #23
 800a7ba:	f7f7 ffcd 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f7f7 fc02 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	f006 fffb 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f008 fb4e 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	2001      	movs	r0, #1
 800a7da:	f007 fc93 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a7de:	1dfb      	adds	r3, r7, #7
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	f004 fb67 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a7f2:	f004 fdbd 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a7f6:	f004 ff37 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a7fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a7fe:	f00b fdcb 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a802:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a806:	f7fa fbb7 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a80a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a80e:	f00b fdc3 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a812:	2002      	movs	r0, #2
 800a814:	f005 fede 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a818:	2000      	movs	r0, #0
 800a81a:	f7fa fbad 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a81e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a822:	f00b fdb9 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a826:	2002      	movs	r0, #2
 800a828:	f001 fcf6 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a82c:	f008 faea 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a830:	2000      	movs	r0, #0
 800a832:	f7fa fba1 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a836:	f7fd fd99 	bl	800836c <Failsafe_flag_off>
			break;
 800a83a:	e0d2      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_5:
			SetLED(0x0e);
 800a83c:	200e      	movs	r0, #14
 800a83e:	f7f7 fbc3 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a842:	ed1f 0a6c 	vldr	s0, [pc, #-432]	; 800a694 <MODE_exe_m5+0x344>
 800a846:	f002 f8f7 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a84a:	2000      	movs	r0, #0
 800a84c:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 800a698 <MODE_exe_m5+0x348>
 800a850:	f002 f890 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a854:	2001      	movs	r0, #1
 800a856:	ed1f 0a70 	vldr	s0, [pc, #-448]	; 800a698 <MODE_exe_m5+0x348>
 800a85a:	f002 f88b 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a85e:	2002      	movs	r0, #2
 800a860:	ed1f 0a73 	vldr	s0, [pc, #-460]	; 800a698 <MODE_exe_m5+0x348>
 800a864:	f002 f886 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a868:	2003      	movs	r0, #3
 800a86a:	ed1f 0a75 	vldr	s0, [pc, #-468]	; 800a698 <MODE_exe_m5+0x348>
 800a86e:	f002 f881 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a872:	2104      	movs	r1, #4
 800a874:	2015      	movs	r0, #21
 800a876:	f7f7 ff6f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a87a:	2104      	movs	r1, #4
 800a87c:	2016      	movs	r0, #22
 800a87e:	f7f7 ff6b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a882:	2104      	movs	r1, #4
 800a884:	2017      	movs	r0, #23
 800a886:	f7f7 ff67 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a88a:	2000      	movs	r0, #0
 800a88c:	f7f7 fb9c 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	2000      	movs	r0, #0
 800a896:	f006 ff95 	bl	80117c4 <MAP_setPos>
			MAP_Goalsize(1);
 800a89a:	2001      	movs	r0, #1
 800a89c:	f008 fae8 	bl	8012e70 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	f007 fc2d 	bl	8012104 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a8aa:	1dfb      	adds	r3, r7, #7
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	f004 fb01 	bl	800eec0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a8be:	f004 fd57 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a8c2:	f004 fed1 	bl	800f668 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a8c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8ca:	f00b fd65 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a8ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a8d2:	f7fa fb51 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a8d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8da:	f00b fd5d 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a8de:	2002      	movs	r0, #2
 800a8e0:	f005 fe78 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f7fa fb47 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a8ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8ee:	f00b fd53 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a8f2:	2002      	movs	r0, #2
 800a8f4:	f001 fc90 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a8f8:	f008 fa84 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f7fa fb3b 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a902:	f7fd fd33 	bl	800836c <Failsafe_flag_off>
			break;
 800a906:	e06c      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_6:
			SetLED(0x0e);
 800a908:	200e      	movs	r0, #14
 800a90a:	f7f7 fb5d 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a90e:	ed1f 0a9f 	vldr	s0, [pc, #-636]	; 800a694 <MODE_exe_m5+0x344>
 800a912:	f002 f891 	bl	800ca38 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_90);							// スラロー�?開始速度設�?
 800a916:	2000      	movs	r0, #0
 800a918:	ed1f 0aa1 	vldr	s0, [pc, #-644]	; 800a698 <MODE_exe_m5+0x348>
 800a91c:	f002 f82a 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_45);
 800a920:	2001      	movs	r0, #1
 800a922:	ed1f 0aa3 	vldr	s0, [pc, #-652]	; 800a698 <MODE_exe_m5+0x348>
 800a926:	f002 f825 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_135);
 800a92a:	2002      	movs	r0, #2
 800a92c:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 800a698 <MODE_exe_m5+0x348>
 800a930:	f002 f820 	bl	800c974 <MOT_setSuraStaSpeed>
			MOT_setSuraStaSpeed( 0.6 , SLA_N90);							
 800a934:	2003      	movs	r0, #3
 800a936:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 800a698 <MODE_exe_m5+0x348>
 800a93a:	f002 f81b 	bl	800c974 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a93e:	2104      	movs	r1, #4
 800a940:	2015      	movs	r0, #21
 800a942:	f7f7 ff09 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a946:	2104      	movs	r1, #4
 800a948:	2016      	movs	r0, #22
 800a94a:	f7f7 ff05 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a94e:	2104      	movs	r1, #4
 800a950:	2017      	movs	r0, #23
 800a952:	f7f7 ff01 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a956:	2000      	movs	r0, #0
 800a958:	f7f7 fb36 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a95c:	2200      	movs	r2, #0
 800a95e:	2100      	movs	r1, #0
 800a960:	2000      	movs	r0, #0
 800a962:	f006 ff2f 	bl	80117c4 <MAP_setPos>

			MAP_Goal_init();
 800a966:	f006 ff1b 	bl	80117a0 <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_def,GOAL_MAP_Y_def, BEST_WAY);
 800a96a:	2201      	movs	r2, #1
 800a96c:	2100      	movs	r1, #0
 800a96e:	2001      	movs	r0, #1
 800a970:	f009 fde2 	bl	8014538 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800a974:	2001      	movs	r0, #1
 800a976:	f008 fa7b 	bl	8012e70 <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_def,GOAL_MAP_Y_def, &en_endDir2);		// ドライブコマンド作成
 800a97a:	1dfb      	adds	r3, r7, #7
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	2300      	movs	r3, #0
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	2301      	movs	r3, #1
 800a984:	2200      	movs	r2, #0
 800a986:	2100      	movs	r1, #0
 800a988:	2000      	movs	r0, #0
 800a98a:	f006 fc27 	bl	80111dc <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 800a98e:	f004 fcef 	bl	800f370 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();
 800a992:	f004 fe69 	bl	800f668 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800a996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a99a:	f00b fcfd 	bl	8016398 <LL_mDelay>
			Set_DutyTIM8(600);
 800a99e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a9a2:	f7fa fae9 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a9a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9aa:	f00b fcf5 	bl	8016398 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a9ae:	2002      	movs	r0, #2
 800a9b0:	f005 fe10 	bl	80105d4 <MAP_drive>
			Set_DutyTIM8(0);
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f7fa fadf 	bl	8004f78 <Set_DutyTIM8>
			LL_mDelay(500);
 800a9ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a9be:	f00b fceb 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a9c2:	2002      	movs	r0, #2
 800a9c4:	f001 fc28 	bl	800c218 <MOT_turn>
			MAP_actGoalLED();
 800a9c8:	f008 fa1c 	bl	8012e04 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7fa fad3 	bl	8004f78 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a9d2:	f7fd fccb 	bl	800836c <Failsafe_flag_off>
			break;
 800a9d6:	e004      	b.n	800a9e2 <MODE_exe_m5+0x692>

		case MODE_7:
			SetLED(0x0e);
 800a9d8:	200e      	movs	r0, #14
 800a9da:	f7f7 faf5 	bl	8001fc8 <SetLED>
			//cant use
			break;
 800a9de:	e000      	b.n	800a9e2 <MODE_exe_m5+0x692>

		default:
			break;
 800a9e0:	bf00      	nop
	}
	printf("\r\n turn 45 \r\r");
 800a9e2:	481a      	ldr	r0, [pc, #104]	; (800aa4c <MODE_exe_m5+0x6fc>)
 800a9e4:	f00c fc48 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 800a9ee:	eddf 0a18 	vldr	s1, [pc, #96]	; 800aa50 <MODE_exe_m5+0x700>
 800a9f2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800aa54 <MODE_exe_m5+0x704>
 800a9f6:	f7f7 ff43 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a9fa:	4817      	ldr	r0, [pc, #92]	; (800aa58 <MODE_exe_m5+0x708>)
 800a9fc:	f00c fc3c 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 800aa00:	2000      	movs	r0, #0
 800aa02:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 800aa06:	eddf 0a15 	vldr	s1, [pc, #84]	; 800aa5c <MODE_exe_m5+0x70c>
 800aa0a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800aa54 <MODE_exe_m5+0x704>
 800aa0e:	f7f7 ff37 	bl	8002880 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800aa12:	4813      	ldr	r0, [pc, #76]	; (800aa60 <MODE_exe_m5+0x710>)
 800aa14:	f00c fc30 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 800aa18:	2002      	movs	r0, #2
 800aa1a:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800aa1e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800aa5c <MODE_exe_m5+0x70c>
 800aa22:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800aa54 <MODE_exe_m5+0x704>
 800aa26:	f7f7 ff2b 	bl	8002880 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800aa2a:	480e      	ldr	r0, [pc, #56]	; (800aa64 <MODE_exe_m5+0x714>)
 800aa2c:	f00c fc24 	bl	8017278 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );	
 800aa30:	2003      	movs	r0, #3
 800aa32:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800aa36:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800aa68 <MODE_exe_m5+0x718>
 800aa3a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800aa54 <MODE_exe_m5+0x704>
 800aa3e:	f7f7 ff1f 	bl	8002880 <PARAM_makeSra>
}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0801c41c 	.word	0x0801c41c
 800aa50:	42c80000 	.word	0x42c80000
 800aa54:	3e99999a 	.word	0x3e99999a
 800aa58:	0801c42c 	.word	0x0801c42c
 800aa5c:	43480000 	.word	0x43480000
 800aa60:	0801c43c 	.word	0x0801c43c
 800aa64:	0801c40c 	.word	0x0801c40c
 800aa68:	43960000 	.word	0x43960000

0800aa6c <MODE_exe>:


void MODE_exe( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
//	uint16_t *read;
	enMAP_HEAD_DIR		en_endDir;

	now_mode = mode_1;
 800aa70:	4bc3      	ldr	r3, [pc, #780]	; (800ad80 <MODE_exe+0x314>)
 800aa72:	2201      	movs	r2, #1
 800aa74:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	LL_mDelay(300);
 800aa76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800aa7a:	f00b fc8d 	bl	8016398 <LL_mDelay>
	GYRO_SetRef();
 800aa7e:	f7fd fef7 	bl	8008870 <GYRO_SetRef>
	ENC_setref();
 800aa82:	f7fd fe55 	bl	8008730 <ENC_setref>
	Failsafe_flag_off();
 800aa86:	f7fd fc71 	bl	800836c <Failsafe_flag_off>
//	log_flag_on();	

	switch( en_Mode ){
 800aa8a:	4bbe      	ldr	r3, [pc, #760]	; (800ad84 <MODE_exe+0x318>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b07      	cmp	r3, #7
 800aa90:	f200 8172 	bhi.w	800ad78 <MODE_exe+0x30c>
 800aa94:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <MODE_exe+0x30>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800aabd 	.word	0x0800aabd
 800aaa0:	0800ab2d 	.word	0x0800ab2d
 800aaa4:	0800ab9d 	.word	0x0800ab9d
 800aaa8:	0800ac0d 	.word	0x0800ac0d
 800aaac:	0800ac7d 	.word	0x0800ac7d
 800aab0:	0800acf9 	.word	0x0800acf9
 800aab4:	0800ad69 	.word	0x0800ad69
 800aab8:	0800ad71 	.word	0x0800ad71

		case MODE_0://tune	
			SetLED(0x0e);
 800aabc:	200e      	movs	r0, #14
 800aabe:	f7f7 fa83 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800aac2:	4bb0      	ldr	r3, [pc, #704]	; (800ad84 <MODE_exe+0x318>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800aac8:	2064      	movs	r0, #100	; 0x64
 800aaca:	f00b fc65 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800aace:	2000      	movs	r0, #0
 800aad0:	f7f7 fa7a 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800aad4:	4baa      	ldr	r3, [pc, #680]	; (800ad80 <MODE_exe+0x314>)
 800aad6:	2210      	movs	r2, #16
 800aad8:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800aada:	f7f7 faf3 	bl	80020c4 <SW_IsOn_1>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d108      	bne.n	800aaf6 <MODE_exe+0x8a>
					MODE_inc();								
 800aae4:	f7fe fa40 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800aae8:	20c8      	movs	r0, #200	; 0xc8
 800aaea:	f00b fc55 	bl	8016398 <LL_mDelay>
					printf("mode selecting_0\r\n");
 800aaee:	48a6      	ldr	r0, [pc, #664]	; (800ad88 <MODE_exe+0x31c>)
 800aaf0:	f00c fc30 	bl	8017354 <puts>
 800aaf4:	e7f1      	b.n	800aada <MODE_exe+0x6e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800aaf6:	f7f7 fad9 	bl	80020ac <SW_IsOn_0>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d004      	beq.n	800ab0a <MODE_exe+0x9e>
 800ab00:	f000 f99f 	bl	800ae42 <MODE_CheckExe>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0e7      	beq.n	800aada <MODE_exe+0x6e>
					MODE_exe_m0();								
 800ab0a:	f7fe fa9f 	bl	800904c <MODE_exe_m0>
					LL_mDelay(200);				
 800ab0e:	20c8      	movs	r0, #200	; 0xc8
 800ab10:	f00b fc42 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800ab14:	4b9b      	ldr	r3, [pc, #620]	; (800ad84 <MODE_exe+0x318>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b07      	cmp	r3, #7
 800ab1a:	d1de      	bne.n	800aada <MODE_exe+0x6e>
						now_mode = mode_1;
 800ab1c:	4b98      	ldr	r3, [pc, #608]	; (800ad80 <MODE_exe+0x314>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	701a      	strb	r2, [r3, #0]
						break;
 800ab22:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_0;
 800ab24:	4b97      	ldr	r3, [pc, #604]	; (800ad84 <MODE_exe+0x318>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	701a      	strb	r2, [r3, #0]
			break;
 800ab2a:	e126      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_1://flash
			SetLED(0x0e);
 800ab2c:	200e      	movs	r0, #14
 800ab2e:	f7f7 fa4b 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800ab32:	4b94      	ldr	r3, [pc, #592]	; (800ad84 <MODE_exe+0x318>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800ab38:	2064      	movs	r0, #100	; 0x64
 800ab3a:	f00b fc2d 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800ab3e:	2000      	movs	r0, #0
 800ab40:	f7f7 fa42 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800ab44:	4b8e      	ldr	r3, [pc, #568]	; (800ad80 <MODE_exe+0x314>)
 800ab46:	2210      	movs	r2, #16
 800ab48:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800ab4a:	f7f7 fabb 	bl	80020c4 <SW_IsOn_1>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d108      	bne.n	800ab66 <MODE_exe+0xfa>
					MODE_inc();								
 800ab54:	f7fe fa08 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800ab58:	20c8      	movs	r0, #200	; 0xc8
 800ab5a:	f00b fc1d 	bl	8016398 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800ab5e:	488b      	ldr	r0, [pc, #556]	; (800ad8c <MODE_exe+0x320>)
 800ab60:	f00c fbf8 	bl	8017354 <puts>
 800ab64:	e7f1      	b.n	800ab4a <MODE_exe+0xde>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800ab66:	f7f7 faa1 	bl	80020ac <SW_IsOn_0>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d004      	beq.n	800ab7a <MODE_exe+0x10e>
 800ab70:	f000 f967 	bl	800ae42 <MODE_CheckExe>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0e7      	beq.n	800ab4a <MODE_exe+0xde>
					MODE_exe_m1();								
 800ab7a:	f7fe fcaf 	bl	80094dc <MODE_exe_m1>
					LL_mDelay(200);				
 800ab7e:	20c8      	movs	r0, #200	; 0xc8
 800ab80:	f00b fc0a 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800ab84:	4b7f      	ldr	r3, [pc, #508]	; (800ad84 <MODE_exe+0x318>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b07      	cmp	r3, #7
 800ab8a:	d1de      	bne.n	800ab4a <MODE_exe+0xde>
						now_mode = mode_1;
 800ab8c:	4b7c      	ldr	r3, [pc, #496]	; (800ad80 <MODE_exe+0x314>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]
						break;
 800ab92:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_1;
 800ab94:	4b7b      	ldr	r3, [pc, #492]	; (800ad84 <MODE_exe+0x318>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	701a      	strb	r2, [r3, #0]
			break;
 800ab9a:	e0ee      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_2://search wall hit
			SetLED(0x0e);
 800ab9c:	200e      	movs	r0, #14
 800ab9e:	f7f7 fa13 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800aba2:	4b78      	ldr	r3, [pc, #480]	; (800ad84 <MODE_exe+0x318>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800aba8:	2064      	movs	r0, #100	; 0x64
 800abaa:	f00b fbf5 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800abae:	2000      	movs	r0, #0
 800abb0:	f7f7 fa0a 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800abb4:	4b72      	ldr	r3, [pc, #456]	; (800ad80 <MODE_exe+0x314>)
 800abb6:	2210      	movs	r2, #16
 800abb8:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800abba:	f7f7 fa83 	bl	80020c4 <SW_IsOn_1>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d108      	bne.n	800abd6 <MODE_exe+0x16a>
					MODE_inc();								
 800abc4:	f7fe f9d0 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800abc8:	20c8      	movs	r0, #200	; 0xc8
 800abca:	f00b fbe5 	bl	8016398 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800abce:	486f      	ldr	r0, [pc, #444]	; (800ad8c <MODE_exe+0x320>)
 800abd0:	f00c fbc0 	bl	8017354 <puts>
 800abd4:	e7f1      	b.n	800abba <MODE_exe+0x14e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800abd6:	f7f7 fa69 	bl	80020ac <SW_IsOn_0>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d004      	beq.n	800abea <MODE_exe+0x17e>
 800abe0:	f000 f92f 	bl	800ae42 <MODE_CheckExe>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0e7      	beq.n	800abba <MODE_exe+0x14e>
					MODE_exe_m2();								
 800abea:	f7fe fceb 	bl	80095c4 <MODE_exe_m2>
					LL_mDelay(200);				
 800abee:	20c8      	movs	r0, #200	; 0xc8
 800abf0:	f00b fbd2 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800abf4:	4b63      	ldr	r3, [pc, #396]	; (800ad84 <MODE_exe+0x318>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b07      	cmp	r3, #7
 800abfa:	d1de      	bne.n	800abba <MODE_exe+0x14e>
						now_mode = mode_1;
 800abfc:	4b60      	ldr	r3, [pc, #384]	; (800ad80 <MODE_exe+0x314>)
 800abfe:	2201      	movs	r2, #1
 800ac00:	701a      	strb	r2, [r3, #0]
						break;
 800ac02:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_2;
 800ac04:	4b5f      	ldr	r3, [pc, #380]	; (800ad84 <MODE_exe+0x318>)
 800ac06:	2202      	movs	r2, #2
 800ac08:	701a      	strb	r2, [r3, #0]
			break;
 800ac0a:	e0b6      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_3://drive
			SetLED(0x0e);
 800ac0c:	200e      	movs	r0, #14
 800ac0e:	f7f7 f9db 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800ac12:	4b5c      	ldr	r3, [pc, #368]	; (800ad84 <MODE_exe+0x318>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800ac18:	2064      	movs	r0, #100	; 0x64
 800ac1a:	f00b fbbd 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800ac1e:	2000      	movs	r0, #0
 800ac20:	f7f7 f9d2 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800ac24:	4b56      	ldr	r3, [pc, #344]	; (800ad80 <MODE_exe+0x314>)
 800ac26:	2210      	movs	r2, #16
 800ac28:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800ac2a:	f7f7 fa4b 	bl	80020c4 <SW_IsOn_1>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d108      	bne.n	800ac46 <MODE_exe+0x1da>
					MODE_inc();								
 800ac34:	f7fe f998 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800ac38:	20c8      	movs	r0, #200	; 0xc8
 800ac3a:	f00b fbad 	bl	8016398 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800ac3e:	4853      	ldr	r0, [pc, #332]	; (800ad8c <MODE_exe+0x320>)
 800ac40:	f00c fb88 	bl	8017354 <puts>
 800ac44:	e7f1      	b.n	800ac2a <MODE_exe+0x1be>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800ac46:	f7f7 fa31 	bl	80020ac <SW_IsOn_0>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d004      	beq.n	800ac5a <MODE_exe+0x1ee>
 800ac50:	f000 f8f7 	bl	800ae42 <MODE_CheckExe>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0e7      	beq.n	800ac2a <MODE_exe+0x1be>
					MODE_exe_m3();								
 800ac5a:	f7fe fe91 	bl	8009980 <MODE_exe_m3>
					LL_mDelay(200);				
 800ac5e:	20c8      	movs	r0, #200	; 0xc8
 800ac60:	f00b fb9a 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800ac64:	4b47      	ldr	r3, [pc, #284]	; (800ad84 <MODE_exe+0x318>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b07      	cmp	r3, #7
 800ac6a:	d1de      	bne.n	800ac2a <MODE_exe+0x1be>
						now_mode = mode_1;
 800ac6c:	4b44      	ldr	r3, [pc, #272]	; (800ad80 <MODE_exe+0x314>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	701a      	strb	r2, [r3, #0]
						break;
 800ac72:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_3;
 800ac74:	4b43      	ldr	r3, [pc, #268]	; (800ad84 <MODE_exe+0x318>)
 800ac76:	2203      	movs	r2, #3
 800ac78:	701a      	strb	r2, [r3, #0]
			break;
 800ac7a:	e07e      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_4: // wall hit search
			SetLED(0x0e);
 800ac7c:	200e      	movs	r0, #14
 800ac7e:	f7f7 f9a3 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800ac82:	4b40      	ldr	r3, [pc, #256]	; (800ad84 <MODE_exe+0x318>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800ac88:	2064      	movs	r0, #100	; 0x64
 800ac8a:	f00b fb85 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800ac8e:	2000      	movs	r0, #0
 800ac90:	f7f7 f99a 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800ac94:	4b3a      	ldr	r3, [pc, #232]	; (800ad80 <MODE_exe+0x314>)
 800ac96:	2210      	movs	r2, #16
 800ac98:	701a      	strb	r2, [r3, #0]
			wall_hit_flag = 1;
 800ac9a:	4b3d      	ldr	r3, [pc, #244]	; (800ad90 <MODE_exe+0x324>)
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800aca0:	f7f7 fa10 	bl	80020c4 <SW_IsOn_1>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d108      	bne.n	800acbc <MODE_exe+0x250>
					MODE_inc();								
 800acaa:	f7fe f95d 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800acae:	20c8      	movs	r0, #200	; 0xc8
 800acb0:	f00b fb72 	bl	8016398 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800acb4:	4835      	ldr	r0, [pc, #212]	; (800ad8c <MODE_exe+0x320>)
 800acb6:	f00c fb4d 	bl	8017354 <puts>
 800acba:	e7f1      	b.n	800aca0 <MODE_exe+0x234>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800acbc:	f7f7 f9f6 	bl	80020ac <SW_IsOn_0>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d004      	beq.n	800acd0 <MODE_exe+0x264>
 800acc6:	f000 f8bc 	bl	800ae42 <MODE_CheckExe>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0e7      	beq.n	800aca0 <MODE_exe+0x234>
					MODE_exe_m4();								
 800acd0:	f7ff f964 	bl	8009f9c <MODE_exe_m4>
					LL_mDelay(200);				
 800acd4:	20c8      	movs	r0, #200	; 0xc8
 800acd6:	f00b fb5f 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800acda:	4b2a      	ldr	r3, [pc, #168]	; (800ad84 <MODE_exe+0x318>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b07      	cmp	r3, #7
 800ace0:	d1de      	bne.n	800aca0 <MODE_exe+0x234>
						now_mode = mode_1;
 800ace2:	4b27      	ldr	r3, [pc, #156]	; (800ad80 <MODE_exe+0x314>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
						wall_hit_flag = 0;
 800ace8:	4b29      	ldr	r3, [pc, #164]	; (800ad90 <MODE_exe+0x324>)
 800acea:	2200      	movs	r2, #0
 800acec:	701a      	strb	r2, [r3, #0]
						break;
 800acee:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_4;
 800acf0:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <MODE_exe+0x318>)
 800acf2:	2204      	movs	r2, #4
 800acf4:	701a      	strb	r2, [r3, #0]
			break;
 800acf6:	e040      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_5:
			SetLED(0x0e);
 800acf8:	200e      	movs	r0, #14
 800acfa:	f7f7 f965 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800acfe:	4b21      	ldr	r3, [pc, #132]	; (800ad84 <MODE_exe+0x318>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800ad04:	2064      	movs	r0, #100	; 0x64
 800ad06:	f00b fb47 	bl	8016398 <LL_mDelay>
			SetLED(0x00);
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	f7f7 f95c 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800ad10:	4b1b      	ldr	r3, [pc, #108]	; (800ad80 <MODE_exe+0x314>)
 800ad12:	2210      	movs	r2, #16
 800ad14:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800ad16:	f7f7 f9d5 	bl	80020c4 <SW_IsOn_1>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d108      	bne.n	800ad32 <MODE_exe+0x2c6>
					MODE_inc();								
 800ad20:	f7fe f922 	bl	8008f68 <MODE_inc>
					LL_mDelay(200);			
 800ad24:	20c8      	movs	r0, #200	; 0xc8
 800ad26:	f00b fb37 	bl	8016398 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800ad2a:	4818      	ldr	r0, [pc, #96]	; (800ad8c <MODE_exe+0x320>)
 800ad2c:	f00c fb12 	bl	8017354 <puts>
 800ad30:	e7f1      	b.n	800ad16 <MODE_exe+0x2aa>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800ad32:	f7f7 f9bb 	bl	80020ac <SW_IsOn_0>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d004      	beq.n	800ad46 <MODE_exe+0x2da>
 800ad3c:	f000 f881 	bl	800ae42 <MODE_CheckExe>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0e7      	beq.n	800ad16 <MODE_exe+0x2aa>
					MODE_exe_m5();								
 800ad46:	f7ff fb03 	bl	800a350 <MODE_exe_m5>
					LL_mDelay(200);				
 800ad4a:	20c8      	movs	r0, #200	; 0xc8
 800ad4c:	f00b fb24 	bl	8016398 <LL_mDelay>
					if (en_Mode == MODE_7){
 800ad50:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <MODE_exe+0x318>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b07      	cmp	r3, #7
 800ad56:	d1de      	bne.n	800ad16 <MODE_exe+0x2aa>
						now_mode = mode_1;
 800ad58:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <MODE_exe+0x314>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	701a      	strb	r2, [r3, #0]
						break;
 800ad5e:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_5;
 800ad60:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <MODE_exe+0x318>)
 800ad62:	2205      	movs	r2, #5
 800ad64:	701a      	strb	r2, [r3, #0]
			break;
 800ad66:	e008      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_6:
			SetLED(0x0e);
 800ad68:	200e      	movs	r0, #14
 800ad6a:	f7f7 f92d 	bl	8001fc8 <SetLED>

			break;
 800ad6e:	e004      	b.n	800ad7a <MODE_exe+0x30e>

		case MODE_7:
			SetLED(0x0e);
 800ad70:	200e      	movs	r0, #14
 800ad72:	f7f7 f929 	bl	8001fc8 <SetLED>
			
			break;
 800ad76:	e000      	b.n	800ad7a <MODE_exe+0x30e>


		default:
			break;
 800ad78:	bf00      	nop
	}
}
 800ad7a:	bf00      	nop
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	2000000c 	.word	0x2000000c
 800ad84:	2000b16c 	.word	0x2000b16c
 800ad88:	0801c47c 	.word	0x0801c47c
 800ad8c:	0801c490 	.word	0x0801c490
 800ad90:	200002ad 	.word	0x200002ad

0800ad94 <MODE_DistRightCheck>:

bool MODE_DistRightCheck(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
	int16_t s_rightval;
	bool bl_check;

	s_rightval = DIST_getNowVal(DIST_SEN_R_FRONT);
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	f002 fd64 	bl	800d868 <DIST_getNowVal>
 800ada0:	4603      	mov	r3, r0
 800ada2:	80bb      	strh	r3, [r7, #4]

	if( s_rightval >= 300 ){
 800ada4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ada8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800adac:	db02      	blt.n	800adb4 <MODE_DistRightCheck+0x20>
		bl_check=TRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	71fb      	strb	r3, [r7, #7]
 800adb2:	e001      	b.n	800adb8 <MODE_DistRightCheck+0x24>
	}
	else{
		bl_check=FALSE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800adb8:	79fb      	ldrb	r3, [r7, #7]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <MODE_DistLeftCheck>:

bool MODE_DistLeftCheck(void){
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0

	int16_t 	s_leftval;
	bool	bl_check;

	s_leftval 	= DIST_getNowVal(DIST_SEN_L_FRONT);
 800adc8:	2001      	movs	r0, #1
 800adca:	f002 fd4d 	bl	800d868 <DIST_getNowVal>
 800adce:	4603      	mov	r3, r0
 800add0:	80bb      	strh	r3, [r7, #4]

	if( s_leftval >= 200 ){
 800add2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800add6:	2bc7      	cmp	r3, #199	; 0xc7
 800add8:	dd02      	ble.n	800ade0 <MODE_DistLeftCheck+0x1e>
		bl_check = TRUE;
 800adda:	2301      	movs	r3, #1
 800addc:	71fb      	strb	r3, [r7, #7]
 800adde:	e001      	b.n	800ade4 <MODE_DistLeftCheck+0x22>

	}else{
		bl_check = FALSE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	71fb      	strb	r3, [r7, #7]

	}

	return bl_check;
 800ade4:	79fb      	ldrb	r3, [r7, #7]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <MODE_setWaitCheck>:

bool MODE_setWaitCheck(void){
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_DistRightCheck() ){	// 右�?け検知
 800adf4:	f7ff ffce 	bl	800ad94 <MODE_DistRightCheck>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <MODE_setWaitCheck+0x16>
		SetLED(0x08);
 800adfe:	2008      	movs	r0, #8
 800ae00:	f7f7 f8e2 	bl	8001fc8 <SetLED>
	}
	if( TRUE == MODE_DistLeftCheck() ){		// 左�?け検知
 800ae04:	f7ff ffdd 	bl	800adc2 <MODE_DistLeftCheck>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <MODE_setWaitCheck+0x26>
		SetLED(0x02);
 800ae0e:	2002      	movs	r0, #2
 800ae10:	f7f7 f8da 	bl	8001fc8 <SetLED>
	}

	if( ( TRUE == MODE_DistRightCheck() ) && ( TRUE == MODE_DistLeftCheck() ) ){
 800ae14:	f7ff ffbe 	bl	800ad94 <MODE_DistRightCheck>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <MODE_setWaitCheck+0x46>
 800ae1e:	f7ff ffd0 	bl	800adc2 <MODE_DistLeftCheck>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <MODE_setWaitCheck+0x46>
		SetLED(0x0e);
 800ae28:	200e      	movs	r0, #14
 800ae2a:	f7f7 f8cd 	bl	8001fc8 <SetLED>
		bl_check = TRUE;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	71fb      	strb	r3, [r7, #7]
 800ae32:	e001      	b.n	800ae38 <MODE_setWaitCheck+0x4a>

	}else{
		bl_check = FALSE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	71fb      	strb	r3, [r7, #7]
	}
	return bl_check;
 800ae38:	79fb      	ldrb	r3, [r7, #7]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <MODE_CheckExe>:

bool MODE_CheckExe(void){
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_setWaitCheck() ){
 800ae48:	f7ff ffd1 	bl	800adee <MODE_setWaitCheck>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d018      	beq.n	800ae84 <MODE_CheckExe+0x42>
		LL_mDelay(500);
 800ae52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ae56:	f00b fa9f 	bl	8016398 <LL_mDelay>

		if( FALSE == MODE_setWaitCheck() ){
 800ae5a:	f7ff ffc8 	bl	800adee <MODE_setWaitCheck>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f083 0301 	eor.w	r3, r3, #1
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <MODE_CheckExe+0x3c>
			SetLED(0x00);
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	f7f7 f8ac 	bl	8001fc8 <SetLED>
			LL_mDelay(1000);
 800ae70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae74:	f00b fa90 	bl	8016398 <LL_mDelay>
			bl_check = TRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	71fb      	strb	r3, [r7, #7]
 800ae7c:	e004      	b.n	800ae88 <MODE_CheckExe+0x46>

		}else{
			bl_check = FALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	71fb      	strb	r3, [r7, #7]
 800ae82:	e001      	b.n	800ae88 <MODE_CheckExe+0x46>

		}

	}else{

		bl_check = FALSE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800ae88:	79fb      	ldrb	r3, [r7, #7]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <MOT_getAcc1>:
float			f_WallEdgeAddDist =0.0;				// 壁切れ補正の移動距離



float MOT_getAcc1( void )
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_acc;
 800ae96:	2015      	movs	r0, #21
 800ae98:	f7f7 fc8c 	bl	80027b4 <PARAM_getSpeed>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	ee07 3a90 	vmov	s15, r3
}
 800aea4:	eeb0 0a67 	vmov.f32	s0, s15
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <MOT_getAcc3>:

float MOT_getAcc3( void )
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_dec;
 800aeae:	2015      	movs	r0, #21
 800aeb0:	f7f7 fc80 	bl	80027b4 <PARAM_getSpeed>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	ee07 3a90 	vmov	s15, r3
}
 800aebc:	eeb0 0a67 	vmov.f32	s0, s15
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <MOT_goBlock_AccConstDec>:

void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08e      	sub	sp, #56	; 0x38
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	ed87 0a01 	vstr	s0, [r7, #4]
 800aece:	4603      	mov	r3, r0
 800aed0:	460a      	mov	r2, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
 800aed4:	4613      	mov	r3, r2
 800aed6:	70bb      	strb	r3, [r7, #2]

	stCTRL_DATA		st_data;					// CTRLdata
	GYRO_staErrChkAngle();
 800aed8:	f7fd fdba 	bl	8008a50 <GYRO_staErrChkAngle>
	/*      motion      */
	/* ================ */
	/* ------ */
	/*  acc   */
	/* ------ */
	if( ( en_type != MOT_CONST_DEC ) && ( en_type != MOT_CONST_DEC_CUSTOM ) ){
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	2b05      	cmp	r3, #5
 800aee0:	d051      	beq.n	800af86 <MOT_goBlock_AccConstDec+0xc2>
 800aee2:	78fb      	ldrb	r3, [r7, #3]
 800aee4:	2b06      	cmp	r3, #6
 800aee6:	d04e      	beq.n	800af86 <MOT_goBlock_AccConstDec+0xc2>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800aee8:	78bb      	ldrb	r3, [r7, #2]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <MOT_goBlock_AccConstDec+0x30>
			st_data.en_type		= CTRL_ACC;
 800aeee:	2300      	movs	r3, #0
 800aef0:	723b      	strb	r3, [r7, #8]
 800aef2:	e001      	b.n	800aef8 <MOT_goBlock_AccConstDec+0x34>
		}
		else{
			st_data.en_type		= CTRL_SKEW_ACC;
 800aef4:	2303      	movs	r3, #3
 800aef6:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc1;		// 加速度指定
 800aef8:	4bad      	ldr	r3, [pc, #692]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_now;		// 現在速度
 800aefe:	4bac      	ldr	r3, [pc, #688]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_trgt;		// 目標速度
 800af04:	4baa      	ldr	r3, [pc, #680]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;				// 進んでいない
 800af0a:	f04f 0300 	mov.w	r3, #0
 800af0e:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_l1;			// 加速距離
 800af10:	4ba7      	ldr	r3, [pc, #668]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;				// 角加速度
 800af16:	f04f 0300 	mov.w	r3, #0
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;				// 現在角速度
 800af1c:	f04f 0300 	mov.w	r3, #0
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;				// 目標角度
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;				// 現在角度
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;				// 目標角度
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800af34:	f04f 0300 	mov.w	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();								// 設定データをクリア
 800af3a:	f7fa fc1f 	bl	800577c <CTRL_clrData>
		CTRL_setData( &st_data );						// データセット
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	4618      	mov	r0, r3
 800af44:	f7fa fd00 	bl	8005948 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800af48:	f7fd fa72 	bl	8008430 <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 800af4c:	e00f      	b.n	800af6e <MOT_goBlock_AccConstDec+0xaa>
			if( SYS_isOutOfCtrl() == TRUE ){
 800af4e:	f7fd fa19 	bl	8008384 <SYS_isOutOfCtrl>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d008      	beq.n	800af6a <MOT_goBlock_AccConstDec+0xa6>
				CTRL_stop();
 800af58:	f7fa fc00 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800af5c:	2000      	movs	r0, #0
 800af5e:	f7fd fa43 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800af62:	2001      	movs	r0, #1
 800af64:	f7fd fa40 	bl	80083e8 <DCM_brakeMot>
				break;
 800af68:	e00d      	b.n	800af86 <MOT_goBlock_AccConstDec+0xc2>
			}				
			MOT_setWallEdgeDist();
 800af6a:	f002 fa99 	bl	800d4a0 <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 800af6e:	f7fa fb53 	bl	8005618 <Get_NowDist>
 800af72:	eeb0 7a40 	vmov.f32	s14, s0
 800af76:	4b8e      	ldr	r3, [pc, #568]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800af78:	edd3 7a07 	vldr	s15, [r3, #28]
 800af7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af84:	d4e3      	bmi.n	800af4e <MOT_goBlock_AccConstDec+0x8a>
	}

	/* ------ */
	/*  const */
	/* ------ */
	if( MOT_GO_ST_NORMAL == en_goType ){
 800af86:	78bb      	ldrb	r3, [r7, #2]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <MOT_goBlock_AccConstDec+0xce>
		st_data.en_type		= CTRL_CONST;
 800af8c:	2301      	movs	r3, #1
 800af8e:	723b      	strb	r3, [r7, #8]
 800af90:	e001      	b.n	800af96 <MOT_goBlock_AccConstDec+0xd2>
	}
	else{
		st_data.en_type		= CTRL_SKEW_CONST;
 800af92:	2304      	movs	r3, #4
 800af94:	723b      	strb	r3, [r7, #8]
	}
	st_data.f_acc			= 0;					// 加速度指定
 800af96:	f04f 0300 	mov.w	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
	st_data.f_now			= st_Info.f_trgt;			// 現在速度
 800af9c:	4b84      	ldr	r3, [pc, #528]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= st_Info.f_trgt;			// 目標速度
 800afa2:	4b83      	ldr	r3, [pc, #524]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= st_Info.f_l1;				// 現在位置
 800afa8:	4b81      	ldr	r3, [pc, #516]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= st_Info.f_l1_2;			// 等速完了位置
 800afae:	4b80      	ldr	r3, [pc, #512]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;					// 角加速度
 800afb4:	f04f 0300 	mov.w	r3, #0
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800afba:	f04f 0300 	mov.w	r3, #0
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;					// 目標角度
 800afc0:	f04f 0300 	mov.w	r3, #0
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;					// 現在角度
 800afc6:	f04f 0300 	mov.w	r3, #0
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= 0;					// 目標角度
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
	if( ( en_type == MOT_CONST_DEC ) || ( en_type == MOT_CONST_DEC_CUSTOM ) ){
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	2b05      	cmp	r3, #5
 800afdc:	d002      	beq.n	800afe4 <MOT_goBlock_AccConstDec+0x120>
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	2b06      	cmp	r3, #6
 800afe2:	d101      	bne.n	800afe8 <MOT_goBlock_AccConstDec+0x124>
		CTRL_clrData();										// 設定データをクリア
 800afe4:	f7fa fbca 	bl	800577c <CTRL_clrData>
	}
	CTRL_setData( &st_data );						// データセット
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4618      	mov	r0, r3
 800afee:	f7fa fcab 	bl	8005948 <CTRL_setData>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 800aff2:	e00f      	b.n	800b014 <MOT_goBlock_AccConstDec+0x150>
		if( SYS_isOutOfCtrl() == TRUE ){
 800aff4:	f7fd f9c6 	bl	8008384 <SYS_isOutOfCtrl>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d008      	beq.n	800b010 <MOT_goBlock_AccConstDec+0x14c>
			CTRL_stop();
 800affe:	f7fa fbad 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		
 800b002:	2000      	movs	r0, #0
 800b004:	f7fd f9f0 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		
 800b008:	2001      	movs	r0, #1
 800b00a:	f7fd f9ed 	bl	80083e8 <DCM_brakeMot>
			break;
 800b00e:	e00d      	b.n	800b02c <MOT_goBlock_AccConstDec+0x168>
		}				
		MOT_setWallEdgeDist();
 800b010:	f002 fa46 	bl	800d4a0 <MOT_setWallEdgeDist>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 800b014:	f7fa fb00 	bl	8005618 <Get_NowDist>
 800b018:	eeb0 7a40 	vmov.f32	s14, s0
 800b01c:	4b64      	ldr	r3, [pc, #400]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b01e:	edd3 7a08 	vldr	s15, [r3, #32]
 800b022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	d4e3      	bmi.n	800aff4 <MOT_goBlock_AccConstDec+0x130>
	}

	/* ------ */
	/*  dec   */
	/* ------ */
	if( ( en_type != MOT_ACC_CONST ) && ( en_type != MOT_ACC_CONST_CUSTOM ) ){
 800b02c:	78fb      	ldrb	r3, [r7, #3]
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d05e      	beq.n	800b0f0 <MOT_goBlock_AccConstDec+0x22c>
 800b032:	78fb      	ldrb	r3, [r7, #3]
 800b034:	2b04      	cmp	r3, #4
 800b036:	d05b      	beq.n	800b0f0 <MOT_goBlock_AccConstDec+0x22c>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800b038:	78bb      	ldrb	r3, [r7, #2]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <MOT_goBlock_AccConstDec+0x180>
			st_data.en_type		= CTRL_DEC;
 800b03e:	2302      	movs	r3, #2
 800b040:	723b      	strb	r3, [r7, #8]
 800b042:	e001      	b.n	800b048 <MOT_goBlock_AccConstDec+0x184>
		}
		else{
			st_data.en_type		= CTRL_SKEW_DEC;
 800b044:	2305      	movs	r3, #5
 800b046:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc3;			// 減速
 800b048:	4b59      	ldr	r3, [pc, #356]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_trgt;			// 現在速度
 800b04e:	4b58      	ldr	r3, [pc, #352]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 最終速度
 800b054:	4b56      	ldr	r3, [pc, #344]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= st_Info.f_l1_2;			// 等速完了位置
 800b05a:	4b55      	ldr	r3, [pc, #340]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_dist;			// 全移動完了位置
 800b060:	4b53      	ldr	r3, [pc, #332]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800b06c:	f04f 0300 	mov.w	r3, #0
 800b070:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;						// 目標角度
 800b072:	f04f 0300 	mov.w	r3, #0
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800b07e:	f04f 0300 	mov.w	r3, #0
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800b084:	f04f 0300 	mov.w	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800b08a:	f107 0308 	add.w	r3, r7, #8
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fa fc5a 	bl	8005948 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 800b094:	e01e      	b.n	800b0d4 <MOT_goBlock_AccConstDec+0x210>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b096:	f7fd f975 	bl	8008384 <SYS_isOutOfCtrl>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <MOT_goBlock_AccConstDec+0x1ee>
				CTRL_stop();
 800b0a0:	f7fa fb5c 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	f7fd f99f 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	f7fd f99c 	bl	80083e8 <DCM_brakeMot>
				break;
 800b0b0:	e01e      	b.n	800b0f0 <MOT_goBlock_AccConstDec+0x22c>
			}				
			MOT_setWallEdgeDist();
 800b0b2:	f002 f9f5 	bl	800d4a0 <MOT_setWallEdgeDist>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 800b0b6:	4b3f      	ldr	r3, [pc, #252]	; (800b1b4 <MOT_goBlock_AccConstDec+0x2f0>)
 800b0b8:	edd3 7a00 	vldr	s15, [r3]
 800b0bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c8:	dc00      	bgt.n	800b0cc <MOT_goBlock_AccConstDec+0x208>
 800b0ca:	e003      	b.n	800b0d4 <MOT_goBlock_AccConstDec+0x210>
 800b0cc:	4b3a      	ldr	r3, [pc, #232]	; (800b1b8 <MOT_goBlock_AccConstDec+0x2f4>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10c      	bne.n	800b0ee <MOT_goBlock_AccConstDec+0x22a>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 800b0d4:	f7fa faa0 	bl	8005618 <Get_NowDist>
 800b0d8:	eeb0 7a40 	vmov.f32	s14, s0
 800b0dc:	4b34      	ldr	r3, [pc, #208]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b0de:	edd3 7a06 	vldr	s15, [r3, #24]
 800b0e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ea:	d4d4      	bmi.n	800b096 <MOT_goBlock_AccConstDec+0x1d2>
 800b0ec:	e000      	b.n	800b0f0 <MOT_goBlock_AccConstDec+0x22c>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 800b0ee:	bf00      	nop

	/* -------------------- */
	/*  const walledge      */
	/* -------------------- */
	/* not found edge */
	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800b0f0:	4b32      	ldr	r3, [pc, #200]	; (800b1bc <MOT_goBlock_AccConstDec+0x2f8>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d068      	beq.n	800b1ca <MOT_goBlock_AccConstDec+0x306>
 800b0f8:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <MOT_goBlock_AccConstDec+0x2fc>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f083 0301 	eor.w	r3, r3, #1
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b00      	cmp	r3, #0
 800b104:	d061      	beq.n	800b1ca <MOT_goBlock_AccConstDec+0x306>
		st_data.en_type			= CTRL_CONST;
 800b106:	2301      	movs	r3, #1
 800b108:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 800b10a:	f04f 0300 	mov.w	r3, #0
 800b10e:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800b110:	4b27      	ldr	r3, [pc, #156]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800b116:	4b26      	ldr	r3, [pc, #152]	; (800b1b0 <MOT_goBlock_AccConstDec+0x2ec>)
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= Get_NowDist();				// 現在位置
 800b11c:	f7fa fa7c 	bl	8005618 <Get_NowDist>
 800b120:	eef0 7a40 	vmov.f32	s15, s0
 800b124:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800b128:	f7fa fa76 	bl	8005618 <Get_NowDist>
 800b12c:	eef0 7a40 	vmov.f32	s15, s0
 800b130:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b1c4 <MOT_goBlock_AccConstDec+0x300>
 800b134:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b138:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800b13c:	f04f 0300 	mov.w	r3, #0
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800b142:	f04f 0300 	mov.w	r3, #0
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800b14e:	f04f 0300 	mov.w	r3, #0
 800b152:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800b15a:	f04f 0300 	mov.w	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800b160:	f7fa fb0c 	bl	800577c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800b164:	f107 0308 	add.w	r3, r7, #8
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fa fbed 	bl	8005948 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800b16e:	e012      	b.n	800b196 <MOT_goBlock_AccConstDec+0x2d2>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b170:	f7fd f908 	bl	8008384 <SYS_isOutOfCtrl>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d008      	beq.n	800b18c <MOT_goBlock_AccConstDec+0x2c8>
				CTRL_stop();
 800b17a:	f7fa faef 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800b17e:	2000      	movs	r0, #0
 800b180:	f7fd f932 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800b184:	2001      	movs	r0, #1
 800b186:	f7fd f92f 	bl	80083e8 <DCM_brakeMot>
				break;
 800b18a:	e01e      	b.n	800b1ca <MOT_goBlock_AccConstDec+0x306>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800b18c:	f002 f9cc 	bl	800d528 <MOT_setWallEdgeDist_LoopWait>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d118      	bne.n	800b1c8 <MOT_goBlock_AccConstDec+0x304>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800b196:	f7fa fa3f 	bl	8005618 <Get_NowDist>
 800b19a:	eeb0 7a40 	vmov.f32	s14, s0
 800b19e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b1a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	d4e1      	bmi.n	800b170 <MOT_goBlock_AccConstDec+0x2ac>
 800b1ac:	e00d      	b.n	800b1ca <MOT_goBlock_AccConstDec+0x306>
 800b1ae:	bf00      	nop
 800b1b0:	2000b170 	.word	0x2000b170
 800b1b4:	20000c54 	.word	0x20000c54
 800b1b8:	20000850 	.word	0x20000850
 800b1bc:	200002c8 	.word	0x200002c8
 800b1c0:	200002c9 	.word	0x200002c9
 800b1c4:	3d3851ec 	.word	0x3d3851ec
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800b1c8:	bf00      	nop
		}
	}
	/* straight for edge */
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800b1ca:	78bb      	ldrb	r3, [r7, #2]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d152      	bne.n	800b276 <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 800b1d0:	4b39      	ldr	r3, [pc, #228]	; (800b2b8 <MOT_goBlock_AccConstDec+0x3f4>)
 800b1d2:	edd3 7a00 	vldr	s15, [r3]
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800b1d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1de:	d04a      	beq.n	800b276 <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 800b1e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ec:	d043      	beq.n	800b276 <MOT_goBlock_AccConstDec+0x3b2>
		( f_fin != 0.0f )
	){
		st_data.en_type			= CTRL_CONST;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800b1f8:	4b30      	ldr	r3, [pc, #192]	; (800b2bc <MOT_goBlock_AccConstDec+0x3f8>)
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800b1fe:	4b2f      	ldr	r3, [pc, #188]	; (800b2bc <MOT_goBlock_AccConstDec+0x3f8>)
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;						// 現在位置
 800b204:	f04f 0300 	mov.w	r3, #0
 800b208:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800b20a:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <MOT_goBlock_AccConstDec+0x3f4>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800b210:	f04f 0300 	mov.w	r3, #0
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800b21c:	f04f 0300 	mov.w	r3, #0
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800b22e:	f04f 0300 	mov.w	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800b234:	f7fa faa2 	bl	800577c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800b238:	f107 0308 	add.w	r3, r7, #8
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fa fb83 	bl	8005948 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800b242:	e00d      	b.n	800b260 <MOT_goBlock_AccConstDec+0x39c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b244:	f7fd f89e 	bl	8008384 <SYS_isOutOfCtrl>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d008      	beq.n	800b260 <MOT_goBlock_AccConstDec+0x39c>
				CTRL_stop();
 800b24e:	f7fa fa85 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800b252:	2000      	movs	r0, #0
 800b254:	f7fd f8c8 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800b258:	2001      	movs	r0, #1
 800b25a:	f7fd f8c5 	bl	80083e8 <DCM_brakeMot>
				break;
 800b25e:	e00a      	b.n	800b276 <MOT_goBlock_AccConstDec+0x3b2>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800b260:	f7fa f9da 	bl	8005618 <Get_NowDist>
 800b264:	eeb0 7a40 	vmov.f32	s14, s0
 800b268:	edd7 7a08 	vldr	s15, [r7, #32]
 800b26c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	d4e6      	bmi.n	800b244 <MOT_goBlock_AccConstDec+0x380>
			}				
		}
	}

	/* stop */
	if( 0.0f == f_fin ){
 800b276:	edd7 7a01 	vldr	s15, [r7, #4]
 800b27a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	d10a      	bne.n	800b29a <MOT_goBlock_AccConstDec+0x3d6>
		LL_mDelay(100);			
 800b284:	2064      	movs	r0, #100	; 0x64
 800b286:	f00b f887 	bl	8016398 <LL_mDelay>
	 	CTRL_stop();				
 800b28a:	f7fa fa67 	bl	800575c <CTRL_stop>
		DCM_brakeMot( DCM_R );	
 800b28e:	2000      	movs	r0, #0
 800b290:	f7fd f8aa 	bl	80083e8 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );	
 800b294:	2001      	movs	r0, #1
 800b296:	f7fd f8a7 	bl	80083e8 <DCM_brakeMot>
	}

	f_MotNowSpeed = f_fin;		
 800b29a:	4a09      	ldr	r2, [pc, #36]	; (800b2c0 <MOT_goBlock_AccConstDec+0x3fc>)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6013      	str	r3, [r2, #0]
	GYRO_endErrChkAngle();
 800b2a0:	f7fd fbe8 	bl	8008a74 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800b2a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ac:	f7fa fb08 	bl	80058c0 <CTRL_setNowData_Err>
}
 800b2b0:	bf00      	nop
 800b2b2:	3738      	adds	r7, #56	; 0x38
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	200002cc 	.word	0x200002cc
 800b2bc:	2000b170 	.word	0x2000b170
 800b2c0:	200002b0 	.word	0x200002b0

0800b2c4 <MOT_setData_ACC_CONST_DEC>:

void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b2c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b2c8:	b086      	sub	sp, #24
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	ed87 0a03 	vstr	s0, [r7, #12]
 800b2d0:	edc7 0a02 	vstr	s1, [r7, #8]
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	71fb      	strb	r3, [r7, #7]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <MOT_setData_ACC_CONST_DEC+0x20>
		f_1blockDist = BLOCK;
 800b2de:	4b4c      	ldr	r3, [pc, #304]	; (800b410 <MOT_setData_ACC_CONST_DEC+0x14c>)
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	e001      	b.n	800b2e8 <MOT_setData_ACC_CONST_DEC+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b2e4:	4b4b      	ldr	r3, [pc, #300]	; (800b414 <MOT_setData_ACC_CONST_DEC+0x150>)
 800b2e6:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800b2e8:	f7ff fdd3 	bl	800ae92 <MOT_getAcc1>
 800b2ec:	eef0 7a40 	vmov.f32	s15, s0
 800b2f0:	4b49      	ldr	r3, [pc, #292]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b2f2:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800b2f6:	f7ff fdd8 	bl	800aeaa <MOT_getAcc3>
 800b2fa:	eef0 7a40 	vmov.f32	s15, s0
 800b2fe:	4b46      	ldr	r3, [pc, #280]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b300:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;								// 現在速度
 800b304:	4b45      	ldr	r3, [pc, #276]	; (800b41c <MOT_setData_ACC_CONST_DEC+0x158>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a43      	ldr	r2, [pc, #268]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b30a:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotTrgtSpeed;								// 目標速度
 800b30c:	4b44      	ldr	r3, [pc, #272]	; (800b420 <MOT_setData_ACC_CONST_DEC+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a41      	ldr	r2, [pc, #260]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b312:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;									// 最終速度
 800b314:	4a40      	ldr	r2, [pc, #256]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b31a:	ed97 7a03 	vldr	s14, [r7, #12]
 800b31e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b326:	4b3c      	ldr	r3, [pc, #240]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b328:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]
 800b32c:	4b3c      	ldr	r3, [pc, #240]	; (800b420 <MOT_setData_ACC_CONST_DEC+0x15c>)
 800b32e:	ed93 7a00 	vldr	s14, [r3]
 800b332:	4b3b      	ldr	r3, [pc, #236]	; (800b420 <MOT_setData_ACC_CONST_DEC+0x15c>)
 800b334:	edd3 7a00 	vldr	s15, [r3]
 800b338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b33c:	4b37      	ldr	r3, [pc, #220]	; (800b41c <MOT_setData_ACC_CONST_DEC+0x158>)
 800b33e:	edd3 6a00 	vldr	s13, [r3]
 800b342:	4b36      	ldr	r3, [pc, #216]	; (800b41c <MOT_setData_ACC_CONST_DEC+0x158>)
 800b344:	edd3 7a00 	vldr	s15, [r3]
 800b348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b350:	ee17 0a90 	vmov	r0, s15
 800b354:	f7f5 f920 	bl	8000598 <__aeabi_f2d>
 800b358:	4680      	mov	r8, r0
 800b35a:	4689      	mov	r9, r1
 800b35c:	4b2e      	ldr	r3, [pc, #184]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f5 f919 	bl	8000598 <__aeabi_f2d>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	f7f4 ffb7 	bl	80002dc <__adddf3>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f5 fa91 	bl	800089c <__aeabi_ddiv>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4610      	mov	r0, r2
 800b380:	4619      	mov	r1, r3
 800b382:	f7f5 fc59 	bl	8000c38 <__aeabi_d2f>
 800b386:	4603      	mov	r3, r0
 800b388:	4a23      	ldr	r2, [pc, #140]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b38a:	61d3      	str	r3, [r2, #28]
	f_l3			= ( f_fin * f_fin - f_MotTrgtSpeed * f_MotTrgtSpeed ) / ( ( st_Info.f_acc3 * -1.0 ) * 2.0 );			// 第3移動距離[m]
 800b38c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b390:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <MOT_setData_ACC_CONST_DEC+0x15c>)
 800b396:	edd3 6a00 	vldr	s13, [r3]
 800b39a:	4b21      	ldr	r3, [pc, #132]	; (800b420 <MOT_setData_ACC_CONST_DEC+0x15c>)
 800b39c:	edd3 7a00 	vldr	s15, [r3]
 800b3a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3a8:	ee17 0a90 	vmov	r0, s15
 800b3ac:	f7f5 f8f4 	bl	8000598 <__aeabi_f2d>
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	4689      	mov	r9, r1
 800b3b4:	4b18      	ldr	r3, [pc, #96]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7f5 f8ed 	bl	8000598 <__aeabi_f2d>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	462b      	mov	r3, r5
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f4 ff84 	bl	80002dc <__adddf3>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fa5e 	bl	800089c <__aeabi_ddiv>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	f7f5 fc26 	bl	8000c38 <__aeabi_d2f>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	613b      	str	r3, [r7, #16]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 800b3f0:	4b09      	ldr	r3, [pc, #36]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b3f2:	ed93 7a06 	vldr	s14, [r3, #24]
 800b3f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <MOT_setData_ACC_CONST_DEC+0x154>)
 800b400:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("1 %f,%f\r",st_Info.f_trgt,st_Info.f_l1);
}
 800b404:	bf00      	nop
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b40e:	bf00      	nop
 800b410:	3db851ec 	.word	0x3db851ec
 800b414:	3e0255b0 	.word	0x3e0255b0
 800b418:	2000b170 	.word	0x2000b170
 800b41c:	200002b0 	.word	0x200002b0
 800b420:	200002b4 	.word	0x200002b4
 800b424:	00000000 	.word	0x00000000

0800b428 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b42c:	b08a      	sub	sp, #40	; 0x28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	ed87 0a07 	vstr	s0, [r7, #28]
 800b434:	edc7 0a06 	vstr	s1, [r7, #24]
 800b438:	4603      	mov	r3, r0
 800b43a:	75fb      	strb	r3, [r7, #23]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d102      	bne.n	800b448 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20>
		f_1blockDist = BLOCK;
 800b442:	4ba5      	ldr	r3, [pc, #660]	; (800b6d8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b0>)
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
 800b446:	e001      	b.n	800b44c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b448:	4ba4      	ldr	r3, [pc, #656]	; (800b6dc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b4>)
 800b44a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800b44c:	f7ff fd21 	bl	800ae92 <MOT_getAcc1>
 800b450:	eef0 7a40 	vmov.f32	s15, s0
 800b454:	4ba2      	ldr	r3, [pc, #648]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b456:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800b45a:	f7ff fd26 	bl	800aeaa <MOT_getAcc3>
 800b45e:	eef0 7a40 	vmov.f32	s15, s0
 800b462:	4b9f      	ldr	r3, [pc, #636]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b464:	edc3 7a02 	vstr	s15, [r3, #8]


	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b468:	ed97 7a07 	vldr	s14, [r7, #28]
 800b46c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b474:	4b9a      	ldr	r3, [pc, #616]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b476:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;												// 現在速度
 800b47a:	4b9a      	ldr	r3, [pc, #616]	; (800b6e4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2bc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a98      	ldr	r2, [pc, #608]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b480:	60d3      	str	r3, [r2, #12]
	st_Info.f_last		= f_fin;													// 最終速度
 800b482:	4a97      	ldr	r2, [pc, #604]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	6153      	str	r3, [r2, #20]
	st_Info.f_trgt		= sqrt( 1.0 / ( ( st_Info.f_acc3 * -1.0 ) - st_Info.f_acc1 ) *
 800b488:	4b95      	ldr	r3, [pc, #596]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7f5 f883 	bl	8000598 <__aeabi_f2d>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4614      	mov	r4, r2
 800b498:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b49c:	4b90      	ldr	r3, [pc, #576]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7f5 f879 	bl	8000598 <__aeabi_f2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f7f4 ff13 	bl	80002d8 <__aeabi_dsub>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	f04f 0000 	mov.w	r0, #0
 800b4ba:	498b      	ldr	r1, [pc, #556]	; (800b6e8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2c0>)
 800b4bc:	f7f5 f9ee 	bl	800089c <__aeabi_ddiv>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	e9c7 2300 	strd	r2, r3, [r7]
					( 2.0 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1.0 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 800b4c8:	4b85      	ldr	r3, [pc, #532]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f5 f863 	bl	8000598 <__aeabi_f2d>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	f7f4 ff01 	bl	80002dc <__adddf3>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4614      	mov	r4, r2
 800b4e0:	461d      	mov	r5, r3
 800b4e2:	4b7f      	ldr	r3, [pc, #508]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f5 f856 	bl	8000598 <__aeabi_f2d>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4692      	mov	sl, r2
 800b4f2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800b4f6:	4652      	mov	r2, sl
 800b4f8:	465b      	mov	r3, fp
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f5 f8a3 	bl	8000648 <__aeabi_dmul>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4614      	mov	r4, r2
 800b508:	461d      	mov	r5, r3
 800b50a:	4b75      	ldr	r3, [pc, #468]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7f5 f842 	bl	8000598 <__aeabi_f2d>
 800b514:	a36e      	add	r3, pc, #440	; (adr r3, 800b6d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2a8>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fedd 	bl	80002d8 <__aeabi_dsub>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	f7f5 f88f 	bl	8000648 <__aeabi_dmul>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4614      	mov	r4, r2
 800b530:	461d      	mov	r5, r3
					( st_Info.f_acc3 * -1.0 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 800b532:	4b6b      	ldr	r3, [pc, #428]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	4618      	mov	r0, r3
 800b538:	f7f5 f82e 	bl	8000598 <__aeabi_f2d>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	60ba      	str	r2, [r7, #8]
 800b542:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	4b66      	ldr	r3, [pc, #408]	; (800b6e4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2bc>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7f5 f823 	bl	8000598 <__aeabi_f2d>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b55a:	f7f5 f875 	bl	8000648 <__aeabi_dmul>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4692      	mov	sl, r2
 800b564:	469b      	mov	fp, r3
 800b566:	4b5f      	ldr	r3, [pc, #380]	; (800b6e4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2bc>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f5 f814 	bl	8000598 <__aeabi_f2d>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4650      	mov	r0, sl
 800b576:	4659      	mov	r1, fp
 800b578:	f7f5 f866 	bl	8000648 <__aeabi_dmul>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
					( 2.0 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1.0 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f4 feaa 	bl	80002dc <__adddf3>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4614      	mov	r4, r2
 800b58e:	461d      	mov	r5, r3
					( st_Info.f_acc3 * -1.0 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 800b590:	4b53      	ldr	r3, [pc, #332]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b592:	ed93 7a01 	vldr	s14, [r3, #4]
 800b596:	edd7 7a06 	vldr	s15, [r7, #24]
 800b59a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b59e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a6:	ee17 0a90 	vmov	r0, s15
 800b5aa:	f7f4 fff5 	bl	8000598 <__aeabi_f2d>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f4 fe8f 	bl	80002d8 <__aeabi_dsub>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
	st_Info.f_trgt		= sqrt( 1.0 / ( ( st_Info.f_acc3 * -1.0 ) - st_Info.f_acc1 ) *
 800b5be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5c2:	f7f5 f841 	bl	8000648 <__aeabi_dmul>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	ec43 2b17 	vmov	d7, r2, r3
 800b5ce:	eeb0 0a47 	vmov.f32	s0, s14
 800b5d2:	eef0 0a67 	vmov.f32	s1, s15
 800b5d6:	f00f fc4b 	bl	801ae70 <sqrt>
 800b5da:	ec53 2b10 	vmov	r2, r3, d0
 800b5de:	4610      	mov	r0, r2
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	f7f5 fb29 	bl	8000c38 <__aeabi_d2f>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	4a3d      	ldr	r2, [pc, #244]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b5ea:	6113      	str	r3, [r2, #16]

	st_Info.f_l1		= ( st_Info.f_trgt * st_Info.f_trgt - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]
 800b5ec:	4b3c      	ldr	r3, [pc, #240]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b5ee:	ed93 7a04 	vldr	s14, [r3, #16]
 800b5f2:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b5f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5fc:	4b39      	ldr	r3, [pc, #228]	; (800b6e4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2bc>)
 800b5fe:	edd3 6a00 	vldr	s13, [r3]
 800b602:	4b38      	ldr	r3, [pc, #224]	; (800b6e4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2bc>)
 800b604:	edd3 7a00 	vldr	s15, [r3]
 800b608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b60c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b610:	ee17 0a90 	vmov	r0, s15
 800b614:	f7f4 ffc0 	bl	8000598 <__aeabi_f2d>
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	4b30      	ldr	r3, [pc, #192]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4618      	mov	r0, r3
 800b622:	f7f4 ffb9 	bl	8000598 <__aeabi_f2d>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	f7f4 fe57 	bl	80002dc <__adddf3>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f5 f931 	bl	800089c <__aeabi_ddiv>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4610      	mov	r0, r2
 800b640:	4619      	mov	r1, r3
 800b642:	f7f5 faf9 	bl	8000c38 <__aeabi_d2f>
 800b646:	4603      	mov	r3, r0
 800b648:	4a25      	ldr	r2, [pc, #148]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b64a:	61d3      	str	r3, [r2, #28]
	f_l3			= ( f_fin * f_fin - st_Info.f_trgt * st_Info.f_trgt ) / ( ( st_Info.f_acc3  * -1.0 ) * 2.0 );			// 第3移動距離[m]
 800b64c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b650:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b654:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b656:	edd3 6a04 	vldr	s13, [r3, #16]
 800b65a:	4b21      	ldr	r3, [pc, #132]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b65c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b664:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b668:	ee17 0a90 	vmov	r0, s15
 800b66c:	f7f4 ff94 	bl	8000598 <__aeabi_f2d>
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7f4 ff8d 	bl	8000598 <__aeabi_f2d>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4690      	mov	r8, r2
 800b684:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	4640      	mov	r0, r8
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f4 fe24 	bl	80002dc <__adddf3>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f5 f8fe 	bl	800089c <__aeabi_ddiv>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	f7f5 fac6 	bl	8000c38 <__aeabi_d2f>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	623b      	str	r3, [r7, #32]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 800b6b0:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b6b2:	ed93 7a06 	vldr	s14, [r3, #24]
 800b6b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6be:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x2b8>)
 800b6c0:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("2 %f,%f,%f,%f\r",st_Info.f_trgt,st_Info.f_l1,f_fin,f_MotNowSpeed);
}
 800b6c4:	bf00      	nop
 800b6c6:	3728      	adds	r7, #40	; 0x28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6ce:	bf00      	nop
 800b6d0:	47ae147b 	.word	0x47ae147b
 800b6d4:	3f847ae1 	.word	0x3f847ae1
 800b6d8:	3db851ec 	.word	0x3db851ec
 800b6dc:	3e0255b0 	.word	0x3e0255b0
 800b6e0:	2000b170 	.word	0x2000b170
 800b6e4:	200002b0 	.word	0x200002b0
 800b6e8:	3ff00000 	.word	0x3ff00000

0800b6ec <MOT_setData_MOT_ACC_CONST>:

void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b6ec:	b5b0      	push	{r4, r5, r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	ed87 0a03 	vstr	s0, [r7, #12]
 800b6f6:	edc7 0a02 	vstr	s1, [r7, #8]
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <MOT_setData_MOT_ACC_CONST+0x1e>
		f_1blockDist = BLOCK;
 800b704:	4b2b      	ldr	r3, [pc, #172]	; (800b7b4 <MOT_setData_MOT_ACC_CONST+0xc8>)
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e001      	b.n	800b70e <MOT_setData_MOT_ACC_CONST+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b70a:	4b2b      	ldr	r3, [pc, #172]	; (800b7b8 <MOT_setData_MOT_ACC_CONST+0xcc>)
 800b70c:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();													// 加速度1[mm/s^2]
 800b70e:	f7ff fbc0 	bl	800ae92 <MOT_getAcc1>
 800b712:	eef0 7a40 	vmov.f32	s15, s0
 800b716:	4b29      	ldr	r3, [pc, #164]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b718:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[mm/s^2](未使用)
 800b71c:	4b27      	ldr	r3, [pc, #156]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b71e:	f04f 0200 	mov.w	r2, #0
 800b722:	609a      	str	r2, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b724:	4b26      	ldr	r3, [pc, #152]	; (800b7c0 <MOT_setData_MOT_ACC_CONST+0xd4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a24      	ldr	r2, [pc, #144]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b72a:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 800b72c:	4a23      	ldr	r2, [pc, #140]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 800b732:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b734:	f04f 0200 	mov.w	r2, #0
 800b738:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b73a:	ed97 7a03 	vldr	s14, [r7, #12]
 800b73e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b746:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b748:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]
 800b74c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b750:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b754:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <MOT_setData_MOT_ACC_CONST+0xd4>)
 800b756:	edd3 6a00 	vldr	s13, [r3]
 800b75a:	4b19      	ldr	r3, [pc, #100]	; (800b7c0 <MOT_setData_MOT_ACC_CONST+0xd4>)
 800b75c:	edd3 7a00 	vldr	s15, [r3]
 800b760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b768:	ee17 0a90 	vmov	r0, s15
 800b76c:	f7f4 ff14 	bl	8000598 <__aeabi_f2d>
 800b770:	4604      	mov	r4, r0
 800b772:	460d      	mov	r5, r1
 800b774:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7f4 ff0d 	bl	8000598 <__aeabi_f2d>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	f7f4 fdab 	bl	80002dc <__adddf3>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4620      	mov	r0, r4
 800b78c:	4629      	mov	r1, r5
 800b78e:	f7f5 f885 	bl	800089c <__aeabi_ddiv>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4610      	mov	r0, r2
 800b798:	4619      	mov	r1, r3
 800b79a:	f7f5 fa4d 	bl	8000c38 <__aeabi_d2f>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	4a06      	ldr	r2, [pc, #24]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b7a2:	61d3      	str	r3, [r2, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	4a04      	ldr	r2, [pc, #16]	; (800b7bc <MOT_setData_MOT_ACC_CONST+0xd0>)
 800b7aa:	6213      	str	r3, [r2, #32]
}
 800b7ac:	bf00      	nop
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b4:	3db851ec 	.word	0x3db851ec
 800b7b8:	3e0255b0 	.word	0x3e0255b0
 800b7bc:	2000b170 	.word	0x2000b170
 800b7c0:	200002b0 	.word	0x200002b0
 800b7c4:	00000000 	.word	0x00000000

0800b7c8 <MOT_setData_MOT_ACC_CONST_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b7c8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	ed87 0a03 	vstr	s0, [r7, #12]
 800b7d2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x1e>
		f_1blockDist = BLOCK;
 800b7e0:	4b45      	ldr	r3, [pc, #276]	; (800b8f8 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x130>)
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e001      	b.n	800b7ea <MOT_setData_MOT_ACC_CONST_CUSTOM+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b7e6:	4b45      	ldr	r3, [pc, #276]	; (800b8fc <MOT_setData_MOT_ACC_CONST_CUSTOM+0x134>)
 800b7e8:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b7ea:	4b45      	ldr	r3, [pc, #276]	; (800b900 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x138>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a45      	ldr	r2, [pc, #276]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b7f0:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 800b7f2:	4a44      	ldr	r2, [pc, #272]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 800b7f8:	4b42      	ldr	r3, [pc, #264]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b800:	ed97 7a03 	vldr	s14, [r7, #12]
 800b804:	edd7 7a05 	vldr	s15, [r7, #20]
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	4b3d      	ldr	r3, [pc, #244]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b80e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0 );	// 加速度1[mm/s^2]（強制的に書き換え）
 800b812:	edd7 7a02 	vldr	s15, [r7, #8]
 800b816:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b81a:	4b39      	ldr	r3, [pc, #228]	; (800b900 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x138>)
 800b81c:	edd3 6a00 	vldr	s13, [r3]
 800b820:	4b37      	ldr	r3, [pc, #220]	; (800b900 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x138>)
 800b822:	edd3 7a00 	vldr	s15, [r3]
 800b826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b82e:	ee17 0a90 	vmov	r0, s15
 800b832:	f7f4 feb1 	bl	8000598 <__aeabi_f2d>
 800b836:	4604      	mov	r4, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	4b32      	ldr	r3, [pc, #200]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f4 feaa 	bl	8000598 <__aeabi_f2d>
 800b844:	a32a      	add	r3, pc, #168	; (adr r3, 800b8f0 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x128>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f4 fd45 	bl	80002d8 <__aeabi_dsub>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4610      	mov	r0, r2
 800b854:	4619      	mov	r1, r3
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	f7f4 fd3f 	bl	80002dc <__adddf3>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4620      	mov	r0, r4
 800b864:	4629      	mov	r1, r5
 800b866:	f7f5 f819 	bl	800089c <__aeabi_ddiv>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4610      	mov	r0, r2
 800b870:	4619      	mov	r1, r3
 800b872:	f7f5 f9e1 	bl	8000c38 <__aeabi_d2f>
 800b876:	4603      	mov	r3, r0
 800b878:	4a22      	ldr	r2, [pc, #136]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b87a:	6053      	str	r3, [r2, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[m/s^2](未使用)
 800b87c:	4b21      	ldr	r3, [pc, #132]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b87e:	f04f 0200 	mov.w	r2, #0
 800b882:	609a      	str	r2, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2.0 );			// 第1移動距離[m]
 800b884:	edd7 7a02 	vldr	s15, [r7, #8]
 800b888:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b88c:	4b1c      	ldr	r3, [pc, #112]	; (800b900 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x138>)
 800b88e:	edd3 6a00 	vldr	s13, [r3]
 800b892:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x138>)
 800b894:	edd3 7a00 	vldr	s15, [r3]
 800b898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b89c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a0:	ee17 0a90 	vmov	r0, s15
 800b8a4:	f7f4 fe78 	bl	8000598 <__aeabi_f2d>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	4b15      	ldr	r3, [pc, #84]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f4 fe71 	bl	8000598 <__aeabi_f2d>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	f7f4 fd0f 	bl	80002dc <__adddf3>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f7f4 ffe9 	bl	800089c <__aeabi_ddiv>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	f7f5 f9b1 	bl	8000c38 <__aeabi_d2f>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4a0a      	ldr	r2, [pc, #40]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b8da:	61d3      	str	r3, [r2, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	4a08      	ldr	r2, [pc, #32]	; (800b904 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x13c>)
 800b8e2:	6213      	str	r3, [r2, #32]
}
 800b8e4:	bf00      	nop
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ec:	f3af 8000 	nop.w
 800b8f0:	47ae147b 	.word	0x47ae147b
 800b8f4:	3f847ae1 	.word	0x3f847ae1
 800b8f8:	3db851ec 	.word	0x3db851ec
 800b8fc:	3e0255b0 	.word	0x3e0255b0
 800b900:	200002b0 	.word	0x200002b0
 800b904:	2000b170 	.word	0x2000b170

0800b908 <MOT_setData_MOT_CONST_DEC>:

void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b90c:	b086      	sub	sp, #24
 800b90e:	af00      	add	r7, sp, #0
 800b910:	ed87 0a03 	vstr	s0, [r7, #12]
 800b914:	edc7 0a02 	vstr	s1, [r7, #8]
 800b918:	4603      	mov	r3, r0
 800b91a:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[mm]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <MOT_setData_MOT_CONST_DEC+0x20>
		f_1blockDist = BLOCK;
 800b922:	4b33      	ldr	r3, [pc, #204]	; (800b9f0 <MOT_setData_MOT_CONST_DEC+0xe8>)
 800b924:	617b      	str	r3, [r7, #20]
 800b926:	e001      	b.n	800b92c <MOT_setData_MOT_CONST_DEC+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b928:	4b32      	ldr	r3, [pc, #200]	; (800b9f4 <MOT_setData_MOT_CONST_DEC+0xec>)
 800b92a:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800b92c:	4b32      	ldr	r3, [pc, #200]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();													// 加速度3[mm/s^2]
 800b934:	f7ff fab9 	bl	800aeaa <MOT_getAcc3>
 800b938:	eef0 7a40 	vmov.f32	s15, s0
 800b93c:	4b2e      	ldr	r3, [pc, #184]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b93e:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b942:	4b2e      	ldr	r3, [pc, #184]	; (800b9fc <MOT_setData_MOT_CONST_DEC+0xf4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a2c      	ldr	r2, [pc, #176]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b948:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;													// 目標速度
 800b94a:	4b2c      	ldr	r3, [pc, #176]	; (800b9fc <MOT_setData_MOT_CONST_DEC+0xf4>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b950:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度(未使用)
 800b952:	4a29      	ldr	r2, [pc, #164]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b958:	ed97 7a03 	vldr	s14, [r7, #12]
 800b95c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b964:	4b24      	ldr	r3, [pc, #144]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b966:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800b96a:	4b23      	ldr	r3, [pc, #140]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b96c:	f04f 0200 	mov.w	r2, #0
 800b970:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1.0 ) * 2.0 );			// 第1-2移動距離[m]
 800b972:	4b21      	ldr	r3, [pc, #132]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	4618      	mov	r0, r3
 800b978:	f7f4 fe0e 	bl	8000598 <__aeabi_f2d>
 800b97c:	4604      	mov	r4, r0
 800b97e:	460d      	mov	r5, r1
 800b980:	edd7 7a02 	vldr	s15, [r7, #8]
 800b984:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b988:	4b1c      	ldr	r3, [pc, #112]	; (800b9fc <MOT_setData_MOT_CONST_DEC+0xf4>)
 800b98a:	edd3 6a00 	vldr	s13, [r3]
 800b98e:	4b1b      	ldr	r3, [pc, #108]	; (800b9fc <MOT_setData_MOT_CONST_DEC+0xf4>)
 800b990:	edd3 7a00 	vldr	s15, [r3]
 800b994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b99c:	ee17 0a90 	vmov	r0, s15
 800b9a0:	f7f4 fdfa 	bl	8000598 <__aeabi_f2d>
 800b9a4:	4680      	mov	r8, r0
 800b9a6:	4689      	mov	r9, r1
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f4 fdf3 	bl	8000598 <__aeabi_f2d>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	f7f4 fc91 	bl	80002dc <__adddf3>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f4 ff6b 	bl	800089c <__aeabi_ddiv>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	f7f4 fc85 	bl	80002dc <__adddf3>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f7f5 f92d 	bl	8000c38 <__aeabi_d2f>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	4a05      	ldr	r2, [pc, #20]	; (800b9f8 <MOT_setData_MOT_CONST_DEC+0xf0>)
 800b9e2:	6213      	str	r3, [r2, #32]
}
 800b9e4:	bf00      	nop
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b9ee:	bf00      	nop
 800b9f0:	3db851ec 	.word	0x3db851ec
 800b9f4:	3e0255b0 	.word	0x3e0255b0
 800b9f8:	2000b170 	.word	0x2000b170
 800b9fc:	200002b0 	.word	0x200002b0

0800ba00 <MOT_setData_MOT_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800ba00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba04:	b086      	sub	sp, #24
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	ed87 0a03 	vstr	s0, [r7, #12]
 800ba0c:	edc7 0a02 	vstr	s1, [r7, #8]
 800ba10:	4603      	mov	r3, r0
 800ba12:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d102      	bne.n	800ba20 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x20>
		f_1blockDist = BLOCK;
 800ba1a:	4b4f      	ldr	r3, [pc, #316]	; (800bb58 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x158>)
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	e001      	b.n	800ba24 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800ba20:	4b4e      	ldr	r3, [pc, #312]	; (800bb5c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x15c>)
 800ba22:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;									// 現在速度
 800ba24:	4b4e      	ldr	r3, [pc, #312]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a4e      	ldr	r2, [pc, #312]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba2a:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;									// 目標速度
 800ba2c:	4b4c      	ldr	r3, [pc, #304]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a4c      	ldr	r2, [pc, #304]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba32:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度
 800ba34:	4a4b      	ldr	r2, [pc, #300]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;									// 移動距離[mm]
 800ba3a:	ed97 7a03 	vldr	s14, [r7, #12]
 800ba3e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba46:	4b47      	ldr	r3, [pc, #284]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba48:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800ba4c:	4b45      	ldr	r3, [pc, #276]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba4e:	f04f 0200 	mov.w	r2, #0
 800ba52:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0 ) * -1.0;	// 加速度3[mm/s^2]（強制的に書き換え）
 800ba54:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ba5c:	4b40      	ldr	r3, [pc, #256]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800ba5e:	edd3 6a00 	vldr	s13, [r3]
 800ba62:	4b3f      	ldr	r3, [pc, #252]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800ba64:	edd3 7a00 	vldr	s15, [r3]
 800ba68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba70:	ee17 0a90 	vmov	r0, s15
 800ba74:	f7f4 fd90 	bl	8000598 <__aeabi_f2d>
 800ba78:	4604      	mov	r4, r0
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	4b39      	ldr	r3, [pc, #228]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f4 fd89 	bl	8000598 <__aeabi_f2d>
 800ba86:	a332      	add	r3, pc, #200	; (adr r3, 800bb50 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x150>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fc24 	bl	80002d8 <__aeabi_dsub>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4610      	mov	r0, r2
 800ba96:	4619      	mov	r1, r3
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	f7f4 fc1e 	bl	80002dc <__adddf3>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fef8 	bl	800089c <__aeabi_ddiv>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4610      	mov	r0, r2
 800bab2:	4619      	mov	r1, r3
 800bab4:	f7f5 f8c0 	bl	8000c38 <__aeabi_d2f>
 800bab8:	4603      	mov	r3, r0
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef1 7a67 	vneg.f32	s15, s15
 800bac2:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800bac4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800bac8:	4b26      	ldr	r3, [pc, #152]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800baca:	f04f 0200 	mov.w	r2, #0
 800bace:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1.0 ) * 2.0 );			// 第1-2移動距離[m]
 800bad0:	4b24      	ldr	r3, [pc, #144]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f4 fd5f 	bl	8000598 <__aeabi_f2d>
 800bada:	4604      	mov	r4, r0
 800badc:	460d      	mov	r5, r1
 800bade:	edd7 7a02 	vldr	s15, [r7, #8]
 800bae2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bae6:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800bae8:	edd3 6a00 	vldr	s13, [r3]
 800baec:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x160>)
 800baee:	edd3 7a00 	vldr	s15, [r3]
 800baf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bafa:	ee17 0a90 	vmov	r0, s15
 800bafe:	f7f4 fd4b 	bl	8000598 <__aeabi_f2d>
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	4b17      	ldr	r3, [pc, #92]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f4 fd44 	bl	8000598 <__aeabi_f2d>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	f7f4 fbe2 	bl	80002dc <__adddf3>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 febc 	bl	800089c <__aeabi_ddiv>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4620      	mov	r0, r4
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f7f4 fbd6 	bl	80002dc <__adddf3>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4610      	mov	r0, r2
 800bb36:	4619      	mov	r1, r3
 800bb38:	f7f5 f87e 	bl	8000c38 <__aeabi_d2f>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4a09      	ldr	r2, [pc, #36]	; (800bb64 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x164>)
 800bb40:	6213      	str	r3, [r2, #32]
}
 800bb42:	bf00      	nop
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bb4c:	f3af 8000 	nop.w
 800bb50:	47ae147b 	.word	0x47ae147b
 800bb54:	3f847ae1 	.word	0x3f847ae1
 800bb58:	3db851ec 	.word	0x3db851ec
 800bb5c:	3e0255b0 	.word	0x3e0255b0
 800bb60:	200002b0 	.word	0x200002b0
 800bb64:	2000b170 	.word	0x2000b170

0800bb68 <MOT_getStType>:

enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800bb68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bb6c:	b08e      	sub	sp, #56	; 0x38
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	ed87 0a03 	vstr	s0, [r7, #12]
 800bb74:	edc7 0a02 	vstr	s1, [r7, #8]
 800bb78:	4603      	mov	r3, r0
 800bb7a:	71fb      	strb	r3, [r7, #7]
	float f_l1;							//加速距離
	float f_l3;							//減速距離
	float f_total;							// 移動距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d108      	bne.n	800bb94 <MOT_getStType+0x2c>
		f_total	= f_num * BLOCK;
 800bb82:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb86:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800be18 <MOT_getStType+0x2b0>
 800bb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800bb92:	e007      	b.n	800bba4 <MOT_getStType+0x3c>
	}
	else{									// 斜めの直進
		f_total	= f_num * BLOCK_SKEW;
 800bb94:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb98:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800be1c <MOT_getStType+0x2b4>
 800bb9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bba0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34


	/* ================ */
	/*   加速＋等速動作  */
	/* ================ */
	f_v1Div		= f_fin - f_MotNowSpeed;
 800bba4:	4b9e      	ldr	r3, [pc, #632]	; (800be20 <MOT_getStType+0x2b8>)
 800bba6:	edd3 7a00 	vldr	s15, [r3]
 800bbaa:	ed97 7a02 	vldr	s14, [r7, #8]
 800bbae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbb2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_acc1		= MOT_getAcc1();				// 加速度1[mm/s^2]
 800bbb6:	f7ff f96c 	bl	800ae92 <MOT_getAcc1>
 800bbba:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	f_t1		= f_v1Div / f_acc1;
 800bbbe:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800bbc2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bbc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	f_l1 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t1;
 800bbce:	4b94      	ldr	r3, [pc, #592]	; (800be20 <MOT_getStType+0x2b8>)
 800bbd0:	ed93 7a00 	vldr	s14, [r3]
 800bbd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bbe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbe4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	/*  加速＋等速動作 */
	if( f_total <= ( f_l1 + MOT_MOVE_ST_THRESHOLD ) ){
 800bbf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bbf2:	f7f4 fcd1 	bl	8000598 <__aeabi_f2d>
 800bbf6:	4680      	mov	r8, r0
 800bbf8:	4689      	mov	r9, r1
 800bbfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbfc:	f7f4 fccc 	bl	8000598 <__aeabi_f2d>
 800bc00:	a381      	add	r3, pc, #516	; (adr r3, 800be08 <MOT_getStType+0x2a0>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb69 	bl	80002dc <__adddf3>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4640      	mov	r0, r8
 800bc10:	4649      	mov	r1, r9
 800bc12:	f7f4 ff95 	bl	8000b40 <__aeabi_dcmple>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d019      	beq.n	800bc50 <MOT_getStType+0xe8>

		/* 加速が最終速度に対して完了しない */
		if( f_total < ( f_l1 + MOT_MOVE_ST_MIN ) ){
 800bc1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc1e:	f7f4 fcbb 	bl	8000598 <__aeabi_f2d>
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc28:	f7f4 fcb6 	bl	8000598 <__aeabi_f2d>
 800bc2c:	a378      	add	r3, pc, #480	; (adr r3, 800be10 <MOT_getStType+0x2a8>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fb53 	bl	80002dc <__adddf3>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f4 ff75 	bl	8000b2c <__aeabi_dcmplt>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <MOT_getStType+0xe4>
//			printf("パターン4\n\r");
			return MOT_ACC_CONST_CUSTOM;		// パターン4（強制的に加速度を変更する）
 800bc48:	2304      	movs	r3, #4
 800bc4a:	e0d7      	b.n	800bdfc <MOT_getStType+0x294>
		}
		else{
//			printf("パターン3\n\r");
			return MOT_ACC_CONST;				// パターン3（加速＋等速）
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e0d5      	b.n	800bdfc <MOT_getStType+0x294>
	}

	/* ================ */
	/*  等速＋減速動作   */
	/* ================ */
	f_v3Div		= f_fin - f_MotNowSpeed;
 800bc50:	4b73      	ldr	r3, [pc, #460]	; (800be20 <MOT_getStType+0x2b8>)
 800bc52:	edd3 7a00 	vldr	s15, [r3]
 800bc56:	ed97 7a02 	vldr	s14, [r7, #8]
 800bc5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc5e:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();				// 加速度3[mm/s^2]
 800bc62:	f7ff f922 	bl	800aeaa <MOT_getAcc3>
 800bc66:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= f_v3Div / ( f_acc3 * -1.0 );
 800bc6a:	6a38      	ldr	r0, [r7, #32]
 800bc6c:	f7f4 fc94 	bl	8000598 <__aeabi_f2d>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4614      	mov	r4, r2
 800bc76:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800bc7a:	69f8      	ldr	r0, [r7, #28]
 800bc7c:	f7f4 fc8c 	bl	8000598 <__aeabi_f2d>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4620      	mov	r0, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	f7f4 fe08 	bl	800089c <__aeabi_ddiv>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7f4 ffd0 	bl	8000c38 <__aeabi_d2f>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	61bb      	str	r3, [r7, #24]

	f_l3 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t3;
 800bc9c:	4b60      	ldr	r3, [pc, #384]	; (800be20 <MOT_getStType+0x2b8>)
 800bc9e:	ed93 7a00 	vldr	s14, [r3]
 800bca2:	edd7 7a02 	vldr	s15, [r7, #8]
 800bca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bcae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcb2:	ed97 7a06 	vldr	s14, [r7, #24]
 800bcb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcba:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 等速＋減速動作 */
	if( f_total <= ( f_l3 + MOT_MOVE_ST_THRESHOLD ) ){
 800bcbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcc0:	f7f4 fc6a 	bl	8000598 <__aeabi_f2d>
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	6978      	ldr	r0, [r7, #20]
 800bcca:	f7f4 fc65 	bl	8000598 <__aeabi_f2d>
 800bcce:	a34e      	add	r3, pc, #312	; (adr r3, 800be08 <MOT_getStType+0x2a0>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fb02 	bl	80002dc <__adddf3>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4620      	mov	r0, r4
 800bcde:	4629      	mov	r1, r5
 800bce0:	f7f4 ff2e 	bl	8000b40 <__aeabi_dcmple>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d019      	beq.n	800bd1e <MOT_getStType+0x1b6>

		/* 減速が最終速度に対して完了しない */
		if( f_total < ( f_l3 + MOT_MOVE_ST_MIN ) ){
 800bcea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcec:	f7f4 fc54 	bl	8000598 <__aeabi_f2d>
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	6978      	ldr	r0, [r7, #20]
 800bcf6:	f7f4 fc4f 	bl	8000598 <__aeabi_f2d>
 800bcfa:	a345      	add	r3, pc, #276	; (adr r3, 800be10 <MOT_getStType+0x2a8>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 faec 	bl	80002dc <__adddf3>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f7f4 ff0e 	bl	8000b2c <__aeabi_dcmplt>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <MOT_getStType+0x1b2>
//			printf("パターン6\n\r");
			return MOT_CONST_DEC_CUSTOM;		// パターン6（強制的に加速度を変更する）
 800bd16:	2306      	movs	r3, #6
 800bd18:	e070      	b.n	800bdfc <MOT_getStType+0x294>
		}
		else{
//			printf("パターン5\n\r");
			return MOT_CONST_DEC;				// パターン5（等速＋減速）
 800bd1a:	2305      	movs	r3, #5
 800bd1c:	e06e      	b.n	800bdfc <MOT_getStType+0x294>
	}

	/* ========== */
	/*  台形動作  */
	/* ========== */
	f_v1Div		= f_MotTrgtSpeed - f_MotNowSpeed;					// 台形時の速度差
 800bd1e:	4b41      	ldr	r3, [pc, #260]	; (800be24 <MOT_getStType+0x2bc>)
 800bd20:	ed93 7a00 	vldr	s14, [r3]
 800bd24:	4b3e      	ldr	r3, [pc, #248]	; (800be20 <MOT_getStType+0x2b8>)
 800bd26:	edd3 7a00 	vldr	s15, [r3]
 800bd2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_t1		= f_v1Div / f_acc1;
 800bd32:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800bd36:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bd3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_l1		= ( f_MotNowSpeed + f_MotTrgtSpeed ) * 0.5f * f_t1;
 800bd42:	4b37      	ldr	r3, [pc, #220]	; (800be20 <MOT_getStType+0x2b8>)
 800bd44:	ed93 7a00 	vldr	s14, [r3]
 800bd48:	4b36      	ldr	r3, [pc, #216]	; (800be24 <MOT_getStType+0x2bc>)
 800bd4a:	edd3 7a00 	vldr	s15, [r3]
 800bd4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bd56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	f_v3Div		= f_fin - f_MotTrgtSpeed;							// 台形時の速度差
 800bd66:	4b2f      	ldr	r3, [pc, #188]	; (800be24 <MOT_getStType+0x2bc>)
 800bd68:	edd3 7a00 	vldr	s15, [r3]
 800bd6c:	ed97 7a02 	vldr	s14, [r7, #8]
 800bd70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd74:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();									// 加速度3[mm/s^2]
 800bd78:	f7ff f897 	bl	800aeaa <MOT_getAcc3>
 800bd7c:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= -1.0f * f_v3Div / f_acc3;							// 減速時の所要時間
 800bd80:	edd7 7a08 	vldr	s15, [r7, #32]
 800bd84:	eef1 6a67 	vneg.f32	s13, s15
 800bd88:	ed97 7a07 	vldr	s14, [r7, #28]
 800bd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd90:	edc7 7a06 	vstr	s15, [r7, #24]
	f_l3		= ( f_MotTrgtSpeed + f_fin ) * 0.5f * f_t3;
 800bd94:	4b23      	ldr	r3, [pc, #140]	; (800be24 <MOT_getStType+0x2bc>)
 800bd96:	ed93 7a00 	vldr	s14, [r3]
 800bd9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bda2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bda6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdaa:	ed97 7a06 	vldr	s14, [r7, #24]
 800bdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb2:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 通常の台形動作 */
	if( ( f_total - f_l1 - f_l3 - MOT_MOVE_ST_MIN) >= 0 ){
 800bdb6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bdba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bdbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdca:	ee17 0a90 	vmov	r0, s15
 800bdce:	f7f4 fbe3 	bl	8000598 <__aeabi_f2d>
 800bdd2:	a30f      	add	r3, pc, #60	; (adr r3, 800be10 <MOT_getStType+0x2a8>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa7e 	bl	80002d8 <__aeabi_dsub>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4610      	mov	r0, r2
 800bde2:	4619      	mov	r1, r3
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	f04f 0300 	mov.w	r3, #0
 800bdec:	f7f4 feb2 	bl	8000b54 <__aeabi_dcmpge>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <MOT_getStType+0x292>
//		printf("パターン1\n\r");
		return MOT_ACC_CONST_DEC;				// パターン1（通常）
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e000      	b.n	800bdfc <MOT_getStType+0x294>
	}
	/* 等速値を変更する */
	else{
//		printf("パターン2\n\r");
		return MOT_ACC_CONST_DEC_CUSTOM;		// パターン2（目標速度を変更）
 800bdfa:	2302      	movs	r3, #2
	}
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3738      	adds	r7, #56	; 0x38
 800be00:	46bd      	mov	sp, r7
 800be02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800be06:	bf00      	nop
 800be08:	76c8b439 	.word	0x76c8b439
 800be0c:	3f8a9fbe 	.word	0x3f8a9fbe
 800be10:	47ae147b 	.word	0x47ae147b
 800be14:	3f847ae1 	.word	0x3f847ae1
 800be18:	3db851ec 	.word	0x3db851ec
 800be1c:	3e0255b0 	.word	0x3e0255b0
 800be20:	200002b0 	.word	0x200002b0
 800be24:	200002b4 	.word	0x200002b4

0800be28 <MOT_go_FinSpeed>:

void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	ed87 0a03 	vstr	s0, [r7, #12]
 800be32:	edc7 0a02 	vstr	s1, [r7, #8]
 800be36:	4603      	mov	r3, r0
 800be38:	71fb      	strb	r3, [r7, #7]
	enMOT_ST_TYPE 		en_type 		= MOT_getStType( f_num, f_fin, en_goStType);			// 動作パターン取得
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	4618      	mov	r0, r3
 800be3e:	edd7 0a02 	vldr	s1, [r7, #8]
 800be42:	ed97 0a03 	vldr	s0, [r7, #12]
 800be46:	f7ff fe8f 	bl	800bb68 <MOT_getStType>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]

	/* 移動距離と指定値に応じで動作を変える */
	switch( en_type ){
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	3b01      	subs	r3, #1
 800be52:	2b05      	cmp	r3, #5
 800be54:	d873      	bhi.n	800bf3e <MOT_go_FinSpeed+0x116>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <MOT_go_FinSpeed+0x34>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be75 	.word	0x0800be75
 800be60:	0800be97 	.word	0x0800be97
 800be64:	0800beb9 	.word	0x0800beb9
 800be68:	0800bedb 	.word	0x0800bedb
 800be6c:	0800befb 	.word	0x0800befb
 800be70:	0800bf1d 	.word	0x0800bf1d

		case MOT_ACC_CONST_DEC:				// [01] 台形加速
			MOT_setData_ACC_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800be74:	79fb      	ldrb	r3, [r7, #7]
 800be76:	4618      	mov	r0, r3
 800be78:	edd7 0a02 	vldr	s1, [r7, #8]
 800be7c:	ed97 0a03 	vldr	s0, [r7, #12]
 800be80:	f7ff fa20 	bl	800b2c4 <MOT_setData_ACC_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800be84:	79fa      	ldrb	r2, [r7, #7]
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	4611      	mov	r1, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	ed97 0a02 	vldr	s0, [r7, #8]
 800be90:	f7ff f818 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800be94:	e054      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_DEC_CUSTOM:		// [02] 台形加速（等速）
			MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );		// 動作データ作成
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	4618      	mov	r0, r3
 800be9a:	edd7 0a02 	vldr	s1, [r7, #8]
 800be9e:	ed97 0a03 	vldr	s0, [r7, #12]
 800bea2:	f7ff fac1 	bl	800b428 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800bea6:	79fa      	ldrb	r2, [r7, #7]
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	4611      	mov	r1, r2
 800beac:	4618      	mov	r0, r3
 800beae:	ed97 0a02 	vldr	s0, [r7, #8]
 800beb2:	f7ff f807 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800beb6:	e043      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST:				// [03] 加速＋等速
			MOT_setData_MOT_ACC_CONST( f_num, f_fin, en_goStType );					// 動作データ作成
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	4618      	mov	r0, r3
 800bebc:	edd7 0a02 	vldr	s1, [r7, #8]
 800bec0:	ed97 0a03 	vldr	s0, [r7, #12]
 800bec4:	f7ff fc12 	bl	800b6ec <MOT_setData_MOT_ACC_CONST>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800bec8:	79fa      	ldrb	r2, [r7, #7]
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	ed97 0a02 	vldr	s0, [r7, #8]
 800bed4:	f7fe fff6 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800bed8:	e032      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_CUSTOM:		// [04] 加速＋等速（等速）
			MOT_setData_MOT_ACC_CONST_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4618      	mov	r0, r3
 800bede:	edd7 0a02 	vldr	s1, [r7, #8]
 800bee2:	ed97 0a03 	vldr	s0, [r7, #12]
 800bee6:	f7ff fc6f 	bl	800b7c8 <MOT_setData_MOT_ACC_CONST_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, MOT_GO_ST_NORMAL );			// 動作
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	2100      	movs	r1, #0
 800beee:	4618      	mov	r0, r3
 800bef0:	ed97 0a02 	vldr	s0, [r7, #8]
 800bef4:	f7fe ffe6 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800bef8:	e022      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC:				// [05] 等速＋減速
			MOT_setData_MOT_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	4618      	mov	r0, r3
 800befe:	edd7 0a02 	vldr	s1, [r7, #8]
 800bf02:	ed97 0a03 	vldr	s0, [r7, #12]
 800bf06:	f7ff fcff 	bl	800b908 <MOT_setData_MOT_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800bf0a:	79fa      	ldrb	r2, [r7, #7]
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	4618      	mov	r0, r3
 800bf12:	ed97 0a02 	vldr	s0, [r7, #8]
 800bf16:	f7fe ffd5 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800bf1a:	e011      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC_CUSTOM:		// [06] 等速＋減速（減速値変更）
			MOT_setData_MOT_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	edd7 0a02 	vldr	s1, [r7, #8]
 800bf24:	ed97 0a03 	vldr	s0, [r7, #12]
 800bf28:	f7ff fd6a 	bl	800ba00 <MOT_setData_MOT_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800bf2c:	79fa      	ldrb	r2, [r7, #7]
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	ed97 0a02 	vldr	s0, [r7, #8]
 800bf38:	f7fe ffc4 	bl	800aec4 <MOT_goBlock_AccConstDec>
			break;
 800bf3c:	e000      	b.n	800bf40 <MOT_go_FinSpeed+0x118>

		default:
			break;
 800bf3e:	bf00      	nop
	}

}
 800bf40:	bf00      	nop
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <MOT_goBlock_FinSpeed>:

void MOT_goBlock_FinSpeed( float f_num, float f_fin )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	ed87 0a01 	vstr	s0, [r7, #4]
 800bf52:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_NORMAL );		// 通常の直進
 800bf56:	2000      	movs	r0, #0
 800bf58:	edd7 0a00 	vldr	s1, [r7]
 800bf5c:	ed97 0a01 	vldr	s0, [r7, #4]
 800bf60:	f7ff ff62 	bl	800be28 <MOT_go_FinSpeed>
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <MOT_goSkewBlock_FinSpeed>:

void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	ed87 0a01 	vstr	s0, [r7, #4]
 800bf76:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_SKEW );		// 通常の直進
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	edd7 0a00 	vldr	s1, [r7]
 800bf80:	ed97 0a01 	vldr	s0, [r7, #4]
 800bf84:	f7ff ff50 	bl	800be28 <MOT_go_FinSpeed>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <MOT_goBlock_Const>:

void MOT_goBlock_Const(float f_num)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b0a0      	sub	sp, #128	; 0x80
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	ed87 0a01 	vstr	s0, [r7, #4]
	stCTRL_DATA		st_data;
	stMOT_DATA		st_info;

	GYRO_staErrChkAngle();
 800bf9a:	f7fc fd59 	bl	8008a50 <GYRO_staErrChkAngle>

	/* ---------------- */
	/*  動作データ計算   */
	/* ---------------- */
	/* 距離 */
	st_info.f_dist		= f_num * BLOCK;													// 移動距離[m]
 800bf9e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfa2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c1cc <MOT_goBlock_Const+0x23c>
 800bfa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfaa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	/* ------ */
	/*  等速  */
	/* ------ */
	st_data.en_type			= CTRL_CONST;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	st_data.f_acc			= 0;					// 加速度指定
 800bfb4:	f04f 0300 	mov.w	r3, #0
 800bfb8:	65bb      	str	r3, [r7, #88]	; 0x58
	st_data.f_now			= f_MotNowSpeed;			// 現在速度
 800bfba:	4b85      	ldr	r3, [pc, #532]	; (800c1d0 <MOT_goBlock_Const+0x240>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	st_data.f_trgt			= f_MotNowSpeed;			// 目標速度
 800bfc0:	4b83      	ldr	r3, [pc, #524]	; (800c1d0 <MOT_goBlock_Const+0x240>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	663b      	str	r3, [r7, #96]	; 0x60
	st_data.f_nowDist		= 0;				// 現在位置
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	667b      	str	r3, [r7, #100]	; 0x64
	st_data.f_dist			= st_info.f_dist;			// 等速完了位置
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	66bb      	str	r3, [r7, #104]	; 0x68
	st_data.f_accAngleS		= 0;					// 角加速度
 800bfd0:	f04f 0300 	mov.w	r3, #0
 800bfd4:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800bfd6:	f04f 0300 	mov.w	r3, #0
 800bfda:	673b      	str	r3, [r7, #112]	; 0x70
	st_data.f_trgtAngleS		= 0;					// 目標角度
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	677b      	str	r3, [r7, #116]	; 0x74
	st_data.f_nowAngle		= 0;					// 現在角度
 800bfe2:	f04f 0300 	mov.w	r3, #0
 800bfe6:	67bb      	str	r3, [r7, #120]	; 0x78
	st_data.f_angle			= 0;					// 目標角度
 800bfe8:	f04f 0300 	mov.w	r3, #0
 800bfec:	67fb      	str	r3, [r7, #124]	; 0x7c
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800bfee:	f04f 0300 	mov.w	r3, #0
 800bff2:	657b      	str	r3, [r7, #84]	; 0x54
	CTRL_clrData();										// 設定データをクリア
 800bff4:	f7f9 fbc2 	bl	800577c <CTRL_clrData>
	CTRL_setData( &st_data );						// データセット
 800bff8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f9 fca3 	bl	8005948 <CTRL_setData>
	Set_TrgtSpeed(f_MotNowSpeed);
 800c002:	4b73      	ldr	r3, [pc, #460]	; (800c1d0 <MOT_goBlock_Const+0x240>)
 800c004:	edd3 7a00 	vldr	s15, [r3]
 800c008:	eeb0 0a67 	vmov.f32	s0, s15
 800c00c:	f7f9 fb2e 	bl	800566c <Set_TrgtSpeed>
//	printf("目標速度 %f 目標位置 %f \r\n",st_data.f_trgt,st_data.f_dist);
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800c010:	e012      	b.n	800c038 <MOT_goBlock_Const+0xa8>
		if( SYS_isOutOfCtrl() == TRUE ){
 800c012:	f7fc f9b7 	bl	8008384 <SYS_isOutOfCtrl>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d008      	beq.n	800c02e <MOT_goBlock_Const+0x9e>
			CTRL_stop();
 800c01c:	f7f9 fb9e 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800c020:	2000      	movs	r0, #0
 800c022:	f7fc f9e1 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800c026:	2001      	movs	r0, #1
 800c028:	f7fc f9de 	bl	80083e8 <DCM_brakeMot>
			break;
 800c02c:	e011      	b.n	800c052 <MOT_goBlock_Const+0xc2>
		}				// 途中で制御不能になった
		if(MOT_setWallEdgeDist()==TRUE) break;
 800c02e:	f001 fa37 	bl	800d4a0 <MOT_setWallEdgeDist>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10b      	bne.n	800c050 <MOT_goBlock_Const+0xc0>
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800c038:	f7f9 faee 	bl	8005618 <Get_NowDist>
 800c03c:	eeb0 7a40 	vmov.f32	s14, s0
 800c040:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04c:	d4e1      	bmi.n	800c012 <MOT_goBlock_Const+0x82>
 800c04e:	e000      	b.n	800c052 <MOT_goBlock_Const+0xc2>
		if(MOT_setWallEdgeDist()==TRUE) break;
 800c050:	bf00      	nop
	}

	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800c052:	4b60      	ldr	r3, [pc, #384]	; (800c1d4 <MOT_goBlock_Const+0x244>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d05c      	beq.n	800c114 <MOT_goBlock_Const+0x184>
 800c05a:	4b5f      	ldr	r3, [pc, #380]	; (800c1d8 <MOT_goBlock_Const+0x248>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	f083 0301 	eor.w	r3, r3, #1
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d055      	beq.n	800c114 <MOT_goBlock_Const+0x184>
		st_data.en_type			= CTRL_CONST;
 800c068:	2301      	movs	r3, #1
 800c06a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		st_data.f_acc			= 0;						// 加速度指定
 800c06e:	f04f 0300 	mov.w	r3, #0
 800c072:	65bb      	str	r3, [r7, #88]	; 0x58
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800c074:	4b59      	ldr	r3, [pc, #356]	; (800c1dc <MOT_goBlock_Const+0x24c>)
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	65fb      	str	r3, [r7, #92]	; 0x5c
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800c07a:	4b58      	ldr	r3, [pc, #352]	; (800c1dc <MOT_goBlock_Const+0x24c>)
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	663b      	str	r3, [r7, #96]	; 0x60
		st_data.f_nowDist		= Get_NowDist();				// 現在位置
 800c080:	f7f9 faca 	bl	8005618 <Get_NowDist>
 800c084:	eef0 7a40 	vmov.f32	s15, s0
 800c088:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		st_data.f_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800c08c:	f7f9 fac4 	bl	8005618 <Get_NowDist>
 800c090:	eef0 7a40 	vmov.f32	s15, s0
 800c094:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800c1e0 <MOT_goBlock_Const+0x250>
 800c098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c09c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		st_data.f_accAngleS		= 0;						// 角加速度
 800c0a0:	f04f 0300 	mov.w	r3, #0
 800c0a4:	66fb      	str	r3, [r7, #108]	; 0x6c
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800c0a6:	f04f 0300 	mov.w	r3, #0
 800c0aa:	673b      	str	r3, [r7, #112]	; 0x70
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800c0ac:	f04f 0300 	mov.w	r3, #0
 800c0b0:	677b      	str	r3, [r7, #116]	; 0x74
		st_data.f_nowAngle		= 0;						// 現在角度
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	67bb      	str	r3, [r7, #120]	; 0x78
		st_data.f_angle			= 0;						// 目標角度
 800c0b8:	f04f 0300 	mov.w	r3, #0
 800c0bc:	67fb      	str	r3, [r7, #124]	; 0x7c
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	657b      	str	r3, [r7, #84]	; 0x54
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c0c4:	f7f9 fb5a 	bl	800577c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c0c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f9 fc3b 	bl	8005948 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800c0d2:	e012      	b.n	800c0fa <MOT_goBlock_Const+0x16a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c0d4:	f7fc f956 	bl	8008384 <SYS_isOutOfCtrl>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d008      	beq.n	800c0f0 <MOT_goBlock_Const+0x160>
				CTRL_stop();
 800c0de:	f7f9 fb3d 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	f7fc f980 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	f7fc f97d 	bl	80083e8 <DCM_brakeMot>
				break;
 800c0ee:	e011      	b.n	800c114 <MOT_goBlock_Const+0x184>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c0f0:	f001 fa1a 	bl	800d528 <MOT_setWallEdgeDist_LoopWait>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <MOT_goBlock_Const+0x182>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800c0fa:	f7f9 fa8d 	bl	8005618 <Get_NowDist>
 800c0fe:	eeb0 7a40 	vmov.f32	s14, s0
 800c102:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800c106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10e:	d4e1      	bmi.n	800c0d4 <MOT_goBlock_Const+0x144>
 800c110:	e000      	b.n	800c114 <MOT_goBlock_Const+0x184>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800c112:	bf00      	nop
		}
	}
	/* straight for edge */
	if( f_WallEdgeAddDist != 0.0f)
 800c114:	4b33      	ldr	r3, [pc, #204]	; (800c1e4 <MOT_goBlock_Const+0x254>)
 800c116:	edd3 7a00 	vldr	s15, [r3]
 800c11a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	d044      	beq.n	800c1ae <MOT_goBlock_Const+0x21e>
	{
		st_data.en_type			= CTRL_CONST;
 800c124:	2301      	movs	r3, #1
 800c126:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		st_data.f_acc			= 0;						// 加速度指定
 800c12a:	f04f 0300 	mov.w	r3, #0
 800c12e:	65bb      	str	r3, [r7, #88]	; 0x58
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800c130:	4b2a      	ldr	r3, [pc, #168]	; (800c1dc <MOT_goBlock_Const+0x24c>)
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	65fb      	str	r3, [r7, #92]	; 0x5c
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800c136:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <MOT_goBlock_Const+0x24c>)
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	663b      	str	r3, [r7, #96]	; 0x60
		st_data.f_nowDist		= 0;						// 現在位置
 800c13c:	f04f 0300 	mov.w	r3, #0
 800c140:	667b      	str	r3, [r7, #100]	; 0x64
		st_data.f_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800c142:	4b28      	ldr	r3, [pc, #160]	; (800c1e4 <MOT_goBlock_Const+0x254>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	66bb      	str	r3, [r7, #104]	; 0x68
		st_data.f_accAngleS		= 0;						// 角加速度
 800c148:	f04f 0300 	mov.w	r3, #0
 800c14c:	66fb      	str	r3, [r7, #108]	; 0x6c
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800c14e:	f04f 0300 	mov.w	r3, #0
 800c152:	673b      	str	r3, [r7, #112]	; 0x70
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800c154:	f04f 0300 	mov.w	r3, #0
 800c158:	677b      	str	r3, [r7, #116]	; 0x74
		st_data.f_nowAngle		= 0;						// 現在角度
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	67bb      	str	r3, [r7, #120]	; 0x78
		st_data.f_angle			= 0;						// 目標角度
 800c160:	f04f 0300 	mov.w	r3, #0
 800c164:	67fb      	str	r3, [r7, #124]	; 0x7c
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c166:	f04f 0300 	mov.w	r3, #0
 800c16a:	657b      	str	r3, [r7, #84]	; 0x54
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c16c:	f7f9 fb06 	bl	800577c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800c170:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c174:	4618      	mov	r0, r3
 800c176:	f7f9 fbe7 	bl	8005948 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800c17a:	e00d      	b.n	800c198 <MOT_goBlock_Const+0x208>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c17c:	f7fc f902 	bl	8008384 <SYS_isOutOfCtrl>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d008      	beq.n	800c198 <MOT_goBlock_Const+0x208>
				CTRL_stop();
 800c186:	f7f9 fae9 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800c18a:	2000      	movs	r0, #0
 800c18c:	f7fc f92c 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800c190:	2001      	movs	r0, #1
 800c192:	f7fc f929 	bl	80083e8 <DCM_brakeMot>
				break;
 800c196:	e00a      	b.n	800c1ae <MOT_goBlock_Const+0x21e>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800c198:	f7f9 fa3e 	bl	8005618 <Get_NowDist>
 800c19c:	eeb0 7a40 	vmov.f32	s14, s0
 800c1a0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800c1a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ac:	d4e6      	bmi.n	800c17c <MOT_goBlock_Const+0x1ec>
			}				
		}
	}

	MOT_setWallEdgeType( MOT_WALL_EDGE_NONE );		// 壁切れ補正終了
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	f001 f944 	bl	800d43c <MOT_setWallEdgeType>
	GYRO_endErrChkAngle();
 800c1b4:	f7fc fc5e 	bl	8008a74 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800c1b8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c1bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c1c0:	f7f9 fb7e 	bl	80058c0 <CTRL_setNowData_Err>
}
 800c1c4:	bf00      	nop
 800c1c6:	3780      	adds	r7, #128	; 0x80
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	3db851ec 	.word	0x3db851ec
 800c1d0:	200002b0 	.word	0x200002b0
 800c1d4:	200002c8 	.word	0x200002c8
 800c1d8:	200002c9 	.word	0x200002c9
 800c1dc:	2000b170 	.word	0x2000b170
 800c1e0:	3d3851ec 	.word	0x3d3851ec
 800c1e4:	200002cc 	.word	0x200002cc

0800c1e8 <MOT_getAccAngle1>:
	CTRL_clrData();
	CTRL_setData(&test);
}

float MOT_getAccAngle1( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_accAngle;
 800c1ec:	2016      	movs	r0, #22
 800c1ee:	f7f6 fae1 	bl	80027b4 <PARAM_getSpeed>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	ee07 3a90 	vmov	s15, r3
}
 800c1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <MOT_getAccAngle3>:

float MOT_getAccAngle3( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_decAngle;
 800c204:	2016      	movs	r0, #22
 800c206:	f7f6 fad5 	bl	80027b4 <PARAM_getSpeed>
 800c20a:	4603      	mov	r3, r0
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	ee07 3a90 	vmov	s15, r3
}
 800c212:	eeb0 0a67 	vmov.f32	s0, s15
 800c216:	bd80      	pop	{r7, pc}

0800c218 <MOT_turn>:

void MOT_turn( enMOT_TURN_CMD en_type )
{
 800c218:	b5b0      	push	{r4, r5, r7, lr}
 800c21a:	b0a2      	sub	sp, #136	; 0x88
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	71fb      	strb	r3, [r7, #7]
//	float		f_angle2 = A2_MIN;	//最低第2移動角度[rad]
	float		f_angle1;	//第1移動角度[rad]
	float		f_angle3;	//第3移動角度[rad]
	float		us_trgtAngleS;	//目標角度[rad/s]

	us_trgtAngleS = 2.8*PI;//500;
 800c222:	4bc4      	ldr	r3, [pc, #784]	; (800c534 <MOT_turn+0x31c>)
 800c224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	/* ---------------- */
	/*  動作データ計計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_accAngleS1= MOT_getAccAngle1();												// 角加速度1[rad/s^2]
 800c228:	f7ff ffde 	bl	800c1e8 <MOT_getAccAngle1>
 800c22c:	eef0 7a40 	vmov.f32	s15, s0
 800c230:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	st_info.f_accAngleS3= MOT_getAccAngle3();												// 角加速度3[rad/s^2]
 800c234:	f7ff ffe4 	bl	800c200 <MOT_getAccAngle3>
 800c238:	eef0 7a40 	vmov.f32	s15, s0
 800c23c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度
 800c240:	f04f 0300 	mov.w	r3, #0
 800c244:	667b      	str	r3, [r7, #100]	; 0x64
	st_info.f_trgtAngleS= (float)us_trgtAngleS;												// 目標角速度
 800c246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c24a:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_lastAngleS= 0;																// 最終角速度
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* 角度 */
	switch( en_type ){
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d821      	bhi.n	800c29c <MOT_turn+0x84>
 800c258:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <MOT_turn+0x48>)
 800c25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25e:	bf00      	nop
 800c260:	0800c279 	.word	0x0800c279
 800c264:	0800c27f 	.word	0x0800c27f
 800c268:	0800c285 	.word	0x0800c285
 800c26c:	0800c28b 	.word	0x0800c28b
 800c270:	0800c291 	.word	0x0800c291
 800c274:	0800c297 	.word	0x0800c297
		case MOT_R90:	st_info.f_angle =  -PI/2.0 - ANGLE_OFFSET1_R;	break;					// 回転角度[rad]
 800c278:	4baf      	ldr	r3, [pc, #700]	; (800c538 <MOT_turn+0x320>)
 800c27a:	673b      	str	r3, [r7, #112]	; 0x70
 800c27c:	e012      	b.n	800c2a4 <MOT_turn+0x8c>
		case MOT_L90:	st_info.f_angle =   PI/2.0 + ANGLE_OFFSET1;		break;					// 回転角度[rad]
 800c27e:	4baf      	ldr	r3, [pc, #700]	; (800c53c <MOT_turn+0x324>)
 800c280:	673b      	str	r3, [r7, #112]	; 0x70
 800c282:	e00f      	b.n	800c2a4 <MOT_turn+0x8c>
		case MOT_R180:	st_info.f_angle = -PI - ANGLE_OFFSET2_R;	break;					// 回転角度[rad]
 800c284:	4bae      	ldr	r3, [pc, #696]	; (800c540 <MOT_turn+0x328>)
 800c286:	673b      	str	r3, [r7, #112]	; 0x70
 800c288:	e00c      	b.n	800c2a4 <MOT_turn+0x8c>
		case MOT_L180:	st_info.f_angle =  PI + ANGLE_OFFSET2;		break;					// 回転角度[rad]
 800c28a:	4bae      	ldr	r3, [pc, #696]	; (800c544 <MOT_turn+0x32c>)
 800c28c:	673b      	str	r3, [r7, #112]	; 0x70
 800c28e:	e009      	b.n	800c2a4 <MOT_turn+0x8c>
		case MOT_R360:	st_info.f_angle = -2.0*PI - ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800c290:	4bad      	ldr	r3, [pc, #692]	; (800c548 <MOT_turn+0x330>)
 800c292:	673b      	str	r3, [r7, #112]	; 0x70
 800c294:	e006      	b.n	800c2a4 <MOT_turn+0x8c>
		case MOT_L360:	st_info.f_angle =  2.0*PI + ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800c296:	4bad      	ldr	r3, [pc, #692]	; (800c54c <MOT_turn+0x334>)
 800c298:	673b      	str	r3, [r7, #112]	; 0x70
 800c29a:	e003      	b.n	800c2a4 <MOT_turn+0x8c>
		default:
			printf("error\r\n");
 800c29c:	48ac      	ldr	r0, [pc, #688]	; (800c550 <MOT_turn+0x338>)
 800c29e:	f00b f859 	bl	8017354 <puts>
			break;
 800c2a2:	bf00      	nop
	}
	f_angle3 = ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / 2.0 * ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / st_info.f_accAngleS3;						// 第3移動角度[rad]
 800c2a4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800c2a8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2b0:	ee17 0a90 	vmov	r0, s15
 800c2b4:	f7f4 f970 	bl	8000598 <__aeabi_f2d>
 800c2b8:	f04f 0200 	mov.w	r2, #0
 800c2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2c0:	f7f4 faec 	bl	800089c <__aeabi_ddiv>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	461d      	mov	r5, r3
 800c2cc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800c2d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c2d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2d8:	ee17 0a90 	vmov	r0, s15
 800c2dc:	f7f4 f95c 	bl	8000598 <__aeabi_f2d>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 f9ae 	bl	8000648 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4614      	mov	r4, r2
 800c2f2:	461d      	mov	r5, r3
 800c2f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7f4 f94e 	bl	8000598 <__aeabi_f2d>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4620      	mov	r0, r4
 800c302:	4629      	mov	r1, r5
 800c304:	f7f4 faca 	bl	800089c <__aeabi_ddiv>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4610      	mov	r0, r2
 800c30e:	4619      	mov	r1, r3
 800c310:	f7f4 fc92 	bl	8000c38 <__aeabi_d2f>
 800c314:	4603      	mov	r3, r0
 800c316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	f_angle1 = ( 0.0 - st_info.f_trgtAngleS) / 2.0 * ( 0.0 - st_info.f_trgtAngleS ) / st_info.f_accAngleS1;
 800c31a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7f4 f93b 	bl	8000598 <__aeabi_f2d>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	f04f 0000 	mov.w	r0, #0
 800c32a:	f04f 0100 	mov.w	r1, #0
 800c32e:	f7f3 ffd3 	bl	80002d8 <__aeabi_dsub>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	f04f 0200 	mov.w	r2, #0
 800c33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c342:	f7f4 faab 	bl	800089c <__aeabi_ddiv>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4614      	mov	r4, r2
 800c34c:	461d      	mov	r5, r3
 800c34e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c350:	4618      	mov	r0, r3
 800c352:	f7f4 f921 	bl	8000598 <__aeabi_f2d>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	f04f 0000 	mov.w	r0, #0
 800c35e:	f04f 0100 	mov.w	r1, #0
 800c362:	f7f3 ffb9 	bl	80002d8 <__aeabi_dsub>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	f7f4 f96b 	bl	8000648 <__aeabi_dmul>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4614      	mov	r4, r2
 800c378:	461d      	mov	r5, r3
 800c37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f4 f90b 	bl	8000598 <__aeabi_f2d>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4620      	mov	r0, r4
 800c388:	4629      	mov	r1, r5
 800c38a:	f7f4 fa87 	bl	800089c <__aeabi_ddiv>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4610      	mov	r0, r2
 800c394:	4619      	mov	r1, r3
 800c396:	f7f4 fc4f 	bl	8000c38 <__aeabi_d2f>
 800c39a:	4603      	mov	r3, r0
 800c39c:	67fb      	str	r3, [r7, #124]	; 0x7c


	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <MOT_turn+0x198>
 800c3a4:	79fb      	ldrb	r3, [r7, #7]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d002      	beq.n	800c3b0 <MOT_turn+0x198>
 800c3aa:	79fb      	ldrb	r3, [r7, #7]
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d14a      	bne.n	800c446 <MOT_turn+0x22e>
		st_info.f_trgtAngleS*= -1.0;															// 回転方向を逆にする
 800c3b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f4 f8f0 	bl	8000598 <__aeabi_f2d>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f7f4 fc3a 	bl	8000c38 <__aeabi_d2f>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	ee07 3a90 	vmov	s15, r3
 800c3ca:	eef1 7a67 	vneg.f32	s15, s15
 800c3ce:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		f_angle1			*= -1.0;
 800c3d2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c3d4:	f7f4 f8e0 	bl	8000598 <__aeabi_f2d>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4619      	mov	r1, r3
 800c3e0:	f7f4 fc2a 	bl	8000c38 <__aeabi_d2f>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	ee07 3a90 	vmov	s15, r3
 800c3ea:	eef1 7a67 	vneg.f32	s15, s15
 800c3ee:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
//		f_angle2 			*= -1;															// 回転方向を逆にする
		f_angle3 			*= -1.0;															// 回転方向を逆にする
 800c3f2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c3f6:	f7f4 f8cf 	bl	8000598 <__aeabi_f2d>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4610      	mov	r0, r2
 800c400:	4619      	mov	r1, r3
 800c402:	f7f4 fc19 	bl	8000c38 <__aeabi_d2f>
 800c406:	4603      	mov	r3, r0
 800c408:	ee07 3a90 	vmov	s15, r3
 800c40c:	eef1 7a67 	vneg.f32	s15, s15
 800c410:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800c414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c416:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800c418:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c41c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c424:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Right;
 800c428:	4b4a      	ldr	r3, [pc, #296]	; (800c554 <MOT_turn+0x33c>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 > ( A1_MIN * -1.0 ) ){
 800c42e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c432:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c558 <MOT_turn+0x340>
 800c436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c43e:	dd1a      	ble.n	800c476 <MOT_turn+0x25e>
			st_info.f_angle1 = A1_MIN * -1.0;
 800c440:	4b46      	ldr	r3, [pc, #280]	; (800c55c <MOT_turn+0x344>)
 800c442:	677b      	str	r3, [r7, #116]	; 0x74
		if( st_info.f_angle1 > ( A1_MIN * -1.0 ) ){
 800c444:	e017      	b.n	800c476 <MOT_turn+0x25e>
		}
	}
	else{
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800c446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c448:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800c44a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c44e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c452:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c456:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Left;
 800c45a:	4b3e      	ldr	r3, [pc, #248]	; (800c554 <MOT_turn+0x33c>)
 800c45c:	2201      	movs	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 < A1_MIN ){
 800c460:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c464:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800c560 <MOT_turn+0x348>
 800c468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c470:	d501      	bpl.n	800c476 <MOT_turn+0x25e>
			st_info.f_angle1 = A1_MIN;
 800c472:	4b3c      	ldr	r3, [pc, #240]	; (800c564 <MOT_turn+0x34c>)
 800c474:	677b      	str	r3, [r7, #116]	; 0x74
		}
	}


	GYRO_staErrChkAngle();			// エラー検出開始
 800c476:	f7fc faeb 	bl	8008a50 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_TRUN;
 800c47a:	2307      	movs	r3, #7
 800c47c:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800c484:	f04f 0300 	mov.w	r3, #0
 800c488:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800c48a:	f04f 0300 	mov.w	r3, #0
 800c48e:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800c490:	f04f 0300 	mov.w	r3, #0
 800c494:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 加速距離
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800c49c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800c4a0:	f04f 0300 	mov.w	r3, #0
 800c4a4:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角度
 800c4a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;						// 現在角度
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800c4b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b2:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c4b4:	f04f 0300 	mov.w	r3, #0
 800c4b8:	60fb      	str	r3, [r7, #12]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c4ba:	f7f9 f95f 	bl	800577c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800c4be:	f107 0308 	add.w	r3, r7, #8
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f9 fa40 	bl	8005948 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800c4c8:	f7fb ffb2 	bl	8008430 <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d015      	beq.n	800c4fe <MOT_turn+0x2e6>
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d012      	beq.n	800c4fe <MOT_turn+0x2e6>
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	d146      	bne.n	800c56c <MOT_turn+0x354>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800c4de:	e00e      	b.n	800c4fe <MOT_turn+0x2e6>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c4e0:	f7fb ff50 	bl	8008384 <SYS_isOutOfCtrl>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <MOT_turn+0x2e6>
				CTRL_stop();
 800c4ea:	f7f9 f937 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	f7fb ff7a 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c4f4:	2001      	movs	r0, #1
 800c4f6:	f7fb ff77 	bl	80083e8 <DCM_brakeMot>
				break;
 800c4fa:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c4fc:	e041      	b.n	800c582 <MOT_turn+0x36a>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800c4fe:	f7f9 f8c5 	bl	800568c <Get_NowAngle>
 800c502:	eeb0 7a40 	vmov.f32	s14, s0
 800c506:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c50a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c512:	dce5      	bgt.n	800c4e0 <MOT_turn+0x2c8>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c514:	e035      	b.n	800c582 <MOT_turn+0x36a>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800c516:	f7fb ff35 	bl	8008384 <SYS_isOutOfCtrl>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d025      	beq.n	800c56c <MOT_turn+0x354>
				CTRL_stop();
 800c520:	f7f9 f91c 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c524:	2000      	movs	r0, #0
 800c526:	f7fb ff5f 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c52a:	2001      	movs	r0, #1
 800c52c:	f7fb ff5c 	bl	80083e8 <DCM_brakeMot>
				break;
 800c530:	e027      	b.n	800c582 <MOT_turn+0x36a>
 800c532:	bf00      	nop
 800c534:	410cbe45 	.word	0x410cbe45
 800c538:	bfc90fd0 	.word	0xbfc90fd0
 800c53c:	3fc90fd0 	.word	0x3fc90fd0
 800c540:	c0490fd0 	.word	0xc0490fd0
 800c544:	40490fd0 	.word	0x40490fd0
 800c548:	c0c90fd0 	.word	0xc0c90fd0
 800c54c:	40c90fd0 	.word	0x40c90fd0
 800c550:	0801c4a4 	.word	0x0801c4a4
 800c554:	2000084c 	.word	0x2000084c
 800c558:	bedf66e8 	.word	0xbedf66e8
 800c55c:	bedf66e8 	.word	0xbedf66e8
 800c560:	3edf66e8 	.word	0x3edf66e8
 800c564:	3edf66e8 	.word	0x3edf66e8
 800c568:	beb2b8b9 	.word	0xbeb2b8b9
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
 800c56c:	f7f9 f88e 	bl	800568c <Get_NowAngle>
 800c570:	eeb0 7a40 	vmov.f32	s14, s0
 800c574:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c580:	d4c9      	bmi.n	800c516 <MOT_turn+0x2fe>
//	printf("finish\n");

	/* ------ */
	/*  等速  */
	/* ------ */
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d005      	beq.n	800c594 <MOT_turn+0x37c>
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	d002      	beq.n	800c594 <MOT_turn+0x37c>
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	2b04      	cmp	r3, #4
 800c592:	d164      	bne.n	800c65e <MOT_turn+0x446>
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2.0 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800c594:	f7f9 f896 	bl	80056c4 <Get_TrgtAngleS>
 800c598:	eeb0 7a40 	vmov.f32	s14, s0
 800c59c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c5a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5a4:	ee17 0a90 	vmov	r0, s15
 800c5a8:	f7f3 fff6 	bl	8000598 <__aeabi_f2d>
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5b4:	f7f4 f972 	bl	800089c <__aeabi_ddiv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	461d      	mov	r5, r3
 800c5c0:	f7f9 f880 	bl	80056c4 <Get_TrgtAngleS>
 800c5c4:	eeb0 7a40 	vmov.f32	s14, s0
 800c5c8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c5cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5d0:	ee17 0a90 	vmov	r0, s15
 800c5d4:	f7f3 ffe0 	bl	8000598 <__aeabi_f2d>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	f7f4 f832 	bl	8000648 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	461d      	mov	r5, r3
 800c5ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7f3 ffd2 	bl	8000598 <__aeabi_f2d>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	f7f4 f94e 	bl	800089c <__aeabi_ddiv>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4610      	mov	r0, r2
 800c606:	4619      	mov	r1, r3
 800c608:	f7f4 fb16 	bl	8000c38 <__aeabi_d2f>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_angle3			= -1.0 * f_angle3;
 800c612:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c616:	f7f3 ffbf 	bl	8000598 <__aeabi_f2d>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4610      	mov	r0, r2
 800c620:	4619      	mov	r1, r3
 800c622:	f7f4 fb09 	bl	8000c38 <__aeabi_d2f>
 800c626:	4603      	mov	r3, r0
 800c628:	ee07 3a90 	vmov	s15, r3
 800c62c:	eef1 7a67 	vneg.f32	s15, s15
 800c630:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		if( f_angle3 > A3_MIN*-1.0 ) f_angle3 = A3_MIN * -1.0;																	// 減速最低角度に書き換え
 800c634:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c638:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 800c568 <MOT_turn+0x350>
 800c63c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c644:	dd02      	ble.n	800c64c <MOT_turn+0x434>
 800c646:	4bc6      	ldr	r3, [pc, #792]	; (800c960 <MOT_turn+0x748>)
 800c648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;// 第1+2移動角度[rad]
 800c64c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c650:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c654:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c658:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 800c65c:	e052      	b.n	800c704 <MOT_turn+0x4ec>

	}
	else{
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2.0 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800c65e:	f7f9 f831 	bl	80056c4 <Get_TrgtAngleS>
 800c662:	eeb0 7a40 	vmov.f32	s14, s0
 800c666:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c66a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c66e:	ee17 0a90 	vmov	r0, s15
 800c672:	f7f3 ff91 	bl	8000598 <__aeabi_f2d>
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c67e:	f7f4 f90d 	bl	800089c <__aeabi_ddiv>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4614      	mov	r4, r2
 800c688:	461d      	mov	r5, r3
 800c68a:	f7f9 f81b 	bl	80056c4 <Get_TrgtAngleS>
 800c68e:	eeb0 7a40 	vmov.f32	s14, s0
 800c692:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c69a:	ee17 0a90 	vmov	r0, s15
 800c69e:	f7f3 ff7b 	bl	8000598 <__aeabi_f2d>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f7f3 ffcd 	bl	8000648 <__aeabi_dmul>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	461d      	mov	r5, r3
 800c6b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7f3 ff6d 	bl	8000598 <__aeabi_f2d>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	f7f4 f8e9 	bl	800089c <__aeabi_ddiv>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7f4 fab1 	bl	8000c38 <__aeabi_d2f>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if( f_angle3 < A3_MIN ) f_angle3 = A3_MIN;																			// 減速最低角度に書き換え
 800c6dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c6e0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800c964 <MOT_turn+0x74c>
 800c6e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ec:	d502      	bpl.n	800c6f4 <MOT_turn+0x4dc>
 800c6ee:	4b9e      	ldr	r3, [pc, #632]	; (800c968 <MOT_turn+0x750>)
 800c6f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;																// 第1+2移動角度[rad]
 800c6f4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c6f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c6fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c700:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//		printf("   [f_angle3]%d [f_angle1_2]%d\n\r", (int32_t)f_angle3, (int32_t)	st_info.f_angle1_2 );
	}
//	printf("[f_TrgtAngleS] %5.2f,st_info.f_angle1_2%5.2f,f_angle2%5.2f\n\r",f_TrgtAngleS,st_info.f_angle1_2,f_angle3);
	st_data.en_type			= CTRL_CONST_TRUN;
 800c704:	2308      	movs	r3, #8
 800c706:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800c71a:	f04f 0300 	mov.w	r3, #0
 800c71e:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 等速完了位置
 800c720:	f04f 0300 	mov.w	r3, #0
 800c724:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;						// 角加速度
 800c726:	f04f 0300 	mov.w	r3, #0
 800c72a:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800c72c:	f7f8 ffca 	bl	80056c4 <Get_TrgtAngleS>
 800c730:	eef0 7a40 	vmov.f32	s15, s0
 800c734:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= Get_TrgtAngleS();				// 目標角度
 800c738:	f7f8 ffc4 	bl	80056c4 <Get_TrgtAngleS>
 800c73c:	eef0 7a40 	vmov.f32	s15, s0
 800c740:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800c744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c746:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1_2;			// 目標角度
 800c748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c74c:	f04f 0300 	mov.w	r3, #0
 800c750:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800c752:	f107 0308 	add.w	r3, r7, #8
 800c756:	4618      	mov	r0, r3
 800c758:	f7f9 f8f6 	bl	8005948 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d015      	beq.n	800c78e <MOT_turn+0x576>
 800c762:	79fb      	ldrb	r3, [r7, #7]
 800c764:	2b02      	cmp	r3, #2
 800c766:	d012      	beq.n	800c78e <MOT_turn+0x576>
 800c768:	79fb      	ldrb	r3, [r7, #7]
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d129      	bne.n	800c7c2 <MOT_turn+0x5aa>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c76e:	e00e      	b.n	800c78e <MOT_turn+0x576>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c770:	f7fb fe08 	bl	8008384 <SYS_isOutOfCtrl>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d009      	beq.n	800c78e <MOT_turn+0x576>
				CTRL_stop();
 800c77a:	f7f8 ffef 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c77e:	2000      	movs	r0, #0
 800c780:	f7fb fe32 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c784:	2001      	movs	r0, #1
 800c786:	f7fb fe2f 	bl	80083e8 <DCM_brakeMot>
				break;
 800c78a:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c78c:	e024      	b.n	800c7d8 <MOT_turn+0x5c0>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c78e:	f7f8 ff7d 	bl	800568c <Get_NowAngle>
 800c792:	eeb0 7a40 	vmov.f32	s14, s0
 800c796:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c79a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a2:	dce5      	bgt.n	800c770 <MOT_turn+0x558>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c7a4:	e018      	b.n	800c7d8 <MOT_turn+0x5c0>
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c7a6:	f7fb fded 	bl	8008384 <SYS_isOutOfCtrl>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d008      	beq.n	800c7c2 <MOT_turn+0x5aa>
				CTRL_stop();
 800c7b0:	f7f8 ffd4 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	f7fb fe17 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	f7fb fe14 	bl	80083e8 <DCM_brakeMot>
				break;
 800c7c0:	e00a      	b.n	800c7d8 <MOT_turn+0x5c0>
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c7c2:	f7f8 ff63 	bl	800568c <Get_NowAngle>
 800c7c6:	eeb0 7a40 	vmov.f32	s14, s0
 800c7ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c7ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d6:	d4e6      	bmi.n	800c7a6 <MOT_turn+0x58e>
//	printf("finish2\n");

	/* ------ */
	/*  // 減速  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_TRUN;
 800c7d8:	2309      	movs	r3, #9
 800c7da:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 減速
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800c7e2:	f04f 0300 	mov.w	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 最終速度
 800c7e8:	f04f 0300 	mov.w	r3, #0
 800c7ec:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 等速完了位置
 800c7ee:	f04f 0300 	mov.w	r3, #0
 800c7f2:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 全移動完了位置
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800c7fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800c7fe:	f7f8 ff61 	bl	80056c4 <Get_TrgtAngleS>
 800c802:	eef0 7a40 	vmov.f32	s15, s0
 800c806:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800c80a:	f04f 0300 	mov.w	r3, #0
 800c80e:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800c810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c812:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800c814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c816:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c818:	f04f 0300 	mov.w	r3, #0
 800c81c:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800c81e:	f107 0308 	add.w	r3, r7, #8
 800c822:	4618      	mov	r0, r3
 800c824:	f7f9 f890 	bl	8005948 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d023      	beq.n	800c876 <MOT_turn+0x65e>
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d020      	beq.n	800c876 <MOT_turn+0x65e>
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	2b04      	cmp	r3, #4
 800c838:	d158      	bne.n	800c8ec <MOT_turn+0x6d4>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800c83a:	e01c      	b.n	800c876 <MOT_turn+0x65e>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS );
			if( SYS_isOutOfCtrl() == TRUE ){
 800c83c:	f7fb fda2 	bl	8008384 <SYS_isOutOfCtrl>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d008      	beq.n	800c858 <MOT_turn+0x640>
				CTRL_stop();
 800c846:	f7f8 ff89 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c84a:	2000      	movs	r0, #0
 800c84c:	f7fb fdcc 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c850:	2001      	movs	r0, #1
 800c852:	f7fb fdc9 	bl	80083e8 <DCM_brakeMot>
				break;
 800c856:	e02b      	b.n	800c8b0 <MOT_turn+0x698>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c858:	4b44      	ldr	r3, [pc, #272]	; (800c96c <MOT_turn+0x754>)
 800c85a:	edd3 7a00 	vldr	s15, [r3]
 800c85e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c862:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86a:	dc00      	bgt.n	800c86e <MOT_turn+0x656>
 800c86c:	e003      	b.n	800c876 <MOT_turn+0x65e>
 800c86e:	4b40      	ldr	r3, [pc, #256]	; (800c970 <MOT_turn+0x758>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d11b      	bne.n	800c8ae <MOT_turn+0x696>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800c876:	f7f8 ff09 	bl	800568c <Get_NowAngle>
 800c87a:	ee10 3a10 	vmov	r3, s0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f3 fe8a 	bl	8000598 <__aeabi_f2d>
 800c884:	4604      	mov	r4, r0
 800c886:	460d      	mov	r5, r1
 800c888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f3 fe84 	bl	8000598 <__aeabi_f2d>
 800c890:	a331      	add	r3, pc, #196	; (adr r3, 800c958 <MOT_turn+0x740>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fd1f 	bl	80002d8 <__aeabi_dsub>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4620      	mov	r0, r4
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	f7f4 f961 	bl	8000b68 <__aeabi_dcmpgt>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1c7      	bne.n	800c83c <MOT_turn+0x624>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c8ac:	e03b      	b.n	800c926 <MOT_turn+0x70e>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c8ae:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c8b0:	e039      	b.n	800c926 <MOT_turn+0x70e>
	}
	else{
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c8b2:	f7fb fd67 	bl	8008384 <SYS_isOutOfCtrl>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d008      	beq.n	800c8ce <MOT_turn+0x6b6>
				CTRL_stop();
 800c8bc:	f7f8 ff4e 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	f7fb fd91 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	f7fb fd8e 	bl	80083e8 <DCM_brakeMot>
				break;
 800c8cc:	e02b      	b.n	800c926 <MOT_turn+0x70e>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c8ce:	4b27      	ldr	r3, [pc, #156]	; (800c96c <MOT_turn+0x754>)
 800c8d0:	edd3 7a00 	vldr	s15, [r3]
 800c8d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e0:	dc00      	bgt.n	800c8e4 <MOT_turn+0x6cc>
 800c8e2:	e003      	b.n	800c8ec <MOT_turn+0x6d4>
 800c8e4:	4b22      	ldr	r3, [pc, #136]	; (800c970 <MOT_turn+0x758>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11b      	bne.n	800c924 <MOT_turn+0x70c>
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
 800c8ec:	f7f8 fece 	bl	800568c <Get_NowAngle>
 800c8f0:	ee10 3a10 	vmov	r3, s0
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f3 fe4f 	bl	8000598 <__aeabi_f2d>
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c900:	4618      	mov	r0, r3
 800c902:	f7f3 fe49 	bl	8000598 <__aeabi_f2d>
 800c906:	a314      	add	r3, pc, #80	; (adr r3, 800c958 <MOT_turn+0x740>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	f7f3 fce6 	bl	80002dc <__adddf3>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4620      	mov	r0, r4
 800c916:	4629      	mov	r1, r5
 800c918:	f7f4 f908 	bl	8000b2c <__aeabi_dcmplt>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1c7      	bne.n	800c8b2 <MOT_turn+0x69a>
 800c922:	e000      	b.n	800c926 <MOT_turn+0x70e>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c924:	bf00      	nop
//			log_in(f_TrgtAngle);
		}
	}
//	printf("finish3\n");
	/* 停止 */
	LL_mDelay(200);				// 安定待ち
 800c926:	20c8      	movs	r0, #200	; 0xc8
 800c928:	f009 fd36 	bl	8016398 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800c92c:	f7f8 ff16 	bl	800575c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800c930:	2000      	movs	r0, #0
 800c932:	f7fb fd59 	bl	80083e8 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800c936:	2001      	movs	r0, #1
 800c938:	f7fb fd56 	bl	80083e8 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 800c93c:	f7fc f89a 	bl	8008a74 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800c940:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c944:	eeb0 0a67 	vmov.f32	s0, s15
 800c948:	f7f8 ffba 	bl	80058c0 <CTRL_setNowData_Err>
}
 800c94c:	bf00      	nop
 800c94e:	3788      	adds	r7, #136	; 0x88
 800c950:	46bd      	mov	sp, r7
 800c952:	bdb0      	pop	{r4, r5, r7, pc}
 800c954:	f3af 8000 	nop.w
 800c958:	d2f1a9fc 	.word	0xd2f1a9fc
 800c95c:	3f70624d 	.word	0x3f70624d
 800c960:	beb2b8b9 	.word	0xbeb2b8b9
 800c964:	3eb2b8b9 	.word	0x3eb2b8b9
 800c968:	3eb2b8b9 	.word	0x3eb2b8b9
 800c96c:	20000c54 	.word	0x20000c54
 800c970:	20000850 	.word	0x20000850

0800c974 <MOT_setSuraStaSpeed>:

void MOT_setSuraStaSpeed( float f_speed , uint8_t sura_cmd)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c97e:	4603      	mov	r3, r0
 800c980:	70fb      	strb	r3, [r7, #3]
	if(sura_cmd == SLA_90){
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d103      	bne.n	800c990 <MOT_setSuraStaSpeed+0x1c>
		f_MotSuraStaSpeed_90S = f_speed;
 800c988:	4a0e      	ldr	r2, [pc, #56]	; (800c9c4 <MOT_setSuraStaSpeed+0x50>)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6013      	str	r3, [r2, #0]
		f_MotSuraStaSpeed_135S = f_speed;
	}	else if(sura_cmd == SLA_N90){
		f_MotSuraStaSpeed_V90 = f_speed;
	}

}
 800c98e:	e013      	b.n	800c9b8 <MOT_setSuraStaSpeed+0x44>
	}	else if(sura_cmd == SLA_45){
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d103      	bne.n	800c99e <MOT_setSuraStaSpeed+0x2a>
		f_MotSuraStaSpeed_45S = f_speed;
 800c996:	4a0c      	ldr	r2, [pc, #48]	; (800c9c8 <MOT_setSuraStaSpeed+0x54>)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6013      	str	r3, [r2, #0]
}
 800c99c:	e00c      	b.n	800c9b8 <MOT_setSuraStaSpeed+0x44>
	}	else if(sura_cmd == SLA_135){
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d103      	bne.n	800c9ac <MOT_setSuraStaSpeed+0x38>
		f_MotSuraStaSpeed_135S = f_speed;
 800c9a4:	4a09      	ldr	r2, [pc, #36]	; (800c9cc <MOT_setSuraStaSpeed+0x58>)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6013      	str	r3, [r2, #0]
}
 800c9aa:	e005      	b.n	800c9b8 <MOT_setSuraStaSpeed+0x44>
	}	else if(sura_cmd == SLA_N90){
 800c9ac:	78fb      	ldrb	r3, [r7, #3]
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d102      	bne.n	800c9b8 <MOT_setSuraStaSpeed+0x44>
		f_MotSuraStaSpeed_V90 = f_speed;
 800c9b2:	4a07      	ldr	r2, [pc, #28]	; (800c9d0 <MOT_setSuraStaSpeed+0x5c>)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6013      	str	r3, [r2, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	200002b8 	.word	0x200002b8
 800c9c8:	200002bc 	.word	0x200002bc
 800c9cc:	200002c0 	.word	0x200002c0
 800c9d0:	200002c4 	.word	0x200002c4

0800c9d4 <MOT_getSuraStaSpeed>:

float MOT_getSuraStaSpeed( uint8_t sura_cmd )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
	float sura_speed;

	if(sura_cmd == SLA_90){
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d103      	bne.n	800c9ec <MOT_getSuraStaSpeed+0x18>
		sura_speed = f_MotSuraStaSpeed_90S;
 800c9e4:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <MOT_getSuraStaSpeed+0x54>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	e013      	b.n	800ca14 <MOT_getSuraStaSpeed+0x40>
	}else if(sura_cmd == SLA_45){
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d103      	bne.n	800c9fa <MOT_getSuraStaSpeed+0x26>
		sura_speed = f_MotSuraStaSpeed_45S;
 800c9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ca2c <MOT_getSuraStaSpeed+0x58>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	e00c      	b.n	800ca14 <MOT_getSuraStaSpeed+0x40>
	}else if(sura_cmd == SLA_135){
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d103      	bne.n	800ca08 <MOT_getSuraStaSpeed+0x34>
		sura_speed = f_MotSuraStaSpeed_135S;
 800ca00:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <MOT_getSuraStaSpeed+0x5c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	60fb      	str	r3, [r7, #12]
 800ca06:	e005      	b.n	800ca14 <MOT_getSuraStaSpeed+0x40>
	}else if(sura_cmd == SLA_N90){
 800ca08:	79fb      	ldrb	r3, [r7, #7]
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d102      	bne.n	800ca14 <MOT_getSuraStaSpeed+0x40>
		sura_speed = f_MotSuraStaSpeed_V90;
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <MOT_getSuraStaSpeed+0x60>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	60fb      	str	r3, [r7, #12]
	}
	return sura_speed;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	ee07 3a90 	vmov	s15, r3
}
 800ca1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	200002b8 	.word	0x200002b8
 800ca2c:	200002bc 	.word	0x200002bc
 800ca30:	200002c0 	.word	0x200002c0
 800ca34:	200002c4 	.word	0x200002c4

0800ca38 <MOT_setTrgtSpeed>:

float MOT_setTrgtSpeed(float f_speed)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotTrgtSpeed = f_speed;
 800ca42:	4a07      	ldr	r2, [pc, #28]	; (800ca60 <MOT_setTrgtSpeed+0x28>)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6013      	str	r3, [r2, #0]
	return f_MotTrgtSpeed;
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <MOT_setTrgtSpeed+0x28>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	ee07 3a90 	vmov	s15, r3
}
 800ca50:	eeb0 0a67 	vmov.f32	s0, s15
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	200002b4 	.word	0x200002b4

0800ca64 <MOT_setNowSpeed>:

void MOT_setNowSpeed(float f_speed)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotNowSpeed = f_speed;
 800ca6e:	4a04      	ldr	r2, [pc, #16]	; (800ca80 <MOT_setNowSpeed+0x1c>)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6013      	str	r3, [r2, #0]
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	200002b0 	.word	0x200002b0

0800ca84 <MOT_goHitBackWall>:

void MOT_goHitBackWall(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b09e      	sub	sp, #120	; 0x78
 800ca88:	af00      	add	r7, sp, #0

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1= 1200.0;												// 角加速度1[rad/s^2]												// 角加速度3[rad/s^2]
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <MOT_goHitBackWall+0xa0>)
 800ca8c:	63bb      	str	r3, [r7, #56]	; 0x38

	GYRO_staErrChkAngle();			// エラー検出開始
 800ca8e:	f7fb ffdf 	bl	8008a50 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_HIT_WALL;
 800ca92:	2306      	movs	r3, #6
 800ca94:	713b      	strb	r3, [r7, #4]
	st_data.f_acc			= st_info.f_acc1;						// 加速度指定
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	60fb      	str	r3, [r7, #12]
	st_data.f_now			= 0;						// 現在速度
 800ca9a:	f04f 0300 	mov.w	r3, #0
 800ca9e:	613b      	str	r3, [r7, #16]
	st_data.f_trgt			= 0;						// 目標速度
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
	st_data.f_nowDist		= 0;						// 進んでいない
 800caa6:	f04f 0300 	mov.w	r3, #0
 800caaa:	61bb      	str	r3, [r7, #24]
	st_data.f_dist			= 0;						// 加速距離
 800caac:	f04f 0300 	mov.w	r3, #0
 800cab0:	61fb      	str	r3, [r7, #28]
	st_data.f_accAngleS		= 0;		// 角加速度
 800cab2:	f04f 0300 	mov.w	r3, #0
 800cab6:	623b      	str	r3, [r7, #32]
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800cab8:	f04f 0300 	mov.w	r3, #0
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_trgtAngleS		= 0;		// 目標角度
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngle		= 0;						// 現在角度
 800cac4:	f04f 0300 	mov.w	r3, #0
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_angle			= 0;			// 目標角度
 800caca:	f04f 0300 	mov.w	r3, #0
 800cace:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800cad0:	f04f 0300 	mov.w	r3, #0
 800cad4:	60bb      	str	r3, [r7, #8]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800cad6:	f7f8 fe51 	bl	800577c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800cada:	1d3b      	adds	r3, r7, #4
 800cadc:	4618      	mov	r0, r3
 800cade:	f7f8 ff33 	bl	8005948 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800cae2:	f7fb fca5 	bl	8008430 <DCM_staMotAll>
//	printf("目標速度 %f 目標位置 %f\r\n",st_data.f_trgt,st_data.f_dist);

	/*停止*/
	LL_mDelay(400);				// 安定待ち
 800cae6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800caea:	f009 fc55 	bl	8016398 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800caee:	f7f8 fe35 	bl	800575c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800caf2:	2000      	movs	r0, #0
 800caf4:	f7fb fc78 	bl	80083e8 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800caf8:	2001      	movs	r0, #1
 800cafa:	f7fb fc75 	bl	80083e8 <DCM_brakeMot>

	LL_mDelay(100);
 800cafe:	2064      	movs	r0, #100	; 0x64
 800cb00:	f009 fc4a 	bl	8016398 <LL_mDelay>

	f_MotNowSpeed = 0.0f;		//現在速度更新
 800cb04:	4b08      	ldr	r3, [pc, #32]	; (800cb28 <MOT_goHitBackWall+0xa4>)
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]

	CTRL_clrAngleErrSum();
 800cb0c:	f7f8 fe8a 	bl	8005824 <CTRL_clrAngleErrSum>

	GYRO_endErrChkAngle();					// エラー検出終了
 800cb10:	f7fb ffb0 	bl	8008a74 <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800cb14:	f7f8 fe9a 	bl	800584c <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 800cb18:	f7f8 fe84 	bl	8005824 <CTRL_clrAngleErrSum>
}
 800cb1c:	bf00      	nop
 800cb1e:	3778      	adds	r7, #120	; 0x78
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	44960000 	.word	0x44960000
 800cb28:	200002b0 	.word	0x200002b0
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <MOT_goSla>:

void MOT_goSla( enMOT_SURA_CMD en_type, stSLA* p_sla )
{
 800cb30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb34:	b0a2      	sub	sp, #136	; 0x88
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	4603      	mov	r3, r0
 800cb3a:	6039      	str	r1, [r7, #0]
 800cb3c:	71fb      	strb	r3, [r7, #7]

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1 		= 0;																// 加速度1[mm/s^2]
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	643b      	str	r3, [r7, #64]	; 0x40
	st_info.f_acc3 		= 0;																// 加速度3[mm/s^2]
 800cb44:	f04f 0300 	mov.w	r3, #0
 800cb48:	647b      	str	r3, [r7, #68]	; 0x44

	/* 速度 */
	st_info.f_now		= p_sla->f_speed;													// 現在速度
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	64bb      	str	r3, [r7, #72]	; 0x48
	st_info.f_trgt		= p_sla->f_speed;													// 目標速度
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	64fb      	str	r3, [r7, #76]	; 0x4c
	st_info.f_last		= p_sla->f_speed;													// 最終速度
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	653b      	str	r3, [r7, #80]	; 0x50

	/* 距離 */
	st_info.f_dist		= 0;																// 移動距離
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	657b      	str	r3, [r7, #84]	; 0x54
	st_info.f_l1		= 0;																// 第1移動距離[mm]
 800cb62:	f04f 0300 	mov.w	r3, #0
 800cb66:	65bb      	str	r3, [r7, #88]	; 0x58
	st_info.f_l1_2		= 0;																// 第1+2移動距離[mm]
 800cb68:	f04f 0300 	mov.w	r3, #0
 800cb6c:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* 角加速度 */
	st_info.f_accAngleS1= p_sla->f_angAcc;													// 角加速度1[deg/s^2]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	663b      	str	r3, [r7, #96]	; 0x60
	st_info.f_accAngleS3= p_sla->f_angAcc;													// 角加速度3[deg/s^2]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	667b      	str	r3, [r7, #100]	; 0x64

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度[deg/s]
 800cb7a:	f04f 0300 	mov.w	r3, #0
 800cb7e:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_trgtAngleS= p_sla->f_angvel;													// 目標角速度
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_info.f_lastAngleS= 0;																// 最終角速度
 800cb86:	f04f 0300 	mov.w	r3, #0
 800cb8a:	673b      	str	r3, [r7, #112]	; 0x70

	/* 角度 */
	st_info.f_angle		= p_sla->f_ang_Total;												// 旋回角度[deg]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
 800cb90:	677b      	str	r3, [r7, #116]	; 0x74
	st_info.f_angle1	= p_sla->f_ang_AccEnd;												// 第1移動角度[deg]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	67bb      	str	r3, [r7, #120]	; 0x78
	st_info.f_angle1_2	= p_sla->f_ang_ConstEnd;											// 第1+2移動角度[deg]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	69db      	ldr	r3, [r3, #28]
 800cb9c:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* 方向に応じて符号を変更 */
	if( ( en_type == MOT_R90S ) ||
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <MOT_goSla+0x92>
 800cba4:	79fb      	ldrb	r3, [r7, #7]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d00b      	beq.n	800cbc2 <MOT_goSla+0x92>
		( en_type == MOT_R45S_S2N ) || ( en_type == MOT_R45S_N2S ) ||
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	d008      	beq.n	800cbc2 <MOT_goSla+0x92>
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	2b06      	cmp	r3, #6
 800cbb4:	d005      	beq.n	800cbc2 <MOT_goSla+0x92>
		( en_type == MOT_R90S_N ) ||
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	2b08      	cmp	r3, #8
 800cbba:	d002      	beq.n	800cbc2 <MOT_goSla+0x92>
		( en_type == MOT_R135S_S2N ) || ( en_type == MOT_R135S_N2S )
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	2b0a      	cmp	r3, #10
 800cbc0:	d155      	bne.n	800cc6e <MOT_goSla+0x13e>
	){
		st_info.f_accAngleS1 *= -1.0;
 800cbc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7f3 fce7 	bl	8000598 <__aeabi_f2d>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4610      	mov	r0, r2
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7f4 f831 	bl	8000c38 <__aeabi_d2f>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	ee07 3a90 	vmov	s15, r3
 800cbdc:	eef1 7a67 	vneg.f32	s15, s15
 800cbe0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		st_info.f_trgtAngleS *= -1.0;
 800cbe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7f3 fcd6 	bl	8000598 <__aeabi_f2d>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f7f4 f820 	bl	8000c38 <__aeabi_d2f>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef1 7a67 	vneg.f32	s15, s15
 800cc02:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		st_info.f_angle      *= -1.0;
 800cc06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7f3 fcc5 	bl	8000598 <__aeabi_f2d>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4610      	mov	r0, r2
 800cc14:	4619      	mov	r1, r3
 800cc16:	f7f4 f80f 	bl	8000c38 <__aeabi_d2f>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	ee07 3a90 	vmov	s15, r3
 800cc20:	eef1 7a67 	vneg.f32	s15, s15
 800cc24:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		st_info.f_angle1     *= -1.0;
 800cc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f3 fcb4 	bl	8000598 <__aeabi_f2d>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4610      	mov	r0, r2
 800cc36:	4619      	mov	r1, r3
 800cc38:	f7f3 fffe 	bl	8000c38 <__aeabi_d2f>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	ee07 3a90 	vmov	s15, r3
 800cc42:	eef1 7a67 	vneg.f32	s15, s15
 800cc46:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		st_info.f_angle1_2   *= -1.0;
 800cc4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7f3 fca3 	bl	8000598 <__aeabi_f2d>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	4610      	mov	r0, r2
 800cc58:	4619      	mov	r1, r3
 800cc5a:	f7f3 ffed 	bl	8000c38 <__aeabi_d2f>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	ee07 3a90 	vmov	s15, r3
 800cc64:	eef1 7a67 	vneg.f32	s15, s15
 800cc68:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 800cc6c:	e010      	b.n	800cc90 <MOT_goSla+0x160>
	}
	else{
		st_info.f_accAngleS3 *= -1.0;
 800cc6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7f3 fc91 	bl	8000598 <__aeabi_f2d>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	f7f3 ffdb 	bl	8000c38 <__aeabi_d2f>
 800cc82:	4603      	mov	r3, r0
 800cc84:	ee07 3a90 	vmov	s15, r3
 800cc88:	eef1 7a67 	vneg.f32	s15, s15
 800cc8c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	}

	/* 斜め走行のタイプに応じて、スラローム前の距離とスラローム後の退避距離を入れ替える */
	if( ( en_type == MOT_R45S_N2S ) || ( en_type == MOT_L45S_N2S ) || ( en_type == MOT_R135S_N2S ) || ( en_type == MOT_L135S_N2S ) ){ 		// 逆にするもの
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d008      	beq.n	800cca8 <MOT_goSla+0x178>
 800cc96:	79fb      	ldrb	r3, [r7, #7]
 800cc98:	2b05      	cmp	r3, #5
 800cc9a:	d005      	beq.n	800cca8 <MOT_goSla+0x178>
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	2b0a      	cmp	r3, #10
 800cca0:	d002      	beq.n	800cca8 <MOT_goSla+0x178>
 800cca2:	79fb      	ldrb	r3, [r7, #7]
 800cca4:	2b0b      	cmp	r3, #11
 800cca6:	d108      	bne.n	800ccba <MOT_goSla+0x18a>
		f_entryLen  = p_sla->f_escapeLen;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_entryLen;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ccb8:	e007      	b.n	800ccca <MOT_goSla+0x19a>
	}
	else{		// 通常
		f_entryLen  = p_sla->f_entryLen;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_escapeLen;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	}

	GYRO_staErrChkAngle();			// エラー検出開始
 800ccca:	f7fb fec1 	bl	8008a50 <GYRO_staErrChkAngle>
	/*      entry      */
	/* ================ */
	/* ------------------------ */
	/*  スラローム前の前進動作  */
	/* ------------------------ */
	st_data.en_type			= CTRL_ENTRY_SURA;
 800ccce:	230a      	movs	r3, #10
 800ccd0:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800ccd2:	f04f 0300 	mov.w	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800ccd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccda:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800ccdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccde:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= 0;						// 進んでいない
 800cce0:	f04f 0300 	mov.w	r3, #0
 800cce4:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen;				// スラローム前の前進距離
 800cce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccea:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800ccf2:	f04f 0300 	mov.w	r3, #0
 800ccf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= 0;						// 目標角度
 800ccf8:	f04f 0300 	mov.w	r3, #0
 800ccfc:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800ccfe:	f04f 0300 	mov.w	r3, #0
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800cd04:	f04f 0300 	mov.w	r3, #0
 800cd08:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800cd0a:	f04f 0300 	mov.w	r3, #0
 800cd0e:	613b      	str	r3, [r7, #16]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800cd10:	f7f8 fd34 	bl	800577c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800cd14:	f107 030c 	add.w	r3, r7, #12
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f8 fe15 	bl	8005948 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800cd1e:	f7fb fb87 	bl	8008430 <DCM_staMotAll>

	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800cd22:	e025      	b.n	800cd70 <MOT_goSla+0x240>
		if(( en_type == MOT_R90S ) ||( en_type == MOT_L90S ) ){
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <MOT_goSla+0x200>
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d10c      	bne.n	800cd4a <MOT_goSla+0x21a>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800cd30:	2000      	movs	r0, #0
 800cd32:	f000 fd99 	bl	800d868 <DIST_getNowVal>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2bb4      	cmp	r3, #180	; 0xb4
 800cd3a:	dd0a      	ble.n	800cd52 <MOT_goSla+0x222>
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f000 fd93 	bl	800d868 <DIST_getNowVal>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2bb4      	cmp	r3, #180	; 0xb4
 800cd46:	dd04      	ble.n	800cd52 <MOT_goSla+0x222>
 800cd48:	e025      	b.n	800cd96 <MOT_goSla+0x266>
		}
		else{
			uc_dist_control = 0.0;
 800cd4a:	4bc3      	ldr	r3, [pc, #780]	; (800d058 <MOT_goSla+0x528>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	701a      	strb	r2, [r3, #0]
 800cd50:	e000      	b.n	800cd54 <MOT_goSla+0x224>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800cd52:	bf00      	nop
		}
		if( SYS_isOutOfCtrl() == TRUE ){
 800cd54:	f7fb fb16 	bl	8008384 <SYS_isOutOfCtrl>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d008      	beq.n	800cd70 <MOT_goSla+0x240>
			CTRL_stop();
 800cd5e:	f7f8 fcfd 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800cd62:	2000      	movs	r0, #0
 800cd64:	f7fb fb40 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800cd68:	2001      	movs	r0, #1
 800cd6a:	f7fb fb3d 	bl	80083e8 <DCM_brakeMot>
			break;
 800cd6e:	e012      	b.n	800cd96 <MOT_goSla+0x266>
	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800cd70:	f7f8 fc52 	bl	8005618 <Get_NowDist>
 800cd74:	eef0 6a40 	vmov.f32	s13, s0
 800cd78:	4bb7      	ldr	r3, [pc, #732]	; (800d058 <MOT_goSla+0x528>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	ee07 3a90 	vmov	s15, r3
 800cd80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cd84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cd88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd8c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd94:	d4c6      	bmi.n	800cd24 <MOT_goSla+0x1f4>
//	LED_off(LED1);
//	log_in(0);
	/* ------ */
	/*  acc  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_SURA;
 800cd96:	230b      	movs	r3, #11
 800cd98:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800cda0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda2:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800cda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda6:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen;				//
 800cda8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdac:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;		// 加速距離
 800cdae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cdb2:	f7f3 fbf1 	bl	8000598 <__aeabi_f2d>
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	460d      	mov	r5, r1
 800cdba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	8a9b      	ldrh	r3, [r3, #20]
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdce:	ee17 0a90 	vmov	r0, s15
 800cdd2:	f7f3 fbe1 	bl	8000598 <__aeabi_f2d>
 800cdd6:	a39e      	add	r3, pc, #632	; (adr r3, 800d050 <MOT_goSla+0x520>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	f7f3 fc34 	bl	8000648 <__aeabi_dmul>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4620      	mov	r0, r4
 800cde6:	4629      	mov	r1, r5
 800cde8:	f7f3 fa78 	bl	80002dc <__adddf3>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f7f3 ff20 	bl	8000c38 <__aeabi_d2f>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800cdfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdfe:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800ce00:	f04f 0300 	mov.w	r3, #0
 800ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角速度
 800ce06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce08:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800ce0a:	f04f 0300 	mov.w	r3, #0
 800ce0e:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800ce10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce12:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	8a9b      	ldrh	r3, [r3, #20]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f3 fbab 	bl	8000574 <__aeabi_i2d>
 800ce1e:	a38c      	add	r3, pc, #560	; (adr r3, 800d050 <MOT_goSla+0x520>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 fc10 	bl	8000648 <__aeabi_dmul>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f7f3 ff02 	bl	8000c38 <__aeabi_d2f>
 800ce34:	4603      	mov	r3, r0
 800ce36:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800ce38:	f107 030c 	add.w	r3, r7, #12
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7f8 fd83 	bl	8005948 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d133      	bne.n	800ceb6 <MOT_goSla+0x386>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800ce4e:	e00d      	b.n	800ce6c <MOT_goSla+0x33c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800ce50:	f7fb fa98 	bl	8008384 <SYS_isOutOfCtrl>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d008      	beq.n	800ce6c <MOT_goSla+0x33c>
				CTRL_stop();
 800ce5a:	f7f8 fc7f 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ce5e:	2000      	movs	r0, #0
 800ce60:	f7fb fac2 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ce64:	2001      	movs	r0, #1
 800ce66:	f7fb fabf 	bl	80083e8 <DCM_brakeMot>
				break;
 800ce6a:	e03a      	b.n	800cee2 <MOT_goSla+0x3b2>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800ce6c:	f7f8 fc0e 	bl	800568c <Get_NowAngle>
 800ce70:	eeb0 7a40 	vmov.f32	s14, s0
 800ce74:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ce78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce80:	dd2f      	ble.n	800cee2 <MOT_goSla+0x3b2>
 800ce82:	f7f8 fbc9 	bl	8005618 <Get_NowDist>
 800ce86:	eeb0 7a40 	vmov.f32	s14, s0
 800ce8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ce8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce96:	d4db      	bmi.n	800ce50 <MOT_goSla+0x320>
 800ce98:	e023      	b.n	800cee2 <MOT_goSla+0x3b2>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800ce9a:	f7fb fa73 	bl	8008384 <SYS_isOutOfCtrl>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d008      	beq.n	800ceb6 <MOT_goSla+0x386>
				CTRL_stop();
 800cea4:	f7f8 fc5a 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800cea8:	2000      	movs	r0, #0
 800ceaa:	f7fb fa9d 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f7fb fa9a 	bl	80083e8 <DCM_brakeMot>
				break;
 800ceb4:	e015      	b.n	800cee2 <MOT_goSla+0x3b2>
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800ceb6:	f7f8 fbe9 	bl	800568c <Get_NowAngle>
 800ceba:	eeb0 7a40 	vmov.f32	s14, s0
 800cebe:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800cec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	d50a      	bpl.n	800cee2 <MOT_goSla+0x3b2>
 800cecc:	f7f8 fba4 	bl	8005618 <Get_NowDist>
 800ced0:	eeb0 7a40 	vmov.f32	s14, s0
 800ced4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ced8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee0:	d4db      	bmi.n	800ce9a <MOT_goSla+0x36a>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  const  */
	/* ------ */
	st_data.en_type			= CTRL_CONST_SURA;
 800cee2:	230c      	movs	r3, #12
 800cee4:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800cee6:	f04f 0300 	mov.w	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800ceec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceee:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800cef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cef2:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;
 800cef4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cef8:	f7f3 fb4e 	bl	8000598 <__aeabi_f2d>
 800cefc:	4604      	mov	r4, r0
 800cefe:	460d      	mov	r5, r1
 800cf00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	8a9b      	ldrh	r3, [r3, #20]
 800cf08:	ee07 3a90 	vmov	s15, r3
 800cf0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf14:	ee17 0a90 	vmov	r0, s15
 800cf18:	f7f3 fb3e 	bl	8000598 <__aeabi_f2d>
 800cf1c:	a34c      	add	r3, pc, #304	; (adr r3, 800d050 <MOT_goSla+0x520>)
 800cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf22:	f7f3 fb91 	bl	8000648 <__aeabi_dmul>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	f7f3 f9d5 	bl	80002dc <__adddf3>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4610      	mov	r0, r2
 800cf38:	4619      	mov	r1, r3
 800cf3a:	f7f3 fe7d 	bl	8000c38 <__aeabi_d2f>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;		// 等速距離
 800cf42:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800cf46:	f7f3 fb27 	bl	8000598 <__aeabi_f2d>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	8adb      	ldrh	r3, [r3, #22]
 800cf56:	461a      	mov	r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	8a9b      	ldrh	r3, [r3, #20]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6a:	ee17 0a90 	vmov	r0, s15
 800cf6e:	f7f3 fb13 	bl	8000598 <__aeabi_f2d>
 800cf72:	a337      	add	r3, pc, #220	; (adr r3, 800d050 <MOT_goSla+0x520>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f7f3 fb66 	bl	8000648 <__aeabi_dmul>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4620      	mov	r0, r4
 800cf82:	4629      	mov	r1, r5
 800cf84:	f7f3 f9aa 	bl	80002dc <__adddf3>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	f7f3 fe52 	bl	8000c38 <__aeabi_d2f>
 800cf94:	4603      	mov	r3, r0
 800cf96:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800cf98:	f04f 0300 	mov.w	r3, #0
 800cf9c:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800cf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= st_info.f_trgtAngleS;		// 目標角速度
 800cfa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa4:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800cfa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfa8:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1_2;		// 目標角度
 800cfaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfac:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_constAngvelTime * 0.001;		// [msec] → [sec]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	8adb      	ldrh	r3, [r3, #22]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f3 fade 	bl	8000574 <__aeabi_i2d>
 800cfb8:	a325      	add	r3, pc, #148	; (adr r3, 800d050 <MOT_goSla+0x520>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 fb43 	bl	8000648 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	f7f3 fe35 	bl	8000c38 <__aeabi_d2f>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800cfd2:	f107 030c 	add.w	r3, r7, #12
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7f8 fcb6 	bl	8005948 <CTRL_setData>

	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d139      	bne.n	800d05c <MOT_goSla+0x52c>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800cfe8:	e00d      	b.n	800d006 <MOT_goSla+0x4d6>
			if( SYS_isOutOfCtrl() == TRUE ){
 800cfea:	f7fb f9cb 	bl	8008384 <SYS_isOutOfCtrl>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d008      	beq.n	800d006 <MOT_goSla+0x4d6>
				CTRL_stop();
 800cff4:	f7f8 fbb2 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800cff8:	2000      	movs	r0, #0
 800cffa:	f7fb f9f5 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800cffe:	2001      	movs	r0, #1
 800d000:	f7fb f9f2 	bl	80083e8 <DCM_brakeMot>
				break;
 800d004:	e040      	b.n	800d088 <MOT_goSla+0x558>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800d006:	f7f8 fb41 	bl	800568c <Get_NowAngle>
 800d00a:	eeb0 7a40 	vmov.f32	s14, s0
 800d00e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01a:	dd35      	ble.n	800d088 <MOT_goSla+0x558>
 800d01c:	f7f8 fafc 	bl	8005618 <Get_NowDist>
 800d020:	eeb0 7a40 	vmov.f32	s14, s0
 800d024:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d030:	d4db      	bmi.n	800cfea <MOT_goSla+0x4ba>
 800d032:	e029      	b.n	800d088 <MOT_goSla+0x558>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800d034:	f7fb f9a6 	bl	8008384 <SYS_isOutOfCtrl>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <MOT_goSla+0x52c>
				CTRL_stop();
 800d03e:	f7f8 fb8d 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800d042:	2000      	movs	r0, #0
 800d044:	f7fb f9d0 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800d048:	2001      	movs	r0, #1
 800d04a:	f7fb f9cd 	bl	80083e8 <DCM_brakeMot>
				break;
 800d04e:	e01b      	b.n	800d088 <MOT_goSla+0x558>
 800d050:	d2f1a9fc 	.word	0xd2f1a9fc
 800d054:	3f50624d 	.word	0x3f50624d
 800d058:	20001478 	.word	0x20001478
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800d05c:	f7f8 fb16 	bl	800568c <Get_NowAngle>
 800d060:	eeb0 7a40 	vmov.f32	s14, s0
 800d064:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d070:	d50a      	bpl.n	800d088 <MOT_goSla+0x558>
 800d072:	f7f8 fad1 	bl	8005618 <Get_NowDist>
 800d076:	eeb0 7a40 	vmov.f32	s14, s0
 800d07a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d07e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d086:	d4d5      	bmi.n	800d034 <MOT_goSla+0x504>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  dec  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_SURA;
 800d088:	230d      	movs	r3, #13
 800d08a:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800d08c:	f04f 0300 	mov.w	r3, #0
 800d090:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800d092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d094:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800d096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d098:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;
 800d09a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800d09e:	f7f3 fa7b 	bl	8000598 <__aeabi_f2d>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	8adb      	ldrh	r3, [r3, #22]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	8a9b      	ldrh	r3, [r3, #20]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	ee07 3a90 	vmov	s15, r3
 800d0ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c2:	ee17 0a90 	vmov	r0, s15
 800d0c6:	f7f3 fa67 	bl	8000598 <__aeabi_f2d>
 800d0ca:	a3da      	add	r3, pc, #872	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 faba 	bl	8000648 <__aeabi_dmul>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7f3 f8fe 	bl	80002dc <__adddf3>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	f7f3 fda6 	bl	8000c38 <__aeabi_d2f>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2.0 ) * 0.001;		// 減速距離
 800d0f0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800d0f4:	f7f3 fa50 	bl	8000598 <__aeabi_f2d>
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	460d      	mov	r5, r1
 800d0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7f3 fa4a 	bl	8000598 <__aeabi_f2d>
 800d104:	4680      	mov	r8, r0
 800d106:	4689      	mov	r9, r1
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	8adb      	ldrh	r3, [r3, #22]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7f3 fa31 	bl	8000574 <__aeabi_i2d>
 800d112:	4682      	mov	sl, r0
 800d114:	468b      	mov	fp, r1
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	8a9b      	ldrh	r3, [r3, #20]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 fa2a 	bl	8000574 <__aeabi_i2d>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	f7f3 f8da 	bl	80002dc <__adddf3>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4650      	mov	r0, sl
 800d12e:	4659      	mov	r1, fp
 800d130:	f7f3 f8d4 	bl	80002dc <__adddf3>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	4640      	mov	r0, r8
 800d13a:	4649      	mov	r1, r9
 800d13c:	f7f3 fa84 	bl	8000648 <__aeabi_dmul>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	4610      	mov	r0, r2
 800d146:	4619      	mov	r1, r3
 800d148:	a3ba      	add	r3, pc, #744	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14e:	f7f3 fa7b 	bl	8000648 <__aeabi_dmul>
 800d152:	4602      	mov	r2, r0
 800d154:	460b      	mov	r3, r1
 800d156:	4620      	mov	r0, r4
 800d158:	4629      	mov	r1, r5
 800d15a:	f7f3 f8bf 	bl	80002dc <__adddf3>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4610      	mov	r0, r2
 800d164:	4619      	mov	r1, r3
 800d166:	f7f3 fd67 	bl	8000c38 <__aeabi_d2f>
 800d16a:	4603      	mov	r3, r0
 800d16c:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800d16e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800d172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d174:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;				// 目標角速度
 800d176:	f04f 0300 	mov.w	r3, #0
 800d17a:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800d17c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d17e:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800d180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d182:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	8a9b      	ldrh	r3, [r3, #20]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f3 f9f3 	bl	8000574 <__aeabi_i2d>
 800d18e:	a3a9      	add	r3, pc, #676	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f7f3 fa58 	bl	8000648 <__aeabi_dmul>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4610      	mov	r0, r2
 800d19e:	4619      	mov	r1, r3
 800d1a0:	f7f3 fd4a 	bl	8000c38 <__aeabi_d2f>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800d1a8:	f107 030c 	add.w	r3, r7, #12
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f8 fbcb 	bl	8005948 <CTRL_setData>
//	LED = LED_ALL_ON;
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d143      	bne.n	800d246 <MOT_goSla+0x716>
		while( ( Get_NowAngle() > st_info.f_angle -0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800d1be:	e00d      	b.n	800d1dc <MOT_goSla+0x6ac>
			if( SYS_isOutOfCtrl() == TRUE ){
 800d1c0:	f7fb f8e0 	bl	8008384 <SYS_isOutOfCtrl>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d008      	beq.n	800d1dc <MOT_goSla+0x6ac>
				CTRL_stop();
 800d1ca:	f7f8 fac7 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f7fb f90a 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	f7fb f907 	bl	80083e8 <DCM_brakeMot>
				break;
 800d1da:	e05a      	b.n	800d292 <MOT_goSla+0x762>
		while( ( Get_NowAngle() > st_info.f_angle -0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800d1dc:	f7f8 fa56 	bl	800568c <Get_NowAngle>
 800d1e0:	ee10 3a10 	vmov	r3, s0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7f3 f9d7 	bl	8000598 <__aeabi_f2d>
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	460d      	mov	r5, r1
 800d1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f3 f9d1 	bl	8000598 <__aeabi_f2d>
 800d1f6:	a38f      	add	r3, pc, #572	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f7f3 f86c 	bl	80002d8 <__aeabi_dsub>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4620      	mov	r0, r4
 800d206:	4629      	mov	r1, r5
 800d208:	f7f3 fcae 	bl	8000b68 <__aeabi_dcmpgt>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d03f      	beq.n	800d292 <MOT_goSla+0x762>
 800d212:	f7f8 fa01 	bl	8005618 <Get_NowDist>
 800d216:	eeb0 7a40 	vmov.f32	s14, s0
 800d21a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d21e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d226:	d4cb      	bmi.n	800d1c0 <MOT_goSla+0x690>
 800d228:	e033      	b.n	800d292 <MOT_goSla+0x762>

		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle+0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800d22a:	f7fb f8ab 	bl	8008384 <SYS_isOutOfCtrl>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d008      	beq.n	800d246 <MOT_goSla+0x716>
				CTRL_stop();
 800d234:	f7f8 fa92 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800d238:	2000      	movs	r0, #0
 800d23a:	f7fb f8d5 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800d23e:	2001      	movs	r0, #1
 800d240:	f7fb f8d2 	bl	80083e8 <DCM_brakeMot>
				break;
 800d244:	e025      	b.n	800d292 <MOT_goSla+0x762>
		while( ( Get_NowAngle() < st_info.f_angle+0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800d246:	f7f8 fa21 	bl	800568c <Get_NowAngle>
 800d24a:	ee10 3a10 	vmov	r3, s0
 800d24e:	4618      	mov	r0, r3
 800d250:	f7f3 f9a2 	bl	8000598 <__aeabi_f2d>
 800d254:	4604      	mov	r4, r0
 800d256:	460d      	mov	r5, r1
 800d258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f3 f99c 	bl	8000598 <__aeabi_f2d>
 800d260:	a374      	add	r3, pc, #464	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f839 	bl	80002dc <__adddf3>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 fc5b 	bl	8000b2c <__aeabi_dcmplt>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00a      	beq.n	800d292 <MOT_goSla+0x762>
 800d27c:	f7f8 f9cc 	bl	8005618 <Get_NowDist>
 800d280:	eeb0 7a40 	vmov.f32	s14, s0
 800d284:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	d4cb      	bmi.n	800d22a <MOT_goSla+0x6fa>

//	LED_on(LED1);
	/* ------------------------ */
	/*  escape  */
	/* ------------------------ */
	st_data.en_type			= CTRL_EXIT_SURA;
 800d292:	230e      	movs	r3, #14
 800d294:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800d296:	f04f 0300 	mov.w	r3, #0
 800d29a:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800d29c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29e:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800d2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2a2:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2.0  ) * 0.001;
 800d2a4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800d2a8:	f7f3 f976 	bl	8000598 <__aeabi_f2d>
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7f3 f970 	bl	8000598 <__aeabi_f2d>
 800d2b8:	4680      	mov	r8, r0
 800d2ba:	4689      	mov	r9, r1
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	8adb      	ldrh	r3, [r3, #22]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f3 f957 	bl	8000574 <__aeabi_i2d>
 800d2c6:	4682      	mov	sl, r0
 800d2c8:	468b      	mov	fp, r1
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	8a9b      	ldrh	r3, [r3, #20]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f3 f950 	bl	8000574 <__aeabi_i2d>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	f7f3 f800 	bl	80002dc <__adddf3>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4650      	mov	r0, sl
 800d2e2:	4659      	mov	r1, fp
 800d2e4:	f7f2 fffa 	bl	80002dc <__adddf3>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	f7f3 f9aa 	bl	8000648 <__aeabi_dmul>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	a34d      	add	r3, pc, #308	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	f7f3 f9a1 	bl	8000648 <__aeabi_dmul>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4620      	mov	r0, r4
 800d30c:	4629      	mov	r1, r5
 800d30e:	f7f2 ffe5 	bl	80002dc <__adddf3>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	4610      	mov	r0, r2
 800d318:	4619      	mov	r1, r3
 800d31a:	f7f3 fc8d 	bl	8000c38 <__aeabi_d2f>
 800d31e:	4603      	mov	r3, r0
 800d320:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_escapeLen + f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2.0 ) * 0.001;	// スラローム後の前進距離
 800d322:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800d326:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d32e:	ee17 0a90 	vmov	r0, s15
 800d332:	f7f3 f931 	bl	8000598 <__aeabi_f2d>
 800d336:	4604      	mov	r4, r0
 800d338:	460d      	mov	r5, r1
 800d33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f3 f92b 	bl	8000598 <__aeabi_f2d>
 800d342:	4680      	mov	r8, r0
 800d344:	4689      	mov	r9, r1
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	8adb      	ldrh	r3, [r3, #22]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7f3 f912 	bl	8000574 <__aeabi_i2d>
 800d350:	4682      	mov	sl, r0
 800d352:	468b      	mov	fp, r1
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	8a9b      	ldrh	r3, [r3, #20]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f3 f90b 	bl	8000574 <__aeabi_i2d>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	f7f2 ffbb 	bl	80002dc <__adddf3>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	4650      	mov	r0, sl
 800d36c:	4659      	mov	r1, fp
 800d36e:	f7f2 ffb5 	bl	80002dc <__adddf3>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f3 f965 	bl	8000648 <__aeabi_dmul>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4610      	mov	r0, r2
 800d384:	4619      	mov	r1, r3
 800d386:	a32b      	add	r3, pc, #172	; (adr r3, 800d434 <MOT_goSla+0x904>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	f7f3 f95c 	bl	8000648 <__aeabi_dmul>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f2 ffa0 	bl	80002dc <__adddf3>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f7f3 fc48 	bl	8000c38 <__aeabi_d2f>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800d3ac:	f04f 0300 	mov.w	r3, #0
 800d3b0:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800d3b8:	f04f 0300 	mov.w	r3, #0
 800d3bc:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800d3be:	f04f 0300 	mov.w	r3, #0
 800d3c2:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800d3c4:	f04f 0300 	mov.w	r3, #0
 800d3c8:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800d3ca:	f04f 0300 	mov.w	r3, #0
 800d3ce:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800d3d0:	f107 030c 	add.w	r3, r7, #12
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7f8 fab7 	bl	8005948 <CTRL_setData>
//	LED =LED_ALL_OFF;
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800d3da:	e00d      	b.n	800d3f8 <MOT_goSla+0x8c8>
		if( SYS_isOutOfCtrl() == TRUE ){
 800d3dc:	f7fa ffd2 	bl	8008384 <SYS_isOutOfCtrl>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d008      	beq.n	800d3f8 <MOT_goSla+0x8c8>
			CTRL_stop();
 800d3e6:	f7f8 f9b9 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	f7fa fffc 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	f7fa fff9 	bl	80083e8 <DCM_brakeMot>
			break;
 800d3f6:	e00a      	b.n	800d40e <MOT_goSla+0x8de>
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800d3f8:	f7f8 f90e 	bl	8005618 <Get_NowDist>
 800d3fc:	eeb0 7a40 	vmov.f32	s14, s0
 800d400:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40c:	d4e6      	bmi.n	800d3dc <MOT_goSla+0x8ac>
		}				// 途中で制御不能になった
	}
//	LED_off(LED1);
//	log_in(f_NowAngle);
	f_MotNowSpeed = st_info.f_now;			// 現在速度更新
 800d40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d410:	4a07      	ldr	r2, [pc, #28]	; (800d430 <MOT_goSla+0x900>)
 800d412:	6013      	str	r3, [r2, #0]
//	LED =LED_ALL_OFF;
	GYRO_endErrChkAngle();					// エラー検出終了
 800d414:	f7fb fb2e 	bl	8008a74 <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist ,*/st_data.f_angle);
 800d418:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d41c:	eeb0 0a67 	vmov.f32	s0, s15
 800d420:	f7f8 fa4e 	bl	80058c0 <CTRL_setNowData_Err>

}
 800d424:	bf00      	nop
 800d426:	3788      	adds	r7, #136	; 0x88
 800d428:	46bd      	mov	sp, r7
 800d42a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d42e:	bf00      	nop
 800d430:	200002b0 	.word	0x200002b0
 800d434:	d2f1a9fc 	.word	0xd2f1a9fc
 800d438:	3f50624d 	.word	0x3f50624d

0800d43c <MOT_setWallEdgeType>:
		}
	}
}

void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type )
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	71fb      	strb	r3, [r7, #7]
	en_WallEdge = en_type;
 800d446:	4a06      	ldr	r2, [pc, #24]	; (800d460 <MOT_setWallEdgeType+0x24>)
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	7013      	strb	r3, [r2, #0]
	bl_IsWallEdge = FALSE;			// 非検知
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <MOT_setWallEdgeType+0x28>)
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]

}
 800d452:	bf00      	nop
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	200002c8 	.word	0x200002c8
 800d464:	200002c9 	.word	0x200002c9

0800d468 <MOT_getWallEdgeType>:

enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void )
{
 800d468:	b480      	push	{r7}
 800d46a:	af00      	add	r7, sp, #0
	return en_WallEdge;
 800d46c:	4b03      	ldr	r3, [pc, #12]	; (800d47c <MOT_getWallEdgeType+0x14>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
}
 800d470:	4618      	mov	r0, r3
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	200002c8 	.word	0x200002c8

0800d480 <MOT_setWallEdge>:

void MOT_setWallEdge( bool bl_val )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	71fb      	strb	r3, [r7, #7]
	bl_IsWallEdge = bl_val;
 800d48a:	4a04      	ldr	r2, [pc, #16]	; (800d49c <MOT_setWallEdge+0x1c>)
 800d48c:	79fb      	ldrb	r3, [r7, #7]
 800d48e:	7013      	strb	r3, [r2, #0]

}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	200002c9 	.word	0x200002c9

0800d4a0 <MOT_setWallEdgeDist>:

bool MOT_setWallEdgeDist( void )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
	float f_addDist;

	/* 壁の切れ目を検知していない */
	if( ( bl_IsWallEdge == FALSE ) || ( en_WallEdge == MOT_WALL_EDGE_NONE ) ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800d4a6:	4b1b      	ldr	r3, [pc, #108]	; (800d514 <MOT_setWallEdgeDist+0x74>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	f083 0301 	eor.w	r3, r3, #1
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d103      	bne.n	800d4bc <MOT_setWallEdgeDist+0x1c>
 800d4b4:	4b18      	ldr	r3, [pc, #96]	; (800d518 <MOT_setWallEdgeDist+0x78>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <MOT_setWallEdgeDist+0x20>
		return FALSE;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e024      	b.n	800d50a <MOT_setWallEdgeDist+0x6a>
	}

	f_addDist = Get_NowDist() + MOT_WALL_EDGE_DIST;		// 旋回開始位置
 800d4c0:	f7f8 f8aa 	bl	8005618 <Get_NowDist>
 800d4c4:	eef0 7a40 	vmov.f32	s15, s0
 800d4c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d51c <MOT_setWallEdgeDist+0x7c>
 800d4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4d0:	edc7 7a01 	vstr	s15, [r7, #4]

	/* 多く走る必要がある */
	if( f_addDist > st_Info.f_dist ){
 800d4d4:	4b12      	ldr	r3, [pc, #72]	; (800d520 <MOT_setWallEdgeDist+0x80>)
 800d4d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800d4da:	ed97 7a01 	vldr	s14, [r7, #4]
 800d4de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e6:	dd09      	ble.n	800d4fc <MOT_setWallEdgeDist+0x5c>

		f_WallEdgeAddDist = f_addDist - st_Info.f_dist;	//壁切れの距離＋現在距離が本来の距離を超えた分をwall_adddistとして設定してるんだなぁだから設定だけすればいいのか
 800d4e8:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <MOT_setWallEdgeDist+0x80>)
 800d4ea:	edd3 7a06 	vldr	s15, [r3, #24]
 800d4ee:	ed97 7a01 	vldr	s14, [r7, #4]
 800d4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <MOT_setWallEdgeDist+0x84>)
 800d4f8:	edc3 7a00 	vstr	s15, [r3]
/*	if( f_addDist < st_Info.f_dist){
		st_Info.f_dist = f_addDist;
	}
*/
	/* 壁の切れ目補正の変数を初期化 */
	en_WallEdge   = MOT_WALL_EDGE_NONE;		// 壁の切れ目タイプ
 800d4fc:	4b06      	ldr	r3, [pc, #24]	; (800d518 <MOT_setWallEdgeDist+0x78>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
	bl_IsWallEdge = FALSE;					// 壁の切れ目検知
 800d502:	4b04      	ldr	r3, [pc, #16]	; (800d514 <MOT_setWallEdgeDist+0x74>)
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800d508:	2301      	movs	r3, #1
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	200002c9 	.word	0x200002c9
 800d518:	200002c8 	.word	0x200002c8
 800d51c:	3cf9db23 	.word	0x3cf9db23
 800d520:	2000b170 	.word	0x2000b170
 800d524:	200002cc 	.word	0x200002cc

0800d528 <MOT_setWallEdgeDist_LoopWait>:
bool MOT_setWallEdgeDist_LoopWait( void )
{
 800d528:	b480      	push	{r7}
 800d52a:	af00      	add	r7, sp, #0
//	SetLED(0x11);
	/* 壁の切れ目を検知していない */
	if( bl_IsWallEdge == FALSE ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800d52c:	4b08      	ldr	r3, [pc, #32]	; (800d550 <MOT_setWallEdgeDist_LoopWait+0x28>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f083 0301 	eor.w	r3, r3, #1
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <MOT_setWallEdgeDist_LoopWait+0x16>

		return FALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e003      	b.n	800d546 <MOT_setWallEdgeDist_LoopWait+0x1e>
	}

	f_WallEdgeAddDist = MOT_WALL_EDGE_DIST;		// 旋回開始位置
 800d53e:	4b05      	ldr	r3, [pc, #20]	; (800d554 <MOT_setWallEdgeDist_LoopWait+0x2c>)
 800d540:	4a05      	ldr	r2, [pc, #20]	; (800d558 <MOT_setWallEdgeDist_LoopWait+0x30>)
 800d542:	601a      	str	r2, [r3, #0]

	return TRUE;
 800d544:	2301      	movs	r3, #1
}
 800d546:	4618      	mov	r0, r3
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	200002c9 	.word	0x200002c9
 800d554:	200002cc 	.word	0x200002cc
 800d558:	3cf9db23 	.word	0x3cf9db23
 800d55c:	00000000 	.word	0x00000000

0800d560 <DIST_Front_Wall_correction>:

void DIST_Front_Wall_correction(void)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b09e      	sub	sp, #120	; 0x78
 800d564:	af00      	add	r7, sp, #0
	stMOT_DATA	st_info;	//シーケンスデータ
	stCTRL_DATA	st_data;	//制御データ

	GYRO_staErrChkAngle();			// エラー検出開始
 800d566:	f7fb fa73 	bl	8008a50 <GYRO_staErrChkAngle>
	
	st_data.en_type			= CTRL_FRONT_WALL;
 800d56a:	230f      	movs	r3, #15
 800d56c:	713b      	strb	r3, [r7, #4]
	st_data.f_acc			= 0;						// 加速度指定
 800d56e:	f04f 0300 	mov.w	r3, #0
 800d572:	60fb      	str	r3, [r7, #12]
	st_data.f_now			= 0;						// 現在速度
 800d574:	f04f 0300 	mov.w	r3, #0
 800d578:	613b      	str	r3, [r7, #16]
	st_data.f_trgt			= 0;						// 目標速度
 800d57a:	f04f 0300 	mov.w	r3, #0
 800d57e:	617b      	str	r3, [r7, #20]
	st_data.f_nowDist		= 0;						// 進んでいない
 800d580:	f04f 0300 	mov.w	r3, #0
 800d584:	61bb      	str	r3, [r7, #24]
	st_data.f_dist			= 0;						// 加速距離
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	61fb      	str	r3, [r7, #28]
	st_data.f_accAngleS		= 0;		// 角加速度
 800d58c:	f04f 0300 	mov.w	r3, #0
 800d590:	623b      	str	r3, [r7, #32]
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800d592:	f04f 0300 	mov.w	r3, #0
 800d596:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_trgtAngleS		= 0;		// 目標角度
 800d598:	f04f 0300 	mov.w	r3, #0
 800d59c:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngle		= 0;						// 現在角度
 800d59e:	f04f 0300 	mov.w	r3, #0
 800d5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_angle			= 0;			// 目標角度
 800d5a4:	f04f 0300 	mov.w	r3, #0
 800d5a8:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800d5aa:	f04f 0300 	mov.w	r3, #0
 800d5ae:	60bb      	str	r3, [r7, #8]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800d5b0:	f7f8 f8e4 	bl	800577c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800d5b4:	1d3b      	adds	r3, r7, #4
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7f8 f9c6 	bl	8005948 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800d5bc:	f7fa ff38 	bl	8008430 <DCM_staMotAll>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_minus-30))
 800d5c0:	e00f      	b.n	800d5e2 <DIST_Front_Wall_correction+0x82>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_minus-30))){
			if(escape_wait > 0.8)break;
 800d5c2:	4b29      	ldr	r3, [pc, #164]	; (800d668 <DIST_Front_Wall_correction+0x108>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f2 ffe6 	bl	8000598 <__aeabi_f2d>
 800d5cc:	a324      	add	r3, pc, #144	; (adr r3, 800d660 <DIST_Front_Wall_correction+0x100>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f3 fac9 	bl	8000b68 <__aeabi_dcmpgt>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d123      	bne.n	800d624 <DIST_Front_Wall_correction+0xc4>
			LL_mDelay(10);//volatile入れてないから回避用に入れてみる
 800d5dc:	200a      	movs	r0, #10
 800d5de:	f008 fedb 	bl	8016398 <LL_mDelay>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_minus-30))
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	f000 f940 	bl	800d868 <DIST_getNowVal>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	461a      	mov	r2, r3
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_minus-30))){
 800d5ec:	f240 23d5 	movw	r3, #725	; 0x2d5
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	dce6      	bgt.n	800d5c2 <DIST_Front_Wall_correction+0x62>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_minus-30))
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	f000 f937 	bl	800d868 <DIST_getNowVal>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800d600:	dddf      	ble.n	800d5c2 <DIST_Front_Wall_correction+0x62>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_minus-30))){
 800d602:	2001      	movs	r0, #1
 800d604:	f000 f930 	bl	800d868 <DIST_getNowVal>
 800d608:	4603      	mov	r3, r0
 800d60a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800d60e:	dad8      	bge.n	800d5c2 <DIST_Front_Wall_correction+0x62>
 800d610:	2001      	movs	r0, #1
 800d612:	f000 f929 	bl	800d868 <DIST_getNowVal>
 800d616:	4603      	mov	r3, r0
 800d618:	461a      	mov	r2, r3
 800d61a:	f240 2302 	movw	r3, #514	; 0x202
 800d61e:	429a      	cmp	r2, r3
 800d620:	ddcf      	ble.n	800d5c2 <DIST_Front_Wall_correction+0x62>
 800d622:	e000      	b.n	800d626 <DIST_Front_Wall_correction+0xc6>
			if(escape_wait > 0.8)break;
 800d624:	bf00      	nop
	}
	LL_mDelay(50);
 800d626:	2032      	movs	r0, #50	; 0x32
 800d628:	f008 feb6 	bl	8016398 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800d62c:	f7f8 f896 	bl	800575c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800d630:	2000      	movs	r0, #0
 800d632:	f7fa fed9 	bl	80083e8 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800d636:	2001      	movs	r0, #1
 800d638:	f7fa fed6 	bl	80083e8 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 800d63c:	f7fb fa1a 	bl	8008a74 <GYRO_endErrChkAngle>
	LL_mDelay(100);
 800d640:	2064      	movs	r0, #100	; 0x64
 800d642:	f008 fea9 	bl	8016398 <LL_mDelay>
	f_MotNowSpeed = 0.0f;		//現在速度更新
 800d646:	4b09      	ldr	r3, [pc, #36]	; (800d66c <DIST_Front_Wall_correction+0x10c>)
 800d648:	f04f 0200 	mov.w	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]

	CTRL_clrNowData();
 800d64e:	f7f8 f8fd 	bl	800584c <CTRL_clrNowData>
	CTRL_clrAngleErrSum();
 800d652:	f7f8 f8e7 	bl	8005824 <CTRL_clrAngleErrSum>
}
 800d656:	bf00      	nop
 800d658:	3778      	adds	r7, #120	; 0x78
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	9999999a 	.word	0x9999999a
 800d664:	3fe99999 	.word	0x3fe99999
 800d668:	20000c54 	.word	0x20000c54
 800d66c:	200002b0 	.word	0x200002b0

0800d670 <BAT_Pol>:

uint16_t	us_BatLvAve = 4095;							// バッテリ平均値（AD変換の最大値で初期化）


void BAT_Pol( void )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	af00      	add	r7, sp, #0
	static uint16_t 	us_batLv[5] = { 4095, 4095, 4095, 4095, 4095 };
	static uint8_t		i = 0;

	us_batLv[4] = us_batLv[3];
 800d674:	4b2d      	ldr	r3, [pc, #180]	; (800d72c <BAT_Pol+0xbc>)
 800d676:	88da      	ldrh	r2, [r3, #6]
 800d678:	4b2c      	ldr	r3, [pc, #176]	; (800d72c <BAT_Pol+0xbc>)
 800d67a:	811a      	strh	r2, [r3, #8]
	us_batLv[3] = us_batLv[2];
 800d67c:	4b2b      	ldr	r3, [pc, #172]	; (800d72c <BAT_Pol+0xbc>)
 800d67e:	889a      	ldrh	r2, [r3, #4]
 800d680:	4b2a      	ldr	r3, [pc, #168]	; (800d72c <BAT_Pol+0xbc>)
 800d682:	80da      	strh	r2, [r3, #6]
	us_batLv[2] = us_batLv[1];
 800d684:	4b29      	ldr	r3, [pc, #164]	; (800d72c <BAT_Pol+0xbc>)
 800d686:	885a      	ldrh	r2, [r3, #2]
 800d688:	4b28      	ldr	r3, [pc, #160]	; (800d72c <BAT_Pol+0xbc>)
 800d68a:	809a      	strh	r2, [r3, #4]
	us_batLv[1] = us_batLv[0];
 800d68c:	4b27      	ldr	r3, [pc, #156]	; (800d72c <BAT_Pol+0xbc>)
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	4b26      	ldr	r3, [pc, #152]	; (800d72c <BAT_Pol+0xbc>)
 800d692:	805a      	strh	r2, [r3, #2]

	us_batLv[0] = GetBatVal();
 800d694:	f7f4 f8e8 	bl	8001868 <GetBatVal>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	4b23      	ldr	r3, [pc, #140]	; (800d72c <BAT_Pol+0xbc>)
 800d69e:	801a      	strh	r2, [r3, #0]

	us_BatLvAve = ( us_batLv[0] + us_batLv[1] + us_batLv[2] + us_batLv[3] + us_batLv[4] ) / 5;
 800d6a0:	4b22      	ldr	r3, [pc, #136]	; (800d72c <BAT_Pol+0xbc>)
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b21      	ldr	r3, [pc, #132]	; (800d72c <BAT_Pol+0xbc>)
 800d6a8:	885b      	ldrh	r3, [r3, #2]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4a1f      	ldr	r2, [pc, #124]	; (800d72c <BAT_Pol+0xbc>)
 800d6ae:	8892      	ldrh	r2, [r2, #4]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	4a1e      	ldr	r2, [pc, #120]	; (800d72c <BAT_Pol+0xbc>)
 800d6b4:	88d2      	ldrh	r2, [r2, #6]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	4a1c      	ldr	r2, [pc, #112]	; (800d72c <BAT_Pol+0xbc>)
 800d6ba:	8912      	ldrh	r2, [r2, #8]
 800d6bc:	4413      	add	r3, r2
 800d6be:	4a1c      	ldr	r2, [pc, #112]	; (800d730 <BAT_Pol+0xc0>)
 800d6c0:	fb82 1203 	smull	r1, r2, r2, r3
 800d6c4:	1052      	asrs	r2, r2, #1
 800d6c6:	17db      	asrs	r3, r3, #31
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	4b19      	ldr	r3, [pc, #100]	; (800d734 <BAT_Pol+0xc4>)
 800d6ce:	801a      	strh	r2, [r3, #0]


	if( us_BatLvAve < BAT_LOW ) {
 800d6d0:	4b18      	ldr	r3, [pc, #96]	; (800d734 <BAT_Pol+0xc4>)
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d803      	bhi.n	800d6e4 <BAT_Pol+0x74>
		SetBatLED(0);
 800d6dc:	2000      	movs	r0, #0
 800d6de:	f7f4 fccb 	bl	8002078 <SetBatLED>
		i++;
	}
	else{
		SetBatLED(1);
	}
}
 800d6e2:	e021      	b.n	800d728 <BAT_Pol+0xb8>
	else if( us_BatLvAve < BAT_GOOD ) {
 800d6e4:	4b13      	ldr	r3, [pc, #76]	; (800d734 <BAT_Pol+0xc4>)
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	f640 32f3 	movw	r2, #3059	; 0xbf3
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d818      	bhi.n	800d722 <BAT_Pol+0xb2>
		if( i>=100){
 800d6f0:	4b11      	ldr	r3, [pc, #68]	; (800d738 <BAT_Pol+0xc8>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b63      	cmp	r3, #99	; 0x63
 800d6f6:	d906      	bls.n	800d706 <BAT_Pol+0x96>
			SetBatLED(1);
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	f7f4 fcbd 	bl	8002078 <SetBatLED>
			i=0;
 800d6fe:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <BAT_Pol+0xc8>)
 800d700:	2200      	movs	r2, #0
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e006      	b.n	800d714 <BAT_Pol+0xa4>
		else if(i>=50){
 800d706:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <BAT_Pol+0xc8>)
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b31      	cmp	r3, #49	; 0x31
 800d70c:	d902      	bls.n	800d714 <BAT_Pol+0xa4>
			SetBatLED(0);
 800d70e:	2000      	movs	r0, #0
 800d710:	f7f4 fcb2 	bl	8002078 <SetBatLED>
		i++;
 800d714:	4b08      	ldr	r3, [pc, #32]	; (800d738 <BAT_Pol+0xc8>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	3301      	adds	r3, #1
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	4b06      	ldr	r3, [pc, #24]	; (800d738 <BAT_Pol+0xc8>)
 800d71e:	701a      	strb	r2, [r3, #0]
}
 800d720:	e002      	b.n	800d728 <BAT_Pol+0xb8>
		SetBatLED(1);
 800d722:	2001      	movs	r0, #1
 800d724:	f7f4 fca8 	bl	8002078 <SetBatLED>
}
 800d728:	bf00      	nop
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20000010 	.word	0x20000010
 800d730:	66666667 	.word	0x66666667
 800d734:	2000000e 	.word	0x2000000e
 800d738:	200002d0 	.word	0x200002d0
 800d73c:	00000000 	.word	0x00000000

0800d740 <get_battLv>:

float get_battLv(void){
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
	return (float)us_BatLvAve*(1.990+1.005)/1.990/4095.000*3.300;
 800d744:	4b22      	ldr	r3, [pc, #136]	; (800d7d0 <get_battLv+0x90>)
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	ee07 3a90 	vmov	s15, r3
 800d74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d750:	ee17 0a90 	vmov	r0, s15
 800d754:	f7f2 ff20 	bl	8000598 <__aeabi_f2d>
 800d758:	a315      	add	r3, pc, #84	; (adr r3, 800d7b0 <get_battLv+0x70>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f7f2 ff73 	bl	8000648 <__aeabi_dmul>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	a313      	add	r3, pc, #76	; (adr r3, 800d7b8 <get_battLv+0x78>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	f7f3 f894 	bl	800089c <__aeabi_ddiv>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4610      	mov	r0, r2
 800d77a:	4619      	mov	r1, r3
 800d77c:	a310      	add	r3, pc, #64	; (adr r3, 800d7c0 <get_battLv+0x80>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	f7f3 f88b 	bl	800089c <__aeabi_ddiv>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4610      	mov	r0, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	a30e      	add	r3, pc, #56	; (adr r3, 800d7c8 <get_battLv+0x88>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f2 ff58 	bl	8000648 <__aeabi_dmul>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4610      	mov	r0, r2
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f7f3 fa4a 	bl	8000c38 <__aeabi_d2f>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	ee07 3a90 	vmov	s15, r3
}
 800d7aa:	eeb0 0a67 	vmov.f32	s0, s15
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	8f5c28f6 	.word	0x8f5c28f6
 800d7b4:	4007f5c2 	.word	0x4007f5c2
 800d7b8:	3d70a3d7 	.word	0x3d70a3d7
 800d7bc:	3fffd70a 	.word	0x3fffd70a
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	40affe00 	.word	0x40affe00
 800d7c8:	66666666 	.word	0x66666666
 800d7cc:	400a6666 	.word	0x400a6666
 800d7d0:	2000000e 	.word	0x2000000e

0800d7d4 <DIST_init>:
stDIST_SEN		st_sen[DIST_SEN_NUM];					// 距離センサ
stDIST_FRONT_SEN		st_senF[DIST_SEN_NUM];


void DIST_init( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	af00      	add	r7, sp, #0
	memset( st_sen, 0, sizeof(st_sen) );				// 距離センサ(全センサ共通)
 800d7d8:	2238      	movs	r2, #56	; 0x38
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4820      	ldr	r0, [pc, #128]	; (800d860 <DIST_init+0x8c>)
 800d7de:	f009 ff6f 	bl	80176c0 <memset>
	st_sen[DIST_SEN_R_FRONT].s_ref       = R_FRONT_REF;
 800d7e2:	4b1f      	ldr	r3, [pc, #124]	; (800d860 <DIST_init+0x8c>)
 800d7e4:	f240 228a 	movw	r2, #650	; 0x28a
 800d7e8:	80da      	strh	r2, [r3, #6]
	st_sen[DIST_SEN_L_FRONT].s_ref       = L_FRONT_REF;
 800d7ea:	4b1d      	ldr	r3, [pc, #116]	; (800d860 <DIST_init+0x8c>)
 800d7ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d7f0:	829a      	strh	r2, [r3, #20]
	st_sen[DIST_SEN_R_SIDE].s_ref        = R_SIDE_REF;
 800d7f2:	4b1b      	ldr	r3, [pc, #108]	; (800d860 <DIST_init+0x8c>)
 800d7f4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d7f8:	845a      	strh	r2, [r3, #34]	; 0x22
	st_sen[DIST_SEN_L_SIDE].s_ref        = L_SIDE_REF;
 800d7fa:	4b19      	ldr	r3, [pc, #100]	; (800d860 <DIST_init+0x8c>)
 800d7fc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800d800:	861a      	strh	r2, [r3, #48]	; 0x30
	st_sen[DIST_SEN_R_FRONT].s_limit     = R_FRONT_WALL;
 800d802:	4b17      	ldr	r3, [pc, #92]	; (800d860 <DIST_init+0x8c>)
 800d804:	226e      	movs	r2, #110	; 0x6e
 800d806:	809a      	strh	r2, [r3, #4]
	st_sen[DIST_SEN_L_FRONT].s_limit     = L_FRONT_WALL;
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <DIST_init+0x8c>)
 800d80a:	2278      	movs	r2, #120	; 0x78
 800d80c:	825a      	strh	r2, [r3, #18]
	st_sen[DIST_SEN_R_SIDE].s_limit      = R_SIDE_WALL;
 800d80e:	4b14      	ldr	r3, [pc, #80]	; (800d860 <DIST_init+0x8c>)
 800d810:	2278      	movs	r2, #120	; 0x78
 800d812:	841a      	strh	r2, [r3, #32]
	st_sen[DIST_SEN_L_SIDE].s_limit      = L_SIDE_WALL;
 800d814:	4b12      	ldr	r3, [pc, #72]	; (800d860 <DIST_init+0x8c>)
 800d816:	2278      	movs	r2, #120	; 0x78
 800d818:	85da      	strh	r2, [r3, #46]	; 0x2e
	st_senF[DIST_SEN_R_FRONT].s_skewErr1	= R_FRONT_SKEW_ERR1;
 800d81a:	4b12      	ldr	r3, [pc, #72]	; (800d864 <DIST_init+0x90>)
 800d81c:	2250      	movs	r2, #80	; 0x50
 800d81e:	805a      	strh	r2, [r3, #2]
	st_senF[DIST_SEN_L_FRONT].s_skewErr1	= L_FRONT_SKEW_ERR1;
 800d820:	4b10      	ldr	r3, [pc, #64]	; (800d864 <DIST_init+0x90>)
 800d822:	2246      	movs	r2, #70	; 0x46
 800d824:	815a      	strh	r2, [r3, #10]
	st_senF[DIST_SEN_R_FRONT].s_skewErr2	= R_FRONT_SKEW_ERR2;
 800d826:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <DIST_init+0x90>)
 800d828:	22c0      	movs	r2, #192	; 0xc0
 800d82a:	809a      	strh	r2, [r3, #4]
	st_senF[DIST_SEN_L_FRONT].s_skewErr2	= L_FRONT_SKEW_ERR2;
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <DIST_init+0x90>)
 800d82e:	22a0      	movs	r2, #160	; 0xa0
 800d830:	819a      	strh	r2, [r3, #12]
	st_senF[DIST_SEN_R_FRONT].s_skewErr3	= R_FRONT_SKEW_ERR3;
 800d832:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <DIST_init+0x90>)
 800d834:	22fa      	movs	r2, #250	; 0xfa
 800d836:	80da      	strh	r2, [r3, #6]
	st_senF[DIST_SEN_L_FRONT].s_skewErr3	= L_FRONT_SKEW_ERR3;
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <DIST_init+0x90>)
 800d83a:	22fa      	movs	r2, #250	; 0xfa
 800d83c:	81da      	strh	r2, [r3, #14]
	st_sen[DIST_SEN_R_FRONT].s_noCtrl = R_FRONT_NOCTRL;
 800d83e:	4b08      	ldr	r3, [pc, #32]	; (800d860 <DIST_init+0x8c>)
 800d840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d844:	819a      	strh	r2, [r3, #12]
	st_sen[DIST_SEN_L_FRONT].s_noCtrl = L_FRONT_NOCTRL;
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <DIST_init+0x8c>)
 800d848:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800d84c:	835a      	strh	r2, [r3, #26]
	st_sen[DIST_SEN_R_FRONT].s_ctrl = R_FRONT_CTRL;
 800d84e:	4b04      	ldr	r3, [pc, #16]	; (800d860 <DIST_init+0x8c>)
 800d850:	22b4      	movs	r2, #180	; 0xb4
 800d852:	815a      	strh	r2, [r3, #10]
	st_sen[DIST_SEN_L_FRONT].s_ctrl = L_FRONT_CTRL;
 800d854:	4b02      	ldr	r3, [pc, #8]	; (800d860 <DIST_init+0x8c>)
 800d856:	22b4      	movs	r2, #180	; 0xb4
 800d858:	831a      	strh	r2, [r3, #24]

}
 800d85a:	bf00      	nop
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	2000b1d4 	.word	0x2000b1d4
 800d864:	2000b1b4 	.word	0x2000b1b4

0800d868 <DIST_getNowVal>:

int16_t DIST_getNowVal( enDIST_SEN_ID en_id )
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	71fb      	strb	r3, [r7, #7]
	return st_sen[en_id].s_now;
 800d872:	79fa      	ldrb	r2, [r7, #7]
 800d874:	4906      	ldr	r1, [pc, #24]	; (800d890 <DIST_getNowVal+0x28>)
 800d876:	4613      	mov	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	1a9b      	subs	r3, r3, r2
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	440b      	add	r3, r1
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	b21b      	sxth	r3, r3
}
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	2000b1d4 	.word	0x2000b1d4
 800d894:	00000000 	.word	0x00000000

0800d898 <DIST_getErr>:


void DIST_getErr( int32_t* p_err )
{
 800d898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
	volatile int16_t	s_threshold_R = 0;		// 右センサの閾値
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	81bb      	strh	r3, [r7, #12]
	volatile int16_t	s_threshold_L = 0;		// 左センサの閾値
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	817b      	strh	r3, [r7, #10]
	/* ---------- */
	/*  右壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_old;
 800d8aa:	4ba5      	ldr	r3, [pc, #660]	; (800db40 <DIST_getErr+0x2a8>)
 800d8ac:	8b9a      	ldrh	r2, [r3, #28]
 800d8ae:	4ba4      	ldr	r3, [pc, #656]	; (800db40 <DIST_getErr+0x2a8>)
 800d8b0:	8bdb      	ldrh	r3, [r3, #30]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800d8b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8bc:	f113 0f19 	cmn.w	r3, #25
 800d8c0:	db03      	blt.n	800d8ca <DIST_getErr+0x32>
 800d8c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8c6:	2b19      	cmp	r3, #25
 800d8c8:	dd06      	ble.n	800d8d8 <DIST_getErr+0x40>
	){
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800d8ca:	4b9d      	ldr	r3, [pc, #628]	; (800db40 <DIST_getErr+0x2a8>)
 800d8cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d8ce:	3323      	adds	r3, #35	; 0x23
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	b21b      	sxth	r3, r3
 800d8d4:	81bb      	strh	r3, [r7, #12]
 800d8d6:	e003      	b.n	800d8e0 <DIST_getErr+0x48>
	}
	else{
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_limit;		// 通常通り
 800d8d8:	4b99      	ldr	r3, [pc, #612]	; (800db40 <DIST_getErr+0x2a8>)
 800d8da:	8c1b      	ldrh	r3, [r3, #32]
 800d8dc:	b21b      	sxth	r3, r3
 800d8de:	81bb      	strh	r3, [r7, #12]
	/* ---------- */
	/*  左壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_L_SIDE].s_now - st_sen[DIST_SEN_L_SIDE].s_old;
 800d8e0:	4b97      	ldr	r3, [pc, #604]	; (800db40 <DIST_getErr+0x2a8>)
 800d8e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d8e4:	4b96      	ldr	r3, [pc, #600]	; (800db40 <DIST_getErr+0x2a8>)
 800d8e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800d8ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8f2:	f113 0f19 	cmn.w	r3, #25
 800d8f6:	db03      	blt.n	800d900 <DIST_getErr+0x68>
 800d8f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8fc:	2b19      	cmp	r3, #25
 800d8fe:	dd06      	ble.n	800d90e <DIST_getErr+0x76>
	){
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800d900:	4b8f      	ldr	r3, [pc, #572]	; (800db40 <DIST_getErr+0x2a8>)
 800d902:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d904:	3323      	adds	r3, #35	; 0x23
 800d906:	b29b      	uxth	r3, r3
 800d908:	b21b      	sxth	r3, r3
 800d90a:	817b      	strh	r3, [r7, #10]
 800d90c:	e003      	b.n	800d916 <DIST_getErr+0x7e>
	}
	else{
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_limit;		// 通常通り
 800d90e:	4b8c      	ldr	r3, [pc, #560]	; (800db40 <DIST_getErr+0x2a8>)
 800d910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d912:	b21b      	sxth	r3, r3
 800d914:	817b      	strh	r3, [r7, #10]
	}

	/* ------------ */
	/*  制御値算出  */
	/* ------------ */
	*p_err = 0;		// クリア
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]

	/* 前壁がものすごく近い時 */
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800d91c:	4b88      	ldr	r3, [pc, #544]	; (800db40 <DIST_getErr+0x2a8>)
 800d91e:	881a      	ldrh	r2, [r3, #0]
 800d920:	4b87      	ldr	r3, [pc, #540]	; (800db40 <DIST_getErr+0x2a8>)
 800d922:	899b      	ldrh	r3, [r3, #12]
 800d924:	429a      	cmp	r2, r3
 800d926:	d909      	bls.n	800d93c <DIST_getErr+0xa4>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_noCtrl )
 800d928:	4b85      	ldr	r3, [pc, #532]	; (800db40 <DIST_getErr+0x2a8>)
 800d92a:	89da      	ldrh	r2, [r3, #14]
 800d92c:	4b84      	ldr	r3, [pc, #528]	; (800db40 <DIST_getErr+0x2a8>)
 800d92e:	8b5b      	ldrh	r3, [r3, #26]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800d930:	429a      	cmp	r2, r3
 800d932:	d903      	bls.n	800d93c <DIST_getErr+0xa4>
	){
//		printf("[Val]%6d 前壁がものすごい近い 	\n\r", *p_err);
		*p_err = 0;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	e05a      	b.n	800d9f2 <DIST_getErr+0x15a>
	}
	/* 前壁 */
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800d93c:	4b80      	ldr	r3, [pc, #512]	; (800db40 <DIST_getErr+0x2a8>)
 800d93e:	881a      	ldrh	r2, [r3, #0]
 800d940:	4b7f      	ldr	r3, [pc, #508]	; (800db40 <DIST_getErr+0x2a8>)
 800d942:	895b      	ldrh	r3, [r3, #10]
 800d944:	429a      	cmp	r2, r3
 800d946:	d915      	bls.n	800d974 <DIST_getErr+0xdc>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_ctrl )
 800d948:	4b7d      	ldr	r3, [pc, #500]	; (800db40 <DIST_getErr+0x2a8>)
 800d94a:	89da      	ldrh	r2, [r3, #14]
 800d94c:	4b7c      	ldr	r3, [pc, #496]	; (800db40 <DIST_getErr+0x2a8>)
 800d94e:	8b1b      	ldrh	r3, [r3, #24]
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800d950:	429a      	cmp	r2, r3
 800d952:	d90f      	bls.n	800d974 <DIST_getErr+0xdc>
	){
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800d954:	4b7a      	ldr	r3, [pc, #488]	; (800db40 <DIST_getErr+0x2a8>)
 800d956:	89db      	ldrh	r3, [r3, #14]
 800d958:	461a      	mov	r2, r3
 800d95a:	4b79      	ldr	r3, [pc, #484]	; (800db40 <DIST_getErr+0x2a8>)
 800d95c:	8a9b      	ldrh	r3, [r3, #20]
 800d95e:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_R_FRONT].s_now - st_sen[DIST_SEN_R_FRONT].s_ref );
 800d960:	4b77      	ldr	r3, [pc, #476]	; (800db40 <DIST_getErr+0x2a8>)
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	4619      	mov	r1, r3
 800d966:	4b76      	ldr	r3, [pc, #472]	; (800db40 <DIST_getErr+0x2a8>)
 800d968:	88db      	ldrh	r3, [r3, #6]
 800d96a:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800d96c:	1ad2      	subs	r2, r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	e03e      	b.n	800d9f2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 前壁制御 	\n\r", *p_err);
	}
	/* 右壁と左壁あり */
	else if( ( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ) && ( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now )
 800d974:	89bb      	ldrh	r3, [r7, #12]
 800d976:	b21b      	sxth	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	4b71      	ldr	r3, [pc, #452]	; (800db40 <DIST_getErr+0x2a8>)
 800d97c:	8b9b      	ldrh	r3, [r3, #28]
 800d97e:	429a      	cmp	r2, r3
 800d980:	da16      	bge.n	800d9b0 <DIST_getErr+0x118>
 800d982:	897b      	ldrh	r3, [r7, #10]
 800d984:	b21b      	sxth	r3, r3
 800d986:	461a      	mov	r2, r3
 800d988:	4b6d      	ldr	r3, [pc, #436]	; (800db40 <DIST_getErr+0x2a8>)
 800d98a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d98c:	429a      	cmp	r2, r3
 800d98e:	da0f      	bge.n	800d9b0 <DIST_getErr+0x118>
	){
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800d990:	4b6b      	ldr	r3, [pc, #428]	; (800db40 <DIST_getErr+0x2a8>)
 800d992:	8b9b      	ldrh	r3, [r3, #28]
 800d994:	461a      	mov	r2, r3
 800d996:	4b6a      	ldr	r3, [pc, #424]	; (800db40 <DIST_getErr+0x2a8>)
 800d998:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d99a:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now );
 800d99c:	4b68      	ldr	r3, [pc, #416]	; (800db40 <DIST_getErr+0x2a8>)
 800d99e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4b67      	ldr	r3, [pc, #412]	; (800db40 <DIST_getErr+0x2a8>)
 800d9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9a6:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800d9a8:	441a      	add	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	e020      	b.n	800d9f2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 両壁制御 	\n\r", *p_err);
	}
	/* 右壁あり */
	else if( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ){
 800d9b0:	89bb      	ldrh	r3, [r7, #12]
 800d9b2:	b21b      	sxth	r3, r3
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4b62      	ldr	r3, [pc, #392]	; (800db40 <DIST_getErr+0x2a8>)
 800d9b8:	8b9b      	ldrh	r3, [r3, #28]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	da09      	bge.n	800d9d2 <DIST_getErr+0x13a>
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) * 2;
 800d9be:	4b60      	ldr	r3, [pc, #384]	; (800db40 <DIST_getErr+0x2a8>)
 800d9c0:	8b9b      	ldrh	r3, [r3, #28]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4b5e      	ldr	r3, [pc, #376]	; (800db40 <DIST_getErr+0x2a8>)
 800d9c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	005a      	lsls	r2, r3, #1
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	e00f      	b.n	800d9f2 <DIST_getErr+0x15a>
//		printf("[Val]%6d 右壁制御 	\n\r", *p_err);
	}
	/* 左壁あり */
	else if( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now ){
 800d9d2:	897b      	ldrh	r3, [r7, #10]
 800d9d4:	b21b      	sxth	r3, r3
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	4b59      	ldr	r3, [pc, #356]	; (800db40 <DIST_getErr+0x2a8>)
 800d9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	da08      	bge.n	800d9f2 <DIST_getErr+0x15a>
		*p_err = ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now ) * 2;
 800d9e0:	4b57      	ldr	r3, [pc, #348]	; (800db40 <DIST_getErr+0x2a8>)
 800d9e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	4b56      	ldr	r3, [pc, #344]	; (800db40 <DIST_getErr+0x2a8>)
 800d9e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	005a      	lsls	r2, r3, #1
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	601a      	str	r2, [r3, #0]
//		printf("[Val]%6d 左壁制御 	\n\r", *p_err);
	}

	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800d9f2:	4b53      	ldr	r3, [pc, #332]	; (800db40 <DIST_getErr+0x2a8>)
 800d9f4:	89db      	ldrh	r3, [r3, #14]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f2 fdbc 	bl	8000574 <__aeabi_i2d>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	4b4f      	ldr	r3, [pc, #316]	; (800db40 <DIST_getErr+0x2a8>)
 800da02:	8a5b      	ldrh	r3, [r3, #18]
 800da04:	4618      	mov	r0, r3
 800da06:	f7f2 fdb5 	bl	8000574 <__aeabi_i2d>
 800da0a:	a34b      	add	r3, pc, #300	; (adr r3, 800db38 <DIST_getErr+0x2a0>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 ff44 	bl	800089c <__aeabi_ddiv>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4620      	mov	r0, r4
 800da1a:	4629      	mov	r1, r5
 800da1c:	f7f3 f8a4 	bl	8000b68 <__aeabi_dcmpgt>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d051      	beq.n	800daca <DIST_getErr+0x232>
		(st_sen[DIST_SEN_R_FRONT].s_now <st_sen[DIST_SEN_R_FRONT].s_limit/0.7)){
 800da26:	4b46      	ldr	r3, [pc, #280]	; (800db40 <DIST_getErr+0x2a8>)
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7f2 fda2 	bl	8000574 <__aeabi_i2d>
 800da30:	4604      	mov	r4, r0
 800da32:	460d      	mov	r5, r1
 800da34:	4b42      	ldr	r3, [pc, #264]	; (800db40 <DIST_getErr+0x2a8>)
 800da36:	889b      	ldrh	r3, [r3, #4]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f2 fd9b 	bl	8000574 <__aeabi_i2d>
 800da3e:	a33e      	add	r3, pc, #248	; (adr r3, 800db38 <DIST_getErr+0x2a0>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f7f2 ff2a 	bl	800089c <__aeabi_ddiv>
 800da48:	4602      	mov	r2, r0
 800da4a:	460b      	mov	r3, r1
	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800da4c:	4620      	mov	r0, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	f7f3 f86c 	bl	8000b2c <__aeabi_dcmplt>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d037      	beq.n	800daca <DIST_getErr+0x232>
			*p_err += 2*(st_sen[DIST_SEN_L_FRONT].s_limit/0.7-st_sen[DIST_SEN_L_FRONT].s_now);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fd88 	bl	8000574 <__aeabi_i2d>
 800da64:	4604      	mov	r4, r0
 800da66:	460d      	mov	r5, r1
 800da68:	4b35      	ldr	r3, [pc, #212]	; (800db40 <DIST_getErr+0x2a8>)
 800da6a:	8a5b      	ldrh	r3, [r3, #18]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7f2 fd81 	bl	8000574 <__aeabi_i2d>
 800da72:	a331      	add	r3, pc, #196	; (adr r3, 800db38 <DIST_getErr+0x2a0>)
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	f7f2 ff10 	bl	800089c <__aeabi_ddiv>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4690      	mov	r8, r2
 800da82:	4699      	mov	r9, r3
 800da84:	4b2e      	ldr	r3, [pc, #184]	; (800db40 <DIST_getErr+0x2a8>)
 800da86:	89db      	ldrh	r3, [r3, #14]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f2 fd73 	bl	8000574 <__aeabi_i2d>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	f7f2 fc1f 	bl	80002d8 <__aeabi_dsub>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4610      	mov	r0, r2
 800daa0:	4619      	mov	r1, r3
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	f7f2 fc19 	bl	80002dc <__adddf3>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4620      	mov	r0, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	f7f2 fc13 	bl	80002dc <__adddf3>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4610      	mov	r0, r2
 800dabc:	4619      	mov	r1, r3
 800dabe:	f7f3 f873 	bl	8000ba8 <__aeabi_d2iz>
 800dac2:	4602      	mov	r2, r0
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	601a      	str	r2, [r3, #0]
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
	}

}
 800dac8:	e071      	b.n	800dbae <DIST_getErr+0x316>
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800daca:	4b1d      	ldr	r3, [pc, #116]	; (800db40 <DIST_getErr+0x2a8>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f2 fd50 	bl	8000574 <__aeabi_i2d>
 800dad4:	4604      	mov	r4, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	4b19      	ldr	r3, [pc, #100]	; (800db40 <DIST_getErr+0x2a8>)
 800dada:	889b      	ldrh	r3, [r3, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f2 fd49 	bl	8000574 <__aeabi_i2d>
 800dae2:	a315      	add	r3, pc, #84	; (adr r3, 800db38 <DIST_getErr+0x2a0>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fed8 	bl	800089c <__aeabi_ddiv>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4620      	mov	r0, r4
 800daf2:	4629      	mov	r1, r5
 800daf4:	f7f3 f838 	bl	8000b68 <__aeabi_dcmpgt>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d100      	bne.n	800db00 <DIST_getErr+0x268>
}
 800dafe:	e056      	b.n	800dbae <DIST_getErr+0x316>
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
 800db00:	4b0f      	ldr	r3, [pc, #60]	; (800db40 <DIST_getErr+0x2a8>)
 800db02:	89db      	ldrh	r3, [r3, #14]
 800db04:	4618      	mov	r0, r3
 800db06:	f7f2 fd35 	bl	8000574 <__aeabi_i2d>
 800db0a:	4604      	mov	r4, r0
 800db0c:	460d      	mov	r5, r1
 800db0e:	4b0c      	ldr	r3, [pc, #48]	; (800db40 <DIST_getErr+0x2a8>)
 800db10:	8a5b      	ldrh	r3, [r3, #18]
 800db12:	4618      	mov	r0, r3
 800db14:	f7f2 fd2e 	bl	8000574 <__aeabi_i2d>
 800db18:	a307      	add	r3, pc, #28	; (adr r3, 800db38 <DIST_getErr+0x2a0>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 febd 	bl	800089c <__aeabi_ddiv>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800db26:	4620      	mov	r0, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	f7f2 ffff 	bl	8000b2c <__aeabi_dcmplt>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d107      	bne.n	800db44 <DIST_getErr+0x2ac>
}
 800db34:	e03b      	b.n	800dbae <DIST_getErr+0x316>
 800db36:	bf00      	nop
 800db38:	66666666 	.word	0x66666666
 800db3c:	3fe66666 	.word	0x3fe66666
 800db40:	2000b1d4 	.word	0x2000b1d4
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7f2 fd13 	bl	8000574 <__aeabi_i2d>
 800db4e:	4604      	mov	r4, r0
 800db50:	460d      	mov	r5, r1
 800db52:	4b1b      	ldr	r3, [pc, #108]	; (800dbc0 <DIST_getErr+0x328>)
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f7f2 fd0c 	bl	8000574 <__aeabi_i2d>
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	4b17      	ldr	r3, [pc, #92]	; (800dbc0 <DIST_getErr+0x328>)
 800db62:	889b      	ldrh	r3, [r3, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	f7f2 fd05 	bl	8000574 <__aeabi_i2d>
 800db6a:	a313      	add	r3, pc, #76	; (adr r3, 800dbb8 <DIST_getErr+0x320>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	f7f2 fe94 	bl	800089c <__aeabi_ddiv>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4640      	mov	r0, r8
 800db7a:	4649      	mov	r1, r9
 800db7c:	f7f2 fbac 	bl	80002d8 <__aeabi_dsub>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	4610      	mov	r0, r2
 800db86:	4619      	mov	r1, r3
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	f7f2 fba6 	bl	80002dc <__adddf3>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	4620      	mov	r0, r4
 800db96:	4629      	mov	r1, r5
 800db98:	f7f2 fba0 	bl	80002dc <__adddf3>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4610      	mov	r0, r2
 800dba2:	4619      	mov	r1, r3
 800dba4:	f7f3 f800 	bl	8000ba8 <__aeabi_d2iz>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	601a      	str	r2, [r3, #0]
}
 800dbae:	bf00      	nop
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dbb8:	66666666 	.word	0x66666666
 800dbbc:	3fe66666 	.word	0x3fe66666
 800dbc0:	2000b1d4 	.word	0x2000b1d4

0800dbc4 <DIST_getErrSkew>:

void DIST_getErrSkew( int32_t* p_err )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	*p_err =0;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	601a      	str	r2, [r3, #0]

	/* 進行方向に壁が存在する場合によける動作を行う */
	if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr3 ){
 800dbd2:	4b20      	ldr	r3, [pc, #128]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dbd4:	881a      	ldrh	r2, [r3, #0]
 800dbd6:	4b20      	ldr	r3, [pc, #128]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dbd8:	88db      	ldrh	r3, [r3, #6]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d903      	bls.n	800dbe6 <DIST_getErrSkew+0x22>
		*p_err = 0;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	601a      	str	r2, [r3, #0]
//		printf("左前が近い  [NOW]%d > [ERR1]%d", st_sen[DIST_SEN_L_FRONT].s_now, st_senF[DIST_SEN_L_FRONT].s_skewErr1 );
	}
	else{
	}

}
 800dbe4:	e030      	b.n	800dc48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr3 ){
 800dbe6:	4b1b      	ldr	r3, [pc, #108]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dbe8:	89da      	ldrh	r2, [r3, #14]
 800dbea:	4b1b      	ldr	r3, [pc, #108]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dbec:	89db      	ldrh	r3, [r3, #14]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d903      	bls.n	800dbfa <DIST_getErrSkew+0x36>
		*p_err = 0;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	601a      	str	r2, [r3, #0]
}
 800dbf8:	e026      	b.n	800dc48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr2 ){
 800dbfa:	4b16      	ldr	r3, [pc, #88]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dbfc:	881a      	ldrh	r2, [r3, #0]
 800dbfe:	4b16      	ldr	r3, [pc, #88]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dc00:	889b      	ldrh	r3, [r3, #4]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d903      	bls.n	800dc0e <DIST_getErrSkew+0x4a>
		*p_err = 0;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	601a      	str	r2, [r3, #0]
}
 800dc0c:	e01c      	b.n	800dc48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr2 ){
 800dc0e:	4b11      	ldr	r3, [pc, #68]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dc10:	89da      	ldrh	r2, [r3, #14]
 800dc12:	4b11      	ldr	r3, [pc, #68]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dc14:	899b      	ldrh	r3, [r3, #12]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d903      	bls.n	800dc22 <DIST_getErrSkew+0x5e>
		*p_err = 0;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
}
 800dc20:	e012      	b.n	800dc48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr1 ){
 800dc22:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dc24:	881a      	ldrh	r2, [r3, #0]
 800dc26:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dc28:	885b      	ldrh	r3, [r3, #2]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d903      	bls.n	800dc36 <DIST_getErrSkew+0x72>
		*p_err = 0;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
}
 800dc34:	e008      	b.n	800dc48 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr1 ){
 800dc36:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <DIST_getErrSkew+0x90>)
 800dc38:	89da      	ldrh	r2, [r3, #14]
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <DIST_getErrSkew+0x94>)
 800dc3c:	895b      	ldrh	r3, [r3, #10]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d902      	bls.n	800dc48 <DIST_getErrSkew+0x84>
		*p_err = 0;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	601a      	str	r2, [r3, #0]
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	2000b1d4 	.word	0x2000b1d4
 800dc58:	2000b1b4 	.word	0x2000b1b4

0800dc5c <DIST_Pol_FL>:

void DIST_Pol_FL( void )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
	st_sen[DIST_SEN_L_FRONT].s_offset = GetSensor_FL();
 800dc62:	f7f3 fd81 	bl	8001768 <GetSensor_FL>
 800dc66:	4603      	mov	r3, r0
 800dc68:	461a      	mov	r2, r3
 800dc6a:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dc6c:	82da      	strh	r2, [r3, #22]

	Set_SenFL(1);
 800dc6e:	2001      	movs	r0, #1
 800dc70:	f7f4 fa34 	bl	80020dc <Set_SenFL>

	for(uint16_t i=0;i<1000;i++);
 800dc74:	2300      	movs	r3, #0
 800dc76:	80fb      	strh	r3, [r7, #6]
 800dc78:	e002      	b.n	800dc80 <DIST_Pol_FL+0x24>
 800dc7a:	88fb      	ldrh	r3, [r7, #6]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	80fb      	strh	r3, [r7, #6]
 800dc80:	88fb      	ldrh	r3, [r7, #6]
 800dc82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc86:	d3f8      	bcc.n	800dc7a <DIST_Pol_FL+0x1e>

	st_sen[DIST_SEN_L_FRONT].s_old = st_sen[DIST_SEN_L_FRONT].s_now;
 800dc88:	4b0f      	ldr	r3, [pc, #60]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dc8a:	89da      	ldrh	r2, [r3, #14]
 800dc8c:	4b0e      	ldr	r3, [pc, #56]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dc8e:	821a      	strh	r2, [r3, #16]
	st_sen[DIST_SEN_L_FRONT].s_now = GetSensor_FL()- st_sen[DIST_SEN_L_FRONT].s_offset;
 800dc90:	f7f3 fd6a 	bl	8001768 <GetSensor_FL>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dc9a:	8adb      	ldrh	r3, [r3, #22]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dca2:	81da      	strh	r2, [r3, #14]
	if(st_sen[DIST_SEN_L_FRONT].s_now>(65535/2))st_sen[DIST_SEN_L_FRONT].s_now =0;
 800dca4:	4b08      	ldr	r3, [pc, #32]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dca6:	89db      	ldrh	r3, [r3, #14]
 800dca8:	b21b      	sxth	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	da02      	bge.n	800dcb4 <DIST_Pol_FL+0x58>
 800dcae:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <DIST_Pol_FL+0x6c>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	81da      	strh	r2, [r3, #14]
	ADC3_clearEOS();
 800dcb4:	f7f3 fd70 	bl	8001798 <ADC3_clearEOS>

	Set_SenFL(0);
 800dcb8:	2000      	movs	r0, #0
 800dcba:	f7f4 fa0f 	bl	80020dc <Set_SenFL>
}
 800dcbe:	bf00      	nop
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	2000b1d4 	.word	0x2000b1d4

0800dccc <DIST_Pol_FR>:

void DIST_Pol_FR( void )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_FRONT].s_offset = GetSensor_FR();
 800dcd2:	f7f3 fdaf 	bl	8001834 <GetSensor_FR>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4b17      	ldr	r3, [pc, #92]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dcdc:	811a      	strh	r2, [r3, #8]

	Set_SenFR(1);
 800dcde:	2001      	movs	r0, #1
 800dce0:	f7f4 fa44 	bl	800216c <Set_SenFR>

	for(uint16_t i=0;i<1000;i++);
 800dce4:	2300      	movs	r3, #0
 800dce6:	80fb      	strh	r3, [r7, #6]
 800dce8:	e002      	b.n	800dcf0 <DIST_Pol_FR+0x24>
 800dcea:	88fb      	ldrh	r3, [r7, #6]
 800dcec:	3301      	adds	r3, #1
 800dcee:	80fb      	strh	r3, [r7, #6]
 800dcf0:	88fb      	ldrh	r3, [r7, #6]
 800dcf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcf6:	d3f8      	bcc.n	800dcea <DIST_Pol_FR+0x1e>

	st_sen[DIST_SEN_R_FRONT].s_old = st_sen[DIST_SEN_R_FRONT].s_now;
 800dcf8:	4b0f      	ldr	r3, [pc, #60]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dcfa:	881a      	ldrh	r2, [r3, #0]
 800dcfc:	4b0e      	ldr	r3, [pc, #56]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dcfe:	805a      	strh	r2, [r3, #2]
	st_sen[DIST_SEN_R_FRONT].s_now = GetSensor_FR()- st_sen[DIST_SEN_R_FRONT].s_offset;
 800dd00:	f7f3 fd98 	bl	8001834 <GetSensor_FR>
 800dd04:	4603      	mov	r3, r0
 800dd06:	461a      	mov	r2, r3
 800dd08:	4b0b      	ldr	r3, [pc, #44]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dd0a:	891b      	ldrh	r3, [r3, #8]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dd12:	801a      	strh	r2, [r3, #0]
	if(st_sen[DIST_SEN_R_FRONT].s_now>(65535/2))st_sen[DIST_SEN_R_FRONT].s_now =0;
 800dd14:	4b08      	ldr	r3, [pc, #32]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	da02      	bge.n	800dd24 <DIST_Pol_FR+0x58>
 800dd1e:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <DIST_Pol_FR+0x6c>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	801a      	strh	r2, [r3, #0]
	ADC2_clearEOS();
 800dd24:	f7f3 fd42 	bl	80017ac <ADC2_clearEOS>

	Set_SenFR(0);
 800dd28:	2000      	movs	r0, #0
 800dd2a:	f7f4 fa1f 	bl	800216c <Set_SenFR>

}
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	2000b1d4 	.word	0x2000b1d4

0800dd3c <DIST_Pol_SL>:


void DIST_Pol_SL( void )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_L_SIDE].s_offset = GetSensor_SL();
 800dd42:	f7f3 fd45 	bl	80017d0 <GetSensor_SL>
 800dd46:	4603      	mov	r3, r0
 800dd48:	461a      	mov	r2, r3
 800dd4a:	4b17      	ldr	r3, [pc, #92]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd4c:	865a      	strh	r2, [r3, #50]	; 0x32

	Set_SenSL(1);
 800dd4e:	2001      	movs	r0, #1
 800dd50:	f7f4 f9db 	bl	800210a <Set_SenSL>

	for(uint16_t i=0;i<1000;i++);
 800dd54:	2300      	movs	r3, #0
 800dd56:	80fb      	strh	r3, [r7, #6]
 800dd58:	e002      	b.n	800dd60 <DIST_Pol_SL+0x24>
 800dd5a:	88fb      	ldrh	r3, [r7, #6]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	80fb      	strh	r3, [r7, #6]
 800dd60:	88fb      	ldrh	r3, [r7, #6]
 800dd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd66:	d3f8      	bcc.n	800dd5a <DIST_Pol_SL+0x1e>

	st_sen[DIST_SEN_L_SIDE].s_old = st_sen[DIST_SEN_L_SIDE].s_now;
 800dd68:	4b0f      	ldr	r3, [pc, #60]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd6a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd6e:	859a      	strh	r2, [r3, #44]	; 0x2c
	st_sen[DIST_SEN_L_SIDE].s_now = GetSensor_SL()- st_sen[DIST_SEN_L_SIDE].s_offset;
 800dd70:	f7f3 fd2e 	bl	80017d0 <GetSensor_SL>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	4b0b      	ldr	r3, [pc, #44]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	4b09      	ldr	r3, [pc, #36]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd82:	855a      	strh	r2, [r3, #42]	; 0x2a
	if(st_sen[DIST_SEN_L_SIDE].s_now>(65535/2))st_sen[DIST_SEN_L_SIDE].s_now =0;
 800dd84:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd88:	b21b      	sxth	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	da02      	bge.n	800dd94 <DIST_Pol_SL+0x58>
 800dd8e:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <DIST_Pol_SL+0x6c>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	855a      	strh	r2, [r3, #42]	; 0x2a
	ADC1_clearEOS();
 800dd94:	f7f3 fd14 	bl	80017c0 <ADC1_clearEOS>

	Set_SenSL(0);
 800dd98:	2000      	movs	r0, #0
 800dd9a:	f7f4 f9b6 	bl	800210a <Set_SenSL>

}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	2000b1d4 	.word	0x2000b1d4

0800ddac <DIST_Pol_SR>:

void DIST_Pol_SR( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_SIDE].s_offset = GetSensor_SR();
 800ddb2:	f7f3 fd26 	bl	8001802 <GetSensor_SR>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4b16      	ldr	r3, [pc, #88]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddbc:	849a      	strh	r2, [r3, #36]	; 0x24

	Set_SenSR(1);
 800ddbe:	2001      	movs	r0, #1
 800ddc0:	f7f4 f9ba 	bl	8002138 <Set_SenSR>

	for(uint16_t i=0;i<1000;i++);
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	80fb      	strh	r3, [r7, #6]
 800ddc8:	e002      	b.n	800ddd0 <DIST_Pol_SR+0x24>
 800ddca:	88fb      	ldrh	r3, [r7, #6]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	80fb      	strh	r3, [r7, #6]
 800ddd0:	88fb      	ldrh	r3, [r7, #6]
 800ddd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddd6:	d3f8      	bcc.n	800ddca <DIST_Pol_SR+0x1e>

	st_sen[DIST_SEN_R_SIDE].s_old = st_sen[DIST_SEN_R_SIDE].s_now;
 800ddd8:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddda:	8b9a      	ldrh	r2, [r3, #28]
 800dddc:	4b0d      	ldr	r3, [pc, #52]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddde:	83da      	strh	r2, [r3, #30]
	st_sen[DIST_SEN_R_SIDE].s_now = GetSensor_SR()- st_sen[DIST_SEN_R_SIDE].s_offset;
 800dde0:	f7f3 fd0f 	bl	8001802 <GetSensor_SR>
 800dde4:	4603      	mov	r3, r0
 800dde6:	461a      	mov	r2, r3
 800dde8:	4b0a      	ldr	r3, [pc, #40]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	4b08      	ldr	r3, [pc, #32]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddf2:	839a      	strh	r2, [r3, #28]
	if(st_sen[DIST_SEN_R_SIDE].s_now>(65535/2))st_sen[DIST_SEN_R_SIDE].s_now =0;
 800ddf4:	4b07      	ldr	r3, [pc, #28]	; (800de14 <DIST_Pol_SR+0x68>)
 800ddf6:	8b9b      	ldrh	r3, [r3, #28]
 800ddf8:	b21b      	sxth	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	da02      	bge.n	800de04 <DIST_Pol_SR+0x58>
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <DIST_Pol_SR+0x68>)
 800de00:	2200      	movs	r2, #0
 800de02:	839a      	strh	r2, [r3, #28]

	Set_SenSR(0);
 800de04:	2000      	movs	r0, #0
 800de06:	f7f4 f997 	bl	8002138 <Set_SenSR>

}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	2000b1d4 	.word	0x2000b1d4

0800de18 <Get_Sen_Nowdata>:

void Get_Sen_Nowdata(void){
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af02      	add	r7, sp, #8
	printf("FL %4d SL %4d SR %4d FR %4d\r",
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800de1e:	4b09      	ldr	r3, [pc, #36]	; (800de44 <Get_Sen_Nowdata+0x2c>)
 800de20:	89db      	ldrh	r3, [r3, #14]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800de22:	4619      	mov	r1, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800de24:	4b07      	ldr	r3, [pc, #28]	; (800de44 <Get_Sen_Nowdata+0x2c>)
 800de26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800de28:	461a      	mov	r2, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800de2a:	4b06      	ldr	r3, [pc, #24]	; (800de44 <Get_Sen_Nowdata+0x2c>)
 800de2c:	8b9b      	ldrh	r3, [r3, #28]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800de2e:	4618      	mov	r0, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800de30:	4b04      	ldr	r3, [pc, #16]	; (800de44 <Get_Sen_Nowdata+0x2c>)
 800de32:	881b      	ldrh	r3, [r3, #0]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	4603      	mov	r3, r0
 800de38:	4803      	ldr	r0, [pc, #12]	; (800de48 <Get_Sen_Nowdata+0x30>)
 800de3a:	f009 fa1d 	bl	8017278 <iprintf>
}
 800de3e:	bf00      	nop
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	2000b1d4 	.word	0x2000b1d4
 800de48:	0801c4ac 	.word	0x0801c4ac

0800de4c <DIST_isWall_FRONT>:

bool DIST_isWall_FRONT( void )
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800de52:	2300      	movs	r3, #0
 800de54:	71fb      	strb	r3, [r7, #7]
//	printf("DIST_SEN_R_FRONT %5d \r\n",st_sen[DIST_SEN_R_FRONT].s_limit);
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800de56:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <DIST_isWall_FRONT+0x34>)
 800de58:	881a      	ldrh	r2, [r3, #0]
 800de5a:	4b09      	ldr	r3, [pc, #36]	; (800de80 <DIST_isWall_FRONT+0x34>)
 800de5c:	889b      	ldrh	r3, [r3, #4]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d805      	bhi.n	800de6e <DIST_isWall_FRONT+0x22>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_limit )
 800de62:	4b07      	ldr	r3, [pc, #28]	; (800de80 <DIST_isWall_FRONT+0x34>)
 800de64:	89da      	ldrh	r2, [r3, #14]
 800de66:	4b06      	ldr	r3, [pc, #24]	; (800de80 <DIST_isWall_FRONT+0x34>)
 800de68:	8a5b      	ldrh	r3, [r3, #18]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d901      	bls.n	800de72 <DIST_isWall_FRONT+0x26>
	){
		bl_res = true;
 800de6e:	2301      	movs	r3, #1
 800de70:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800de72:	79fb      	ldrb	r3, [r7, #7]
}
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	2000b1d4 	.word	0x2000b1d4

0800de84 <DIST_isWall_R_SIDE>:

bool DIST_isWall_R_SIDE( void )
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800de8a:	2300      	movs	r3, #0
 800de8c:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_R_SIDE].s_now > st_sen[DIST_SEN_R_SIDE].s_limit ){
 800de8e:	4b07      	ldr	r3, [pc, #28]	; (800deac <DIST_isWall_R_SIDE+0x28>)
 800de90:	8b9a      	ldrh	r2, [r3, #28]
 800de92:	4b06      	ldr	r3, [pc, #24]	; (800deac <DIST_isWall_R_SIDE+0x28>)
 800de94:	8c1b      	ldrh	r3, [r3, #32]
 800de96:	429a      	cmp	r2, r3
 800de98:	d901      	bls.n	800de9e <DIST_isWall_R_SIDE+0x1a>
		bl_res = true;
 800de9a:	2301      	movs	r3, #1
 800de9c:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800de9e:	79fb      	ldrb	r3, [r7, #7]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	2000b1d4 	.word	0x2000b1d4

0800deb0 <DIST_isWall_L_SIDE>:

bool DIST_isWall_L_SIDE( void )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800deb6:	2300      	movs	r3, #0
 800deb8:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_L_SIDE].s_now > st_sen[DIST_SEN_L_SIDE].s_limit ){
 800deba:	4b07      	ldr	r3, [pc, #28]	; (800ded8 <DIST_isWall_L_SIDE+0x28>)
 800debc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800debe:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <DIST_isWall_L_SIDE+0x28>)
 800dec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d901      	bls.n	800deca <DIST_isWall_L_SIDE+0x1a>
		bl_res = true;
 800dec6:	2301      	movs	r3, #1
 800dec8:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800deca:	79fb      	ldrb	r3, [r7, #7]
}
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	2000b1d4 	.word	0x2000b1d4

0800dedc <MAP_refPos>:
uint16_t us_LogIndex = 0;
uint16_t us_LogWallCut[30];
uint16_t us_LogIndexWallCut = 0;

void MAP_refPos( uint8_t uc_cmd )
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_index = 0;			// テーブルのインデックス番号
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
	
	/* ------------------------------------------ */
	/*  コマンドからテーブルのインデックスを取得  */
	/* ------------------------------------------ */
	/* 直進 */
	if( ( uc_cmd <=  GO71 ) && ( uc_cmd >=  GO1) ){
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	2b47      	cmp	r3, #71	; 0x47
 800deee:	d805      	bhi.n	800defc <MAP_refPos+0x20>
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d002      	beq.n	800defc <MAP_refPos+0x20>
		
		uc_index = 14;		// st_PosDataテーブルの直進のインデックス番号
 800def6:	230e      	movs	r3, #14
 800def8:	73fb      	strb	r3, [r7, #15]
 800defa:	e023      	b.n	800df44 <MAP_refPos+0x68>
	}
	/* 斜め直進 */
	else if( ( uc_cmd <=  NGO71 ) && ( uc_cmd >=  NGO1) ){
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	2b98      	cmp	r3, #152	; 0x98
 800df00:	d805      	bhi.n	800df0e <MAP_refPos+0x32>
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b51      	cmp	r3, #81	; 0x51
 800df06:	d902      	bls.n	800df0e <MAP_refPos+0x32>
		
		uc_index = 15;		// st_PosDataテーブルの斜め直進のインデックス番号
 800df08:	230f      	movs	r3, #15
 800df0a:	73fb      	strb	r3, [r7, #15]
 800df0c:	e01a      	b.n	800df44 <MAP_refPos+0x68>
	}
	/* その他のコマンド */
	else{
		while(1){
			
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800df0e:	7bfa      	ldrb	r2, [r7, #15]
 800df10:	49c7      	ldr	r1, [pc, #796]	; (800e230 <MAP_refPos+0x354>)
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	440b      	add	r3, r1
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	79fa      	ldrb	r2, [r7, #7]
 800df20:	429a      	cmp	r2, r3
 800df22:	d00e      	beq.n	800df42 <MAP_refPos+0x66>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800df24:	7bfa      	ldrb	r2, [r7, #15]
 800df26:	49c2      	ldr	r1, [pc, #776]	; (800e230 <MAP_refPos+0x354>)
 800df28:	4613      	mov	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	440b      	add	r3, r1
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2bfb      	cmp	r3, #251	; 0xfb
 800df36:	f000 82cb 	beq.w	800e4d0 <MAP_refPos+0x5f4>
			uc_index++;
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	3301      	adds	r3, #1
 800df3e:	73fb      	strb	r3, [r7, #15]
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800df40:	e7e5      	b.n	800df0e <MAP_refPos+0x32>
 800df42:	bf00      	nop
		}
	}
	
		/* 位置更新 */
	switch( s_PosDir ){
 800df44:	4bbb      	ldr	r3, [pc, #748]	; (800e234 <MAP_refPos+0x358>)
 800df46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df4a:	2b07      	cmp	r3, #7
 800df4c:	f200 8268 	bhi.w	800e420 <MAP_refPos+0x544>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <MAP_refPos+0x7c>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800df79 	.word	0x0800df79
 800df5c:	0800df79 	.word	0x0800df79
 800df60:	0800e09f 	.word	0x0800e09f
 800df64:	0800e09f 	.word	0x0800e09f
 800df68:	0800e1c5 	.word	0x0800e1c5
 800df6c:	0800e1c5 	.word	0x0800e1c5
 800df70:	0800e2fb 	.word	0x0800e2fb
 800df74:	0800e2fb 	.word	0x0800e2fb
		/* [0]北 [1]北東 */
		case 0:
		case 1:
		
			/* 直進 */
			if( uc_index == 14 ){
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	2b0e      	cmp	r3, #14
 800df7c:	d132      	bne.n	800dfe4 <MAP_refPos+0x108>
				
				f_PosX += st_PosData[uc_index].f_x0_x1 * uc_cmd;
 800df7e:	7bfa      	ldrb	r2, [r7, #15]
 800df80:	49ab      	ldr	r1, [pc, #684]	; (800e230 <MAP_refPos+0x354>)
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	00db      	lsls	r3, r3, #3
 800df8a:	440b      	add	r3, r1
 800df8c:	3304      	adds	r3, #4
 800df8e:	ed93 7a00 	vldr	s14, [r3]
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	ee07 3a90 	vmov	s15, r3
 800df98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfa0:	4ba5      	ldr	r3, [pc, #660]	; (800e238 <MAP_refPos+0x35c>)
 800dfa2:	edd3 7a00 	vldr	s15, [r3]
 800dfa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfaa:	4ba3      	ldr	r3, [pc, #652]	; (800e238 <MAP_refPos+0x35c>)
 800dfac:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * uc_cmd;
 800dfb0:	7bfa      	ldrb	r2, [r7, #15]
 800dfb2:	499f      	ldr	r1, [pc, #636]	; (800e230 <MAP_refPos+0x354>)
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	440b      	add	r3, r1
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	ed93 7a00 	vldr	s14, [r3]
 800dfc4:	79fb      	ldrb	r3, [r7, #7]
 800dfc6:	ee07 3a90 	vmov	s15, r3
 800dfca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfd2:	4b9a      	ldr	r3, [pc, #616]	; (800e23c <MAP_refPos+0x360>)
 800dfd4:	edd3 7a00 	vldr	s15, [r3]
 800dfd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfdc:	4b97      	ldr	r3, [pc, #604]	; (800e23c <MAP_refPos+0x360>)
 800dfde:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x0_x1;
				f_PosY += st_PosData[uc_index].f_y0_y1;
			}
			break;
 800dfe2:	e21d      	b.n	800e420 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	2b0f      	cmp	r3, #15
 800dfe8:	d134      	bne.n	800e054 <MAP_refPos+0x178>
				f_PosX += st_PosData[uc_index].f_x0_x1 * ( uc_cmd - 81 );
 800dfea:	7bfa      	ldrb	r2, [r7, #15]
 800dfec:	4990      	ldr	r1, [pc, #576]	; (800e230 <MAP_refPos+0x354>)
 800dfee:	4613      	mov	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4413      	add	r3, r2
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	440b      	add	r3, r1
 800dff8:	3304      	adds	r3, #4
 800dffa:	ed93 7a00 	vldr	s14, [r3]
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	3b51      	subs	r3, #81	; 0x51
 800e002:	ee07 3a90 	vmov	s15, r3
 800e006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e00a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e00e:	4b8a      	ldr	r3, [pc, #552]	; (800e238 <MAP_refPos+0x35c>)
 800e010:	edd3 7a00 	vldr	s15, [r3]
 800e014:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e018:	4b87      	ldr	r3, [pc, #540]	; (800e238 <MAP_refPos+0x35c>)
 800e01a:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * ( uc_cmd - 81 );
 800e01e:	7bfa      	ldrb	r2, [r7, #15]
 800e020:	4983      	ldr	r1, [pc, #524]	; (800e230 <MAP_refPos+0x354>)
 800e022:	4613      	mov	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	440b      	add	r3, r1
 800e02c:	3308      	adds	r3, #8
 800e02e:	ed93 7a00 	vldr	s14, [r3]
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	3b51      	subs	r3, #81	; 0x51
 800e036:	ee07 3a90 	vmov	s15, r3
 800e03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e03e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e042:	4b7e      	ldr	r3, [pc, #504]	; (800e23c <MAP_refPos+0x360>)
 800e044:	edd3 7a00 	vldr	s15, [r3]
 800e048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e04c:	4b7b      	ldr	r3, [pc, #492]	; (800e23c <MAP_refPos+0x360>)
 800e04e:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e052:	e1e5      	b.n	800e420 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x0_x1;
 800e054:	7bfa      	ldrb	r2, [r7, #15]
 800e056:	4976      	ldr	r1, [pc, #472]	; (800e230 <MAP_refPos+0x354>)
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	440b      	add	r3, r1
 800e062:	3304      	adds	r3, #4
 800e064:	ed93 7a00 	vldr	s14, [r3]
 800e068:	4b73      	ldr	r3, [pc, #460]	; (800e238 <MAP_refPos+0x35c>)
 800e06a:	edd3 7a00 	vldr	s15, [r3]
 800e06e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e072:	4b71      	ldr	r3, [pc, #452]	; (800e238 <MAP_refPos+0x35c>)
 800e074:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1;
 800e078:	7bfa      	ldrb	r2, [r7, #15]
 800e07a:	496d      	ldr	r1, [pc, #436]	; (800e230 <MAP_refPos+0x354>)
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	00db      	lsls	r3, r3, #3
 800e084:	440b      	add	r3, r1
 800e086:	3308      	adds	r3, #8
 800e088:	ed93 7a00 	vldr	s14, [r3]
 800e08c:	4b6b      	ldr	r3, [pc, #428]	; (800e23c <MAP_refPos+0x360>)
 800e08e:	edd3 7a00 	vldr	s15, [r3]
 800e092:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e096:	4b69      	ldr	r3, [pc, #420]	; (800e23c <MAP_refPos+0x360>)
 800e098:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e09c:	e1c0      	b.n	800e420 <MAP_refPos+0x544>
		/* [2]東 [3]南東 */
		case 2:
		case 3:

			/* 直進 */
			if( uc_index == 14 ){
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	2b0e      	cmp	r3, #14
 800e0a2:	d132      	bne.n	800e10a <MAP_refPos+0x22e>
				
				f_PosX += st_PosData[uc_index].f_x2_x3 * uc_cmd;
 800e0a4:	7bfa      	ldrb	r2, [r7, #15]
 800e0a6:	4962      	ldr	r1, [pc, #392]	; (800e230 <MAP_refPos+0x354>)
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	440b      	add	r3, r1
 800e0b2:	330c      	adds	r3, #12
 800e0b4:	ed93 7a00 	vldr	s14, [r3]
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	ee07 3a90 	vmov	s15, r3
 800e0be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0c6:	4b5c      	ldr	r3, [pc, #368]	; (800e238 <MAP_refPos+0x35c>)
 800e0c8:	edd3 7a00 	vldr	s15, [r3]
 800e0cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0d0:	4b59      	ldr	r3, [pc, #356]	; (800e238 <MAP_refPos+0x35c>)
 800e0d2:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * uc_cmd;
 800e0d6:	7bfa      	ldrb	r2, [r7, #15]
 800e0d8:	4955      	ldr	r1, [pc, #340]	; (800e230 <MAP_refPos+0x354>)
 800e0da:	4613      	mov	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	00db      	lsls	r3, r3, #3
 800e0e2:	440b      	add	r3, r1
 800e0e4:	3310      	adds	r3, #16
 800e0e6:	ed93 7a00 	vldr	s14, [r3]
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	ee07 3a90 	vmov	s15, r3
 800e0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0f8:	4b50      	ldr	r3, [pc, #320]	; (800e23c <MAP_refPos+0x360>)
 800e0fa:	edd3 7a00 	vldr	s15, [r3]
 800e0fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e102:	4b4e      	ldr	r3, [pc, #312]	; (800e23c <MAP_refPos+0x360>)
 800e104:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x2_x3;
				f_PosY += st_PosData[uc_index].f_y2_y3;
			}
			break;
 800e108:	e18a      	b.n	800e420 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800e10a:	7bfb      	ldrb	r3, [r7, #15]
 800e10c:	2b0f      	cmp	r3, #15
 800e10e:	d134      	bne.n	800e17a <MAP_refPos+0x29e>
				f_PosX += st_PosData[uc_index].f_x2_x3 * ( uc_cmd - 81 );
 800e110:	7bfa      	ldrb	r2, [r7, #15]
 800e112:	4947      	ldr	r1, [pc, #284]	; (800e230 <MAP_refPos+0x354>)
 800e114:	4613      	mov	r3, r2
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	4413      	add	r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	440b      	add	r3, r1
 800e11e:	330c      	adds	r3, #12
 800e120:	ed93 7a00 	vldr	s14, [r3]
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	3b51      	subs	r3, #81	; 0x51
 800e128:	ee07 3a90 	vmov	s15, r3
 800e12c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e130:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e134:	4b40      	ldr	r3, [pc, #256]	; (800e238 <MAP_refPos+0x35c>)
 800e136:	edd3 7a00 	vldr	s15, [r3]
 800e13a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e13e:	4b3e      	ldr	r3, [pc, #248]	; (800e238 <MAP_refPos+0x35c>)
 800e140:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * ( uc_cmd - 81 );
 800e144:	7bfa      	ldrb	r2, [r7, #15]
 800e146:	493a      	ldr	r1, [pc, #232]	; (800e230 <MAP_refPos+0x354>)
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	00db      	lsls	r3, r3, #3
 800e150:	440b      	add	r3, r1
 800e152:	3310      	adds	r3, #16
 800e154:	ed93 7a00 	vldr	s14, [r3]
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	3b51      	subs	r3, #81	; 0x51
 800e15c:	ee07 3a90 	vmov	s15, r3
 800e160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e168:	4b34      	ldr	r3, [pc, #208]	; (800e23c <MAP_refPos+0x360>)
 800e16a:	edd3 7a00 	vldr	s15, [r3]
 800e16e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e172:	4b32      	ldr	r3, [pc, #200]	; (800e23c <MAP_refPos+0x360>)
 800e174:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e178:	e152      	b.n	800e420 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x2_x3;
 800e17a:	7bfa      	ldrb	r2, [r7, #15]
 800e17c:	492c      	ldr	r1, [pc, #176]	; (800e230 <MAP_refPos+0x354>)
 800e17e:	4613      	mov	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	330c      	adds	r3, #12
 800e18a:	ed93 7a00 	vldr	s14, [r3]
 800e18e:	4b2a      	ldr	r3, [pc, #168]	; (800e238 <MAP_refPos+0x35c>)
 800e190:	edd3 7a00 	vldr	s15, [r3]
 800e194:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e198:	4b27      	ldr	r3, [pc, #156]	; (800e238 <MAP_refPos+0x35c>)
 800e19a:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3;
 800e19e:	7bfa      	ldrb	r2, [r7, #15]
 800e1a0:	4923      	ldr	r1, [pc, #140]	; (800e230 <MAP_refPos+0x354>)
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	440b      	add	r3, r1
 800e1ac:	3310      	adds	r3, #16
 800e1ae:	ed93 7a00 	vldr	s14, [r3]
 800e1b2:	4b22      	ldr	r3, [pc, #136]	; (800e23c <MAP_refPos+0x360>)
 800e1b4:	edd3 7a00 	vldr	s15, [r3]
 800e1b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1bc:	4b1f      	ldr	r3, [pc, #124]	; (800e23c <MAP_refPos+0x360>)
 800e1be:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e1c2:	e12d      	b.n	800e420 <MAP_refPos+0x544>
		/* [4]南 [5]南西 */
		case 4:
		case 5:

			/* 直進 */
			if( uc_index == 14 ){
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	2b0e      	cmp	r3, #14
 800e1c8:	d13a      	bne.n	800e240 <MAP_refPos+0x364>
				
				f_PosX += st_PosData[uc_index].f_x4_x5 * uc_cmd;
 800e1ca:	7bfa      	ldrb	r2, [r7, #15]
 800e1cc:	4918      	ldr	r1, [pc, #96]	; (800e230 <MAP_refPos+0x354>)
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	00db      	lsls	r3, r3, #3
 800e1d6:	440b      	add	r3, r1
 800e1d8:	3314      	adds	r3, #20
 800e1da:	ed93 7a00 	vldr	s14, [r3]
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	ee07 3a90 	vmov	s15, r3
 800e1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1ec:	4b12      	ldr	r3, [pc, #72]	; (800e238 <MAP_refPos+0x35c>)
 800e1ee:	edd3 7a00 	vldr	s15, [r3]
 800e1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1f6:	4b10      	ldr	r3, [pc, #64]	; (800e238 <MAP_refPos+0x35c>)
 800e1f8:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * uc_cmd;
 800e1fc:	7bfa      	ldrb	r2, [r7, #15]
 800e1fe:	490c      	ldr	r1, [pc, #48]	; (800e230 <MAP_refPos+0x354>)
 800e200:	4613      	mov	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	440b      	add	r3, r1
 800e20a:	3318      	adds	r3, #24
 800e20c:	ed93 7a00 	vldr	s14, [r3]
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	ee07 3a90 	vmov	s15, r3
 800e216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e21a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e21e:	4b07      	ldr	r3, [pc, #28]	; (800e23c <MAP_refPos+0x360>)
 800e220:	edd3 7a00 	vldr	s15, [r3]
 800e224:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e228:	4b04      	ldr	r3, [pc, #16]	; (800e23c <MAP_refPos+0x360>)
 800e22a:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x4_x5;
				f_PosY += st_PosData[uc_index].f_y4_y5;
			}
			break;
 800e22e:	e0f7      	b.n	800e420 <MAP_refPos+0x544>
 800e230:	0801c724 	.word	0x0801c724
 800e234:	2000c284 	.word	0x2000c284
 800e238:	2000c288 	.word	0x2000c288
 800e23c:	2000e344 	.word	0x2000e344
			else if( uc_index == 15 ){
 800e240:	7bfb      	ldrb	r3, [r7, #15]
 800e242:	2b0f      	cmp	r3, #15
 800e244:	d134      	bne.n	800e2b0 <MAP_refPos+0x3d4>
				f_PosX += st_PosData[uc_index].f_x4_x5 * ( uc_cmd - 81 );
 800e246:	7bfa      	ldrb	r2, [r7, #15]
 800e248:	49a4      	ldr	r1, [pc, #656]	; (800e4dc <MAP_refPos+0x600>)
 800e24a:	4613      	mov	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	440b      	add	r3, r1
 800e254:	3314      	adds	r3, #20
 800e256:	ed93 7a00 	vldr	s14, [r3]
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	3b51      	subs	r3, #81	; 0x51
 800e25e:	ee07 3a90 	vmov	s15, r3
 800e262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e26a:	4b9d      	ldr	r3, [pc, #628]	; (800e4e0 <MAP_refPos+0x604>)
 800e26c:	edd3 7a00 	vldr	s15, [r3]
 800e270:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e274:	4b9a      	ldr	r3, [pc, #616]	; (800e4e0 <MAP_refPos+0x604>)
 800e276:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * ( uc_cmd - 81 );
 800e27a:	7bfa      	ldrb	r2, [r7, #15]
 800e27c:	4997      	ldr	r1, [pc, #604]	; (800e4dc <MAP_refPos+0x600>)
 800e27e:	4613      	mov	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	440b      	add	r3, r1
 800e288:	3318      	adds	r3, #24
 800e28a:	ed93 7a00 	vldr	s14, [r3]
 800e28e:	79fb      	ldrb	r3, [r7, #7]
 800e290:	3b51      	subs	r3, #81	; 0x51
 800e292:	ee07 3a90 	vmov	s15, r3
 800e296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e29e:	4b91      	ldr	r3, [pc, #580]	; (800e4e4 <MAP_refPos+0x608>)
 800e2a0:	edd3 7a00 	vldr	s15, [r3]
 800e2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2a8:	4b8e      	ldr	r3, [pc, #568]	; (800e4e4 <MAP_refPos+0x608>)
 800e2aa:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e2ae:	e0b7      	b.n	800e420 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x4_x5;
 800e2b0:	7bfa      	ldrb	r2, [r7, #15]
 800e2b2:	498a      	ldr	r1, [pc, #552]	; (800e4dc <MAP_refPos+0x600>)
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	440b      	add	r3, r1
 800e2be:	3314      	adds	r3, #20
 800e2c0:	ed93 7a00 	vldr	s14, [r3]
 800e2c4:	4b86      	ldr	r3, [pc, #536]	; (800e4e0 <MAP_refPos+0x604>)
 800e2c6:	edd3 7a00 	vldr	s15, [r3]
 800e2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2ce:	4b84      	ldr	r3, [pc, #528]	; (800e4e0 <MAP_refPos+0x604>)
 800e2d0:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5;
 800e2d4:	7bfa      	ldrb	r2, [r7, #15]
 800e2d6:	4981      	ldr	r1, [pc, #516]	; (800e4dc <MAP_refPos+0x600>)
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	440b      	add	r3, r1
 800e2e2:	3318      	adds	r3, #24
 800e2e4:	ed93 7a00 	vldr	s14, [r3]
 800e2e8:	4b7e      	ldr	r3, [pc, #504]	; (800e4e4 <MAP_refPos+0x608>)
 800e2ea:	edd3 7a00 	vldr	s15, [r3]
 800e2ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2f2:	4b7c      	ldr	r3, [pc, #496]	; (800e4e4 <MAP_refPos+0x608>)
 800e2f4:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e2f8:	e092      	b.n	800e420 <MAP_refPos+0x544>
		/* [6]西 [7]北西 */
		case 6:
		case 7:

			/* 直進 */
			if( uc_index == 14 ){
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
 800e2fc:	2b0e      	cmp	r3, #14
 800e2fe:	d132      	bne.n	800e366 <MAP_refPos+0x48a>
				
				f_PosX += st_PosData[uc_index].f_x6_x7 * uc_cmd;
 800e300:	7bfa      	ldrb	r2, [r7, #15]
 800e302:	4976      	ldr	r1, [pc, #472]	; (800e4dc <MAP_refPos+0x600>)
 800e304:	4613      	mov	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	00db      	lsls	r3, r3, #3
 800e30c:	440b      	add	r3, r1
 800e30e:	331c      	adds	r3, #28
 800e310:	ed93 7a00 	vldr	s14, [r3]
 800e314:	79fb      	ldrb	r3, [r7, #7]
 800e316:	ee07 3a90 	vmov	s15, r3
 800e31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e322:	4b6f      	ldr	r3, [pc, #444]	; (800e4e0 <MAP_refPos+0x604>)
 800e324:	edd3 7a00 	vldr	s15, [r3]
 800e328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e32c:	4b6c      	ldr	r3, [pc, #432]	; (800e4e0 <MAP_refPos+0x604>)
 800e32e:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * uc_cmd;
 800e332:	7bfa      	ldrb	r2, [r7, #15]
 800e334:	4969      	ldr	r1, [pc, #420]	; (800e4dc <MAP_refPos+0x600>)
 800e336:	4613      	mov	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	00db      	lsls	r3, r3, #3
 800e33e:	440b      	add	r3, r1
 800e340:	3320      	adds	r3, #32
 800e342:	ed93 7a00 	vldr	s14, [r3]
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	ee07 3a90 	vmov	s15, r3
 800e34c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e350:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e354:	4b63      	ldr	r3, [pc, #396]	; (800e4e4 <MAP_refPos+0x608>)
 800e356:	edd3 7a00 	vldr	s15, [r3]
 800e35a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e35e:	4b61      	ldr	r3, [pc, #388]	; (800e4e4 <MAP_refPos+0x608>)
 800e360:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x6_x7;
				f_PosY += st_PosData[uc_index].f_y6_y7;
			}
			break;
 800e364:	e05b      	b.n	800e41e <MAP_refPos+0x542>
			else if( uc_index == 15 ){
 800e366:	7bfb      	ldrb	r3, [r7, #15]
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	d134      	bne.n	800e3d6 <MAP_refPos+0x4fa>
				f_PosX += st_PosData[uc_index].f_x6_x7 * ( uc_cmd - 81 );
 800e36c:	7bfa      	ldrb	r2, [r7, #15]
 800e36e:	495b      	ldr	r1, [pc, #364]	; (800e4dc <MAP_refPos+0x600>)
 800e370:	4613      	mov	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	00db      	lsls	r3, r3, #3
 800e378:	440b      	add	r3, r1
 800e37a:	331c      	adds	r3, #28
 800e37c:	ed93 7a00 	vldr	s14, [r3]
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	3b51      	subs	r3, #81	; 0x51
 800e384:	ee07 3a90 	vmov	s15, r3
 800e388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e38c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e390:	4b53      	ldr	r3, [pc, #332]	; (800e4e0 <MAP_refPos+0x604>)
 800e392:	edd3 7a00 	vldr	s15, [r3]
 800e396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e39a:	4b51      	ldr	r3, [pc, #324]	; (800e4e0 <MAP_refPos+0x604>)
 800e39c:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * ( uc_cmd - 81 );
 800e3a0:	7bfa      	ldrb	r2, [r7, #15]
 800e3a2:	494e      	ldr	r1, [pc, #312]	; (800e4dc <MAP_refPos+0x600>)
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4413      	add	r3, r2
 800e3aa:	00db      	lsls	r3, r3, #3
 800e3ac:	440b      	add	r3, r1
 800e3ae:	3320      	adds	r3, #32
 800e3b0:	ed93 7a00 	vldr	s14, [r3]
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	3b51      	subs	r3, #81	; 0x51
 800e3b8:	ee07 3a90 	vmov	s15, r3
 800e3bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3c4:	4b47      	ldr	r3, [pc, #284]	; (800e4e4 <MAP_refPos+0x608>)
 800e3c6:	edd3 7a00 	vldr	s15, [r3]
 800e3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3ce:	4b45      	ldr	r3, [pc, #276]	; (800e4e4 <MAP_refPos+0x608>)
 800e3d0:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e3d4:	e023      	b.n	800e41e <MAP_refPos+0x542>
				f_PosX += st_PosData[uc_index].f_x6_x7;
 800e3d6:	7bfa      	ldrb	r2, [r7, #15]
 800e3d8:	4940      	ldr	r1, [pc, #256]	; (800e4dc <MAP_refPos+0x600>)
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	440b      	add	r3, r1
 800e3e4:	331c      	adds	r3, #28
 800e3e6:	ed93 7a00 	vldr	s14, [r3]
 800e3ea:	4b3d      	ldr	r3, [pc, #244]	; (800e4e0 <MAP_refPos+0x604>)
 800e3ec:	edd3 7a00 	vldr	s15, [r3]
 800e3f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3f4:	4b3a      	ldr	r3, [pc, #232]	; (800e4e0 <MAP_refPos+0x604>)
 800e3f6:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7;
 800e3fa:	7bfa      	ldrb	r2, [r7, #15]
 800e3fc:	4937      	ldr	r1, [pc, #220]	; (800e4dc <MAP_refPos+0x600>)
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	440b      	add	r3, r1
 800e408:	3320      	adds	r3, #32
 800e40a:	ed93 7a00 	vldr	s14, [r3]
 800e40e:	4b35      	ldr	r3, [pc, #212]	; (800e4e4 <MAP_refPos+0x608>)
 800e410:	edd3 7a00 	vldr	s15, [r3]
 800e414:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e418:	4b32      	ldr	r3, [pc, #200]	; (800e4e4 <MAP_refPos+0x608>)
 800e41a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800e41e:	bf00      	nop
	}
	
	/* 進行方向更新 */
	s_PosDir += st_PosData[uc_index].s_dir;
 800e420:	7bfa      	ldrb	r2, [r7, #15]
 800e422:	492e      	ldr	r1, [pc, #184]	; (800e4dc <MAP_refPos+0x600>)
 800e424:	4613      	mov	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4413      	add	r3, r2
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	440b      	add	r3, r1
 800e42e:	3324      	adds	r3, #36	; 0x24
 800e430:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e434:	b29a      	uxth	r2, r3
 800e436:	4b2c      	ldr	r3, [pc, #176]	; (800e4e8 <MAP_refPos+0x60c>)
 800e438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	4413      	add	r3, r2
 800e440:	b29b      	uxth	r3, r3
 800e442:	b21a      	sxth	r2, r3
 800e444:	4b28      	ldr	r3, [pc, #160]	; (800e4e8 <MAP_refPos+0x60c>)
 800e446:	801a      	strh	r2, [r3, #0]
	if( s_PosDir < 0 ) s_PosDir += 8;				// [0]～[7]にしたい
 800e448:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <MAP_refPos+0x60c>)
 800e44a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	da09      	bge.n	800e466 <MAP_refPos+0x58a>
 800e452:	4b25      	ldr	r3, [pc, #148]	; (800e4e8 <MAP_refPos+0x60c>)
 800e454:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e458:	b29b      	uxth	r3, r3
 800e45a:	3308      	adds	r3, #8
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	b21a      	sxth	r2, r3
 800e460:	4b21      	ldr	r3, [pc, #132]	; (800e4e8 <MAP_refPos+0x60c>)
 800e462:	801a      	strh	r2, [r3, #0]
 800e464:	e00d      	b.n	800e482 <MAP_refPos+0x5a6>
	else if( s_PosDir > 7 ) s_PosDir -= 8;
 800e466:	4b20      	ldr	r3, [pc, #128]	; (800e4e8 <MAP_refPos+0x60c>)
 800e468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	dd08      	ble.n	800e482 <MAP_refPos+0x5a6>
 800e470:	4b1d      	ldr	r3, [pc, #116]	; (800e4e8 <MAP_refPos+0x60c>)
 800e472:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e476:	b29b      	uxth	r3, r3
 800e478:	3b08      	subs	r3, #8
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	b21a      	sxth	r2, r3
 800e47e:	4b1a      	ldr	r3, [pc, #104]	; (800e4e8 <MAP_refPos+0x60c>)
 800e480:	801a      	strh	r2, [r3, #0]
	
	f_LogPosX[us_LogIndex] = f_PosX;
 800e482:	4b1a      	ldr	r3, [pc, #104]	; (800e4ec <MAP_refPos+0x610>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	4618      	mov	r0, r3
 800e488:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <MAP_refPos+0x604>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	4918      	ldr	r1, [pc, #96]	; (800e4f0 <MAP_refPos+0x614>)
 800e48e:	0083      	lsls	r3, r0, #2
 800e490:	440b      	add	r3, r1
 800e492:	601a      	str	r2, [r3, #0]
	f_LogPosY[us_LogIndex] = f_PosY;
 800e494:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <MAP_refPos+0x610>)
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	4618      	mov	r0, r3
 800e49a:	4b12      	ldr	r3, [pc, #72]	; (800e4e4 <MAP_refPos+0x608>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4915      	ldr	r1, [pc, #84]	; (800e4f4 <MAP_refPos+0x618>)
 800e4a0:	0083      	lsls	r3, r0, #2
 800e4a2:	440b      	add	r3, r1
 800e4a4:	601a      	str	r2, [r3, #0]
	
	us_LogIndex++;
 800e4a6:	4b11      	ldr	r3, [pc, #68]	; (800e4ec <MAP_refPos+0x610>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <MAP_refPos+0x610>)
 800e4b0:	801a      	strh	r2, [r3, #0]
	us_LogIndex %= 30;
 800e4b2:	4b0e      	ldr	r3, [pc, #56]	; (800e4ec <MAP_refPos+0x610>)
 800e4b4:	881a      	ldrh	r2, [r3, #0]
 800e4b6:	4b10      	ldr	r3, [pc, #64]	; (800e4f8 <MAP_refPos+0x61c>)
 800e4b8:	fba3 1302 	umull	r1, r3, r3, r2
 800e4bc:	0919      	lsrs	r1, r3, #4
 800e4be:	460b      	mov	r3, r1
 800e4c0:	011b      	lsls	r3, r3, #4
 800e4c2:	1a5b      	subs	r3, r3, r1
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	4b08      	ldr	r3, [pc, #32]	; (800e4ec <MAP_refPos+0x610>)
 800e4cc:	801a      	strh	r2, [r3, #0]
 800e4ce:	e000      	b.n	800e4d2 <MAP_refPos+0x5f6>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800e4d0:	bf00      	nop
}
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	0801c724 	.word	0x0801c724
 800e4e0:	2000c288 	.word	0x2000c288
 800e4e4:	2000e344 	.word	0x2000e344
 800e4e8:	2000c284 	.word	0x2000c284
 800e4ec:	200002d2 	.word	0x200002d2
 800e4f0:	2000e2c8 	.word	0x2000e2c8
 800e4f4:	2000b20c 	.word	0x2000b20c
 800e4f8:	88888889 	.word	0x88888889

0800e4fc <MAP_setWallCut>:

bool MAP_setWallCut( uint8_t uc_cmd )
{
 800e4fc:	b590      	push	{r4, r7, lr}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_val = 0;			// 1区画前のコーナー側の壁があるか（0以外なら壁あり）
 800e506:	2300      	movs	r3, #0
 800e508:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_valPrev = 0;		// 2区画前のコーナー側の壁があるか（0以外なら壁あり）
 800e50a:	2300      	movs	r3, #0
 800e50c:	73bb      	strb	r3, [r7, #14]
	bool bl_wallCut = FALSE;
 800e50e:	2300      	movs	r3, #0
 800e510:	737b      	strb	r3, [r7, #13]
	
	/* 位置更新 */
	switch( uc_cmd ){
 800e512:	79fb      	ldrb	r3, [r7, #7]
 800e514:	2b9c      	cmp	r3, #156	; 0x9c
 800e516:	f000 822a 	beq.w	800e96e <MAP_setWallCut+0x472>
 800e51a:	2b9c      	cmp	r3, #156	; 0x9c
 800e51c:	f300 843f 	bgt.w	800ed9e <MAP_setWallCut+0x8a2>
 800e520:	2b9b      	cmp	r3, #155	; 0x9b
 800e522:	d009      	beq.n	800e538 <MAP_setWallCut+0x3c>
 800e524:	2b9b      	cmp	r3, #155	; 0x9b
 800e526:	f300 843a 	bgt.w	800ed9e <MAP_setWallCut+0x8a2>
 800e52a:	2b4c      	cmp	r3, #76	; 0x4c
 800e52c:	d004      	beq.n	800e538 <MAP_setWallCut+0x3c>
 800e52e:	2b4d      	cmp	r3, #77	; 0x4d
 800e530:	f000 821d 	beq.w	800e96e <MAP_setWallCut+0x472>
				bl_wallCut = TRUE;
			}
			break;
			
		default:
			break;
 800e534:	f000 bc33 	b.w	800ed9e <MAP_setWallCut+0x8a2>
			switch( s_PosDir ){
 800e538:	4bc1      	ldr	r3, [pc, #772]	; (800e840 <MAP_setWallCut+0x344>)
 800e53a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e53e:	2b06      	cmp	r3, #6
 800e540:	f200 8204 	bhi.w	800e94c <MAP_setWallCut+0x450>
 800e544:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <MAP_setWallCut+0x50>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e569 	.word	0x0800e569
 800e550:	0800e94d 	.word	0x0800e94d
 800e554:	0800e65d 	.word	0x0800e65d
 800e558:	0800e94d 	.word	0x0800e94d
 800e55c:	0800e751 	.word	0x0800e751
 800e560:	0800e94d 	.word	0x0800e94d
 800e564:	0800e85d 	.word	0x0800e85d
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800e568:	4bb6      	ldr	r3, [pc, #728]	; (800e844 <MAP_setWallCut+0x348>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7f2 f813 	bl	8000598 <__aeabi_f2d>
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	4bb4      	ldr	r3, [pc, #720]	; (800e848 <MAP_setWallCut+0x34c>)
 800e578:	f7f1 feae 	bl	80002d8 <__aeabi_dsub>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4610      	mov	r0, r2
 800e582:	4619      	mov	r1, r3
 800e584:	f04f 0200 	mov.w	r2, #0
 800e588:	f04f 0300 	mov.w	r3, #0
 800e58c:	f7f2 faec 	bl	8000b68 <__aeabi_dcmpgt>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d024      	beq.n	800e5e0 <MAP_setWallCut+0xe4>
 800e596:	4bab      	ldr	r3, [pc, #684]	; (800e844 <MAP_setWallCut+0x348>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7f1 fffc 	bl	8000598 <__aeabi_f2d>
 800e5a0:	f04f 0200 	mov.w	r2, #0
 800e5a4:	4ba8      	ldr	r3, [pc, #672]	; (800e848 <MAP_setWallCut+0x34c>)
 800e5a6:	f7f1 fe97 	bl	80002d8 <__aeabi_dsub>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f7f2 fb21 	bl	8000bf8 <__aeabi_d2uiz>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	4ba3      	ldr	r3, [pc, #652]	; (800e84c <MAP_setWallCut+0x350>)
 800e5be:	edd3 7a00 	vldr	s15, [r3]
 800e5c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5c6:	edc7 7a00 	vstr	s15, [r7]
 800e5ca:	783b      	ldrb	r3, [r7, #0]
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4a9f      	ldr	r2, [pc, #636]	; (800e850 <MAP_setWallCut+0x354>)
 800e5d2:	0143      	lsls	r3, r0, #5
 800e5d4:	4413      	add	r3, r2
 800e5d6:	440b      	add	r3, r1
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 0302 	and.w	r3, r3, #2
 800e5de:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800e5e0:	4b98      	ldr	r3, [pc, #608]	; (800e844 <MAP_setWallCut+0x348>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f1 ffd7 	bl	8000598 <__aeabi_f2d>
 800e5ea:	f04f 0200 	mov.w	r2, #0
 800e5ee:	4b99      	ldr	r3, [pc, #612]	; (800e854 <MAP_setWallCut+0x358>)
 800e5f0:	f7f1 fe72 	bl	80002d8 <__aeabi_dsub>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	f04f 0200 	mov.w	r2, #0
 800e600:	f04f 0300 	mov.w	r3, #0
 800e604:	f7f2 fab0 	bl	8000b68 <__aeabi_dcmpgt>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d100      	bne.n	800e610 <MAP_setWallCut+0x114>
					break;	
 800e60e:	e19d      	b.n	800e94c <MAP_setWallCut+0x450>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800e610:	4b8c      	ldr	r3, [pc, #560]	; (800e844 <MAP_setWallCut+0x348>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4618      	mov	r0, r3
 800e616:	f7f1 ffbf 	bl	8000598 <__aeabi_f2d>
 800e61a:	f04f 0200 	mov.w	r2, #0
 800e61e:	4b8d      	ldr	r3, [pc, #564]	; (800e854 <MAP_setWallCut+0x358>)
 800e620:	f7f1 fe5a 	bl	80002d8 <__aeabi_dsub>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	4610      	mov	r0, r2
 800e62a:	4619      	mov	r1, r3
 800e62c:	f7f2 fae4 	bl	8000bf8 <__aeabi_d2uiz>
 800e630:	4603      	mov	r3, r0
 800e632:	b2db      	uxtb	r3, r3
 800e634:	4618      	mov	r0, r3
 800e636:	4b85      	ldr	r3, [pc, #532]	; (800e84c <MAP_setWallCut+0x350>)
 800e638:	edd3 7a00 	vldr	s15, [r3]
 800e63c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e640:	edc7 7a00 	vstr	s15, [r7]
 800e644:	783b      	ldrb	r3, [r7, #0]
 800e646:	b2db      	uxtb	r3, r3
 800e648:	4619      	mov	r1, r3
 800e64a:	4a81      	ldr	r2, [pc, #516]	; (800e850 <MAP_setWallCut+0x354>)
 800e64c:	0143      	lsls	r3, r0, #5
 800e64e:	4413      	add	r3, r2
 800e650:	440b      	add	r3, r1
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	f003 0302 	and.w	r3, r3, #2
 800e658:	73bb      	strb	r3, [r7, #14]
					break;	
 800e65a:	e177      	b.n	800e94c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800e65c:	4b7b      	ldr	r3, [pc, #492]	; (800e84c <MAP_setWallCut+0x350>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4618      	mov	r0, r3
 800e662:	f7f1 ff99 	bl	8000598 <__aeabi_f2d>
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	4b77      	ldr	r3, [pc, #476]	; (800e848 <MAP_setWallCut+0x34c>)
 800e66c:	f7f1 fe34 	bl	80002d8 <__aeabi_dsub>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	4610      	mov	r0, r2
 800e676:	4619      	mov	r1, r3
 800e678:	f04f 0200 	mov.w	r2, #0
 800e67c:	f04f 0300 	mov.w	r3, #0
 800e680:	f7f2 fa72 	bl	8000b68 <__aeabi_dcmpgt>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d024      	beq.n	800e6d4 <MAP_setWallCut+0x1d8>
 800e68a:	4b6e      	ldr	r3, [pc, #440]	; (800e844 <MAP_setWallCut+0x348>)
 800e68c:	edd3 7a00 	vldr	s15, [r3]
 800e690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e694:	edc7 7a00 	vstr	s15, [r7]
 800e698:	783b      	ldrb	r3, [r7, #0]
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	461c      	mov	r4, r3
 800e69e:	4b6b      	ldr	r3, [pc, #428]	; (800e84c <MAP_setWallCut+0x350>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f1 ff78 	bl	8000598 <__aeabi_f2d>
 800e6a8:	f04f 0200 	mov.w	r2, #0
 800e6ac:	4b66      	ldr	r3, [pc, #408]	; (800e848 <MAP_setWallCut+0x34c>)
 800e6ae:	f7f1 fe13 	bl	80002d8 <__aeabi_dsub>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	f7f2 fa9d 	bl	8000bf8 <__aeabi_d2uiz>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4a62      	ldr	r2, [pc, #392]	; (800e850 <MAP_setWallCut+0x354>)
 800e6c6:	0163      	lsls	r3, r4, #5
 800e6c8:	4413      	add	r3, r2
 800e6ca:	440b      	add	r3, r1
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	f003 0304 	and.w	r3, r3, #4
 800e6d2:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800e6d4:	4b5d      	ldr	r3, [pc, #372]	; (800e84c <MAP_setWallCut+0x350>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7f1 ff5d 	bl	8000598 <__aeabi_f2d>
 800e6de:	f04f 0200 	mov.w	r2, #0
 800e6e2:	4b5c      	ldr	r3, [pc, #368]	; (800e854 <MAP_setWallCut+0x358>)
 800e6e4:	f7f1 fdf8 	bl	80002d8 <__aeabi_dsub>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	f04f 0200 	mov.w	r2, #0
 800e6f4:	f04f 0300 	mov.w	r3, #0
 800e6f8:	f7f2 fa36 	bl	8000b68 <__aeabi_dcmpgt>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d100      	bne.n	800e704 <MAP_setWallCut+0x208>
					break;
 800e702:	e123      	b.n	800e94c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800e704:	4b4f      	ldr	r3, [pc, #316]	; (800e844 <MAP_setWallCut+0x348>)
 800e706:	edd3 7a00 	vldr	s15, [r3]
 800e70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e70e:	edc7 7a00 	vstr	s15, [r7]
 800e712:	783b      	ldrb	r3, [r7, #0]
 800e714:	b2db      	uxtb	r3, r3
 800e716:	461c      	mov	r4, r3
 800e718:	4b4c      	ldr	r3, [pc, #304]	; (800e84c <MAP_setWallCut+0x350>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7f1 ff3b 	bl	8000598 <__aeabi_f2d>
 800e722:	f04f 0200 	mov.w	r2, #0
 800e726:	4b4b      	ldr	r3, [pc, #300]	; (800e854 <MAP_setWallCut+0x358>)
 800e728:	f7f1 fdd6 	bl	80002d8 <__aeabi_dsub>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4610      	mov	r0, r2
 800e732:	4619      	mov	r1, r3
 800e734:	f7f2 fa60 	bl	8000bf8 <__aeabi_d2uiz>
 800e738:	4603      	mov	r3, r0
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	4619      	mov	r1, r3
 800e73e:	4a44      	ldr	r2, [pc, #272]	; (800e850 <MAP_setWallCut+0x354>)
 800e740:	0163      	lsls	r3, r4, #5
 800e742:	4413      	add	r3, r2
 800e744:	440b      	add	r3, r1
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 0304 	and.w	r3, r3, #4
 800e74c:	73bb      	strb	r3, [r7, #14]
					break;
 800e74e:	e0fd      	b.n	800e94c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800e750:	4b3c      	ldr	r3, [pc, #240]	; (800e844 <MAP_setWallCut+0x348>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f7f1 ff1f 	bl	8000598 <__aeabi_f2d>
 800e75a:	f04f 0200 	mov.w	r2, #0
 800e75e:	4b3a      	ldr	r3, [pc, #232]	; (800e848 <MAP_setWallCut+0x34c>)
 800e760:	f7f1 fdbc 	bl	80002dc <__adddf3>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4610      	mov	r0, r2
 800e76a:	4619      	mov	r1, r3
 800e76c:	f04f 0200 	mov.w	r2, #0
 800e770:	4b39      	ldr	r3, [pc, #228]	; (800e858 <MAP_setWallCut+0x35c>)
 800e772:	f7f2 f9db 	bl	8000b2c <__aeabi_dcmplt>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d024      	beq.n	800e7c6 <MAP_setWallCut+0x2ca>
 800e77c:	4b31      	ldr	r3, [pc, #196]	; (800e844 <MAP_setWallCut+0x348>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4618      	mov	r0, r3
 800e782:	f7f1 ff09 	bl	8000598 <__aeabi_f2d>
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	4b2f      	ldr	r3, [pc, #188]	; (800e848 <MAP_setWallCut+0x34c>)
 800e78c:	f7f1 fda6 	bl	80002dc <__adddf3>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4610      	mov	r0, r2
 800e796:	4619      	mov	r1, r3
 800e798:	f7f2 fa2e 	bl	8000bf8 <__aeabi_d2uiz>
 800e79c:	4603      	mov	r3, r0
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	4b2a      	ldr	r3, [pc, #168]	; (800e84c <MAP_setWallCut+0x350>)
 800e7a4:	edd3 7a00 	vldr	s15, [r3]
 800e7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7ac:	edc7 7a00 	vstr	s15, [r7]
 800e7b0:	783b      	ldrb	r3, [r7, #0]
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4a26      	ldr	r2, [pc, #152]	; (800e850 <MAP_setWallCut+0x354>)
 800e7b8:	0143      	lsls	r3, r0, #5
 800e7ba:	4413      	add	r3, r2
 800e7bc:	440b      	add	r3, r1
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	f003 0308 	and.w	r3, r3, #8
 800e7c4:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800e7c6:	4b1f      	ldr	r3, [pc, #124]	; (800e844 <MAP_setWallCut+0x348>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7f1 fee4 	bl	8000598 <__aeabi_f2d>
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	4b1f      	ldr	r3, [pc, #124]	; (800e854 <MAP_setWallCut+0x358>)
 800e7d6:	f7f1 fd81 	bl	80002dc <__adddf3>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4610      	mov	r0, r2
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	f04f 0200 	mov.w	r2, #0
 800e7e6:	4b1c      	ldr	r3, [pc, #112]	; (800e858 <MAP_setWallCut+0x35c>)
 800e7e8:	f7f2 f9a0 	bl	8000b2c <__aeabi_dcmplt>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d100      	bne.n	800e7f4 <MAP_setWallCut+0x2f8>
					break;
 800e7f2:	e0ab      	b.n	800e94c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800e7f4:	4b13      	ldr	r3, [pc, #76]	; (800e844 <MAP_setWallCut+0x348>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7f1 fecd 	bl	8000598 <__aeabi_f2d>
 800e7fe:	f04f 0200 	mov.w	r2, #0
 800e802:	4b14      	ldr	r3, [pc, #80]	; (800e854 <MAP_setWallCut+0x358>)
 800e804:	f7f1 fd6a 	bl	80002dc <__adddf3>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4610      	mov	r0, r2
 800e80e:	4619      	mov	r1, r3
 800e810:	f7f2 f9f2 	bl	8000bf8 <__aeabi_d2uiz>
 800e814:	4603      	mov	r3, r0
 800e816:	b2db      	uxtb	r3, r3
 800e818:	4618      	mov	r0, r3
 800e81a:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <MAP_setWallCut+0x350>)
 800e81c:	edd3 7a00 	vldr	s15, [r3]
 800e820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e824:	edc7 7a00 	vstr	s15, [r7]
 800e828:	783b      	ldrb	r3, [r7, #0]
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	4619      	mov	r1, r3
 800e82e:	4a08      	ldr	r2, [pc, #32]	; (800e850 <MAP_setWallCut+0x354>)
 800e830:	0143      	lsls	r3, r0, #5
 800e832:	4413      	add	r3, r2
 800e834:	440b      	add	r3, r1
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f003 0308 	and.w	r3, r3, #8
 800e83c:	73bb      	strb	r3, [r7, #14]
					break;
 800e83e:	e085      	b.n	800e94c <MAP_setWallCut+0x450>
 800e840:	2000c284 	.word	0x2000c284
 800e844:	2000e344 	.word	0x2000e344
 800e848:	3fe00000 	.word	0x3fe00000
 800e84c:	2000c288 	.word	0x2000c288
 800e850:	20000854 	.word	0x20000854
 800e854:	3ff80000 	.word	0x3ff80000
 800e858:	40400000 	.word	0x40400000
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800e85c:	4bb6      	ldr	r3, [pc, #728]	; (800eb38 <MAP_setWallCut+0x63c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	f7f1 fe99 	bl	8000598 <__aeabi_f2d>
 800e866:	f04f 0200 	mov.w	r2, #0
 800e86a:	4bb4      	ldr	r3, [pc, #720]	; (800eb3c <MAP_setWallCut+0x640>)
 800e86c:	f7f1 fd36 	bl	80002dc <__adddf3>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	4610      	mov	r0, r2
 800e876:	4619      	mov	r1, r3
 800e878:	f04f 0200 	mov.w	r2, #0
 800e87c:	4bb0      	ldr	r3, [pc, #704]	; (800eb40 <MAP_setWallCut+0x644>)
 800e87e:	f7f2 f955 	bl	8000b2c <__aeabi_dcmplt>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d024      	beq.n	800e8d2 <MAP_setWallCut+0x3d6>
 800e888:	4bae      	ldr	r3, [pc, #696]	; (800eb44 <MAP_setWallCut+0x648>)
 800e88a:	edd3 7a00 	vldr	s15, [r3]
 800e88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e892:	edc7 7a00 	vstr	s15, [r7]
 800e896:	783b      	ldrb	r3, [r7, #0]
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	461c      	mov	r4, r3
 800e89c:	4ba6      	ldr	r3, [pc, #664]	; (800eb38 <MAP_setWallCut+0x63c>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7f1 fe79 	bl	8000598 <__aeabi_f2d>
 800e8a6:	f04f 0200 	mov.w	r2, #0
 800e8aa:	4ba4      	ldr	r3, [pc, #656]	; (800eb3c <MAP_setWallCut+0x640>)
 800e8ac:	f7f1 fd16 	bl	80002dc <__adddf3>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	f7f2 f99e 	bl	8000bf8 <__aeabi_d2uiz>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4aa1      	ldr	r2, [pc, #644]	; (800eb48 <MAP_setWallCut+0x64c>)
 800e8c4:	0163      	lsls	r3, r4, #5
 800e8c6:	4413      	add	r3, r2
 800e8c8:	440b      	add	r3, r1
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800e8d2:	4b99      	ldr	r3, [pc, #612]	; (800eb38 <MAP_setWallCut+0x63c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7f1 fe5e 	bl	8000598 <__aeabi_f2d>
 800e8dc:	f04f 0200 	mov.w	r2, #0
 800e8e0:	4b9a      	ldr	r3, [pc, #616]	; (800eb4c <MAP_setWallCut+0x650>)
 800e8e2:	f7f1 fcfb 	bl	80002dc <__adddf3>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	f04f 0200 	mov.w	r2, #0
 800e8f2:	4b93      	ldr	r3, [pc, #588]	; (800eb40 <MAP_setWallCut+0x644>)
 800e8f4:	f7f2 f91a 	bl	8000b2c <__aeabi_dcmplt>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d100      	bne.n	800e900 <MAP_setWallCut+0x404>
					break;
 800e8fe:	e024      	b.n	800e94a <MAP_setWallCut+0x44e>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800e900:	4b90      	ldr	r3, [pc, #576]	; (800eb44 <MAP_setWallCut+0x648>)
 800e902:	edd3 7a00 	vldr	s15, [r3]
 800e906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e90a:	edc7 7a00 	vstr	s15, [r7]
 800e90e:	783b      	ldrb	r3, [r7, #0]
 800e910:	b2db      	uxtb	r3, r3
 800e912:	461c      	mov	r4, r3
 800e914:	4b88      	ldr	r3, [pc, #544]	; (800eb38 <MAP_setWallCut+0x63c>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f1 fe3d 	bl	8000598 <__aeabi_f2d>
 800e91e:	f04f 0200 	mov.w	r2, #0
 800e922:	4b8a      	ldr	r3, [pc, #552]	; (800eb4c <MAP_setWallCut+0x650>)
 800e924:	f7f1 fcda 	bl	80002dc <__adddf3>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4610      	mov	r0, r2
 800e92e:	4619      	mov	r1, r3
 800e930:	f7f2 f962 	bl	8000bf8 <__aeabi_d2uiz>
 800e934:	4603      	mov	r3, r0
 800e936:	b2db      	uxtb	r3, r3
 800e938:	4619      	mov	r1, r3
 800e93a:	4a83      	ldr	r2, [pc, #524]	; (800eb48 <MAP_setWallCut+0x64c>)
 800e93c:	0163      	lsls	r3, r4, #5
 800e93e:	4413      	add	r3, r2
 800e940:	440b      	add	r3, r1
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	f003 0301 	and.w	r3, r3, #1
 800e948:	73bb      	strb	r3, [r7, #14]
					break;
 800e94a:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800e94c:	7bfb      	ldrb	r3, [r7, #15]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d107      	bne.n	800e962 <MAP_setWallCut+0x466>
 800e952:	7bfb      	ldrb	r3, [r7, #15]
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8224 	beq.w	800eda2 <MAP_setWallCut+0x8a6>
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 8220 	beq.w	800eda2 <MAP_setWallCut+0x8a6>
				MOT_setWallEdgeType( MOT_WALL_EDGE_RIGHT );		// 壁切れ補正を実施する
 800e962:	2001      	movs	r0, #1
 800e964:	f7fe fd6a 	bl	800d43c <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800e968:	2301      	movs	r3, #1
 800e96a:	737b      	strb	r3, [r7, #13]
			break;
 800e96c:	e219      	b.n	800eda2 <MAP_setWallCut+0x8a6>
			switch( s_PosDir ){
 800e96e:	4b78      	ldr	r3, [pc, #480]	; (800eb50 <MAP_setWallCut+0x654>)
 800e970:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e974:	2b06      	cmp	r3, #6
 800e976:	f200 8203 	bhi.w	800ed80 <MAP_setWallCut+0x884>
 800e97a:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <MAP_setWallCut+0x484>)
 800e97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e980:	0800e99d 	.word	0x0800e99d
 800e984:	0800ed81 	.word	0x0800ed81
 800e988:	0800ea91 	.word	0x0800ea91
 800e98c:	0800ed81 	.word	0x0800ed81
 800e990:	0800eba1 	.word	0x0800eba1
 800e994:	0800ed81 	.word	0x0800ed81
 800e998:	0800ec91 	.word	0x0800ec91
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800e99c:	4b69      	ldr	r3, [pc, #420]	; (800eb44 <MAP_setWallCut+0x648>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f1 fdf9 	bl	8000598 <__aeabi_f2d>
 800e9a6:	f04f 0200 	mov.w	r2, #0
 800e9aa:	4b64      	ldr	r3, [pc, #400]	; (800eb3c <MAP_setWallCut+0x640>)
 800e9ac:	f7f1 fc94 	bl	80002d8 <__aeabi_dsub>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	f04f 0200 	mov.w	r2, #0
 800e9bc:	f04f 0300 	mov.w	r3, #0
 800e9c0:	f7f2 f8d2 	bl	8000b68 <__aeabi_dcmpgt>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d024      	beq.n	800ea14 <MAP_setWallCut+0x518>
 800e9ca:	4b5e      	ldr	r3, [pc, #376]	; (800eb44 <MAP_setWallCut+0x648>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f1 fde2 	bl	8000598 <__aeabi_f2d>
 800e9d4:	f04f 0200 	mov.w	r2, #0
 800e9d8:	4b58      	ldr	r3, [pc, #352]	; (800eb3c <MAP_setWallCut+0x640>)
 800e9da:	f7f1 fc7d 	bl	80002d8 <__aeabi_dsub>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	f7f2 f907 	bl	8000bf8 <__aeabi_d2uiz>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	4b51      	ldr	r3, [pc, #324]	; (800eb38 <MAP_setWallCut+0x63c>)
 800e9f2:	edd3 7a00 	vldr	s15, [r3]
 800e9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9fa:	edc7 7a00 	vstr	s15, [r7]
 800e9fe:	783b      	ldrb	r3, [r7, #0]
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	4619      	mov	r1, r3
 800ea04:	4a50      	ldr	r2, [pc, #320]	; (800eb48 <MAP_setWallCut+0x64c>)
 800ea06:	0143      	lsls	r3, r0, #5
 800ea08:	4413      	add	r3, r2
 800ea0a:	440b      	add	r3, r1
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	f003 0308 	and.w	r3, r3, #8
 800ea12:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800ea14:	4b4b      	ldr	r3, [pc, #300]	; (800eb44 <MAP_setWallCut+0x648>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7f1 fdbd 	bl	8000598 <__aeabi_f2d>
 800ea1e:	f04f 0200 	mov.w	r2, #0
 800ea22:	4b4a      	ldr	r3, [pc, #296]	; (800eb4c <MAP_setWallCut+0x650>)
 800ea24:	f7f1 fc58 	bl	80002d8 <__aeabi_dsub>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	4619      	mov	r1, r3
 800ea30:	f04f 0200 	mov.w	r2, #0
 800ea34:	f04f 0300 	mov.w	r3, #0
 800ea38:	f7f2 f896 	bl	8000b68 <__aeabi_dcmpgt>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d100      	bne.n	800ea44 <MAP_setWallCut+0x548>
					break;
 800ea42:	e19d      	b.n	800ed80 <MAP_setWallCut+0x884>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800ea44:	4b3f      	ldr	r3, [pc, #252]	; (800eb44 <MAP_setWallCut+0x648>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f1 fda5 	bl	8000598 <__aeabi_f2d>
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	4b3e      	ldr	r3, [pc, #248]	; (800eb4c <MAP_setWallCut+0x650>)
 800ea54:	f7f1 fc40 	bl	80002d8 <__aeabi_dsub>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	4619      	mov	r1, r3
 800ea60:	f7f2 f8ca 	bl	8000bf8 <__aeabi_d2uiz>
 800ea64:	4603      	mov	r3, r0
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	4618      	mov	r0, r3
 800ea6a:	4b33      	ldr	r3, [pc, #204]	; (800eb38 <MAP_setWallCut+0x63c>)
 800ea6c:	edd3 7a00 	vldr	s15, [r3]
 800ea70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea74:	edc7 7a00 	vstr	s15, [r7]
 800ea78:	783b      	ldrb	r3, [r7, #0]
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4a32      	ldr	r2, [pc, #200]	; (800eb48 <MAP_setWallCut+0x64c>)
 800ea80:	0143      	lsls	r3, r0, #5
 800ea82:	4413      	add	r3, r2
 800ea84:	440b      	add	r3, r1
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 0308 	and.w	r3, r3, #8
 800ea8c:	73bb      	strb	r3, [r7, #14]
					break;
 800ea8e:	e177      	b.n	800ed80 <MAP_setWallCut+0x884>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800ea90:	4b29      	ldr	r3, [pc, #164]	; (800eb38 <MAP_setWallCut+0x63c>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f1 fd7f 	bl	8000598 <__aeabi_f2d>
 800ea9a:	f04f 0200 	mov.w	r2, #0
 800ea9e:	4b27      	ldr	r3, [pc, #156]	; (800eb3c <MAP_setWallCut+0x640>)
 800eaa0:	f7f1 fc1a 	bl	80002d8 <__aeabi_dsub>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	4619      	mov	r1, r3
 800eaac:	f04f 0200 	mov.w	r2, #0
 800eab0:	f04f 0300 	mov.w	r3, #0
 800eab4:	f7f2 f858 	bl	8000b68 <__aeabi_dcmpgt>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d024      	beq.n	800eb08 <MAP_setWallCut+0x60c>
 800eabe:	4b21      	ldr	r3, [pc, #132]	; (800eb44 <MAP_setWallCut+0x648>)
 800eac0:	edd3 7a00 	vldr	s15, [r3]
 800eac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eac8:	edc7 7a00 	vstr	s15, [r7]
 800eacc:	783b      	ldrb	r3, [r7, #0]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	461c      	mov	r4, r3
 800ead2:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <MAP_setWallCut+0x63c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f1 fd5e 	bl	8000598 <__aeabi_f2d>
 800eadc:	f04f 0200 	mov.w	r2, #0
 800eae0:	4b16      	ldr	r3, [pc, #88]	; (800eb3c <MAP_setWallCut+0x640>)
 800eae2:	f7f1 fbf9 	bl	80002d8 <__aeabi_dsub>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4610      	mov	r0, r2
 800eaec:	4619      	mov	r1, r3
 800eaee:	f7f2 f883 	bl	8000bf8 <__aeabi_d2uiz>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4a13      	ldr	r2, [pc, #76]	; (800eb48 <MAP_setWallCut+0x64c>)
 800eafa:	0163      	lsls	r3, r4, #5
 800eafc:	4413      	add	r3, r2
 800eafe:	440b      	add	r3, r1
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800eb08:	4b0b      	ldr	r3, [pc, #44]	; (800eb38 <MAP_setWallCut+0x63c>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7f1 fd43 	bl	8000598 <__aeabi_f2d>
 800eb12:	f04f 0200 	mov.w	r2, #0
 800eb16:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <MAP_setWallCut+0x650>)
 800eb18:	f7f1 fbde 	bl	80002d8 <__aeabi_dsub>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	4610      	mov	r0, r2
 800eb22:	4619      	mov	r1, r3
 800eb24:	f04f 0200 	mov.w	r2, #0
 800eb28:	f04f 0300 	mov.w	r3, #0
 800eb2c:	f7f2 f81c 	bl	8000b68 <__aeabi_dcmpgt>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10e      	bne.n	800eb54 <MAP_setWallCut+0x658>
					break;
 800eb36:	e123      	b.n	800ed80 <MAP_setWallCut+0x884>
 800eb38:	2000c288 	.word	0x2000c288
 800eb3c:	3fe00000 	.word	0x3fe00000
 800eb40:	40400000 	.word	0x40400000
 800eb44:	2000e344 	.word	0x2000e344
 800eb48:	20000854 	.word	0x20000854
 800eb4c:	3ff80000 	.word	0x3ff80000
 800eb50:	2000c284 	.word	0x2000c284
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800eb54:	4b97      	ldr	r3, [pc, #604]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800eb56:	edd3 7a00 	vldr	s15, [r3]
 800eb5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb5e:	edc7 7a00 	vstr	s15, [r7]
 800eb62:	783b      	ldrb	r3, [r7, #0]
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	461c      	mov	r4, r3
 800eb68:	4b93      	ldr	r3, [pc, #588]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7f1 fd13 	bl	8000598 <__aeabi_f2d>
 800eb72:	f04f 0200 	mov.w	r2, #0
 800eb76:	4b91      	ldr	r3, [pc, #580]	; (800edbc <MAP_setWallCut+0x8c0>)
 800eb78:	f7f1 fbae 	bl	80002d8 <__aeabi_dsub>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	460b      	mov	r3, r1
 800eb80:	4610      	mov	r0, r2
 800eb82:	4619      	mov	r1, r3
 800eb84:	f7f2 f838 	bl	8000bf8 <__aeabi_d2uiz>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4a8c      	ldr	r2, [pc, #560]	; (800edc0 <MAP_setWallCut+0x8c4>)
 800eb90:	0163      	lsls	r3, r4, #5
 800eb92:	4413      	add	r3, r2
 800eb94:	440b      	add	r3, r1
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	73bb      	strb	r3, [r7, #14]
					break;
 800eb9e:	e0ef      	b.n	800ed80 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800eba0:	4b84      	ldr	r3, [pc, #528]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7f1 fcf7 	bl	8000598 <__aeabi_f2d>
 800ebaa:	f04f 0200 	mov.w	r2, #0
 800ebae:	4b85      	ldr	r3, [pc, #532]	; (800edc4 <MAP_setWallCut+0x8c8>)
 800ebb0:	f7f1 fb94 	bl	80002dc <__adddf3>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4619      	mov	r1, r3
 800ebbc:	f04f 0200 	mov.w	r2, #0
 800ebc0:	4b81      	ldr	r3, [pc, #516]	; (800edc8 <MAP_setWallCut+0x8cc>)
 800ebc2:	f7f1 ffb3 	bl	8000b2c <__aeabi_dcmplt>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d024      	beq.n	800ec16 <MAP_setWallCut+0x71a>
 800ebcc:	4b79      	ldr	r3, [pc, #484]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7f1 fce1 	bl	8000598 <__aeabi_f2d>
 800ebd6:	f04f 0200 	mov.w	r2, #0
 800ebda:	4b7a      	ldr	r3, [pc, #488]	; (800edc4 <MAP_setWallCut+0x8c8>)
 800ebdc:	f7f1 fb7e 	bl	80002dc <__adddf3>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	f7f2 f806 	bl	8000bf8 <__aeabi_d2uiz>
 800ebec:	4603      	mov	r3, r0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	4b71      	ldr	r3, [pc, #452]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ebf4:	edd3 7a00 	vldr	s15, [r3]
 800ebf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebfc:	edc7 7a00 	vstr	s15, [r7]
 800ec00:	783b      	ldrb	r3, [r7, #0]
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	4619      	mov	r1, r3
 800ec06:	4a6e      	ldr	r2, [pc, #440]	; (800edc0 <MAP_setWallCut+0x8c4>)
 800ec08:	0143      	lsls	r3, r0, #5
 800ec0a:	4413      	add	r3, r2
 800ec0c:	440b      	add	r3, r1
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	f003 0302 	and.w	r3, r3, #2
 800ec14:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800ec16:	4b67      	ldr	r3, [pc, #412]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7f1 fcbc 	bl	8000598 <__aeabi_f2d>
 800ec20:	f04f 0200 	mov.w	r2, #0
 800ec24:	4b65      	ldr	r3, [pc, #404]	; (800edbc <MAP_setWallCut+0x8c0>)
 800ec26:	f7f1 fb59 	bl	80002dc <__adddf3>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4610      	mov	r0, r2
 800ec30:	4619      	mov	r1, r3
 800ec32:	f04f 0200 	mov.w	r2, #0
 800ec36:	4b64      	ldr	r3, [pc, #400]	; (800edc8 <MAP_setWallCut+0x8cc>)
 800ec38:	f7f1 ff78 	bl	8000b2c <__aeabi_dcmplt>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d100      	bne.n	800ec44 <MAP_setWallCut+0x748>
					break;
 800ec42:	e09d      	b.n	800ed80 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800ec44:	4b5b      	ldr	r3, [pc, #364]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f1 fca5 	bl	8000598 <__aeabi_f2d>
 800ec4e:	f04f 0200 	mov.w	r2, #0
 800ec52:	4b5a      	ldr	r3, [pc, #360]	; (800edbc <MAP_setWallCut+0x8c0>)
 800ec54:	f7f1 fb42 	bl	80002dc <__adddf3>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4610      	mov	r0, r2
 800ec5e:	4619      	mov	r1, r3
 800ec60:	f7f1 ffca 	bl	8000bf8 <__aeabi_d2uiz>
 800ec64:	4603      	mov	r3, r0
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	4618      	mov	r0, r3
 800ec6a:	4b53      	ldr	r3, [pc, #332]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ec6c:	edd3 7a00 	vldr	s15, [r3]
 800ec70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec74:	edc7 7a00 	vstr	s15, [r7]
 800ec78:	783b      	ldrb	r3, [r7, #0]
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4a50      	ldr	r2, [pc, #320]	; (800edc0 <MAP_setWallCut+0x8c4>)
 800ec80:	0143      	lsls	r3, r0, #5
 800ec82:	4413      	add	r3, r2
 800ec84:	440b      	add	r3, r1
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	f003 0302 	and.w	r3, r3, #2
 800ec8c:	73bb      	strb	r3, [r7, #14]
					break;
 800ec8e:	e077      	b.n	800ed80 <MAP_setWallCut+0x884>
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800ec90:	4b49      	ldr	r3, [pc, #292]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f1 fc7f 	bl	8000598 <__aeabi_f2d>
 800ec9a:	f04f 0200 	mov.w	r2, #0
 800ec9e:	4b49      	ldr	r3, [pc, #292]	; (800edc4 <MAP_setWallCut+0x8c8>)
 800eca0:	f7f1 fb1c 	bl	80002dc <__adddf3>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	4610      	mov	r0, r2
 800ecaa:	4619      	mov	r1, r3
 800ecac:	f04f 0200 	mov.w	r2, #0
 800ecb0:	4b45      	ldr	r3, [pc, #276]	; (800edc8 <MAP_setWallCut+0x8cc>)
 800ecb2:	f7f1 ff3b 	bl	8000b2c <__aeabi_dcmplt>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d024      	beq.n	800ed06 <MAP_setWallCut+0x80a>
 800ecbc:	4b3d      	ldr	r3, [pc, #244]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800ecbe:	edd3 7a00 	vldr	s15, [r3]
 800ecc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecc6:	edc7 7a00 	vstr	s15, [r7]
 800ecca:	783b      	ldrb	r3, [r7, #0]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	461c      	mov	r4, r3
 800ecd0:	4b39      	ldr	r3, [pc, #228]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f1 fc5f 	bl	8000598 <__aeabi_f2d>
 800ecda:	f04f 0200 	mov.w	r2, #0
 800ecde:	4b39      	ldr	r3, [pc, #228]	; (800edc4 <MAP_setWallCut+0x8c8>)
 800ece0:	f7f1 fafc 	bl	80002dc <__adddf3>
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	4610      	mov	r0, r2
 800ecea:	4619      	mov	r1, r3
 800ecec:	f7f1 ff84 	bl	8000bf8 <__aeabi_d2uiz>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4a32      	ldr	r2, [pc, #200]	; (800edc0 <MAP_setWallCut+0x8c4>)
 800ecf8:	0163      	lsls	r3, r4, #5
 800ecfa:	4413      	add	r3, r2
 800ecfc:	440b      	add	r3, r1
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800ed06:	4b2c      	ldr	r3, [pc, #176]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f1 fc44 	bl	8000598 <__aeabi_f2d>
 800ed10:	f04f 0200 	mov.w	r2, #0
 800ed14:	4b29      	ldr	r3, [pc, #164]	; (800edbc <MAP_setWallCut+0x8c0>)
 800ed16:	f7f1 fae1 	bl	80002dc <__adddf3>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4610      	mov	r0, r2
 800ed20:	4619      	mov	r1, r3
 800ed22:	f04f 0200 	mov.w	r2, #0
 800ed26:	4b28      	ldr	r3, [pc, #160]	; (800edc8 <MAP_setWallCut+0x8cc>)
 800ed28:	f7f1 ff00 	bl	8000b2c <__aeabi_dcmplt>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d100      	bne.n	800ed34 <MAP_setWallCut+0x838>
					break;
 800ed32:	e024      	b.n	800ed7e <MAP_setWallCut+0x882>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800ed34:	4b1f      	ldr	r3, [pc, #124]	; (800edb4 <MAP_setWallCut+0x8b8>)
 800ed36:	edd3 7a00 	vldr	s15, [r3]
 800ed3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed3e:	edc7 7a00 	vstr	s15, [r7]
 800ed42:	783b      	ldrb	r3, [r7, #0]
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	461c      	mov	r4, r3
 800ed48:	4b1b      	ldr	r3, [pc, #108]	; (800edb8 <MAP_setWallCut+0x8bc>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f1 fc23 	bl	8000598 <__aeabi_f2d>
 800ed52:	f04f 0200 	mov.w	r2, #0
 800ed56:	4b19      	ldr	r3, [pc, #100]	; (800edbc <MAP_setWallCut+0x8c0>)
 800ed58:	f7f1 fac0 	bl	80002dc <__adddf3>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4610      	mov	r0, r2
 800ed62:	4619      	mov	r1, r3
 800ed64:	f7f1 ff48 	bl	8000bf8 <__aeabi_d2uiz>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4a14      	ldr	r2, [pc, #80]	; (800edc0 <MAP_setWallCut+0x8c4>)
 800ed70:	0163      	lsls	r3, r4, #5
 800ed72:	4413      	add	r3, r2
 800ed74:	440b      	add	r3, r1
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	f003 0304 	and.w	r3, r3, #4
 800ed7c:	73bb      	strb	r3, [r7, #14]
					break;
 800ed7e:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d105      	bne.n	800ed92 <MAP_setWallCut+0x896>
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00c      	beq.n	800eda6 <MAP_setWallCut+0x8aa>
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d009      	beq.n	800eda6 <MAP_setWallCut+0x8aa>
				MOT_setWallEdgeType( MOT_WALL_EDGE_LEFT );		// 壁切れ補正を実施する
 800ed92:	2002      	movs	r0, #2
 800ed94:	f7fe fb52 	bl	800d43c <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	737b      	strb	r3, [r7, #13]
			break;
 800ed9c:	e003      	b.n	800eda6 <MAP_setWallCut+0x8aa>
			break;
 800ed9e:	bf00      	nop
 800eda0:	e002      	b.n	800eda8 <MAP_setWallCut+0x8ac>
			break;
 800eda2:	bf00      	nop
 800eda4:	e000      	b.n	800eda8 <MAP_setWallCut+0x8ac>
			break;
 800eda6:	bf00      	nop
	}
	
	return bl_wallCut;
 800eda8:	7b7b      	ldrb	r3, [r7, #13]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd90      	pop	{r4, r7, pc}
 800edb2:	bf00      	nop
 800edb4:	2000e344 	.word	0x2000e344
 800edb8:	2000c288 	.word	0x2000c288
 800edbc:	3ff80000 	.word	0x3ff80000
 800edc0:	20000854 	.word	0x20000854
 800edc4:	3fe00000 	.word	0x3fe00000
 800edc8:	40400000 	.word	0x40400000

0800edcc <MAP_setCmdPos>:

void MAP_setCmdPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	4603      	mov	r3, r0
 800edd4:	71fb      	strb	r3, [r7, #7]
 800edd6:	460b      	mov	r3, r1
 800edd8:	71bb      	strb	r3, [r7, #6]
 800edda:	4613      	mov	r3, r2
 800eddc:	717b      	strb	r3, [r7, #5]
	f_PosX   = (float)uc_x;
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	ee07 3a90 	vmov	s15, r3
 800ede4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ede8:	4b0b      	ldr	r3, [pc, #44]	; (800ee18 <MAP_setCmdPos+0x4c>)
 800edea:	edc3 7a00 	vstr	s15, [r3]
	f_PosX   = (float)uc_y;
 800edee:	79bb      	ldrb	r3, [r7, #6]
 800edf0:	ee07 3a90 	vmov	s15, r3
 800edf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edf8:	4b07      	ldr	r3, [pc, #28]	; (800ee18 <MAP_setCmdPos+0x4c>)
 800edfa:	edc3 7a00 	vstr	s15, [r3]
	s_PosDir = (int16_t)(en_dir * 2);	// 進行方向（[0]北 [1]北東 [2]東 [3]南東 [4]南 [5]南西 [6]西 [7]北西 ）、2倍すると丁度値が合致する
 800edfe:	797b      	ldrb	r3, [r7, #5]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	b21a      	sxth	r2, r3
 800ee08:	4b04      	ldr	r3, [pc, #16]	; (800ee1c <MAP_setCmdPos+0x50>)
 800ee0a:	801a      	strh	r2, [r3, #0]
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	2000c288 	.word	0x2000c288
 800ee1c:	2000c284 	.word	0x2000c284

0800ee20 <MAP_showCmdLog>:

void MAP_showCmdLog( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	80fb      	strh	r3, [r7, #6]
	
	/* 超信地旋回コマンド */
	while(1){
		
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800ee2a:	88f9      	ldrh	r1, [r7, #6]
 800ee2c:	88fb      	ldrh	r3, [r7, #6]
 800ee2e:	4a1e      	ldr	r2, [pc, #120]	; (800eea8 <MAP_showCmdLog+0x88>)
 800ee30:	5cd3      	ldrb	r3, [r2, r3]
 800ee32:	461a      	mov	r2, r3
 800ee34:	481d      	ldr	r0, [pc, #116]	; (800eeac <MAP_showCmdLog+0x8c>)
 800ee36:	f008 fa1f 	bl	8017278 <iprintf>
		if( dcom[i] == CEND ) break;
 800ee3a:	88fb      	ldrh	r3, [r7, #6]
 800ee3c:	4a1a      	ldr	r2, [pc, #104]	; (800eea8 <MAP_showCmdLog+0x88>)
 800ee3e:	5cd3      	ldrb	r3, [r2, r3]
 800ee40:	2bfa      	cmp	r3, #250	; 0xfa
 800ee42:	d003      	beq.n	800ee4c <MAP_showCmdLog+0x2c>
		i++;
 800ee44:	88fb      	ldrh	r3, [r7, #6]
 800ee46:	3301      	adds	r3, #1
 800ee48:	80fb      	strh	r3, [r7, #6]
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800ee4a:	e7ee      	b.n	800ee2a <MAP_showCmdLog+0xa>
		if( dcom[i] == CEND ) break;
 800ee4c:	bf00      	nop
	}
	i=0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	80fb      	strh	r3, [r7, #6]
	
	/* スラロームコマンド */
	while(1){
		
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800ee52:	88f9      	ldrh	r1, [r7, #6]
 800ee54:	88fb      	ldrh	r3, [r7, #6]
 800ee56:	4a16      	ldr	r2, [pc, #88]	; (800eeb0 <MAP_showCmdLog+0x90>)
 800ee58:	5cd3      	ldrb	r3, [r2, r3]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	4815      	ldr	r0, [pc, #84]	; (800eeb4 <MAP_showCmdLog+0x94>)
 800ee5e:	f008 fa0b 	bl	8017278 <iprintf>
		if( scom[i] == CEND ) break;
 800ee62:	88fb      	ldrh	r3, [r7, #6]
 800ee64:	4a12      	ldr	r2, [pc, #72]	; (800eeb0 <MAP_showCmdLog+0x90>)
 800ee66:	5cd3      	ldrb	r3, [r2, r3]
 800ee68:	2bfa      	cmp	r3, #250	; 0xfa
 800ee6a:	d003      	beq.n	800ee74 <MAP_showCmdLog+0x54>
		i++;
 800ee6c:	88fb      	ldrh	r3, [r7, #6]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	80fb      	strh	r3, [r7, #6]
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800ee72:	e7ee      	b.n	800ee52 <MAP_showCmdLog+0x32>
		if( scom[i] == CEND ) break;
 800ee74:	bf00      	nop
	}
	i=0;
 800ee76:	2300      	movs	r3, #0
 800ee78:	80fb      	strh	r3, [r7, #6]

	/* 斜め走行コマンド */
	while(1){
		
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800ee7a:	88f9      	ldrh	r1, [r7, #6]
 800ee7c:	88fb      	ldrh	r3, [r7, #6]
 800ee7e:	4a0e      	ldr	r2, [pc, #56]	; (800eeb8 <MAP_showCmdLog+0x98>)
 800ee80:	5cd3      	ldrb	r3, [r2, r3]
 800ee82:	461a      	mov	r2, r3
 800ee84:	480d      	ldr	r0, [pc, #52]	; (800eebc <MAP_showCmdLog+0x9c>)
 800ee86:	f008 f9f7 	bl	8017278 <iprintf>
		if( tcom[i] == CEND ) break;
 800ee8a:	88fb      	ldrh	r3, [r7, #6]
 800ee8c:	4a0a      	ldr	r2, [pc, #40]	; (800eeb8 <MAP_showCmdLog+0x98>)
 800ee8e:	5cd3      	ldrb	r3, [r2, r3]
 800ee90:	2bfa      	cmp	r3, #250	; 0xfa
 800ee92:	d003      	beq.n	800ee9c <MAP_showCmdLog+0x7c>
		i++;
 800ee94:	88fb      	ldrh	r3, [r7, #6]
 800ee96:	3301      	adds	r3, #1
 800ee98:	80fb      	strh	r3, [r7, #6]
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800ee9a:	e7ee      	b.n	800ee7a <MAP_showCmdLog+0x5a>
		if( tcom[i] == CEND ) break;
 800ee9c:	bf00      	nop
	}
}
 800ee9e:	bf00      	nop
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	2000b284 	.word	0x2000b284
 800eeac:	0801c4cc 	.word	0x0801c4cc
 800eeb0:	2000c28c 	.word	0x2000c28c
 800eeb4:	0801c4e4 	.word	0x0801c4e4
 800eeb8:	2000d2c8 	.word	0x2000d2c8
 800eebc:	0801c4fc 	.word	0x0801c4fc

0800eec0 <MAP_makeCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
){
 800eec0:	b490      	push	{r4, r7}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	4611      	mov	r1, r2
 800eecc:	461a      	mov	r2, r3
 800eece:	4623      	mov	r3, r4
 800eed0:	71fb      	strb	r3, [r7, #7]
 800eed2:	4603      	mov	r3, r0
 800eed4:	71bb      	strb	r3, [r7, #6]
 800eed6:	460b      	mov	r3, r1
 800eed8:	717b      	strb	r3, [r7, #5]
 800eeda:	4613      	mov	r3, r2
 800eedc:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop
	
	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while(1){	
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800eee6:	79ba      	ldrb	r2, [r7, #6]
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	499f      	ldr	r1, [pc, #636]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800eeec:	0152      	lsls	r2, r2, #5
 800eeee:	4413      	add	r3, r2
 800eef0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	823b      	strh	r3, [r7, #16]
		if (en_staDir == NORTH){
 800eef8:	797b      	ldrb	r3, [r7, #5]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d164      	bne.n	800efc8 <MAP_makeCmdList+0x108>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800eefe:	79ba      	ldrb	r2, [r7, #6]
 800ef00:	79fb      	ldrb	r3, [r7, #7]
 800ef02:	499a      	ldr	r1, [pc, #616]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800ef04:	0152      	lsls	r2, r2, #5
 800ef06:	440a      	add	r2, r1
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f003 0311 	and.w	r3, r3, #17
 800ef10:	2b10      	cmp	r3, #16
 800ef12:	d10d      	bne.n	800ef30 <MAP_makeCmdList+0x70>
 800ef14:	79bb      	ldrb	r3, [r7, #6]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	4993      	ldr	r1, [pc, #588]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800ef1c:	0152      	lsls	r2, r2, #5
 800ef1e:	4413      	add	r3, r2
 800ef20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef24:	8a3a      	ldrh	r2, [r7, #16]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d102      	bne.n	800ef30 <MAP_makeCmdList+0x70>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	74fb      	strb	r3, [r7, #19]
 800ef2e:	e187      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800ef30:	79ba      	ldrb	r2, [r7, #6]
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	498d      	ldr	r1, [pc, #564]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800ef36:	0152      	lsls	r2, r2, #5
 800ef38:	440a      	add	r2, r1
 800ef3a:	4413      	add	r3, r2
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ef42:	2b20      	cmp	r3, #32
 800ef44:	d10d      	bne.n	800ef62 <MAP_makeCmdList+0xa2>
 800ef46:	79ba      	ldrb	r2, [r7, #6]
 800ef48:	79fb      	ldrb	r3, [r7, #7]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	4986      	ldr	r1, [pc, #536]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800ef4e:	0152      	lsls	r2, r2, #5
 800ef50:	4413      	add	r3, r2
 800ef52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef56:	8a3a      	ldrh	r2, [r7, #16]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d102      	bne.n	800ef62 <MAP_makeCmdList+0xa2>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	74fb      	strb	r3, [r7, #19]
 800ef60:	e16e      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800ef62:	79ba      	ldrb	r2, [r7, #6]
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	4981      	ldr	r1, [pc, #516]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800ef68:	0152      	lsls	r2, r2, #5
 800ef6a:	440a      	add	r2, r1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ef74:	2b80      	cmp	r3, #128	; 0x80
 800ef76:	d10d      	bne.n	800ef94 <MAP_makeCmdList+0xd4>
 800ef78:	79ba      	ldrb	r2, [r7, #6]
 800ef7a:	79fb      	ldrb	r3, [r7, #7]
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	497a      	ldr	r1, [pc, #488]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800ef80:	0152      	lsls	r2, r2, #5
 800ef82:	4413      	add	r3, r2
 800ef84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef88:	8a3a      	ldrh	r2, [r7, #16]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d102      	bne.n	800ef94 <MAP_makeCmdList+0xd4>
 800ef8e:	2303      	movs	r3, #3
 800ef90:	74fb      	strb	r3, [r7, #19]
 800ef92:	e155      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800ef94:	79ba      	ldrb	r2, [r7, #6]
 800ef96:	79fb      	ldrb	r3, [r7, #7]
 800ef98:	4974      	ldr	r1, [pc, #464]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800ef9a:	0152      	lsls	r2, r2, #5
 800ef9c:	440a      	add	r2, r1
 800ef9e:	4413      	add	r3, r2
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800efa6:	2b40      	cmp	r3, #64	; 0x40
 800efa8:	d10d      	bne.n	800efc6 <MAP_makeCmdList+0x106>
 800efaa:	79bb      	ldrb	r3, [r7, #6]
 800efac:	1e5a      	subs	r2, r3, #1
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	496d      	ldr	r1, [pc, #436]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800efb2:	0152      	lsls	r2, r2, #5
 800efb4:	4413      	add	r3, r2
 800efb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efba:	8a3a      	ldrh	r2, [r7, #16]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d102      	bne.n	800efc6 <MAP_makeCmdList+0x106>
 800efc0:	2302      	movs	r3, #2
 800efc2:	74fb      	strb	r3, [r7, #19]
 800efc4:	e13c      	b.n	800f240 <MAP_makeCmdList+0x380>
			else   while(1);
 800efc6:	e7fe      	b.n	800efc6 <MAP_makeCmdList+0x106>
		}else if (en_staDir == EAST){
 800efc8:	797b      	ldrb	r3, [r7, #5]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d164      	bne.n	800f098 <MAP_makeCmdList+0x1d8>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800efce:	79ba      	ldrb	r2, [r7, #6]
 800efd0:	79fb      	ldrb	r3, [r7, #7]
 800efd2:	4966      	ldr	r1, [pc, #408]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800efd4:	0152      	lsls	r2, r2, #5
 800efd6:	440a      	add	r2, r1
 800efd8:	4413      	add	r3, r2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800efe0:	2b20      	cmp	r3, #32
 800efe2:	d10d      	bne.n	800f000 <MAP_makeCmdList+0x140>
 800efe4:	79ba      	ldrb	r2, [r7, #6]
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	3301      	adds	r3, #1
 800efea:	495f      	ldr	r1, [pc, #380]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800efec:	0152      	lsls	r2, r2, #5
 800efee:	4413      	add	r3, r2
 800eff0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eff4:	8a3a      	ldrh	r2, [r7, #16]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d102      	bne.n	800f000 <MAP_makeCmdList+0x140>
 800effa:	2301      	movs	r3, #1
 800effc:	74fb      	strb	r3, [r7, #19]
 800effe:	e11f      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800f000:	79ba      	ldrb	r2, [r7, #6]
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	4959      	ldr	r1, [pc, #356]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f006:	0152      	lsls	r2, r2, #5
 800f008:	440a      	add	r2, r1
 800f00a:	4413      	add	r3, r2
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	f003 0311 	and.w	r3, r3, #17
 800f012:	2b10      	cmp	r3, #16
 800f014:	d10d      	bne.n	800f032 <MAP_makeCmdList+0x172>
 800f016:	79bb      	ldrb	r3, [r7, #6]
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	79fb      	ldrb	r3, [r7, #7]
 800f01c:	4952      	ldr	r1, [pc, #328]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f01e:	0152      	lsls	r2, r2, #5
 800f020:	4413      	add	r3, r2
 800f022:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f026:	8a3a      	ldrh	r2, [r7, #16]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d102      	bne.n	800f032 <MAP_makeCmdList+0x172>
 800f02c:	2300      	movs	r3, #0
 800f02e:	74fb      	strb	r3, [r7, #19]
 800f030:	e106      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800f032:	79ba      	ldrb	r2, [r7, #6]
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	494d      	ldr	r1, [pc, #308]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f038:	0152      	lsls	r2, r2, #5
 800f03a:	440a      	add	r2, r1
 800f03c:	4413      	add	r3, r2
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f044:	2b40      	cmp	r3, #64	; 0x40
 800f046:	d10d      	bne.n	800f064 <MAP_makeCmdList+0x1a4>
 800f048:	79bb      	ldrb	r3, [r7, #6]
 800f04a:	1e5a      	subs	r2, r3, #1
 800f04c:	79fb      	ldrb	r3, [r7, #7]
 800f04e:	4946      	ldr	r1, [pc, #280]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f050:	0152      	lsls	r2, r2, #5
 800f052:	4413      	add	r3, r2
 800f054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f058:	8a3a      	ldrh	r2, [r7, #16]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d102      	bne.n	800f064 <MAP_makeCmdList+0x1a4>
 800f05e:	2302      	movs	r3, #2
 800f060:	74fb      	strb	r3, [r7, #19]
 800f062:	e0ed      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800f064:	79ba      	ldrb	r2, [r7, #6]
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	4940      	ldr	r1, [pc, #256]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f06a:	0152      	lsls	r2, r2, #5
 800f06c:	440a      	add	r2, r1
 800f06e:	4413      	add	r3, r2
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f076:	2b80      	cmp	r3, #128	; 0x80
 800f078:	d10d      	bne.n	800f096 <MAP_makeCmdList+0x1d6>
 800f07a:	79ba      	ldrb	r2, [r7, #6]
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	3b01      	subs	r3, #1
 800f080:	4939      	ldr	r1, [pc, #228]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f082:	0152      	lsls	r2, r2, #5
 800f084:	4413      	add	r3, r2
 800f086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f08a:	8a3a      	ldrh	r2, [r7, #16]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d102      	bne.n	800f096 <MAP_makeCmdList+0x1d6>
 800f090:	2303      	movs	r3, #3
 800f092:	74fb      	strb	r3, [r7, #19]
 800f094:	e0d4      	b.n	800f240 <MAP_makeCmdList+0x380>
			else   while(1);
 800f096:	e7fe      	b.n	800f096 <MAP_makeCmdList+0x1d6>
		}else if (en_staDir == SOUTH){
 800f098:	797b      	ldrb	r3, [r7, #5]
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d168      	bne.n	800f170 <MAP_makeCmdList+0x2b0>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800f09e:	79ba      	ldrb	r2, [r7, #6]
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	4932      	ldr	r1, [pc, #200]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f0a4:	0152      	lsls	r2, r2, #5
 800f0a6:	440a      	add	r2, r1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f0b0:	2b40      	cmp	r3, #64	; 0x40
 800f0b2:	d10d      	bne.n	800f0d0 <MAP_makeCmdList+0x210>
 800f0b4:	79bb      	ldrb	r3, [r7, #6]
 800f0b6:	1e5a      	subs	r2, r3, #1
 800f0b8:	79fb      	ldrb	r3, [r7, #7]
 800f0ba:	492b      	ldr	r1, [pc, #172]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f0bc:	0152      	lsls	r2, r2, #5
 800f0be:	4413      	add	r3, r2
 800f0c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0c4:	8a3a      	ldrh	r2, [r7, #16]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d102      	bne.n	800f0d0 <MAP_makeCmdList+0x210>
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	74fb      	strb	r3, [r7, #19]
 800f0ce:	e0b7      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800f0d0:	79ba      	ldrb	r2, [r7, #6]
 800f0d2:	79fb      	ldrb	r3, [r7, #7]
 800f0d4:	4925      	ldr	r1, [pc, #148]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f0d6:	0152      	lsls	r2, r2, #5
 800f0d8:	440a      	add	r2, r1
 800f0da:	4413      	add	r3, r2
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f0e2:	2b20      	cmp	r3, #32
 800f0e4:	d10d      	bne.n	800f102 <MAP_makeCmdList+0x242>
 800f0e6:	79ba      	ldrb	r2, [r7, #6]
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	491e      	ldr	r1, [pc, #120]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f0ee:	0152      	lsls	r2, r2, #5
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0f6:	8a3a      	ldrh	r2, [r7, #16]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d102      	bne.n	800f102 <MAP_makeCmdList+0x242>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	74fb      	strb	r3, [r7, #19]
 800f100:	e09e      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800f102:	79ba      	ldrb	r2, [r7, #6]
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	4919      	ldr	r1, [pc, #100]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f108:	0152      	lsls	r2, r2, #5
 800f10a:	440a      	add	r2, r1
 800f10c:	4413      	add	r3, r2
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f114:	2b80      	cmp	r3, #128	; 0x80
 800f116:	d10d      	bne.n	800f134 <MAP_makeCmdList+0x274>
 800f118:	79ba      	ldrb	r2, [r7, #6]
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	4912      	ldr	r1, [pc, #72]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f120:	0152      	lsls	r2, r2, #5
 800f122:	4413      	add	r3, r2
 800f124:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f128:	8a3a      	ldrh	r2, [r7, #16]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d102      	bne.n	800f134 <MAP_makeCmdList+0x274>
 800f12e:	2303      	movs	r3, #3
 800f130:	74fb      	strb	r3, [r7, #19]
 800f132:	e085      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800f134:	79ba      	ldrb	r2, [r7, #6]
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	490c      	ldr	r1, [pc, #48]	; (800f16c <MAP_makeCmdList+0x2ac>)
 800f13a:	0152      	lsls	r2, r2, #5
 800f13c:	440a      	add	r2, r1
 800f13e:	4413      	add	r3, r2
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	f003 0311 	and.w	r3, r3, #17
 800f146:	2b10      	cmp	r3, #16
 800f148:	d10d      	bne.n	800f166 <MAP_makeCmdList+0x2a6>
 800f14a:	79bb      	ldrb	r3, [r7, #6]
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	4905      	ldr	r1, [pc, #20]	; (800f168 <MAP_makeCmdList+0x2a8>)
 800f152:	0152      	lsls	r2, r2, #5
 800f154:	4413      	add	r3, r2
 800f156:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f15a:	8a3a      	ldrh	r2, [r7, #16]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d102      	bne.n	800f166 <MAP_makeCmdList+0x2a6>
 800f160:	2300      	movs	r3, #0
 800f162:	74fb      	strb	r3, [r7, #19]
 800f164:	e06c      	b.n	800f240 <MAP_makeCmdList+0x380>
			else   while(1);
 800f166:	e7fe      	b.n	800f166 <MAP_makeCmdList+0x2a6>
 800f168:	20000c78 	.word	0x20000c78
 800f16c:	20000854 	.word	0x20000854
		}else if (en_staDir == WEST){
 800f170:	797b      	ldrb	r3, [r7, #5]
 800f172:	2b03      	cmp	r3, #3
 800f174:	d164      	bne.n	800f240 <MAP_makeCmdList+0x380>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800f176:	79ba      	ldrb	r2, [r7, #6]
 800f178:	79fb      	ldrb	r3, [r7, #7]
 800f17a:	4979      	ldr	r1, [pc, #484]	; (800f360 <MAP_makeCmdList+0x4a0>)
 800f17c:	0152      	lsls	r2, r2, #5
 800f17e:	440a      	add	r2, r1
 800f180:	4413      	add	r3, r2
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f188:	2b80      	cmp	r3, #128	; 0x80
 800f18a:	d10d      	bne.n	800f1a8 <MAP_makeCmdList+0x2e8>
 800f18c:	79ba      	ldrb	r2, [r7, #6]
 800f18e:	79fb      	ldrb	r3, [r7, #7]
 800f190:	3b01      	subs	r3, #1
 800f192:	4974      	ldr	r1, [pc, #464]	; (800f364 <MAP_makeCmdList+0x4a4>)
 800f194:	0152      	lsls	r2, r2, #5
 800f196:	4413      	add	r3, r2
 800f198:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f19c:	8a3a      	ldrh	r2, [r7, #16]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d102      	bne.n	800f1a8 <MAP_makeCmdList+0x2e8>
 800f1a2:	2303      	movs	r3, #3
 800f1a4:	74fb      	strb	r3, [r7, #19]
 800f1a6:	e04b      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800f1a8:	79ba      	ldrb	r2, [r7, #6]
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	496c      	ldr	r1, [pc, #432]	; (800f360 <MAP_makeCmdList+0x4a0>)
 800f1ae:	0152      	lsls	r2, r2, #5
 800f1b0:	440a      	add	r2, r1
 800f1b2:	4413      	add	r3, r2
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	f003 0311 	and.w	r3, r3, #17
 800f1ba:	2b10      	cmp	r3, #16
 800f1bc:	d10d      	bne.n	800f1da <MAP_makeCmdList+0x31a>
 800f1be:	79bb      	ldrb	r3, [r7, #6]
 800f1c0:	1c5a      	adds	r2, r3, #1
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	4967      	ldr	r1, [pc, #412]	; (800f364 <MAP_makeCmdList+0x4a4>)
 800f1c6:	0152      	lsls	r2, r2, #5
 800f1c8:	4413      	add	r3, r2
 800f1ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f1ce:	8a3a      	ldrh	r2, [r7, #16]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d102      	bne.n	800f1da <MAP_makeCmdList+0x31a>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	74fb      	strb	r3, [r7, #19]
 800f1d8:	e032      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800f1da:	79ba      	ldrb	r2, [r7, #6]
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	4960      	ldr	r1, [pc, #384]	; (800f360 <MAP_makeCmdList+0x4a0>)
 800f1e0:	0152      	lsls	r2, r2, #5
 800f1e2:	440a      	add	r2, r1
 800f1e4:	4413      	add	r3, r2
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f1ec:	2b40      	cmp	r3, #64	; 0x40
 800f1ee:	d10d      	bne.n	800f20c <MAP_makeCmdList+0x34c>
 800f1f0:	79bb      	ldrb	r3, [r7, #6]
 800f1f2:	1e5a      	subs	r2, r3, #1
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	495b      	ldr	r1, [pc, #364]	; (800f364 <MAP_makeCmdList+0x4a4>)
 800f1f8:	0152      	lsls	r2, r2, #5
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f200:	8a3a      	ldrh	r2, [r7, #16]
 800f202:	429a      	cmp	r2, r3
 800f204:	d102      	bne.n	800f20c <MAP_makeCmdList+0x34c>
 800f206:	2302      	movs	r3, #2
 800f208:	74fb      	strb	r3, [r7, #19]
 800f20a:	e019      	b.n	800f240 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800f20c:	79ba      	ldrb	r2, [r7, #6]
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	4953      	ldr	r1, [pc, #332]	; (800f360 <MAP_makeCmdList+0x4a0>)
 800f212:	0152      	lsls	r2, r2, #5
 800f214:	440a      	add	r2, r1
 800f216:	4413      	add	r3, r2
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f21e:	2b20      	cmp	r3, #32
 800f220:	d10d      	bne.n	800f23e <MAP_makeCmdList+0x37e>
 800f222:	79ba      	ldrb	r2, [r7, #6]
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	3301      	adds	r3, #1
 800f228:	494e      	ldr	r1, [pc, #312]	; (800f364 <MAP_makeCmdList+0x4a4>)
 800f22a:	0152      	lsls	r2, r2, #5
 800f22c:	4413      	add	r3, r2
 800f22e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f232:	8a3a      	ldrh	r2, [r7, #16]
 800f234:	429a      	cmp	r2, r3
 800f236:	d102      	bne.n	800f23e <MAP_makeCmdList+0x37e>
 800f238:	2301      	movs	r3, #1
 800f23a:	74fb      	strb	r3, [r7, #19]
 800f23c:	e000      	b.n	800f240 <MAP_makeCmdList+0x380>
			else   while(1);
 800f23e:	e7fe      	b.n	800f23e <MAP_makeCmdList+0x37e>
		}
		
		en_tempDir = (enMAP_HEAD_DIR)( (en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3 );		// 方向更新
 800f240:	7cfa      	ldrb	r2, [r7, #19]
 800f242:	797b      	ldrb	r3, [r7, #5]
 800f244:	1ad3      	subs	r3, r2, r3
 800f246:	b2db      	uxtb	r3, r3
 800f248:	f003 0303 	and.w	r3, r3, #3
 800f24c:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 800f24e:	7cfb      	ldrb	r3, [r7, #19]
 800f250:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH){
 800f252:	7bfb      	ldrb	r3, [r7, #15]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d103      	bne.n	800f260 <MAP_makeCmdList+0x3a0>
			uc_goStep = uc_goStep + 2;
 800f258:	7dfb      	ldrb	r3, [r7, #23]
 800f25a:	3302      	adds	r3, #2
 800f25c:	75fb      	strb	r3, [r7, #23]
 800f25e:	e037      	b.n	800f2d0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == EAST){
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d110      	bne.n	800f288 <MAP_makeCmdList+0x3c8>
			dcom[us_pt] = uc_goStep;
 800f266:	8abb      	ldrh	r3, [r7, #20]
 800f268:	493f      	ldr	r1, [pc, #252]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f26a:	7dfa      	ldrb	r2, [r7, #23]
 800f26c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 800f26e:	8abb      	ldrh	r3, [r7, #20]
 800f270:	3301      	adds	r3, #1
 800f272:	82bb      	strh	r3, [r7, #20]
 800f274:	8abb      	ldrh	r3, [r7, #20]
 800f276:	4a3c      	ldr	r2, [pc, #240]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f278:	2148      	movs	r1, #72	; 0x48
 800f27a:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800f27c:	2302      	movs	r3, #2
 800f27e:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800f280:	8abb      	ldrh	r3, [r7, #20]
 800f282:	3301      	adds	r3, #1
 800f284:	82bb      	strh	r3, [r7, #20]
 800f286:	e023      	b.n	800f2d0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == WEST){
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d110      	bne.n	800f2b0 <MAP_makeCmdList+0x3f0>
			dcom[us_pt] = uc_goStep;
 800f28e:	8abb      	ldrh	r3, [r7, #20]
 800f290:	4935      	ldr	r1, [pc, #212]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f292:	7dfa      	ldrb	r2, [r7, #23]
 800f294:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 800f296:	8abb      	ldrh	r3, [r7, #20]
 800f298:	3301      	adds	r3, #1
 800f29a:	82bb      	strh	r3, [r7, #20]
 800f29c:	8abb      	ldrh	r3, [r7, #20]
 800f29e:	4a32      	ldr	r2, [pc, #200]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f2a0:	2149      	movs	r1, #73	; 0x49
 800f2a2:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800f2a8:	8abb      	ldrh	r3, [r7, #20]
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	82bb      	strh	r3, [r7, #20]
 800f2ae:	e00f      	b.n	800f2d0 <MAP_makeCmdList+0x410>
		}
		else{
			dcom[us_pt] = uc_goStep;
 800f2b0:	8abb      	ldrh	r3, [r7, #20]
 800f2b2:	492d      	ldr	r1, [pc, #180]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f2b4:	7dfa      	ldrb	r2, [r7, #23]
 800f2b6:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 800f2b8:	8abb      	ldrh	r3, [r7, #20]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	82bb      	strh	r3, [r7, #20]
 800f2be:	8abb      	ldrh	r3, [r7, #20]
 800f2c0:	4a29      	ldr	r2, [pc, #164]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f2c2:	214a      	movs	r1, #74	; 0x4a
 800f2c4:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800f2ca:	8abb      	ldrh	r3, [r7, #20]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	82bb      	strh	r3, [r7, #20]
		}

		if      (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 800f2d0:	7cfb      	ldrb	r3, [r7, #19]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d103      	bne.n	800f2de <MAP_makeCmdList+0x41e>
 800f2d6:	79bb      	ldrb	r3, [r7, #6]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	71bb      	strb	r3, [r7, #6]
 800f2dc:	e013      	b.n	800f306 <MAP_makeCmdList+0x446>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 800f2de:	7cfb      	ldrb	r3, [r7, #19]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d103      	bne.n	800f2ec <MAP_makeCmdList+0x42c>
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	71fb      	strb	r3, [r7, #7]
 800f2ea:	e00c      	b.n	800f306 <MAP_makeCmdList+0x446>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 800f2ec:	7cfb      	ldrb	r3, [r7, #19]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d103      	bne.n	800f2fa <MAP_makeCmdList+0x43a>
 800f2f2:	79bb      	ldrb	r3, [r7, #6]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	71bb      	strb	r3, [r7, #6]
 800f2f8:	e005      	b.n	800f306 <MAP_makeCmdList+0x446>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 800f2fa:	7cfb      	ldrb	r3, [r7, #19]
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d102      	bne.n	800f306 <MAP_makeCmdList+0x446>
 800f300:	79fb      	ldrb	r3, [r7, #7]
 800f302:	3b01      	subs	r3, #1
 800f304:	71fb      	strb	r3, [r7, #7]
		
		en_staDir = en_nowDir;
 800f306:	7cfb      	ldrb	r3, [r7, #19]
 800f308:	717b      	strb	r3, [r7, #5]
		
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800f30a:	79fa      	ldrb	r2, [r7, #7]
 800f30c:	793b      	ldrb	r3, [r7, #4]
 800f30e:	429a      	cmp	r2, r3
 800f310:	f47f ade9 	bne.w	800eee6 <MAP_makeCmdList+0x26>
 800f314:	79ba      	ldrb	r2, [r7, #6]
 800f316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d000      	beq.n	800f320 <MAP_makeCmdList+0x460>
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800f31e:	e5e2      	b.n	800eee6 <MAP_makeCmdList+0x26>
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800f320:	bf00      	nop
	}
	
	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 800f322:	8abb      	ldrh	r3, [r7, #20]
 800f324:	4910      	ldr	r1, [pc, #64]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f326:	7dfa      	ldrb	r2, [r7, #23]
 800f328:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 800f32a:	8abb      	ldrh	r3, [r7, #20]
 800f32c:	3301      	adds	r3, #1
 800f32e:	82bb      	strh	r3, [r7, #20]
 800f330:	8abb      	ldrh	r3, [r7, #20]
 800f332:	4a0d      	ldr	r2, [pc, #52]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f334:	2100      	movs	r1, #0
 800f336:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 800f338:	8abb      	ldrh	r3, [r7, #20]
 800f33a:	3301      	adds	r3, #1
 800f33c:	82bb      	strh	r3, [r7, #20]
 800f33e:	8abb      	ldrh	r3, [r7, #20]
 800f340:	4a09      	ldr	r2, [pc, #36]	; (800f368 <MAP_makeCmdList+0x4a8>)
 800f342:	21fa      	movs	r1, #250	; 0xfa
 800f344:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt+1;			// コマンド総数
 800f346:	8abb      	ldrh	r3, [r7, #20]
 800f348:	3301      	adds	r3, #1
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	4b07      	ldr	r3, [pc, #28]	; (800f36c <MAP_makeCmdList+0x4ac>)
 800f34e:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	797a      	ldrb	r2, [r7, #5]
 800f354:	701a      	strb	r2, [r3, #0]
}
 800f356:	bf00      	nop
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bc90      	pop	{r4, r7}
 800f35e:	4770      	bx	lr
 800f360:	20000854 	.word	0x20000854
 800f364:	20000c78 	.word	0x20000c78
 800f368:	2000b284 	.word	0x2000b284
 800f36c:	2000e340 	.word	0x2000e340

0800f370 <MAP_makeSuraCmdList>:

void MAP_makeSuraCmdList( void )
{
 800f370:	b480      	push	{r7}
 800f372:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
	uint16_t dcom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t i=0,j=0;					// roop
 800f37a:	2300      	movs	r3, #0
 800f37c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f380:	f102 0206 	add.w	r2, r2, #6
 800f384:	8013      	strh	r3, [r2, #0]
 800f386:	2300      	movs	r3, #0
 800f388:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f38c:	f102 0204 	add.w	r2, r2, #4
 800f390:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ ){
 800f392:	2300      	movs	r3, #0
 800f394:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f398:	f102 0206 	add.w	r2, r2, #6
 800f39c:	8013      	strh	r3, [r2, #0]
 800f39e:	e01d      	b.n	800f3dc <MAP_makeSuraCmdList+0x6c>
		dcom_temp[i] = dcom[i];
 800f3a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3a4:	f103 0306 	add.w	r3, r3, #6
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	4aac      	ldr	r2, [pc, #688]	; (800f65c <MAP_makeSuraCmdList+0x2ec>)
 800f3ac:	5cd2      	ldrb	r2, [r2, r3]
 800f3ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3b2:	f103 0306 	add.w	r3, r3, #6
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	b292      	uxth	r2, r2
 800f3ba:	f107 0108 	add.w	r1, r7, #8
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	440b      	add	r3, r1
 800f3c2:	f823 2c04 	strh.w	r2, [r3, #-4]
	for( i=0; i<us_totalCmd; i++ ){
 800f3c6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3ca:	f103 0306 	add.w	r3, r3, #6
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f3d6:	f102 0206 	add.w	r2, r2, #6
 800f3da:	8013      	strh	r3, [r2, #0]
 800f3dc:	4ba0      	ldr	r3, [pc, #640]	; (800f660 <MAP_makeSuraCmdList+0x2f0>)
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f3e4:	f102 0206 	add.w	r2, r2, #6
 800f3e8:	8812      	ldrh	r2, [r2, #0]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d3d8      	bcc.n	800f3a0 <MAP_makeSuraCmdList+0x30>
	}

	i = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f3f4:	f102 0206 	add.w	r2, r2, #6
 800f3f8:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		if( dcom_temp[i] == R90 ){		// 右90°
 800f3fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3fe:	f103 0306 	add.w	r3, r3, #6
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	f107 0208 	add.w	r2, r7, #8
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4413      	add	r3, r2
 800f40c:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f410:	2b48      	cmp	r3, #72	; 0x48
 800f412:	d140      	bne.n	800f496 <MAP_makeSuraCmdList+0x126>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800f414:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f418:	f103 0306 	add.w	r3, r3, #6
 800f41c:	881b      	ldrh	r3, [r3, #0]
 800f41e:	3b01      	subs	r3, #1
 800f420:	f107 0208 	add.w	r2, r7, #8
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	4413      	add	r3, r2
 800f428:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800f42c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f430:	f103 0306 	add.w	r3, r3, #6
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	3b01      	subs	r3, #1
 800f438:	3a01      	subs	r2, #1
 800f43a:	b292      	uxth	r2, r2
 800f43c:	f107 0108 	add.w	r1, r7, #8
 800f440:	005b      	lsls	r3, r3, #1
 800f442:	440b      	add	r3, r1
 800f444:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800f448:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f44c:	f103 0306 	add.w	r3, r3, #6
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	f107 0208 	add.w	r2, r7, #8
 800f458:	005b      	lsls	r3, r3, #1
 800f45a:	4413      	add	r3, r2
 800f45c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800f460:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f464:	f103 0306 	add.w	r3, r3, #6
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	3301      	adds	r3, #1
 800f46c:	3a01      	subs	r2, #1
 800f46e:	b292      	uxth	r2, r2
 800f470:	f107 0108 	add.w	r1, r7, #8
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	440b      	add	r3, r1
 800f478:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = R90S;		// 右スラローム90°
 800f47c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f480:	f103 0306 	add.w	r3, r3, #6
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	f107 0208 	add.w	r2, r7, #8
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	224c      	movs	r2, #76	; 0x4c
 800f490:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f494:	e05a      	b.n	800f54c <MAP_makeSuraCmdList+0x1dc>
		}
		else if( dcom_temp[i] == L90 ){	// 左90°
 800f496:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f49a:	f103 0306 	add.w	r3, r3, #6
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	f107 0208 	add.w	r2, r7, #8
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	4413      	add	r3, r2
 800f4a8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f4ac:	2b49      	cmp	r3, #73	; 0x49
 800f4ae:	d140      	bne.n	800f532 <MAP_makeSuraCmdList+0x1c2>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800f4b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4b4:	f103 0306 	add.w	r3, r3, #6
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	f107 0208 	add.w	r2, r7, #8
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800f4c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4cc:	f103 0306 	add.w	r3, r3, #6
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	3a01      	subs	r2, #1
 800f4d6:	b292      	uxth	r2, r2
 800f4d8:	f107 0108 	add.w	r1, r7, #8
 800f4dc:	005b      	lsls	r3, r3, #1
 800f4de:	440b      	add	r3, r1
 800f4e0:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800f4e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4e8:	f103 0306 	add.w	r3, r3, #6
 800f4ec:	881b      	ldrh	r3, [r3, #0]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	f107 0208 	add.w	r2, r7, #8
 800f4f4:	005b      	lsls	r3, r3, #1
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800f4fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f500:	f103 0306 	add.w	r3, r3, #6
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	3301      	adds	r3, #1
 800f508:	3a01      	subs	r2, #1
 800f50a:	b292      	uxth	r2, r2
 800f50c:	f107 0108 	add.w	r1, r7, #8
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	440b      	add	r3, r1
 800f514:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = L90S;		// 左スラローム90°
 800f518:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f51c:	f103 0306 	add.w	r3, r3, #6
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	f107 0208 	add.w	r2, r7, #8
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	224d      	movs	r2, #77	; 0x4d
 800f52c:	f823 2c04 	strh.w	r2, [r3, #-4]
 800f530:	e00c      	b.n	800f54c <MAP_makeSuraCmdList+0x1dc>
		}
		else{
			if( dcom_temp[i] == CEND ){
 800f532:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f536:	f103 0306 	add.w	r3, r3, #6
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	f107 0208 	add.w	r2, r7, #8
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	4413      	add	r3, r2
 800f544:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f548:	2bfa      	cmp	r3, #250	; 0xfa
 800f54a:	d00b      	beq.n	800f564 <MAP_makeSuraCmdList+0x1f4>
				break;
			}
		}
		i++;
 800f54c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f550:	f103 0306 	add.w	r3, r3, #6
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	3301      	adds	r3, #1
 800f558:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f55c:	f102 0206 	add.w	r2, r2, #6
 800f560:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i] == R90 ){		// 右90°
 800f562:	e74a      	b.n	800f3fa <MAP_makeSuraCmdList+0x8a>
				break;
 800f564:	bf00      	nop
	}

	i = j = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f56c:	f102 0204 	add.w	r2, r2, #4
 800f570:	8013      	strh	r3, [r2, #0]
 800f572:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f576:	f103 0304 	add.w	r3, r3, #4
 800f57a:	881b      	ldrh	r3, [r3, #0]
 800f57c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f580:	f102 0206 	add.w	r2, r2, #6
 800f584:	8013      	strh	r3, [r2, #0]

	/* スラロームコマンド変換 */
	while(1)
	{
		if( dcom_temp[i+1] == CEND ){
 800f586:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f58a:	f103 0306 	add.w	r3, r3, #6
 800f58e:	881b      	ldrh	r3, [r3, #0]
 800f590:	3301      	adds	r3, #1
 800f592:	f107 0208 	add.w	r2, r7, #8
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	4413      	add	r3, r2
 800f59a:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f59e:	2bfa      	cmp	r3, #250	; 0xfa
 800f5a0:	d111      	bne.n	800f5c6 <MAP_makeSuraCmdList+0x256>
			scom[j] = STOP;
 800f5a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5a6:	f103 0304 	add.w	r3, r3, #4
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	4a2d      	ldr	r2, [pc, #180]	; (800f664 <MAP_makeSuraCmdList+0x2f4>)
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	54d1      	strb	r1, [r2, r3]
			scom[j+1] = CEND;
 800f5b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5b6:	f103 0304 	add.w	r3, r3, #4
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	4a29      	ldr	r2, [pc, #164]	; (800f664 <MAP_makeSuraCmdList+0x2f4>)
 800f5c0:	21fa      	movs	r1, #250	; 0xfa
 800f5c2:	54d1      	strb	r1, [r2, r3]
			break;
 800f5c4:	e041      	b.n	800f64a <MAP_makeSuraCmdList+0x2da>
		}
		else
		{
			/* データがストップコマンドだったら */
			if( dcom_temp[i] == 0 ){
 800f5c6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5ca:	f103 0306 	add.w	r3, r3, #6
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	f107 0208 	add.w	r2, r7, #8
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10a      	bne.n	800f5f6 <MAP_makeSuraCmdList+0x286>
				i++;
 800f5e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5e4:	f103 0306 	add.w	r3, r3, #6
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f5f0:	f102 0206 	add.w	r2, r2, #6
 800f5f4:	8013      	strh	r3, [r2, #0]
			}
			
			scom[j] = dcom_temp[i];
 800f5f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5fa:	f103 0306 	add.w	r3, r3, #6
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	f107 0208 	add.w	r2, r7, #8
 800f604:	005b      	lsls	r3, r3, #1
 800f606:	4413      	add	r3, r2
 800f608:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800f60c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f610:	f103 0304 	add.w	r3, r3, #4
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	b2d1      	uxtb	r1, r2
 800f618:	4a12      	ldr	r2, [pc, #72]	; (800f664 <MAP_makeSuraCmdList+0x2f4>)
 800f61a:	54d1      	strb	r1, [r2, r3]
			
			i++;
 800f61c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f620:	f103 0306 	add.w	r3, r3, #6
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	3301      	adds	r3, #1
 800f628:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f62c:	f102 0206 	add.w	r2, r2, #6
 800f630:	8013      	strh	r3, [r2, #0]
			j++;
 800f632:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f636:	f103 0304 	add.w	r3, r3, #4
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	3301      	adds	r3, #1
 800f63e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f642:	f102 0204 	add.w	r2, r2, #4
 800f646:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i+1] == CEND ){
 800f648:	e79d      	b.n	800f586 <MAP_makeSuraCmdList+0x216>
		}
	}
}
 800f64a:	bf00      	nop
 800f64c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800f650:	370c      	adds	r7, #12
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	2000b284 	.word	0x2000b284
 800f660:	2000e340 	.word	0x2000e340
 800f664:	2000c28c 	.word	0x2000c28c

0800f668 <MAP_makeSkewCmdList>:

void MAP_makeSkewCmdList( void )
{
 800f668:	b480      	push	{r7}
 800f66a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
	uint16_t	scom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t	i;							// roop
	uint16_t	c1, c2, c3, c4;				// 計算用
	uint16_t	x;
	uint16_t	ct_n=0, ct_st=0;
 800f672:	2300      	movs	r3, #0
 800f674:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f678:	f102 0212 	add.w	r2, r2, #18
 800f67c:	8013      	strh	r3, [r2, #0]
 800f67e:	2300      	movs	r3, #0
 800f680:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f684:	f102 0210 	add.w	r2, r2, #16
 800f688:	8013      	strh	r3, [r2, #0]
	uint16_t	flag = 3;					//	斜め走行用バッファ  0:複合コマンド　1:斜め  2:S135N → N135S  3:直進
 800f68a:	2303      	movs	r3, #3
 800f68c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f690:	f102 020e 	add.w	r2, r2, #14
 800f694:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ )
 800f696:	2300      	movs	r3, #0
 800f698:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f69c:	f102 0216 	add.w	r2, r2, #22
 800f6a0:	8013      	strh	r3, [r2, #0]
 800f6a2:	e01d      	b.n	800f6e0 <MAP_makeSkewCmdList+0x78>
	{
		scom_temp[i] = scom[i];
 800f6a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6a8:	f103 0316 	add.w	r3, r3, #22
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	4acb      	ldr	r2, [pc, #812]	; (800f9dc <MAP_makeSkewCmdList+0x374>)
 800f6b0:	5cd2      	ldrb	r2, [r2, r3]
 800f6b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6b6:	f103 0316 	add.w	r3, r3, #22
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	b292      	uxth	r2, r2
 800f6be:	f107 0118 	add.w	r1, r7, #24
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	440b      	add	r3, r1
 800f6c6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for( i=0; i<us_totalCmd; i++ )
 800f6ca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6ce:	f103 0316 	add.w	r3, r3, #22
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f6da:	f102 0216 	add.w	r2, r2, #22
 800f6de:	8013      	strh	r3, [r2, #0]
 800f6e0:	4bbf      	ldr	r3, [pc, #764]	; (800f9e0 <MAP_makeSkewCmdList+0x378>)
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f6e8:	f102 0216 	add.w	r2, r2, #22
 800f6ec:	8812      	ldrh	r2, [r2, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d3d8      	bcc.n	800f6a4 <MAP_makeSkewCmdList+0x3c>
	}

	i=0;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f6f8:	f102 0216 	add.w	r2, r2, #22
 800f6fc:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		c1 = scom_temp[ct_st];
 800f6fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f702:	f103 0310 	add.w	r3, r3, #16
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	f107 0218 	add.w	r2, r7, #24
 800f70c:	005b      	lsls	r3, r3, #1
 800f70e:	4413      	add	r3, r2
 800f710:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800f714:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f718:	f102 020c 	add.w	r2, r2, #12
 800f71c:	8013      	strh	r3, [r2, #0]
		c2 = scom_temp[ct_st+1];
 800f71e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f722:	f103 0310 	add.w	r3, r3, #16
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	3301      	adds	r3, #1
 800f72a:	f107 0218 	add.w	r2, r7, #24
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	4413      	add	r3, r2
 800f732:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800f736:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f73a:	f102 020a 	add.w	r2, r2, #10
 800f73e:	8013      	strh	r3, [r2, #0]
		c3 = scom_temp[ct_st+2];
 800f740:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f744:	f103 0310 	add.w	r3, r3, #16
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	3302      	adds	r3, #2
 800f74c:	f107 0218 	add.w	r2, r7, #24
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	4413      	add	r3, r2
 800f754:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800f758:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f75c:	f102 0208 	add.w	r2, r2, #8
 800f760:	8013      	strh	r3, [r2, #0]
		c4 = scom_temp[ct_st+3];
 800f762:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f766:	f103 0310 	add.w	r3, r3, #16
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	3303      	adds	r3, #3
 800f76e:	f107 0218 	add.w	r2, r7, #24
 800f772:	005b      	lsls	r3, r3, #1
 800f774:	4413      	add	r3, r2
 800f776:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800f77a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f77e:	f102 0206 	add.w	r2, r2, #6
 800f782:	8013      	strh	r3, [r2, #0]

		//	直進 → 右45度 → 斜め
		if( (c1<=GO32) && (c2==R90S) && (c3==L90S) )
 800f784:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f788:	f103 030c 	add.w	r3, r3, #12
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	2b20      	cmp	r3, #32
 800f790:	f200 808d 	bhi.w	800f8ae <MAP_makeSkewCmdList+0x246>
 800f794:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f798:	f103 030a 	add.w	r3, r3, #10
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	2b4c      	cmp	r3, #76	; 0x4c
 800f7a0:	f040 8085 	bne.w	800f8ae <MAP_makeSkewCmdList+0x246>
 800f7a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7a8:	f103 0308 	add.w	r3, r3, #8
 800f7ac:	881b      	ldrh	r3, [r3, #0]
 800f7ae:	2b4d      	cmp	r3, #77	; 0x4d
 800f7b0:	d17d      	bne.n	800f8ae <MAP_makeSkewCmdList+0x246>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800f7b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7b6:	f103 0310 	add.w	r3, r3, #16
 800f7ba:	881b      	ldrh	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d131      	bne.n	800f824 <MAP_makeSkewCmdList+0x1bc>
 800f7c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7c4:	f103 030c 	add.w	r3, r3, #12
 800f7c8:	881b      	ldrh	r3, [r3, #0]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d12a      	bne.n	800f824 <MAP_makeSkewCmdList+0x1bc>
				tcom[ ct_n ] = scom_temp[ct_st];
 800f7ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7d2:	f103 0310 	add.w	r3, r3, #16
 800f7d6:	881b      	ldrh	r3, [r3, #0]
 800f7d8:	f107 0218 	add.w	r2, r7, #24
 800f7dc:	005b      	lsls	r3, r3, #1
 800f7de:	4413      	add	r3, r2
 800f7e0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800f7e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7e8:	f103 0312 	add.w	r3, r3, #18
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	b2d1      	uxtb	r1, r2
 800f7f0:	4a7c      	ldr	r2, [pc, #496]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f7f2:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800f7f4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7f8:	f103 0310 	add.w	r3, r3, #16
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	3301      	adds	r3, #1
 800f800:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f804:	f102 0210 	add.w	r2, r2, #16
 800f808:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800f80a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f80e:	f103 0312 	add.w	r3, r3, #18
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	3301      	adds	r3, #1
 800f816:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f81a:	f102 0212 	add.w	r2, r2, #18
 800f81e:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f820:	f000 becb 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800f824:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f828:	f103 030c 	add.w	r3, r3, #12
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d015      	beq.n	800f85e <MAP_makeSkewCmdList+0x1f6>
 800f832:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f836:	f103 030c 	add.w	r3, r3, #12
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f842:	f103 0312 	add.w	r3, r3, #18
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	1c59      	adds	r1, r3, #1
 800f84a:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f84e:	f100 0012 	add.w	r0, r0, #18
 800f852:	8001      	strh	r1, [r0, #0]
 800f854:	4619      	mov	r1, r3
 800f856:	1e53      	subs	r3, r2, #1
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	4b62      	ldr	r3, [pc, #392]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f85c:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = RS45N;
 800f85e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f862:	f103 0312 	add.w	r3, r3, #18
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f86e:	f101 0112 	add.w	r1, r1, #18
 800f872:	800a      	strh	r2, [r1, #0]
 800f874:	461a      	mov	r2, r3
 800f876:	4b5b      	ldr	r3, [pc, #364]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f878:	2199      	movs	r1, #153	; 0x99
 800f87a:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800f87c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f880:	f103 0310 	add.w	r3, r3, #16
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	3301      	adds	r3, #1
 800f888:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f88c:	f102 0210 	add.w	r2, r2, #16
 800f890:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f892:	2351      	movs	r3, #81	; 0x51
 800f894:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f898:	f102 0214 	add.w	r2, r2, #20
 800f89c:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f8a4:	f102 020e 	add.w	r2, r2, #14
 800f8a8:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f8aa:	f000 be86 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
			}
		}
		//	直進 → 左45度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==R90S) )
 800f8ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8b2:	f103 030c 	add.w	r3, r3, #12
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	2b20      	cmp	r3, #32
 800f8ba:	f200 8095 	bhi.w	800f9e8 <MAP_makeSkewCmdList+0x380>
 800f8be:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8c2:	f103 030a 	add.w	r3, r3, #10
 800f8c6:	881b      	ldrh	r3, [r3, #0]
 800f8c8:	2b4d      	cmp	r3, #77	; 0x4d
 800f8ca:	f040 808d 	bne.w	800f9e8 <MAP_makeSkewCmdList+0x380>
 800f8ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8d2:	f103 0308 	add.w	r3, r3, #8
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	2b4c      	cmp	r3, #76	; 0x4c
 800f8da:	f040 8085 	bne.w	800f9e8 <MAP_makeSkewCmdList+0x380>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800f8de:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8e2:	f103 0310 	add.w	r3, r3, #16
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d131      	bne.n	800f950 <MAP_makeSkewCmdList+0x2e8>
 800f8ec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8f0:	f103 030c 	add.w	r3, r3, #12
 800f8f4:	881b      	ldrh	r3, [r3, #0]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d12a      	bne.n	800f950 <MAP_makeSkewCmdList+0x2e8>
				tcom[ ct_n ] = scom_temp[ct_st];
 800f8fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8fe:	f103 0310 	add.w	r3, r3, #16
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	f107 0218 	add.w	r2, r7, #24
 800f908:	005b      	lsls	r3, r3, #1
 800f90a:	4413      	add	r3, r2
 800f90c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800f910:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f914:	f103 0312 	add.w	r3, r3, #18
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	b2d1      	uxtb	r1, r2
 800f91c:	4a31      	ldr	r2, [pc, #196]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f91e:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800f920:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f924:	f103 0310 	add.w	r3, r3, #16
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	3301      	adds	r3, #1
 800f92c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f930:	f102 0210 	add.w	r2, r2, #16
 800f934:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800f936:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f93a:	f103 0312 	add.w	r3, r3, #18
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	3301      	adds	r3, #1
 800f942:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f946:	f102 0212 	add.w	r2, r2, #18
 800f94a:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f94c:	f000 be35 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800f950:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f954:	f103 030c 	add.w	r3, r3, #12
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d015      	beq.n	800f98a <MAP_makeSkewCmdList+0x322>
 800f95e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f962:	f103 030c 	add.w	r3, r3, #12
 800f966:	881b      	ldrh	r3, [r3, #0]
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f96e:	f103 0312 	add.w	r3, r3, #18
 800f972:	881b      	ldrh	r3, [r3, #0]
 800f974:	1c59      	adds	r1, r3, #1
 800f976:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f97a:	f100 0012 	add.w	r0, r0, #18
 800f97e:	8001      	strh	r1, [r0, #0]
 800f980:	4619      	mov	r1, r3
 800f982:	1e53      	subs	r3, r2, #1
 800f984:	b2da      	uxtb	r2, r3
 800f986:	4b17      	ldr	r3, [pc, #92]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f988:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = LS45N;
 800f98a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f98e:	f103 0312 	add.w	r3, r3, #18
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	1c5a      	adds	r2, r3, #1
 800f996:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f99a:	f101 0112 	add.w	r1, r1, #18
 800f99e:	800a      	strh	r2, [r1, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4b10      	ldr	r3, [pc, #64]	; (800f9e4 <MAP_makeSkewCmdList+0x37c>)
 800f9a4:	219a      	movs	r1, #154	; 0x9a
 800f9a6:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800f9a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9ac:	f103 0310 	add.w	r3, r3, #16
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f9b8:	f102 0210 	add.w	r2, r2, #16
 800f9bc:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f9be:	2351      	movs	r3, #81	; 0x51
 800f9c0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f9c4:	f102 0214 	add.w	r2, r2, #20
 800f9c8:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f9d0:	f102 020e 	add.w	r2, r2, #14
 800f9d4:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f9d6:	f000 bdf0 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
 800f9da:	bf00      	nop
 800f9dc:	2000c28c 	.word	0x2000c28c
 800f9e0:	2000e340 	.word	0x2000e340
 800f9e4:	2000d2c8 	.word	0x2000d2c8
			}
		}

		//	直進 → 右90度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3<=GO32) )
 800f9e8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9ec:	f103 030c 	add.w	r3, r3, #12
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d843      	bhi.n	800fa7e <MAP_makeSkewCmdList+0x416>
 800f9f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9fa:	f103 030a 	add.w	r3, r3, #10
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	2b4c      	cmp	r3, #76	; 0x4c
 800fa02:	d13c      	bne.n	800fa7e <MAP_makeSkewCmdList+0x416>
 800fa04:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa08:	f103 0308 	add.w	r3, r3, #8
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	2b20      	cmp	r3, #32
 800fa10:	d835      	bhi.n	800fa7e <MAP_makeSkewCmdList+0x416>
		{
			tcom[ ct_n++ ] = c1;
 800fa12:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa16:	f103 0312 	add.w	r3, r3, #18
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	1c5a      	adds	r2, r3, #1
 800fa1e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fa22:	f101 0112 	add.w	r1, r1, #18
 800fa26:	800a      	strh	r2, [r1, #0]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa2e:	f103 030c 	add.w	r3, r3, #12
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	b2d9      	uxtb	r1, r3
 800fa36:	4bc0      	ldr	r3, [pc, #768]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fa38:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800fa3a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa3e:	f103 0312 	add.w	r3, r3, #18
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fa4a:	f101 0112 	add.w	r1, r1, #18
 800fa4e:	800a      	strh	r2, [r1, #0]
 800fa50:	461a      	mov	r2, r3
 800fa52:	4bb9      	ldr	r3, [pc, #740]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fa54:	214c      	movs	r1, #76	; 0x4c
 800fa56:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800fa58:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa5c:	f103 0310 	add.w	r3, r3, #16
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	3302      	adds	r3, #2
 800fa64:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fa68:	f102 0210 	add.w	r2, r2, #16
 800fa6c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800fa6e:	2303      	movs	r3, #3
 800fa70:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fa74:	f102 020e 	add.w	r2, r2, #14
 800fa78:	8013      	strh	r3, [r2, #0]
 800fa7a:	f000 bd9e 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左90度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c3<=GO32) )
 800fa7e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa82:	f103 030c 	add.w	r3, r3, #12
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	2b20      	cmp	r3, #32
 800fa8a:	d843      	bhi.n	800fb14 <MAP_makeSkewCmdList+0x4ac>
 800fa8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa90:	f103 030a 	add.w	r3, r3, #10
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	2b4d      	cmp	r3, #77	; 0x4d
 800fa98:	d13c      	bne.n	800fb14 <MAP_makeSkewCmdList+0x4ac>
 800fa9a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa9e:	f103 0308 	add.w	r3, r3, #8
 800faa2:	881b      	ldrh	r3, [r3, #0]
 800faa4:	2b20      	cmp	r3, #32
 800faa6:	d835      	bhi.n	800fb14 <MAP_makeSkewCmdList+0x4ac>
		{
			tcom[ ct_n++ ] = c1;
 800faa8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800faac:	f103 0312 	add.w	r3, r3, #18
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fab8:	f101 0112 	add.w	r1, r1, #18
 800fabc:	800a      	strh	r2, [r1, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fac4:	f103 030c 	add.w	r3, r3, #12
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	b2d9      	uxtb	r1, r3
 800facc:	4b9a      	ldr	r3, [pc, #616]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800face:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800fad0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fad4:	f103 0312 	add.w	r3, r3, #18
 800fad8:	881b      	ldrh	r3, [r3, #0]
 800fada:	1c5a      	adds	r2, r3, #1
 800fadc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fae0:	f101 0112 	add.w	r1, r1, #18
 800fae4:	800a      	strh	r2, [r1, #0]
 800fae6:	461a      	mov	r2, r3
 800fae8:	4b93      	ldr	r3, [pc, #588]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800faea:	214d      	movs	r1, #77	; 0x4d
 800faec:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800faee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800faf2:	f103 0310 	add.w	r3, r3, #16
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	3302      	adds	r3, #2
 800fafa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fafe:	f102 0210 	add.w	r2, r2, #16
 800fb02:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800fb04:	2303      	movs	r3, #3
 800fb06:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fb0a:	f102 020e 	add.w	r2, r2, #14
 800fb0e:	8013      	strh	r3, [r2, #0]
 800fb10:	f000 bd53 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 右135度 → 斜め
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4==L90S) )
 800fb14:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb18:	f103 030c 	add.w	r3, r3, #12
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	2b20      	cmp	r3, #32
 800fb20:	d850      	bhi.n	800fbc4 <MAP_makeSkewCmdList+0x55c>
 800fb22:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb26:	f103 030a 	add.w	r3, r3, #10
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	2b4c      	cmp	r3, #76	; 0x4c
 800fb2e:	d149      	bne.n	800fbc4 <MAP_makeSkewCmdList+0x55c>
 800fb30:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb34:	f103 0308 	add.w	r3, r3, #8
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	2b4c      	cmp	r3, #76	; 0x4c
 800fb3c:	d142      	bne.n	800fbc4 <MAP_makeSkewCmdList+0x55c>
 800fb3e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb42:	f103 0306 	add.w	r3, r3, #6
 800fb46:	881b      	ldrh	r3, [r3, #0]
 800fb48:	2b4d      	cmp	r3, #77	; 0x4d
 800fb4a:	d13b      	bne.n	800fbc4 <MAP_makeSkewCmdList+0x55c>
		{
			tcom[ ct_n++ ] = c1;
 800fb4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb50:	f103 0312 	add.w	r3, r3, #18
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	1c5a      	adds	r2, r3, #1
 800fb58:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fb5c:	f101 0112 	add.w	r1, r1, #18
 800fb60:	800a      	strh	r2, [r1, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb68:	f103 030c 	add.w	r3, r3, #12
 800fb6c:	881b      	ldrh	r3, [r3, #0]
 800fb6e:	b2d9      	uxtb	r1, r3
 800fb70:	4b71      	ldr	r3, [pc, #452]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fb72:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RS135N;
 800fb74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb78:	f103 0312 	add.w	r3, r3, #18
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fb84:	f101 0112 	add.w	r1, r1, #18
 800fb88:	800a      	strh	r2, [r1, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	4b6a      	ldr	r3, [pc, #424]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fb8e:	219b      	movs	r1, #155	; 0x9b
 800fb90:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800fb92:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb96:	f103 0310 	add.w	r3, r3, #16
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	3302      	adds	r3, #2
 800fb9e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fba2:	f102 0210 	add.w	r2, r2, #16
 800fba6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800fba8:	2351      	movs	r3, #81	; 0x51
 800fbaa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fbae:	f102 0214 	add.w	r2, r2, #20
 800fbb2:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fbba:	f102 020e 	add.w	r2, r2, #14
 800fbbe:	8013      	strh	r3, [r2, #0]
 800fbc0:	f000 bcfb 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左135度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==L90S) && (c4==R90S) )
 800fbc4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbc8:	f103 030c 	add.w	r3, r3, #12
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	2b20      	cmp	r3, #32
 800fbd0:	d850      	bhi.n	800fc74 <MAP_makeSkewCmdList+0x60c>
 800fbd2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbd6:	f103 030a 	add.w	r3, r3, #10
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	2b4d      	cmp	r3, #77	; 0x4d
 800fbde:	d149      	bne.n	800fc74 <MAP_makeSkewCmdList+0x60c>
 800fbe0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbe4:	f103 0308 	add.w	r3, r3, #8
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	2b4d      	cmp	r3, #77	; 0x4d
 800fbec:	d142      	bne.n	800fc74 <MAP_makeSkewCmdList+0x60c>
 800fbee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbf2:	f103 0306 	add.w	r3, r3, #6
 800fbf6:	881b      	ldrh	r3, [r3, #0]
 800fbf8:	2b4c      	cmp	r3, #76	; 0x4c
 800fbfa:	d13b      	bne.n	800fc74 <MAP_makeSkewCmdList+0x60c>
		{
			tcom[ ct_n++ ] = c1;
 800fbfc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc00:	f103 0312 	add.w	r3, r3, #18
 800fc04:	881b      	ldrh	r3, [r3, #0]
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fc0c:	f101 0112 	add.w	r1, r1, #18
 800fc10:	800a      	strh	r2, [r1, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc18:	f103 030c 	add.w	r3, r3, #12
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	b2d9      	uxtb	r1, r3
 800fc20:	4b45      	ldr	r3, [pc, #276]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fc22:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LS135N;
 800fc24:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc28:	f103 0312 	add.w	r3, r3, #18
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	1c5a      	adds	r2, r3, #1
 800fc30:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fc34:	f101 0112 	add.w	r1, r1, #18
 800fc38:	800a      	strh	r2, [r1, #0]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	4b3e      	ldr	r3, [pc, #248]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fc3e:	219c      	movs	r1, #156	; 0x9c
 800fc40:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800fc42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc46:	f103 0310 	add.w	r3, r3, #16
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	3302      	adds	r3, #2
 800fc4e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc52:	f102 0210 	add.w	r2, r2, #16
 800fc56:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800fc58:	2351      	movs	r3, #81	; 0x51
 800fc5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc5e:	f102 0214 	add.w	r2, r2, #20
 800fc62:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800fc64:	2302      	movs	r3, #2
 800fc66:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc6a:	f102 020e 	add.w	r2, r2, #14
 800fc6e:	8013      	strh	r3, [r2, #0]
 800fc70:	f000 bca3 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
		}

		//	直進 → 右180度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4<=GO32) )
 800fc74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc78:	f103 030c 	add.w	r3, r3, #12
 800fc7c:	881b      	ldrh	r3, [r3, #0]
 800fc7e:	2b20      	cmp	r3, #32
 800fc80:	d85c      	bhi.n	800fd3c <MAP_makeSkewCmdList+0x6d4>
 800fc82:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc86:	f103 030a 	add.w	r3, r3, #10
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	2b4c      	cmp	r3, #76	; 0x4c
 800fc8e:	d155      	bne.n	800fd3c <MAP_makeSkewCmdList+0x6d4>
 800fc90:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc94:	f103 0308 	add.w	r3, r3, #8
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	2b4c      	cmp	r3, #76	; 0x4c
 800fc9c:	d14e      	bne.n	800fd3c <MAP_makeSkewCmdList+0x6d4>
 800fc9e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fca2:	f103 0306 	add.w	r3, r3, #6
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	2b20      	cmp	r3, #32
 800fcaa:	d847      	bhi.n	800fd3c <MAP_makeSkewCmdList+0x6d4>
		{
			tcom[ ct_n++ ] = c1;
 800fcac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fcb0:	f103 0312 	add.w	r3, r3, #18
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	1c5a      	adds	r2, r3, #1
 800fcb8:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fcbc:	f101 0112 	add.w	r1, r1, #18
 800fcc0:	800a      	strh	r2, [r1, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fcc8:	f103 030c 	add.w	r3, r3, #12
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	b2d9      	uxtb	r1, r3
 800fcd0:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fcd2:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800fcd4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fcd8:	f103 0312 	add.w	r3, r3, #18
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fce4:	f101 0112 	add.w	r1, r1, #18
 800fce8:	800a      	strh	r2, [r1, #0]
 800fcea:	461a      	mov	r2, r3
 800fcec:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fcee:	214c      	movs	r1, #76	; 0x4c
 800fcf0:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800fcf2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fcf6:	f103 0312 	add.w	r3, r3, #18
 800fcfa:	881b      	ldrh	r3, [r3, #0]
 800fcfc:	1c5a      	adds	r2, r3, #1
 800fcfe:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fd02:	f101 0112 	add.w	r1, r1, #18
 800fd06:	800a      	strh	r2, [r1, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <MAP_makeSkewCmdList+0x6d0>)
 800fd0c:	214c      	movs	r1, #76	; 0x4c
 800fd0e:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800fd10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd14:	f103 0310 	add.w	r3, r3, #16
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	3303      	adds	r3, #3
 800fd1c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fd20:	f102 0210 	add.w	r2, r2, #16
 800fd24:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800fd26:	2303      	movs	r3, #3
 800fd28:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fd2c:	f102 020e 	add.w	r2, r2, #14
 800fd30:	8013      	strh	r3, [r2, #0]
 800fd32:	f000 bc42 	b.w	80105ba <MAP_makeSkewCmdList+0xf52>
 800fd36:	bf00      	nop
 800fd38:	2000d2c8 	.word	0x2000d2c8
		}
		//	直進 → 左180度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c2==L90S) && (c4<=GO32) )
 800fd3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd40:	f103 030c 	add.w	r3, r3, #12
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	d858      	bhi.n	800fdfc <MAP_makeSkewCmdList+0x794>
 800fd4a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd4e:	f103 030a 	add.w	r3, r3, #10
 800fd52:	881b      	ldrh	r3, [r3, #0]
 800fd54:	2b4d      	cmp	r3, #77	; 0x4d
 800fd56:	d151      	bne.n	800fdfc <MAP_makeSkewCmdList+0x794>
 800fd58:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd5c:	f103 030a 	add.w	r3, r3, #10
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	2b4d      	cmp	r3, #77	; 0x4d
 800fd64:	d14a      	bne.n	800fdfc <MAP_makeSkewCmdList+0x794>
 800fd66:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd6a:	f103 0306 	add.w	r3, r3, #6
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	2b20      	cmp	r3, #32
 800fd72:	d843      	bhi.n	800fdfc <MAP_makeSkewCmdList+0x794>
		{
			tcom[ ct_n++ ] = c1;
 800fd74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd78:	f103 0312 	add.w	r3, r3, #18
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fd84:	f101 0112 	add.w	r1, r1, #18
 800fd88:	800a      	strh	r2, [r1, #0]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fd90:	f103 030c 	add.w	r3, r3, #12
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	b2d9      	uxtb	r1, r3
 800fd98:	4baa      	ldr	r3, [pc, #680]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800fd9a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800fd9c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fda0:	f103 0312 	add.w	r3, r3, #18
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fdac:	f101 0112 	add.w	r1, r1, #18
 800fdb0:	800a      	strh	r2, [r1, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4ba3      	ldr	r3, [pc, #652]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800fdb6:	214d      	movs	r1, #77	; 0x4d
 800fdb8:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800fdba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fdbe:	f103 0312 	add.w	r3, r3, #18
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fdca:	f101 0112 	add.w	r1, r1, #18
 800fdce:	800a      	strh	r2, [r1, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4b9c      	ldr	r3, [pc, #624]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800fdd4:	214d      	movs	r1, #77	; 0x4d
 800fdd6:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800fdd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fddc:	f103 0310 	add.w	r3, r3, #16
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	3303      	adds	r3, #3
 800fde4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fde8:	f102 0210 	add.w	r2, r2, #16
 800fdec:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800fdee:	2303      	movs	r3, #3
 800fdf0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fdf4:	f102 020e 	add.w	r2, r2, #14
 800fdf8:	8013      	strh	r3, [r2, #0]
 800fdfa:	e3de      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}

		//	斜め → 右45度 → 直進
		else if( (c1==R90S) && (c2<=GO32)  && (flag != 3 ) )
 800fdfc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe00:	f103 030c 	add.w	r3, r3, #12
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	2b4c      	cmp	r3, #76	; 0x4c
 800fe08:	d15c      	bne.n	800fec4 <MAP_makeSkewCmdList+0x85c>
 800fe0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe0e:	f103 030a 	add.w	r3, r3, #10
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	2b20      	cmp	r3, #32
 800fe16:	d855      	bhi.n	800fec4 <MAP_makeSkewCmdList+0x85c>
 800fe18:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe1c:	f103 030e 	add.w	r3, r3, #14
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d04e      	beq.n	800fec4 <MAP_makeSkewCmdList+0x85c>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800fe26:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe2a:	f103 030e 	add.w	r3, r3, #14
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d113      	bne.n	800fe5c <MAP_makeSkewCmdList+0x7f4>
 800fe34:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe38:	f103 0312 	add.w	r3, r3, #18
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fe44:	f101 0112 	add.w	r1, r1, #18
 800fe48:	800a      	strh	r2, [r1, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe50:	f103 0314 	add.w	r3, r3, #20
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	b2d9      	uxtb	r1, r3
 800fe58:	4b7a      	ldr	r3, [pc, #488]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800fe5a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN45S;
 800fe5c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe60:	f103 0312 	add.w	r3, r3, #18
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fe6c:	f101 0112 	add.w	r1, r1, #18
 800fe70:	800a      	strh	r2, [r1, #0]
 800fe72:	461a      	mov	r2, r3
 800fe74:	4b73      	ldr	r3, [pc, #460]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800fe76:	219d      	movs	r1, #157	; 0x9d
 800fe78:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800fe7a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fe7e:	f103 0310 	add.w	r3, r3, #16
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	3301      	adds	r3, #1
 800fe86:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fe8a:	f102 020a 	add.w	r2, r2, #10
 800fe8e:	8812      	ldrh	r2, [r2, #0]
 800fe90:	3a01      	subs	r2, #1
 800fe92:	b292      	uxth	r2, r2
 800fe94:	f107 0118 	add.w	r1, r7, #24
 800fe98:	005b      	lsls	r3, r3, #1
 800fe9a:	440b      	add	r3, r1
 800fe9c:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800fea0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fea4:	f103 0310 	add.w	r3, r3, #16
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	3301      	adds	r3, #1
 800feac:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800feb0:	f102 0210 	add.w	r2, r2, #16
 800feb4:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800feb6:	2303      	movs	r3, #3
 800feb8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800febc:	f102 020e 	add.w	r2, r2, #14
 800fec0:	8013      	strh	r3, [r2, #0]
 800fec2:	e37a      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左45度 → 直進
		else if( (c1==L90S) && (c2<=GO32)  && (flag != 3 ) )
 800fec4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fec8:	f103 030c 	add.w	r3, r3, #12
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	2b4d      	cmp	r3, #77	; 0x4d
 800fed0:	d15c      	bne.n	800ff8c <MAP_makeSkewCmdList+0x924>
 800fed2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fed6:	f103 030a 	add.w	r3, r3, #10
 800feda:	881b      	ldrh	r3, [r3, #0]
 800fedc:	2b20      	cmp	r3, #32
 800fede:	d855      	bhi.n	800ff8c <MAP_makeSkewCmdList+0x924>
 800fee0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fee4:	f103 030e 	add.w	r3, r3, #14
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	2b03      	cmp	r3, #3
 800feec:	d04e      	beq.n	800ff8c <MAP_makeSkewCmdList+0x924>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800feee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fef2:	f103 030e 	add.w	r3, r3, #14
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d113      	bne.n	800ff24 <MAP_makeSkewCmdList+0x8bc>
 800fefc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff00:	f103 0312 	add.w	r3, r3, #18
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800ff0c:	f101 0112 	add.w	r1, r1, #18
 800ff10:	800a      	strh	r2, [r1, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff18:	f103 0314 	add.w	r3, r3, #20
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	b2d9      	uxtb	r1, r3
 800ff20:	4b48      	ldr	r3, [pc, #288]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800ff22:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN45S;
 800ff24:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff28:	f103 0312 	add.w	r3, r3, #18
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	1c5a      	adds	r2, r3, #1
 800ff30:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800ff34:	f101 0112 	add.w	r1, r1, #18
 800ff38:	800a      	strh	r2, [r1, #0]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	4b41      	ldr	r3, [pc, #260]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 800ff3e:	219e      	movs	r1, #158	; 0x9e
 800ff40:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800ff42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff46:	f103 0310 	add.w	r3, r3, #16
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ff52:	f102 020a 	add.w	r2, r2, #10
 800ff56:	8812      	ldrh	r2, [r2, #0]
 800ff58:	3a01      	subs	r2, #1
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	f107 0118 	add.w	r1, r7, #24
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	440b      	add	r3, r1
 800ff64:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800ff68:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff6c:	f103 0310 	add.w	r3, r3, #16
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	3301      	adds	r3, #1
 800ff74:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ff78:	f102 0210 	add.w	r2, r2, #16
 800ff7c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800ff7e:	2303      	movs	r3, #3
 800ff80:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ff84:	f102 020e 	add.w	r2, r2, #14
 800ff88:	8013      	strh	r3, [r2, #0]
 800ff8a:	e316      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右90度 → 斜め
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4==L90S)  && (flag != 3 ) )
 800ff8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ff90:	f103 030c 	add.w	r3, r3, #12
 800ff94:	881b      	ldrh	r3, [r3, #0]
 800ff96:	2b4d      	cmp	r3, #77	; 0x4d
 800ff98:	f040 8093 	bne.w	80100c2 <MAP_makeSkewCmdList+0xa5a>
 800ff9c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffa0:	f103 030a 	add.w	r3, r3, #10
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	2b4c      	cmp	r3, #76	; 0x4c
 800ffa8:	f040 808b 	bne.w	80100c2 <MAP_makeSkewCmdList+0xa5a>
 800ffac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffb0:	f103 0308 	add.w	r3, r3, #8
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	2b4c      	cmp	r3, #76	; 0x4c
 800ffb8:	f040 8083 	bne.w	80100c2 <MAP_makeSkewCmdList+0xa5a>
 800ffbc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffc0:	f103 0306 	add.w	r3, r3, #6
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	2b4d      	cmp	r3, #77	; 0x4d
 800ffc8:	d17b      	bne.n	80100c2 <MAP_makeSkewCmdList+0xa5a>
 800ffca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffce:	f103 030e 	add.w	r3, r3, #14
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	d074      	beq.n	80100c2 <MAP_makeSkewCmdList+0xa5a>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからRN90N
 800ffd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffdc:	f103 030e 	add.w	r3, r3, #14
 800ffe0:	881b      	ldrh	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10f      	bne.n	8010006 <MAP_makeSkewCmdList+0x99e>
 800ffe6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ffea:	f103 0312 	add.w	r3, r3, #18
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fff6:	f101 0112 	add.w	r1, r1, #18
 800fffa:	800a      	strh	r2, [r1, #0]
 800fffc:	461a      	mov	r2, r3
 800fffe:	4b11      	ldr	r3, [pc, #68]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 8010000:	2152      	movs	r1, #82	; 0x52
 8010002:	5499      	strb	r1, [r3, r2]
 8010004:	e036      	b.n	8010074 <MAP_makeSkewCmdList+0xa0c>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8010006:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801000a:	f103 030e 	add.w	r3, r3, #14
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d119      	bne.n	8010048 <MAP_makeSkewCmdList+0x9e0>
 8010014:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010018:	f103 0314 	add.w	r3, r3, #20
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	b2da      	uxtb	r2, r3
 8010020:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010024:	f103 0312 	add.w	r3, r3, #18
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	1c59      	adds	r1, r3, #1
 801002c:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010030:	f100 0012 	add.w	r0, r0, #18
 8010034:	8001      	strh	r1, [r0, #0]
 8010036:	4619      	mov	r1, r3
 8010038:	1c53      	adds	r3, r2, #1
 801003a:	b2da      	uxtb	r2, r3
 801003c:	4b01      	ldr	r3, [pc, #4]	; (8010044 <MAP_makeSkewCmdList+0x9dc>)
 801003e:	545a      	strb	r2, [r3, r1]
 8010040:	e018      	b.n	8010074 <MAP_makeSkewCmdList+0xa0c>
 8010042:	bf00      	nop
 8010044:	2000d2c8 	.word	0x2000d2c8
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 8010048:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801004c:	f103 030e 	add.w	r3, r3, #14
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	2b02      	cmp	r3, #2
 8010054:	d10e      	bne.n	8010074 <MAP_makeSkewCmdList+0xa0c>
 8010056:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801005a:	f103 0312 	add.w	r3, r3, #18
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010066:	f101 0112 	add.w	r1, r1, #18
 801006a:	800a      	strh	r2, [r1, #0]
 801006c:	461a      	mov	r2, r3
 801006e:	4ba9      	ldr	r3, [pc, #676]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 8010070:	2152      	movs	r1, #82	; 0x52
 8010072:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN90N;
 8010074:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010078:	f103 0312 	add.w	r3, r3, #18
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010084:	f101 0112 	add.w	r1, r1, #18
 8010088:	800a      	strh	r2, [r1, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	4ba1      	ldr	r3, [pc, #644]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 801008e:	21a1      	movs	r1, #161	; 0xa1
 8010090:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 8010092:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010096:	f103 0310 	add.w	r3, r3, #16
 801009a:	881b      	ldrh	r3, [r3, #0]
 801009c:	3302      	adds	r3, #2
 801009e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80100a2:	f102 0210 	add.w	r2, r2, #16
 80100a6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 80100a8:	2351      	movs	r3, #81	; 0x51
 80100aa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80100ae:	f102 0214 	add.w	r2, r2, #20
 80100b2:	8013      	strh	r3, [r2, #0]
			flag = 1;
 80100b4:	2301      	movs	r3, #1
 80100b6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80100ba:	f102 020e 	add.w	r2, r2, #14
 80100be:	8013      	strh	r3, [r2, #0]
 80100c0:	e27b      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左90度 → 斜め
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4==R90S)  && (flag != 3 ) )
 80100c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80100c6:	f103 030c 	add.w	r3, r3, #12
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	2b4c      	cmp	r3, #76	; 0x4c
 80100ce:	f040 808f 	bne.w	80101f0 <MAP_makeSkewCmdList+0xb88>
 80100d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80100d6:	f103 030a 	add.w	r3, r3, #10
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	2b4d      	cmp	r3, #77	; 0x4d
 80100de:	f040 8087 	bne.w	80101f0 <MAP_makeSkewCmdList+0xb88>
 80100e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80100e6:	f103 0308 	add.w	r3, r3, #8
 80100ea:	881b      	ldrh	r3, [r3, #0]
 80100ec:	2b4d      	cmp	r3, #77	; 0x4d
 80100ee:	d17f      	bne.n	80101f0 <MAP_makeSkewCmdList+0xb88>
 80100f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80100f4:	f103 0306 	add.w	r3, r3, #6
 80100f8:	881b      	ldrh	r3, [r3, #0]
 80100fa:	2b4c      	cmp	r3, #76	; 0x4c
 80100fc:	d178      	bne.n	80101f0 <MAP_makeSkewCmdList+0xb88>
 80100fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010102:	f103 030e 	add.w	r3, r3, #14
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	2b03      	cmp	r3, #3
 801010a:	d071      	beq.n	80101f0 <MAP_makeSkewCmdList+0xb88>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 801010c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010110:	f103 030e 	add.w	r3, r3, #14
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10f      	bne.n	801013a <MAP_makeSkewCmdList+0xad2>
 801011a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801011e:	f103 0312 	add.w	r3, r3, #18
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 801012a:	f101 0112 	add.w	r1, r1, #18
 801012e:	800a      	strh	r2, [r1, #0]
 8010130:	461a      	mov	r2, r3
 8010132:	4b78      	ldr	r3, [pc, #480]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 8010134:	2152      	movs	r1, #82	; 0x52
 8010136:	5499      	strb	r1, [r3, r2]
 8010138:	e033      	b.n	80101a2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 801013a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801013e:	f103 030e 	add.w	r3, r3, #14
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d116      	bne.n	8010176 <MAP_makeSkewCmdList+0xb0e>
 8010148:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801014c:	f103 0314 	add.w	r3, r3, #20
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	b2da      	uxtb	r2, r3
 8010154:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010158:	f103 0312 	add.w	r3, r3, #18
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	1c59      	adds	r1, r3, #1
 8010160:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010164:	f100 0012 	add.w	r0, r0, #18
 8010168:	8001      	strh	r1, [r0, #0]
 801016a:	4619      	mov	r1, r3
 801016c:	1c53      	adds	r3, r2, #1
 801016e:	b2da      	uxtb	r2, r3
 8010170:	4b68      	ldr	r3, [pc, #416]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 8010172:	545a      	strb	r2, [r3, r1]
 8010174:	e015      	b.n	80101a2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 8010176:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801017a:	f103 030e 	add.w	r3, r3, #14
 801017e:	881b      	ldrh	r3, [r3, #0]
 8010180:	2b02      	cmp	r3, #2
 8010182:	d10e      	bne.n	80101a2 <MAP_makeSkewCmdList+0xb3a>
 8010184:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010188:	f103 0312 	add.w	r3, r3, #18
 801018c:	881b      	ldrh	r3, [r3, #0]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010194:	f101 0112 	add.w	r1, r1, #18
 8010198:	800a      	strh	r2, [r1, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	4b5d      	ldr	r3, [pc, #372]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 801019e:	2152      	movs	r1, #82	; 0x52
 80101a0:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN90N;
 80101a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80101a6:	f103 0312 	add.w	r3, r3, #18
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80101b2:	f101 0112 	add.w	r1, r1, #18
 80101b6:	800a      	strh	r2, [r1, #0]
 80101b8:	461a      	mov	r2, r3
 80101ba:	4b56      	ldr	r3, [pc, #344]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 80101bc:	21a2      	movs	r1, #162	; 0xa2
 80101be:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 80101c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80101c4:	f103 0310 	add.w	r3, r3, #16
 80101c8:	881b      	ldrh	r3, [r3, #0]
 80101ca:	3302      	adds	r3, #2
 80101cc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80101d0:	f102 0210 	add.w	r2, r2, #16
 80101d4:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 80101d6:	2351      	movs	r3, #81	; 0x51
 80101d8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80101dc:	f102 0214 	add.w	r2, r2, #20
 80101e0:	8013      	strh	r3, [r2, #0]
			flag = 1;
 80101e2:	2301      	movs	r3, #1
 80101e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80101e8:	f102 020e 	add.w	r2, r2, #14
 80101ec:	8013      	strh	r3, [r2, #0]
 80101ee:	e1e4      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右135度 → 直進
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4<=GO32)  && (flag != 3 ) )
 80101f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80101f4:	f103 030c 	add.w	r3, r3, #12
 80101f8:	881b      	ldrh	r3, [r3, #0]
 80101fa:	2b4d      	cmp	r3, #77	; 0x4d
 80101fc:	f040 808c 	bne.w	8010318 <MAP_makeSkewCmdList+0xcb0>
 8010200:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010204:	f103 030a 	add.w	r3, r3, #10
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	2b4c      	cmp	r3, #76	; 0x4c
 801020c:	f040 8084 	bne.w	8010318 <MAP_makeSkewCmdList+0xcb0>
 8010210:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010214:	f103 0308 	add.w	r3, r3, #8
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	2b4c      	cmp	r3, #76	; 0x4c
 801021c:	d17c      	bne.n	8010318 <MAP_makeSkewCmdList+0xcb0>
 801021e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010222:	f103 0306 	add.w	r3, r3, #6
 8010226:	881b      	ldrh	r3, [r3, #0]
 8010228:	2b20      	cmp	r3, #32
 801022a:	d875      	bhi.n	8010318 <MAP_makeSkewCmdList+0xcb0>
 801022c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010230:	f103 030e 	add.w	r3, r3, #14
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	2b03      	cmp	r3, #3
 8010238:	d06e      	beq.n	8010318 <MAP_makeSkewCmdList+0xcb0>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 801023a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801023e:	f103 030e 	add.w	r3, r3, #14
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d10f      	bne.n	8010268 <MAP_makeSkewCmdList+0xc00>
 8010248:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801024c:	f103 0312 	add.w	r3, r3, #18
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010258:	f101 0112 	add.w	r1, r1, #18
 801025c:	800a      	strh	r2, [r1, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	4b2c      	ldr	r3, [pc, #176]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 8010262:	2152      	movs	r1, #82	; 0x52
 8010264:	5499      	strb	r1, [r3, r2]
 8010266:	e033      	b.n	80102d0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8010268:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801026c:	f103 030e 	add.w	r3, r3, #14
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d116      	bne.n	80102a4 <MAP_makeSkewCmdList+0xc3c>
 8010276:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801027a:	f103 0314 	add.w	r3, r3, #20
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	b2da      	uxtb	r2, r3
 8010282:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010286:	f103 0312 	add.w	r3, r3, #18
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	1c59      	adds	r1, r3, #1
 801028e:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010292:	f100 0012 	add.w	r0, r0, #18
 8010296:	8001      	strh	r1, [r0, #0]
 8010298:	4619      	mov	r1, r3
 801029a:	1c53      	adds	r3, r2, #1
 801029c:	b2da      	uxtb	r2, r3
 801029e:	4b1d      	ldr	r3, [pc, #116]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 80102a0:	545a      	strb	r2, [r3, r1]
 80102a2:	e015      	b.n	80102d0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 80102a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80102a8:	f103 030e 	add.w	r3, r3, #14
 80102ac:	881b      	ldrh	r3, [r3, #0]
 80102ae:	2b02      	cmp	r3, #2
 80102b0:	d10e      	bne.n	80102d0 <MAP_makeSkewCmdList+0xc68>
 80102b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80102b6:	f103 0312 	add.w	r3, r3, #18
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	1c5a      	adds	r2, r3, #1
 80102be:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80102c2:	f101 0112 	add.w	r1, r1, #18
 80102c6:	800a      	strh	r2, [r1, #0]
 80102c8:	461a      	mov	r2, r3
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 80102cc:	2152      	movs	r1, #82	; 0x52
 80102ce:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN135S;
 80102d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80102d4:	f103 0312 	add.w	r3, r3, #18
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	1c5a      	adds	r2, r3, #1
 80102dc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80102e0:	f101 0112 	add.w	r1, r1, #18
 80102e4:	800a      	strh	r2, [r1, #0]
 80102e6:	461a      	mov	r2, r3
 80102e8:	4b0a      	ldr	r3, [pc, #40]	; (8010314 <MAP_makeSkewCmdList+0xcac>)
 80102ea:	219f      	movs	r1, #159	; 0x9f
 80102ec:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 80102ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80102f2:	f103 0310 	add.w	r3, r3, #16
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	3303      	adds	r3, #3
 80102fa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80102fe:	f102 0210 	add.w	r2, r2, #16
 8010302:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 8010304:	2303      	movs	r3, #3
 8010306:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801030a:	f102 020e 	add.w	r2, r2, #14
 801030e:	8013      	strh	r3, [r2, #0]
 8010310:	e153      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
 8010312:	bf00      	nop
 8010314:	2000d2c8 	.word	0x2000d2c8
		}
		//	斜め → 左135度 → 直進
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4<=GO32)  && (flag != 3 ) )
 8010318:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801031c:	f103 030c 	add.w	r3, r3, #12
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	2b4c      	cmp	r3, #76	; 0x4c
 8010324:	f040 8089 	bne.w	801043a <MAP_makeSkewCmdList+0xdd2>
 8010328:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801032c:	f103 030a 	add.w	r3, r3, #10
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	2b4d      	cmp	r3, #77	; 0x4d
 8010334:	f040 8081 	bne.w	801043a <MAP_makeSkewCmdList+0xdd2>
 8010338:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801033c:	f103 0308 	add.w	r3, r3, #8
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	2b4d      	cmp	r3, #77	; 0x4d
 8010344:	d179      	bne.n	801043a <MAP_makeSkewCmdList+0xdd2>
 8010346:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801034a:	f103 0306 	add.w	r3, r3, #6
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	2b20      	cmp	r3, #32
 8010352:	d872      	bhi.n	801043a <MAP_makeSkewCmdList+0xdd2>
 8010354:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010358:	f103 030e 	add.w	r3, r3, #14
 801035c:	881b      	ldrh	r3, [r3, #0]
 801035e:	2b03      	cmp	r3, #3
 8010360:	d06b      	beq.n	801043a <MAP_makeSkewCmdList+0xdd2>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 8010362:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010366:	f103 030e 	add.w	r3, r3, #14
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10f      	bne.n	8010390 <MAP_makeSkewCmdList+0xd28>
 8010370:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010374:	f103 0312 	add.w	r3, r3, #18
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010380:	f101 0112 	add.w	r1, r1, #18
 8010384:	800a      	strh	r2, [r1, #0]
 8010386:	461a      	mov	r2, r3
 8010388:	4b91      	ldr	r3, [pc, #580]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 801038a:	2152      	movs	r1, #82	; 0x52
 801038c:	5499      	strb	r1, [r3, r2]
 801038e:	e033      	b.n	80103f8 <MAP_makeSkewCmdList+0xd90>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 8010390:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010394:	f103 030e 	add.w	r3, r3, #14
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d116      	bne.n	80103cc <MAP_makeSkewCmdList+0xd64>
 801039e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80103a2:	f103 0314 	add.w	r3, r3, #20
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80103ae:	f103 0312 	add.w	r3, r3, #18
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	1c59      	adds	r1, r3, #1
 80103b6:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 80103ba:	f100 0012 	add.w	r0, r0, #18
 80103be:	8001      	strh	r1, [r0, #0]
 80103c0:	4619      	mov	r1, r3
 80103c2:	1c53      	adds	r3, r2, #1
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	4b82      	ldr	r3, [pc, #520]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 80103c8:	545a      	strb	r2, [r3, r1]
 80103ca:	e015      	b.n	80103f8 <MAP_makeSkewCmdList+0xd90>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 80103cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80103d0:	f103 030e 	add.w	r3, r3, #14
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d10e      	bne.n	80103f8 <MAP_makeSkewCmdList+0xd90>
 80103da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80103de:	f103 0312 	add.w	r3, r3, #18
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	1c5a      	adds	r2, r3, #1
 80103e6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 80103ea:	f101 0112 	add.w	r1, r1, #18
 80103ee:	800a      	strh	r2, [r1, #0]
 80103f0:	461a      	mov	r2, r3
 80103f2:	4b77      	ldr	r3, [pc, #476]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 80103f4:	2152      	movs	r1, #82	; 0x52
 80103f6:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN135S;
 80103f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80103fc:	f103 0312 	add.w	r3, r3, #18
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	1c5a      	adds	r2, r3, #1
 8010404:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8010408:	f101 0112 	add.w	r1, r1, #18
 801040c:	800a      	strh	r2, [r1, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	4b6f      	ldr	r3, [pc, #444]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 8010412:	21a0      	movs	r1, #160	; 0xa0
 8010414:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 8010416:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801041a:	f103 0310 	add.w	r3, r3, #16
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	3303      	adds	r3, #3
 8010422:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010426:	f102 0210 	add.w	r2, r2, #16
 801042a:	8013      	strh	r3, [r2, #0]
			flag = 3;		///	直進
 801042c:	2303      	movs	r3, #3
 801042e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010432:	f102 020e 	add.w	r2, r2, #14
 8010436:	8013      	strh	r3, [r2, #0]
 8010438:	e0bf      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 斜め
		else if( (c1==R90S) && (c2==L90S) && ( (c3==R90S) || (c3==L90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 801043a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801043e:	f103 030c 	add.w	r3, r3, #12
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	2b4c      	cmp	r3, #76	; 0x4c
 8010446:	d13f      	bne.n	80104c8 <MAP_makeSkewCmdList+0xe60>
 8010448:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801044c:	f103 030a 	add.w	r3, r3, #10
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	2b4d      	cmp	r3, #77	; 0x4d
 8010454:	d138      	bne.n	80104c8 <MAP_makeSkewCmdList+0xe60>
 8010456:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801045a:	f103 0308 	add.w	r3, r3, #8
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	2b4c      	cmp	r3, #76	; 0x4c
 8010462:	d00d      	beq.n	8010480 <MAP_makeSkewCmdList+0xe18>
 8010464:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010468:	f103 0308 	add.w	r3, r3, #8
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	2b4d      	cmp	r3, #77	; 0x4d
 8010470:	d006      	beq.n	8010480 <MAP_makeSkewCmdList+0xe18>
 8010472:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010476:	f103 0308 	add.w	r3, r3, #8
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	2b20      	cmp	r3, #32
 801047e:	d823      	bhi.n	80104c8 <MAP_makeSkewCmdList+0xe60>
 8010480:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010484:	f103 030e 	add.w	r3, r3, #14
 8010488:	881b      	ldrh	r3, [r3, #0]
 801048a:	2b03      	cmp	r3, #3
 801048c:	d01c      	beq.n	80104c8 <MAP_makeSkewCmdList+0xe60>
		{
			x++;
 801048e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010492:	f103 0314 	add.w	r3, r3, #20
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	3301      	adds	r3, #1
 801049a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801049e:	f102 0214 	add.w	r2, r2, #20
 80104a2:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 80104a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80104a8:	f103 0310 	add.w	r3, r3, #16
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	3301      	adds	r3, #1
 80104b0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80104b4:	f102 0210 	add.w	r2, r2, #16
 80104b8:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 80104ba:	2301      	movs	r3, #1
 80104bc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80104c0:	f102 020e 	add.w	r2, r2, #14
 80104c4:	8013      	strh	r3, [r2, #0]
 80104c6:	e078      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		else if( (c1==L90S) && (c2==R90S) && ( (c3==L90S) || (c3==R90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 80104c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80104cc:	f103 030c 	add.w	r3, r3, #12
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	2b4d      	cmp	r3, #77	; 0x4d
 80104d4:	d13f      	bne.n	8010556 <MAP_makeSkewCmdList+0xeee>
 80104d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80104da:	f103 030a 	add.w	r3, r3, #10
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	2b4c      	cmp	r3, #76	; 0x4c
 80104e2:	d138      	bne.n	8010556 <MAP_makeSkewCmdList+0xeee>
 80104e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80104e8:	f103 0308 	add.w	r3, r3, #8
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	2b4d      	cmp	r3, #77	; 0x4d
 80104f0:	d00d      	beq.n	801050e <MAP_makeSkewCmdList+0xea6>
 80104f2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80104f6:	f103 0308 	add.w	r3, r3, #8
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	2b4c      	cmp	r3, #76	; 0x4c
 80104fe:	d006      	beq.n	801050e <MAP_makeSkewCmdList+0xea6>
 8010500:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010504:	f103 0308 	add.w	r3, r3, #8
 8010508:	881b      	ldrh	r3, [r3, #0]
 801050a:	2b20      	cmp	r3, #32
 801050c:	d823      	bhi.n	8010556 <MAP_makeSkewCmdList+0xeee>
 801050e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010512:	f103 030e 	add.w	r3, r3, #14
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	2b03      	cmp	r3, #3
 801051a:	d01c      	beq.n	8010556 <MAP_makeSkewCmdList+0xeee>
		{
			//	コマンド出力
			x++;
 801051c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010520:	f103 0314 	add.w	r3, r3, #20
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	3301      	adds	r3, #1
 8010528:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801052c:	f102 0214 	add.w	r2, r2, #20
 8010530:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 8010532:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010536:	f103 0310 	add.w	r3, r3, #16
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	3301      	adds	r3, #1
 801053e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010542:	f102 0210 	add.w	r2, r2, #16
 8010546:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 8010548:	2301      	movs	r3, #1
 801054a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801054e:	f102 020e 	add.w	r2, r2, #14
 8010552:	8013      	strh	r3, [r2, #0]
 8010554:	e031      	b.n	80105ba <MAP_makeSkewCmdList+0xf52>
		}
		else
		{
			tcom[ ct_n ] = scom_temp[ct_st];
 8010556:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 801055a:	f103 0310 	add.w	r3, r3, #16
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	f107 0218 	add.w	r2, r7, #24
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 801056c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010570:	f103 0312 	add.w	r3, r3, #18
 8010574:	881b      	ldrh	r3, [r3, #0]
 8010576:	b2d1      	uxtb	r1, r2
 8010578:	4a15      	ldr	r2, [pc, #84]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 801057a:	54d1      	strb	r1, [r2, r3]
			if( tcom[ ct_n ] == CEND ) break;
 801057c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010580:	f103 0312 	add.w	r3, r3, #18
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	4a12      	ldr	r2, [pc, #72]	; (80105d0 <MAP_makeSkewCmdList+0xf68>)
 8010588:	5cd3      	ldrb	r3, [r2, r3]
 801058a:	2bfa      	cmp	r3, #250	; 0xfa
 801058c:	d017      	beq.n	80105be <MAP_makeSkewCmdList+0xf56>
			ct_st ++;
 801058e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010592:	f103 0310 	add.w	r3, r3, #16
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	3301      	adds	r3, #1
 801059a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801059e:	f102 0210 	add.w	r2, r2, #16
 80105a2:	8013      	strh	r3, [r2, #0]
			ct_n ++;
 80105a4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80105a8:	f103 0312 	add.w	r3, r3, #18
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	3301      	adds	r3, #1
 80105b0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80105b4:	f102 0212 	add.w	r2, r2, #18
 80105b8:	8013      	strh	r3, [r2, #0]
		c1 = scom_temp[ct_st];
 80105ba:	f7ff b8a0 	b.w	800f6fe <MAP_makeSkewCmdList+0x96>
			if( tcom[ ct_n ] == CEND ) break;
 80105be:	bf00      	nop
		}
	}
}
 80105c0:	bf00      	nop
 80105c2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80105c6:	371c      	adds	r7, #28
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr
 80105d0:	2000d2c8 	.word	0x2000d2c8

080105d4 <MAP_drive>:

void MAP_drive( enMAP_DRIVE_TYPE en_driveType )
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	ed2d 8b02 	vpush	{d8}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	4603      	mov	r3, r0
 80105e0:	71fb      	strb	r3, [r7, #7]
	uint16_t			us_rp = 0;				// 現在の読み込み位置
 80105e2:	2300      	movs	r3, #0
 80105e4:	81fb      	strh	r3, [r7, #14]
	enMOT_TURN_CMD 		en_type;
	bool			bl_isWallCut = FALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	733b      	strb	r3, [r7, #12]
	
	/* 超信旋回モード*/
	if( en_driveType == MAP_DRIVE_TURN )
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d15f      	bne.n	80106b0 <MAP_drive+0xdc>
	{
		while(1)
		{
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 80105f0:	89fb      	ldrh	r3, [r7, #14]
 80105f2:	4aad      	ldr	r2, [pc, #692]	; (80108a8 <MAP_drive+0x2d4>)
 80105f4:	5cd3      	ldrb	r3, [r2, r3]
 80105f6:	2bfa      	cmp	r3, #250	; 0xfa
 80105f8:	d050      	beq.n	801069c <MAP_drive+0xc8>
			
			else if ( dcom[us_rp] == STOP  ){
 80105fa:	89fb      	ldrh	r3, [r7, #14]
 80105fc:	4aaa      	ldr	r2, [pc, #680]	; (80108a8 <MAP_drive+0x2d4>)
 80105fe:	5cd3      	ldrb	r3, [r2, r3]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d108      	bne.n	8010616 <MAP_drive+0x42>
			 	CTRL_stop();			// 制御停止
 8010604:	f7f5 f8aa 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010608:	2000      	movs	r0, #0
 801060a:	f7f7 feed 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801060e:	2001      	movs	r0, #1
 8010610:	f7f7 feea 	bl	80083e8 <DCM_brakeMot>
 8010614:	e031      	b.n	801067a <MAP_drive+0xa6>
			}
			else if ( ( dcom[us_rp] <=  GO71 ) && ( dcom[us_rp] >=  GO1) )
 8010616:	89fb      	ldrh	r3, [r7, #14]
 8010618:	4aa3      	ldr	r2, [pc, #652]	; (80108a8 <MAP_drive+0x2d4>)
 801061a:	5cd3      	ldrb	r3, [r2, r3]
 801061c:	2b47      	cmp	r3, #71	; 0x47
 801061e:	d816      	bhi.n	801064e <MAP_drive+0x7a>
 8010620:	89fb      	ldrh	r3, [r7, #14]
 8010622:	4aa1      	ldr	r2, [pc, #644]	; (80108a8 <MAP_drive+0x2d4>)
 8010624:	5cd3      	ldrb	r3, [r2, r3]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d011      	beq.n	801064e <MAP_drive+0x7a>
			{
				MOT_goBlock_FinSpeed( (float)dcom[us_rp]*0.5f, 0 );		// 直線走行コマンド、半区間前進後に停止
 801062a:	89fb      	ldrh	r3, [r7, #14]
 801062c:	4a9e      	ldr	r2, [pc, #632]	; (80108a8 <MAP_drive+0x2d4>)
 801062e:	5cd3      	ldrb	r3, [r2, r3]
 8010630:	ee07 3a90 	vmov	s15, r3
 8010634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010638:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801063c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010640:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80108ac <MAP_drive+0x2d8>
 8010644:	eeb0 0a67 	vmov.f32	s0, s15
 8010648:	f7fb fc7e 	bl	800bf48 <MOT_goBlock_FinSpeed>
 801064c:	e015      	b.n	801067a <MAP_drive+0xa6>
			}
			else{
				
				if( dcom[us_rp] == R90 ) en_type = MOT_R90;
 801064e:	89fb      	ldrh	r3, [r7, #14]
 8010650:	4a95      	ldr	r2, [pc, #596]	; (80108a8 <MAP_drive+0x2d4>)
 8010652:	5cd3      	ldrb	r3, [r2, r3]
 8010654:	2b48      	cmp	r3, #72	; 0x48
 8010656:	d102      	bne.n	801065e <MAP_drive+0x8a>
 8010658:	2300      	movs	r3, #0
 801065a:	737b      	strb	r3, [r7, #13]
 801065c:	e001      	b.n	8010662 <MAP_drive+0x8e>
				else 					 en_type = MOT_L90;
 801065e:	2301      	movs	r3, #1
 8010660:	737b      	strb	r3, [r7, #13]
				
				LL_mDelay(500);
 8010662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010666:	f005 fe97 	bl	8016398 <LL_mDelay>
				MOT_turn( en_type );		//	旋回
 801066a:	7b7b      	ldrb	r3, [r7, #13]
 801066c:	4618      	mov	r0, r3
 801066e:	f7fb fdd3 	bl	800c218 <MOT_turn>
				LL_mDelay(500);
 8010672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010676:	f005 fe8f 	bl	8016398 <LL_mDelay>
			}
			us_rp++;
 801067a:	89fb      	ldrh	r3, [r7, #14]
 801067c:	3301      	adds	r3, #1
 801067e:	81fb      	strh	r3, [r7, #14]
			
			/* 途中で制御不能になった */
			if( SYS_isOutOfCtrl() == TRUE ){
 8010680:	f7f7 fe80 	bl	8008384 <SYS_isOutOfCtrl>
 8010684:	4603      	mov	r3, r0
 8010686:	2b00      	cmp	r3, #0
 8010688:	d0b2      	beq.n	80105f0 <MAP_drive+0x1c>
				CTRL_stop();
 801068a:	f7f5 f867 	bl	800575c <CTRL_stop>
				DCM_brakeMot(DCM_R);
 801068e:	2000      	movs	r0, #0
 8010690:	f7f7 feaa 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot(DCM_L);
 8010694:	2001      	movs	r0, #1
 8010696:	f7f7 fea7 	bl	80083e8 <DCM_brakeMot>
				break;
 801069a:	e000      	b.n	801069e <MAP_drive+0xca>
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 801069c:	bf00      	nop
			}
			
		}
	 	CTRL_stop();			// 制御停止
 801069e:	f7f5 f85d 	bl	800575c <CTRL_stop>
		DCM_brakeMot( DCM_R );		// ブレーキ
 80106a2:	2000      	movs	r0, #0
 80106a4:	f7f7 fea0 	bl	80083e8 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );		// ブレーキ
 80106a8:	2001      	movs	r0, #1
 80106aa:	f7f7 fe9d 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
				break;
			}
		}
	}
}
 80106ae:	e371      	b.n	8010d94 <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SURA )
 80106b0:	79fb      	ldrb	r3, [r7, #7]
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	f040 80b5 	bne.w	8010822 <MAP_drive+0x24e>
			MAP_refPos( scom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 80106b8:	89fb      	ldrh	r3, [r7, #14]
 80106ba:	4a7d      	ldr	r2, [pc, #500]	; (80108b0 <MAP_drive+0x2dc>)
 80106bc:	5cd3      	ldrb	r3, [r2, r3]
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fd fc0c 	bl	800dedc <MAP_refPos>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 80106c4:	89fb      	ldrh	r3, [r7, #14]
 80106c6:	4a7a      	ldr	r2, [pc, #488]	; (80108b0 <MAP_drive+0x2dc>)
 80106c8:	5cd3      	ldrb	r3, [r2, r3]
 80106ca:	2bfa      	cmp	r3, #250	; 0xfa
 80106cc:	f000 835f 	beq.w	8010d8e <MAP_drive+0x7ba>
			else if ( scom[us_rp] == STOP  )
 80106d0:	89fb      	ldrh	r3, [r7, #14]
 80106d2:	4a77      	ldr	r2, [pc, #476]	; (80108b0 <MAP_drive+0x2dc>)
 80106d4:	5cd3      	ldrb	r3, [r2, r3]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d108      	bne.n	80106ec <MAP_drive+0x118>
			 	CTRL_stop();			// 制御停止
 80106da:	f7f5 f83f 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 80106de:	2000      	movs	r0, #0
 80106e0:	f7f7 fe82 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 80106e4:	2001      	movs	r0, #1
 80106e6:	f7f7 fe7f 	bl	80083e8 <DCM_brakeMot>
 80106ea:	e088      	b.n	80107fe <MAP_drive+0x22a>
			else if ( ( scom[us_rp] <=  GO71 ) && ( scom[us_rp] >=  GO1) )
 80106ec:	89fb      	ldrh	r3, [r7, #14]
 80106ee:	4a70      	ldr	r2, [pc, #448]	; (80108b0 <MAP_drive+0x2dc>)
 80106f0:	5cd3      	ldrb	r3, [r2, r3]
 80106f2:	2b47      	cmp	r3, #71	; 0x47
 80106f4:	d868      	bhi.n	80107c8 <MAP_drive+0x1f4>
 80106f6:	89fb      	ldrh	r3, [r7, #14]
 80106f8:	4a6d      	ldr	r2, [pc, #436]	; (80108b0 <MAP_drive+0x2dc>)
 80106fa:	5cd3      	ldrb	r3, [r2, r3]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d063      	beq.n	80107c8 <MAP_drive+0x1f4>
				if( scom[us_rp+1] == STOP  ){
 8010700:	89fb      	ldrh	r3, [r7, #14]
 8010702:	3301      	adds	r3, #1
 8010704:	4a6a      	ldr	r2, [pc, #424]	; (80108b0 <MAP_drive+0x2dc>)
 8010706:	5cd3      	ldrb	r3, [r2, r3]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d111      	bne.n	8010730 <MAP_drive+0x15c>
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	4a68      	ldr	r2, [pc, #416]	; (80108b0 <MAP_drive+0x2dc>)
 8010710:	5cd3      	ldrb	r3, [r2, r3]
 8010712:	ee07 3a90 	vmov	s15, r3
 8010716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801071a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801071e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010722:	eddf 0a62 	vldr	s1, [pc, #392]	; 80108ac <MAP_drive+0x2d8>
 8010726:	eeb0 0a67 	vmov.f32	s0, s15
 801072a:	f7fb fc0d 	bl	800bf48 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 801072e:	e066      	b.n	80107fe <MAP_drive+0x22a>
					if( ( scom[us_rp+1] == R90S )   || ( scom[us_rp+1] == L90S ) ){
 8010730:	89fb      	ldrh	r3, [r7, #14]
 8010732:	3301      	adds	r3, #1
 8010734:	4a5e      	ldr	r2, [pc, #376]	; (80108b0 <MAP_drive+0x2dc>)
 8010736:	5cd3      	ldrb	r3, [r2, r3]
 8010738:	2b4c      	cmp	r3, #76	; 0x4c
 801073a:	d005      	beq.n	8010748 <MAP_drive+0x174>
 801073c:	89fb      	ldrh	r3, [r7, #14]
 801073e:	3301      	adds	r3, #1
 8010740:	4a5b      	ldr	r2, [pc, #364]	; (80108b0 <MAP_drive+0x2dc>)
 8010742:	5cd3      	ldrb	r3, [r2, r3]
 8010744:	2b4d      	cmp	r3, #77	; 0x4d
 8010746:	d128      	bne.n	801079a <MAP_drive+0x1c6>
						bl_isWallCut = MAP_setWallCut( scom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8010748:	89fb      	ldrh	r3, [r7, #14]
 801074a:	3301      	adds	r3, #1
 801074c:	4a58      	ldr	r2, [pc, #352]	; (80108b0 <MAP_drive+0x2dc>)
 801074e:	5cd3      	ldrb	r3, [r2, r3]
 8010750:	4618      	mov	r0, r3
 8010752:	f7fd fed3 	bl	800e4fc <MAP_setWallCut>
 8010756:	4603      	mov	r3, r0
 8010758:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 801075a:	7b3b      	ldrb	r3, [r7, #12]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d01c      	beq.n	801079a <MAP_drive+0x1c6>
							bl_isWallCut = FALSE;
 8010760:	2300      	movs	r3, #0
 8010762:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8010764:	4b53      	ldr	r3, [pc, #332]	; (80108b4 <MAP_drive+0x2e0>)
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	4619      	mov	r1, r3
 801076a:	4a53      	ldr	r2, [pc, #332]	; (80108b8 <MAP_drive+0x2e4>)
 801076c:	89fb      	ldrh	r3, [r7, #14]
 801076e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 8010772:	4b50      	ldr	r3, [pc, #320]	; (80108b4 <MAP_drive+0x2e0>)
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	3301      	adds	r3, #1
 8010778:	b29a      	uxth	r2, r3
 801077a:	4b4e      	ldr	r3, [pc, #312]	; (80108b4 <MAP_drive+0x2e0>)
 801077c:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 801077e:	4b4d      	ldr	r3, [pc, #308]	; (80108b4 <MAP_drive+0x2e0>)
 8010780:	881a      	ldrh	r2, [r3, #0]
 8010782:	4b4e      	ldr	r3, [pc, #312]	; (80108bc <MAP_drive+0x2e8>)
 8010784:	fba3 1302 	umull	r1, r3, r3, r2
 8010788:	0919      	lsrs	r1, r3, #4
 801078a:	460b      	mov	r3, r1
 801078c:	011b      	lsls	r3, r3, #4
 801078e:	1a5b      	subs	r3, r3, r1
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	b29a      	uxth	r2, r3
 8010796:	4b47      	ldr	r3, [pc, #284]	; (80108b4 <MAP_drive+0x2e0>)
 8010798:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, MOT_getSuraStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 801079a:	89fb      	ldrh	r3, [r7, #14]
 801079c:	4a44      	ldr	r2, [pc, #272]	; (80108b0 <MAP_drive+0x2dc>)
 801079e:	5cd3      	ldrb	r3, [r2, r3]
 80107a0:	ee07 3a90 	vmov	s15, r3
 80107a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80107ac:	ee27 8a87 	vmul.f32	s16, s15, s14
 80107b0:	2000      	movs	r0, #0
 80107b2:	f7fc f90f 	bl	800c9d4 <MOT_getSuraStaSpeed>
 80107b6:	eef0 7a40 	vmov.f32	s15, s0
 80107ba:	eef0 0a67 	vmov.f32	s1, s15
 80107be:	eeb0 0a48 	vmov.f32	s0, s16
 80107c2:	f7fb fbc1 	bl	800bf48 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 80107c6:	e01a      	b.n	80107fe <MAP_drive+0x22a>
			else if( scom[us_rp] == R90S )
 80107c8:	89fb      	ldrh	r3, [r7, #14]
 80107ca:	4a39      	ldr	r2, [pc, #228]	; (80108b0 <MAP_drive+0x2dc>)
 80107cc:	5cd3      	ldrb	r3, [r2, r3]
 80107ce:	2b4c      	cmp	r3, #76	; 0x4c
 80107d0:	d108      	bne.n	80107e4 <MAP_drive+0x210>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 80107d2:	2000      	movs	r0, #0
 80107d4:	f7f2 fc0e 	bl	8002ff4 <PARAM_getSra>
 80107d8:	4603      	mov	r3, r0
 80107da:	4619      	mov	r1, r3
 80107dc:	2000      	movs	r0, #0
 80107de:	f7fc f9a7 	bl	800cb30 <MOT_goSla>
 80107e2:	e00c      	b.n	80107fe <MAP_drive+0x22a>
			else if( scom[us_rp] == L90S )
 80107e4:	89fb      	ldrh	r3, [r7, #14]
 80107e6:	4a32      	ldr	r2, [pc, #200]	; (80108b0 <MAP_drive+0x2dc>)
 80107e8:	5cd3      	ldrb	r3, [r2, r3]
 80107ea:	2b4d      	cmp	r3, #77	; 0x4d
 80107ec:	d107      	bne.n	80107fe <MAP_drive+0x22a>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80107ee:	2000      	movs	r0, #0
 80107f0:	f7f2 fc00 	bl	8002ff4 <PARAM_getSra>
 80107f4:	4603      	mov	r3, r0
 80107f6:	4619      	mov	r1, r3
 80107f8:	2001      	movs	r0, #1
 80107fa:	f7fc f999 	bl	800cb30 <MOT_goSla>
			us_rp++;
 80107fe:	89fb      	ldrh	r3, [r7, #14]
 8010800:	3301      	adds	r3, #1
 8010802:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE){
 8010804:	f7f7 fdbe 	bl	8008384 <SYS_isOutOfCtrl>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	f43f af54 	beq.w	80106b8 <MAP_drive+0xe4>
				CTRL_stop();
 8010810:	f7f4 ffa4 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010814:	2000      	movs	r0, #0
 8010816:	f7f7 fde7 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 801081a:	2001      	movs	r0, #1
 801081c:	f7f7 fde4 	bl	80083e8 <DCM_brakeMot>
				break;
 8010820:	e2b8      	b.n	8010d94 <MAP_drive+0x7c0>
	else if( en_driveType == MAP_DRIVE_SKEW )
 8010822:	79fb      	ldrb	r3, [r7, #7]
 8010824:	2b02      	cmp	r3, #2
 8010826:	f040 82b5 	bne.w	8010d94 <MAP_drive+0x7c0>
			MAP_refPos( tcom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 801082a:	89fb      	ldrh	r3, [r7, #14]
 801082c:	4a24      	ldr	r2, [pc, #144]	; (80108c0 <MAP_drive+0x2ec>)
 801082e:	5cd3      	ldrb	r3, [r2, r3]
 8010830:	4618      	mov	r0, r3
 8010832:	f7fd fb53 	bl	800dedc <MAP_refPos>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8010836:	89fb      	ldrh	r3, [r7, #14]
 8010838:	4a21      	ldr	r2, [pc, #132]	; (80108c0 <MAP_drive+0x2ec>)
 801083a:	5cd3      	ldrb	r3, [r2, r3]
 801083c:	2bfa      	cmp	r3, #250	; 0xfa
 801083e:	f000 82a8 	beq.w	8010d92 <MAP_drive+0x7be>
			else if ( tcom[us_rp] == STOP  )
 8010842:	89fb      	ldrh	r3, [r7, #14]
 8010844:	4a1e      	ldr	r2, [pc, #120]	; (80108c0 <MAP_drive+0x2ec>)
 8010846:	5cd3      	ldrb	r3, [r2, r3]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d108      	bne.n	801085e <MAP_drive+0x28a>
			 	CTRL_stop();			// 制御停止
 801084c:	f7f4 ff86 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010850:	2000      	movs	r0, #0
 8010852:	f7f7 fdc9 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010856:	2001      	movs	r0, #1
 8010858:	f7f7 fdc6 	bl	80083e8 <DCM_brakeMot>
 801085c:	e285      	b.n	8010d6a <MAP_drive+0x796>
			else if ( ( tcom[us_rp] <=  GO71 ) && ( tcom[us_rp] >=  GO1) )
 801085e:	89fb      	ldrh	r3, [r7, #14]
 8010860:	4a17      	ldr	r2, [pc, #92]	; (80108c0 <MAP_drive+0x2ec>)
 8010862:	5cd3      	ldrb	r3, [r2, r3]
 8010864:	2b47      	cmp	r3, #71	; 0x47
 8010866:	f200 80d9 	bhi.w	8010a1c <MAP_drive+0x448>
 801086a:	89fb      	ldrh	r3, [r7, #14]
 801086c:	4a14      	ldr	r2, [pc, #80]	; (80108c0 <MAP_drive+0x2ec>)
 801086e:	5cd3      	ldrb	r3, [r2, r3]
 8010870:	2b00      	cmp	r3, #0
 8010872:	f000 80d3 	beq.w	8010a1c <MAP_drive+0x448>
				if( tcom[us_rp+1] == STOP  ){
 8010876:	89fb      	ldrh	r3, [r7, #14]
 8010878:	3301      	adds	r3, #1
 801087a:	4a11      	ldr	r2, [pc, #68]	; (80108c0 <MAP_drive+0x2ec>)
 801087c:	5cd3      	ldrb	r3, [r2, r3]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d120      	bne.n	80108c4 <MAP_drive+0x2f0>
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 8010882:	89fb      	ldrh	r3, [r7, #14]
 8010884:	4a0e      	ldr	r2, [pc, #56]	; (80108c0 <MAP_drive+0x2ec>)
 8010886:	5cd3      	ldrb	r3, [r2, r3]
 8010888:	ee07 3a90 	vmov	s15, r3
 801088c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010890:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010898:	eddf 0a04 	vldr	s1, [pc, #16]	; 80108ac <MAP_drive+0x2d8>
 801089c:	eeb0 0a67 	vmov.f32	s0, s15
 80108a0:	f7fb fb52 	bl	800bf48 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 80108a4:	e25e      	b.n	8010d64 <MAP_drive+0x790>
 80108a6:	bf00      	nop
 80108a8:	2000b284 	.word	0x2000b284
 80108ac:	00000000 	.word	0x00000000
 80108b0:	2000c28c 	.word	0x2000c28c
 80108b4:	200002d4 	.word	0x200002d4
 80108b8:	2000d28c 	.word	0x2000d28c
 80108bc:	88888889 	.word	0x88888889
 80108c0:	2000d2c8 	.word	0x2000d2c8
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 80108c4:	89fb      	ldrh	r3, [r7, #14]
 80108c6:	3301      	adds	r3, #1
 80108c8:	4a90      	ldr	r2, [pc, #576]	; (8010b0c <MAP_drive+0x538>)
 80108ca:	5cd3      	ldrb	r3, [r2, r3]
 80108cc:	2b4c      	cmp	r3, #76	; 0x4c
 80108ce:	d011      	beq.n	80108f4 <MAP_drive+0x320>
 80108d0:	89fb      	ldrh	r3, [r7, #14]
 80108d2:	3301      	adds	r3, #1
 80108d4:	4a8d      	ldr	r2, [pc, #564]	; (8010b0c <MAP_drive+0x538>)
 80108d6:	5cd3      	ldrb	r3, [r2, r3]
 80108d8:	2b4d      	cmp	r3, #77	; 0x4d
 80108da:	d00b      	beq.n	80108f4 <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 80108dc:	89fb      	ldrh	r3, [r7, #14]
 80108de:	3301      	adds	r3, #1
 80108e0:	4a8a      	ldr	r2, [pc, #552]	; (8010b0c <MAP_drive+0x538>)
 80108e2:	5cd3      	ldrb	r3, [r2, r3]
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 80108e4:	2b9b      	cmp	r3, #155	; 0x9b
 80108e6:	d005      	beq.n	80108f4 <MAP_drive+0x320>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 80108e8:	89fb      	ldrh	r3, [r7, #14]
 80108ea:	3301      	adds	r3, #1
 80108ec:	4a87      	ldr	r2, [pc, #540]	; (8010b0c <MAP_drive+0x538>)
 80108ee:	5cd3      	ldrb	r3, [r2, r3]
 80108f0:	2b9c      	cmp	r3, #156	; 0x9c
 80108f2:	d128      	bne.n	8010946 <MAP_drive+0x372>
						bl_isWallCut = MAP_setWallCut( tcom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 80108f4:	89fb      	ldrh	r3, [r7, #14]
 80108f6:	3301      	adds	r3, #1
 80108f8:	4a84      	ldr	r2, [pc, #528]	; (8010b0c <MAP_drive+0x538>)
 80108fa:	5cd3      	ldrb	r3, [r2, r3]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fd fdfd 	bl	800e4fc <MAP_setWallCut>
 8010902:	4603      	mov	r3, r0
 8010904:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8010906:	7b3b      	ldrb	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d01c      	beq.n	8010946 <MAP_drive+0x372>
							bl_isWallCut = FALSE;
 801090c:	2300      	movs	r3, #0
 801090e:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 8010910:	4b7f      	ldr	r3, [pc, #508]	; (8010b10 <MAP_drive+0x53c>)
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	4619      	mov	r1, r3
 8010916:	4a7f      	ldr	r2, [pc, #508]	; (8010b14 <MAP_drive+0x540>)
 8010918:	89fb      	ldrh	r3, [r7, #14]
 801091a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 801091e:	4b7c      	ldr	r3, [pc, #496]	; (8010b10 <MAP_drive+0x53c>)
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	3301      	adds	r3, #1
 8010924:	b29a      	uxth	r2, r3
 8010926:	4b7a      	ldr	r3, [pc, #488]	; (8010b10 <MAP_drive+0x53c>)
 8010928:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 801092a:	4b79      	ldr	r3, [pc, #484]	; (8010b10 <MAP_drive+0x53c>)
 801092c:	881a      	ldrh	r2, [r3, #0]
 801092e:	4b7a      	ldr	r3, [pc, #488]	; (8010b18 <MAP_drive+0x544>)
 8010930:	fba3 1302 	umull	r1, r3, r3, r2
 8010934:	0919      	lsrs	r1, r3, #4
 8010936:	460b      	mov	r3, r1
 8010938:	011b      	lsls	r3, r3, #4
 801093a:	1a5b      	subs	r3, r3, r1
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	b29a      	uxth	r2, r3
 8010942:	4b73      	ldr	r3, [pc, #460]	; (8010b10 <MAP_drive+0x53c>)
 8010944:	801a      	strh	r2, [r3, #0]
					if((tcom[us_rp+1]==R90S)||(tcom[us_rp+1]==L90S)){
 8010946:	89fb      	ldrh	r3, [r7, #14]
 8010948:	3301      	adds	r3, #1
 801094a:	4a70      	ldr	r2, [pc, #448]	; (8010b0c <MAP_drive+0x538>)
 801094c:	5cd3      	ldrb	r3, [r2, r3]
 801094e:	2b4c      	cmp	r3, #76	; 0x4c
 8010950:	d005      	beq.n	801095e <MAP_drive+0x38a>
 8010952:	89fb      	ldrh	r3, [r7, #14]
 8010954:	3301      	adds	r3, #1
 8010956:	4a6d      	ldr	r2, [pc, #436]	; (8010b0c <MAP_drive+0x538>)
 8010958:	5cd3      	ldrb	r3, [r2, r3]
 801095a:	2b4d      	cmp	r3, #77	; 0x4d
 801095c:	d116      	bne.n	801098c <MAP_drive+0x3b8>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSuraStaSpeed(SLA_90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 801095e:	89fb      	ldrh	r3, [r7, #14]
 8010960:	4a6a      	ldr	r2, [pc, #424]	; (8010b0c <MAP_drive+0x538>)
 8010962:	5cd3      	ldrb	r3, [r2, r3]
 8010964:	ee07 3a90 	vmov	s15, r3
 8010968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801096c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010970:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010974:	2000      	movs	r0, #0
 8010976:	f7fc f82d 	bl	800c9d4 <MOT_getSuraStaSpeed>
 801097a:	eef0 7a40 	vmov.f32	s15, s0
 801097e:	eef0 0a67 	vmov.f32	s1, s15
 8010982:	eeb0 0a48 	vmov.f32	s0, s16
 8010986:	f7fb fadf 	bl	800bf48 <MOT_goBlock_FinSpeed>
 801098a:	e046      	b.n	8010a1a <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS45N)||(tcom[us_rp+1]==LS45N)){
 801098c:	89fb      	ldrh	r3, [r7, #14]
 801098e:	3301      	adds	r3, #1
 8010990:	4a5e      	ldr	r2, [pc, #376]	; (8010b0c <MAP_drive+0x538>)
 8010992:	5cd3      	ldrb	r3, [r2, r3]
 8010994:	2b99      	cmp	r3, #153	; 0x99
 8010996:	d005      	beq.n	80109a4 <MAP_drive+0x3d0>
 8010998:	89fb      	ldrh	r3, [r7, #14]
 801099a:	3301      	adds	r3, #1
 801099c:	4a5b      	ldr	r2, [pc, #364]	; (8010b0c <MAP_drive+0x538>)
 801099e:	5cd3      	ldrb	r3, [r2, r3]
 80109a0:	2b9a      	cmp	r3, #154	; 0x9a
 80109a2:	d116      	bne.n	80109d2 <MAP_drive+0x3fe>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSuraStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 80109a4:	89fb      	ldrh	r3, [r7, #14]
 80109a6:	4a59      	ldr	r2, [pc, #356]	; (8010b0c <MAP_drive+0x538>)
 80109a8:	5cd3      	ldrb	r3, [r2, r3]
 80109aa:	ee07 3a90 	vmov	s15, r3
 80109ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80109b6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80109ba:	2001      	movs	r0, #1
 80109bc:	f7fc f80a 	bl	800c9d4 <MOT_getSuraStaSpeed>
 80109c0:	eef0 7a40 	vmov.f32	s15, s0
 80109c4:	eef0 0a67 	vmov.f32	s1, s15
 80109c8:	eeb0 0a48 	vmov.f32	s0, s16
 80109cc:	f7fb fabc 	bl	800bf48 <MOT_goBlock_FinSpeed>
 80109d0:	e023      	b.n	8010a1a <MAP_drive+0x446>
					}else if((tcom[us_rp+1]==RS135N)||(tcom[us_rp+1]==LS135N)){
 80109d2:	89fb      	ldrh	r3, [r7, #14]
 80109d4:	3301      	adds	r3, #1
 80109d6:	4a4d      	ldr	r2, [pc, #308]	; (8010b0c <MAP_drive+0x538>)
 80109d8:	5cd3      	ldrb	r3, [r2, r3]
 80109da:	2b9b      	cmp	r3, #155	; 0x9b
 80109dc:	d006      	beq.n	80109ec <MAP_drive+0x418>
 80109de:	89fb      	ldrh	r3, [r7, #14]
 80109e0:	3301      	adds	r3, #1
 80109e2:	4a4a      	ldr	r2, [pc, #296]	; (8010b0c <MAP_drive+0x538>)
 80109e4:	5cd3      	ldrb	r3, [r2, r3]
 80109e6:	2b9c      	cmp	r3, #156	; 0x9c
 80109e8:	f040 81bc 	bne.w	8010d64 <MAP_drive+0x790>
						MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSuraStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 80109ec:	89fb      	ldrh	r3, [r7, #14]
 80109ee:	4a47      	ldr	r2, [pc, #284]	; (8010b0c <MAP_drive+0x538>)
 80109f0:	5cd3      	ldrb	r3, [r2, r3]
 80109f2:	ee07 3a90 	vmov	s15, r3
 80109f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80109fe:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010a02:	2002      	movs	r0, #2
 8010a04:	f7fb ffe6 	bl	800c9d4 <MOT_getSuraStaSpeed>
 8010a08:	eef0 7a40 	vmov.f32	s15, s0
 8010a0c:	eef0 0a67 	vmov.f32	s1, s15
 8010a10:	eeb0 0a48 	vmov.f32	s0, s16
 8010a14:	f7fb fa98 	bl	800bf48 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 8010a18:	e1a4      	b.n	8010d64 <MAP_drive+0x790>
 8010a1a:	e1a3      	b.n	8010d64 <MAP_drive+0x790>
			else if ( ( tcom[us_rp] <=  NGO71 ) && ( tcom[us_rp] >=  NGO1) )
 8010a1c:	89fb      	ldrh	r3, [r7, #14]
 8010a1e:	4a3b      	ldr	r2, [pc, #236]	; (8010b0c <MAP_drive+0x538>)
 8010a20:	5cd3      	ldrb	r3, [r2, r3]
 8010a22:	2b98      	cmp	r3, #152	; 0x98
 8010a24:	d87a      	bhi.n	8010b1c <MAP_drive+0x548>
 8010a26:	89fb      	ldrh	r3, [r7, #14]
 8010a28:	4a38      	ldr	r2, [pc, #224]	; (8010b0c <MAP_drive+0x538>)
 8010a2a:	5cd3      	ldrb	r3, [r2, r3]
 8010a2c:	2b51      	cmp	r3, #81	; 0x51
 8010a2e:	d975      	bls.n	8010b1c <MAP_drive+0x548>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8010a30:	89fb      	ldrh	r3, [r7, #14]
 8010a32:	3301      	adds	r3, #1
 8010a34:	4a35      	ldr	r2, [pc, #212]	; (8010b0c <MAP_drive+0x538>)
 8010a36:	5cd3      	ldrb	r3, [r2, r3]
 8010a38:	2b9d      	cmp	r3, #157	; 0x9d
 8010a3a:	d005      	beq.n	8010a48 <MAP_drive+0x474>
 8010a3c:	89fb      	ldrh	r3, [r7, #14]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	4a32      	ldr	r2, [pc, #200]	; (8010b0c <MAP_drive+0x538>)
 8010a42:	5cd3      	ldrb	r3, [r2, r3]
 8010a44:	2b9e      	cmp	r3, #158	; 0x9e
 8010a46:	d117      	bne.n	8010a78 <MAP_drive+0x4a4>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSuraStaSpeed(SLA_45) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8010a48:	89fb      	ldrh	r3, [r7, #14]
 8010a4a:	4a30      	ldr	r2, [pc, #192]	; (8010b0c <MAP_drive+0x538>)
 8010a4c:	5cd3      	ldrb	r3, [r2, r3]
 8010a4e:	3b51      	subs	r3, #81	; 0x51
 8010a50:	ee07 3a90 	vmov	s15, r3
 8010a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010a5c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010a60:	2001      	movs	r0, #1
 8010a62:	f7fb ffb7 	bl	800c9d4 <MOT_getSuraStaSpeed>
 8010a66:	eef0 7a40 	vmov.f32	s15, s0
 8010a6a:	eef0 0a67 	vmov.f32	s1, s15
 8010a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a72:	f7fb fa7b 	bl	800bf6c <MOT_goSkewBlock_FinSpeed>
 8010a76:	e048      	b.n	8010b0a <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN135S)||(tcom[us_rp+1]==LN135S)){
 8010a78:	89fb      	ldrh	r3, [r7, #14]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	4a23      	ldr	r2, [pc, #140]	; (8010b0c <MAP_drive+0x538>)
 8010a7e:	5cd3      	ldrb	r3, [r2, r3]
 8010a80:	2b9f      	cmp	r3, #159	; 0x9f
 8010a82:	d005      	beq.n	8010a90 <MAP_drive+0x4bc>
 8010a84:	89fb      	ldrh	r3, [r7, #14]
 8010a86:	3301      	adds	r3, #1
 8010a88:	4a20      	ldr	r2, [pc, #128]	; (8010b0c <MAP_drive+0x538>)
 8010a8a:	5cd3      	ldrb	r3, [r2, r3]
 8010a8c:	2ba0      	cmp	r3, #160	; 0xa0
 8010a8e:	d117      	bne.n	8010ac0 <MAP_drive+0x4ec>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSuraStaSpeed(SLA_135) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8010a90:	89fb      	ldrh	r3, [r7, #14]
 8010a92:	4a1e      	ldr	r2, [pc, #120]	; (8010b0c <MAP_drive+0x538>)
 8010a94:	5cd3      	ldrb	r3, [r2, r3]
 8010a96:	3b51      	subs	r3, #81	; 0x51
 8010a98:	ee07 3a90 	vmov	s15, r3
 8010a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010aa4:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010aa8:	2002      	movs	r0, #2
 8010aaa:	f7fb ff93 	bl	800c9d4 <MOT_getSuraStaSpeed>
 8010aae:	eef0 7a40 	vmov.f32	s15, s0
 8010ab2:	eef0 0a67 	vmov.f32	s1, s15
 8010ab6:	eeb0 0a48 	vmov.f32	s0, s16
 8010aba:	f7fb fa57 	bl	800bf6c <MOT_goSkewBlock_FinSpeed>
 8010abe:	e024      	b.n	8010b0a <MAP_drive+0x536>
				}else if((tcom[us_rp+1]==RN90N)||(tcom[us_rp+1]==LN90N)){
 8010ac0:	89fb      	ldrh	r3, [r7, #14]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	4a11      	ldr	r2, [pc, #68]	; (8010b0c <MAP_drive+0x538>)
 8010ac6:	5cd3      	ldrb	r3, [r2, r3]
 8010ac8:	2ba1      	cmp	r3, #161	; 0xa1
 8010aca:	d006      	beq.n	8010ada <MAP_drive+0x506>
 8010acc:	89fb      	ldrh	r3, [r7, #14]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	4a0e      	ldr	r2, [pc, #56]	; (8010b0c <MAP_drive+0x538>)
 8010ad2:	5cd3      	ldrb	r3, [r2, r3]
 8010ad4:	2ba2      	cmp	r3, #162	; 0xa2
 8010ad6:	f040 8147 	bne.w	8010d68 <MAP_drive+0x794>
					MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSuraStaSpeed(SLA_N90) );		// 直線走行コマンド、半区間前進（最終速度あり）
 8010ada:	89fb      	ldrh	r3, [r7, #14]
 8010adc:	4a0b      	ldr	r2, [pc, #44]	; (8010b0c <MAP_drive+0x538>)
 8010ade:	5cd3      	ldrb	r3, [r2, r3]
 8010ae0:	3b51      	subs	r3, #81	; 0x51
 8010ae2:	ee07 3a90 	vmov	s15, r3
 8010ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010aee:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010af2:	2003      	movs	r0, #3
 8010af4:	f7fb ff6e 	bl	800c9d4 <MOT_getSuraStaSpeed>
 8010af8:	eef0 7a40 	vmov.f32	s15, s0
 8010afc:	eef0 0a67 	vmov.f32	s1, s15
 8010b00:	eeb0 0a48 	vmov.f32	s0, s16
 8010b04:	f7fb fa32 	bl	800bf6c <MOT_goSkewBlock_FinSpeed>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8010b08:	e12e      	b.n	8010d68 <MAP_drive+0x794>
 8010b0a:	e12d      	b.n	8010d68 <MAP_drive+0x794>
 8010b0c:	2000d2c8 	.word	0x2000d2c8
 8010b10:	200002d4 	.word	0x200002d4
 8010b14:	2000d28c 	.word	0x2000d28c
 8010b18:	88888889 	.word	0x88888889
				switch( tcom[us_rp] )
 8010b1c:	89fb      	ldrh	r3, [r7, #14]
 8010b1e:	4aa0      	ldr	r2, [pc, #640]	; (8010da0 <MAP_drive+0x7cc>)
 8010b20:	5cd3      	ldrb	r3, [r2, r3]
 8010b22:	3b4c      	subs	r3, #76	; 0x4c
 8010b24:	2b56      	cmp	r3, #86	; 0x56
 8010b26:	f200 8120 	bhi.w	8010d6a <MAP_drive+0x796>
 8010b2a:	a201      	add	r2, pc, #4	; (adr r2, 8010b30 <MAP_drive+0x55c>)
 8010b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b30:	08010c8d 	.word	0x08010c8d
 8010b34:	08010c9f 	.word	0x08010c9f
 8010b38:	08010d6b 	.word	0x08010d6b
 8010b3c:	08010d6b 	.word	0x08010d6b
 8010b40:	08010d6b 	.word	0x08010d6b
 8010b44:	08010d6b 	.word	0x08010d6b
 8010b48:	08010d6b 	.word	0x08010d6b
 8010b4c:	08010d6b 	.word	0x08010d6b
 8010b50:	08010d6b 	.word	0x08010d6b
 8010b54:	08010d6b 	.word	0x08010d6b
 8010b58:	08010d6b 	.word	0x08010d6b
 8010b5c:	08010d6b 	.word	0x08010d6b
 8010b60:	08010d6b 	.word	0x08010d6b
 8010b64:	08010d6b 	.word	0x08010d6b
 8010b68:	08010d6b 	.word	0x08010d6b
 8010b6c:	08010d6b 	.word	0x08010d6b
 8010b70:	08010d6b 	.word	0x08010d6b
 8010b74:	08010d6b 	.word	0x08010d6b
 8010b78:	08010d6b 	.word	0x08010d6b
 8010b7c:	08010d6b 	.word	0x08010d6b
 8010b80:	08010d6b 	.word	0x08010d6b
 8010b84:	08010d6b 	.word	0x08010d6b
 8010b88:	08010d6b 	.word	0x08010d6b
 8010b8c:	08010d6b 	.word	0x08010d6b
 8010b90:	08010d6b 	.word	0x08010d6b
 8010b94:	08010d6b 	.word	0x08010d6b
 8010b98:	08010d6b 	.word	0x08010d6b
 8010b9c:	08010d6b 	.word	0x08010d6b
 8010ba0:	08010d6b 	.word	0x08010d6b
 8010ba4:	08010d6b 	.word	0x08010d6b
 8010ba8:	08010d6b 	.word	0x08010d6b
 8010bac:	08010d6b 	.word	0x08010d6b
 8010bb0:	08010d6b 	.word	0x08010d6b
 8010bb4:	08010d6b 	.word	0x08010d6b
 8010bb8:	08010d6b 	.word	0x08010d6b
 8010bbc:	08010d6b 	.word	0x08010d6b
 8010bc0:	08010d6b 	.word	0x08010d6b
 8010bc4:	08010d6b 	.word	0x08010d6b
 8010bc8:	08010d6b 	.word	0x08010d6b
 8010bcc:	08010d6b 	.word	0x08010d6b
 8010bd0:	08010d6b 	.word	0x08010d6b
 8010bd4:	08010d6b 	.word	0x08010d6b
 8010bd8:	08010d6b 	.word	0x08010d6b
 8010bdc:	08010d6b 	.word	0x08010d6b
 8010be0:	08010d6b 	.word	0x08010d6b
 8010be4:	08010d6b 	.word	0x08010d6b
 8010be8:	08010d6b 	.word	0x08010d6b
 8010bec:	08010d6b 	.word	0x08010d6b
 8010bf0:	08010d6b 	.word	0x08010d6b
 8010bf4:	08010d6b 	.word	0x08010d6b
 8010bf8:	08010d6b 	.word	0x08010d6b
 8010bfc:	08010d6b 	.word	0x08010d6b
 8010c00:	08010d6b 	.word	0x08010d6b
 8010c04:	08010d6b 	.word	0x08010d6b
 8010c08:	08010d6b 	.word	0x08010d6b
 8010c0c:	08010d6b 	.word	0x08010d6b
 8010c10:	08010d6b 	.word	0x08010d6b
 8010c14:	08010d6b 	.word	0x08010d6b
 8010c18:	08010d6b 	.word	0x08010d6b
 8010c1c:	08010d6b 	.word	0x08010d6b
 8010c20:	08010d6b 	.word	0x08010d6b
 8010c24:	08010d6b 	.word	0x08010d6b
 8010c28:	08010d6b 	.word	0x08010d6b
 8010c2c:	08010d6b 	.word	0x08010d6b
 8010c30:	08010d6b 	.word	0x08010d6b
 8010c34:	08010d6b 	.word	0x08010d6b
 8010c38:	08010d6b 	.word	0x08010d6b
 8010c3c:	08010d6b 	.word	0x08010d6b
 8010c40:	08010d6b 	.word	0x08010d6b
 8010c44:	08010d6b 	.word	0x08010d6b
 8010c48:	08010d6b 	.word	0x08010d6b
 8010c4c:	08010d6b 	.word	0x08010d6b
 8010c50:	08010d6b 	.word	0x08010d6b
 8010c54:	08010d6b 	.word	0x08010d6b
 8010c58:	08010d6b 	.word	0x08010d6b
 8010c5c:	08010d6b 	.word	0x08010d6b
 8010c60:	08010d6b 	.word	0x08010d6b
 8010c64:	08010cb1 	.word	0x08010cb1
 8010c68:	08010cc3 	.word	0x08010cc3
 8010c6c:	08010cd5 	.word	0x08010cd5
 8010c70:	08010ce7 	.word	0x08010ce7
 8010c74:	08010cf9 	.word	0x08010cf9
 8010c78:	08010d0b 	.word	0x08010d0b
 8010c7c:	08010d1d 	.word	0x08010d1d
 8010c80:	08010d2f 	.word	0x08010d2f
 8010c84:	08010d41 	.word	0x08010d41
 8010c88:	08010d53 	.word	0x08010d53
					case R90S:		MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );			break;
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f7f2 f9b1 	bl	8002ff4 <PARAM_getSra>
 8010c92:	4603      	mov	r3, r0
 8010c94:	4619      	mov	r1, r3
 8010c96:	2000      	movs	r0, #0
 8010c98:	f7fb ff4a 	bl	800cb30 <MOT_goSla>
 8010c9c:	e065      	b.n	8010d6a <MAP_drive+0x796>
					case L90S:		MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );			break;
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	f7f2 f9a8 	bl	8002ff4 <PARAM_getSra>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	2001      	movs	r0, #1
 8010caa:	f7fb ff41 	bl	800cb30 <MOT_goSla>
 8010cae:	e05c      	b.n	8010d6a <MAP_drive+0x796>
					case RS45N:		MOT_goSla( MOT_R45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	f7f2 f99f 	bl	8002ff4 <PARAM_getSra>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	4619      	mov	r1, r3
 8010cba:	2002      	movs	r0, #2
 8010cbc:	f7fb ff38 	bl	800cb30 <MOT_goSla>
 8010cc0:	e053      	b.n	8010d6a <MAP_drive+0x796>
					case LS45N:		MOT_goSla( MOT_L45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8010cc2:	2001      	movs	r0, #1
 8010cc4:	f7f2 f996 	bl	8002ff4 <PARAM_getSra>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	4619      	mov	r1, r3
 8010ccc:	2003      	movs	r0, #3
 8010cce:	f7fb ff2f 	bl	800cb30 <MOT_goSla>
 8010cd2:	e04a      	b.n	8010d6a <MAP_drive+0x796>
					case RS135N:	MOT_goSla( MOT_R135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 8010cd4:	2002      	movs	r0, #2
 8010cd6:	f7f2 f98d 	bl	8002ff4 <PARAM_getSra>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	4619      	mov	r1, r3
 8010cde:	2008      	movs	r0, #8
 8010ce0:	f7fb ff26 	bl	800cb30 <MOT_goSla>
 8010ce4:	e041      	b.n	8010d6a <MAP_drive+0x796>
					case LS135N:	MOT_goSla( MOT_L135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 8010ce6:	2002      	movs	r0, #2
 8010ce8:	f7f2 f984 	bl	8002ff4 <PARAM_getSra>
 8010cec:	4603      	mov	r3, r0
 8010cee:	4619      	mov	r1, r3
 8010cf0:	2009      	movs	r0, #9
 8010cf2:	f7fb ff1d 	bl	800cb30 <MOT_goSla>
 8010cf6:	e038      	b.n	8010d6a <MAP_drive+0x796>
					case RN45S:		MOT_goSla( MOT_R45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 8010cf8:	2001      	movs	r0, #1
 8010cfa:	f7f2 f97b 	bl	8002ff4 <PARAM_getSra>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	4619      	mov	r1, r3
 8010d02:	2004      	movs	r0, #4
 8010d04:	f7fb ff14 	bl	800cb30 <MOT_goSla>
 8010d08:	e02f      	b.n	8010d6a <MAP_drive+0x796>
					case LN45S:		MOT_goSla( MOT_L45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	f7f2 f972 	bl	8002ff4 <PARAM_getSra>
 8010d10:	4603      	mov	r3, r0
 8010d12:	4619      	mov	r1, r3
 8010d14:	2005      	movs	r0, #5
 8010d16:	f7fb ff0b 	bl	800cb30 <MOT_goSla>
 8010d1a:	e026      	b.n	8010d6a <MAP_drive+0x796>
					case RN135S:	MOT_goSla( MOT_R135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 8010d1c:	2002      	movs	r0, #2
 8010d1e:	f7f2 f969 	bl	8002ff4 <PARAM_getSra>
 8010d22:	4603      	mov	r3, r0
 8010d24:	4619      	mov	r1, r3
 8010d26:	200a      	movs	r0, #10
 8010d28:	f7fb ff02 	bl	800cb30 <MOT_goSla>
 8010d2c:	e01d      	b.n	8010d6a <MAP_drive+0x796>
					case LN135S:	MOT_goSla( MOT_L135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 8010d2e:	2002      	movs	r0, #2
 8010d30:	f7f2 f960 	bl	8002ff4 <PARAM_getSra>
 8010d34:	4603      	mov	r3, r0
 8010d36:	4619      	mov	r1, r3
 8010d38:	200b      	movs	r0, #11
 8010d3a:	f7fb fef9 	bl	800cb30 <MOT_goSla>
 8010d3e:	e014      	b.n	8010d6a <MAP_drive+0x796>
					case RN90N:		MOT_goSla( MOT_R90S_N, PARAM_getSra( SLA_N90 ) ); 		break;
 8010d40:	2003      	movs	r0, #3
 8010d42:	f7f2 f957 	bl	8002ff4 <PARAM_getSra>
 8010d46:	4603      	mov	r3, r0
 8010d48:	4619      	mov	r1, r3
 8010d4a:	2006      	movs	r0, #6
 8010d4c:	f7fb fef0 	bl	800cb30 <MOT_goSla>
 8010d50:	e00b      	b.n	8010d6a <MAP_drive+0x796>
					case LN90N:		MOT_goSla( MOT_L90S_N, PARAM_getSra( SLA_N90 ) );		break;
 8010d52:	2003      	movs	r0, #3
 8010d54:	f7f2 f94e 	bl	8002ff4 <PARAM_getSra>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	2007      	movs	r0, #7
 8010d5e:	f7fb fee7 	bl	800cb30 <MOT_goSla>
 8010d62:	e002      	b.n	8010d6a <MAP_drive+0x796>
				if( tcom[us_rp+1] == STOP  ){
 8010d64:	bf00      	nop
 8010d66:	e000      	b.n	8010d6a <MAP_drive+0x796>
				if((tcom[us_rp+1]==RN45S)||(tcom[us_rp+1]==LN45S)){
 8010d68:	bf00      	nop
			us_rp++;
 8010d6a:	89fb      	ldrh	r3, [r7, #14]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE ){
 8010d70:	f7f7 fb08 	bl	8008384 <SYS_isOutOfCtrl>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f43f ad57 	beq.w	801082a <MAP_drive+0x256>
				CTRL_stop();
 8010d7c:	f7f4 fcee 	bl	800575c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 8010d80:	2000      	movs	r0, #0
 8010d82:	f7f7 fb31 	bl	80083e8 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010d86:	2001      	movs	r0, #1
 8010d88:	f7f7 fb2e 	bl	80083e8 <DCM_brakeMot>
				break;
 8010d8c:	e002      	b.n	8010d94 <MAP_drive+0x7c0>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 8010d8e:	bf00      	nop
 8010d90:	e000      	b.n	8010d94 <MAP_drive+0x7c0>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8010d92:	bf00      	nop
}
 8010d94:	bf00      	nop
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	ecbd 8b02 	vpop	{d8}
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	2000d2c8 	.word	0x2000d2c8

08010da4 <MAP_searchCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 8010da4:	b490      	push	{r4, r7}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4608      	mov	r0, r1
 8010dae:	4611      	mov	r1, r2
 8010db0:	461a      	mov	r2, r3
 8010db2:	4623      	mov	r3, r4
 8010db4:	71fb      	strb	r3, [r7, #7]
 8010db6:	4603      	mov	r3, r0
 8010db8:	71bb      	strb	r3, [r7, #6]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	717b      	strb	r3, [r7, #5]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	73bb      	strb	r3, [r7, #14]
	us_pt = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	81bb      	strh	r3, [r7, #12]
//	printf("mx%d,my%d\n", uc_staX, uc_staY);
	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_cmap[uc_staY][uc_staX] - 1;
 8010dca:	79ba      	ldrb	r2, [r7, #6]
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
 8010dce:	499b      	ldr	r1, [pc, #620]	; (801103c <MAP_searchCmdList+0x298>)
 8010dd0:	0152      	lsls	r2, r2, #5
 8010dd2:	4413      	add	r3, r2
 8010dd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	817b      	strh	r3, [r7, #10]
		if ((g_sysMap[uc_staY][uc_staX]&0xf0) != 0xf0){
 8010ddc:	79ba      	ldrb	r2, [r7, #6]
 8010dde:	79fb      	ldrb	r3, [r7, #7]
 8010de0:	4997      	ldr	r1, [pc, #604]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010de2:	0152      	lsls	r2, r2, #5
 8010de4:	440a      	add	r2, r1
 8010de6:	4413      	add	r3, r2
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010dee:	2bf0      	cmp	r3, #240	; 0xf0
 8010df0:	d006      	beq.n	8010e00 <MAP_searchCmdList+0x5c>
			Return_X = uc_staX;
 8010df2:	4a94      	ldr	r2, [pc, #592]	; (8011044 <MAP_searchCmdList+0x2a0>)
 8010df4:	79fb      	ldrb	r3, [r7, #7]
 8010df6:	7013      	strb	r3, [r2, #0]
			Return_Y = uc_staY;
 8010df8:	4a93      	ldr	r2, [pc, #588]	; (8011048 <MAP_searchCmdList+0x2a4>)
 8010dfa:	79bb      	ldrb	r3, [r7, #6]
 8010dfc:	7013      	strb	r3, [r2, #0]
			break;
 8010dfe:	e1dd      	b.n	80111bc <MAP_searchCmdList+0x418>
		}

		if (en_staDir == NORTH) {
 8010e00:	797b      	ldrb	r3, [r7, #5]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d164      	bne.n	8010ed0 <MAP_searchCmdList+0x12c>
			if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8010e06:	79ba      	ldrb	r2, [r7, #6]
 8010e08:	79fb      	ldrb	r3, [r7, #7]
 8010e0a:	498d      	ldr	r1, [pc, #564]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010e0c:	0152      	lsls	r2, r2, #5
 8010e0e:	440a      	add	r2, r1
 8010e10:	4413      	add	r3, r2
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	f003 0311 	and.w	r3, r3, #17
 8010e18:	2b10      	cmp	r3, #16
 8010e1a:	d10d      	bne.n	8010e38 <MAP_searchCmdList+0x94>
 8010e1c:	79bb      	ldrb	r3, [r7, #6]
 8010e1e:	1c5a      	adds	r2, r3, #1
 8010e20:	79fb      	ldrb	r3, [r7, #7]
 8010e22:	4986      	ldr	r1, [pc, #536]	; (801103c <MAP_searchCmdList+0x298>)
 8010e24:	0152      	lsls	r2, r2, #5
 8010e26:	4413      	add	r3, r2
 8010e28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e2c:	897a      	ldrh	r2, [r7, #10]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d102      	bne.n	8010e38 <MAP_searchCmdList+0x94>
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]
 8010e36:	e18b      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8010e38:	79ba      	ldrb	r2, [r7, #6]
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	4980      	ldr	r1, [pc, #512]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010e3e:	0152      	lsls	r2, r2, #5
 8010e40:	440a      	add	r2, r1
 8010e42:	4413      	add	r3, r2
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010e4a:	2b20      	cmp	r3, #32
 8010e4c:	d10d      	bne.n	8010e6a <MAP_searchCmdList+0xc6>
 8010e4e:	79ba      	ldrb	r2, [r7, #6]
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	3301      	adds	r3, #1
 8010e54:	4979      	ldr	r1, [pc, #484]	; (801103c <MAP_searchCmdList+0x298>)
 8010e56:	0152      	lsls	r2, r2, #5
 8010e58:	4413      	add	r3, r2
 8010e5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e5e:	897a      	ldrh	r2, [r7, #10]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d102      	bne.n	8010e6a <MAP_searchCmdList+0xc6>
 8010e64:	2301      	movs	r3, #1
 8010e66:	73fb      	strb	r3, [r7, #15]
 8010e68:	e172      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8010e6a:	79ba      	ldrb	r2, [r7, #6]
 8010e6c:	79fb      	ldrb	r3, [r7, #7]
 8010e6e:	4974      	ldr	r1, [pc, #464]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010e70:	0152      	lsls	r2, r2, #5
 8010e72:	440a      	add	r2, r1
 8010e74:	4413      	add	r3, r2
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010e7c:	2b80      	cmp	r3, #128	; 0x80
 8010e7e:	d10d      	bne.n	8010e9c <MAP_searchCmdList+0xf8>
 8010e80:	79ba      	ldrb	r2, [r7, #6]
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	496d      	ldr	r1, [pc, #436]	; (801103c <MAP_searchCmdList+0x298>)
 8010e88:	0152      	lsls	r2, r2, #5
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010e90:	897a      	ldrh	r2, [r7, #10]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d102      	bne.n	8010e9c <MAP_searchCmdList+0xf8>
 8010e96:	2303      	movs	r3, #3
 8010e98:	73fb      	strb	r3, [r7, #15]
 8010e9a:	e159      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010e9c:	79ba      	ldrb	r2, [r7, #6]
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	4967      	ldr	r1, [pc, #412]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010ea2:	0152      	lsls	r2, r2, #5
 8010ea4:	440a      	add	r2, r1
 8010ea6:	4413      	add	r3, r2
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010eae:	2b40      	cmp	r3, #64	; 0x40
 8010eb0:	d10d      	bne.n	8010ece <MAP_searchCmdList+0x12a>
 8010eb2:	79bb      	ldrb	r3, [r7, #6]
 8010eb4:	1e5a      	subs	r2, r3, #1
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	4960      	ldr	r1, [pc, #384]	; (801103c <MAP_searchCmdList+0x298>)
 8010eba:	0152      	lsls	r2, r2, #5
 8010ebc:	4413      	add	r3, r2
 8010ebe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ec2:	897a      	ldrh	r2, [r7, #10]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d102      	bne.n	8010ece <MAP_searchCmdList+0x12a>
 8010ec8:	2302      	movs	r3, #2
 8010eca:	73fb      	strb	r3, [r7, #15]
 8010ecc:	e140      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else   while (1);
 8010ece:	e7fe      	b.n	8010ece <MAP_searchCmdList+0x12a>
		}
		else if (en_staDir == EAST) {
 8010ed0:	797b      	ldrb	r3, [r7, #5]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d164      	bne.n	8010fa0 <MAP_searchCmdList+0x1fc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8010ed6:	79ba      	ldrb	r2, [r7, #6]
 8010ed8:	79fb      	ldrb	r3, [r7, #7]
 8010eda:	4959      	ldr	r1, [pc, #356]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010edc:	0152      	lsls	r2, r2, #5
 8010ede:	440a      	add	r2, r1
 8010ee0:	4413      	add	r3, r2
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010ee8:	2b20      	cmp	r3, #32
 8010eea:	d10d      	bne.n	8010f08 <MAP_searchCmdList+0x164>
 8010eec:	79ba      	ldrb	r2, [r7, #6]
 8010eee:	79fb      	ldrb	r3, [r7, #7]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	4952      	ldr	r1, [pc, #328]	; (801103c <MAP_searchCmdList+0x298>)
 8010ef4:	0152      	lsls	r2, r2, #5
 8010ef6:	4413      	add	r3, r2
 8010ef8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010efc:	897a      	ldrh	r2, [r7, #10]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d102      	bne.n	8010f08 <MAP_searchCmdList+0x164>
 8010f02:	2301      	movs	r3, #1
 8010f04:	73fb      	strb	r3, [r7, #15]
 8010f06:	e123      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8010f08:	79ba      	ldrb	r2, [r7, #6]
 8010f0a:	79fb      	ldrb	r3, [r7, #7]
 8010f0c:	494c      	ldr	r1, [pc, #304]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010f0e:	0152      	lsls	r2, r2, #5
 8010f10:	440a      	add	r2, r1
 8010f12:	4413      	add	r3, r2
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	f003 0311 	and.w	r3, r3, #17
 8010f1a:	2b10      	cmp	r3, #16
 8010f1c:	d10d      	bne.n	8010f3a <MAP_searchCmdList+0x196>
 8010f1e:	79bb      	ldrb	r3, [r7, #6]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	79fb      	ldrb	r3, [r7, #7]
 8010f24:	4945      	ldr	r1, [pc, #276]	; (801103c <MAP_searchCmdList+0x298>)
 8010f26:	0152      	lsls	r2, r2, #5
 8010f28:	4413      	add	r3, r2
 8010f2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f2e:	897a      	ldrh	r2, [r7, #10]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d102      	bne.n	8010f3a <MAP_searchCmdList+0x196>
 8010f34:	2300      	movs	r3, #0
 8010f36:	73fb      	strb	r3, [r7, #15]
 8010f38:	e10a      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010f3a:	79ba      	ldrb	r2, [r7, #6]
 8010f3c:	79fb      	ldrb	r3, [r7, #7]
 8010f3e:	4940      	ldr	r1, [pc, #256]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010f40:	0152      	lsls	r2, r2, #5
 8010f42:	440a      	add	r2, r1
 8010f44:	4413      	add	r3, r2
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010f4c:	2b40      	cmp	r3, #64	; 0x40
 8010f4e:	d10d      	bne.n	8010f6c <MAP_searchCmdList+0x1c8>
 8010f50:	79bb      	ldrb	r3, [r7, #6]
 8010f52:	1e5a      	subs	r2, r3, #1
 8010f54:	79fb      	ldrb	r3, [r7, #7]
 8010f56:	4939      	ldr	r1, [pc, #228]	; (801103c <MAP_searchCmdList+0x298>)
 8010f58:	0152      	lsls	r2, r2, #5
 8010f5a:	4413      	add	r3, r2
 8010f5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f60:	897a      	ldrh	r2, [r7, #10]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d102      	bne.n	8010f6c <MAP_searchCmdList+0x1c8>
 8010f66:	2302      	movs	r3, #2
 8010f68:	73fb      	strb	r3, [r7, #15]
 8010f6a:	e0f1      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8010f6c:	79ba      	ldrb	r2, [r7, #6]
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	4933      	ldr	r1, [pc, #204]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010f72:	0152      	lsls	r2, r2, #5
 8010f74:	440a      	add	r2, r1
 8010f76:	4413      	add	r3, r2
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010f7e:	2b80      	cmp	r3, #128	; 0x80
 8010f80:	d10d      	bne.n	8010f9e <MAP_searchCmdList+0x1fa>
 8010f82:	79ba      	ldrb	r2, [r7, #6]
 8010f84:	79fb      	ldrb	r3, [r7, #7]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	492c      	ldr	r1, [pc, #176]	; (801103c <MAP_searchCmdList+0x298>)
 8010f8a:	0152      	lsls	r2, r2, #5
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f92:	897a      	ldrh	r2, [r7, #10]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d102      	bne.n	8010f9e <MAP_searchCmdList+0x1fa>
 8010f98:	2303      	movs	r3, #3
 8010f9a:	73fb      	strb	r3, [r7, #15]
 8010f9c:	e0d8      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else   while (1);
 8010f9e:	e7fe      	b.n	8010f9e <MAP_searchCmdList+0x1fa>
		}
		else if (en_staDir == SOUTH) {
 8010fa0:	797b      	ldrb	r3, [r7, #5]
 8010fa2:	2b02      	cmp	r3, #2
 8010fa4:	d16c      	bne.n	8011080 <MAP_searchCmdList+0x2dc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010fa6:	79ba      	ldrb	r2, [r7, #6]
 8010fa8:	79fb      	ldrb	r3, [r7, #7]
 8010faa:	4925      	ldr	r1, [pc, #148]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010fac:	0152      	lsls	r2, r2, #5
 8010fae:	440a      	add	r2, r1
 8010fb0:	4413      	add	r3, r2
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010fb8:	2b40      	cmp	r3, #64	; 0x40
 8010fba:	d10d      	bne.n	8010fd8 <MAP_searchCmdList+0x234>
 8010fbc:	79bb      	ldrb	r3, [r7, #6]
 8010fbe:	1e5a      	subs	r2, r3, #1
 8010fc0:	79fb      	ldrb	r3, [r7, #7]
 8010fc2:	491e      	ldr	r1, [pc, #120]	; (801103c <MAP_searchCmdList+0x298>)
 8010fc4:	0152      	lsls	r2, r2, #5
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fcc:	897a      	ldrh	r2, [r7, #10]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d102      	bne.n	8010fd8 <MAP_searchCmdList+0x234>
 8010fd2:	2302      	movs	r3, #2
 8010fd4:	73fb      	strb	r3, [r7, #15]
 8010fd6:	e0bb      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8010fd8:	79ba      	ldrb	r2, [r7, #6]
 8010fda:	79fb      	ldrb	r3, [r7, #7]
 8010fdc:	4918      	ldr	r1, [pc, #96]	; (8011040 <MAP_searchCmdList+0x29c>)
 8010fde:	0152      	lsls	r2, r2, #5
 8010fe0:	440a      	add	r2, r1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010fea:	2b20      	cmp	r3, #32
 8010fec:	d10d      	bne.n	801100a <MAP_searchCmdList+0x266>
 8010fee:	79ba      	ldrb	r2, [r7, #6]
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	4911      	ldr	r1, [pc, #68]	; (801103c <MAP_searchCmdList+0x298>)
 8010ff6:	0152      	lsls	r2, r2, #5
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ffe:	897a      	ldrh	r2, [r7, #10]
 8011000:	429a      	cmp	r2, r3
 8011002:	d102      	bne.n	801100a <MAP_searchCmdList+0x266>
 8011004:	2301      	movs	r3, #1
 8011006:	73fb      	strb	r3, [r7, #15]
 8011008:	e0a2      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 801100a:	79ba      	ldrb	r2, [r7, #6]
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	490c      	ldr	r1, [pc, #48]	; (8011040 <MAP_searchCmdList+0x29c>)
 8011010:	0152      	lsls	r2, r2, #5
 8011012:	440a      	add	r2, r1
 8011014:	4413      	add	r3, r2
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801101c:	2b80      	cmp	r3, #128	; 0x80
 801101e:	d115      	bne.n	801104c <MAP_searchCmdList+0x2a8>
 8011020:	79ba      	ldrb	r2, [r7, #6]
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	3b01      	subs	r3, #1
 8011026:	4905      	ldr	r1, [pc, #20]	; (801103c <MAP_searchCmdList+0x298>)
 8011028:	0152      	lsls	r2, r2, #5
 801102a:	4413      	add	r3, r2
 801102c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011030:	897a      	ldrh	r2, [r7, #10]
 8011032:	429a      	cmp	r2, r3
 8011034:	d10a      	bne.n	801104c <MAP_searchCmdList+0x2a8>
 8011036:	2303      	movs	r3, #3
 8011038:	73fb      	strb	r3, [r7, #15]
 801103a:	e089      	b.n	8011150 <MAP_searchCmdList+0x3ac>
 801103c:	20000c78 	.word	0x20000c78
 8011040:	20000854 	.word	0x20000854
 8011044:	2000042d 	.word	0x2000042d
 8011048:	20000839 	.word	0x20000839
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 801104c:	79ba      	ldrb	r2, [r7, #6]
 801104e:	79fb      	ldrb	r3, [r7, #7]
 8011050:	495e      	ldr	r1, [pc, #376]	; (80111cc <MAP_searchCmdList+0x428>)
 8011052:	0152      	lsls	r2, r2, #5
 8011054:	440a      	add	r2, r1
 8011056:	4413      	add	r3, r2
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	f003 0311 	and.w	r3, r3, #17
 801105e:	2b10      	cmp	r3, #16
 8011060:	d10d      	bne.n	801107e <MAP_searchCmdList+0x2da>
 8011062:	79bb      	ldrb	r3, [r7, #6]
 8011064:	1c5a      	adds	r2, r3, #1
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	4959      	ldr	r1, [pc, #356]	; (80111d0 <MAP_searchCmdList+0x42c>)
 801106a:	0152      	lsls	r2, r2, #5
 801106c:	4413      	add	r3, r2
 801106e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011072:	897a      	ldrh	r2, [r7, #10]
 8011074:	429a      	cmp	r2, r3
 8011076:	d102      	bne.n	801107e <MAP_searchCmdList+0x2da>
 8011078:	2300      	movs	r3, #0
 801107a:	73fb      	strb	r3, [r7, #15]
 801107c:	e068      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else   while (1);
 801107e:	e7fe      	b.n	801107e <MAP_searchCmdList+0x2da>
		}
		else if (en_staDir == WEST) {
 8011080:	797b      	ldrb	r3, [r7, #5]
 8011082:	2b03      	cmp	r3, #3
 8011084:	d164      	bne.n	8011150 <MAP_searchCmdList+0x3ac>
			if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8011086:	79ba      	ldrb	r2, [r7, #6]
 8011088:	79fb      	ldrb	r3, [r7, #7]
 801108a:	4950      	ldr	r1, [pc, #320]	; (80111cc <MAP_searchCmdList+0x428>)
 801108c:	0152      	lsls	r2, r2, #5
 801108e:	440a      	add	r2, r1
 8011090:	4413      	add	r3, r2
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8011098:	2b80      	cmp	r3, #128	; 0x80
 801109a:	d10d      	bne.n	80110b8 <MAP_searchCmdList+0x314>
 801109c:	79ba      	ldrb	r2, [r7, #6]
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	494b      	ldr	r1, [pc, #300]	; (80111d0 <MAP_searchCmdList+0x42c>)
 80110a4:	0152      	lsls	r2, r2, #5
 80110a6:	4413      	add	r3, r2
 80110a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80110ac:	897a      	ldrh	r2, [r7, #10]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d102      	bne.n	80110b8 <MAP_searchCmdList+0x314>
 80110b2:	2303      	movs	r3, #3
 80110b4:	73fb      	strb	r3, [r7, #15]
 80110b6:	e04b      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80110b8:	79ba      	ldrb	r2, [r7, #6]
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	4943      	ldr	r1, [pc, #268]	; (80111cc <MAP_searchCmdList+0x428>)
 80110be:	0152      	lsls	r2, r2, #5
 80110c0:	440a      	add	r2, r1
 80110c2:	4413      	add	r3, r2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	f003 0311 	and.w	r3, r3, #17
 80110ca:	2b10      	cmp	r3, #16
 80110cc:	d10d      	bne.n	80110ea <MAP_searchCmdList+0x346>
 80110ce:	79bb      	ldrb	r3, [r7, #6]
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	79fb      	ldrb	r3, [r7, #7]
 80110d4:	493e      	ldr	r1, [pc, #248]	; (80111d0 <MAP_searchCmdList+0x42c>)
 80110d6:	0152      	lsls	r2, r2, #5
 80110d8:	4413      	add	r3, r2
 80110da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80110de:	897a      	ldrh	r2, [r7, #10]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d102      	bne.n	80110ea <MAP_searchCmdList+0x346>
 80110e4:	2300      	movs	r3, #0
 80110e6:	73fb      	strb	r3, [r7, #15]
 80110e8:	e032      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 80110ea:	79ba      	ldrb	r2, [r7, #6]
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	4937      	ldr	r1, [pc, #220]	; (80111cc <MAP_searchCmdList+0x428>)
 80110f0:	0152      	lsls	r2, r2, #5
 80110f2:	440a      	add	r2, r1
 80110f4:	4413      	add	r3, r2
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80110fc:	2b40      	cmp	r3, #64	; 0x40
 80110fe:	d10d      	bne.n	801111c <MAP_searchCmdList+0x378>
 8011100:	79bb      	ldrb	r3, [r7, #6]
 8011102:	1e5a      	subs	r2, r3, #1
 8011104:	79fb      	ldrb	r3, [r7, #7]
 8011106:	4932      	ldr	r1, [pc, #200]	; (80111d0 <MAP_searchCmdList+0x42c>)
 8011108:	0152      	lsls	r2, r2, #5
 801110a:	4413      	add	r3, r2
 801110c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011110:	897a      	ldrh	r2, [r7, #10]
 8011112:	429a      	cmp	r2, r3
 8011114:	d102      	bne.n	801111c <MAP_searchCmdList+0x378>
 8011116:	2302      	movs	r3, #2
 8011118:	73fb      	strb	r3, [r7, #15]
 801111a:	e019      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 801111c:	79ba      	ldrb	r2, [r7, #6]
 801111e:	79fb      	ldrb	r3, [r7, #7]
 8011120:	492a      	ldr	r1, [pc, #168]	; (80111cc <MAP_searchCmdList+0x428>)
 8011122:	0152      	lsls	r2, r2, #5
 8011124:	440a      	add	r2, r1
 8011126:	4413      	add	r3, r2
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801112e:	2b20      	cmp	r3, #32
 8011130:	d10d      	bne.n	801114e <MAP_searchCmdList+0x3aa>
 8011132:	79ba      	ldrb	r2, [r7, #6]
 8011134:	79fb      	ldrb	r3, [r7, #7]
 8011136:	3301      	adds	r3, #1
 8011138:	4925      	ldr	r1, [pc, #148]	; (80111d0 <MAP_searchCmdList+0x42c>)
 801113a:	0152      	lsls	r2, r2, #5
 801113c:	4413      	add	r3, r2
 801113e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011142:	897a      	ldrh	r2, [r7, #10]
 8011144:	429a      	cmp	r2, r3
 8011146:	d102      	bne.n	801114e <MAP_searchCmdList+0x3aa>
 8011148:	2301      	movs	r3, #1
 801114a:	73fb      	strb	r3, [r7, #15]
 801114c:	e000      	b.n	8011150 <MAP_searchCmdList+0x3ac>
			else   while (1);
 801114e:	e7fe      	b.n	801114e <MAP_searchCmdList+0x3aa>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8011150:	7bfa      	ldrb	r2, [r7, #15]
 8011152:	797b      	ldrb	r3, [r7, #5]
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	b2db      	uxtb	r3, r3
 8011158:	f003 0303 	and.w	r3, r3, #3
 801115c:	727b      	strb	r3, [r7, #9]
		en_staDir = en_nowDir;
 801115e:	7bfb      	ldrb	r3, [r7, #15]
 8011160:	717b      	strb	r3, [r7, #5]

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d103      	bne.n	8011170 <MAP_searchCmdList+0x3cc>
 8011168:	79bb      	ldrb	r3, [r7, #6]
 801116a:	3301      	adds	r3, #1
 801116c:	71bb      	strb	r3, [r7, #6]
 801116e:	e013      	b.n	8011198 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 8011170:	7bfb      	ldrb	r3, [r7, #15]
 8011172:	2b01      	cmp	r3, #1
 8011174:	d103      	bne.n	801117e <MAP_searchCmdList+0x3da>
 8011176:	79fb      	ldrb	r3, [r7, #7]
 8011178:	3301      	adds	r3, #1
 801117a:	71fb      	strb	r3, [r7, #7]
 801117c:	e00c      	b.n	8011198 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 801117e:	7bfb      	ldrb	r3, [r7, #15]
 8011180:	2b02      	cmp	r3, #2
 8011182:	d103      	bne.n	801118c <MAP_searchCmdList+0x3e8>
 8011184:	79bb      	ldrb	r3, [r7, #6]
 8011186:	3b01      	subs	r3, #1
 8011188:	71bb      	strb	r3, [r7, #6]
 801118a:	e005      	b.n	8011198 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	2b03      	cmp	r3, #3
 8011190:	d102      	bne.n	8011198 <MAP_searchCmdList+0x3f4>
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	3b01      	subs	r3, #1
 8011196:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8011198:	7bfb      	ldrb	r3, [r7, #15]
 801119a:	717b      	strb	r3, [r7, #5]

//		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) break;
		if (us_cmap[uc_staY][uc_staX] == 0) {
 801119c:	79ba      	ldrb	r2, [r7, #6]
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	490b      	ldr	r1, [pc, #44]	; (80111d0 <MAP_searchCmdList+0x42c>)
 80111a2:	0152      	lsls	r2, r2, #5
 80111a4:	4413      	add	r3, r2
 80111a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f47f ae0d 	bne.w	8010dca <MAP_searchCmdList+0x26>
			Return_X = 0;
 80111b0:	4b08      	ldr	r3, [pc, #32]	; (80111d4 <MAP_searchCmdList+0x430>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	701a      	strb	r2, [r3, #0]
			Return_Y = 0;
 80111b6:	4b08      	ldr	r3, [pc, #32]	; (80111d8 <MAP_searchCmdList+0x434>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	701a      	strb	r2, [r3, #0]
		}
	}


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	797a      	ldrb	r2, [r7, #5]
 80111c0:	701a      	strb	r2, [r3, #0]
}
 80111c2:	bf00      	nop
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bc90      	pop	{r4, r7}
 80111ca:	4770      	bx	lr
 80111cc:	20000854 	.word	0x20000854
 80111d0:	20000c78 	.word	0x20000c78
 80111d4:	2000042d 	.word	0x2000042d
 80111d8:	20000839 	.word	0x20000839

080111dc <MAP_makeCmdList_dijkstra_modoki>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 80111dc:	b490      	push	{r4, r7}
 80111de:	b086      	sub	sp, #24
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	4604      	mov	r4, r0
 80111e4:	4608      	mov	r0, r1
 80111e6:	4611      	mov	r1, r2
 80111e8:	461a      	mov	r2, r3
 80111ea:	4623      	mov	r3, r4
 80111ec:	71fb      	strb	r3, [r7, #7]
 80111ee:	4603      	mov	r3, r0
 80111f0:	71bb      	strb	r3, [r7, #6]
 80111f2:	460b      	mov	r3, r1
 80111f4:	717b      	strb	r3, [r7, #5]
 80111f6:	4613      	mov	r3, r2
 80111f8:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	USHORT			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80111fa:	2300      	movs	r3, #0
 80111fc:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_cmap[uc_staY][uc_staX];
 8011202:	79ba      	ldrb	r2, [r7, #6]
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	49a4      	ldr	r1, [pc, #656]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8011208:	0152      	lsls	r2, r2, #5
 801120a:	4413      	add	r3, r2
 801120c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011210:	823b      	strh	r3, [r7, #16]

		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) {
 8011212:	79fa      	ldrb	r2, [r7, #7]
 8011214:	793b      	ldrb	r3, [r7, #4]
 8011216:	429a      	cmp	r2, r3
 8011218:	d105      	bne.n	8011226 <MAP_makeCmdList_dijkstra_modoki+0x4a>
 801121a:	79ba      	ldrb	r2, [r7, #6]
 801121c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011220:	429a      	cmp	r2, r3
 8011222:	f000 820b 	beq.w	801163c <MAP_makeCmdList_dijkstra_modoki+0x460>
			break;
		}
		
		if (en_staDir == NORTH) {
 8011226:	797b      	ldrb	r3, [r7, #5]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d164      	bne.n	80112f6 <MAP_makeCmdList_dijkstra_modoki+0x11a>
			if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 801122c:	79ba      	ldrb	r2, [r7, #6]
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	499a      	ldr	r1, [pc, #616]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011232:	0152      	lsls	r2, r2, #5
 8011234:	440a      	add	r2, r1
 8011236:	4413      	add	r3, r2
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	f003 0311 	and.w	r3, r3, #17
 801123e:	2b10      	cmp	r3, #16
 8011240:	d10d      	bne.n	801125e <MAP_makeCmdList_dijkstra_modoki+0x82>
 8011242:	79bb      	ldrb	r3, [r7, #6]
 8011244:	1c5a      	adds	r2, r3, #1
 8011246:	79fb      	ldrb	r3, [r7, #7]
 8011248:	4993      	ldr	r1, [pc, #588]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801124a:	0152      	lsls	r2, r2, #5
 801124c:	4413      	add	r3, r2
 801124e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011252:	8a3a      	ldrh	r2, [r7, #16]
 8011254:	429a      	cmp	r2, r3
 8011256:	d902      	bls.n	801125e <MAP_makeCmdList_dijkstra_modoki+0x82>
 8011258:	2300      	movs	r3, #0
 801125a:	74fb      	strb	r3, [r7, #19]
 801125c:	e188      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 801125e:	79ba      	ldrb	r2, [r7, #6]
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	498e      	ldr	r1, [pc, #568]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011264:	0152      	lsls	r2, r2, #5
 8011266:	440a      	add	r2, r1
 8011268:	4413      	add	r3, r2
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011270:	2b20      	cmp	r3, #32
 8011272:	d10d      	bne.n	8011290 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 8011274:	79ba      	ldrb	r2, [r7, #6]
 8011276:	79fb      	ldrb	r3, [r7, #7]
 8011278:	3301      	adds	r3, #1
 801127a:	4987      	ldr	r1, [pc, #540]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801127c:	0152      	lsls	r2, r2, #5
 801127e:	4413      	add	r3, r2
 8011280:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011284:	8a3a      	ldrh	r2, [r7, #16]
 8011286:	429a      	cmp	r2, r3
 8011288:	d902      	bls.n	8011290 <MAP_makeCmdList_dijkstra_modoki+0xb4>
 801128a:	2301      	movs	r3, #1
 801128c:	74fb      	strb	r3, [r7, #19]
 801128e:	e16f      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8011290:	79ba      	ldrb	r2, [r7, #6]
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	4981      	ldr	r1, [pc, #516]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011296:	0152      	lsls	r2, r2, #5
 8011298:	440a      	add	r2, r1
 801129a:	4413      	add	r3, r2
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80112a2:	2b80      	cmp	r3, #128	; 0x80
 80112a4:	d10d      	bne.n	80112c2 <MAP_makeCmdList_dijkstra_modoki+0xe6>
 80112a6:	79ba      	ldrb	r2, [r7, #6]
 80112a8:	79fb      	ldrb	r3, [r7, #7]
 80112aa:	3b01      	subs	r3, #1
 80112ac:	497a      	ldr	r1, [pc, #488]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80112ae:	0152      	lsls	r2, r2, #5
 80112b0:	4413      	add	r3, r2
 80112b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80112b6:	8a3a      	ldrh	r2, [r7, #16]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d902      	bls.n	80112c2 <MAP_makeCmdList_dijkstra_modoki+0xe6>
 80112bc:	2303      	movs	r3, #3
 80112be:	74fb      	strb	r3, [r7, #19]
 80112c0:	e156      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80112c2:	79ba      	ldrb	r2, [r7, #6]
 80112c4:	79fb      	ldrb	r3, [r7, #7]
 80112c6:	4975      	ldr	r1, [pc, #468]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80112c8:	0152      	lsls	r2, r2, #5
 80112ca:	440a      	add	r2, r1
 80112cc:	4413      	add	r3, r2
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80112d4:	2b40      	cmp	r3, #64	; 0x40
 80112d6:	d10d      	bne.n	80112f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
 80112d8:	79bb      	ldrb	r3, [r7, #6]
 80112da:	1e5a      	subs	r2, r3, #1
 80112dc:	79fb      	ldrb	r3, [r7, #7]
 80112de:	496e      	ldr	r1, [pc, #440]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80112e0:	0152      	lsls	r2, r2, #5
 80112e2:	4413      	add	r3, r2
 80112e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80112e8:	8a3a      	ldrh	r2, [r7, #16]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d902      	bls.n	80112f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
 80112ee:	2302      	movs	r3, #2
 80112f0:	74fb      	strb	r3, [r7, #19]
 80112f2:	e13d      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80112f4:	e7fe      	b.n	80112f4 <MAP_makeCmdList_dijkstra_modoki+0x118>
		}
		else if (en_staDir == EAST) {
 80112f6:	797b      	ldrb	r3, [r7, #5]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d164      	bne.n	80113c6 <MAP_makeCmdList_dijkstra_modoki+0x1ea>
			if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80112fc:	79ba      	ldrb	r2, [r7, #6]
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	4966      	ldr	r1, [pc, #408]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011302:	0152      	lsls	r2, r2, #5
 8011304:	440a      	add	r2, r1
 8011306:	4413      	add	r3, r2
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801130e:	2b20      	cmp	r3, #32
 8011310:	d10d      	bne.n	801132e <MAP_makeCmdList_dijkstra_modoki+0x152>
 8011312:	79ba      	ldrb	r2, [r7, #6]
 8011314:	79fb      	ldrb	r3, [r7, #7]
 8011316:	3301      	adds	r3, #1
 8011318:	495f      	ldr	r1, [pc, #380]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801131a:	0152      	lsls	r2, r2, #5
 801131c:	4413      	add	r3, r2
 801131e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011322:	8a3a      	ldrh	r2, [r7, #16]
 8011324:	429a      	cmp	r2, r3
 8011326:	d902      	bls.n	801132e <MAP_makeCmdList_dijkstra_modoki+0x152>
 8011328:	2301      	movs	r3, #1
 801132a:	74fb      	strb	r3, [r7, #19]
 801132c:	e120      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 801132e:	79ba      	ldrb	r2, [r7, #6]
 8011330:	79fb      	ldrb	r3, [r7, #7]
 8011332:	495a      	ldr	r1, [pc, #360]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011334:	0152      	lsls	r2, r2, #5
 8011336:	440a      	add	r2, r1
 8011338:	4413      	add	r3, r2
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	f003 0311 	and.w	r3, r3, #17
 8011340:	2b10      	cmp	r3, #16
 8011342:	d10d      	bne.n	8011360 <MAP_makeCmdList_dijkstra_modoki+0x184>
 8011344:	79bb      	ldrb	r3, [r7, #6]
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	79fb      	ldrb	r3, [r7, #7]
 801134a:	4953      	ldr	r1, [pc, #332]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801134c:	0152      	lsls	r2, r2, #5
 801134e:	4413      	add	r3, r2
 8011350:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011354:	8a3a      	ldrh	r2, [r7, #16]
 8011356:	429a      	cmp	r2, r3
 8011358:	d902      	bls.n	8011360 <MAP_makeCmdList_dijkstra_modoki+0x184>
 801135a:	2300      	movs	r3, #0
 801135c:	74fb      	strb	r3, [r7, #19]
 801135e:	e107      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 8011360:	79ba      	ldrb	r2, [r7, #6]
 8011362:	79fb      	ldrb	r3, [r7, #7]
 8011364:	494d      	ldr	r1, [pc, #308]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011366:	0152      	lsls	r2, r2, #5
 8011368:	440a      	add	r2, r1
 801136a:	4413      	add	r3, r2
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011372:	2b40      	cmp	r3, #64	; 0x40
 8011374:	d10d      	bne.n	8011392 <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 8011376:	79bb      	ldrb	r3, [r7, #6]
 8011378:	1e5a      	subs	r2, r3, #1
 801137a:	79fb      	ldrb	r3, [r7, #7]
 801137c:	4946      	ldr	r1, [pc, #280]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801137e:	0152      	lsls	r2, r2, #5
 8011380:	4413      	add	r3, r2
 8011382:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011386:	8a3a      	ldrh	r2, [r7, #16]
 8011388:	429a      	cmp	r2, r3
 801138a:	d902      	bls.n	8011392 <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 801138c:	2302      	movs	r3, #2
 801138e:	74fb      	strb	r3, [r7, #19]
 8011390:	e0ee      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8011392:	79ba      	ldrb	r2, [r7, #6]
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	4941      	ldr	r1, [pc, #260]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011398:	0152      	lsls	r2, r2, #5
 801139a:	440a      	add	r2, r1
 801139c:	4413      	add	r3, r2
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80113a4:	2b80      	cmp	r3, #128	; 0x80
 80113a6:	d10d      	bne.n	80113c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 80113a8:	79ba      	ldrb	r2, [r7, #6]
 80113aa:	79fb      	ldrb	r3, [r7, #7]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	493a      	ldr	r1, [pc, #232]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80113b0:	0152      	lsls	r2, r2, #5
 80113b2:	4413      	add	r3, r2
 80113b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80113b8:	8a3a      	ldrh	r2, [r7, #16]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d902      	bls.n	80113c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 80113be:	2303      	movs	r3, #3
 80113c0:	74fb      	strb	r3, [r7, #19]
 80113c2:	e0d5      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80113c4:	e7fe      	b.n	80113c4 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
		}
		else if (en_staDir == SOUTH) {
 80113c6:	797b      	ldrb	r3, [r7, #5]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d169      	bne.n	80114a0 <MAP_makeCmdList_dijkstra_modoki+0x2c4>
			if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 80113cc:	79ba      	ldrb	r2, [r7, #6]
 80113ce:	79fb      	ldrb	r3, [r7, #7]
 80113d0:	4932      	ldr	r1, [pc, #200]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80113d2:	0152      	lsls	r2, r2, #5
 80113d4:	440a      	add	r2, r1
 80113d6:	4413      	add	r3, r2
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80113de:	2b40      	cmp	r3, #64	; 0x40
 80113e0:	d10d      	bne.n	80113fe <MAP_makeCmdList_dijkstra_modoki+0x222>
 80113e2:	79bb      	ldrb	r3, [r7, #6]
 80113e4:	1e5a      	subs	r2, r3, #1
 80113e6:	79fb      	ldrb	r3, [r7, #7]
 80113e8:	492b      	ldr	r1, [pc, #172]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80113ea:	0152      	lsls	r2, r2, #5
 80113ec:	4413      	add	r3, r2
 80113ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80113f2:	8a3a      	ldrh	r2, [r7, #16]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d902      	bls.n	80113fe <MAP_makeCmdList_dijkstra_modoki+0x222>
 80113f8:	2302      	movs	r3, #2
 80113fa:	74fb      	strb	r3, [r7, #19]
 80113fc:	e0b8      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80113fe:	79ba      	ldrb	r2, [r7, #6]
 8011400:	79fb      	ldrb	r3, [r7, #7]
 8011402:	4926      	ldr	r1, [pc, #152]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011404:	0152      	lsls	r2, r2, #5
 8011406:	440a      	add	r2, r1
 8011408:	4413      	add	r3, r2
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011410:	2b20      	cmp	r3, #32
 8011412:	d10d      	bne.n	8011430 <MAP_makeCmdList_dijkstra_modoki+0x254>
 8011414:	79ba      	ldrb	r2, [r7, #6]
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	3301      	adds	r3, #1
 801141a:	491f      	ldr	r1, [pc, #124]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801141c:	0152      	lsls	r2, r2, #5
 801141e:	4413      	add	r3, r2
 8011420:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011424:	8a3a      	ldrh	r2, [r7, #16]
 8011426:	429a      	cmp	r2, r3
 8011428:	d902      	bls.n	8011430 <MAP_makeCmdList_dijkstra_modoki+0x254>
 801142a:	2301      	movs	r3, #1
 801142c:	74fb      	strb	r3, [r7, #19]
 801142e:	e09f      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8011430:	79ba      	ldrb	r2, [r7, #6]
 8011432:	79fb      	ldrb	r3, [r7, #7]
 8011434:	4919      	ldr	r1, [pc, #100]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011436:	0152      	lsls	r2, r2, #5
 8011438:	440a      	add	r2, r1
 801143a:	4413      	add	r3, r2
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8011442:	2b80      	cmp	r3, #128	; 0x80
 8011444:	d10d      	bne.n	8011462 <MAP_makeCmdList_dijkstra_modoki+0x286>
 8011446:	79ba      	ldrb	r2, [r7, #6]
 8011448:	79fb      	ldrb	r3, [r7, #7]
 801144a:	3b01      	subs	r3, #1
 801144c:	4912      	ldr	r1, [pc, #72]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801144e:	0152      	lsls	r2, r2, #5
 8011450:	4413      	add	r3, r2
 8011452:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011456:	8a3a      	ldrh	r2, [r7, #16]
 8011458:	429a      	cmp	r2, r3
 801145a:	d902      	bls.n	8011462 <MAP_makeCmdList_dijkstra_modoki+0x286>
 801145c:	2303      	movs	r3, #3
 801145e:	74fb      	strb	r3, [r7, #19]
 8011460:	e086      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8011462:	79ba      	ldrb	r2, [r7, #6]
 8011464:	79fb      	ldrb	r3, [r7, #7]
 8011466:	490d      	ldr	r1, [pc, #52]	; (801149c <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8011468:	0152      	lsls	r2, r2, #5
 801146a:	440a      	add	r2, r1
 801146c:	4413      	add	r3, r2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 0311 	and.w	r3, r3, #17
 8011474:	2b10      	cmp	r3, #16
 8011476:	d10d      	bne.n	8011494 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8011478:	79bb      	ldrb	r3, [r7, #6]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	79fb      	ldrb	r3, [r7, #7]
 801147e:	4906      	ldr	r1, [pc, #24]	; (8011498 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8011480:	0152      	lsls	r2, r2, #5
 8011482:	4413      	add	r3, r2
 8011484:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011488:	8a3a      	ldrh	r2, [r7, #16]
 801148a:	429a      	cmp	r2, r3
 801148c:	d902      	bls.n	8011494 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 801148e:	2300      	movs	r3, #0
 8011490:	74fb      	strb	r3, [r7, #19]
 8011492:	e06d      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8011494:	e7fe      	b.n	8011494 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8011496:	bf00      	nop
 8011498:	20000c78 	.word	0x20000c78
 801149c:	20000854 	.word	0x20000854
		}
		else if (en_staDir == WEST) {
 80114a0:	797b      	ldrb	r3, [r7, #5]
 80114a2:	2b03      	cmp	r3, #3
 80114a4:	d164      	bne.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 80114a6:	79ba      	ldrb	r2, [r7, #6]
 80114a8:	79fb      	ldrb	r3, [r7, #7]
 80114aa:	4974      	ldr	r1, [pc, #464]	; (801167c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80114ac:	0152      	lsls	r2, r2, #5
 80114ae:	440a      	add	r2, r1
 80114b0:	4413      	add	r3, r2
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80114b8:	2b80      	cmp	r3, #128	; 0x80
 80114ba:	d10d      	bne.n	80114d8 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 80114bc:	79ba      	ldrb	r2, [r7, #6]
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	3b01      	subs	r3, #1
 80114c2:	496f      	ldr	r1, [pc, #444]	; (8011680 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 80114c4:	0152      	lsls	r2, r2, #5
 80114c6:	4413      	add	r3, r2
 80114c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114cc:	8a3a      	ldrh	r2, [r7, #16]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d902      	bls.n	80114d8 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 80114d2:	2303      	movs	r3, #3
 80114d4:	74fb      	strb	r3, [r7, #19]
 80114d6:	e04b      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 80114d8:	79ba      	ldrb	r2, [r7, #6]
 80114da:	79fb      	ldrb	r3, [r7, #7]
 80114dc:	4967      	ldr	r1, [pc, #412]	; (801167c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 80114de:	0152      	lsls	r2, r2, #5
 80114e0:	440a      	add	r2, r1
 80114e2:	4413      	add	r3, r2
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	f003 0311 	and.w	r3, r3, #17
 80114ea:	2b10      	cmp	r3, #16
 80114ec:	d10d      	bne.n	801150a <MAP_makeCmdList_dijkstra_modoki+0x32e>
 80114ee:	79bb      	ldrb	r3, [r7, #6]
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	79fb      	ldrb	r3, [r7, #7]
 80114f4:	4962      	ldr	r1, [pc, #392]	; (8011680 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 80114f6:	0152      	lsls	r2, r2, #5
 80114f8:	4413      	add	r3, r2
 80114fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114fe:	8a3a      	ldrh	r2, [r7, #16]
 8011500:	429a      	cmp	r2, r3
 8011502:	d902      	bls.n	801150a <MAP_makeCmdList_dijkstra_modoki+0x32e>
 8011504:	2300      	movs	r3, #0
 8011506:	74fb      	strb	r3, [r7, #19]
 8011508:	e032      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 801150a:	79ba      	ldrb	r2, [r7, #6]
 801150c:	79fb      	ldrb	r3, [r7, #7]
 801150e:	495b      	ldr	r1, [pc, #364]	; (801167c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8011510:	0152      	lsls	r2, r2, #5
 8011512:	440a      	add	r2, r1
 8011514:	4413      	add	r3, r2
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801151c:	2b40      	cmp	r3, #64	; 0x40
 801151e:	d10d      	bne.n	801153c <MAP_makeCmdList_dijkstra_modoki+0x360>
 8011520:	79bb      	ldrb	r3, [r7, #6]
 8011522:	1e5a      	subs	r2, r3, #1
 8011524:	79fb      	ldrb	r3, [r7, #7]
 8011526:	4956      	ldr	r1, [pc, #344]	; (8011680 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8011528:	0152      	lsls	r2, r2, #5
 801152a:	4413      	add	r3, r2
 801152c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011530:	8a3a      	ldrh	r2, [r7, #16]
 8011532:	429a      	cmp	r2, r3
 8011534:	d902      	bls.n	801153c <MAP_makeCmdList_dijkstra_modoki+0x360>
 8011536:	2302      	movs	r3, #2
 8011538:	74fb      	strb	r3, [r7, #19]
 801153a:	e019      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 801153c:	79ba      	ldrb	r2, [r7, #6]
 801153e:	79fb      	ldrb	r3, [r7, #7]
 8011540:	494e      	ldr	r1, [pc, #312]	; (801167c <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8011542:	0152      	lsls	r2, r2, #5
 8011544:	440a      	add	r2, r1
 8011546:	4413      	add	r3, r2
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801154e:	2b20      	cmp	r3, #32
 8011550:	d10d      	bne.n	801156e <MAP_makeCmdList_dijkstra_modoki+0x392>
 8011552:	79ba      	ldrb	r2, [r7, #6]
 8011554:	79fb      	ldrb	r3, [r7, #7]
 8011556:	3301      	adds	r3, #1
 8011558:	4949      	ldr	r1, [pc, #292]	; (8011680 <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 801155a:	0152      	lsls	r2, r2, #5
 801155c:	4413      	add	r3, r2
 801155e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011562:	8a3a      	ldrh	r2, [r7, #16]
 8011564:	429a      	cmp	r2, r3
 8011566:	d902      	bls.n	801156e <MAP_makeCmdList_dijkstra_modoki+0x392>
 8011568:	2301      	movs	r3, #1
 801156a:	74fb      	strb	r3, [r7, #19]
 801156c:	e000      	b.n	8011570 <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 801156e:	e7fe      	b.n	801156e <MAP_makeCmdList_dijkstra_modoki+0x392>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8011570:	7cfa      	ldrb	r2, [r7, #19]
 8011572:	797b      	ldrb	r3, [r7, #5]
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	b2db      	uxtb	r3, r3
 8011578:	f003 0303 	and.w	r3, r3, #3
 801157c:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 801157e:	7cfb      	ldrb	r3, [r7, #19]
 8011580:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH) {
 8011582:	7bfb      	ldrb	r3, [r7, #15]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d103      	bne.n	8011590 <MAP_makeCmdList_dijkstra_modoki+0x3b4>
			uc_goStep = uc_goStep + 2;
 8011588:	7dfb      	ldrb	r3, [r7, #23]
 801158a:	3302      	adds	r3, #2
 801158c:	75fb      	strb	r3, [r7, #23]
 801158e:	e037      	b.n	8011600 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == EAST) {
 8011590:	7bfb      	ldrb	r3, [r7, #15]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d110      	bne.n	80115b8 <MAP_makeCmdList_dijkstra_modoki+0x3dc>
			dcom[us_pt] = uc_goStep;
 8011596:	8abb      	ldrh	r3, [r7, #20]
 8011598:	493a      	ldr	r1, [pc, #232]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 801159a:	7dfa      	ldrb	r2, [r7, #23]
 801159c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 801159e:	8abb      	ldrh	r3, [r7, #20]
 80115a0:	3301      	adds	r3, #1
 80115a2:	82bb      	strh	r3, [r7, #20]
 80115a4:	8abb      	ldrh	r3, [r7, #20]
 80115a6:	4a37      	ldr	r2, [pc, #220]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80115a8:	2148      	movs	r1, #72	; 0x48
 80115aa:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80115ac:	2302      	movs	r3, #2
 80115ae:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80115b0:	8abb      	ldrh	r3, [r7, #20]
 80115b2:	3301      	adds	r3, #1
 80115b4:	82bb      	strh	r3, [r7, #20]
 80115b6:	e023      	b.n	8011600 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == WEST) {
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	2b03      	cmp	r3, #3
 80115bc:	d110      	bne.n	80115e0 <MAP_makeCmdList_dijkstra_modoki+0x404>
			dcom[us_pt] = uc_goStep;
 80115be:	8abb      	ldrh	r3, [r7, #20]
 80115c0:	4930      	ldr	r1, [pc, #192]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80115c2:	7dfa      	ldrb	r2, [r7, #23]
 80115c4:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 80115c6:	8abb      	ldrh	r3, [r7, #20]
 80115c8:	3301      	adds	r3, #1
 80115ca:	82bb      	strh	r3, [r7, #20]
 80115cc:	8abb      	ldrh	r3, [r7, #20]
 80115ce:	4a2d      	ldr	r2, [pc, #180]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80115d0:	2149      	movs	r1, #73	; 0x49
 80115d2:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80115d4:	2302      	movs	r3, #2
 80115d6:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80115d8:	8abb      	ldrh	r3, [r7, #20]
 80115da:	3301      	adds	r3, #1
 80115dc:	82bb      	strh	r3, [r7, #20]
 80115de:	e00f      	b.n	8011600 <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else {
			dcom[us_pt] = uc_goStep;
 80115e0:	8abb      	ldrh	r3, [r7, #20]
 80115e2:	4928      	ldr	r1, [pc, #160]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80115e4:	7dfa      	ldrb	r2, [r7, #23]
 80115e6:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 80115e8:	8abb      	ldrh	r3, [r7, #20]
 80115ea:	3301      	adds	r3, #1
 80115ec:	82bb      	strh	r3, [r7, #20]
 80115ee:	8abb      	ldrh	r3, [r7, #20]
 80115f0:	4a24      	ldr	r2, [pc, #144]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 80115f2:	214a      	movs	r1, #74	; 0x4a
 80115f4:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 80115f6:	2302      	movs	r3, #2
 80115f8:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 80115fa:	8abb      	ldrh	r3, [r7, #20]
 80115fc:	3301      	adds	r3, #1
 80115fe:	82bb      	strh	r3, [r7, #20]
		}

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 8011600:	7cfb      	ldrb	r3, [r7, #19]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d103      	bne.n	801160e <MAP_makeCmdList_dijkstra_modoki+0x432>
 8011606:	79bb      	ldrb	r3, [r7, #6]
 8011608:	3301      	adds	r3, #1
 801160a:	71bb      	strb	r3, [r7, #6]
 801160c:	e013      	b.n	8011636 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 801160e:	7cfb      	ldrb	r3, [r7, #19]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d103      	bne.n	801161c <MAP_makeCmdList_dijkstra_modoki+0x440>
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	3301      	adds	r3, #1
 8011618:	71fb      	strb	r3, [r7, #7]
 801161a:	e00c      	b.n	8011636 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 801161c:	7cfb      	ldrb	r3, [r7, #19]
 801161e:	2b02      	cmp	r3, #2
 8011620:	d103      	bne.n	801162a <MAP_makeCmdList_dijkstra_modoki+0x44e>
 8011622:	79bb      	ldrb	r3, [r7, #6]
 8011624:	3b01      	subs	r3, #1
 8011626:	71bb      	strb	r3, [r7, #6]
 8011628:	e005      	b.n	8011636 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 801162a:	7cfb      	ldrb	r3, [r7, #19]
 801162c:	2b03      	cmp	r3, #3
 801162e:	d102      	bne.n	8011636 <MAP_makeCmdList_dijkstra_modoki+0x45a>
 8011630:	79fb      	ldrb	r3, [r7, #7]
 8011632:	3b01      	subs	r3, #1
 8011634:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8011636:	7cfb      	ldrb	r3, [r7, #19]
 8011638:	717b      	strb	r3, [r7, #5]
		us_high = us_cmap[uc_staY][uc_staX];
 801163a:	e5e2      	b.n	8011202 <MAP_makeCmdList_dijkstra_modoki+0x26>
			break;
 801163c:	bf00      	nop
*/
//		if (us_cmap[uc_staY][uc_staX] == 0) break;
	}

	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 801163e:	8abb      	ldrh	r3, [r7, #20]
 8011640:	4910      	ldr	r1, [pc, #64]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8011642:	7dfa      	ldrb	r2, [r7, #23]
 8011644:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 8011646:	8abb      	ldrh	r3, [r7, #20]
 8011648:	3301      	adds	r3, #1
 801164a:	82bb      	strh	r3, [r7, #20]
 801164c:	8abb      	ldrh	r3, [r7, #20]
 801164e:	4a0d      	ldr	r2, [pc, #52]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8011650:	2100      	movs	r1, #0
 8011652:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8011654:	8abb      	ldrh	r3, [r7, #20]
 8011656:	3301      	adds	r3, #1
 8011658:	82bb      	strh	r3, [r7, #20]
 801165a:	8abb      	ldrh	r3, [r7, #20]
 801165c:	4a09      	ldr	r2, [pc, #36]	; (8011684 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 801165e:	21fa      	movs	r1, #250	; 0xfa
 8011660:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt + 1;			// コマンド総数
 8011662:	8abb      	ldrh	r3, [r7, #20]
 8011664:	3301      	adds	r3, #1
 8011666:	b29a      	uxth	r2, r3
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <MAP_makeCmdList_dijkstra_modoki+0x4ac>)
 801166a:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 801166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166e:	797a      	ldrb	r2, [r7, #5]
 8011670:	701a      	strb	r2, [r3, #0]

}
 8011672:	bf00      	nop
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bc90      	pop	{r4, r7}
 801167a:	4770      	bx	lr
 801167c:	20000854 	.word	0x20000854
 8011680:	20000c78 	.word	0x20000c78
 8011684:	2000b284 	.word	0x2000b284
 8011688:	2000e340 	.word	0x2000e340

0801168c <FLASH_Lock>:
{
 801168c:	b480      	push	{r7}
 801168e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8011690:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <FLASH_Lock+0x1c>)
 8011692:	695b      	ldr	r3, [r3, #20]
 8011694:	4a04      	ldr	r2, [pc, #16]	; (80116a8 <FLASH_Lock+0x1c>)
 8011696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801169a:	6153      	str	r3, [r2, #20]
}
 801169c:	bf00      	nop
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	40022000 	.word	0x40022000

080116ac <FLASH_Unlock>:
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 80116b0:	4b05      	ldr	r3, [pc, #20]	; (80116c8 <FLASH_Unlock+0x1c>)
 80116b2:	4a06      	ldr	r2, [pc, #24]	; (80116cc <FLASH_Unlock+0x20>)
 80116b4:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 80116b6:	4b04      	ldr	r3, [pc, #16]	; (80116c8 <FLASH_Unlock+0x1c>)
 80116b8:	4a05      	ldr	r2, [pc, #20]	; (80116d0 <FLASH_Unlock+0x24>)
 80116ba:	609a      	str	r2, [r3, #8]
}
 80116bc:	bf00      	nop
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	40022000 	.word	0x40022000
 80116cc:	45670123 	.word	0x45670123
 80116d0:	cdef89ab 	.word	0xcdef89ab

080116d4 <map_write>:


#include "search/map_flash.h"

void map_write(void)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
	uint64_t *map_add;
	map_add = (uint64_t *)g_sysMap;
 80116da:	4b06      	ldr	r3, [pc, #24]	; (80116f4 <map_write+0x20>)
 80116dc:	607b      	str	r3, [r7, #4]
	
	//DataFlashイレース
//    FLASH_Erase(0x7F);  //reg127
	//マップデータをDataFlashに書き込む
    FLASH_WriteData(0x7F,(uint32_t)sta_add_127, map_add, 32*32);
 80116de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4904      	ldr	r1, [pc, #16]	; (80116f8 <map_write+0x24>)
 80116e6:	207f      	movs	r0, #127	; 0x7f
 80116e8:	f7f0 fa84 	bl	8001bf4 <FLASH_WriteData>
}
 80116ec:	bf00      	nop
 80116ee:	3708      	adds	r7, #8
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	20000854 	.word	0x20000854
 80116f8:	0807f800 	.word	0x0807f800

080116fc <map_copy>:

void map_copy(void)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
    uint64_t *map_add;
    map_add = (uint64_t *)&g_sysMap;
 8011702:	4b0f      	ldr	r3, [pc, #60]	; (8011740 <map_copy+0x44>)
 8011704:	60fb      	str	r3, [r7, #12]
    uint32_t read_address = sta_add_127;
 8011706:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <map_copy+0x48>)
 8011708:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 801170a:	2300      	movs	r3, #0
 801170c:	80fb      	strh	r3, [r7, #6]
 801170e:	e00d      	b.n	801172c <map_copy+0x30>
	    FLASH_ReadData(read_address, map_add, 8);
 8011710:	2208      	movs	r2, #8
 8011712:	68f9      	ldr	r1, [r7, #12]
 8011714:	68b8      	ldr	r0, [r7, #8]
 8011716:	f7f0 fa93 	bl	8001c40 <FLASH_ReadData>
	    read_address +=8;
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	3308      	adds	r3, #8
 801171e:	60bb      	str	r3, [r7, #8]
	    map_add++;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3308      	adds	r3, #8
 8011724:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8011726:	88fb      	ldrh	r3, [r7, #6]
 8011728:	3308      	adds	r3, #8
 801172a:	80fb      	strh	r3, [r7, #6]
 801172c:	88fb      	ldrh	r3, [r7, #6]
 801172e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011732:	d3ed      	bcc.n	8011710 <map_copy+0x14>
    }
}
 8011734:	bf00      	nop
 8011736:	bf00      	nop
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20000854 	.word	0x20000854
 8011744:	0807f800 	.word	0x0807f800

08011748 <map_erase>:

void map_erase(void)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 801174c:	f7ff ffae 	bl	80116ac <FLASH_Unlock>
	FLASH_Erase(0x7F);
 8011750:	207f      	movs	r0, #127	; 0x7f
 8011752:	f7f0 f9e3 	bl	8001b1c <FLASH_Erase>
	FLASH_Lock();
 8011756:	f7ff ff99 	bl	801168c <FLASH_Lock>
}
 801175a:	bf00      	nop
 801175c:	bd80      	pop	{r7, pc}
	...

08011760 <MAP_init>:
uint8_t			SLA_count = 30;

uint8_t near_wall = 0;

void MAP_init( void )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	af00      	add	r7, sp, #0
//	uint8_t uc_dummy[ MAP_Y_SIZE ][ MAP_X_SIZE ];			// 迷路データ

	/* 座標、向き、迷路情報を初期化 */
	en_Head		= NORTH;
 8011764:	4b09      	ldr	r3, [pc, #36]	; (801178c <MAP_init+0x2c>)
 8011766:	2200      	movs	r2, #0
 8011768:	701a      	strb	r2, [r3, #0]
	mx		= 0;
 801176a:	4b09      	ldr	r3, [pc, #36]	; (8011790 <MAP_init+0x30>)
 801176c:	2200      	movs	r2, #0
 801176e:	701a      	strb	r2, [r3, #0]
	my		= 0;
 8011770:	4b08      	ldr	r3, [pc, #32]	; (8011794 <MAP_init+0x34>)
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
	MAP_clearMap();
 8011776:	f000 f913 	bl	80119a0 <MAP_clearMap>
	
	/* 走行用のパラメータ */
	f_MoveBackDist = 0;
 801177a:	4b07      	ldr	r3, [pc, #28]	; (8011798 <MAP_init+0x38>)
 801177c:	f04f 0200 	mov.w	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8011782:	4b06      	ldr	r3, [pc, #24]	; (801179c <MAP_init+0x3c>)
 8011784:	2200      	movs	r2, #0
 8011786:	701a      	strb	r2, [r3, #0]

}
 8011788:	bf00      	nop
 801178a:	bd80      	pop	{r7, pc}
 801178c:	2000e750 	.word	0x2000e750
 8011790:	2000e753 	.word	0x2000e753
 8011794:	2000e749 	.word	0x2000e749
 8011798:	2000e74c 	.word	0x2000e74c
 801179c:	200002d6 	.word	0x200002d6

080117a0 <MAP_Goal_init>:

void MAP_Goal_init( void )
{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0
	GOAL_MAP_X = GOAL_MAP_X_def;
 80117a4:	4b05      	ldr	r3, [pc, #20]	; (80117bc <MAP_Goal_init+0x1c>)
 80117a6:	2201      	movs	r2, #1
 80117a8:	701a      	strb	r2, [r3, #0]
	GOAL_MAP_Y = GOAL_MAP_Y_def;
 80117aa:	4b05      	ldr	r3, [pc, #20]	; (80117c0 <MAP_Goal_init+0x20>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	701a      	strb	r2, [r3, #0]
}
 80117b0:	bf00      	nop
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	2000e748 	.word	0x2000e748
 80117c0:	2000e751 	.word	0x2000e751

080117c4 <MAP_setPos>:

//	Storage_Clear( sizeof(g_sysMap), ADR_MAP );			// データセーブ
}

void MAP_setPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	4603      	mov	r3, r0
 80117cc:	71fb      	strb	r3, [r7, #7]
 80117ce:	460b      	mov	r3, r1
 80117d0:	71bb      	strb	r3, [r7, #6]
 80117d2:	4613      	mov	r3, r2
 80117d4:	717b      	strb	r3, [r7, #5]
	mx		= uc_x;
 80117d6:	4a09      	ldr	r2, [pc, #36]	; (80117fc <MAP_setPos+0x38>)
 80117d8:	79fb      	ldrb	r3, [r7, #7]
 80117da:	7013      	strb	r3, [r2, #0]
	my		= uc_y;
 80117dc:	4a08      	ldr	r2, [pc, #32]	; (8011800 <MAP_setPos+0x3c>)
 80117de:	79bb      	ldrb	r3, [r7, #6]
 80117e0:	7013      	strb	r3, [r2, #0]
	en_Head		= en_dir;
 80117e2:	4a08      	ldr	r2, [pc, #32]	; (8011804 <MAP_setPos+0x40>)
 80117e4:	797b      	ldrb	r3, [r7, #5]
 80117e6:	7013      	strb	r3, [r2, #0]
	
	MAP_setCmdPos( uc_x, uc_y, en_dir );
 80117e8:	797a      	ldrb	r2, [r7, #5]
 80117ea:	79b9      	ldrb	r1, [r7, #6]
 80117ec:	79fb      	ldrb	r3, [r7, #7]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fd faec 	bl	800edcc <MAP_setCmdPos>

}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	2000e753 	.word	0x2000e753
 8011800:	2000e749 	.word	0x2000e749
 8011804:	2000e750 	.word	0x2000e750

08011808 <MAP_showLog>:

void MAP_showLog( void )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
	uint8_t	c_data;
	
	/* ---------- */
	/*  通常迷路  */
	/* ---------- */
	printf("\n\r  /* ---------- */   ");
 801180e:	4857      	ldr	r0, [pc, #348]	; (801196c <MAP_showLog+0x164>)
 8011810:	f005 fd32 	bl	8017278 <iprintf>
	printf("\n\r  /*  通常迷路  */   ");
 8011814:	4856      	ldr	r0, [pc, #344]	; (8011970 <MAP_showLog+0x168>)
 8011816:	f005 fd2f 	bl	8017278 <iprintf>
	printf("\n\r  /* ---------- */   ");
 801181a:	4854      	ldr	r0, [pc, #336]	; (801196c <MAP_showLog+0x164>)
 801181c:	f005 fd2c 	bl	8017278 <iprintf>

	printf("\n\r     ");
 8011820:	4854      	ldr	r0, [pc, #336]	; (8011974 <MAP_showLog+0x16c>)
 8011822:	f005 fd29 	bl	8017278 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8011826:	2300      	movs	r3, #0
 8011828:	80fb      	strh	r3, [r7, #6]
 801182a:	e008      	b.n	801183e <MAP_showLog+0x36>
		printf("._");
 801182c:	4852      	ldr	r0, [pc, #328]	; (8011978 <MAP_showLog+0x170>)
 801182e:	f005 fd23 	bl	8017278 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8011832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011836:	b29b      	uxth	r3, r3
 8011838:	3301      	adds	r3, #1
 801183a:	b29b      	uxth	r3, r3
 801183c:	80fb      	strh	r3, [r7, #6]
 801183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011842:	2b1f      	cmp	r3, #31
 8011844:	ddf2      	ble.n	801182c <MAP_showLog+0x24>
	}
	printf(".\n\r");
 8011846:	484d      	ldr	r0, [pc, #308]	; (801197c <MAP_showLog+0x174>)
 8011848:	f005 fd16 	bl	8017278 <iprintf>
	
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 801184c:	231f      	movs	r3, #31
 801184e:	80bb      	strh	r3, [r7, #4]
 8011850:	e05f      	b.n	8011912 <MAP_showLog+0x10a>
		
		printf("   %2d",y);
 8011852:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011856:	4619      	mov	r1, r3
 8011858:	4849      	ldr	r0, [pc, #292]	; (8011980 <MAP_showLog+0x178>)
 801185a:	f005 fd0d 	bl	8017278 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++){
 801185e:	2300      	movs	r3, #0
 8011860:	80fb      	strh	r3, [r7, #6]
 8011862:	e027      	b.n	80118b4 <MAP_showLog+0xac>
			c_data = (uint8_t)g_sysMap[y][x];
 8011864:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801186c:	4945      	ldr	r1, [pc, #276]	; (8011984 <MAP_showLog+0x17c>)
 801186e:	0152      	lsls	r2, r2, #5
 8011870:	440a      	add	r2, r1
 8011872:	4413      	add	r3, r2
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	70fb      	strb	r3, [r7, #3]
			if ( ( c_data & 0x08 ) == 0 ){
 8011878:	78fb      	ldrb	r3, [r7, #3]
 801187a:	f003 0308 	and.w	r3, r3, #8
 801187e:	2b00      	cmp	r3, #0
 8011880:	d103      	bne.n	801188a <MAP_showLog+0x82>
				printf(".");
 8011882:	202e      	movs	r0, #46	; 0x2e
 8011884:	f005 fd0a 	bl	801729c <putchar>
 8011888:	e002      	b.n	8011890 <MAP_showLog+0x88>
			}
			else{
				printf("|");
 801188a:	207c      	movs	r0, #124	; 0x7c
 801188c:	f005 fd06 	bl	801729c <putchar>
			}
			if ( ( c_data & 0x04 ) == 0 ){
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	f003 0304 	and.w	r3, r3, #4
 8011896:	2b00      	cmp	r3, #0
 8011898:	d103      	bne.n	80118a2 <MAP_showLog+0x9a>
				printf(" ");
 801189a:	2020      	movs	r0, #32
 801189c:	f005 fcfe 	bl	801729c <putchar>
 80118a0:	e002      	b.n	80118a8 <MAP_showLog+0xa0>
			}
			else{
				printf("_");
 80118a2:	205f      	movs	r0, #95	; 0x5f
 80118a4:	f005 fcfa 	bl	801729c <putchar>
		for( x=0; x<MAP_X_SIZE; x++){
 80118a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	3301      	adds	r3, #1
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	80fb      	strh	r3, [r7, #6]
 80118b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118b8:	2b1f      	cmp	r3, #31
 80118ba:	ddd3      	ble.n	8011864 <MAP_showLog+0x5c>
			}
		}
		printf("|   ");
 80118bc:	4832      	ldr	r0, [pc, #200]	; (8011988 <MAP_showLog+0x180>)
 80118be:	f005 fcdb 	bl	8017278 <iprintf>
		
		for( x=0; x<MAP_X_SIZE; x++ ){
 80118c2:	2300      	movs	r3, #0
 80118c4:	80fb      	strh	r3, [r7, #6]
 80118c6:	e017      	b.n	80118f8 <MAP_showLog+0xf0>
			c_data = g_sysMap[y][x];
 80118c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80118cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118d0:	492c      	ldr	r1, [pc, #176]	; (8011984 <MAP_showLog+0x17c>)
 80118d2:	0152      	lsls	r2, r2, #5
 80118d4:	440a      	add	r2, r1
 80118d6:	4413      	add	r3, r2
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	70fb      	strb	r3, [r7, #3]
			c_data = c_data >> 4;
 80118dc:	78fb      	ldrb	r3, [r7, #3]
 80118de:	091b      	lsrs	r3, r3, #4
 80118e0:	70fb      	strb	r3, [r7, #3]
			printf("%x", c_data);
 80118e2:	78fb      	ldrb	r3, [r7, #3]
 80118e4:	4619      	mov	r1, r3
 80118e6:	4829      	ldr	r0, [pc, #164]	; (801198c <MAP_showLog+0x184>)
 80118e8:	f005 fcc6 	bl	8017278 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++ ){
 80118ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	3301      	adds	r3, #1
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	80fb      	strh	r3, [r7, #6]
 80118f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118fc:	2b1f      	cmp	r3, #31
 80118fe:	dde3      	ble.n	80118c8 <MAP_showLog+0xc0>
		}
		
		printf("\n\r");
 8011900:	4823      	ldr	r0, [pc, #140]	; (8011990 <MAP_showLog+0x188>)
 8011902:	f005 fcb9 	bl	8017278 <iprintf>
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8011906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801190a:	b29b      	uxth	r3, r3
 801190c:	3b01      	subs	r3, #1
 801190e:	b29b      	uxth	r3, r3
 8011910:	80bb      	strh	r3, [r7, #4]
 8011912:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	da9b      	bge.n	8011852 <MAP_showLog+0x4a>
	}
	
	printf("     ");
 801191a:	481e      	ldr	r0, [pc, #120]	; (8011994 <MAP_showLog+0x18c>)
 801191c:	f005 fcac 	bl	8017278 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8011920:	2300      	movs	r3, #0
 8011922:	80fb      	strh	r3, [r7, #6]
 8011924:	e017      	b.n	8011956 <MAP_showLog+0x14e>
		printf("%2d",x%10);
 8011926:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801192a:	4b1b      	ldr	r3, [pc, #108]	; (8011998 <MAP_showLog+0x190>)
 801192c:	fb83 1302 	smull	r1, r3, r3, r2
 8011930:	1099      	asrs	r1, r3, #2
 8011932:	17d3      	asrs	r3, r2, #31
 8011934:	1ac9      	subs	r1, r1, r3
 8011936:	460b      	mov	r3, r1
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	440b      	add	r3, r1
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	b21b      	sxth	r3, r3
 8011942:	4619      	mov	r1, r3
 8011944:	4815      	ldr	r0, [pc, #84]	; (801199c <MAP_showLog+0x194>)
 8011946:	f005 fc97 	bl	8017278 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 801194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801194e:	b29b      	uxth	r3, r3
 8011950:	3301      	adds	r3, #1
 8011952:	b29b      	uxth	r3, r3
 8011954:	80fb      	strh	r3, [r7, #6]
 8011956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801195a:	2b1f      	cmp	r3, #31
 801195c:	dde3      	ble.n	8011926 <MAP_showLog+0x11e>
	}
	printf("\n\r");
 801195e:	480c      	ldr	r0, [pc, #48]	; (8011990 <MAP_showLog+0x188>)
 8011960:	f005 fc8a 	bl	8017278 <iprintf>

}
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	0801c52c 	.word	0x0801c52c
 8011970:	0801c544 	.word	0x0801c544
 8011974:	0801c560 	.word	0x0801c560
 8011978:	0801c568 	.word	0x0801c568
 801197c:	0801c56c 	.word	0x0801c56c
 8011980:	0801c570 	.word	0x0801c570
 8011984:	20000854 	.word	0x20000854
 8011988:	0801c578 	.word	0x0801c578
 801198c:	0801c580 	.word	0x0801c580
 8011990:	0801c584 	.word	0x0801c584
 8011994:	0801c588 	.word	0x0801c588
 8011998:	66666667 	.word	0x66666667
 801199c:	0801c590 	.word	0x0801c590

080119a0 <MAP_clearMap>:
		printf("\n\r");
	}
}

void MAP_clearMap( void )
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for ( y = 0; y < MAP_Y_SIZE; y++){
 80119a6:	2300      	movs	r3, #0
 80119a8:	80bb      	strh	r3, [r7, #4]
 80119aa:	e059      	b.n	8011a60 <MAP_clearMap+0xc0>
		for( x = 0; x < MAP_X_SIZE; x++){
 80119ac:	2300      	movs	r3, #0
 80119ae:	80fb      	strh	r3, [r7, #6]
 80119b0:	e050      	b.n	8011a54 <MAP_clearMap+0xb4>
			uc_data = 0x00;
 80119b2:	2300      	movs	r3, #0
 80119b4:	70fb      	strb	r3, [r7, #3]
			if ( ( x == 0) && ( y == 0 ) ) uc_data = 0xfe;
 80119b6:	88fb      	ldrh	r3, [r7, #6]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d105      	bne.n	80119c8 <MAP_clearMap+0x28>
 80119bc:	88bb      	ldrh	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d102      	bne.n	80119c8 <MAP_clearMap+0x28>
 80119c2:	23fe      	movs	r3, #254	; 0xfe
 80119c4:	70fb      	strb	r3, [r7, #3]
 80119c6:	e03a      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( ( x == 1 ) && ( y == 0 ) ) uc_data = 0xcc;
 80119c8:	88fb      	ldrh	r3, [r7, #6]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d105      	bne.n	80119da <MAP_clearMap+0x3a>
 80119ce:	88bb      	ldrh	r3, [r7, #4]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <MAP_clearMap+0x3a>
 80119d4:	23cc      	movs	r3, #204	; 0xcc
 80119d6:	70fb      	strb	r3, [r7, #3]
 80119d8:	e031      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == 0 ) ) uc_data = 0x66;
 80119da:	88fb      	ldrh	r3, [r7, #6]
 80119dc:	2b1f      	cmp	r3, #31
 80119de:	d105      	bne.n	80119ec <MAP_clearMap+0x4c>
 80119e0:	88bb      	ldrh	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d102      	bne.n	80119ec <MAP_clearMap+0x4c>
 80119e6:	2366      	movs	r3, #102	; 0x66
 80119e8:	70fb      	strb	r3, [r7, #3]
 80119ea:	e028      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( ( x == 0 ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x99;
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d105      	bne.n	80119fe <MAP_clearMap+0x5e>
 80119f2:	88bb      	ldrh	r3, [r7, #4]
 80119f4:	2b1f      	cmp	r3, #31
 80119f6:	d102      	bne.n	80119fe <MAP_clearMap+0x5e>
 80119f8:	2399      	movs	r3, #153	; 0x99
 80119fa:	70fb      	strb	r3, [r7, #3]
 80119fc:	e01f      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x33;
 80119fe:	88fb      	ldrh	r3, [r7, #6]
 8011a00:	2b1f      	cmp	r3, #31
 8011a02:	d105      	bne.n	8011a10 <MAP_clearMap+0x70>
 8011a04:	88bb      	ldrh	r3, [r7, #4]
 8011a06:	2b1f      	cmp	r3, #31
 8011a08:	d102      	bne.n	8011a10 <MAP_clearMap+0x70>
 8011a0a:	2333      	movs	r3, #51	; 0x33
 8011a0c:	70fb      	strb	r3, [r7, #3]
 8011a0e:	e016      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( x == 0 ) uc_data = 0x88;
 8011a10:	88fb      	ldrh	r3, [r7, #6]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <MAP_clearMap+0x7c>
 8011a16:	2388      	movs	r3, #136	; 0x88
 8011a18:	70fb      	strb	r3, [r7, #3]
 8011a1a:	e010      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( x == (MAP_X_SIZE-1) ) uc_data = 0x22;
 8011a1c:	88fb      	ldrh	r3, [r7, #6]
 8011a1e:	2b1f      	cmp	r3, #31
 8011a20:	d102      	bne.n	8011a28 <MAP_clearMap+0x88>
 8011a22:	2322      	movs	r3, #34	; 0x22
 8011a24:	70fb      	strb	r3, [r7, #3]
 8011a26:	e00a      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( y == 0 ) uc_data = 0x44;
 8011a28:	88bb      	ldrh	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d102      	bne.n	8011a34 <MAP_clearMap+0x94>
 8011a2e:	2344      	movs	r3, #68	; 0x44
 8011a30:	70fb      	strb	r3, [r7, #3]
 8011a32:	e004      	b.n	8011a3e <MAP_clearMap+0x9e>
			else if ( y == (MAP_Y_SIZE-1) ) uc_data = 0x11;
 8011a34:	88bb      	ldrh	r3, [r7, #4]
 8011a36:	2b1f      	cmp	r3, #31
 8011a38:	d101      	bne.n	8011a3e <MAP_clearMap+0x9e>
 8011a3a:	2311      	movs	r3, #17
 8011a3c:	70fb      	strb	r3, [r7, #3]
			g_sysMap[y][x] = uc_data;
 8011a3e:	88ba      	ldrh	r2, [r7, #4]
 8011a40:	88fb      	ldrh	r3, [r7, #6]
 8011a42:	490c      	ldr	r1, [pc, #48]	; (8011a74 <MAP_clearMap+0xd4>)
 8011a44:	0152      	lsls	r2, r2, #5
 8011a46:	440a      	add	r2, r1
 8011a48:	4413      	add	r3, r2
 8011a4a:	78fa      	ldrb	r2, [r7, #3]
 8011a4c:	701a      	strb	r2, [r3, #0]
		for( x = 0; x < MAP_X_SIZE; x++){
 8011a4e:	88fb      	ldrh	r3, [r7, #6]
 8011a50:	3301      	adds	r3, #1
 8011a52:	80fb      	strh	r3, [r7, #6]
 8011a54:	88fb      	ldrh	r3, [r7, #6]
 8011a56:	2b1f      	cmp	r3, #31
 8011a58:	d9ab      	bls.n	80119b2 <MAP_clearMap+0x12>
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8011a5a:	88bb      	ldrh	r3, [r7, #4]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	80bb      	strh	r3, [r7, #4]
 8011a60:	88bb      	ldrh	r3, [r7, #4]
 8011a62:	2b1f      	cmp	r3, #31
 8011a64:	d9a2      	bls.n	80119ac <MAP_clearMap+0xc>
		}
	}

}
 8011a66:	bf00      	nop
 8011a68:	bf00      	nop
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr
 8011a74:	20000854 	.word	0x20000854

08011a78 <MAP_getWallData>:

uint8_t MAP_getWallData( void )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

//	LED_offAll();			// debug

	// センサ情報から壁情報作成
	uc_wall = 0;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 8011a82:	f7fc f9e3 	bl	800de4c <DIST_isWall_FRONT>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d003      	beq.n	8011a94 <MAP_getWallData+0x1c>
		uc_wall = uc_wall | 0x11;
 8011a8c:	79fb      	ldrb	r3, [r7, #7]
 8011a8e:	f043 0311 	orr.w	r3, r3, #17
 8011a92:	71fb      	strb	r3, [r7, #7]
//		LED_on(LED3);			// debug
//		LED_on(LED2);			// debug
	}
	if( TRUE == DIST_isWall_L_SIDE() ){
 8011a94:	f7fc fa0c 	bl	800deb0 <DIST_isWall_L_SIDE>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d003      	beq.n	8011aa6 <MAP_getWallData+0x2e>
//		LED_on(LED0);			// debug
		uc_wall = uc_wall | 0x88;
 8011a9e:	79fb      	ldrb	r3, [r7, #7]
 8011aa0:	f063 0377 	orn	r3, r3, #119	; 0x77
 8011aa4:	71fb      	strb	r3, [r7, #7]
	}
	if( TRUE == DIST_isWall_R_SIDE() ){
 8011aa6:	f7fc f9ed 	bl	800de84 <DIST_isWall_R_SIDE>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d003      	beq.n	8011ab8 <MAP_getWallData+0x40>
//		LED_on(LED1);			// debug
		uc_wall = uc_wall | 0x22;
 8011ab0:	79fb      	ldrb	r3, [r7, #7]
 8011ab2:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8011ab6:	71fb      	strb	r3, [r7, #7]
	}
	if(DIST_getNowVal(DIST_SEN_L_SIDE)>L_SIDE_REF){
 8011ab8:	2003      	movs	r0, #3
 8011aba:	f7fb fed5 	bl	800d868 <DIST_getNowVal>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8011ac4:	dd02      	ble.n	8011acc <MAP_getWallData+0x54>
		near_wall = 1;
 8011ac6:	4b16      	ldr	r3, [pc, #88]	; (8011b20 <MAP_getWallData+0xa8>)
 8011ac8:	2201      	movs	r2, #1
 8011aca:	701a      	strb	r2, [r3, #0]
	}
	if(DIST_getNowVal(DIST_SEN_R_SIDE)>R_SIDE_REF){
 8011acc:	2002      	movs	r0, #2
 8011ace:	f7fb fecb 	bl	800d868 <DIST_getNowVal>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8011ad8:	dd02      	ble.n	8011ae0 <MAP_getWallData+0x68>
		near_wall = 1;
 8011ada:	4b11      	ldr	r3, [pc, #68]	; (8011b20 <MAP_getWallData+0xa8>)
 8011adc:	2201      	movs	r2, #1
 8011ade:	701a      	strb	r2, [r3, #0]
	}

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 8011ae0:	4b10      	ldr	r3, [pc, #64]	; (8011b24 <MAP_getWallData+0xac>)
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d103      	bne.n	8011af0 <MAP_getWallData+0x78>
		uc_wall = uc_wall >> 3;
 8011ae8:	79fb      	ldrb	r3, [r7, #7]
 8011aea:	08db      	lsrs	r3, r3, #3
 8011aec:	71fb      	strb	r3, [r7, #7]
 8011aee:	e00e      	b.n	8011b0e <MAP_getWallData+0x96>
	}
	else if ( en_Head == SOUTH ){
 8011af0:	4b0c      	ldr	r3, [pc, #48]	; (8011b24 <MAP_getWallData+0xac>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b02      	cmp	r3, #2
 8011af6:	d103      	bne.n	8011b00 <MAP_getWallData+0x88>
		uc_wall = uc_wall >> 2;
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	089b      	lsrs	r3, r3, #2
 8011afc:	71fb      	strb	r3, [r7, #7]
 8011afe:	e006      	b.n	8011b0e <MAP_getWallData+0x96>
	}
	else if ( en_Head == WEST ){
 8011b00:	4b08      	ldr	r3, [pc, #32]	; (8011b24 <MAP_getWallData+0xac>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b03      	cmp	r3, #3
 8011b06:	d102      	bne.n	8011b0e <MAP_getWallData+0x96>
		uc_wall = uc_wall >> 1;
 8011b08:	79fb      	ldrb	r3, [r7, #7]
 8011b0a:	085b      	lsrs	r3, r3, #1
 8011b0c:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 8011b0e:	79fb      	ldrb	r3, [r7, #7]
 8011b10:	f063 030f 	orn	r3, r3, #15
 8011b14:	b2db      	uxtb	r3, r3
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	200002da 	.word	0x200002da
 8011b24:	2000e750 	.word	0x2000e750

08011b28 <MAP_makeMapData>:

void MAP_makeMapData( void )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込
	if ( ( mx == 0 ) && ( my == 0 ) ){
 8011b2e:	4b66      	ldr	r3, [pc, #408]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d106      	bne.n	8011b44 <MAP_makeMapData+0x1c>
 8011b36:	4b65      	ldr	r3, [pc, #404]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d102      	bne.n	8011b44 <MAP_makeMapData+0x1c>
		uc_wall = 0xfe;
 8011b3e:	23fe      	movs	r3, #254	; 0xfe
 8011b40:	71fb      	strb	r3, [r7, #7]
 8011b42:	e003      	b.n	8011b4c <MAP_makeMapData+0x24>
	}
	else{
		uc_wall = MAP_getWallData();
 8011b44:	f7ff ff98 	bl	8011a78 <MAP_getWallData>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	71fb      	strb	r3, [r7, #7]
	}
	g_sysMap[my][mx] = uc_wall;
 8011b4c:	4b5f      	ldr	r3, [pc, #380]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	4618      	mov	r0, r3
 8011b52:	4b5d      	ldr	r3, [pc, #372]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	4619      	mov	r1, r3
 8011b58:	4a5d      	ldr	r2, [pc, #372]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011b5a:	0143      	lsls	r3, r0, #5
 8011b5c:	4413      	add	r3, r2
 8011b5e:	440b      	add	r3, r1
 8011b60:	79fa      	ldrb	r2, [r7, #7]
 8011b62:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 8011b64:	4b58      	ldr	r3, [pc, #352]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	2b1f      	cmp	r3, #31
 8011b6a:	d026      	beq.n	8011bba <MAP_makeMapData+0x92>
		g_sysMap[my][mx+1] = ( g_sysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 8011b6c:	4b57      	ldr	r3, [pc, #348]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	461a      	mov	r2, r3
 8011b72:	4b55      	ldr	r3, [pc, #340]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	3301      	adds	r3, #1
 8011b78:	4955      	ldr	r1, [pc, #340]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011b7a:	0152      	lsls	r2, r2, #5
 8011b7c:	440a      	add	r2, r1
 8011b7e:	4413      	add	r3, r2
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	b25b      	sxtb	r3, r3
 8011b84:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8011b88:	b25b      	sxtb	r3, r3
 8011b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b8e:	b25a      	sxtb	r2, r3
 8011b90:	79fb      	ldrb	r3, [r7, #7]
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	b25b      	sxtb	r3, r3
 8011b96:	f003 0308 	and.w	r3, r3, #8
 8011b9a:	b25b      	sxtb	r3, r3
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	b259      	sxtb	r1, r3
 8011ba0:	4b4a      	ldr	r3, [pc, #296]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	4b48      	ldr	r3, [pc, #288]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	3301      	adds	r3, #1
 8011bac:	b2c8      	uxtb	r0, r1
 8011bae:	4948      	ldr	r1, [pc, #288]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011bb0:	0152      	lsls	r2, r2, #5
 8011bb2:	440a      	add	r2, r1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 8011bba:	4b43      	ldr	r3, [pc, #268]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d027      	beq.n	8011c12 <MAP_makeMapData+0xea>
		g_sysMap[my][mx-1] = ( g_sysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 8011bc2:	4b42      	ldr	r3, [pc, #264]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	4b3f      	ldr	r3, [pc, #252]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	4940      	ldr	r1, [pc, #256]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011bd0:	0152      	lsls	r2, r2, #5
 8011bd2:	440a      	add	r2, r1
 8011bd4:	4413      	add	r3, r2
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011bde:	b25b      	sxtb	r3, r3
 8011be0:	f043 0320 	orr.w	r3, r3, #32
 8011be4:	b25a      	sxtb	r2, r3
 8011be6:	79fb      	ldrb	r3, [r7, #7]
 8011be8:	089b      	lsrs	r3, r3, #2
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	b25b      	sxtb	r3, r3
 8011bee:	f003 0302 	and.w	r3, r3, #2
 8011bf2:	b25b      	sxtb	r3, r3
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	b259      	sxtb	r1, r3
 8011bf8:	4b34      	ldr	r3, [pc, #208]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	4b32      	ldr	r3, [pc, #200]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	b2c8      	uxtb	r0, r1
 8011c06:	4932      	ldr	r1, [pc, #200]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011c08:	0152      	lsls	r2, r2, #5
 8011c0a:	440a      	add	r2, r1
 8011c0c:	4413      	add	r3, r2
 8011c0e:	4602      	mov	r2, r0
 8011c10:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 8011c12:	4b2e      	ldr	r3, [pc, #184]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	2b1f      	cmp	r3, #31
 8011c18:	d026      	beq.n	8011c68 <MAP_makeMapData+0x140>
		g_sysMap[my+1][mx] = ( g_sysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 8011c1a:	4b2c      	ldr	r3, [pc, #176]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	4a29      	ldr	r2, [pc, #164]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011c22:	7812      	ldrb	r2, [r2, #0]
 8011c24:	4611      	mov	r1, r2
 8011c26:	4a2a      	ldr	r2, [pc, #168]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011c28:	015b      	lsls	r3, r3, #5
 8011c2a:	4413      	add	r3, r2
 8011c2c:	440b      	add	r3, r1
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	b25b      	sxtb	r3, r3
 8011c32:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8011c36:	b25b      	sxtb	r3, r3
 8011c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c3c:	b25a      	sxtb	r2, r3
 8011c3e:	79fb      	ldrb	r3, [r7, #7]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	b25b      	sxtb	r3, r3
 8011c44:	f003 0304 	and.w	r3, r3, #4
 8011c48:	b25b      	sxtb	r3, r3
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	b259      	sxtb	r1, r3
 8011c4e:	4b1f      	ldr	r3, [pc, #124]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	3301      	adds	r3, #1
 8011c54:	4a1c      	ldr	r2, [pc, #112]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011c56:	7812      	ldrb	r2, [r2, #0]
 8011c58:	4610      	mov	r0, r2
 8011c5a:	b2c9      	uxtb	r1, r1
 8011c5c:	4a1c      	ldr	r2, [pc, #112]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011c5e:	015b      	lsls	r3, r3, #5
 8011c60:	4413      	add	r3, r2
 8011c62:	4403      	add	r3, r0
 8011c64:	460a      	mov	r2, r1
 8011c66:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 8011c68:	4b18      	ldr	r3, [pc, #96]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d027      	beq.n	8011cc0 <MAP_makeMapData+0x198>
		g_sysMap[my-1][mx] = ( g_sysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 8011c70:	4b16      	ldr	r3, [pc, #88]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	4a14      	ldr	r2, [pc, #80]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011c78:	7812      	ldrb	r2, [r2, #0]
 8011c7a:	4611      	mov	r1, r2
 8011c7c:	4a14      	ldr	r2, [pc, #80]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011c7e:	015b      	lsls	r3, r3, #5
 8011c80:	4413      	add	r3, r2
 8011c82:	440b      	add	r3, r1
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	b25b      	sxtb	r3, r3
 8011c88:	f023 0311 	bic.w	r3, r3, #17
 8011c8c:	b25b      	sxtb	r3, r3
 8011c8e:	f043 0310 	orr.w	r3, r3, #16
 8011c92:	b25a      	sxtb	r2, r3
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	089b      	lsrs	r3, r3, #2
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	b25b      	sxtb	r3, r3
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	b25b      	sxtb	r3, r3
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	b259      	sxtb	r1, r3
 8011ca6:	4b09      	ldr	r3, [pc, #36]	; (8011ccc <MAP_makeMapData+0x1a4>)
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	4a06      	ldr	r2, [pc, #24]	; (8011cc8 <MAP_makeMapData+0x1a0>)
 8011cae:	7812      	ldrb	r2, [r2, #0]
 8011cb0:	4610      	mov	r0, r2
 8011cb2:	b2c9      	uxtb	r1, r1
 8011cb4:	4a06      	ldr	r2, [pc, #24]	; (8011cd0 <MAP_makeMapData+0x1a8>)
 8011cb6:	015b      	lsls	r3, r3, #5
 8011cb8:	4413      	add	r3, r2
 8011cba:	4403      	add	r3, r0
 8011cbc:	460a      	mov	r2, r1
 8011cbe:	701a      	strb	r2, [r3, #0]
	}

}
 8011cc0:	bf00      	nop
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	2000e753 	.word	0x2000e753
 8011ccc:	2000e749 	.word	0x2000e749
 8011cd0:	20000854 	.word	0x20000854

08011cd4 <setStep>:
	}
	while( uc_level != 0 );
	
}
*/
void setStep(const int8_t x, const int8_t y, const uint16_t step) {
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	71fb      	strb	r3, [r7, #7]
 8011cde:	460b      	mov	r3, r1
 8011ce0:	71bb      	strb	r3, [r7, #6]
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	80bb      	strh	r3, [r7, #4]
	/* (x, y) がフィールド内か確認 */
	if (x < 0 || y < 0 || x >= MAP_X_SIZE || y >= MAP_Y_SIZE) {
 8011ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	db0b      	blt.n	8011d06 <setStep+0x32>
 8011cee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	db07      	blt.n	8011d06 <setStep+0x32>
 8011cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cfa:	2b1f      	cmp	r3, #31
 8011cfc:	dc03      	bgt.n	8011d06 <setStep+0x32>
 8011cfe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011d02:	2b1f      	cmp	r3, #31
 8011d04:	dd03      	ble.n	8011d0e <setStep+0x3a>
		printf( "referred to out of field\r\n");
 8011d06:	4808      	ldr	r0, [pc, #32]	; (8011d28 <setStep+0x54>)
 8011d08:	f005 fb24 	bl	8017354 <puts>
		return;
 8011d0c:	e009      	b.n	8011d22 <setStep+0x4e>
	}
	us_cmap[y][x] = step;
 8011d0e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8011d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d16:	4905      	ldr	r1, [pc, #20]	; (8011d2c <setStep+0x58>)
 8011d18:	0152      	lsls	r2, r2, #5
 8011d1a:	4413      	add	r3, r2
 8011d1c:	88ba      	ldrh	r2, [r7, #4]
 8011d1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	0801c5d8 	.word	0x0801c5d8
 8011d2c:	20000c78 	.word	0x20000c78

08011d30 <MAP_makeContourMap_queue>:

void  MAP_makeContourMap_queue(//queue
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8011d30:	b590      	push	{r4, r7, lr}
 8011d32:	b0cd      	sub	sp, #308	; 0x134
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4604      	mov	r4, r0
 8011d38:	4608      	mov	r0, r1
 8011d3a:	4611      	mov	r1, r2
 8011d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011d44:	4622      	mov	r2, r4
 8011d46:	701a      	strb	r2, [r3, #0]
 8011d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d4c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011d50:	4602      	mov	r2, r0
 8011d52:	701a      	strb	r2, [r3, #0]
 8011d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d58:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011d5c:	460a      	mov	r2, r1
 8011d5e:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）
 8011d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d64:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011d68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011d6c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8011d70:	7812      	ldrb	r2, [r2, #0]
 8011d72:	701a      	strb	r2, [r3, #0]

	queue_t queue;
	queue_t* pQueue = &queue;
 8011d74:	f107 0310 	add.w	r3, r7, #16
 8011d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 8011d7c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011d80:	f7f1 f94c 	bl	800301c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8011d84:	2300      	movs	r3, #0
 8011d86:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8011d8a:	e014      	b.n	8011db6 <MAP_makeContourMap_queue+0x86>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 8011d8c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011d90:	095b      	lsrs	r3, r3, #5
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	461a      	mov	r2, r3
 8011d96:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011d9a:	f003 031f 	and.w	r3, r3, #31
 8011d9e:	49d7      	ldr	r1, [pc, #860]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011da0:	0152      	lsls	r2, r2, #5
 8011da2:	4413      	add	r3, r2
 8011da4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011da8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8011dac:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011db0:	3301      	adds	r3, #1
 8011db2:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8011db6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dbe:	d3e5      	bcc.n	8011d8c <MAP_makeContourMap_queue+0x5c>

//	std::queue<stPOSITION> q;
//	QueryPerformanceCounter(&start);

	/* 目標地点の等高線を0に設定 */
	setStep(uc_goalX, uc_goalY, 0);
 8011dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011dc4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011dc8:	f993 0000 	ldrsb.w	r0, [r3]
 8011dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011dd0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	4619      	mov	r1, r3
 8011ddc:	f7ff ff7a 	bl	8011cd4 <setStep>
	st_pos.x = uc_goalX;
 8011de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011de4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = uc_goalY;
 8011dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011df2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 8011e02:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8011e06:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011e0a:	f7f1 f937 	bl	800307c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 8011e0e:	e167      	b.n	80120e0 <MAP_makeContourMap_queue+0x3b0>
		const stPOSITION focus = dequeue(pQueue);
 8011e10:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011e14:	f7f1 f96e 	bl	80030f4 <dequeue>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e1e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011e22:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8011e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011e2c:	885b      	ldrh	r3, [r3, #2]
 8011e2e:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 8011e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e36:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 8011e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8011e48:	785b      	ldrb	r3, [r3, #1]
 8011e4a:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 8011e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011e5a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8011e5e:	6812      	ldr	r2, [r2, #0]
 8011e60:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 8011e62:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011e66:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011e6a:	49a5      	ldr	r1, [pc, #660]	; (8012100 <MAP_makeContourMap_queue+0x3d0>)
 8011e6c:	0152      	lsls	r2, r2, #5
 8011e6e:	440a      	add	r2, r1
 8011e70:	4413      	add	r3, r2
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8011e78:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d146      	bne.n	8011f12 <MAP_makeContourMap_queue+0x1e2>
 8011e84:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011e88:	2b1f      	cmp	r3, #31
 8011e8a:	d042      	beq.n	8011f12 <MAP_makeContourMap_queue+0x1e2>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 8011e8c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011e90:	1c5a      	adds	r2, r3, #1
 8011e92:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011e96:	4999      	ldr	r1, [pc, #612]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011e98:	0152      	lsls	r2, r2, #5
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	dd32      	ble.n	8011f12 <MAP_makeContourMap_queue+0x1e2>
				next.step = focus_step + 1;
 8011eac:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011eb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011ebc:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 8011ebe:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011ec8:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8011ecc:	3101      	adds	r1, #1
 8011ece:	b288      	uxth	r0, r1
 8011ed0:	498a      	ldr	r1, [pc, #552]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011ed2:	0152      	lsls	r2, r2, #5
 8011ed4:	4413      	add	r3, r2
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8011edc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011ee0:	b2da      	uxtb	r2, r3
 8011ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011eea:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8011eec:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011efa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011efe:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 8011f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011f08:	6819      	ldr	r1, [r3, #0]
 8011f0a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011f0e:	f7f1 f8b5 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8011f12:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8011f16:	f003 0302 	and.w	r3, r3, #2
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d146      	bne.n	8011fac <MAP_makeContourMap_queue+0x27c>
 8011f1e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011f22:	2b1f      	cmp	r3, #31
 8011f24:	d042      	beq.n	8011fac <MAP_makeContourMap_queue+0x27c>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 8011f26:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011f2a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011f2e:	3301      	adds	r3, #1
 8011f30:	4972      	ldr	r1, [pc, #456]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011f32:	0152      	lsls	r2, r2, #5
 8011f34:	4413      	add	r3, r2
 8011f36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011f40:	3301      	adds	r3, #1
 8011f42:	429a      	cmp	r2, r3
 8011f44:	dd32      	ble.n	8011fac <MAP_makeContourMap_queue+0x27c>
				next.step = focus_step + 1;
 8011f46:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011f56:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 8011f58:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011f5c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011f60:	3301      	adds	r3, #1
 8011f62:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8011f66:	3101      	adds	r1, #1
 8011f68:	b288      	uxth	r0, r1
 8011f6a:	4964      	ldr	r1, [pc, #400]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011f6c:	0152      	lsls	r2, r2, #5
 8011f6e:	4413      	add	r3, r2
 8011f70:	4602      	mov	r2, r0
 8011f72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 8011f76:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	b2da      	uxtb	r2, r3
 8011f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011f88:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8011f8a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011f98:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8011f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011fa2:	6819      	ldr	r1, [r3, #0]
 8011fa4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011fa8:	f7f1 f868 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8011fac:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d146      	bne.n	8012046 <MAP_makeContourMap_queue+0x316>
 8011fb8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d042      	beq.n	8012046 <MAP_makeContourMap_queue+0x316>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 8011fc0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011fc4:	1e5a      	subs	r2, r3, #1
 8011fc6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011fca:	494c      	ldr	r1, [pc, #304]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8011fcc:	0152      	lsls	r2, r2, #5
 8011fce:	4413      	add	r3, r2
 8011fd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011fda:	3301      	adds	r3, #1
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	dd32      	ble.n	8012046 <MAP_makeContourMap_queue+0x316>
				next.step = focus_step + 1;
 8011fe0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011fec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011ff0:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 8011ff2:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011ff6:	1e5a      	subs	r2, r3, #1
 8011ff8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011ffc:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8012000:	3101      	adds	r1, #1
 8012002:	b288      	uxth	r0, r1
 8012004:	493d      	ldr	r1, [pc, #244]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8012006:	0152      	lsls	r2, r2, #5
 8012008:	4413      	add	r3, r2
 801200a:	4602      	mov	r2, r0
 801200c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8012010:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012014:	b2da      	uxtb	r2, r3
 8012016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801201a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801201e:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 8012020:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012024:	b2db      	uxtb	r3, r3
 8012026:	3b01      	subs	r3, #1
 8012028:	b2da      	uxtb	r2, r3
 801202a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801202e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012032:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8012034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012038:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801203c:	6819      	ldr	r1, [r3, #0]
 801203e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012042:	f7f1 f81b 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8012046:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 801204a:	f003 0308 	and.w	r3, r3, #8
 801204e:	2b00      	cmp	r3, #0
 8012050:	d146      	bne.n	80120e0 <MAP_makeContourMap_queue+0x3b0>
 8012052:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012056:	2b00      	cmp	r3, #0
 8012058:	d042      	beq.n	80120e0 <MAP_makeContourMap_queue+0x3b0>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 801205a:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 801205e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012062:	3b01      	subs	r3, #1
 8012064:	4925      	ldr	r1, [pc, #148]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 8012066:	0152      	lsls	r2, r2, #5
 8012068:	4413      	add	r3, r2
 801206a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801206e:	461a      	mov	r2, r3
 8012070:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8012074:	3301      	adds	r3, #1
 8012076:	429a      	cmp	r2, r3
 8012078:	dd32      	ble.n	80120e0 <MAP_makeContourMap_queue+0x3b0>
				next.step = focus_step + 1;
 801207a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801207e:	3301      	adds	r3, #1
 8012080:	b29a      	uxth	r2, r3
 8012082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801208a:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 801208c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012090:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012094:	3b01      	subs	r3, #1
 8012096:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 801209a:	3101      	adds	r1, #1
 801209c:	b288      	uxth	r0, r1
 801209e:	4917      	ldr	r1, [pc, #92]	; (80120fc <MAP_makeContourMap_queue+0x3cc>)
 80120a0:	0152      	lsls	r2, r2, #5
 80120a2:	4413      	add	r3, r2
 80120a4:	4602      	mov	r2, r0
 80120a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 80120aa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	3b01      	subs	r3, #1
 80120b2:	b2da      	uxtb	r2, r3
 80120b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80120b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80120bc:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80120be:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80120c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80120cc:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 80120ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80120d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80120d6:	6819      	ldr	r1, [r3, #0]
 80120d8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80120dc:	f7f0 ffce 	bl	800307c <enqueue>
	while (pQueue->flag != EMPTY) {
 80120e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80120e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f47f ae91 	bne.w	8011e10 <MAP_makeContourMap_queue+0xe0>
			}
		}

	}

}
 80120ee:	bf00      	nop
 80120f0:	bf00      	nop
 80120f2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd90      	pop	{r4, r7, pc}
 80120fa:	bf00      	nop
 80120fc:	20000c78 	.word	0x20000c78
 8012100:	20000854 	.word	0x20000854

08012104 <MAP_makeContourMap_run>:

void  MAP_makeContourMap_run( //初期型のフルマップ生成　最短用に使用
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8012104:	b480      	push	{r7}
 8012106:	b087      	sub	sp, #28
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	71fb      	strb	r3, [r7, #7]
 801210e:	460b      	mov	r3, r1
 8012110:	71bb      	strb	r3, [r7, #6]
 8012112:	4613      	mov	r3, r2
 8012114:	717b      	strb	r3, [r7, #5]
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	/* 等高線マップを初期化する */
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 8012116:	2300      	movs	r3, #0
 8012118:	827b      	strh	r3, [r7, #18]
 801211a:	e010      	b.n	801213e <MAP_makeContourMap_run+0x3a>
		us_cmap[ i / MAP_Y_SIZE][ i & (MAP_X_SIZE-1) ] = MAP_SMAP_MAX_VAL - 1;
 801211c:	8a7b      	ldrh	r3, [r7, #18]
 801211e:	095b      	lsrs	r3, r3, #5
 8012120:	b29b      	uxth	r3, r3
 8012122:	461a      	mov	r2, r3
 8012124:	8a7b      	ldrh	r3, [r7, #18]
 8012126:	f003 031f 	and.w	r3, r3, #31
 801212a:	4997      	ldr	r1, [pc, #604]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801212c:	0152      	lsls	r2, r2, #5
 801212e:	4413      	add	r3, r2
 8012130:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012134:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 8012138:	8a7b      	ldrh	r3, [r7, #18]
 801213a:	3301      	adds	r3, #1
 801213c:	827b      	strh	r3, [r7, #18]
 801213e:	8a7b      	ldrh	r3, [r7, #18]
 8012140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012144:	d3ea      	bcc.n	801211c <MAP_makeContourMap_run+0x18>
	}
	/* 目標地点の等高線を0に設定 */
	us_cmap[uc_goalY][uc_goalX] = 0;
 8012146:	79ba      	ldrb	r2, [r7, #6]
 8012148:	79fb      	ldrb	r3, [r7, #7]
 801214a:	498f      	ldr	r1, [pc, #572]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801214c:	0152      	lsls	r2, r2, #5
 801214e:	4413      	add	r3, r2
 8012150:	2200      	movs	r2, #0
 8012152:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 8012156:	4b8d      	ldr	r3, [pc, #564]	; (801238c <MAP_makeContourMap_run+0x288>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	2b04      	cmp	r3, #4
 801215c:	d11c      	bne.n	8012198 <MAP_makeContourMap_run+0x94>
		us_cmap[uc_goalY + 1][uc_goalX] = 0;
 801215e:	79bb      	ldrb	r3, [r7, #6]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	79fb      	ldrb	r3, [r7, #7]
 8012164:	4988      	ldr	r1, [pc, #544]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012166:	0152      	lsls	r2, r2, #5
 8012168:	4413      	add	r3, r2
 801216a:	2200      	movs	r2, #0
 801216c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX + 1] = 0;
 8012170:	79ba      	ldrb	r2, [r7, #6]
 8012172:	79fb      	ldrb	r3, [r7, #7]
 8012174:	3301      	adds	r3, #1
 8012176:	4984      	ldr	r1, [pc, #528]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012178:	0152      	lsls	r2, r2, #5
 801217a:	4413      	add	r3, r2
 801217c:	2200      	movs	r2, #0
 801217e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 8012182:	79bb      	ldrb	r3, [r7, #6]
 8012184:	1c5a      	adds	r2, r3, #1
 8012186:	79fb      	ldrb	r3, [r7, #7]
 8012188:	3301      	adds	r3, #1
 801218a:	497f      	ldr	r1, [pc, #508]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801218c:	0152      	lsls	r2, r2, #5
 801218e:	4413      	add	r3, r2
 8012190:	2200      	movs	r2, #0
 8012192:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8012196:	e04f      	b.n	8012238 <MAP_makeContourMap_run+0x134>
	}
	else if (GOAL_SIZE == 9){
 8012198:	4b7c      	ldr	r3, [pc, #496]	; (801238c <MAP_makeContourMap_run+0x288>)
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b09      	cmp	r3, #9
 801219e:	d14b      	bne.n	8012238 <MAP_makeContourMap_run+0x134>
		us_cmap[uc_goalY+1][uc_goalX] = 0;
 80121a0:	79bb      	ldrb	r3, [r7, #6]
 80121a2:	1c5a      	adds	r2, r3, #1
 80121a4:	79fb      	ldrb	r3, [r7, #7]
 80121a6:	4978      	ldr	r1, [pc, #480]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80121a8:	0152      	lsls	r2, r2, #5
 80121aa:	4413      	add	r3, r2
 80121ac:	2200      	movs	r2, #0
 80121ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+1] = 0;
 80121b2:	79ba      	ldrb	r2, [r7, #6]
 80121b4:	79fb      	ldrb	r3, [r7, #7]
 80121b6:	3301      	adds	r3, #1
 80121b8:	4973      	ldr	r1, [pc, #460]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80121ba:	0152      	lsls	r2, r2, #5
 80121bc:	4413      	add	r3, r2
 80121be:	2200      	movs	r2, #0
 80121c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+1] = 0;
 80121c4:	79bb      	ldrb	r3, [r7, #6]
 80121c6:	1c5a      	adds	r2, r3, #1
 80121c8:	79fb      	ldrb	r3, [r7, #7]
 80121ca:	3301      	adds	r3, #1
 80121cc:	496e      	ldr	r1, [pc, #440]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80121ce:	0152      	lsls	r2, r2, #5
 80121d0:	4413      	add	r3, r2
 80121d2:	2200      	movs	r2, #0
 80121d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX] = 0;
 80121d8:	79bb      	ldrb	r3, [r7, #6]
 80121da:	1c9a      	adds	r2, r3, #2
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	496a      	ldr	r1, [pc, #424]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80121e0:	0152      	lsls	r2, r2, #5
 80121e2:	4413      	add	r3, r2
 80121e4:	2200      	movs	r2, #0
 80121e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+1] = 0;
 80121ea:	79bb      	ldrb	r3, [r7, #6]
 80121ec:	1c9a      	adds	r2, r3, #2
 80121ee:	79fb      	ldrb	r3, [r7, #7]
 80121f0:	3301      	adds	r3, #1
 80121f2:	4965      	ldr	r1, [pc, #404]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80121f4:	0152      	lsls	r2, r2, #5
 80121f6:	4413      	add	r3, r2
 80121f8:	2200      	movs	r2, #0
 80121fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+2] = 0;
 80121fe:	79ba      	ldrb	r2, [r7, #6]
 8012200:	79fb      	ldrb	r3, [r7, #7]
 8012202:	3302      	adds	r3, #2
 8012204:	4960      	ldr	r1, [pc, #384]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012206:	0152      	lsls	r2, r2, #5
 8012208:	4413      	add	r3, r2
 801220a:	2200      	movs	r2, #0
 801220c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+2] = 0;
 8012210:	79bb      	ldrb	r3, [r7, #6]
 8012212:	1c5a      	adds	r2, r3, #1
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	3302      	adds	r3, #2
 8012218:	495b      	ldr	r1, [pc, #364]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801221a:	0152      	lsls	r2, r2, #5
 801221c:	4413      	add	r3, r2
 801221e:	2200      	movs	r2, #0
 8012220:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+2] = 0;
 8012224:	79bb      	ldrb	r3, [r7, #6]
 8012226:	1c9a      	adds	r2, r3, #2
 8012228:	79fb      	ldrb	r3, [r7, #7]
 801222a:	3302      	adds	r3, #2
 801222c:	4956      	ldr	r1, [pc, #344]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801222e:	0152      	lsls	r2, r2, #5
 8012230:	4413      	add	r3, r2
 8012232:	2200      	movs	r2, #0
 8012234:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	/* 等高線マップを作成 */
	uc_dase = 0;
 8012238:	2300      	movs	r3, #0
 801223a:	823b      	strh	r3, [r7, #16]
	do{
		uc_level = 0;
 801223c:	2300      	movs	r3, #0
 801223e:	81fb      	strh	r3, [r7, #14]
		uc_new = uc_dase + 1;
 8012240:	8a3b      	ldrh	r3, [r7, #16]
 8012242:	3301      	adds	r3, #1
 8012244:	81bb      	strh	r3, [r7, #12]
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 8012246:	2300      	movs	r3, #0
 8012248:	82bb      	strh	r3, [r7, #20]
 801224a:	e12d      	b.n	80124a8 <MAP_makeContourMap_run+0x3a4>
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 801224c:	2300      	movs	r3, #0
 801224e:	82fb      	strh	r3, [r7, #22]
 8012250:	e123      	b.n	801249a <MAP_makeContourMap_run+0x396>
				if ( us_cmap[y][x] == uc_dase ){
 8012252:	8aba      	ldrh	r2, [r7, #20]
 8012254:	8afb      	ldrh	r3, [r7, #22]
 8012256:	494c      	ldr	r1, [pc, #304]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012258:	0152      	lsls	r2, r2, #5
 801225a:	4413      	add	r3, r2
 801225c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012260:	8a3a      	ldrh	r2, [r7, #16]
 8012262:	429a      	cmp	r2, r3
 8012264:	f040 8116 	bne.w	8012494 <MAP_makeContourMap_run+0x390>
					uc_wallData = g_sysMap[y][x];
 8012268:	8aba      	ldrh	r2, [r7, #20]
 801226a:	8afb      	ldrh	r3, [r7, #22]
 801226c:	4948      	ldr	r1, [pc, #288]	; (8012390 <MAP_makeContourMap_run+0x28c>)
 801226e:	0152      	lsls	r2, r2, #5
 8012270:	440a      	add	r2, r1
 8012272:	4413      	add	r3, r2
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	72fb      	strb	r3, [r7, #11]
					/* 探索走行 */
					if( SEARCH == en_type ){
 8012278:	797b      	ldrb	r3, [r7, #5]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f040 808a 	bne.w	8012394 <MAP_makeContourMap_run+0x290>
						if ( ( ( uc_wallData & 0x01 ) == 0x00 ) && ( y != (MAP_Y_SIZE-1) ) ){
 8012280:	7afb      	ldrb	r3, [r7, #11]
 8012282:	f003 0301 	and.w	r3, r3, #1
 8012286:	2b00      	cmp	r3, #0
 8012288:	d11a      	bne.n	80122c0 <MAP_makeContourMap_run+0x1bc>
 801228a:	8abb      	ldrh	r3, [r7, #20]
 801228c:	2b1f      	cmp	r3, #31
 801228e:	d017      	beq.n	80122c0 <MAP_makeContourMap_run+0x1bc>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8012290:	8abb      	ldrh	r3, [r7, #20]
 8012292:	1c5a      	adds	r2, r3, #1
 8012294:	8afb      	ldrh	r3, [r7, #22]
 8012296:	493c      	ldr	r1, [pc, #240]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012298:	0152      	lsls	r2, r2, #5
 801229a:	4413      	add	r3, r2
 801229c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80122a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d10b      	bne.n	80122c0 <MAP_makeContourMap_run+0x1bc>
								us_cmap[y+1][x] = uc_new;
 80122a8:	8abb      	ldrh	r3, [r7, #20]
 80122aa:	1c5a      	adds	r2, r3, #1
 80122ac:	8afb      	ldrh	r3, [r7, #22]
 80122ae:	4936      	ldr	r1, [pc, #216]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80122b0:	0152      	lsls	r2, r2, #5
 80122b2:	4413      	add	r3, r2
 80122b4:	89ba      	ldrh	r2, [r7, #12]
 80122b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80122ba:	89fb      	ldrh	r3, [r7, #14]
 80122bc:	3301      	adds	r3, #1
 80122be:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x02 ) == 0x00 ) && ( x != (MAP_X_SIZE-1) ) ){
 80122c0:	7afb      	ldrb	r3, [r7, #11]
 80122c2:	f003 0302 	and.w	r3, r3, #2
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d11a      	bne.n	8012300 <MAP_makeContourMap_run+0x1fc>
 80122ca:	8afb      	ldrh	r3, [r7, #22]
 80122cc:	2b1f      	cmp	r3, #31
 80122ce:	d017      	beq.n	8012300 <MAP_makeContourMap_run+0x1fc>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 80122d0:	8aba      	ldrh	r2, [r7, #20]
 80122d2:	8afb      	ldrh	r3, [r7, #22]
 80122d4:	3301      	adds	r3, #1
 80122d6:	492c      	ldr	r1, [pc, #176]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80122d8:	0152      	lsls	r2, r2, #5
 80122da:	4413      	add	r3, r2
 80122dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80122e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80122e4:	4293      	cmp	r3, r2
 80122e6:	d10b      	bne.n	8012300 <MAP_makeContourMap_run+0x1fc>
								us_cmap[y][x+1] = uc_new;
 80122e8:	8aba      	ldrh	r2, [r7, #20]
 80122ea:	8afb      	ldrh	r3, [r7, #22]
 80122ec:	3301      	adds	r3, #1
 80122ee:	4926      	ldr	r1, [pc, #152]	; (8012388 <MAP_makeContourMap_run+0x284>)
 80122f0:	0152      	lsls	r2, r2, #5
 80122f2:	4413      	add	r3, r2
 80122f4:	89ba      	ldrh	r2, [r7, #12]
 80122f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80122fa:	89fb      	ldrh	r3, [r7, #14]
 80122fc:	3301      	adds	r3, #1
 80122fe:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x04 ) == 0x00 ) && ( y != 0 ) ){
 8012300:	7afb      	ldrb	r3, [r7, #11]
 8012302:	f003 0304 	and.w	r3, r3, #4
 8012306:	2b00      	cmp	r3, #0
 8012308:	d11a      	bne.n	8012340 <MAP_makeContourMap_run+0x23c>
 801230a:	8abb      	ldrh	r3, [r7, #20]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d017      	beq.n	8012340 <MAP_makeContourMap_run+0x23c>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8012310:	8abb      	ldrh	r3, [r7, #20]
 8012312:	1e5a      	subs	r2, r3, #1
 8012314:	8afb      	ldrh	r3, [r7, #22]
 8012316:	491c      	ldr	r1, [pc, #112]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012318:	0152      	lsls	r2, r2, #5
 801231a:	4413      	add	r3, r2
 801231c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012320:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012324:	4293      	cmp	r3, r2
 8012326:	d10b      	bne.n	8012340 <MAP_makeContourMap_run+0x23c>
								us_cmap[y-1][x] = uc_new;
 8012328:	8abb      	ldrh	r3, [r7, #20]
 801232a:	1e5a      	subs	r2, r3, #1
 801232c:	8afb      	ldrh	r3, [r7, #22]
 801232e:	4916      	ldr	r1, [pc, #88]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012330:	0152      	lsls	r2, r2, #5
 8012332:	4413      	add	r3, r2
 8012334:	89ba      	ldrh	r2, [r7, #12]
 8012336:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801233a:	89fb      	ldrh	r3, [r7, #14]
 801233c:	3301      	adds	r3, #1
 801233e:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x08 ) == 0x00 ) && ( x != 0 ) ){
 8012340:	7afb      	ldrb	r3, [r7, #11]
 8012342:	f003 0308 	and.w	r3, r3, #8
 8012346:	2b00      	cmp	r3, #0
 8012348:	f040 80a4 	bne.w	8012494 <MAP_makeContourMap_run+0x390>
 801234c:	8afb      	ldrh	r3, [r7, #22]
 801234e:	2b00      	cmp	r3, #0
 8012350:	f000 80a0 	beq.w	8012494 <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8012354:	8aba      	ldrh	r2, [r7, #20]
 8012356:	8afb      	ldrh	r3, [r7, #22]
 8012358:	3b01      	subs	r3, #1
 801235a:	490b      	ldr	r1, [pc, #44]	; (8012388 <MAP_makeContourMap_run+0x284>)
 801235c:	0152      	lsls	r2, r2, #5
 801235e:	4413      	add	r3, r2
 8012360:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012364:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012368:	4293      	cmp	r3, r2
 801236a:	f040 8093 	bne.w	8012494 <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 801236e:	8aba      	ldrh	r2, [r7, #20]
 8012370:	8afb      	ldrh	r3, [r7, #22]
 8012372:	3b01      	subs	r3, #1
 8012374:	4904      	ldr	r1, [pc, #16]	; (8012388 <MAP_makeContourMap_run+0x284>)
 8012376:	0152      	lsls	r2, r2, #5
 8012378:	4413      	add	r3, r2
 801237a:	89ba      	ldrh	r2, [r7, #12]
 801237c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8012380:	89fb      	ldrh	r3, [r7, #14]
 8012382:	3301      	adds	r3, #1
 8012384:	81fb      	strh	r3, [r7, #14]
 8012386:	e085      	b.n	8012494 <MAP_makeContourMap_run+0x390>
 8012388:	20000c78 	.word	0x20000c78
 801238c:	2000e752 	.word	0x2000e752
 8012390:	20000854 	.word	0x20000854
							}
						}
					}
					/* 最短走行 */
					else{
						if ( ( ( uc_wallData & 0x11 ) == 0x10 ) && ( y != (MAP_Y_SIZE-1) ) ){
 8012394:	7afb      	ldrb	r3, [r7, #11]
 8012396:	f003 0311 	and.w	r3, r3, #17
 801239a:	2b10      	cmp	r3, #16
 801239c:	d11a      	bne.n	80123d4 <MAP_makeContourMap_run+0x2d0>
 801239e:	8abb      	ldrh	r3, [r7, #20]
 80123a0:	2b1f      	cmp	r3, #31
 80123a2:	d017      	beq.n	80123d4 <MAP_makeContourMap_run+0x2d0>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80123a4:	8abb      	ldrh	r3, [r7, #20]
 80123a6:	1c5a      	adds	r2, r3, #1
 80123a8:	8afb      	ldrh	r3, [r7, #22]
 80123aa:	4948      	ldr	r1, [pc, #288]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 80123ac:	0152      	lsls	r2, r2, #5
 80123ae:	4413      	add	r3, r2
 80123b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80123b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d10b      	bne.n	80123d4 <MAP_makeContourMap_run+0x2d0>
								us_cmap[y+1][x] = uc_new;
 80123bc:	8abb      	ldrh	r3, [r7, #20]
 80123be:	1c5a      	adds	r2, r3, #1
 80123c0:	8afb      	ldrh	r3, [r7, #22]
 80123c2:	4942      	ldr	r1, [pc, #264]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 80123c4:	0152      	lsls	r2, r2, #5
 80123c6:	4413      	add	r3, r2
 80123c8:	89ba      	ldrh	r2, [r7, #12]
 80123ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80123ce:	89fb      	ldrh	r3, [r7, #14]
 80123d0:	3301      	adds	r3, #1
 80123d2:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x22 ) == 0x20 ) && ( x != (MAP_X_SIZE-1) ) ){
 80123d4:	7afb      	ldrb	r3, [r7, #11]
 80123d6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80123da:	2b20      	cmp	r3, #32
 80123dc:	d11a      	bne.n	8012414 <MAP_makeContourMap_run+0x310>
 80123de:	8afb      	ldrh	r3, [r7, #22]
 80123e0:	2b1f      	cmp	r3, #31
 80123e2:	d017      	beq.n	8012414 <MAP_makeContourMap_run+0x310>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 80123e4:	8aba      	ldrh	r2, [r7, #20]
 80123e6:	8afb      	ldrh	r3, [r7, #22]
 80123e8:	3301      	adds	r3, #1
 80123ea:	4938      	ldr	r1, [pc, #224]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 80123ec:	0152      	lsls	r2, r2, #5
 80123ee:	4413      	add	r3, r2
 80123f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80123f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d10b      	bne.n	8012414 <MAP_makeContourMap_run+0x310>
								us_cmap[y][x+1] = uc_new;
 80123fc:	8aba      	ldrh	r2, [r7, #20]
 80123fe:	8afb      	ldrh	r3, [r7, #22]
 8012400:	3301      	adds	r3, #1
 8012402:	4932      	ldr	r1, [pc, #200]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 8012404:	0152      	lsls	r2, r2, #5
 8012406:	4413      	add	r3, r2
 8012408:	89ba      	ldrh	r2, [r7, #12]
 801240a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801240e:	89fb      	ldrh	r3, [r7, #14]
 8012410:	3301      	adds	r3, #1
 8012412:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x44 ) == 0x40 ) && ( y != 0 ) ){
 8012414:	7afb      	ldrb	r3, [r7, #11]
 8012416:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801241a:	2b40      	cmp	r3, #64	; 0x40
 801241c:	d11a      	bne.n	8012454 <MAP_makeContourMap_run+0x350>
 801241e:	8abb      	ldrh	r3, [r7, #20]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d017      	beq.n	8012454 <MAP_makeContourMap_run+0x350>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8012424:	8abb      	ldrh	r3, [r7, #20]
 8012426:	1e5a      	subs	r2, r3, #1
 8012428:	8afb      	ldrh	r3, [r7, #22]
 801242a:	4928      	ldr	r1, [pc, #160]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 801242c:	0152      	lsls	r2, r2, #5
 801242e:	4413      	add	r3, r2
 8012430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012434:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012438:	4293      	cmp	r3, r2
 801243a:	d10b      	bne.n	8012454 <MAP_makeContourMap_run+0x350>
								us_cmap[y-1][x] = uc_new;
 801243c:	8abb      	ldrh	r3, [r7, #20]
 801243e:	1e5a      	subs	r2, r3, #1
 8012440:	8afb      	ldrh	r3, [r7, #22]
 8012442:	4922      	ldr	r1, [pc, #136]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 8012444:	0152      	lsls	r2, r2, #5
 8012446:	4413      	add	r3, r2
 8012448:	89ba      	ldrh	r2, [r7, #12]
 801244a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801244e:	89fb      	ldrh	r3, [r7, #14]
 8012450:	3301      	adds	r3, #1
 8012452:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x88 ) == 0x80 ) && ( x != 0 ) ){
 8012454:	7afb      	ldrb	r3, [r7, #11]
 8012456:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801245a:	2b80      	cmp	r3, #128	; 0x80
 801245c:	d11a      	bne.n	8012494 <MAP_makeContourMap_run+0x390>
 801245e:	8afb      	ldrh	r3, [r7, #22]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d017      	beq.n	8012494 <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8012464:	8aba      	ldrh	r2, [r7, #20]
 8012466:	8afb      	ldrh	r3, [r7, #22]
 8012468:	3b01      	subs	r3, #1
 801246a:	4918      	ldr	r1, [pc, #96]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 801246c:	0152      	lsls	r2, r2, #5
 801246e:	4413      	add	r3, r2
 8012470:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012474:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012478:	4293      	cmp	r3, r2
 801247a:	d10b      	bne.n	8012494 <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 801247c:	8aba      	ldrh	r2, [r7, #20]
 801247e:	8afb      	ldrh	r3, [r7, #22]
 8012480:	3b01      	subs	r3, #1
 8012482:	4912      	ldr	r1, [pc, #72]	; (80124cc <MAP_makeContourMap_run+0x3c8>)
 8012484:	0152      	lsls	r2, r2, #5
 8012486:	4413      	add	r3, r2
 8012488:	89ba      	ldrh	r2, [r7, #12]
 801248a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801248e:	89fb      	ldrh	r3, [r7, #14]
 8012490:	3301      	adds	r3, #1
 8012492:	81fb      	strh	r3, [r7, #14]
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 8012494:	8afb      	ldrh	r3, [r7, #22]
 8012496:	3301      	adds	r3, #1
 8012498:	82fb      	strh	r3, [r7, #22]
 801249a:	8afb      	ldrh	r3, [r7, #22]
 801249c:	2b1f      	cmp	r3, #31
 801249e:	f67f aed8 	bls.w	8012252 <MAP_makeContourMap_run+0x14e>
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 80124a2:	8abb      	ldrh	r3, [r7, #20]
 80124a4:	3301      	adds	r3, #1
 80124a6:	82bb      	strh	r3, [r7, #20]
 80124a8:	8abb      	ldrh	r3, [r7, #20]
 80124aa:	2b1f      	cmp	r3, #31
 80124ac:	f67f aece 	bls.w	801224c <MAP_makeContourMap_run+0x148>
						}
					}
				}
			}
		}
		uc_dase = uc_dase + 1;
 80124b0:	8a3b      	ldrh	r3, [r7, #16]
 80124b2:	3301      	adds	r3, #1
 80124b4:	823b      	strh	r3, [r7, #16]
	}
	while( uc_level != 0 );
 80124b6:	89fb      	ldrh	r3, [r7, #14]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f47f aebf 	bne.w	801223c <MAP_makeContourMap_run+0x138>
	
}
 80124be:	bf00      	nop
 80124c0:	bf00      	nop
 80124c2:	371c      	adds	r7, #28
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr
 80124cc:	20000c78 	.word	0x20000c78

080124d0 <MAP_calcMouseDir>:

void MAP_calcMouseDir( 
	enMAP_SEARCH_TYPE	en_calcType,	///< [in] 計算方法
	enMAP_HEAD_DIR* 	p_head			///< [out] 進行方向（戻り値）
){
 80124d0:	b480      	push	{r7}
 80124d2:	b085      	sub	sp, #20
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	4603      	mov	r3, r0
 80124d8:	6039      	str	r1, [r7, #0]
 80124da:	71fb      	strb	r3, [r7, #7]
	uint16_t		us_new;
	enMAP_HEAD_DIR	en_tmpHead;

	/* 方向計算 */
	// 等高線MAP法
	if( CONTOUR_SYSTEM == en_calcType ){
 80124dc:	79fb      	ldrb	r3, [r7, #7]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	f040 80ee 	bne.w	80126c0 <MAP_calcMouseDir+0x1f0>
		// 周辺の4区画で一番目的地に近い移動方向を算出する。
		// ただし、移動できる一番近い区間が複数ある場合には、次の順で選択する。
		// ①未探索区間,直進 ②未探索区間,旋回 ③既探索区間,直進 ④既探索区間,旋回
		uc_wall = g_sysMap[my][mx];
 80124e4:	4b7b      	ldr	r3, [pc, #492]	; (80126d4 <MAP_calcMouseDir+0x204>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	4618      	mov	r0, r3
 80124ea:	4b7b      	ldr	r3, [pc, #492]	; (80126d8 <MAP_calcMouseDir+0x208>)
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	4619      	mov	r1, r3
 80124f0:	4a7a      	ldr	r2, [pc, #488]	; (80126dc <MAP_calcMouseDir+0x20c>)
 80124f2:	0143      	lsls	r3, r0, #5
 80124f4:	4413      	add	r3, r2
 80124f6:	440b      	add	r3, r1
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	72bb      	strb	r3, [r7, #10]
		us_base = MAP_SMAP_MAX_PRI_VAL;					// 16[区画]×16[区画]×4[方向]
 80124fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012500:	81fb      	strh	r3, [r7, #14]

		/* 4方向を比較 */
		//	北方向の区画の確認
		if ( ( uc_wall & 1 ) == 0 ){
 8012502:	7abb      	ldrb	r3, [r7, #10]
 8012504:	f003 0301 	and.w	r3, r3, #1
 8012508:	2b00      	cmp	r3, #0
 801250a:	d12f      	bne.n	801256c <MAP_calcMouseDir+0x9c>
			us_new = us_cmap[my+1][mx] * 4 + 4;
 801250c:	4b71      	ldr	r3, [pc, #452]	; (80126d4 <MAP_calcMouseDir+0x204>)
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	3301      	adds	r3, #1
 8012512:	4a71      	ldr	r2, [pc, #452]	; (80126d8 <MAP_calcMouseDir+0x208>)
 8012514:	7812      	ldrb	r2, [r2, #0]
 8012516:	4611      	mov	r1, r2
 8012518:	4a71      	ldr	r2, [pc, #452]	; (80126e0 <MAP_calcMouseDir+0x210>)
 801251a:	015b      	lsls	r3, r3, #5
 801251c:	440b      	add	r3, r1
 801251e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012522:	3301      	adds	r3, #1
 8012524:	b29b      	uxth	r3, r3
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my+1][mx] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 801252a:	4b6a      	ldr	r3, [pc, #424]	; (80126d4 <MAP_calcMouseDir+0x204>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	3301      	adds	r3, #1
 8012530:	4a69      	ldr	r2, [pc, #420]	; (80126d8 <MAP_calcMouseDir+0x208>)
 8012532:	7812      	ldrb	r2, [r2, #0]
 8012534:	4611      	mov	r1, r2
 8012536:	4a69      	ldr	r2, [pc, #420]	; (80126dc <MAP_calcMouseDir+0x20c>)
 8012538:	015b      	lsls	r3, r3, #5
 801253a:	4413      	add	r3, r2
 801253c:	440b      	add	r3, r1
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012544:	2bf0      	cmp	r3, #240	; 0xf0
 8012546:	d002      	beq.n	801254e <MAP_calcMouseDir+0x7e>
 8012548:	89bb      	ldrh	r3, [r7, #12]
 801254a:	3b02      	subs	r3, #2
 801254c:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == NORTH ) us_new = us_new - 1;
 801254e:	4b65      	ldr	r3, [pc, #404]	; (80126e4 <MAP_calcMouseDir+0x214>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d102      	bne.n	801255c <MAP_calcMouseDir+0x8c>
 8012556:	89bb      	ldrh	r3, [r7, #12]
 8012558:	3b01      	subs	r3, #1
 801255a:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 801255c:	89ba      	ldrh	r2, [r7, #12]
 801255e:	89fb      	ldrh	r3, [r7, #14]
 8012560:	429a      	cmp	r2, r3
 8012562:	d203      	bcs.n	801256c <MAP_calcMouseDir+0x9c>
				us_base = us_new;
 8012564:	89bb      	ldrh	r3, [r7, #12]
 8012566:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = NORTH;
 8012568:	2300      	movs	r3, #0
 801256a:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	東方向の区画の確認
		if ( ( uc_wall & 2 ) == 0 ){
 801256c:	7abb      	ldrb	r3, [r7, #10]
 801256e:	f003 0302 	and.w	r3, r3, #2
 8012572:	2b00      	cmp	r3, #0
 8012574:	d12f      	bne.n	80125d6 <MAP_calcMouseDir+0x106>
			us_new = us_cmap[my][mx+1] * 4 + 4;
 8012576:	4b57      	ldr	r3, [pc, #348]	; (80126d4 <MAP_calcMouseDir+0x204>)
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	4b56      	ldr	r3, [pc, #344]	; (80126d8 <MAP_calcMouseDir+0x208>)
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	3301      	adds	r3, #1
 8012582:	4957      	ldr	r1, [pc, #348]	; (80126e0 <MAP_calcMouseDir+0x210>)
 8012584:	0152      	lsls	r2, r2, #5
 8012586:	4413      	add	r3, r2
 8012588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801258c:	3301      	adds	r3, #1
 801258e:	b29b      	uxth	r3, r3
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx+1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8012594:	4b4f      	ldr	r3, [pc, #316]	; (80126d4 <MAP_calcMouseDir+0x204>)
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	461a      	mov	r2, r3
 801259a:	4b4f      	ldr	r3, [pc, #316]	; (80126d8 <MAP_calcMouseDir+0x208>)
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	3301      	adds	r3, #1
 80125a0:	494e      	ldr	r1, [pc, #312]	; (80126dc <MAP_calcMouseDir+0x20c>)
 80125a2:	0152      	lsls	r2, r2, #5
 80125a4:	440a      	add	r2, r1
 80125a6:	4413      	add	r3, r2
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125ae:	2bf0      	cmp	r3, #240	; 0xf0
 80125b0:	d002      	beq.n	80125b8 <MAP_calcMouseDir+0xe8>
 80125b2:	89bb      	ldrh	r3, [r7, #12]
 80125b4:	3b02      	subs	r3, #2
 80125b6:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == EAST) us_new = us_new - 1;
 80125b8:	4b4a      	ldr	r3, [pc, #296]	; (80126e4 <MAP_calcMouseDir+0x214>)
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d102      	bne.n	80125c6 <MAP_calcMouseDir+0xf6>
 80125c0:	89bb      	ldrh	r3, [r7, #12]
 80125c2:	3b01      	subs	r3, #1
 80125c4:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 80125c6:	89ba      	ldrh	r2, [r7, #12]
 80125c8:	89fb      	ldrh	r3, [r7, #14]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d203      	bcs.n	80125d6 <MAP_calcMouseDir+0x106>
				us_base = us_new;
 80125ce:	89bb      	ldrh	r3, [r7, #12]
 80125d0:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = EAST;
 80125d2:	2301      	movs	r3, #1
 80125d4:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	南方向の区画の確認
		if ( ( uc_wall & 4 ) == 0 ){
 80125d6:	7abb      	ldrb	r3, [r7, #10]
 80125d8:	f003 0304 	and.w	r3, r3, #4
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d12f      	bne.n	8012640 <MAP_calcMouseDir+0x170>
			us_new = us_cmap[my-1][mx] * 4 + 4;
 80125e0:	4b3c      	ldr	r3, [pc, #240]	; (80126d4 <MAP_calcMouseDir+0x204>)
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	4a3c      	ldr	r2, [pc, #240]	; (80126d8 <MAP_calcMouseDir+0x208>)
 80125e8:	7812      	ldrb	r2, [r2, #0]
 80125ea:	4611      	mov	r1, r2
 80125ec:	4a3c      	ldr	r2, [pc, #240]	; (80126e0 <MAP_calcMouseDir+0x210>)
 80125ee:	015b      	lsls	r3, r3, #5
 80125f0:	440b      	add	r3, r1
 80125f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125f6:	3301      	adds	r3, #1
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my-1][mx] & 0xf0 ) != 0xf0) us_new = us_new - 2;
 80125fe:	4b35      	ldr	r3, [pc, #212]	; (80126d4 <MAP_calcMouseDir+0x204>)
 8012600:	781b      	ldrb	r3, [r3, #0]
 8012602:	3b01      	subs	r3, #1
 8012604:	4a34      	ldr	r2, [pc, #208]	; (80126d8 <MAP_calcMouseDir+0x208>)
 8012606:	7812      	ldrb	r2, [r2, #0]
 8012608:	4611      	mov	r1, r2
 801260a:	4a34      	ldr	r2, [pc, #208]	; (80126dc <MAP_calcMouseDir+0x20c>)
 801260c:	015b      	lsls	r3, r3, #5
 801260e:	4413      	add	r3, r2
 8012610:	440b      	add	r3, r1
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012618:	2bf0      	cmp	r3, #240	; 0xf0
 801261a:	d002      	beq.n	8012622 <MAP_calcMouseDir+0x152>
 801261c:	89bb      	ldrh	r3, [r7, #12]
 801261e:	3b02      	subs	r3, #2
 8012620:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == SOUTH ) us_new = us_new - 1;
 8012622:	4b30      	ldr	r3, [pc, #192]	; (80126e4 <MAP_calcMouseDir+0x214>)
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	2b02      	cmp	r3, #2
 8012628:	d102      	bne.n	8012630 <MAP_calcMouseDir+0x160>
 801262a:	89bb      	ldrh	r3, [r7, #12]
 801262c:	3b01      	subs	r3, #1
 801262e:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8012630:	89ba      	ldrh	r2, [r7, #12]
 8012632:	89fb      	ldrh	r3, [r7, #14]
 8012634:	429a      	cmp	r2, r3
 8012636:	d203      	bcs.n	8012640 <MAP_calcMouseDir+0x170>
				us_base = us_new;
 8012638:	89bb      	ldrh	r3, [r7, #12]
 801263a:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = SOUTH;
 801263c:	2302      	movs	r3, #2
 801263e:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	西方向の区画の確認
		if ( ( uc_wall & 8 ) == 0 ){
 8012640:	7abb      	ldrb	r3, [r7, #10]
 8012642:	f003 0308 	and.w	r3, r3, #8
 8012646:	2b00      	cmp	r3, #0
 8012648:	d12f      	bne.n	80126aa <MAP_calcMouseDir+0x1da>
			us_new = us_cmap[my][mx-1] * 4 + 4;
 801264a:	4b22      	ldr	r3, [pc, #136]	; (80126d4 <MAP_calcMouseDir+0x204>)
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	461a      	mov	r2, r3
 8012650:	4b21      	ldr	r3, [pc, #132]	; (80126d8 <MAP_calcMouseDir+0x208>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	3b01      	subs	r3, #1
 8012656:	4922      	ldr	r1, [pc, #136]	; (80126e0 <MAP_calcMouseDir+0x210>)
 8012658:	0152      	lsls	r2, r2, #5
 801265a:	4413      	add	r3, r2
 801265c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012660:	3301      	adds	r3, #1
 8012662:	b29b      	uxth	r3, r3
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx-1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8012668:	4b1a      	ldr	r3, [pc, #104]	; (80126d4 <MAP_calcMouseDir+0x204>)
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	461a      	mov	r2, r3
 801266e:	4b1a      	ldr	r3, [pc, #104]	; (80126d8 <MAP_calcMouseDir+0x208>)
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	3b01      	subs	r3, #1
 8012674:	4919      	ldr	r1, [pc, #100]	; (80126dc <MAP_calcMouseDir+0x20c>)
 8012676:	0152      	lsls	r2, r2, #5
 8012678:	440a      	add	r2, r1
 801267a:	4413      	add	r3, r2
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012682:	2bf0      	cmp	r3, #240	; 0xf0
 8012684:	d002      	beq.n	801268c <MAP_calcMouseDir+0x1bc>
 8012686:	89bb      	ldrh	r3, [r7, #12]
 8012688:	3b02      	subs	r3, #2
 801268a:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == WEST ) us_new = us_new - 1;
 801268c:	4b15      	ldr	r3, [pc, #84]	; (80126e4 <MAP_calcMouseDir+0x214>)
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	2b03      	cmp	r3, #3
 8012692:	d102      	bne.n	801269a <MAP_calcMouseDir+0x1ca>
 8012694:	89bb      	ldrh	r3, [r7, #12]
 8012696:	3b01      	subs	r3, #1
 8012698:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 801269a:	89ba      	ldrh	r2, [r7, #12]
 801269c:	89fb      	ldrh	r3, [r7, #14]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d203      	bcs.n	80126aa <MAP_calcMouseDir+0x1da>
				us_base = us_new;
 80126a2:	89bb      	ldrh	r3, [r7, #12]
 80126a4:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = WEST;
 80126a6:	2303      	movs	r3, #3
 80126a8:	72fb      	strb	r3, [r7, #11]
			}
		}
		
		*p_head = (enMAP_HEAD_DIR)( (en_tmpHead - en_Head) & 3 );		// 移動方向
 80126aa:	4b0e      	ldr	r3, [pc, #56]	; (80126e4 <MAP_calcMouseDir+0x214>)
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	7afa      	ldrb	r2, [r7, #11]
 80126b0:	1ad3      	subs	r3, r2, r3
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	f003 0303 	and.w	r3, r3, #3
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	701a      	strb	r2, [r3, #0]
	// 制御方法指定なし
	else{
		*p_head = (enMAP_HEAD_DIR)0;
	}

}
 80126be:	e002      	b.n	80126c6 <MAP_calcMouseDir+0x1f6>
		*p_head = (enMAP_HEAD_DIR)0;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	2200      	movs	r2, #0
 80126c4:	701a      	strb	r2, [r3, #0]
}
 80126c6:	bf00      	nop
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	2000e749 	.word	0x2000e749
 80126d8:	2000e753 	.word	0x2000e753
 80126dc:	20000854 	.word	0x20000854
 80126e0:	20000c78 	.word	0x20000c78
 80126e4:	2000e750 	.word	0x2000e750

080126e8 <MAP_refMousePos>:

void MAP_refMousePos( 
	enMAP_HEAD_DIR 			en_head			///< [in] 進行方向
){
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	4603      	mov	r3, r0
 80126f0:	71fb      	strb	r3, [r7, #7]
	switch( en_head ){
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d827      	bhi.n	8012748 <MAP_refMousePos+0x60>
 80126f8:	a201      	add	r2, pc, #4	; (adr r2, 8012700 <MAP_refMousePos+0x18>)
 80126fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126fe:	bf00      	nop
 8012700:	08012711 	.word	0x08012711
 8012704:	0801271f 	.word	0x0801271f
 8012708:	0801272d 	.word	0x0801272d
 801270c:	0801273b 	.word	0x0801273b
		case NORTH:
			my = my + 1;
 8012710:	4b11      	ldr	r3, [pc, #68]	; (8012758 <MAP_refMousePos+0x70>)
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	3301      	adds	r3, #1
 8012716:	b2da      	uxtb	r2, r3
 8012718:	4b0f      	ldr	r3, [pc, #60]	; (8012758 <MAP_refMousePos+0x70>)
 801271a:	701a      	strb	r2, [r3, #0]
			break;
 801271c:	e015      	b.n	801274a <MAP_refMousePos+0x62>
		case EAST:
			mx = mx + 1;
 801271e:	4b0f      	ldr	r3, [pc, #60]	; (801275c <MAP_refMousePos+0x74>)
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	3301      	adds	r3, #1
 8012724:	b2da      	uxtb	r2, r3
 8012726:	4b0d      	ldr	r3, [pc, #52]	; (801275c <MAP_refMousePos+0x74>)
 8012728:	701a      	strb	r2, [r3, #0]
			break;
 801272a:	e00e      	b.n	801274a <MAP_refMousePos+0x62>
		case SOUTH:
			my = my - 1;
 801272c:	4b0a      	ldr	r3, [pc, #40]	; (8012758 <MAP_refMousePos+0x70>)
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	3b01      	subs	r3, #1
 8012732:	b2da      	uxtb	r2, r3
 8012734:	4b08      	ldr	r3, [pc, #32]	; (8012758 <MAP_refMousePos+0x70>)
 8012736:	701a      	strb	r2, [r3, #0]
			break;
 8012738:	e007      	b.n	801274a <MAP_refMousePos+0x62>
		case WEST:
			mx = mx - 1;
 801273a:	4b08      	ldr	r3, [pc, #32]	; (801275c <MAP_refMousePos+0x74>)
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	3b01      	subs	r3, #1
 8012740:	b2da      	uxtb	r2, r3
 8012742:	4b06      	ldr	r3, [pc, #24]	; (801275c <MAP_refMousePos+0x74>)
 8012744:	701a      	strb	r2, [r3, #0]
			break;
 8012746:	e000      	b.n	801274a <MAP_refMousePos+0x62>
		default:
			break;
 8012748:	bf00      	nop
	}
}
 801274a:	bf00      	nop
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr
 8012756:	bf00      	nop
 8012758:	2000e749 	.word	0x2000e749
 801275c:	2000e753 	.word	0x2000e753

08012760 <MAP_moveNextBlock>:

void MAP_moveNextBlock( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	4603      	mov	r3, r0
 8012768:	6039      	str	r1, [r7, #0]
 801276a:	71fb      	strb	r3, [r7, #7]
	*p_type = TRUE;
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	2201      	movs	r2, #1
 8012770:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8012772:	4b4d      	ldr	r3, [pc, #308]	; (80128a8 <MAP_moveNextBlock+0x148>)
 8012774:	f04f 0200 	mov.w	r2, #0
 8012778:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 801277a:	79fb      	ldrb	r3, [r7, #7]
 801277c:	2b03      	cmp	r3, #3
 801277e:	f200 8082 	bhi.w	8012886 <MAP_moveNextBlock+0x126>
 8012782:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <MAP_moveNextBlock+0x28>)
 8012784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012788:	08012799 	.word	0x08012799
 801278c:	080127a9 	.word	0x080127a9
 8012790:	080127d1 	.word	0x080127d1
 8012794:	080127bd 	.word	0x080127bd

		/* そのまま前進 */
		case NORTH:
			*p_type = FALSE;
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2200      	movs	r2, #0
 801279c:	701a      	strb	r2, [r3, #0]
			MOT_goBlock_Const( 1 );				// 1区画前進
 801279e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80127a2:	f7f9 fbf5 	bl	800bf90 <MOT_goBlock_Const>
			break;
 80127a6:	e071      	b.n	801288c <MAP_moveNextBlock+0x12c>
		// 右に旋回する
		case EAST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80127a8:	eddf 0a40 	vldr	s1, [pc, #256]	; 80128ac <MAP_moveNextBlock+0x14c>
 80127ac:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80127b0:	f7f9 fbca 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R90);					// 右90度旋回
 80127b4:	2000      	movs	r0, #0
 80127b6:	f7f9 fd2f 	bl	800c218 <MOT_turn>
			break;
 80127ba:	e067      	b.n	801288c <MAP_moveNextBlock+0x12c>
		// 左に旋回する
		case WEST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80127bc:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80128ac <MAP_moveNextBlock+0x14c>
 80127c0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80127c4:	f7f9 fbc0 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_L90);					// 右90度旋回
 80127c8:	2001      	movs	r0, #1
 80127ca:	f7f9 fd25 	bl	800c218 <MOT_turn>
			break;
 80127ce:	e05d      	b.n	801288c <MAP_moveNextBlock+0x12c>
		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80127d0:	eddf 0a36 	vldr	s1, [pc, #216]	; 80128ac <MAP_moveNextBlock+0x14c>
 80127d4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80127d8:	f7f9 fbb6 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);					// 右180度旋回
 80127dc:	2002      	movs	r0, #2
 80127de:	f7f9 fd1b 	bl	800c218 <MOT_turn>
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 80127e2:	4b33      	ldr	r3, [pc, #204]	; (80128b0 <MAP_moveNextBlock+0x150>)
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d10e      	bne.n	8012808 <MAP_moveNextBlock+0xa8>
 80127ea:	4b32      	ldr	r3, [pc, #200]	; (80128b4 <MAP_moveNextBlock+0x154>)
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	4618      	mov	r0, r3
 80127f0:	4b31      	ldr	r3, [pc, #196]	; (80128b8 <MAP_moveNextBlock+0x158>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	4619      	mov	r1, r3
 80127f6:	4a31      	ldr	r2, [pc, #196]	; (80128bc <MAP_moveNextBlock+0x15c>)
 80127f8:	0143      	lsls	r3, r0, #5
 80127fa:	4413      	add	r3, r2
 80127fc:	440b      	add	r3, r1
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	f003 0301 	and.w	r3, r3, #1
 8012804:	2b00      	cmp	r3, #0
 8012806:	d138      	bne.n	801287a <MAP_moveNextBlock+0x11a>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012808:	4b29      	ldr	r3, [pc, #164]	; (80128b0 <MAP_moveNextBlock+0x150>)
 801280a:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801280c:	2b01      	cmp	r3, #1
 801280e:	d10e      	bne.n	801282e <MAP_moveNextBlock+0xce>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012810:	4b28      	ldr	r3, [pc, #160]	; (80128b4 <MAP_moveNextBlock+0x154>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	4618      	mov	r0, r3
 8012816:	4b28      	ldr	r3, [pc, #160]	; (80128b8 <MAP_moveNextBlock+0x158>)
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	4619      	mov	r1, r3
 801281c:	4a27      	ldr	r2, [pc, #156]	; (80128bc <MAP_moveNextBlock+0x15c>)
 801281e:	0143      	lsls	r3, r0, #5
 8012820:	4413      	add	r3, r2
 8012822:	440b      	add	r3, r1
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	f003 0302 	and.w	r3, r3, #2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d125      	bne.n	801287a <MAP_moveNextBlock+0x11a>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 801282e:	4b20      	ldr	r3, [pc, #128]	; (80128b0 <MAP_moveNextBlock+0x150>)
 8012830:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012832:	2b02      	cmp	r3, #2
 8012834:	d10e      	bne.n	8012854 <MAP_moveNextBlock+0xf4>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012836:	4b1f      	ldr	r3, [pc, #124]	; (80128b4 <MAP_moveNextBlock+0x154>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	4618      	mov	r0, r3
 801283c:	4b1e      	ldr	r3, [pc, #120]	; (80128b8 <MAP_moveNextBlock+0x158>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	4619      	mov	r1, r3
 8012842:	4a1e      	ldr	r2, [pc, #120]	; (80128bc <MAP_moveNextBlock+0x15c>)
 8012844:	0143      	lsls	r3, r0, #5
 8012846:	4413      	add	r3, r2
 8012848:	440b      	add	r3, r1
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	f003 0304 	and.w	r3, r3, #4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d112      	bne.n	801287a <MAP_moveNextBlock+0x11a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012854:	4b16      	ldr	r3, [pc, #88]	; (80128b0 <MAP_moveNextBlock+0x150>)
 8012856:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012858:	2b03      	cmp	r3, #3
 801285a:	d116      	bne.n	801288a <MAP_moveNextBlock+0x12a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 801285c:	4b15      	ldr	r3, [pc, #84]	; (80128b4 <MAP_moveNextBlock+0x154>)
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	4618      	mov	r0, r3
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <MAP_moveNextBlock+0x158>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	4619      	mov	r1, r3
 8012868:	4a14      	ldr	r2, [pc, #80]	; (80128bc <MAP_moveNextBlock+0x15c>)
 801286a:	0143      	lsls	r3, r0, #5
 801286c:	4413      	add	r3, r2
 801286e:	440b      	add	r3, r1
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	f003 0308 	and.w	r3, r3, #8
 8012876:	2b00      	cmp	r3, #0
 8012878:	d007      	beq.n	801288a <MAP_moveNextBlock+0x12a>
			){
				MOT_goHitBackWall();					// バックする
 801287a:	f7fa f903 	bl	800ca84 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 801287e:	4b0a      	ldr	r3, [pc, #40]	; (80128a8 <MAP_moveNextBlock+0x148>)
 8012880:	4a0f      	ldr	r2, [pc, #60]	; (80128c0 <MAP_moveNextBlock+0x160>)
 8012882:	601a      	str	r2, [r3, #0]
			}
			break;
 8012884:	e001      	b.n	801288a <MAP_moveNextBlock+0x12a>
		default:
			break;
 8012886:	bf00      	nop
 8012888:	e000      	b.n	801288c <MAP_moveNextBlock+0x12c>
			break;
 801288a:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock(en_head, p_type);					// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 801288c:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <MAP_moveNextBlock+0x150>)
 801288e:	781a      	ldrb	r2, [r3, #0]
 8012890:	79fb      	ldrb	r3, [r7, #7]
 8012892:	4413      	add	r3, r2
 8012894:	b2db      	uxtb	r3, r3
 8012896:	f003 0303 	and.w	r3, r3, #3
 801289a:	b2da      	uxtb	r2, r3
 801289c:	4b04      	ldr	r3, [pc, #16]	; (80128b0 <MAP_moveNextBlock+0x150>)
 801289e:	701a      	strb	r2, [r3, #0]
//	}
}
 80128a0:	bf00      	nop
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	2000e74c 	.word	0x2000e74c
 80128ac:	00000000 	.word	0x00000000
 80128b0:	2000e750 	.word	0x2000e750
 80128b4:	2000e749 	.word	0x2000e749
 80128b8:	2000e753 	.word	0x2000e753
 80128bc:	20000854 	.word	0x20000854
 80128c0:	3e6b851f 	.word	0x3e6b851f

080128c4 <MAP_moveNextBlock_Sura>:

void MAP_moveNextBlock_Sura( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている
	bool*			p_type,			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
	bool			bl_resume		///< [in] FALSE: レジューム動作ではない、TURE:レジューム動作
){
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	4603      	mov	r3, r0
 80128cc:	6039      	str	r1, [r7, #0]
 80128ce:	71fb      	strb	r3, [r7, #7]
 80128d0:	4613      	mov	r3, r2
 80128d2:	71bb      	strb	r3, [r7, #6]
	*p_type = FALSE;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2200      	movs	r2, #0
 80128d8:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 80128da:	4b7e      	ldr	r3, [pc, #504]	; (8012ad4 <MAP_moveNextBlock_Sura+0x210>)
 80128dc:	f04f 0200 	mov.w	r2, #0
 80128e0:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 80128e2:	79fb      	ldrb	r3, [r7, #7]
 80128e4:	2b03      	cmp	r3, #3
 80128e6:	f200 8244 	bhi.w	8012d72 <MAP_moveNextBlock_Sura+0x4ae>
 80128ea:	a201      	add	r2, pc, #4	; (adr r2, 80128f0 <MAP_moveNextBlock_Sura+0x2c>)
 80128ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128f0:	08012901 	.word	0x08012901
 80128f4:	08012925 	.word	0x08012925
 80128f8:	08012cb1 	.word	0x08012cb1
 80128fc:	08012b01 	.word	0x08012b01

		// そのまま前進
		case NORTH:
			
			/* レジューム動作ではない */
			if( bl_resume == FALSE ){
 8012900:	79bb      	ldrb	r3, [r7, #6]
 8012902:	f083 0301 	eor.w	r3, r3, #1
 8012906:	b2db      	uxtb	r3, r3
 8012908:	2b00      	cmp	r3, #0
 801290a:	d004      	beq.n	8012916 <MAP_moveNextBlock_Sura+0x52>
		
				MOT_goBlock_Const( 1 );					// 1区画前進
 801290c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012910:	f7f9 fb3e 	bl	800bf90 <MOT_goBlock_Const>
			/* レジューム動作 */
			else{
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
//				uc_SlaCnt = 0;									// スラロームしていない
			}
			break;
 8012914:	e22e      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8012916:	eddf 0a70 	vldr	s1, [pc, #448]	; 8012ad8 <MAP_moveNextBlock_Sura+0x214>
 801291a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801291e:	f7f9 fb13 	bl	800bf48 <MOT_goBlock_FinSpeed>
			break;
 8012922:	e227      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>

		// 右にスラロームする
		case EAST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012924:	4b6d      	ldr	r3, [pc, #436]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d10e      	bne.n	801294a <MAP_moveNextBlock_Sura+0x86>
 801292c:	4b6c      	ldr	r3, [pc, #432]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	4618      	mov	r0, r3
 8012932:	4b6c      	ldr	r3, [pc, #432]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	4619      	mov	r1, r3
 8012938:	4a6b      	ldr	r2, [pc, #428]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 801293a:	0143      	lsls	r3, r0, #5
 801293c:	4413      	add	r3, r2
 801293e:	440b      	add	r3, r1
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	f003 0302 	and.w	r3, r3, #2
 8012946:	2b00      	cmp	r3, #0
 8012948:	d138      	bne.n	80129bc <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801294a:	4b64      	ldr	r3, [pc, #400]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 801294c:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801294e:	2b01      	cmp	r3, #1
 8012950:	d10e      	bne.n	8012970 <MAP_moveNextBlock_Sura+0xac>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012952:	4b63      	ldr	r3, [pc, #396]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	4618      	mov	r0, r3
 8012958:	4b62      	ldr	r3, [pc, #392]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	4619      	mov	r1, r3
 801295e:	4a62      	ldr	r2, [pc, #392]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012960:	0143      	lsls	r3, r0, #5
 8012962:	4413      	add	r3, r2
 8012964:	440b      	add	r3, r1
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	f003 0304 	and.w	r3, r3, #4
 801296c:	2b00      	cmp	r3, #0
 801296e:	d125      	bne.n	80129bc <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012970:	4b5a      	ldr	r3, [pc, #360]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012972:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012974:	2b02      	cmp	r3, #2
 8012976:	d10e      	bne.n	8012996 <MAP_moveNextBlock_Sura+0xd2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012978:	4b59      	ldr	r3, [pc, #356]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	4618      	mov	r0, r3
 801297e:	4b59      	ldr	r3, [pc, #356]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	4619      	mov	r1, r3
 8012984:	4a58      	ldr	r2, [pc, #352]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012986:	0143      	lsls	r3, r0, #5
 8012988:	4413      	add	r3, r2
 801298a:	440b      	add	r3, r1
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	f003 0308 	and.w	r3, r3, #8
 8012992:	2b00      	cmp	r3, #0
 8012994:	d112      	bne.n	80129bc <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012996:	4b51      	ldr	r3, [pc, #324]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012998:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 801299a:	2b03      	cmp	r3, #3
 801299c:	d112      	bne.n	80129c4 <MAP_moveNextBlock_Sura+0x100>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 801299e:	4b50      	ldr	r3, [pc, #320]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	4618      	mov	r0, r3
 80129a4:	4b4f      	ldr	r3, [pc, #316]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	4619      	mov	r1, r3
 80129aa:	4a4f      	ldr	r2, [pc, #316]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 80129ac:	0143      	lsls	r3, r0, #5
 80129ae:	4413      	add	r3, r2
 80129b0:	440b      	add	r3, r1
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	f003 0301 	and.w	r3, r3, #1
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d003      	beq.n	80129c4 <MAP_moveNextBlock_Sura+0x100>
				){
				uc_dist_control = 0.01;
 80129bc:	4b4b      	ldr	r3, [pc, #300]	; (8012aec <MAP_moveNextBlock_Sura+0x228>)
 80129be:	2200      	movs	r2, #0
 80129c0:	701a      	strb	r2, [r3, #0]
 80129c2:	e002      	b.n	80129ca <MAP_moveNextBlock_Sura+0x106>
				}
			else{
				uc_dist_control = 0;
 80129c4:	4b49      	ldr	r3, [pc, #292]	; (8012aec <MAP_moveNextBlock_Sura+0x228>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 80129ca:	4b49      	ldr	r3, [pc, #292]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 80129cc:	781a      	ldrb	r2, [r3, #0]
 80129ce:	4b49      	ldr	r3, [pc, #292]	; (8012af4 <MAP_moveNextBlock_Sura+0x230>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d20e      	bcs.n	80129f4 <MAP_moveNextBlock_Sura+0x130>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 80129d6:	2000      	movs	r0, #0
 80129d8:	f7f0 fb0c 	bl	8002ff4 <PARAM_getSra>
 80129dc:	4603      	mov	r3, r0
 80129de:	4619      	mov	r1, r3
 80129e0:	2000      	movs	r0, #0
 80129e2:	f7fa f8a5 	bl	800cb30 <MOT_goSla>
				uc_SlaCnt++;
 80129e6:	4b42      	ldr	r3, [pc, #264]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	3301      	adds	r3, #1
 80129ec:	b2da      	uxtb	r2, r3
 80129ee:	4b40      	ldr	r3, [pc, #256]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 80129f0:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
			break;
 80129f2:	e1bf      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80129f4:	4b39      	ldr	r3, [pc, #228]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10e      	bne.n	8012a1a <MAP_moveNextBlock_Sura+0x156>
 80129fc:	4b38      	ldr	r3, [pc, #224]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	4618      	mov	r0, r3
 8012a02:	4b38      	ldr	r3, [pc, #224]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	4619      	mov	r1, r3
 8012a08:	4a37      	ldr	r2, [pc, #220]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012a0a:	0143      	lsls	r3, r0, #5
 8012a0c:	4413      	add	r3, r2
 8012a0e:	440b      	add	r3, r1
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f003 0308 	and.w	r3, r3, #8
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d138      	bne.n	8012a8c <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012a1a:	4b30      	ldr	r3, [pc, #192]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d10e      	bne.n	8012a40 <MAP_moveNextBlock_Sura+0x17c>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012a22:	4b2f      	ldr	r3, [pc, #188]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	4618      	mov	r0, r3
 8012a28:	4b2e      	ldr	r3, [pc, #184]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	4a2e      	ldr	r2, [pc, #184]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012a30:	0143      	lsls	r3, r0, #5
 8012a32:	4413      	add	r3, r2
 8012a34:	440b      	add	r3, r1
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	f003 0301 	and.w	r3, r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d125      	bne.n	8012a8c <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012a40:	4b26      	ldr	r3, [pc, #152]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012a44:	2b02      	cmp	r3, #2
 8012a46:	d10e      	bne.n	8012a66 <MAP_moveNextBlock_Sura+0x1a2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012a48:	4b25      	ldr	r3, [pc, #148]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	4b25      	ldr	r3, [pc, #148]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	4619      	mov	r1, r3
 8012a54:	4a24      	ldr	r2, [pc, #144]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012a56:	0143      	lsls	r3, r0, #5
 8012a58:	4413      	add	r3, r2
 8012a5a:	440b      	add	r3, r1
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	f003 0302 	and.w	r3, r3, #2
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d112      	bne.n	8012a8c <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012a66:	4b1d      	ldr	r3, [pc, #116]	; (8012adc <MAP_moveNextBlock_Sura+0x218>)
 8012a68:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012a6a:	2b03      	cmp	r3, #3
 8012a6c:	d123      	bne.n	8012ab6 <MAP_moveNextBlock_Sura+0x1f2>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012a6e:	4b1c      	ldr	r3, [pc, #112]	; (8012ae0 <MAP_moveNextBlock_Sura+0x21c>)
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	4618      	mov	r0, r3
 8012a74:	4b1b      	ldr	r3, [pc, #108]	; (8012ae4 <MAP_moveNextBlock_Sura+0x220>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4a1b      	ldr	r2, [pc, #108]	; (8012ae8 <MAP_moveNextBlock_Sura+0x224>)
 8012a7c:	0143      	lsls	r3, r0, #5
 8012a7e:	4413      	add	r3, r2
 8012a80:	440b      	add	r3, r1
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	f003 0304 	and.w	r3, r3, #4
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d014      	beq.n	8012ab6 <MAP_moveNextBlock_Sura+0x1f2>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012a8c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012af8 <MAP_moveNextBlock_Sura+0x234>
 8012a90:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012a94:	f7f9 fa58 	bl	800bf48 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 8012a98:	2000      	movs	r0, #0
 8012a9a:	f7f9 fbbd 	bl	800c218 <MOT_turn>
					uc_SlaCnt = 0;
 8012a9e:	4b14      	ldr	r3, [pc, #80]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8012aa4:	f7f9 ffee 	bl	800ca84 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012aa8:	4b0a      	ldr	r3, [pc, #40]	; (8012ad4 <MAP_moveNextBlock_Sura+0x210>)
 8012aaa:	4a14      	ldr	r2, [pc, #80]	; (8012afc <MAP_moveNextBlock_Sura+0x238>)
 8012aac:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	701a      	strb	r2, [r3, #0]
			break;
 8012ab4:	e15e      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	f7f0 fa9c 	bl	8002ff4 <PARAM_getSra>
 8012abc:	4603      	mov	r3, r0
 8012abe:	4619      	mov	r1, r3
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	f7fa f835 	bl	800cb30 <MOT_goSla>
					uc_SlaCnt++;
 8012ac6:	4b0a      	ldr	r3, [pc, #40]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	3301      	adds	r3, #1
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	4b08      	ldr	r3, [pc, #32]	; (8012af0 <MAP_moveNextBlock_Sura+0x22c>)
 8012ad0:	701a      	strb	r2, [r3, #0]
			break;
 8012ad2:	e14f      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
 8012ad4:	2000e74c 	.word	0x2000e74c
 8012ad8:	3e99999a 	.word	0x3e99999a
 8012adc:	2000e750 	.word	0x2000e750
 8012ae0:	2000e749 	.word	0x2000e749
 8012ae4:	2000e753 	.word	0x2000e753
 8012ae8:	20000854 	.word	0x20000854
 8012aec:	20001478 	.word	0x20001478
 8012af0:	200002d6 	.word	0x200002d6
 8012af4:	2000001b 	.word	0x2000001b
 8012af8:	00000000 	.word	0x00000000
 8012afc:	3e6b851f 	.word	0x3e6b851f

		// 左にスラロームする
		case WEST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012b00:	4ba3      	ldr	r3, [pc, #652]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10e      	bne.n	8012b26 <MAP_moveNextBlock_Sura+0x262>
 8012b08:	4ba2      	ldr	r3, [pc, #648]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	4ba2      	ldr	r3, [pc, #648]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	4619      	mov	r1, r3
 8012b14:	4aa1      	ldr	r2, [pc, #644]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012b16:	0143      	lsls	r3, r0, #5
 8012b18:	4413      	add	r3, r2
 8012b1a:	440b      	add	r3, r1
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	f003 0308 	and.w	r3, r3, #8
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d138      	bne.n	8012b98 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b26:	4b9a      	ldr	r3, [pc, #616]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d10e      	bne.n	8012b4c <MAP_moveNextBlock_Sura+0x288>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b2e:	4b99      	ldr	r3, [pc, #612]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	4618      	mov	r0, r3
 8012b34:	4b98      	ldr	r3, [pc, #608]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	4619      	mov	r1, r3
 8012b3a:	4a98      	ldr	r2, [pc, #608]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012b3c:	0143      	lsls	r3, r0, #5
 8012b3e:	4413      	add	r3, r2
 8012b40:	440b      	add	r3, r1
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d125      	bne.n	8012b98 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b4c:	4b90      	ldr	r3, [pc, #576]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d10e      	bne.n	8012b72 <MAP_moveNextBlock_Sura+0x2ae>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b54:	4b8f      	ldr	r3, [pc, #572]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	4b8f      	ldr	r3, [pc, #572]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	4a8e      	ldr	r2, [pc, #568]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012b62:	0143      	lsls	r3, r0, #5
 8012b64:	4413      	add	r3, r2
 8012b66:	440b      	add	r3, r1
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	f003 0302 	and.w	r3, r3, #2
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d112      	bne.n	8012b98 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012b72:	4b87      	ldr	r3, [pc, #540]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b76:	2b03      	cmp	r3, #3
 8012b78:	d112      	bne.n	8012ba0 <MAP_moveNextBlock_Sura+0x2dc>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012b7a:	4b86      	ldr	r3, [pc, #536]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	4b85      	ldr	r3, [pc, #532]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	4619      	mov	r1, r3
 8012b86:	4a85      	ldr	r2, [pc, #532]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012b88:	0143      	lsls	r3, r0, #5
 8012b8a:	4413      	add	r3, r2
 8012b8c:	440b      	add	r3, r1
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	f003 0304 	and.w	r3, r3, #4
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d003      	beq.n	8012ba0 <MAP_moveNextBlock_Sura+0x2dc>
				){
				uc_dist_control = 0.01;
 8012b98:	4b81      	ldr	r3, [pc, #516]	; (8012da0 <MAP_moveNextBlock_Sura+0x4dc>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	e002      	b.n	8012ba6 <MAP_moveNextBlock_Sura+0x2e2>
				}
			else{
				uc_dist_control = 0;
 8012ba0:	4b7f      	ldr	r3, [pc, #508]	; (8012da0 <MAP_moveNextBlock_Sura+0x4dc>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 8012ba6:	4b7f      	ldr	r3, [pc, #508]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012ba8:	781a      	ldrb	r2, [r3, #0]
 8012baa:	4b7f      	ldr	r3, [pc, #508]	; (8012da8 <MAP_moveNextBlock_Sura+0x4e4>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d20e      	bcs.n	8012bd0 <MAP_moveNextBlock_Sura+0x30c>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7f0 fa1e 	bl	8002ff4 <PARAM_getSra>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	4619      	mov	r1, r3
 8012bbc:	2001      	movs	r0, #1
 8012bbe:	f7f9 ffb7 	bl	800cb30 <MOT_goSla>
				uc_SlaCnt++;
 8012bc2:	4b78      	ldr	r3, [pc, #480]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	b2da      	uxtb	r2, r3
 8012bca:	4b76      	ldr	r3, [pc, #472]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012bcc:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8012bce:	e0d1      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012bd0:	4b6f      	ldr	r3, [pc, #444]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d10e      	bne.n	8012bf6 <MAP_moveNextBlock_Sura+0x332>
 8012bd8:	4b6e      	ldr	r3, [pc, #440]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	4b6e      	ldr	r3, [pc, #440]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	4619      	mov	r1, r3
 8012be4:	4a6d      	ldr	r2, [pc, #436]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012be6:	0143      	lsls	r3, r0, #5
 8012be8:	4413      	add	r3, r2
 8012bea:	440b      	add	r3, r1
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	f003 0302 	and.w	r3, r3, #2
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d138      	bne.n	8012c68 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012bf6:	4b66      	ldr	r3, [pc, #408]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012bf8:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d10e      	bne.n	8012c1c <MAP_moveNextBlock_Sura+0x358>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012bfe:	4b65      	ldr	r3, [pc, #404]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	4618      	mov	r0, r3
 8012c04:	4b64      	ldr	r3, [pc, #400]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4a64      	ldr	r2, [pc, #400]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012c0c:	0143      	lsls	r3, r0, #5
 8012c0e:	4413      	add	r3, r2
 8012c10:	440b      	add	r3, r1
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	f003 0304 	and.w	r3, r3, #4
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d125      	bne.n	8012c68 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012c1c:	4b5c      	ldr	r3, [pc, #368]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012c1e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d10e      	bne.n	8012c42 <MAP_moveNextBlock_Sura+0x37e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012c24:	4b5b      	ldr	r3, [pc, #364]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	4b5b      	ldr	r3, [pc, #364]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	4a5a      	ldr	r2, [pc, #360]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012c32:	0143      	lsls	r3, r0, #5
 8012c34:	4413      	add	r3, r2
 8012c36:	440b      	add	r3, r1
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	f003 0308 	and.w	r3, r3, #8
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d112      	bne.n	8012c68 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012c42:	4b53      	ldr	r3, [pc, #332]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012c46:	2b03      	cmp	r3, #3
 8012c48:	d123      	bne.n	8012c92 <MAP_moveNextBlock_Sura+0x3ce>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012c4a:	4b52      	ldr	r3, [pc, #328]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	4b51      	ldr	r3, [pc, #324]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	4619      	mov	r1, r3
 8012c56:	4a51      	ldr	r2, [pc, #324]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012c58:	0143      	lsls	r3, r0, #5
 8012c5a:	4413      	add	r3, r2
 8012c5c:	440b      	add	r3, r1
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	f003 0301 	and.w	r3, r3, #1
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d014      	beq.n	8012c92 <MAP_moveNextBlock_Sura+0x3ce>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8012c68:	eddf 0a50 	vldr	s1, [pc, #320]	; 8012dac <MAP_moveNextBlock_Sura+0x4e8>
 8012c6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012c70:	f7f9 f96a 	bl	800bf48 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 8012c74:	2001      	movs	r0, #1
 8012c76:	f7f9 facf 	bl	800c218 <MOT_turn>
					uc_SlaCnt = 0;
 8012c7a:	4b4a      	ldr	r3, [pc, #296]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8012c80:	f7f9 ff00 	bl	800ca84 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012c84:	4b4a      	ldr	r3, [pc, #296]	; (8012db0 <MAP_moveNextBlock_Sura+0x4ec>)
 8012c86:	4a4b      	ldr	r2, [pc, #300]	; (8012db4 <MAP_moveNextBlock_Sura+0x4f0>)
 8012c88:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	701a      	strb	r2, [r3, #0]
			break;
 8012c90:	e070      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8012c92:	2000      	movs	r0, #0
 8012c94:	f7f0 f9ae 	bl	8002ff4 <PARAM_getSra>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	f7f9 ff47 	bl	800cb30 <MOT_goSla>
					uc_SlaCnt++;
 8012ca2:	4b40      	ldr	r3, [pc, #256]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	b2da      	uxtb	r2, r3
 8012caa:	4b3e      	ldr	r3, [pc, #248]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012cac:	701a      	strb	r2, [r3, #0]
			break;
 8012cae:	e061      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>

		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012cb0:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8012dac <MAP_moveNextBlock_Sura+0x4e8>
 8012cb4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012cb8:	f7f9 f946 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);									// 右180度旋回
 8012cbc:	2002      	movs	r0, #2
 8012cbe:	f7f9 faab 	bl	800c218 <MOT_turn>
			uc_SlaCnt = 0;
 8012cc2:	4b38      	ldr	r3, [pc, #224]	; (8012da4 <MAP_moveNextBlock_Sura+0x4e0>)
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	701a      	strb	r2, [r3, #0]
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012cc8:	4b31      	ldr	r3, [pc, #196]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d10e      	bne.n	8012cee <MAP_moveNextBlock_Sura+0x42a>
 8012cd0:	4b30      	ldr	r3, [pc, #192]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	4b30      	ldr	r3, [pc, #192]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	4619      	mov	r1, r3
 8012cdc:	4a2f      	ldr	r2, [pc, #188]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012cde:	0143      	lsls	r3, r0, #5
 8012ce0:	4413      	add	r3, r2
 8012ce2:	440b      	add	r3, r1
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	f003 0301 	and.w	r3, r3, #1
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d138      	bne.n	8012d60 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012cee:	4b28      	ldr	r3, [pc, #160]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012cf0:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012cf2:	2b01      	cmp	r3, #1
 8012cf4:	d10e      	bne.n	8012d14 <MAP_moveNextBlock_Sura+0x450>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012cf6:	4b27      	ldr	r3, [pc, #156]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	4b26      	ldr	r3, [pc, #152]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	4619      	mov	r1, r3
 8012d02:	4a26      	ldr	r2, [pc, #152]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012d04:	0143      	lsls	r3, r0, #5
 8012d06:	4413      	add	r3, r2
 8012d08:	440b      	add	r3, r1
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	f003 0302 	and.w	r3, r3, #2
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d125      	bne.n	8012d60 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012d14:	4b1e      	ldr	r3, [pc, #120]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012d16:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	d10e      	bne.n	8012d3a <MAP_moveNextBlock_Sura+0x476>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012d1c:	4b1d      	ldr	r3, [pc, #116]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	4618      	mov	r0, r3
 8012d22:	4b1d      	ldr	r3, [pc, #116]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	4619      	mov	r1, r3
 8012d28:	4a1c      	ldr	r2, [pc, #112]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012d2a:	0143      	lsls	r3, r0, #5
 8012d2c:	4413      	add	r3, r2
 8012d2e:	440b      	add	r3, r1
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	f003 0304 	and.w	r3, r3, #4
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d112      	bne.n	8012d60 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012d3a:	4b15      	ldr	r3, [pc, #84]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012d3c:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012d3e:	2b03      	cmp	r3, #3
 8012d40:	d113      	bne.n	8012d6a <MAP_moveNextBlock_Sura+0x4a6>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012d42:	4b14      	ldr	r3, [pc, #80]	; (8012d94 <MAP_moveNextBlock_Sura+0x4d0>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	4618      	mov	r0, r3
 8012d48:	4b13      	ldr	r3, [pc, #76]	; (8012d98 <MAP_moveNextBlock_Sura+0x4d4>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	4a13      	ldr	r2, [pc, #76]	; (8012d9c <MAP_moveNextBlock_Sura+0x4d8>)
 8012d50:	0143      	lsls	r3, r0, #5
 8012d52:	4413      	add	r3, r2
 8012d54:	440b      	add	r3, r1
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	f003 0308 	and.w	r3, r3, #8
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d004      	beq.n	8012d6a <MAP_moveNextBlock_Sura+0x4a6>
			){
				MOT_goHitBackWall();					// バックする
 8012d60:	f7f9 fe90 	bl	800ca84 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012d64:	4b12      	ldr	r3, [pc, #72]	; (8012db0 <MAP_moveNextBlock_Sura+0x4ec>)
 8012d66:	4a13      	ldr	r2, [pc, #76]	; (8012db4 <MAP_moveNextBlock_Sura+0x4f0>)
 8012d68:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	701a      	strb	r2, [r3, #0]
			break;
 8012d70:	e000      	b.n	8012d74 <MAP_moveNextBlock_Sura+0x4b0>
			
		default:
			break;
 8012d72:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock_Sura(en_head, p_type, TRUE );		// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8012d74:	4b06      	ldr	r3, [pc, #24]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012d76:	781a      	ldrb	r2, [r3, #0]
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	f003 0303 	and.w	r3, r3, #3
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	4b02      	ldr	r3, [pc, #8]	; (8012d90 <MAP_moveNextBlock_Sura+0x4cc>)
 8012d86:	701a      	strb	r2, [r3, #0]
//	}
}
 8012d88:	bf00      	nop
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	2000e750 	.word	0x2000e750
 8012d94:	2000e749 	.word	0x2000e749
 8012d98:	2000e753 	.word	0x2000e753
 8012d9c:	20000854 	.word	0x20000854
 8012da0:	20001478 	.word	0x20001478
 8012da4:	200002d6 	.word	0x200002d6
 8012da8:	2000001b 	.word	0x2000001b
 8012dac:	00000000 	.word	0x00000000
 8012db0:	2000e74c 	.word	0x2000e74c
 8012db4:	3e6b851f 	.word	0x3e6b851f

08012db8 <MAP_actGoal>:

void MAP_actGoal( void )
{	
 8012db8:	b580      	push	{r7, lr}
 8012dba:	af00      	add	r7, sp, #0
	MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012dbc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8012dfc <MAP_actGoal+0x44>
 8012dc0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012dc4:	f7f9 f8c0 	bl	800bf48 <MOT_goBlock_FinSpeed>
	LL_mDelay(500);
 8012dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012dcc:	f003 fae4 	bl	8016398 <LL_mDelay>
	MOT_turn(MOT_R180);										// 右180度旋回
 8012dd0:	2002      	movs	r0, #2
 8012dd2:	f7f9 fa21 	bl	800c218 <MOT_turn>
	LL_mDelay(500);
 8012dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012dda:	f003 fadd 	bl	8016398 <LL_mDelay>
	
//	MAP_SaveMapData();						// 迷路情報のバックアップ
	log_flag_off();
 8012dde:	f7f5 ff89 	bl	8008cf4 <log_flag_off>
	MAP_actGoalLED();
 8012de2:	f000 f80f 	bl	8012e04 <MAP_actGoalLED>
	
	en_Head = (enMAP_HEAD_DIR)( (en_Head + 2) & (MAP_HEAD_DIR_MAX-1) );			//	進行方向更新
 8012de6:	4b06      	ldr	r3, [pc, #24]	; (8012e00 <MAP_actGoal+0x48>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	3302      	adds	r3, #2
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	f003 0303 	and.w	r3, r3, #3
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	4b02      	ldr	r3, [pc, #8]	; (8012e00 <MAP_actGoal+0x48>)
 8012df6:	701a      	strb	r2, [r3, #0]

}
 8012df8:	bf00      	nop
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	00000000 	.word	0x00000000
 8012e00:	2000e750 	.word	0x2000e750

08012e04 <MAP_actGoalLED>:

void MAP_actGoalLED( void )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
	int i;
	for(i = 0;i<2;i++)
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	607b      	str	r3, [r7, #4]
 8012e0e:	e020      	b.n	8012e52 <MAP_actGoalLED+0x4e>
	{
		SetLED(0x02);
 8012e10:	2002      	movs	r0, #2
 8012e12:	f7ef f8d9 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 8012e16:	2064      	movs	r0, #100	; 0x64
 8012e18:	f003 fabe 	bl	8016398 <LL_mDelay>
		SetLED(0x04);
 8012e1c:	2004      	movs	r0, #4
 8012e1e:	f7ef f8d3 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 8012e22:	2064      	movs	r0, #100	; 0x64
 8012e24:	f003 fab8 	bl	8016398 <LL_mDelay>
		SetLED(0x08);
 8012e28:	2008      	movs	r0, #8
 8012e2a:	f7ef f8cd 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 8012e2e:	2064      	movs	r0, #100	; 0x64
 8012e30:	f003 fab2 	bl	8016398 <LL_mDelay>
		SetLED(0x04);
 8012e34:	2004      	movs	r0, #4
 8012e36:	f7ef f8c7 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 8012e3a:	2064      	movs	r0, #100	; 0x64
 8012e3c:	f003 faac 	bl	8016398 <LL_mDelay>
		SetLED(0x02);
 8012e40:	2002      	movs	r0, #2
 8012e42:	f7ef f8c1 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 8012e46:	2064      	movs	r0, #100	; 0x64
 8012e48:	f003 faa6 	bl	8016398 <LL_mDelay>
	for(i = 0;i<2;i++)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	607b      	str	r3, [r7, #4]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	dddb      	ble.n	8012e10 <MAP_actGoalLED+0xc>
	}
	LL_mDelay(100);
 8012e58:	2064      	movs	r0, #100	; 0x64
 8012e5a:	f003 fa9d 	bl	8016398 <LL_mDelay>
	map_write();
 8012e5e:	f7fe fc39 	bl	80116d4 <map_write>
	SetLED(0x00);
 8012e62:	2000      	movs	r0, #0
 8012e64:	f7ef f8b0 	bl	8001fc8 <SetLED>
}
 8012e68:	bf00      	nop
 8012e6a:	3708      	adds	r7, #8
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <MAP_Goalsize>:

void MAP_Goalsize(int size)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
	GOAL_SIZE= size;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	4b13      	ldr	r3, [pc, #76]	; (8012ecc <MAP_Goalsize+0x5c>)
 8012e7e:	701a      	strb	r2, [r3, #0]
	if (size == 4) {
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2b04      	cmp	r3, #4
 8012e84:	d10c      	bne.n	8012ea0 <MAP_Goalsize+0x30>
		uc_max_x = uc_max_x + 1;
 8012e86:	4b12      	ldr	r3, [pc, #72]	; (8012ed0 <MAP_Goalsize+0x60>)
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	b2da      	uxtb	r2, r3
 8012e8e:	4b10      	ldr	r3, [pc, #64]	; (8012ed0 <MAP_Goalsize+0x60>)
 8012e90:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 1;
 8012e92:	4b10      	ldr	r3, [pc, #64]	; (8012ed4 <MAP_Goalsize+0x64>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	3301      	adds	r3, #1
 8012e98:	b2da      	uxtb	r2, r3
 8012e9a:	4b0e      	ldr	r3, [pc, #56]	; (8012ed4 <MAP_Goalsize+0x64>)
 8012e9c:	701a      	strb	r2, [r3, #0]
	}
	else if (size == 9) {
		uc_max_x = uc_max_x + 2;
		uc_max_y = uc_max_y + 2;
	}
}
 8012e9e:	e00e      	b.n	8012ebe <MAP_Goalsize+0x4e>
	else if (size == 9) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2b09      	cmp	r3, #9
 8012ea4:	d10b      	bne.n	8012ebe <MAP_Goalsize+0x4e>
		uc_max_x = uc_max_x + 2;
 8012ea6:	4b0a      	ldr	r3, [pc, #40]	; (8012ed0 <MAP_Goalsize+0x60>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	3302      	adds	r3, #2
 8012eac:	b2da      	uxtb	r2, r3
 8012eae:	4b08      	ldr	r3, [pc, #32]	; (8012ed0 <MAP_Goalsize+0x60>)
 8012eb0:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 2;
 8012eb2:	4b08      	ldr	r3, [pc, #32]	; (8012ed4 <MAP_Goalsize+0x64>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	3302      	adds	r3, #2
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	4b06      	ldr	r3, [pc, #24]	; (8012ed4 <MAP_Goalsize+0x64>)
 8012ebc:	701a      	strb	r2, [r3, #0]
}
 8012ebe:	bf00      	nop
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop
 8012ecc:	2000e752 	.word	0x2000e752
 8012ed0:	2000001a 	.word	0x2000001a
 8012ed4:	200002d7 	.word	0x200002d7

08012ed8 <MAP_makeReturnContourMap>:

void  MAP_makeReturnContourMap(uint8_t uc_staX,uint8_t uc_staY) 
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b0cc      	sub	sp, #304	; 0x130
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	4602      	mov	r2, r0
 8012ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ee4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012ee8:	701a      	strb	r2, [r3, #0]
 8012eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012eee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8012ef2:	460a      	mov	r2, r1
 8012ef4:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;
	queue_t queue;
	queue_t* pQueue = &queue;
 8012ef6:	f107 0310 	add.w	r3, r7, #16
 8012efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 8012efe:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012f02:	f7f0 f88b 	bl	800301c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8012f06:	2300      	movs	r3, #0
 8012f08:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8012f0c:	e014      	b.n	8012f38 <MAP_makeReturnContourMap+0x60>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 8012f0e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8012f12:	095b      	lsrs	r3, r3, #5
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	461a      	mov	r2, r3
 8012f18:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8012f1c:	f003 031f 	and.w	r3, r3, #31
 8012f20:	49cd      	ldr	r1, [pc, #820]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 8012f22:	0152      	lsls	r2, r2, #5
 8012f24:	4413      	add	r3, r2
 8012f26:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012f2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8012f2e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8012f32:	3301      	adds	r3, #1
 8012f34:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8012f38:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8012f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f40:	d3e5      	bcc.n	8012f0e <MAP_makeReturnContourMap+0x36>
	}
	/* 目標地点の等高線を0に設定 */
//	us_cmap[0][0] = 0;
	setStep(0, 0, 0);
 8012f42:	2200      	movs	r2, #0
 8012f44:	2100      	movs	r1, #0
 8012f46:	2000      	movs	r0, #0
 8012f48:	f7fe fec4 	bl	8011cd4 <setStep>
	st_pos.x = 0;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = 0;
 8012f52:	2300      	movs	r3, #0
 8012f54:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 8012f5e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8012f62:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012f66:	f7f0 f889 	bl	800307c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 8012f6a:	e167      	b.n	801323c <MAP_makeReturnContourMap+0x364>
		const stPOSITION focus = dequeue(pQueue);
 8012f6c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012f70:	f7f0 f8c0 	bl	80030f4 <dequeue>
 8012f74:	4602      	mov	r2, r0
 8012f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012f7e:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8012f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012f88:	885b      	ldrh	r3, [r3, #2]
 8012f8a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 8012f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 8012f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012fa4:	785b      	ldrb	r3, [r3, #1]
 8012fa6:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 8012faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012fb6:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8012fba:	6812      	ldr	r2, [r2, #0]
 8012fbc:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 8012fbe:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012fc2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012fc6:	49a5      	ldr	r1, [pc, #660]	; (801325c <MAP_makeReturnContourMap+0x384>)
 8012fc8:	0152      	lsls	r2, r2, #5
 8012fca:	440a      	add	r2, r1
 8012fcc:	4413      	add	r3, r2
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8012fd4:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8012fd8:	f003 0301 	and.w	r3, r3, #1
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d146      	bne.n	801306e <MAP_makeReturnContourMap+0x196>
 8012fe0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012fe4:	2b1f      	cmp	r3, #31
 8012fe6:	d042      	beq.n	801306e <MAP_makeReturnContourMap+0x196>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 8012fe8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012ff2:	4999      	ldr	r1, [pc, #612]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 8012ff4:	0152      	lsls	r2, r2, #5
 8012ff6:	4413      	add	r3, r2
 8012ff8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8013002:	3301      	adds	r3, #1
 8013004:	429a      	cmp	r2, r3
 8013006:	dd32      	ble.n	801306e <MAP_makeReturnContourMap+0x196>
				next.step = focus_step + 1;
 8013008:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801300c:	3301      	adds	r3, #1
 801300e:	b29a      	uxth	r2, r3
 8013010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013014:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013018:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 801301a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801301e:	1c5a      	adds	r2, r3, #1
 8013020:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8013024:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8013028:	3101      	adds	r1, #1
 801302a:	b288      	uxth	r0, r1
 801302c:	498a      	ldr	r1, [pc, #552]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 801302e:	0152      	lsls	r2, r2, #5
 8013030:	4413      	add	r3, r2
 8013032:	4602      	mov	r2, r0
 8013034:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8013038:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801303c:	b2da      	uxtb	r2, r3
 801303e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013042:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013046:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8013048:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801304c:	b2db      	uxtb	r3, r3
 801304e:	3301      	adds	r3, #1
 8013050:	b2da      	uxtb	r2, r3
 8013052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013056:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801305a:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 801305c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013060:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013064:	6819      	ldr	r1, [r3, #0]
 8013066:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801306a:	f7f0 f807 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 801306e:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8013072:	f003 0302 	and.w	r3, r3, #2
 8013076:	2b00      	cmp	r3, #0
 8013078:	d146      	bne.n	8013108 <MAP_makeReturnContourMap+0x230>
 801307a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801307e:	2b1f      	cmp	r3, #31
 8013080:	d042      	beq.n	8013108 <MAP_makeReturnContourMap+0x230>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 8013082:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8013086:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801308a:	3301      	adds	r3, #1
 801308c:	4972      	ldr	r1, [pc, #456]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 801308e:	0152      	lsls	r2, r2, #5
 8013090:	4413      	add	r3, r2
 8013092:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013096:	461a      	mov	r2, r3
 8013098:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801309c:	3301      	adds	r3, #1
 801309e:	429a      	cmp	r2, r3
 80130a0:	dd32      	ble.n	8013108 <MAP_makeReturnContourMap+0x230>
				next.step = focus_step + 1;
 80130a2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80130a6:	3301      	adds	r3, #1
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80130b2:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 80130b4:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80130b8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80130bc:	3301      	adds	r3, #1
 80130be:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 80130c2:	3101      	adds	r1, #1
 80130c4:	b288      	uxth	r0, r1
 80130c6:	4964      	ldr	r1, [pc, #400]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 80130c8:	0152      	lsls	r2, r2, #5
 80130ca:	4413      	add	r3, r2
 80130cc:	4602      	mov	r2, r0
 80130ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 80130d2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	3301      	adds	r3, #1
 80130da:	b2da      	uxtb	r2, r3
 80130dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80130e4:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80130e6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80130ea:	b2da      	uxtb	r2, r3
 80130ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80130f4:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 80130f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80130fe:	6819      	ldr	r1, [r3, #0]
 8013100:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013104:	f7ef ffba 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8013108:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 801310c:	f003 0304 	and.w	r3, r3, #4
 8013110:	2b00      	cmp	r3, #0
 8013112:	d146      	bne.n	80131a2 <MAP_makeReturnContourMap+0x2ca>
 8013114:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8013118:	2b00      	cmp	r3, #0
 801311a:	d042      	beq.n	80131a2 <MAP_makeReturnContourMap+0x2ca>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 801311c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8013120:	1e5a      	subs	r2, r3, #1
 8013122:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8013126:	494c      	ldr	r1, [pc, #304]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 8013128:	0152      	lsls	r2, r2, #5
 801312a:	4413      	add	r3, r2
 801312c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013130:	461a      	mov	r2, r3
 8013132:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8013136:	3301      	adds	r3, #1
 8013138:	429a      	cmp	r2, r3
 801313a:	dd32      	ble.n	80131a2 <MAP_makeReturnContourMap+0x2ca>
				next.step = focus_step + 1;
 801313c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8013140:	3301      	adds	r3, #1
 8013142:	b29a      	uxth	r2, r3
 8013144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013148:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801314c:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 801314e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8013152:	1e5a      	subs	r2, r3, #1
 8013154:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8013158:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 801315c:	3101      	adds	r1, #1
 801315e:	b288      	uxth	r0, r1
 8013160:	493d      	ldr	r1, [pc, #244]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 8013162:	0152      	lsls	r2, r2, #5
 8013164:	4413      	add	r3, r2
 8013166:	4602      	mov	r2, r0
 8013168:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 801316c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8013170:	b2da      	uxtb	r2, r3
 8013172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013176:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801317a:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 801317c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8013180:	b2db      	uxtb	r3, r3
 8013182:	3b01      	subs	r3, #1
 8013184:	b2da      	uxtb	r2, r3
 8013186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801318a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801318e:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8013190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013194:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013198:	6819      	ldr	r1, [r3, #0]
 801319a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801319e:	f7ef ff6d 	bl	800307c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 80131a2:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80131a6:	f003 0308 	and.w	r3, r3, #8
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d146      	bne.n	801323c <MAP_makeReturnContourMap+0x364>
 80131ae:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d042      	beq.n	801323c <MAP_makeReturnContourMap+0x364>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 80131b6:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80131ba:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80131be:	3b01      	subs	r3, #1
 80131c0:	4925      	ldr	r1, [pc, #148]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 80131c2:	0152      	lsls	r2, r2, #5
 80131c4:	4413      	add	r3, r2
 80131c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80131ca:	461a      	mov	r2, r3
 80131cc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80131d0:	3301      	adds	r3, #1
 80131d2:	429a      	cmp	r2, r3
 80131d4:	dd32      	ble.n	801323c <MAP_makeReturnContourMap+0x364>
				next.step = focus_step + 1;
 80131d6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80131da:	3301      	adds	r3, #1
 80131dc:	b29a      	uxth	r2, r3
 80131de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80131e6:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 80131e8:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80131ec:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80131f0:	3b01      	subs	r3, #1
 80131f2:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 80131f6:	3101      	adds	r1, #1
 80131f8:	b288      	uxth	r0, r1
 80131fa:	4917      	ldr	r1, [pc, #92]	; (8013258 <MAP_makeReturnContourMap+0x380>)
 80131fc:	0152      	lsls	r2, r2, #5
 80131fe:	4413      	add	r3, r2
 8013200:	4602      	mov	r2, r0
 8013202:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 8013206:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801320a:	b2db      	uxtb	r3, r3
 801320c:	3b01      	subs	r3, #1
 801320e:	b2da      	uxtb	r2, r3
 8013210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013214:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013218:	701a      	strb	r2, [r3, #0]
				next.y = y;
 801321a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801321e:	b2da      	uxtb	r2, r3
 8013220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013224:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013228:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 801322a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801322e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013232:	6819      	ldr	r1, [r3, #0]
 8013234:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013238:	f7ef ff20 	bl	800307c <enqueue>
	while (pQueue->flag != EMPTY) {
 801323c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013240:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013244:	2b00      	cmp	r3, #0
 8013246:	f47f ae91 	bne.w	8012f6c <MAP_makeReturnContourMap+0x94>
			}
		}

	}

}
 801324a:	bf00      	nop
 801324c:	bf00      	nop
 801324e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	20000c78 	.word	0x20000c78
 801325c:	20000854 	.word	0x20000854

08013260 <MAP_KnownAcc>:

bool MAP_KnownAcc(void) {
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0

	bool	bl_acc = FALSE;
 8013266:	2300      	movs	r3, #0
 8013268:	71fb      	strb	r3, [r7, #7]
	switch (en_Head) {
 801326a:	4b33      	ldr	r3, [pc, #204]	; (8013338 <MAP_KnownAcc+0xd8>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2b03      	cmp	r3, #3
 8013270:	d852      	bhi.n	8013318 <MAP_KnownAcc+0xb8>
 8013272:	a201      	add	r2, pc, #4	; (adr r2, 8013278 <MAP_KnownAcc+0x18>)
 8013274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013278:	08013289 	.word	0x08013289
 801327c:	080132ad 	.word	0x080132ad
 8013280:	080132d1 	.word	0x080132d1
 8013284:	080132f5 	.word	0x080132f5
	case NORTH:
		if ((g_sysMap[my + 1][mx] & 0xf1) == 0xf0) {
 8013288:	4b2c      	ldr	r3, [pc, #176]	; (801333c <MAP_KnownAcc+0xdc>)
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	3301      	adds	r3, #1
 801328e:	4a2c      	ldr	r2, [pc, #176]	; (8013340 <MAP_KnownAcc+0xe0>)
 8013290:	7812      	ldrb	r2, [r2, #0]
 8013292:	4611      	mov	r1, r2
 8013294:	4a2b      	ldr	r2, [pc, #172]	; (8013344 <MAP_KnownAcc+0xe4>)
 8013296:	015b      	lsls	r3, r3, #5
 8013298:	4413      	add	r3, r2
 801329a:	440b      	add	r3, r1
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 80132a2:	2bf0      	cmp	r3, #240	; 0xf0
 80132a4:	d13a      	bne.n	801331c <MAP_KnownAcc+0xbc>
			bl_acc = TRUE;
 80132a6:	2301      	movs	r3, #1
 80132a8:	71fb      	strb	r3, [r7, #7]
		}

		break;
 80132aa:	e037      	b.n	801331c <MAP_KnownAcc+0xbc>

	case EAST:
		if ((g_sysMap[my][mx + 1] & 0xf2) == 0xf0) {
 80132ac:	4b23      	ldr	r3, [pc, #140]	; (801333c <MAP_KnownAcc+0xdc>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	461a      	mov	r2, r3
 80132b2:	4b23      	ldr	r3, [pc, #140]	; (8013340 <MAP_KnownAcc+0xe0>)
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	3301      	adds	r3, #1
 80132b8:	4922      	ldr	r1, [pc, #136]	; (8013344 <MAP_KnownAcc+0xe4>)
 80132ba:	0152      	lsls	r2, r2, #5
 80132bc:	440a      	add	r2, r1
 80132be:	4413      	add	r3, r2
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80132c6:	2bf0      	cmp	r3, #240	; 0xf0
 80132c8:	d12a      	bne.n	8013320 <MAP_KnownAcc+0xc0>
			bl_acc = TRUE;
 80132ca:	2301      	movs	r3, #1
 80132cc:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80132ce:	e027      	b.n	8013320 <MAP_KnownAcc+0xc0>

	case SOUTH:
		if ((g_sysMap[my - 1][mx] & 0xf4) == 0xf0) {
 80132d0:	4b1a      	ldr	r3, [pc, #104]	; (801333c <MAP_KnownAcc+0xdc>)
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	3b01      	subs	r3, #1
 80132d6:	4a1a      	ldr	r2, [pc, #104]	; (8013340 <MAP_KnownAcc+0xe0>)
 80132d8:	7812      	ldrb	r2, [r2, #0]
 80132da:	4611      	mov	r1, r2
 80132dc:	4a19      	ldr	r2, [pc, #100]	; (8013344 <MAP_KnownAcc+0xe4>)
 80132de:	015b      	lsls	r3, r3, #5
 80132e0:	4413      	add	r3, r2
 80132e2:	440b      	add	r3, r1
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80132ea:	2bf0      	cmp	r3, #240	; 0xf0
 80132ec:	d11a      	bne.n	8013324 <MAP_KnownAcc+0xc4>
			bl_acc = TRUE;
 80132ee:	2301      	movs	r3, #1
 80132f0:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80132f2:	e017      	b.n	8013324 <MAP_KnownAcc+0xc4>

	case WEST:
		if ((g_sysMap[my][mx - 1] & 0xf8) == 0xf0) {
 80132f4:	4b11      	ldr	r3, [pc, #68]	; (801333c <MAP_KnownAcc+0xdc>)
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	461a      	mov	r2, r3
 80132fa:	4b11      	ldr	r3, [pc, #68]	; (8013340 <MAP_KnownAcc+0xe0>)
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	3b01      	subs	r3, #1
 8013300:	4910      	ldr	r1, [pc, #64]	; (8013344 <MAP_KnownAcc+0xe4>)
 8013302:	0152      	lsls	r2, r2, #5
 8013304:	440a      	add	r2, r1
 8013306:	4413      	add	r3, r2
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801330e:	2bf0      	cmp	r3, #240	; 0xf0
 8013310:	d10a      	bne.n	8013328 <MAP_KnownAcc+0xc8>
			bl_acc = TRUE;
 8013312:	2301      	movs	r3, #1
 8013314:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8013316:	e007      	b.n	8013328 <MAP_KnownAcc+0xc8>

	default:
		break;
 8013318:	bf00      	nop
 801331a:	e006      	b.n	801332a <MAP_KnownAcc+0xca>
		break;
 801331c:	bf00      	nop
 801331e:	e004      	b.n	801332a <MAP_KnownAcc+0xca>
		break;
 8013320:	bf00      	nop
 8013322:	e002      	b.n	801332a <MAP_KnownAcc+0xca>
		break;
 8013324:	bf00      	nop
 8013326:	e000      	b.n	801332a <MAP_KnownAcc+0xca>
		break;
 8013328:	bf00      	nop
	}
	return	bl_acc;
 801332a:	79fb      	ldrb	r3, [r7, #7]
}
 801332c:	4618      	mov	r0, r3
 801332e:	370c      	adds	r7, #12
 8013330:	46bd      	mov	sp, r7
 8013332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013336:	4770      	bx	lr
 8013338:	2000e750 	.word	0x2000e750
 801333c:	2000e749 	.word	0x2000e749
 8013340:	2000e753 	.word	0x2000e753
 8013344:	20000854 	.word	0x20000854

08013348 <MAP_moveNextBlock_acc>:

void MAP_moveNextBlock_acc(enMAP_HEAD_DIR en_head, bool* p_type)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	4603      	mov	r3, r0
 8013350:	6039      	str	r1, [r7, #0]
 8013352:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2200      	movs	r2, #0
 8013358:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;
 801335a:	4ba6      	ldr	r3, [pc, #664]	; (80135f4 <MAP_moveNextBlock_acc+0x2ac>)
 801335c:	f04f 0200 	mov.w	r2, #0
 8013360:	601a      	str	r2, [r3, #0]

	/* 動作 */
	switch (en_head) {
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	2b03      	cmp	r3, #3
 8013366:	f200 85b9 	bhi.w	8013edc <MAP_moveNextBlock_acc+0xb94>
 801336a:	a201      	add	r2, pc, #4	; (adr r2, 8013370 <MAP_moveNextBlock_acc+0x28>)
 801336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013370:	08013381 	.word	0x08013381
 8013374:	08013401 	.word	0x08013401
 8013378:	08013a69 	.word	0x08013a69
 801337c:	0801372b 	.word	0x0801372b

		/* そのまま前進 */
	case NORTH:
//		*p_type = FALSE;
//		LED = LED6;
		if (MAP_KnownAcc() == FALSE) {					// 次に進む区画が未探索のとき
 8013380:	f7ff ff6e 	bl	8013260 <MAP_KnownAcc>
 8013384:	4603      	mov	r3, r0
 8013386:	f083 0301 	eor.w	r3, r3, #1
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d02c      	beq.n	80133ea <MAP_moveNextBlock_acc+0xa2>
			if (st_known.bl_Known == TRUE){
 8013390:	4b99      	ldr	r3, [pc, #612]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 8013392:	785b      	ldrb	r3, [r3, #1]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d01c      	beq.n	80133d2 <MAP_moveNextBlock_acc+0x8a>
				if (st_known.uc_StrCnt < 2) {
 8013398:	4b97      	ldr	r3, [pc, #604]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	2b01      	cmp	r3, #1
 801339e:	d804      	bhi.n	80133aa <MAP_moveNextBlock_acc+0x62>
					MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 80133a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80133a4:	f7f8 fdf4 	bl	800bf90 <MOT_goBlock_Const>
 80133a8:	e013      	b.n	80133d2 <MAP_moveNextBlock_acc+0x8a>
				}
				else {
					MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 80133aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80133ae:	f7f9 fb43 	bl	800ca38 <MOT_setTrgtSpeed>
					MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 80133b2:	4b91      	ldr	r3, [pc, #580]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	ee07 3a90 	vmov	s15, r3
 80133ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133be:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80135fc <MAP_moveNextBlock_acc+0x2b4>
 80133c2:	eeb0 0a67 	vmov.f32	s0, s15
 80133c6:	f7f8 fdbf 	bl	800bf48 <MOT_goBlock_FinSpeed>
					MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 80133ca:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80135fc <MAP_moveNextBlock_acc+0x2b4>
 80133ce:	f7f9 fb33 	bl	800ca38 <MOT_setTrgtSpeed>
				}
			}
			MOT_goBlock_Const(1);	////////////////////
 80133d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80133d6:	f7f8 fddb 	bl	800bf90 <MOT_goBlock_Const>
			st_known.uc_StrCnt = 0;
 80133da:	4b87      	ldr	r3, [pc, #540]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133dc:	2200      	movs	r2, #0
 80133de:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 80133e0:	4b85      	ldr	r3, [pc, #532]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	705a      	strb	r2, [r3, #1]

			st_known.uc_StrCnt++;			// 移動区画の加算
			st_known.bl_Known = TRUE;
		}

		break;
 80133e6:	f000 bd7a 	b.w	8013ede <MAP_moveNextBlock_acc+0xb96>
			st_known.uc_StrCnt++;			// 移動区画の加算
 80133ea:	4b83      	ldr	r3, [pc, #524]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	3301      	adds	r3, #1
 80133f0:	b2da      	uxtb	r2, r3
 80133f2:	4b81      	ldr	r3, [pc, #516]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133f4:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = TRUE;
 80133f6:	4b80      	ldr	r3, [pc, #512]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 80133f8:	2201      	movs	r2, #1
 80133fa:	705a      	strb	r2, [r3, #1]
		break;
 80133fc:	f000 bd6f 	b.w	8013ede <MAP_moveNextBlock_acc+0xb96>

		/* 右に旋回する */
	case EAST:
//		LED = LED8;
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 8013400:	4b7d      	ldr	r3, [pc, #500]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 8013402:	785b      	ldrb	r3, [r3, #1]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d022      	beq.n	801344e <MAP_moveNextBlock_acc+0x106>
			if (st_known.uc_StrCnt < 2) {
 8013408:	4b7b      	ldr	r3, [pc, #492]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d804      	bhi.n	801341a <MAP_moveNextBlock_acc+0xd2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8013410:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013414:	f7f8 fdbc 	bl	800bf90 <MOT_goBlock_Const>
 8013418:	e013      	b.n	8013442 <MAP_moveNextBlock_acc+0xfa>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 801341a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801341e:	f7f9 fb0b 	bl	800ca38 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 8013422:	4b75      	ldr	r3, [pc, #468]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	ee07 3a90 	vmov	s15, r3
 801342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801342e:	eddf 0a73 	vldr	s1, [pc, #460]	; 80135fc <MAP_moveNextBlock_acc+0x2b4>
 8013432:	eeb0 0a67 	vmov.f32	s0, s15
 8013436:	f7f8 fd87 	bl	800bf48 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 801343a:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80135fc <MAP_moveNextBlock_acc+0x2b4>
 801343e:	f7f9 fafb 	bl	800ca38 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;		/////////////////////////////////////////
 8013442:	4b6d      	ldr	r3, [pc, #436]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 8013444:	2200      	movs	r2, #0
 8013446:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 8013448:	4b6b      	ldr	r3, [pc, #428]	; (80135f8 <MAP_moveNextBlock_acc+0x2b0>)
 801344a:	2200      	movs	r2, #0
 801344c:	705a      	strb	r2, [r3, #1]
		}
		if(wall_hit_flag == 0){}
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801344e:	4b6c      	ldr	r3, [pc, #432]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10e      	bne.n	8013474 <MAP_moveNextBlock_acc+0x12c>
 8013456:	4b6b      	ldr	r3, [pc, #428]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	4618      	mov	r0, r3
 801345c:	4b6a      	ldr	r3, [pc, #424]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	4619      	mov	r1, r3
 8013462:	4a6a      	ldr	r2, [pc, #424]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 8013464:	0143      	lsls	r3, r0, #5
 8013466:	4413      	add	r3, r2
 8013468:	440b      	add	r3, r1
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	f003 0302 	and.w	r3, r3, #2
 8013470:	2b00      	cmp	r3, #0
 8013472:	d138      	bne.n	80134e6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8013474:	4b62      	ldr	r3, [pc, #392]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 8013476:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8013478:	2b01      	cmp	r3, #1
 801347a:	d10e      	bne.n	801349a <MAP_moveNextBlock_acc+0x152>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801347c:	4b61      	ldr	r3, [pc, #388]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	4618      	mov	r0, r3
 8013482:	4b61      	ldr	r3, [pc, #388]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	4619      	mov	r1, r3
 8013488:	4a60      	ldr	r2, [pc, #384]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 801348a:	0143      	lsls	r3, r0, #5
 801348c:	4413      	add	r3, r2
 801348e:	440b      	add	r3, r1
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	f003 0304 	and.w	r3, r3, #4
 8013496:	2b00      	cmp	r3, #0
 8013498:	d125      	bne.n	80134e6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 801349a:	4b59      	ldr	r3, [pc, #356]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 801349c:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801349e:	2b02      	cmp	r3, #2
 80134a0:	d10e      	bne.n	80134c0 <MAP_moveNextBlock_acc+0x178>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80134a2:	4b58      	ldr	r3, [pc, #352]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	4618      	mov	r0, r3
 80134a8:	4b57      	ldr	r3, [pc, #348]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	4619      	mov	r1, r3
 80134ae:	4a57      	ldr	r2, [pc, #348]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 80134b0:	0143      	lsls	r3, r0, #5
 80134b2:	4413      	add	r3, r2
 80134b4:	440b      	add	r3, r1
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	f003 0308 	and.w	r3, r3, #8
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d112      	bne.n	80134e6 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80134c0:	4b4f      	ldr	r3, [pc, #316]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80134c4:	2b03      	cmp	r3, #3
 80134c6:	d112      	bne.n	80134ee <MAP_moveNextBlock_acc+0x1a6>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80134c8:	4b4e      	ldr	r3, [pc, #312]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	4618      	mov	r0, r3
 80134ce:	4b4e      	ldr	r3, [pc, #312]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	4619      	mov	r1, r3
 80134d4:	4a4d      	ldr	r2, [pc, #308]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 80134d6:	0143      	lsls	r3, r0, #5
 80134d8:	4413      	add	r3, r2
 80134da:	440b      	add	r3, r1
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	f003 0301 	and.w	r3, r3, #1
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d003      	beq.n	80134ee <MAP_moveNextBlock_acc+0x1a6>
			){
			uc_dist_control = 0.02;
 80134e6:	4b4a      	ldr	r3, [pc, #296]	; (8013610 <MAP_moveNextBlock_acc+0x2c8>)
 80134e8:	2200      	movs	r2, #0
 80134ea:	701a      	strb	r2, [r3, #0]
 80134ec:	e002      	b.n	80134f4 <MAP_moveNextBlock_acc+0x1ac>
			}
		else{
			uc_dist_control = 0;
 80134ee:	4b48      	ldr	r3, [pc, #288]	; (8013610 <MAP_moveNextBlock_acc+0x2c8>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	701a      	strb	r2, [r3, #0]
		}
		if( uc_SlaCnt < SLA_count ){
 80134f4:	4b47      	ldr	r3, [pc, #284]	; (8013614 <MAP_moveNextBlock_acc+0x2cc>)
 80134f6:	781a      	ldrb	r2, [r3, #0]
 80134f8:	4b47      	ldr	r3, [pc, #284]	; (8013618 <MAP_moveNextBlock_acc+0x2d0>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d20f      	bcs.n	8013520 <MAP_moveNextBlock_acc+0x1d8>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8013500:	2000      	movs	r0, #0
 8013502:	f7ef fd77 	bl	8002ff4 <PARAM_getSra>
 8013506:	4603      	mov	r3, r0
 8013508:	4619      	mov	r1, r3
 801350a:	2000      	movs	r0, #0
 801350c:	f7f9 fb10 	bl	800cb30 <MOT_goSla>
				uc_SlaCnt++;
 8013510:	4b40      	ldr	r3, [pc, #256]	; (8013614 <MAP_moveNextBlock_acc+0x2cc>)
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	3301      	adds	r3, #1
 8013516:	b2da      	uxtb	r2, r3
 8013518:	4b3e      	ldr	r3, [pc, #248]	; (8013614 <MAP_moveNextBlock_acc+0x2cc>)
 801351a:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 801351c:	f000 bcdf 	b.w	8013ede <MAP_moveNextBlock_acc+0xb96>
				if(wall_hit_flag == 0){
 8013520:	4b3e      	ldr	r3, [pc, #248]	; (801361c <MAP_moveNextBlock_acc+0x2d4>)
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	f040 808f 	bne.w	8013648 <MAP_moveNextBlock_acc+0x300>
					f_MoveBackDist = 0;
 801352a:	4b32      	ldr	r3, [pc, #200]	; (80135f4 <MAP_moveNextBlock_acc+0x2ac>)
 801352c:	f04f 0200 	mov.w	r2, #0
 8013530:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8013532:	4b33      	ldr	r3, [pc, #204]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10e      	bne.n	8013558 <MAP_moveNextBlock_acc+0x210>
 801353a:	4b32      	ldr	r3, [pc, #200]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	4618      	mov	r0, r3
 8013540:	4b31      	ldr	r3, [pc, #196]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	4619      	mov	r1, r3
 8013546:	4a31      	ldr	r2, [pc, #196]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 8013548:	0143      	lsls	r3, r0, #5
 801354a:	4413      	add	r3, r2
 801354c:	440b      	add	r3, r1
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	f003 0308 	and.w	r3, r3, #8
 8013554:	2b00      	cmp	r3, #0
 8013556:	d138      	bne.n	80135ca <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8013558:	4b29      	ldr	r3, [pc, #164]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 801355a:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 801355c:	2b01      	cmp	r3, #1
 801355e:	d10e      	bne.n	801357e <MAP_moveNextBlock_acc+0x236>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8013560:	4b28      	ldr	r3, [pc, #160]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	4618      	mov	r0, r3
 8013566:	4b28      	ldr	r3, [pc, #160]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	4619      	mov	r1, r3
 801356c:	4a27      	ldr	r2, [pc, #156]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 801356e:	0143      	lsls	r3, r0, #5
 8013570:	4413      	add	r3, r2
 8013572:	440b      	add	r3, r1
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	f003 0301 	and.w	r3, r3, #1
 801357a:	2b00      	cmp	r3, #0
 801357c:	d125      	bne.n	80135ca <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 801357e:	4b20      	ldr	r3, [pc, #128]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 8013580:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8013582:	2b02      	cmp	r3, #2
 8013584:	d10e      	bne.n	80135a4 <MAP_moveNextBlock_acc+0x25c>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8013586:	4b1f      	ldr	r3, [pc, #124]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	4618      	mov	r0, r3
 801358c:	4b1e      	ldr	r3, [pc, #120]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	4619      	mov	r1, r3
 8013592:	4a1e      	ldr	r2, [pc, #120]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 8013594:	0143      	lsls	r3, r0, #5
 8013596:	4413      	add	r3, r2
 8013598:	440b      	add	r3, r1
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 0302 	and.w	r3, r3, #2
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d112      	bne.n	80135ca <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80135a4:	4b16      	ldr	r3, [pc, #88]	; (8013600 <MAP_moveNextBlock_acc+0x2b8>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80135a8:	2b03      	cmp	r3, #3
 80135aa:	d13d      	bne.n	8013628 <MAP_moveNextBlock_acc+0x2e0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80135ac:	4b15      	ldr	r3, [pc, #84]	; (8013604 <MAP_moveNextBlock_acc+0x2bc>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	4618      	mov	r0, r3
 80135b2:	4b15      	ldr	r3, [pc, #84]	; (8013608 <MAP_moveNextBlock_acc+0x2c0>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	4619      	mov	r1, r3
 80135b8:	4a14      	ldr	r2, [pc, #80]	; (801360c <MAP_moveNextBlock_acc+0x2c4>)
 80135ba:	0143      	lsls	r3, r0, #5
 80135bc:	4413      	add	r3, r2
 80135be:	440b      	add	r3, r1
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	f003 0304 	and.w	r3, r3, #4
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d02e      	beq.n	8013628 <MAP_moveNextBlock_acc+0x2e0>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80135ca:	eddf 0a15 	vldr	s1, [pc, #84]	; 8013620 <MAP_moveNextBlock_acc+0x2d8>
 80135ce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80135d2:	f7f8 fcb9 	bl	800bf48 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_R90);						// 右90度旋回
 80135d6:	2000      	movs	r0, #0
 80135d8:	f7f8 fe1e 	bl	800c218 <MOT_turn>
						uc_SlaCnt = 0;
 80135dc:	4b0d      	ldr	r3, [pc, #52]	; (8013614 <MAP_moveNextBlock_acc+0x2cc>)
 80135de:	2200      	movs	r2, #0
 80135e0:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 80135e2:	f7f9 fa4f 	bl	800ca84 <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80135e6:	4b03      	ldr	r3, [pc, #12]	; (80135f4 <MAP_moveNextBlock_acc+0x2ac>)
 80135e8:	4a0e      	ldr	r2, [pc, #56]	; (8013624 <MAP_moveNextBlock_acc+0x2dc>)
 80135ea:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	2201      	movs	r2, #1
 80135f0:	701a      	strb	r2, [r3, #0]
 80135f2:	e099      	b.n	8013728 <MAP_moveNextBlock_acc+0x3e0>
 80135f4:	2000e74c 	.word	0x2000e74c
 80135f8:	200002d8 	.word	0x200002d8
 80135fc:	3e99999a 	.word	0x3e99999a
 8013600:	2000e750 	.word	0x2000e750
 8013604:	2000e749 	.word	0x2000e749
 8013608:	2000e753 	.word	0x2000e753
 801360c:	20000854 	.word	0x20000854
 8013610:	20001478 	.word	0x20001478
 8013614:	200002d6 	.word	0x200002d6
 8013618:	2000001b 	.word	0x2000001b
 801361c:	200002ad 	.word	0x200002ad
 8013620:	00000000 	.word	0x00000000
 8013624:	3e6b851f 	.word	0x3e6b851f
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8013628:	2000      	movs	r0, #0
 801362a:	f7ef fce3 	bl	8002ff4 <PARAM_getSra>
 801362e:	4603      	mov	r3, r0
 8013630:	4619      	mov	r1, r3
 8013632:	2000      	movs	r0, #0
 8013634:	f7f9 fa7c 	bl	800cb30 <MOT_goSla>
						uc_SlaCnt++;
 8013638:	4b83      	ldr	r3, [pc, #524]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	3301      	adds	r3, #1
 801363e:	b2da      	uxtb	r2, r3
 8013640:	4b81      	ldr	r3, [pc, #516]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 8013642:	701a      	strb	r2, [r3, #0]
		break;
 8013644:	f000 bc4b 	b.w	8013ede <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8013648:	4b80      	ldr	r3, [pc, #512]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d10e      	bne.n	801366e <MAP_moveNextBlock_acc+0x326>
 8013650:	4b7f      	ldr	r3, [pc, #508]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	4618      	mov	r0, r3
 8013656:	4b7f      	ldr	r3, [pc, #508]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	4619      	mov	r1, r3
 801365c:	4a7e      	ldr	r2, [pc, #504]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 801365e:	0143      	lsls	r3, r0, #5
 8013660:	4413      	add	r3, r2
 8013662:	440b      	add	r3, r1
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	f003 0301 	and.w	r3, r3, #1
 801366a:	2b00      	cmp	r3, #0
 801366c:	d138      	bne.n	80136e0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801366e:	4b77      	ldr	r3, [pc, #476]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 8013670:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8013672:	2b01      	cmp	r3, #1
 8013674:	d10e      	bne.n	8013694 <MAP_moveNextBlock_acc+0x34c>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8013676:	4b76      	ldr	r3, [pc, #472]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	4618      	mov	r0, r3
 801367c:	4b75      	ldr	r3, [pc, #468]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	4619      	mov	r1, r3
 8013682:	4a75      	ldr	r2, [pc, #468]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 8013684:	0143      	lsls	r3, r0, #5
 8013686:	4413      	add	r3, r2
 8013688:	440b      	add	r3, r1
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	f003 0302 	and.w	r3, r3, #2
 8013690:	2b00      	cmp	r3, #0
 8013692:	d125      	bne.n	80136e0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8013694:	4b6d      	ldr	r3, [pc, #436]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 8013696:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8013698:	2b02      	cmp	r3, #2
 801369a:	d10e      	bne.n	80136ba <MAP_moveNextBlock_acc+0x372>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 801369c:	4b6c      	ldr	r3, [pc, #432]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	4618      	mov	r0, r3
 80136a2:	4b6c      	ldr	r3, [pc, #432]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	4619      	mov	r1, r3
 80136a8:	4a6b      	ldr	r2, [pc, #428]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 80136aa:	0143      	lsls	r3, r0, #5
 80136ac:	4413      	add	r3, r2
 80136ae:	440b      	add	r3, r1
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	f003 0304 	and.w	r3, r3, #4
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d112      	bne.n	80136e0 <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80136ba:	4b64      	ldr	r3, [pc, #400]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 80136bc:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80136be:	2b03      	cmp	r3, #3
 80136c0:	d123      	bne.n	801370a <MAP_moveNextBlock_acc+0x3c2>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80136c2:	4b63      	ldr	r3, [pc, #396]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	4618      	mov	r0, r3
 80136c8:	4b62      	ldr	r3, [pc, #392]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	4619      	mov	r1, r3
 80136ce:	4a62      	ldr	r2, [pc, #392]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 80136d0:	0143      	lsls	r3, r0, #5
 80136d2:	4413      	add	r3, r2
 80136d4:	440b      	add	r3, r1
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	f003 0308 	and.w	r3, r3, #8
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d014      	beq.n	801370a <MAP_moveNextBlock_acc+0x3c2>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80136e0:	eddf 0a5e 	vldr	s1, [pc, #376]	; 801385c <MAP_moveNextBlock_acc+0x514>
 80136e4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80136e8:	f7f8 fc2e 	bl	800bf48 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 80136ec:	2064      	movs	r0, #100	; 0x64
 80136ee:	f002 fe53 	bl	8016398 <LL_mDelay>
						DIST_Front_Wall_correction();
 80136f2:	f7f9 ff35 	bl	800d560 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);						// 右90度旋回
 80136f6:	2000      	movs	r0, #0
 80136f8:	f7f8 fd8e 	bl	800c218 <MOT_turn>
						uc_SlaCnt = 0;
 80136fc:	4b52      	ldr	r3, [pc, #328]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 80136fe:	2200      	movs	r2, #0
 8013700:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2201      	movs	r2, #1
 8013706:	701a      	strb	r2, [r3, #0]
 8013708:	e00e      	b.n	8013728 <MAP_moveNextBlock_acc+0x3e0>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801370a:	2000      	movs	r0, #0
 801370c:	f7ef fc72 	bl	8002ff4 <PARAM_getSra>
 8013710:	4603      	mov	r3, r0
 8013712:	4619      	mov	r1, r3
 8013714:	2000      	movs	r0, #0
 8013716:	f7f9 fa0b 	bl	800cb30 <MOT_goSla>
						uc_SlaCnt++;
 801371a:	4b4b      	ldr	r3, [pc, #300]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	3301      	adds	r3, #1
 8013720:	b2da      	uxtb	r2, r3
 8013722:	4b49      	ldr	r3, [pc, #292]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 8013724:	701a      	strb	r2, [r3, #0]
		break;
 8013726:	e3da      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
 8013728:	e3d9      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>

		/* 左に旋回する */
	case WEST:
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 801372a:	4b48      	ldr	r3, [pc, #288]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d10e      	bne.n	8013750 <MAP_moveNextBlock_acc+0x408>
 8013732:	4b47      	ldr	r3, [pc, #284]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	4618      	mov	r0, r3
 8013738:	4b46      	ldr	r3, [pc, #280]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	4619      	mov	r1, r3
 801373e:	4a46      	ldr	r2, [pc, #280]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 8013740:	0143      	lsls	r3, r0, #5
 8013742:	4413      	add	r3, r2
 8013744:	440b      	add	r3, r1
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	f003 0308 	and.w	r3, r3, #8
 801374c:	2b00      	cmp	r3, #0
 801374e:	d138      	bne.n	80137c2 <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8013750:	4b3e      	ldr	r3, [pc, #248]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 8013752:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8013754:	2b01      	cmp	r3, #1
 8013756:	d10e      	bne.n	8013776 <MAP_moveNextBlock_acc+0x42e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8013758:	4b3d      	ldr	r3, [pc, #244]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	4618      	mov	r0, r3
 801375e:	4b3d      	ldr	r3, [pc, #244]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	4619      	mov	r1, r3
 8013764:	4a3c      	ldr	r2, [pc, #240]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 8013766:	0143      	lsls	r3, r0, #5
 8013768:	4413      	add	r3, r2
 801376a:	440b      	add	r3, r1
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	f003 0301 	and.w	r3, r3, #1
 8013772:	2b00      	cmp	r3, #0
 8013774:	d125      	bne.n	80137c2 <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8013776:	4b35      	ldr	r3, [pc, #212]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 8013778:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 801377a:	2b02      	cmp	r3, #2
 801377c:	d10e      	bne.n	801379c <MAP_moveNextBlock_acc+0x454>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 801377e:	4b34      	ldr	r3, [pc, #208]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	4618      	mov	r0, r3
 8013784:	4b33      	ldr	r3, [pc, #204]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	4619      	mov	r1, r3
 801378a:	4a33      	ldr	r2, [pc, #204]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 801378c:	0143      	lsls	r3, r0, #5
 801378e:	4413      	add	r3, r2
 8013790:	440b      	add	r3, r1
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	f003 0302 	and.w	r3, r3, #2
 8013798:	2b00      	cmp	r3, #0
 801379a:	d112      	bne.n	80137c2 <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 801379c:	4b2b      	ldr	r3, [pc, #172]	; (801384c <MAP_moveNextBlock_acc+0x504>)
 801379e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80137a0:	2b03      	cmp	r3, #3
 80137a2:	d112      	bne.n	80137ca <MAP_moveNextBlock_acc+0x482>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80137a4:	4b2a      	ldr	r3, [pc, #168]	; (8013850 <MAP_moveNextBlock_acc+0x508>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	4618      	mov	r0, r3
 80137aa:	4b2a      	ldr	r3, [pc, #168]	; (8013854 <MAP_moveNextBlock_acc+0x50c>)
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	4619      	mov	r1, r3
 80137b0:	4a29      	ldr	r2, [pc, #164]	; (8013858 <MAP_moveNextBlock_acc+0x510>)
 80137b2:	0143      	lsls	r3, r0, #5
 80137b4:	4413      	add	r3, r2
 80137b6:	440b      	add	r3, r1
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	f003 0304 	and.w	r3, r3, #4
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d003      	beq.n	80137ca <MAP_moveNextBlock_acc+0x482>
			){
			uc_dist_control = 0.02;
 80137c2:	4b27      	ldr	r3, [pc, #156]	; (8013860 <MAP_moveNextBlock_acc+0x518>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	701a      	strb	r2, [r3, #0]
 80137c8:	e002      	b.n	80137d0 <MAP_moveNextBlock_acc+0x488>
			}
		else{
			uc_dist_control = 0;
 80137ca:	4b25      	ldr	r3, [pc, #148]	; (8013860 <MAP_moveNextBlock_acc+0x518>)
 80137cc:	2200      	movs	r2, #0
 80137ce:	701a      	strb	r2, [r3, #0]
		}
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 80137d0:	4b24      	ldr	r3, [pc, #144]	; (8013864 <MAP_moveNextBlock_acc+0x51c>)
 80137d2:	785b      	ldrb	r3, [r3, #1]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d022      	beq.n	801381e <MAP_moveNextBlock_acc+0x4d6>
			if (st_known.uc_StrCnt < 2) {
 80137d8:	4b22      	ldr	r3, [pc, #136]	; (8013864 <MAP_moveNextBlock_acc+0x51c>)
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d804      	bhi.n	80137ea <MAP_moveNextBlock_acc+0x4a2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 80137e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80137e4:	f7f8 fbd4 	bl	800bf90 <MOT_goBlock_Const>
 80137e8:	e013      	b.n	8013812 <MAP_moveNextBlock_acc+0x4ca>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 80137ea:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80137ee:	f7f9 f923 	bl	800ca38 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);		// n区画前進
 80137f2:	4b1c      	ldr	r3, [pc, #112]	; (8013864 <MAP_moveNextBlock_acc+0x51c>)
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	ee07 3a90 	vmov	s15, r3
 80137fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137fe:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8013868 <MAP_moveNextBlock_acc+0x520>
 8013802:	eeb0 0a67 	vmov.f32	s0, s15
 8013806:	f7f8 fb9f 	bl	800bf48 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 801380a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8013868 <MAP_moveNextBlock_acc+0x520>
 801380e:	f7f9 f913 	bl	800ca38 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;			//////////////////////////////////////
 8013812:	4b14      	ldr	r3, [pc, #80]	; (8013864 <MAP_moveNextBlock_acc+0x51c>)
 8013814:	2200      	movs	r2, #0
 8013816:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 8013818:	4b12      	ldr	r3, [pc, #72]	; (8013864 <MAP_moveNextBlock_acc+0x51c>)
 801381a:	2200      	movs	r2, #0
 801381c:	705a      	strb	r2, [r3, #1]
		}

		if( uc_SlaCnt < SLA_count ){
 801381e:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 8013820:	781a      	ldrb	r2, [r3, #0]
 8013822:	4b12      	ldr	r3, [pc, #72]	; (801386c <MAP_moveNextBlock_acc+0x524>)
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d222      	bcs.n	8013870 <MAP_moveNextBlock_acc+0x528>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801382a:	2000      	movs	r0, #0
 801382c:	f7ef fbe2 	bl	8002ff4 <PARAM_getSra>
 8013830:	4603      	mov	r3, r0
 8013832:	4619      	mov	r1, r3
 8013834:	2001      	movs	r0, #1
 8013836:	f7f9 f97b 	bl	800cb30 <MOT_goSla>
				uc_SlaCnt++;
 801383a:	4b03      	ldr	r3, [pc, #12]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	3301      	adds	r3, #1
 8013840:	b2da      	uxtb	r2, r3
 8013842:	4b01      	ldr	r3, [pc, #4]	; (8013848 <MAP_moveNextBlock_acc+0x500>)
 8013844:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8013846:	e34a      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
 8013848:	200002d6 	.word	0x200002d6
 801384c:	2000e750 	.word	0x2000e750
 8013850:	2000e749 	.word	0x2000e749
 8013854:	2000e753 	.word	0x2000e753
 8013858:	20000854 	.word	0x20000854
 801385c:	00000000 	.word	0x00000000
 8013860:	20001478 	.word	0x20001478
 8013864:	200002d8 	.word	0x200002d8
 8013868:	3e99999a 	.word	0x3e99999a
 801386c:	2000001b 	.word	0x2000001b
				if(wall_hit_flag == 0){
 8013870:	4b74      	ldr	r3, [pc, #464]	; (8013a44 <MAP_moveNextBlock_acc+0x6fc>)
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d173      	bne.n	8013960 <MAP_moveNextBlock_acc+0x618>
					f_MoveBackDist = 0;
 8013878:	4b73      	ldr	r3, [pc, #460]	; (8013a48 <MAP_moveNextBlock_acc+0x700>)
 801387a:	f04f 0200 	mov.w	r2, #0
 801387e:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8013880:	4b72      	ldr	r3, [pc, #456]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10e      	bne.n	80138a6 <MAP_moveNextBlock_acc+0x55e>
 8013888:	4b71      	ldr	r3, [pc, #452]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	4b71      	ldr	r3, [pc, #452]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	4619      	mov	r1, r3
 8013894:	4a70      	ldr	r2, [pc, #448]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 8013896:	0143      	lsls	r3, r0, #5
 8013898:	4413      	add	r3, r2
 801389a:	440b      	add	r3, r1
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	f003 0302 	and.w	r3, r3, #2
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d138      	bne.n	8013918 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80138a6:	4b69      	ldr	r3, [pc, #420]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 80138a8:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d10e      	bne.n	80138cc <MAP_moveNextBlock_acc+0x584>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80138ae:	4b68      	ldr	r3, [pc, #416]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	4618      	mov	r0, r3
 80138b4:	4b67      	ldr	r3, [pc, #412]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	4619      	mov	r1, r3
 80138ba:	4a67      	ldr	r2, [pc, #412]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 80138bc:	0143      	lsls	r3, r0, #5
 80138be:	4413      	add	r3, r2
 80138c0:	440b      	add	r3, r1
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	f003 0304 	and.w	r3, r3, #4
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d125      	bne.n	8013918 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80138cc:	4b5f      	ldr	r3, [pc, #380]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 80138ce:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80138d0:	2b02      	cmp	r3, #2
 80138d2:	d10e      	bne.n	80138f2 <MAP_moveNextBlock_acc+0x5aa>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80138d4:	4b5e      	ldr	r3, [pc, #376]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	4618      	mov	r0, r3
 80138da:	4b5e      	ldr	r3, [pc, #376]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	4619      	mov	r1, r3
 80138e0:	4a5d      	ldr	r2, [pc, #372]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 80138e2:	0143      	lsls	r3, r0, #5
 80138e4:	4413      	add	r3, r2
 80138e6:	440b      	add	r3, r1
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	f003 0308 	and.w	r3, r3, #8
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d112      	bne.n	8013918 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80138f2:	4b56      	ldr	r3, [pc, #344]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 80138f4:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80138f6:	2b03      	cmp	r3, #3
 80138f8:	d123      	bne.n	8013942 <MAP_moveNextBlock_acc+0x5fa>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80138fa:	4b55      	ldr	r3, [pc, #340]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	4618      	mov	r0, r3
 8013900:	4b54      	ldr	r3, [pc, #336]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	4619      	mov	r1, r3
 8013906:	4a54      	ldr	r2, [pc, #336]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 8013908:	0143      	lsls	r3, r0, #5
 801390a:	4413      	add	r3, r2
 801390c:	440b      	add	r3, r1
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	f003 0301 	and.w	r3, r3, #1
 8013914:	2b00      	cmp	r3, #0
 8013916:	d014      	beq.n	8013942 <MAP_moveNextBlock_acc+0x5fa>
						MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8013918:	eddf 0a52 	vldr	s1, [pc, #328]	; 8013a64 <MAP_moveNextBlock_acc+0x71c>
 801391c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013920:	f7f8 fb12 	bl	800bf48 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_L90);					// 右90度旋回
 8013924:	2001      	movs	r0, #1
 8013926:	f7f8 fc77 	bl	800c218 <MOT_turn>
						uc_SlaCnt = 0;
 801392a:	4b4c      	ldr	r3, [pc, #304]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 801392c:	2200      	movs	r2, #0
 801392e:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8013930:	f7f9 f8a8 	bl	800ca84 <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8013934:	4b44      	ldr	r3, [pc, #272]	; (8013a48 <MAP_moveNextBlock_acc+0x700>)
 8013936:	4a4a      	ldr	r2, [pc, #296]	; (8013a60 <MAP_moveNextBlock_acc+0x718>)
 8013938:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	2201      	movs	r2, #1
 801393e:	701a      	strb	r2, [r3, #0]
 8013940:	e07e      	b.n	8013a40 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8013942:	2000      	movs	r0, #0
 8013944:	f7ef fb56 	bl	8002ff4 <PARAM_getSra>
 8013948:	4603      	mov	r3, r0
 801394a:	4619      	mov	r1, r3
 801394c:	2001      	movs	r0, #1
 801394e:	f7f9 f8ef 	bl	800cb30 <MOT_goSla>
						uc_SlaCnt++;
 8013952:	4b42      	ldr	r3, [pc, #264]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	3301      	adds	r3, #1
 8013958:	b2da      	uxtb	r2, r3
 801395a:	4b40      	ldr	r3, [pc, #256]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 801395c:	701a      	strb	r2, [r3, #0]
		break;
 801395e:	e2be      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8013960:	4b3a      	ldr	r3, [pc, #232]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10e      	bne.n	8013986 <MAP_moveNextBlock_acc+0x63e>
 8013968:	4b39      	ldr	r3, [pc, #228]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	4618      	mov	r0, r3
 801396e:	4b39      	ldr	r3, [pc, #228]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	4619      	mov	r1, r3
 8013974:	4a38      	ldr	r2, [pc, #224]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 8013976:	0143      	lsls	r3, r0, #5
 8013978:	4413      	add	r3, r2
 801397a:	440b      	add	r3, r1
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	f003 0301 	and.w	r3, r3, #1
 8013982:	2b00      	cmp	r3, #0
 8013984:	d138      	bne.n	80139f8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8013986:	4b31      	ldr	r3, [pc, #196]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 8013988:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801398a:	2b01      	cmp	r3, #1
 801398c:	d10e      	bne.n	80139ac <MAP_moveNextBlock_acc+0x664>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801398e:	4b30      	ldr	r3, [pc, #192]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	4618      	mov	r0, r3
 8013994:	4b2f      	ldr	r3, [pc, #188]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	4619      	mov	r1, r3
 801399a:	4a2f      	ldr	r2, [pc, #188]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 801399c:	0143      	lsls	r3, r0, #5
 801399e:	4413      	add	r3, r2
 80139a0:	440b      	add	r3, r1
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	f003 0302 	and.w	r3, r3, #2
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d125      	bne.n	80139f8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80139ac:	4b27      	ldr	r3, [pc, #156]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 80139ae:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d10e      	bne.n	80139d2 <MAP_moveNextBlock_acc+0x68a>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80139b4:	4b26      	ldr	r3, [pc, #152]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	4618      	mov	r0, r3
 80139ba:	4b26      	ldr	r3, [pc, #152]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	4619      	mov	r1, r3
 80139c0:	4a25      	ldr	r2, [pc, #148]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 80139c2:	0143      	lsls	r3, r0, #5
 80139c4:	4413      	add	r3, r2
 80139c6:	440b      	add	r3, r1
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	f003 0304 	and.w	r3, r3, #4
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d112      	bne.n	80139f8 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80139d2:	4b1e      	ldr	r3, [pc, #120]	; (8013a4c <MAP_moveNextBlock_acc+0x704>)
 80139d4:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80139d6:	2b03      	cmp	r3, #3
 80139d8:	d123      	bne.n	8013a22 <MAP_moveNextBlock_acc+0x6da>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80139da:	4b1d      	ldr	r3, [pc, #116]	; (8013a50 <MAP_moveNextBlock_acc+0x708>)
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	4618      	mov	r0, r3
 80139e0:	4b1c      	ldr	r3, [pc, #112]	; (8013a54 <MAP_moveNextBlock_acc+0x70c>)
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	4619      	mov	r1, r3
 80139e6:	4a1c      	ldr	r2, [pc, #112]	; (8013a58 <MAP_moveNextBlock_acc+0x710>)
 80139e8:	0143      	lsls	r3, r0, #5
 80139ea:	4413      	add	r3, r2
 80139ec:	440b      	add	r3, r1
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	f003 0308 	and.w	r3, r3, #8
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d014      	beq.n	8013a22 <MAP_moveNextBlock_acc+0x6da>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 80139f8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8013a64 <MAP_moveNextBlock_acc+0x71c>
 80139fc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013a00:	f7f8 faa2 	bl	800bf48 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 8013a04:	2064      	movs	r0, #100	; 0x64
 8013a06:	f002 fcc7 	bl	8016398 <LL_mDelay>
						DIST_Front_Wall_correction();
 8013a0a:	f7f9 fda9 	bl	800d560 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);						// 右90度旋回
 8013a0e:	2001      	movs	r0, #1
 8013a10:	f7f8 fc02 	bl	800c218 <MOT_turn>
						uc_SlaCnt = 0;
 8013a14:	4b11      	ldr	r3, [pc, #68]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	701a      	strb	r2, [r3, #0]
 8013a20:	e00e      	b.n	8013a40 <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8013a22:	2000      	movs	r0, #0
 8013a24:	f7ef fae6 	bl	8002ff4 <PARAM_getSra>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	f7f9 f87f 	bl	800cb30 <MOT_goSla>
						uc_SlaCnt++;
 8013a32:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	3301      	adds	r3, #1
 8013a38:	b2da      	uxtb	r2, r3
 8013a3a:	4b08      	ldr	r3, [pc, #32]	; (8013a5c <MAP_moveNextBlock_acc+0x714>)
 8013a3c:	701a      	strb	r2, [r3, #0]
		break;
 8013a3e:	e24e      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
 8013a40:	e24d      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
 8013a42:	bf00      	nop
 8013a44:	200002ad 	.word	0x200002ad
 8013a48:	2000e74c 	.word	0x2000e74c
 8013a4c:	2000e750 	.word	0x2000e750
 8013a50:	2000e749 	.word	0x2000e749
 8013a54:	2000e753 	.word	0x2000e753
 8013a58:	20000854 	.word	0x20000854
 8013a5c:	200002d6 	.word	0x200002d6
 8013a60:	3e6b851f 	.word	0x3e6b851f
 8013a64:	00000000 	.word	0x00000000

		/* 反転して戻る */
	case SOUTH:
//		LED = LED_ALL_ON;
		MOT_goBlock_FinSpeed(0.5, 0);			// 半区画前進
 8013a68:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 8013a64 <MAP_moveNextBlock_acc+0x71c>
 8013a6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013a70:	f7f8 fa6a 	bl	800bf48 <MOT_goBlock_FinSpeed>
		if(wall_hit_flag == 0){
 8013a74:	4b86      	ldr	r3, [pc, #536]	; (8013c90 <MAP_moveNextBlock_acc+0x948>)
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d15a      	bne.n	8013b32 <MAP_moveNextBlock_acc+0x7ea>
			MOT_turn(MOT_R180);									// 右180度旋回
 8013a7c:	2002      	movs	r0, #2
 8013a7e:	f7f8 fbcb 	bl	800c218 <MOT_turn>
			uc_SlaCnt = 0;
 8013a82:	4b84      	ldr	r3, [pc, #528]	; (8013c94 <MAP_moveNextBlock_acc+0x94c>)
 8013a84:	2200      	movs	r2, #0
 8013a86:	701a      	strb	r2, [r3, #0]

			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8013a88:	4b83      	ldr	r3, [pc, #524]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d10e      	bne.n	8013aae <MAP_moveNextBlock_acc+0x766>
 8013a90:	4b82      	ldr	r3, [pc, #520]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	4618      	mov	r0, r3
 8013a96:	4b82      	ldr	r3, [pc, #520]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4a81      	ldr	r2, [pc, #516]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013a9e:	0143      	lsls	r3, r0, #5
 8013aa0:	4413      	add	r3, r2
 8013aa2:	440b      	add	r3, r1
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	f003 0301 	and.w	r3, r3, #1
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d138      	bne.n	8013b20 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013aae:	4b7a      	ldr	r3, [pc, #488]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013ab0:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d10e      	bne.n	8013ad4 <MAP_moveNextBlock_acc+0x78c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013ab6:	4b79      	ldr	r3, [pc, #484]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	4618      	mov	r0, r3
 8013abc:	4b78      	ldr	r3, [pc, #480]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4a78      	ldr	r2, [pc, #480]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013ac4:	0143      	lsls	r3, r0, #5
 8013ac6:	4413      	add	r3, r2
 8013ac8:	440b      	add	r3, r1
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	f003 0302 	and.w	r3, r3, #2
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d125      	bne.n	8013b20 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013ad4:	4b70      	ldr	r3, [pc, #448]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013ad6:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d10e      	bne.n	8013afa <MAP_moveNextBlock_acc+0x7b2>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013adc:	4b6f      	ldr	r3, [pc, #444]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	4b6f      	ldr	r3, [pc, #444]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013ae4:	781b      	ldrb	r3, [r3, #0]
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	4a6e      	ldr	r2, [pc, #440]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013aea:	0143      	lsls	r3, r0, #5
 8013aec:	4413      	add	r3, r2
 8013aee:	440b      	add	r3, r1
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	f003 0304 	and.w	r3, r3, #4
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d112      	bne.n	8013b20 <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013afa:	4b67      	ldr	r3, [pc, #412]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013afc:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013afe:	2b03      	cmp	r3, #3
 8013b00:	d113      	bne.n	8013b2a <MAP_moveNextBlock_acc+0x7e2>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013b02:	4b66      	ldr	r3, [pc, #408]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013b04:	781b      	ldrb	r3, [r3, #0]
 8013b06:	4618      	mov	r0, r3
 8013b08:	4b65      	ldr	r3, [pc, #404]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	4a65      	ldr	r2, [pc, #404]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013b10:	0143      	lsls	r3, r0, #5
 8013b12:	4413      	add	r3, r2
 8013b14:	440b      	add	r3, r1
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	f003 0308 	and.w	r3, r3, #8
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d004      	beq.n	8013b2a <MAP_moveNextBlock_acc+0x7e2>
				) {
				MOT_goHitBackWall();					// バックする
 8013b20:	f7f8 ffb0 	bl	800ca84 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;	// バックした分の移動距離[区画]を加算
 8013b24:	4b60      	ldr	r3, [pc, #384]	; (8013ca8 <MAP_moveNextBlock_acc+0x960>)
 8013b26:	4a61      	ldr	r2, [pc, #388]	; (8013cac <MAP_moveNextBlock_acc+0x964>)
 8013b28:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	701a      	strb	r2, [r3, #0]
				}
				
				*p_type = TRUE;								// 次は半区間＋バック分進める
			}
		}
		break;
 8013b30:	e1d5      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
			uc_SlaCnt = 0;
 8013b32:	4b58      	ldr	r3, [pc, #352]	; (8013c94 <MAP_moveNextBlock_acc+0x94c>)
 8013b34:	2200      	movs	r2, #0
 8013b36:	701a      	strb	r2, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8013b38:	4b57      	ldr	r3, [pc, #348]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d10e      	bne.n	8013b5e <MAP_moveNextBlock_acc+0x816>
 8013b40:	4b56      	ldr	r3, [pc, #344]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	4618      	mov	r0, r3
 8013b46:	4b56      	ldr	r3, [pc, #344]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4a55      	ldr	r2, [pc, #340]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013b4e:	0143      	lsls	r3, r0, #5
 8013b50:	4413      	add	r3, r2
 8013b52:	440b      	add	r3, r1
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	f003 0301 	and.w	r3, r3, #1
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d13a      	bne.n	8013bd4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013b5e:	4b4e      	ldr	r3, [pc, #312]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013b60:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d10e      	bne.n	8013b84 <MAP_moveNextBlock_acc+0x83c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013b66:	4b4d      	ldr	r3, [pc, #308]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	4b4c      	ldr	r3, [pc, #304]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	4619      	mov	r1, r3
 8013b72:	4a4c      	ldr	r2, [pc, #304]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013b74:	0143      	lsls	r3, r0, #5
 8013b76:	4413      	add	r3, r2
 8013b78:	440b      	add	r3, r1
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	f003 0302 	and.w	r3, r3, #2
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d127      	bne.n	8013bd4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013b84:	4b44      	ldr	r3, [pc, #272]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013b86:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013b88:	2b02      	cmp	r3, #2
 8013b8a:	d10e      	bne.n	8013baa <MAP_moveNextBlock_acc+0x862>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013b8c:	4b43      	ldr	r3, [pc, #268]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	4618      	mov	r0, r3
 8013b92:	4b43      	ldr	r3, [pc, #268]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	4619      	mov	r1, r3
 8013b98:	4a42      	ldr	r2, [pc, #264]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013b9a:	0143      	lsls	r3, r0, #5
 8013b9c:	4413      	add	r3, r2
 8013b9e:	440b      	add	r3, r1
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	f003 0304 	and.w	r3, r3, #4
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d114      	bne.n	8013bd4 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013baa:	4b3b      	ldr	r3, [pc, #236]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013bac:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013bae:	2b03      	cmp	r3, #3
 8013bb0:	f040 80dd 	bne.w	8013d6e <MAP_moveNextBlock_acc+0xa26>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013bb4:	4b39      	ldr	r3, [pc, #228]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	4b39      	ldr	r3, [pc, #228]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	4a38      	ldr	r2, [pc, #224]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013bc2:	0143      	lsls	r3, r0, #5
 8013bc4:	4413      	add	r3, r2
 8013bc6:	440b      	add	r3, r1
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	f003 0308 	and.w	r3, r3, #8
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	f000 80cd 	beq.w	8013d6e <MAP_moveNextBlock_acc+0xa26>
					LL_mDelay(100);
 8013bd4:	2064      	movs	r0, #100	; 0x64
 8013bd6:	f002 fbdf 	bl	8016398 <LL_mDelay>
					DIST_Front_Wall_correction();
 8013bda:	f7f9 fcc1 	bl	800d560 <DIST_Front_Wall_correction>
					if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8013bde:	4b2e      	ldr	r3, [pc, #184]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d10e      	bne.n	8013c04 <MAP_moveNextBlock_acc+0x8bc>
 8013be6:	4b2d      	ldr	r3, [pc, #180]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013be8:	781b      	ldrb	r3, [r3, #0]
 8013bea:	4618      	mov	r0, r3
 8013bec:	4b2c      	ldr	r3, [pc, #176]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4a2c      	ldr	r2, [pc, #176]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013bf4:	0143      	lsls	r3, r0, #5
 8013bf6:	4413      	add	r3, r2
 8013bf8:	440b      	add	r3, r1
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	f003 0302 	and.w	r3, r3, #2
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d138      	bne.n	8013c76 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013c04:	4b24      	ldr	r3, [pc, #144]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013c06:	781b      	ldrb	r3, [r3, #0]
					if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d10e      	bne.n	8013c2a <MAP_moveNextBlock_acc+0x8e2>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013c0c:	4b23      	ldr	r3, [pc, #140]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	4618      	mov	r0, r3
 8013c12:	4b23      	ldr	r3, [pc, #140]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	4619      	mov	r1, r3
 8013c18:	4a22      	ldr	r2, [pc, #136]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013c1a:	0143      	lsls	r3, r0, #5
 8013c1c:	4413      	add	r3, r2
 8013c1e:	440b      	add	r3, r1
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	f003 0304 	and.w	r3, r3, #4
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d125      	bne.n	8013c76 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013c2a:	4b1b      	ldr	r3, [pc, #108]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013c2c:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	d10e      	bne.n	8013c50 <MAP_moveNextBlock_acc+0x908>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013c32:	4b1a      	ldr	r3, [pc, #104]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	4618      	mov	r0, r3
 8013c38:	4b19      	ldr	r3, [pc, #100]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	4a19      	ldr	r2, [pc, #100]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013c40:	0143      	lsls	r3, r0, #5
 8013c42:	4413      	add	r3, r2
 8013c44:	440b      	add	r3, r1
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	f003 0308 	and.w	r3, r3, #8
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d112      	bne.n	8013c76 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013c50:	4b11      	ldr	r3, [pc, #68]	; (8013c98 <MAP_moveNextBlock_acc+0x950>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013c54:	2b03      	cmp	r3, #3
 8013c56:	d12b      	bne.n	8013cb0 <MAP_moveNextBlock_acc+0x968>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013c58:	4b10      	ldr	r3, [pc, #64]	; (8013c9c <MAP_moveNextBlock_acc+0x954>)
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	4b10      	ldr	r3, [pc, #64]	; (8013ca0 <MAP_moveNextBlock_acc+0x958>)
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	4619      	mov	r1, r3
 8013c64:	4a0f      	ldr	r2, [pc, #60]	; (8013ca4 <MAP_moveNextBlock_acc+0x95c>)
 8013c66:	0143      	lsls	r3, r0, #5
 8013c68:	4413      	add	r3, r2
 8013c6a:	440b      	add	r3, r1
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	f003 0301 	and.w	r3, r3, #1
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d01c      	beq.n	8013cb0 <MAP_moveNextBlock_acc+0x968>
						MOT_turn(MOT_R90);									// 右90度旋回
 8013c76:	2000      	movs	r0, #0
 8013c78:	f7f8 face 	bl	800c218 <MOT_turn>
						LL_mDelay(100);
 8013c7c:	2064      	movs	r0, #100	; 0x64
 8013c7e:	f002 fb8b 	bl	8016398 <LL_mDelay>
						DIST_Front_Wall_correction();
 8013c82:	f7f9 fc6d 	bl	800d560 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);									// 右90度旋回
 8013c86:	2000      	movs	r0, #0
 8013c88:	f7f8 fac6 	bl	800c218 <MOT_turn>
 8013c8c:	e06b      	b.n	8013d66 <MAP_moveNextBlock_acc+0xa1e>
 8013c8e:	bf00      	nop
 8013c90:	200002ad 	.word	0x200002ad
 8013c94:	200002d6 	.word	0x200002d6
 8013c98:	2000e750 	.word	0x2000e750
 8013c9c:	2000e749 	.word	0x2000e749
 8013ca0:	2000e753 	.word	0x2000e753
 8013ca4:	20000854 	.word	0x20000854
 8013ca8:	2000e74c 	.word	0x2000e74c
 8013cac:	3e6b851f 	.word	0x3e6b851f
					}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8013cb0:	4b92      	ldr	r3, [pc, #584]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d10e      	bne.n	8013cd6 <MAP_moveNextBlock_acc+0x98e>
 8013cb8:	4b91      	ldr	r3, [pc, #580]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	4b91      	ldr	r3, [pc, #580]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013cc0:	781b      	ldrb	r3, [r3, #0]
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	4a90      	ldr	r2, [pc, #576]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013cc6:	0143      	lsls	r3, r0, #5
 8013cc8:	4413      	add	r3, r2
 8013cca:	440b      	add	r3, r1
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	f003 0308 	and.w	r3, r3, #8
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d138      	bne.n	8013d48 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013cd6:	4b89      	ldr	r3, [pc, #548]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013cd8:	781b      	ldrb	r3, [r3, #0]
					}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d10e      	bne.n	8013cfc <MAP_moveNextBlock_acc+0x9b4>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013cde:	4b88      	ldr	r3, [pc, #544]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	4b87      	ldr	r3, [pc, #540]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	4619      	mov	r1, r3
 8013cea:	4a87      	ldr	r2, [pc, #540]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013cec:	0143      	lsls	r3, r0, #5
 8013cee:	4413      	add	r3, r2
 8013cf0:	440b      	add	r3, r1
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d125      	bne.n	8013d48 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013cfc:	4b7f      	ldr	r3, [pc, #508]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013cfe:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	d10e      	bne.n	8013d22 <MAP_moveNextBlock_acc+0x9da>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013d04:	4b7e      	ldr	r3, [pc, #504]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	4b7e      	ldr	r3, [pc, #504]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	4619      	mov	r1, r3
 8013d10:	4a7d      	ldr	r2, [pc, #500]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013d12:	0143      	lsls	r3, r0, #5
 8013d14:	4413      	add	r3, r2
 8013d16:	440b      	add	r3, r1
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	f003 0302 	and.w	r3, r3, #2
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d112      	bne.n	8013d48 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8013d22:	4b76      	ldr	r3, [pc, #472]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013d24:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013d26:	2b03      	cmp	r3, #3
 8013d28:	d11a      	bne.n	8013d60 <MAP_moveNextBlock_acc+0xa18>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8013d2a:	4b75      	ldr	r3, [pc, #468]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	4b74      	ldr	r3, [pc, #464]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	4619      	mov	r1, r3
 8013d36:	4a74      	ldr	r2, [pc, #464]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013d38:	0143      	lsls	r3, r0, #5
 8013d3a:	4413      	add	r3, r2
 8013d3c:	440b      	add	r3, r1
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	f003 0304 	and.w	r3, r3, #4
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d00b      	beq.n	8013d60 <MAP_moveNextBlock_acc+0xa18>
						MOT_turn(MOT_L90);									// 右90度旋回
 8013d48:	2001      	movs	r0, #1
 8013d4a:	f7f8 fa65 	bl	800c218 <MOT_turn>
						LL_mDelay(100);
 8013d4e:	2064      	movs	r0, #100	; 0x64
 8013d50:	f002 fb22 	bl	8016398 <LL_mDelay>
						DIST_Front_Wall_correction();
 8013d54:	f7f9 fc04 	bl	800d560 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);									// 右90度旋回
 8013d58:	2001      	movs	r0, #1
 8013d5a:	f7f8 fa5d 	bl	800c218 <MOT_turn>
 8013d5e:	e002      	b.n	8013d66 <MAP_moveNextBlock_acc+0xa1e>
						MOT_turn(MOT_R180);
 8013d60:	2002      	movs	r0, #2
 8013d62:	f7f8 fa59 	bl	800c218 <MOT_turn>
					*p_type = TRUE;								// 次は半区間＋バック分進める
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	2201      	movs	r2, #1
 8013d6a:	701a      	strb	r2, [r3, #0]
		break;
 8013d6c:	e0b7      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>
				if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8013d6e:	4b63      	ldr	r3, [pc, #396]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d10e      	bne.n	8013d94 <MAP_moveNextBlock_acc+0xa4c>
 8013d76:	4b62      	ldr	r3, [pc, #392]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	4b61      	ldr	r3, [pc, #388]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013d7e:	781b      	ldrb	r3, [r3, #0]
 8013d80:	4619      	mov	r1, r3
 8013d82:	4a61      	ldr	r2, [pc, #388]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013d84:	0143      	lsls	r3, r0, #5
 8013d86:	4413      	add	r3, r2
 8013d88:	440b      	add	r3, r1
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	f003 0302 	and.w	r3, r3, #2
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d138      	bne.n	8013e06 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013d94:	4b59      	ldr	r3, [pc, #356]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013d96:	781b      	ldrb	r3, [r3, #0]
				if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	d10e      	bne.n	8013dba <MAP_moveNextBlock_acc+0xa72>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013d9c:	4b58      	ldr	r3, [pc, #352]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	4618      	mov	r0, r3
 8013da2:	4b58      	ldr	r3, [pc, #352]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	4619      	mov	r1, r3
 8013da8:	4a57      	ldr	r2, [pc, #348]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013daa:	0143      	lsls	r3, r0, #5
 8013dac:	4413      	add	r3, r2
 8013dae:	440b      	add	r3, r1
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f003 0304 	and.w	r3, r3, #4
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d125      	bne.n	8013e06 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013dba:	4b50      	ldr	r3, [pc, #320]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013dbc:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013dbe:	2b02      	cmp	r3, #2
 8013dc0:	d10e      	bne.n	8013de0 <MAP_moveNextBlock_acc+0xa98>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013dc2:	4b4f      	ldr	r3, [pc, #316]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	4b4e      	ldr	r3, [pc, #312]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	4a4e      	ldr	r2, [pc, #312]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013dd0:	0143      	lsls	r3, r0, #5
 8013dd2:	4413      	add	r3, r2
 8013dd4:	440b      	add	r3, r1
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	f003 0308 	and.w	r3, r3, #8
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d112      	bne.n	8013e06 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013de0:	4b46      	ldr	r3, [pc, #280]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013de2:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013de4:	2b03      	cmp	r3, #3
 8013de6:	d11a      	bne.n	8013e1e <MAP_moveNextBlock_acc+0xad6>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013de8:	4b45      	ldr	r3, [pc, #276]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	4618      	mov	r0, r3
 8013dee:	4b45      	ldr	r3, [pc, #276]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	4619      	mov	r1, r3
 8013df4:	4a44      	ldr	r2, [pc, #272]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013df6:	0143      	lsls	r3, r0, #5
 8013df8:	4413      	add	r3, r2
 8013dfa:	440b      	add	r3, r1
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	f003 0301 	and.w	r3, r3, #1
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00b      	beq.n	8013e1e <MAP_moveNextBlock_acc+0xad6>
					MOT_turn(MOT_R90);									// 右90度旋回
 8013e06:	2000      	movs	r0, #0
 8013e08:	f7f8 fa06 	bl	800c218 <MOT_turn>
					LL_mDelay(100);
 8013e0c:	2064      	movs	r0, #100	; 0x64
 8013e0e:	f002 fac3 	bl	8016398 <LL_mDelay>
					DIST_Front_Wall_correction();
 8013e12:	f7f9 fba5 	bl	800d560 <DIST_Front_Wall_correction>
					MOT_turn(MOT_R90);									// 右90度旋回
 8013e16:	2000      	movs	r0, #0
 8013e18:	f7f8 f9fe 	bl	800c218 <MOT_turn>
 8013e1c:	e05a      	b.n	8013ed4 <MAP_moveNextBlock_acc+0xb8c>
				}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8013e1e:	4b37      	ldr	r3, [pc, #220]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d10e      	bne.n	8013e44 <MAP_moveNextBlock_acc+0xafc>
 8013e26:	4b36      	ldr	r3, [pc, #216]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	4b35      	ldr	r3, [pc, #212]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	4619      	mov	r1, r3
 8013e32:	4a35      	ldr	r2, [pc, #212]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013e34:	0143      	lsls	r3, r0, #5
 8013e36:	4413      	add	r3, r2
 8013e38:	440b      	add	r3, r1
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	f003 0308 	and.w	r3, r3, #8
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d138      	bne.n	8013eb6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013e44:	4b2d      	ldr	r3, [pc, #180]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013e46:	781b      	ldrb	r3, [r3, #0]
				}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d10e      	bne.n	8013e6a <MAP_moveNextBlock_acc+0xb22>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013e4c:	4b2c      	ldr	r3, [pc, #176]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	4618      	mov	r0, r3
 8013e52:	4b2c      	ldr	r3, [pc, #176]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	4619      	mov	r1, r3
 8013e58:	4a2b      	ldr	r2, [pc, #172]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013e5a:	0143      	lsls	r3, r0, #5
 8013e5c:	4413      	add	r3, r2
 8013e5e:	440b      	add	r3, r1
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	f003 0301 	and.w	r3, r3, #1
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d125      	bne.n	8013eb6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013e6a:	4b24      	ldr	r3, [pc, #144]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013e6c:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013e6e:	2b02      	cmp	r3, #2
 8013e70:	d10e      	bne.n	8013e90 <MAP_moveNextBlock_acc+0xb48>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013e72:	4b23      	ldr	r3, [pc, #140]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	4618      	mov	r0, r3
 8013e78:	4b22      	ldr	r3, [pc, #136]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4a22      	ldr	r2, [pc, #136]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013e80:	0143      	lsls	r3, r0, #5
 8013e82:	4413      	add	r3, r2
 8013e84:	440b      	add	r3, r1
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	f003 0302 	and.w	r3, r3, #2
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d112      	bne.n	8013eb6 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8013e90:	4b1a      	ldr	r3, [pc, #104]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013e92:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013e94:	2b03      	cmp	r3, #3
 8013e96:	d11a      	bne.n	8013ece <MAP_moveNextBlock_acc+0xb86>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8013e98:	4b19      	ldr	r3, [pc, #100]	; (8013f00 <MAP_moveNextBlock_acc+0xbb8>)
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	4b19      	ldr	r3, [pc, #100]	; (8013f04 <MAP_moveNextBlock_acc+0xbbc>)
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	4a18      	ldr	r2, [pc, #96]	; (8013f08 <MAP_moveNextBlock_acc+0xbc0>)
 8013ea6:	0143      	lsls	r3, r0, #5
 8013ea8:	4413      	add	r3, r2
 8013eaa:	440b      	add	r3, r1
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	f003 0304 	and.w	r3, r3, #4
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d00b      	beq.n	8013ece <MAP_moveNextBlock_acc+0xb86>
					MOT_turn(MOT_L90);									// 右90度旋回
 8013eb6:	2001      	movs	r0, #1
 8013eb8:	f7f8 f9ae 	bl	800c218 <MOT_turn>
					LL_mDelay(100);
 8013ebc:	2064      	movs	r0, #100	; 0x64
 8013ebe:	f002 fa6b 	bl	8016398 <LL_mDelay>
					DIST_Front_Wall_correction();
 8013ec2:	f7f9 fb4d 	bl	800d560 <DIST_Front_Wall_correction>
					MOT_turn(MOT_L90);									// 右90度旋回
 8013ec6:	2001      	movs	r0, #1
 8013ec8:	f7f8 f9a6 	bl	800c218 <MOT_turn>
 8013ecc:	e002      	b.n	8013ed4 <MAP_moveNextBlock_acc+0xb8c>
					MOT_turn(MOT_R180);
 8013ece:	2002      	movs	r0, #2
 8013ed0:	f7f8 f9a2 	bl	800c218 <MOT_turn>
				*p_type = TRUE;								// 次は半区間＋バック分進める
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	701a      	strb	r2, [r3, #0]
		break;
 8013eda:	e000      	b.n	8013ede <MAP_moveNextBlock_acc+0xb96>

	default:
		break;
 8013edc:	bf00      	nop
	}

	/* 進行方向更新 */
//	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
	en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + (uint8_t)en_head) & (MAP_HEAD_DIR_MAX - 1));
 8013ede:	4b07      	ldr	r3, [pc, #28]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013ee0:	781a      	ldrb	r2, [r3, #0]
 8013ee2:	79fb      	ldrb	r3, [r7, #7]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	f003 0303 	and.w	r3, r3, #3
 8013eec:	b2da      	uxtb	r2, r3
 8013eee:	4b03      	ldr	r3, [pc, #12]	; (8013efc <MAP_moveNextBlock_acc+0xbb4>)
 8013ef0:	701a      	strb	r2, [r3, #0]
}
 8013ef2:	bf00      	nop
 8013ef4:	3708      	adds	r7, #8
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	2000e750 	.word	0x2000e750
 8013f00:	2000e749 	.word	0x2000e749
 8013f04:	2000e753 	.word	0x2000e753
 8013f08:	20000854 	.word	0x20000854

08013f0c <MAP_searchGoal>:
void MAP_searchGoal(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 8013f0c:	b590      	push	{r4, r7, lr}
 8013f0e:	b087      	sub	sp, #28
 8013f10:	af02      	add	r7, sp, #8
 8013f12:	4604      	mov	r4, r0
 8013f14:	4608      	mov	r0, r1
 8013f16:	4611      	mov	r1, r2
 8013f18:	461a      	mov	r2, r3
 8013f1a:	4623      	mov	r3, r4
 8013f1c:	71fb      	strb	r3, [r7, #7]
 8013f1e:	4603      	mov	r3, r0
 8013f20:	71bb      	strb	r3, [r7, #6]
 8013f22:	460b      	mov	r3, r1
 8013f24:	717b      	strb	r3, [r7, #5]
 8013f26:	4613      	mov	r3, r2
 8013f28:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 8013f2e:	2301      	movs	r3, #1
 8013f30:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 8013f32:	4b95      	ldr	r3, [pc, #596]	; (8014188 <MAP_searchGoal+0x27c>)
 8013f34:	2201      	movs	r2, #1
 8013f36:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 8013f38:	793b      	ldrb	r3, [r7, #4]
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d122      	bne.n	8013f84 <MAP_searchGoal+0x78>
		uc_goalX = uc_trgX;
 8013f3e:	79fb      	ldrb	r3, [r7, #7]
 8013f40:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 8013f42:	79bb      	ldrb	r3, [r7, #6]
 8013f44:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 8013f46:	4b91      	ldr	r3, [pc, #580]	; (801418c <MAP_searchGoal+0x280>)
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 8013f4c:	4b90      	ldr	r3, [pc, #576]	; (8014190 <MAP_searchGoal+0x284>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8013f52:	797a      	ldrb	r2, [r7, #5]
 8013f54:	79b9      	ldrb	r1, [r7, #6]
 8013f56:	79fb      	ldrb	r3, [r7, #7]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fd fee9 	bl	8011d30 <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8013f5e:	4b8d      	ldr	r3, [pc, #564]	; (8014194 <MAP_searchGoal+0x288>)
 8013f60:	781a      	ldrb	r2, [r3, #0]
 8013f62:	7bfc      	ldrb	r4, [r7, #15]
 8013f64:	7b79      	ldrb	r1, [r7, #13]
 8013f66:	7bb8      	ldrb	r0, [r7, #14]
 8013f68:	f107 0309 	add.w	r3, r7, #9
 8013f6c:	9301      	str	r3, [sp, #4]
 8013f6e:	7bfb      	ldrb	r3, [r7, #15]
 8013f70:	9300      	str	r3, [sp, #0]
 8013f72:	4623      	mov	r3, r4
 8013f74:	f7fc ff16 	bl	8010da4 <MAP_searchCmdList>
		uc_trgX = Return_X;
 8013f78:	4b87      	ldr	r3, [pc, #540]	; (8014198 <MAP_searchGoal+0x28c>)
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 8013f7e:	4b87      	ldr	r3, [pc, #540]	; (801419c <MAP_searchGoal+0x290>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8013f84:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80141a0 <MAP_searchGoal+0x294>
 8013f88:	f7f8 fd56 	bl	800ca38 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 8013f8c:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80141a4 <MAP_searchGoal+0x298>
 8013f90:	f7f8 fd68 	bl	800ca64 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8013f94:	4b84      	ldr	r3, [pc, #528]	; (80141a8 <MAP_searchGoal+0x29c>)
 8013f96:	f04f 0200 	mov.w	r2, #0
 8013f9a:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8013f9c:	4b83      	ldr	r3, [pc, #524]	; (80141ac <MAP_searchGoal+0x2a0>)
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8013fa2:	4b83      	ldr	r3, [pc, #524]	; (80141b0 <MAP_searchGoal+0x2a4>)
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	79fa      	ldrb	r2, [r7, #7]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d107      	bne.n	8013fbc <MAP_searchGoal+0xb0>
 8013fac:	4b81      	ldr	r3, [pc, #516]	; (80141b4 <MAP_searchGoal+0x2a8>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	79ba      	ldrb	r2, [r7, #6]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d102      	bne.n	8013fbc <MAP_searchGoal+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 8013fb6:	4b7c      	ldr	r3, [pc, #496]	; (80141a8 <MAP_searchGoal+0x29c>)
 8013fb8:	4a7f      	ldr	r2, [pc, #508]	; (80141b8 <MAP_searchGoal+0x2ac>)
 8013fba:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 8013fbc:	f7f4 fe8e 	bl	8008cdc <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 8013fc0:	4b74      	ldr	r3, [pc, #464]	; (8014194 <MAP_searchGoal+0x288>)
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fe fb8f 	bl	80126e8 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 8013fca:	793b      	ldrb	r3, [r7, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d132      	bne.n	8014036 <MAP_searchGoal+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8013fd0:	797a      	ldrb	r2, [r7, #5]
 8013fd2:	79b9      	ldrb	r1, [r7, #6]
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fd feaa 	bl	8011d30 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8013fdc:	7abb      	ldrb	r3, [r7, #10]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d00c      	beq.n	8013ffc <MAP_searchGoal+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8013fe2:	4b71      	ldr	r3, [pc, #452]	; (80141a8 <MAP_searchGoal+0x29c>)
 8013fe4:	edd3 7a00 	vldr	s15, [r3]
 8013fe8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ff0:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80141a0 <MAP_searchGoal+0x294>
 8013ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8013ff8:	f7f7 ffa6 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 8013ffc:	f7fd fd94 	bl	8011b28 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8014000:	f107 030b 	add.w	r3, r7, #11
 8014004:	4619      	mov	r1, r3
 8014006:	2000      	movs	r0, #0
 8014008:	f7fe fa62 	bl	80124d0 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 801400c:	4b5f      	ldr	r3, [pc, #380]	; (801418c <MAP_searchGoal+0x280>)
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	79fa      	ldrb	r2, [r7, #7]
 8014012:	429a      	cmp	r2, r3
 8014014:	d107      	bne.n	8014026 <MAP_searchGoal+0x11a>
 8014016:	4b5e      	ldr	r3, [pc, #376]	; (8014190 <MAP_searchGoal+0x284>)
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	79ba      	ldrb	r2, [r7, #6]
 801401c:	429a      	cmp	r2, r3
 801401e:	d102      	bne.n	8014026 <MAP_searchGoal+0x11a>
				MAP_actGoal();										// ゴール時の動作
 8014020:	f7fe feca 	bl	8012db8 <MAP_actGoal>
				break;
 8014024:	e0a4      	b.n	8014170 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	f107 020a 	add.w	r2, r7, #10
 801402c:	4611      	mov	r1, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7fe fb96 	bl	8012760 <MAP_moveNextBlock>
 8014034:	e081      	b.n	801413a <MAP_searchGoal+0x22e>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 8014036:	793b      	ldrb	r3, [r7, #4]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d132      	bne.n	80140a2 <MAP_searchGoal+0x196>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801403c:	797a      	ldrb	r2, [r7, #5]
 801403e:	79b9      	ldrb	r1, [r7, #6]
 8014040:	79fb      	ldrb	r3, [r7, #7]
 8014042:	4618      	mov	r0, r3
 8014044:	f7fd fe74 	bl	8011d30 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8014048:	7abb      	ldrb	r3, [r7, #10]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d00c      	beq.n	8014068 <MAP_searchGoal+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801404e:	4b56      	ldr	r3, [pc, #344]	; (80141a8 <MAP_searchGoal+0x29c>)
 8014050:	edd3 7a00 	vldr	s15, [r3]
 8014054:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801405c:	eddf 0a50 	vldr	s1, [pc, #320]	; 80141a0 <MAP_searchGoal+0x294>
 8014060:	eeb0 0a67 	vmov.f32	s0, s15
 8014064:	f7f7 ff70 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 8014068:	f7fd fd5e 	bl	8011b28 <MAP_makeMapData>
			
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);				// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 801406c:	f107 030b 	add.w	r3, r7, #11
 8014070:	4619      	mov	r1, r3
 8014072:	2000      	movs	r0, #0
 8014074:	f7fe fa2c 	bl	80124d0 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8014078:	4b44      	ldr	r3, [pc, #272]	; (801418c <MAP_searchGoal+0x280>)
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	79fa      	ldrb	r2, [r7, #7]
 801407e:	429a      	cmp	r2, r3
 8014080:	d107      	bne.n	8014092 <MAP_searchGoal+0x186>
 8014082:	4b43      	ldr	r3, [pc, #268]	; (8014190 <MAP_searchGoal+0x284>)
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	79ba      	ldrb	r2, [r7, #6]
 8014088:	429a      	cmp	r2, r3
 801408a:	d102      	bne.n	8014092 <MAP_searchGoal+0x186>
				MAP_actGoal();										// ゴール時の動作
 801408c:	f7fe fe94 	bl	8012db8 <MAP_actGoal>
				break;
 8014090:	e06e      	b.n	8014170 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動						← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8014092:	7afb      	ldrb	r3, [r7, #11]
 8014094:	f107 010a 	add.w	r1, r7, #10
 8014098:	2200      	movs	r2, #0
 801409a:	4618      	mov	r0, r3
 801409c:	f7fe fc12 	bl	80128c4 <MAP_moveNextBlock_Sura>
 80140a0:	e04b      	b.n	801413a <MAP_searchGoal+0x22e>
//				MAP_moveNextBlock_acc(en_head, &bl_type);
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 80140a2:	793b      	ldrb	r3, [r7, #4]
 80140a4:	2b03      	cmp	r3, #3
 80140a6:	d148      	bne.n	801413a <MAP_searchGoal+0x22e>
			
			if( TRUE == bl_type ){
 80140a8:	7abb      	ldrb	r3, [r7, #10]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00c      	beq.n	80140c8 <MAP_searchGoal+0x1bc>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80140ae:	4b3e      	ldr	r3, [pc, #248]	; (80141a8 <MAP_searchGoal+0x29c>)
 80140b0:	edd3 7a00 	vldr	s15, [r3]
 80140b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80140b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140bc:	eddf 0a38 	vldr	s1, [pc, #224]	; 80141a0 <MAP_searchGoal+0x294>
 80140c0:	eeb0 0a67 	vmov.f32	s0, s15
 80140c4:	f7f7 ff40 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 80140c8:	f7fd fd2e 	bl	8011b28 <MAP_makeMapData>
						
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 80140cc:	7b7a      	ldrb	r2, [r7, #13]
 80140ce:	7bbb      	ldrb	r3, [r7, #14]
 80140d0:	4611      	mov	r1, r2
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe ff00 	bl	8012ed8 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80140d8:	4b2e      	ldr	r3, [pc, #184]	; (8014194 <MAP_searchGoal+0x288>)
 80140da:	781a      	ldrb	r2, [r3, #0]
 80140dc:	7bfc      	ldrb	r4, [r7, #15]
 80140de:	7b79      	ldrb	r1, [r7, #13]
 80140e0:	7bb8      	ldrb	r0, [r7, #14]
 80140e2:	f107 0309 	add.w	r3, r7, #9
 80140e6:	9301      	str	r3, [sp, #4]
 80140e8:	7bfb      	ldrb	r3, [r7, #15]
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	4623      	mov	r3, r4
 80140ee:	f7fc fe59 	bl	8010da4 <MAP_searchCmdList>
			uc_trgX = Return_X;
 80140f2:	4b29      	ldr	r3, [pc, #164]	; (8014198 <MAP_searchGoal+0x28c>)
 80140f4:	781b      	ldrb	r3, [r3, #0]
 80140f6:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80140f8:	4b28      	ldr	r3, [pc, #160]	; (801419c <MAP_searchGoal+0x290>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80140fe:	797a      	ldrb	r2, [r7, #5]
 8014100:	79b9      	ldrb	r1, [r7, #6]
 8014102:	79fb      	ldrb	r3, [r7, #7]
 8014104:	4618      	mov	r0, r3
 8014106:	f7fd fe13 	bl	8011d30 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 801410a:	f107 030b 	add.w	r3, r7, #11
 801410e:	4619      	mov	r1, r3
 8014110:	2000      	movs	r0, #0
 8014112:	f7fe f9dd 	bl	80124d0 <MAP_calcMouseDir>
			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 8014116:	4b1d      	ldr	r3, [pc, #116]	; (801418c <MAP_searchGoal+0x280>)
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d106      	bne.n	801412c <MAP_searchGoal+0x220>
 801411e:	4b1c      	ldr	r3, [pc, #112]	; (8014190 <MAP_searchGoal+0x284>)
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d102      	bne.n	801412c <MAP_searchGoal+0x220>
				MAP_actGoal();
 8014126:	f7fe fe47 	bl	8012db8 <MAP_actGoal>
				break;
 801412a:	e021      	b.n	8014170 <MAP_searchGoal+0x264>
			}
//			}
			else {
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE);	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 801412c:	7afb      	ldrb	r3, [r7, #11]
 801412e:	f107 010a 	add.w	r1, r7, #10
 8014132:	2200      	movs	r2, #0
 8014134:	4618      	mov	r0, r3
 8014136:	f7fe fbc5 	bl	80128c4 <MAP_moveNextBlock_Sura>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 801413a:	f7f4 f923 	bl	8008384 <SYS_isOutOfCtrl>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	f43f af3d 	beq.w	8013fc0 <MAP_searchGoal+0xb4>
			CTRL_stop();
 8014146:	f7f1 fb09 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 801414a:	2000      	movs	r0, #0
 801414c:	f7f4 f94c 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8014150:	2001      	movs	r0, #1
 8014152:	f7f4 f949 	bl	80083e8 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8014156:	4b0f      	ldr	r3, [pc, #60]	; (8014194 <MAP_searchGoal+0x288>)
 8014158:	2200      	movs	r2, #0
 801415a:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 801415c:	4b0b      	ldr	r3, [pc, #44]	; (801418c <MAP_searchGoal+0x280>)
 801415e:	2200      	movs	r2, #0
 8014160:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8014162:	4b0b      	ldr	r3, [pc, #44]	; (8014190 <MAP_searchGoal+0x284>)
 8014164:	2200      	movs	r2, #0
 8014166:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8014168:	4b0f      	ldr	r3, [pc, #60]	; (80141a8 <MAP_searchGoal+0x29c>)
 801416a:	f04f 0200 	mov.w	r2, #0
 801416e:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 8014170:	4b05      	ldr	r3, [pc, #20]	; (8014188 <MAP_searchGoal+0x27c>)
 8014172:	2200      	movs	r2, #0
 8014174:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8014176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801417a:	f002 f90d 	bl	8016398 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );				// モード変更有効
}
 801417e:	bf00      	nop
 8014180:	3714      	adds	r7, #20
 8014182:	46bd      	mov	sp, r7
 8014184:	bd90      	pop	{r4, r7, pc}
 8014186:	bf00      	nop
 8014188:	20000850 	.word	0x20000850
 801418c:	2000e753 	.word	0x2000e753
 8014190:	2000e749 	.word	0x2000e749
 8014194:	2000e750 	.word	0x2000e750
 8014198:	2000042d 	.word	0x2000042d
 801419c:	20000839 	.word	0x20000839
 80141a0:	3e99999a 	.word	0x3e99999a
 80141a4:	00000000 	.word	0x00000000
 80141a8:	2000e74c 	.word	0x2000e74c
 80141ac:	200002d6 	.word	0x200002d6
 80141b0:	2000e748 	.word	0x2000e748
 80141b4:	2000e751 	.word	0x2000e751
 80141b8:	3e6b851f 	.word	0x3e6b851f

080141bc <MAP_searchGoalKnown>:
void MAP_searchGoalKnown(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80141bc:	b590      	push	{r4, r7, lr}
 80141be:	b087      	sub	sp, #28
 80141c0:	af02      	add	r7, sp, #8
 80141c2:	4604      	mov	r4, r0
 80141c4:	4608      	mov	r0, r1
 80141c6:	4611      	mov	r1, r2
 80141c8:	461a      	mov	r2, r3
 80141ca:	4623      	mov	r3, r4
 80141cc:	71fb      	strb	r3, [r7, #7]
 80141ce:	4603      	mov	r3, r0
 80141d0:	71bb      	strb	r3, [r7, #6]
 80141d2:	460b      	mov	r3, r1
 80141d4:	717b      	strb	r3, [r7, #5]
 80141d6:	4613      	mov	r3, r2
 80141d8:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 80141da:	2300      	movs	r3, #0
 80141dc:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 80141de:	2301      	movs	r3, #1
 80141e0:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 80141e2:	4bb2      	ldr	r3, [pc, #712]	; (80144ac <MAP_searchGoalKnown+0x2f0>)
 80141e4:	2201      	movs	r2, #1
 80141e6:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 80141e8:	793b      	ldrb	r3, [r7, #4]
 80141ea:	2b03      	cmp	r3, #3
 80141ec:	d122      	bne.n	8014234 <MAP_searchGoalKnown+0x78>
		uc_goalX = uc_trgX;
 80141ee:	79fb      	ldrb	r3, [r7, #7]
 80141f0:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 80141f2:	79bb      	ldrb	r3, [r7, #6]
 80141f4:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 80141f6:	4bae      	ldr	r3, [pc, #696]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 80141fc:	4bad      	ldr	r3, [pc, #692]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8014202:	797a      	ldrb	r2, [r7, #5]
 8014204:	79b9      	ldrb	r1, [r7, #6]
 8014206:	79fb      	ldrb	r3, [r7, #7]
 8014208:	4618      	mov	r0, r3
 801420a:	f7fd fd91 	bl	8011d30 <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 801420e:	4baa      	ldr	r3, [pc, #680]	; (80144b8 <MAP_searchGoalKnown+0x2fc>)
 8014210:	781a      	ldrb	r2, [r3, #0]
 8014212:	7bfc      	ldrb	r4, [r7, #15]
 8014214:	7b79      	ldrb	r1, [r7, #13]
 8014216:	7bb8      	ldrb	r0, [r7, #14]
 8014218:	f107 0309 	add.w	r3, r7, #9
 801421c:	9301      	str	r3, [sp, #4]
 801421e:	7bfb      	ldrb	r3, [r7, #15]
 8014220:	9300      	str	r3, [sp, #0]
 8014222:	4623      	mov	r3, r4
 8014224:	f7fc fdbe 	bl	8010da4 <MAP_searchCmdList>
		uc_trgX = Return_X;
 8014228:	4ba4      	ldr	r3, [pc, #656]	; (80144bc <MAP_searchGoalKnown+0x300>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 801422e:	4ba4      	ldr	r3, [pc, #656]	; (80144c0 <MAP_searchGoalKnown+0x304>)
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8014234:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80144c4 <MAP_searchGoalKnown+0x308>
 8014238:	f7f8 fbfe 	bl	800ca38 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 801423c:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80144c8 <MAP_searchGoalKnown+0x30c>
 8014240:	f7f8 fc10 	bl	800ca64 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8014244:	4ba1      	ldr	r3, [pc, #644]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014246:	f04f 0200 	mov.w	r2, #0
 801424a:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 801424c:	4ba0      	ldr	r3, [pc, #640]	; (80144d0 <MAP_searchGoalKnown+0x314>)
 801424e:	2200      	movs	r2, #0
 8014250:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8014252:	4ba0      	ldr	r3, [pc, #640]	; (80144d4 <MAP_searchGoalKnown+0x318>)
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	79fa      	ldrb	r2, [r7, #7]
 8014258:	429a      	cmp	r2, r3
 801425a:	d107      	bne.n	801426c <MAP_searchGoalKnown+0xb0>
 801425c:	4b9e      	ldr	r3, [pc, #632]	; (80144d8 <MAP_searchGoalKnown+0x31c>)
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	79ba      	ldrb	r2, [r7, #6]
 8014262:	429a      	cmp	r2, r3
 8014264:	d102      	bne.n	801426c <MAP_searchGoalKnown+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 8014266:	4b99      	ldr	r3, [pc, #612]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014268:	4a9c      	ldr	r2, [pc, #624]	; (80144dc <MAP_searchGoalKnown+0x320>)
 801426a:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 801426c:	f7f4 fd36 	bl	8008cdc <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 8014270:	4b91      	ldr	r3, [pc, #580]	; (80144b8 <MAP_searchGoalKnown+0x2fc>)
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	4618      	mov	r0, r3
 8014276:	f7fe fa37 	bl	80126e8 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 801427a:	793b      	ldrb	r3, [r7, #4]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d132      	bne.n	80142e6 <MAP_searchGoalKnown+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8014280:	797a      	ldrb	r2, [r7, #5]
 8014282:	79b9      	ldrb	r1, [r7, #6]
 8014284:	79fb      	ldrb	r3, [r7, #7]
 8014286:	4618      	mov	r0, r3
 8014288:	f7fd fd52 	bl	8011d30 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 801428c:	7abb      	ldrb	r3, [r7, #10]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d00c      	beq.n	80142ac <MAP_searchGoalKnown+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8014292:	4b8e      	ldr	r3, [pc, #568]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014294:	edd3 7a00 	vldr	s15, [r3]
 8014298:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801429c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142a0:	eddf 0a88 	vldr	s1, [pc, #544]	; 80144c4 <MAP_searchGoalKnown+0x308>
 80142a4:	eeb0 0a67 	vmov.f32	s0, s15
 80142a8:	f7f7 fe4e 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 80142ac:	f7fd fc3c 	bl	8011b28 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80142b0:	f107 030b 	add.w	r3, r7, #11
 80142b4:	4619      	mov	r1, r3
 80142b6:	2000      	movs	r0, #0
 80142b8:	f7fe f90a 	bl	80124d0 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80142bc:	4b7c      	ldr	r3, [pc, #496]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	79fa      	ldrb	r2, [r7, #7]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d107      	bne.n	80142d6 <MAP_searchGoalKnown+0x11a>
 80142c6:	4b7b      	ldr	r3, [pc, #492]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	79ba      	ldrb	r2, [r7, #6]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d102      	bne.n	80142d6 <MAP_searchGoalKnown+0x11a>
				MAP_actGoal();										// ゴール時の動作
 80142d0:	f7fe fd72 	bl	8012db8 <MAP_actGoal>
				break;
 80142d4:	e0df      	b.n	8014496 <MAP_searchGoalKnown+0x2da>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80142d6:	7afb      	ldrb	r3, [r7, #11]
 80142d8:	f107 020a 	add.w	r2, r7, #10
 80142dc:	4611      	mov	r1, r2
 80142de:	4618      	mov	r0, r3
 80142e0:	f7fe fa3e 	bl	8012760 <MAP_moveNextBlock>
 80142e4:	e08f      	b.n	8014406 <MAP_searchGoalKnown+0x24a>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 80142e6:	793b      	ldrb	r3, [r7, #4]
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d139      	bne.n	8014360 <MAP_searchGoalKnown+0x1a4>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80142ec:	797a      	ldrb	r2, [r7, #5]
 80142ee:	79b9      	ldrb	r1, [r7, #6]
 80142f0:	79fb      	ldrb	r3, [r7, #7]
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7fd fd1c 	bl	8011d30 <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 80142f8:	7abb      	ldrb	r3, [r7, #10]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00c      	beq.n	8014318 <MAP_searchGoalKnown+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80142fe:	4b73      	ldr	r3, [pc, #460]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014300:	edd3 7a00 	vldr	s15, [r3]
 8014304:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014308:	ee77 7a87 	vadd.f32	s15, s15, s14
 801430c:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80144c4 <MAP_searchGoalKnown+0x308>
 8014310:	eeb0 0a67 	vmov.f32	s0, s15
 8014314:	f7f7 fe18 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 8014318:	4b71      	ldr	r3, [pc, #452]	; (80144e0 <MAP_searchGoalKnown+0x324>)
 801431a:	785b      	ldrb	r3, [r3, #1]
 801431c:	f083 0301 	eor.w	r3, r3, #1
 8014320:	b2db      	uxtb	r3, r3
 8014322:	2b00      	cmp	r3, #0
 8014324:	d001      	beq.n	801432a <MAP_searchGoalKnown+0x16e>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8014326:	f7fd fbff 	bl	8011b28 <MAP_makeMapData>
			}
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 801432a:	f107 030b 	add.w	r3, r7, #11
 801432e:	4619      	mov	r1, r3
 8014330:	2000      	movs	r0, #0
 8014332:	f7fe f8cd 	bl	80124d0 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8014336:	4b5e      	ldr	r3, [pc, #376]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	79fa      	ldrb	r2, [r7, #7]
 801433c:	429a      	cmp	r2, r3
 801433e:	d107      	bne.n	8014350 <MAP_searchGoalKnown+0x194>
 8014340:	4b5c      	ldr	r3, [pc, #368]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	79ba      	ldrb	r2, [r7, #6]
 8014346:	429a      	cmp	r2, r3
 8014348:	d102      	bne.n	8014350 <MAP_searchGoalKnown+0x194>
				MAP_actGoal();									// ゴール時の動作
 801434a:	f7fe fd35 	bl	8012db8 <MAP_actGoal>
				break;
 801434e:	e0a2      	b.n	8014496 <MAP_searchGoalKnown+0x2da>
			}
			else{
//				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8014350:	7afb      	ldrb	r3, [r7, #11]
 8014352:	f107 020a 	add.w	r2, r7, #10
 8014356:	4611      	mov	r1, r2
 8014358:	4618      	mov	r0, r3
 801435a:	f7fe fff5 	bl	8013348 <MAP_moveNextBlock_acc>
 801435e:	e052      	b.n	8014406 <MAP_searchGoalKnown+0x24a>
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8014360:	793b      	ldrb	r3, [r7, #4]
 8014362:	2b03      	cmp	r3, #3
 8014364:	d14f      	bne.n	8014406 <MAP_searchGoalKnown+0x24a>
			
			if( TRUE == bl_type ){
 8014366:	7abb      	ldrb	r3, [r7, #10]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00c      	beq.n	8014386 <MAP_searchGoalKnown+0x1ca>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801436c:	4b57      	ldr	r3, [pc, #348]	; (80144cc <MAP_searchGoalKnown+0x310>)
 801436e:	edd3 7a00 	vldr	s15, [r3]
 8014372:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014376:	ee77 7a87 	vadd.f32	s15, s15, s14
 801437a:	eddf 0a52 	vldr	s1, [pc, #328]	; 80144c4 <MAP_searchGoalKnown+0x308>
 801437e:	eeb0 0a67 	vmov.f32	s0, s15
 8014382:	f7f7 fde1 	bl	800bf48 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 8014386:	4b56      	ldr	r3, [pc, #344]	; (80144e0 <MAP_searchGoalKnown+0x324>)
 8014388:	785b      	ldrb	r3, [r3, #1]
 801438a:	f083 0301 	eor.w	r3, r3, #1
 801438e:	b2db      	uxtb	r3, r3
 8014390:	2b00      	cmp	r3, #0
 8014392:	d001      	beq.n	8014398 <MAP_searchGoalKnown+0x1dc>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8014394:	f7fd fbc8 	bl	8011b28 <MAP_makeMapData>
			}			
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 8014398:	7b7a      	ldrb	r2, [r7, #13]
 801439a:	7bbb      	ldrb	r3, [r7, #14]
 801439c:	4611      	mov	r1, r2
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fe fd9a 	bl	8012ed8 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80143a4:	4b44      	ldr	r3, [pc, #272]	; (80144b8 <MAP_searchGoalKnown+0x2fc>)
 80143a6:	781a      	ldrb	r2, [r3, #0]
 80143a8:	7bfc      	ldrb	r4, [r7, #15]
 80143aa:	7b79      	ldrb	r1, [r7, #13]
 80143ac:	7bb8      	ldrb	r0, [r7, #14]
 80143ae:	f107 0309 	add.w	r3, r7, #9
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	4623      	mov	r3, r4
 80143ba:	f7fc fcf3 	bl	8010da4 <MAP_searchCmdList>
			uc_trgX = Return_X;
 80143be:	4b3f      	ldr	r3, [pc, #252]	; (80144bc <MAP_searchGoalKnown+0x300>)
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80143c4:	4b3e      	ldr	r3, [pc, #248]	; (80144c0 <MAP_searchGoalKnown+0x304>)
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80143ca:	797a      	ldrb	r2, [r7, #5]
 80143cc:	79b9      	ldrb	r1, [r7, #6]
 80143ce:	79fb      	ldrb	r3, [r7, #7]
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fd fcad 	bl	8011d30 <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80143d6:	f107 030b 	add.w	r3, r7, #11
 80143da:	4619      	mov	r1, r3
 80143dc:	2000      	movs	r0, #0
 80143de:	f7fe f877 	bl	80124d0 <MAP_calcMouseDir>

			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 80143e2:	4b33      	ldr	r3, [pc, #204]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d106      	bne.n	80143f8 <MAP_searchGoalKnown+0x23c>
 80143ea:	4b32      	ldr	r3, [pc, #200]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d102      	bne.n	80143f8 <MAP_searchGoalKnown+0x23c>
				MAP_actGoal();
 80143f2:	f7fe fce1 	bl	8012db8 <MAP_actGoal>
				break;
 80143f6:	e04e      	b.n	8014496 <MAP_searchGoalKnown+0x2da>
			}
//			}
			else {
				MAP_moveNextBlock_acc(en_head, &bl_type);
 80143f8:	7afb      	ldrb	r3, [r7, #11]
 80143fa:	f107 020a 	add.w	r2, r7, #10
 80143fe:	4611      	mov	r1, r2
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe ffa1 	bl	8013348 <MAP_moveNextBlock_acc>
			}
//			LED_count(uc_trgY);
		}
		if(Min_in>6){
 8014406:	4b37      	ldr	r3, [pc, #220]	; (80144e4 <MAP_searchGoalKnown+0x328>)
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	b2db      	uxtb	r3, r3
 801440c:	2b06      	cmp	r3, #6
 801440e:	d927      	bls.n	8014460 <MAP_searchGoalKnown+0x2a4>
			MOT_goBlock_FinSpeed(0.5,0.0);
 8014410:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80144c8 <MAP_searchGoalKnown+0x30c>
 8014414:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014418:	f7f7 fd96 	bl	800bf48 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);	
 801441c:	2002      	movs	r0, #2
 801441e:	f7f7 fefb 	bl	800c218 <MOT_turn>
			LL_mDelay(200);
 8014422:	20c8      	movs	r0, #200	; 0xc8
 8014424:	f001 ffb8 	bl	8016398 <LL_mDelay>
			MOT_turn(MOT_R180);	
 8014428:	2002      	movs	r0, #2
 801442a:	f7f7 fef5 	bl	800c218 <MOT_turn>
			LL_mDelay(200);
 801442e:	20c8      	movs	r0, #200	; 0xc8
 8014430:	f001 ffb2 	bl	8016398 <LL_mDelay>
			CTRL_stop();
 8014434:	f7f1 f992 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8014438:	2000      	movs	r0, #0
 801443a:	f7f3 ffd5 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 801443e:	2001      	movs	r0, #1
 8014440:	f7f3 ffd2 	bl	80083e8 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8014444:	4b1c      	ldr	r3, [pc, #112]	; (80144b8 <MAP_searchGoalKnown+0x2fc>)
 8014446:	2200      	movs	r2, #0
 8014448:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 801444a:	4b19      	ldr	r3, [pc, #100]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 801444c:	2200      	movs	r2, #0
 801444e:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8014450:	4b18      	ldr	r3, [pc, #96]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 8014452:	2200      	movs	r2, #0
 8014454:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8014456:	4b1d      	ldr	r3, [pc, #116]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014458:	f04f 0200 	mov.w	r2, #0
 801445c:	601a      	str	r2, [r3, #0]
			break;
 801445e:	e01a      	b.n	8014496 <MAP_searchGoalKnown+0x2da>
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 8014460:	f7f3 ff90 	bl	8008384 <SYS_isOutOfCtrl>
 8014464:	4603      	mov	r3, r0
 8014466:	2b00      	cmp	r3, #0
 8014468:	f43f af02 	beq.w	8014270 <MAP_searchGoalKnown+0xb4>
			CTRL_stop();
 801446c:	f7f1 f976 	bl	800575c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8014470:	2000      	movs	r0, #0
 8014472:	f7f3 ffb9 	bl	80083e8 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8014476:	2001      	movs	r0, #1
 8014478:	f7f3 ffb6 	bl	80083e8 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 801447c:	4b0e      	ldr	r3, [pc, #56]	; (80144b8 <MAP_searchGoalKnown+0x2fc>)
 801447e:	2200      	movs	r2, #0
 8014480:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8014482:	4b0b      	ldr	r3, [pc, #44]	; (80144b0 <MAP_searchGoalKnown+0x2f4>)
 8014484:	2200      	movs	r2, #0
 8014486:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8014488:	4b0a      	ldr	r3, [pc, #40]	; (80144b4 <MAP_searchGoalKnown+0x2f8>)
 801448a:	2200      	movs	r2, #0
 801448c:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 801448e:	4b0f      	ldr	r3, [pc, #60]	; (80144cc <MAP_searchGoalKnown+0x310>)
 8014490:	f04f 0200 	mov.w	r2, #0
 8014494:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 8014496:	4b05      	ldr	r3, [pc, #20]	; (80144ac <MAP_searchGoalKnown+0x2f0>)
 8014498:	2200      	movs	r2, #0
 801449a:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 801449c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80144a0:	f001 ff7a 	bl	8016398 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}
 80144a4:	bf00      	nop
 80144a6:	3714      	adds	r7, #20
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd90      	pop	{r4, r7, pc}
 80144ac:	20000850 	.word	0x20000850
 80144b0:	2000e753 	.word	0x2000e753
 80144b4:	2000e749 	.word	0x2000e749
 80144b8:	2000e750 	.word	0x2000e750
 80144bc:	2000042d 	.word	0x2000042d
 80144c0:	20000839 	.word	0x20000839
 80144c4:	3e99999a 	.word	0x3e99999a
 80144c8:	00000000 	.word	0x00000000
 80144cc:	2000e74c 	.word	0x2000e74c
 80144d0:	200002d6 	.word	0x200002d6
 80144d4:	2000e748 	.word	0x2000e748
 80144d8:	2000e751 	.word	0x2000e751
 80144dc:	3e6b851f 	.word	0x3e6b851f
 80144e0:	200002d8 	.word	0x200002d8
 80144e4:	2000042c 	.word	0x2000042c

080144e8 <MAP_clearMap_direction>:
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}

void MAP_clearMap_direction(void)
{
 80144e8:	b480      	push	{r7}
 80144ea:	b083      	sub	sp, #12
 80144ec:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for (y = 0; y < MAP_Y_SIZE; y++) {
 80144ee:	2300      	movs	r3, #0
 80144f0:	80bb      	strh	r3, [r7, #4]
 80144f2:	e015      	b.n	8014520 <MAP_clearMap_direction+0x38>
		for (x = 0; x < MAP_X_SIZE; x++) {
 80144f4:	2300      	movs	r3, #0
 80144f6:	80fb      	strh	r3, [r7, #6]
 80144f8:	e00c      	b.n	8014514 <MAP_clearMap_direction+0x2c>
			uc_data = 0x00;
 80144fa:	2300      	movs	r3, #0
 80144fc:	70fb      	strb	r3, [r7, #3]
			g_Map_direction[y][x] = uc_data;
 80144fe:	88ba      	ldrh	r2, [r7, #4]
 8014500:	88fb      	ldrh	r3, [r7, #6]
 8014502:	490c      	ldr	r1, [pc, #48]	; (8014534 <MAP_clearMap_direction+0x4c>)
 8014504:	0152      	lsls	r2, r2, #5
 8014506:	440a      	add	r2, r1
 8014508:	4413      	add	r3, r2
 801450a:	78fa      	ldrb	r2, [r7, #3]
 801450c:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < MAP_X_SIZE; x++) {
 801450e:	88fb      	ldrh	r3, [r7, #6]
 8014510:	3301      	adds	r3, #1
 8014512:	80fb      	strh	r3, [r7, #6]
 8014514:	88fb      	ldrh	r3, [r7, #6]
 8014516:	2b1f      	cmp	r3, #31
 8014518:	d9ef      	bls.n	80144fa <MAP_clearMap_direction+0x12>
	for (y = 0; y < MAP_Y_SIZE; y++) {
 801451a:	88bb      	ldrh	r3, [r7, #4]
 801451c:	3301      	adds	r3, #1
 801451e:	80bb      	strh	r3, [r7, #4]
 8014520:	88bb      	ldrh	r3, [r7, #4]
 8014522:	2b1f      	cmp	r3, #31
 8014524:	d9e6      	bls.n	80144f4 <MAP_clearMap_direction+0xc>
		}
	}

}
 8014526:	bf00      	nop
 8014528:	bf00      	nop
 801452a:	370c      	adds	r7, #12
 801452c:	46bd      	mov	sp, r7
 801452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014532:	4770      	bx	lr
 8014534:	20000430 	.word	0x20000430

08014538 <MAP_makeContourMap_dijkstra_modoki>:

void  MAP_makeContourMap_dijkstra_modoki(
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
 801453e:	4603      	mov	r3, r0
 8014540:	71fb      	strb	r3, [r7, #7]
 8014542:	460b      	mov	r3, r1
 8014544:	71bb      	strb	r3, [r7, #6]
 8014546:	4613      	mov	r3, r2
 8014548:	717b      	strb	r3, [r7, #5]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	MAP_clearMap_direction();
 801454a:	f7ff ffcd 	bl	80144e8 <MAP_clearMap_direction>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 801454e:	2300      	movs	r3, #0
 8014550:	827b      	strh	r3, [r7, #18]
 8014552:	e010      	b.n	8014576 <MAP_makeContourMap_dijkstra_modoki+0x3e>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL*4 - 1;
 8014554:	8a7b      	ldrh	r3, [r7, #18]
 8014556:	095b      	lsrs	r3, r3, #5
 8014558:	b29b      	uxth	r3, r3
 801455a:	461a      	mov	r2, r3
 801455c:	8a7b      	ldrh	r3, [r7, #18]
 801455e:	f003 031f 	and.w	r3, r3, #31
 8014562:	495e      	ldr	r1, [pc, #376]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014564:	0152      	lsls	r2, r2, #5
 8014566:	4413      	add	r3, r2
 8014568:	f640 72ff 	movw	r2, #4095	; 0xfff
 801456c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8014570:	8a7b      	ldrh	r3, [r7, #18]
 8014572:	3301      	adds	r3, #1
 8014574:	827b      	strh	r3, [r7, #18]
 8014576:	8a7b      	ldrh	r3, [r7, #18]
 8014578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801457c:	d3ea      	bcc.n	8014554 <MAP_makeContourMap_dijkstra_modoki+0x1c>
	}
	/* 目標地点の等高線を0に設定 */
	us_cmap[uc_goalY][uc_goalX] = 0;
 801457e:	79ba      	ldrb	r2, [r7, #6]
 8014580:	79fb      	ldrb	r3, [r7, #7]
 8014582:	4956      	ldr	r1, [pc, #344]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014584:	0152      	lsls	r2, r2, #5
 8014586:	4413      	add	r3, r2
 8014588:	2200      	movs	r2, #0
 801458a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 801458e:	4b54      	ldr	r3, [pc, #336]	; (80146e0 <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	2b04      	cmp	r3, #4
 8014594:	d11c      	bne.n	80145d0 <MAP_makeContourMap_dijkstra_modoki+0x98>
		us_cmap[uc_goalY + 1][uc_goalX] = 0;
 8014596:	79bb      	ldrb	r3, [r7, #6]
 8014598:	1c5a      	adds	r2, r3, #1
 801459a:	79fb      	ldrb	r3, [r7, #7]
 801459c:	494f      	ldr	r1, [pc, #316]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 801459e:	0152      	lsls	r2, r2, #5
 80145a0:	4413      	add	r3, r2
 80145a2:	2200      	movs	r2, #0
 80145a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX + 1] = 0;
 80145a8:	79ba      	ldrb	r2, [r7, #6]
 80145aa:	79fb      	ldrb	r3, [r7, #7]
 80145ac:	3301      	adds	r3, #1
 80145ae:	494b      	ldr	r1, [pc, #300]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 80145b0:	0152      	lsls	r2, r2, #5
 80145b2:	4413      	add	r3, r2
 80145b4:	2200      	movs	r2, #0
 80145b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 80145ba:	79bb      	ldrb	r3, [r7, #6]
 80145bc:	1c5a      	adds	r2, r3, #1
 80145be:	79fb      	ldrb	r3, [r7, #7]
 80145c0:	3301      	adds	r3, #1
 80145c2:	4946      	ldr	r1, [pc, #280]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 80145c4:	0152      	lsls	r2, r2, #5
 80145c6:	4413      	add	r3, r2
 80145c8:	2200      	movs	r2, #0
 80145ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80145ce:	e04f      	b.n	8014670 <MAP_makeContourMap_dijkstra_modoki+0x138>
	}
	else if (GOAL_SIZE == 9){
 80145d0:	4b43      	ldr	r3, [pc, #268]	; (80146e0 <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b09      	cmp	r3, #9
 80145d6:	d14b      	bne.n	8014670 <MAP_makeContourMap_dijkstra_modoki+0x138>
		us_cmap[uc_goalY+1][uc_goalX] = 0;
 80145d8:	79bb      	ldrb	r3, [r7, #6]
 80145da:	1c5a      	adds	r2, r3, #1
 80145dc:	79fb      	ldrb	r3, [r7, #7]
 80145de:	493f      	ldr	r1, [pc, #252]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 80145e0:	0152      	lsls	r2, r2, #5
 80145e2:	4413      	add	r3, r2
 80145e4:	2200      	movs	r2, #0
 80145e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+1] = 0;
 80145ea:	79ba      	ldrb	r2, [r7, #6]
 80145ec:	79fb      	ldrb	r3, [r7, #7]
 80145ee:	3301      	adds	r3, #1
 80145f0:	493a      	ldr	r1, [pc, #232]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 80145f2:	0152      	lsls	r2, r2, #5
 80145f4:	4413      	add	r3, r2
 80145f6:	2200      	movs	r2, #0
 80145f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+1] = 0;
 80145fc:	79bb      	ldrb	r3, [r7, #6]
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	3301      	adds	r3, #1
 8014604:	4935      	ldr	r1, [pc, #212]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014606:	0152      	lsls	r2, r2, #5
 8014608:	4413      	add	r3, r2
 801460a:	2200      	movs	r2, #0
 801460c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX] = 0;
 8014610:	79bb      	ldrb	r3, [r7, #6]
 8014612:	1c9a      	adds	r2, r3, #2
 8014614:	79fb      	ldrb	r3, [r7, #7]
 8014616:	4931      	ldr	r1, [pc, #196]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014618:	0152      	lsls	r2, r2, #5
 801461a:	4413      	add	r3, r2
 801461c:	2200      	movs	r2, #0
 801461e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+1] = 0;
 8014622:	79bb      	ldrb	r3, [r7, #6]
 8014624:	1c9a      	adds	r2, r3, #2
 8014626:	79fb      	ldrb	r3, [r7, #7]
 8014628:	3301      	adds	r3, #1
 801462a:	492c      	ldr	r1, [pc, #176]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 801462c:	0152      	lsls	r2, r2, #5
 801462e:	4413      	add	r3, r2
 8014630:	2200      	movs	r2, #0
 8014632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+2] = 0;
 8014636:	79ba      	ldrb	r2, [r7, #6]
 8014638:	79fb      	ldrb	r3, [r7, #7]
 801463a:	3302      	adds	r3, #2
 801463c:	4927      	ldr	r1, [pc, #156]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 801463e:	0152      	lsls	r2, r2, #5
 8014640:	4413      	add	r3, r2
 8014642:	2200      	movs	r2, #0
 8014644:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+2] = 0;
 8014648:	79bb      	ldrb	r3, [r7, #6]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	79fb      	ldrb	r3, [r7, #7]
 801464e:	3302      	adds	r3, #2
 8014650:	4922      	ldr	r1, [pc, #136]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014652:	0152      	lsls	r2, r2, #5
 8014654:	4413      	add	r3, r2
 8014656:	2200      	movs	r2, #0
 8014658:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+2] = 0;
 801465c:	79bb      	ldrb	r3, [r7, #6]
 801465e:	1c9a      	adds	r2, r3, #2
 8014660:	79fb      	ldrb	r3, [r7, #7]
 8014662:	3302      	adds	r3, #2
 8014664:	491d      	ldr	r1, [pc, #116]	; (80146dc <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8014666:	0152      	lsls	r2, r2, #5
 8014668:	4413      	add	r3, r2
 801466a:	2200      	movs	r2, #0
 801466c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	if (mx > uc_max_x)uc_max_x = mx;
 8014670:	4b1c      	ldr	r3, [pc, #112]	; (80146e4 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8014672:	781a      	ldrb	r2, [r3, #0]
 8014674:	4b1c      	ldr	r3, [pc, #112]	; (80146e8 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	429a      	cmp	r2, r3
 801467a:	d903      	bls.n	8014684 <MAP_makeContourMap_dijkstra_modoki+0x14c>
 801467c:	4b19      	ldr	r3, [pc, #100]	; (80146e4 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 801467e:	781a      	ldrb	r2, [r3, #0]
 8014680:	4b19      	ldr	r3, [pc, #100]	; (80146e8 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8014682:	701a      	strb	r2, [r3, #0]
	if (my > uc_max_y)uc_max_y = my;
 8014684:	4b19      	ldr	r3, [pc, #100]	; (80146ec <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8014686:	781a      	ldrb	r2, [r3, #0]
 8014688:	4b19      	ldr	r3, [pc, #100]	; (80146f0 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	429a      	cmp	r2, r3
 801468e:	d903      	bls.n	8014698 <MAP_makeContourMap_dijkstra_modoki+0x160>
 8014690:	4b16      	ldr	r3, [pc, #88]	; (80146ec <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8014692:	781a      	ldrb	r2, [r3, #0]
 8014694:	4b16      	ldr	r3, [pc, #88]	; (80146f0 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8014696:	701a      	strb	r2, [r3, #0]
	uc_max_x = 32;
 8014698:	4b13      	ldr	r3, [pc, #76]	; (80146e8 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 801469a:	2220      	movs	r2, #32
 801469c:	701a      	strb	r2, [r3, #0]
	uc_max_y = 32;
 801469e:	4b14      	ldr	r3, [pc, #80]	; (80146f0 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 80146a0:	2220      	movs	r2, #32
 80146a2:	701a      	strb	r2, [r3, #0]

	g_Map_direction[uc_goalY][uc_goalX] = 0xff;
 80146a4:	79ba      	ldrb	r2, [r7, #6]
 80146a6:	79fb      	ldrb	r3, [r7, #7]
 80146a8:	4912      	ldr	r1, [pc, #72]	; (80146f4 <MAP_makeContourMap_dijkstra_modoki+0x1bc>)
 80146aa:	0152      	lsls	r2, r2, #5
 80146ac:	440a      	add	r2, r1
 80146ae:	4413      	add	r3, r2
 80146b0:	22ff      	movs	r2, #255	; 0xff
 80146b2:	701a      	strb	r2, [r3, #0]

	/* 等高線マップを作成 */
	uc_dase = 0;
 80146b4:	2300      	movs	r3, #0
 80146b6:	823b      	strh	r3, [r7, #16]
	do {
		uc_level = 0;
 80146b8:	2300      	movs	r3, #0
 80146ba:	81bb      	strh	r3, [r7, #12]
		uc_new = uc_dase + 1;
 80146bc:	8a3b      	ldrh	r3, [r7, #16]
 80146be:	3301      	adds	r3, #1
 80146c0:	81fb      	strh	r3, [r7, #14]
		for (y = 0; y < MAP_Y_SIZE; y++) {
 80146c2:	2300      	movs	r3, #0
 80146c4:	82bb      	strh	r3, [r7, #20]
 80146c6:	e1ea      	b.n	8014a9e <MAP_makeContourMap_dijkstra_modoki+0x566>
			if (uc_max_y+1 < y) break;
 80146c8:	4b09      	ldr	r3, [pc, #36]	; (80146f0 <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	1c5a      	adds	r2, r3, #1
 80146ce:	8abb      	ldrh	r3, [r7, #20]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	f2c0 81e9 	blt.w	8014aa8 <MAP_makeContourMap_dijkstra_modoki+0x570>
			for (x = 0; x < MAP_X_SIZE; x++) {
 80146d6:	2300      	movs	r3, #0
 80146d8:	82fb      	strh	r3, [r7, #22]
 80146da:	e1d7      	b.n	8014a8c <MAP_makeContourMap_dijkstra_modoki+0x554>
 80146dc:	20000c78 	.word	0x20000c78
 80146e0:	2000e752 	.word	0x2000e752
 80146e4:	2000e753 	.word	0x2000e753
 80146e8:	2000001a 	.word	0x2000001a
 80146ec:	2000e749 	.word	0x2000e749
 80146f0:	200002d7 	.word	0x200002d7
 80146f4:	20000430 	.word	0x20000430
				if (us_cmap[y][x] == uc_dase) {
 80146f8:	8aba      	ldrh	r2, [r7, #20]
 80146fa:	8afb      	ldrh	r3, [r7, #22]
 80146fc:	49a0      	ldr	r1, [pc, #640]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 80146fe:	0152      	lsls	r2, r2, #5
 8014700:	4413      	add	r3, r2
 8014702:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014706:	8a3a      	ldrh	r2, [r7, #16]
 8014708:	429a      	cmp	r2, r3
 801470a:	f040 81b4 	bne.w	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
					uc_wallData = g_sysMap[y][x];
 801470e:	8aba      	ldrh	r2, [r7, #20]
 8014710:	8afb      	ldrh	r3, [r7, #22]
 8014712:	499c      	ldr	r1, [pc, #624]	; (8014984 <MAP_makeContourMap_dijkstra_modoki+0x44c>)
 8014714:	0152      	lsls	r2, r2, #5
 8014716:	440a      	add	r2, r1
 8014718:	4413      	add	r3, r2
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	72fb      	strb	r3, [r7, #11]
					if (uc_max_x+1 < x) break;
 801471e:	4b9a      	ldr	r3, [pc, #616]	; (8014988 <MAP_makeContourMap_dijkstra_modoki+0x450>)
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	1c5a      	adds	r2, r3, #1
 8014724:	8afb      	ldrh	r3, [r7, #22]
 8014726:	429a      	cmp	r2, r3
 8014728:	f2c0 81b5 	blt.w	8014a96 <MAP_makeContourMap_dijkstra_modoki+0x55e>
					/* 探索走行 */
					if (SEARCH == en_type) {
 801472c:	797b      	ldrb	r3, [r7, #5]
 801472e:	2b00      	cmp	r3, #0
 8014730:	f040 8084 	bne.w	801483c <MAP_makeContourMap_dijkstra_modoki+0x304>
						if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8014734:	7afb      	ldrb	r3, [r7, #11]
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	2b00      	cmp	r3, #0
 801473c:	d11a      	bne.n	8014774 <MAP_makeContourMap_dijkstra_modoki+0x23c>
 801473e:	8abb      	ldrh	r3, [r7, #20]
 8014740:	2b1f      	cmp	r3, #31
 8014742:	d017      	beq.n	8014774 <MAP_makeContourMap_dijkstra_modoki+0x23c>
							if (us_cmap[y + 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8014744:	8abb      	ldrh	r3, [r7, #20]
 8014746:	1c5a      	adds	r2, r3, #1
 8014748:	8afb      	ldrh	r3, [r7, #22]
 801474a:	498d      	ldr	r1, [pc, #564]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801474c:	0152      	lsls	r2, r2, #5
 801474e:	4413      	add	r3, r2
 8014750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014754:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014758:	4293      	cmp	r3, r2
 801475a:	d10b      	bne.n	8014774 <MAP_makeContourMap_dijkstra_modoki+0x23c>
								us_cmap[y + 1][x] = uc_new;
 801475c:	8abb      	ldrh	r3, [r7, #20]
 801475e:	1c5a      	adds	r2, r3, #1
 8014760:	8afb      	ldrh	r3, [r7, #22]
 8014762:	4987      	ldr	r1, [pc, #540]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8014764:	0152      	lsls	r2, r2, #5
 8014766:	4413      	add	r3, r2
 8014768:	89fa      	ldrh	r2, [r7, #14]
 801476a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801476e:	89bb      	ldrh	r3, [r7, #12]
 8014770:	3301      	adds	r3, #1
 8014772:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8014774:	7afb      	ldrb	r3, [r7, #11]
 8014776:	f003 0302 	and.w	r3, r3, #2
 801477a:	2b00      	cmp	r3, #0
 801477c:	d11a      	bne.n	80147b4 <MAP_makeContourMap_dijkstra_modoki+0x27c>
 801477e:	8afb      	ldrh	r3, [r7, #22]
 8014780:	2b1f      	cmp	r3, #31
 8014782:	d017      	beq.n	80147b4 <MAP_makeContourMap_dijkstra_modoki+0x27c>
							if (us_cmap[y][x + 1] == MAP_SMAP_MAX_VAL - 1) {
 8014784:	8aba      	ldrh	r2, [r7, #20]
 8014786:	8afb      	ldrh	r3, [r7, #22]
 8014788:	3301      	adds	r3, #1
 801478a:	497d      	ldr	r1, [pc, #500]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801478c:	0152      	lsls	r2, r2, #5
 801478e:	4413      	add	r3, r2
 8014790:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014794:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014798:	4293      	cmp	r3, r2
 801479a:	d10b      	bne.n	80147b4 <MAP_makeContourMap_dijkstra_modoki+0x27c>
								us_cmap[y][x + 1] = uc_new;
 801479c:	8aba      	ldrh	r2, [r7, #20]
 801479e:	8afb      	ldrh	r3, [r7, #22]
 80147a0:	3301      	adds	r3, #1
 80147a2:	4977      	ldr	r1, [pc, #476]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 80147a4:	0152      	lsls	r2, r2, #5
 80147a6:	4413      	add	r3, r2
 80147a8:	89fa      	ldrh	r2, [r7, #14]
 80147aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80147ae:	89bb      	ldrh	r3, [r7, #12]
 80147b0:	3301      	adds	r3, #1
 80147b2:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 80147b4:	7afb      	ldrb	r3, [r7, #11]
 80147b6:	f003 0304 	and.w	r3, r3, #4
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d11a      	bne.n	80147f4 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
 80147be:	8abb      	ldrh	r3, [r7, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d017      	beq.n	80147f4 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
							if (us_cmap[y - 1][x] == MAP_SMAP_MAX_VAL - 1) {
 80147c4:	8abb      	ldrh	r3, [r7, #20]
 80147c6:	1e5a      	subs	r2, r3, #1
 80147c8:	8afb      	ldrh	r3, [r7, #22]
 80147ca:	496d      	ldr	r1, [pc, #436]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 80147cc:	0152      	lsls	r2, r2, #5
 80147ce:	4413      	add	r3, r2
 80147d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80147d4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80147d8:	4293      	cmp	r3, r2
 80147da:	d10b      	bne.n	80147f4 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
								us_cmap[y - 1][x] = uc_new;
 80147dc:	8abb      	ldrh	r3, [r7, #20]
 80147de:	1e5a      	subs	r2, r3, #1
 80147e0:	8afb      	ldrh	r3, [r7, #22]
 80147e2:	4967      	ldr	r1, [pc, #412]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 80147e4:	0152      	lsls	r2, r2, #5
 80147e6:	4413      	add	r3, r2
 80147e8:	89fa      	ldrh	r2, [r7, #14]
 80147ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80147ee:	89bb      	ldrh	r3, [r7, #12]
 80147f0:	3301      	adds	r3, #1
 80147f2:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 80147f4:	7afb      	ldrb	r3, [r7, #11]
 80147f6:	f003 0308 	and.w	r3, r3, #8
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	f040 813b 	bne.w	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 8014800:	8afb      	ldrh	r3, [r7, #22]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 8137 	beq.w	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if (us_cmap[y][x - 1] == MAP_SMAP_MAX_VAL - 1) {
 8014808:	8aba      	ldrh	r2, [r7, #20]
 801480a:	8afb      	ldrh	r3, [r7, #22]
 801480c:	3b01      	subs	r3, #1
 801480e:	495c      	ldr	r1, [pc, #368]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8014810:	0152      	lsls	r2, r2, #5
 8014812:	4413      	add	r3, r2
 8014814:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014818:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801481c:	4293      	cmp	r3, r2
 801481e:	f040 812a 	bne.w	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_cmap[y][x - 1] = uc_new;
 8014822:	8aba      	ldrh	r2, [r7, #20]
 8014824:	8afb      	ldrh	r3, [r7, #22]
 8014826:	3b01      	subs	r3, #1
 8014828:	4955      	ldr	r1, [pc, #340]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801482a:	0152      	lsls	r2, r2, #5
 801482c:	4413      	add	r3, r2
 801482e:	89fa      	ldrh	r2, [r7, #14]
 8014830:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8014834:	89bb      	ldrh	r3, [r7, #12]
 8014836:	3301      	adds	r3, #1
 8014838:	81bb      	strh	r3, [r7, #12]
 801483a:	e11c      	b.n	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							}
						}
					}
					/* 最短走行 */
					else {
						if (((uc_wallData & 0x11) == 0x10) && (y != (MAP_Y_SIZE - 1))) {
 801483c:	7afb      	ldrb	r3, [r7, #11]
 801483e:	f003 0311 	and.w	r3, r3, #17
 8014842:	2b10      	cmp	r3, #16
 8014844:	d13f      	bne.n	80148c6 <MAP_makeContourMap_dijkstra_modoki+0x38e>
 8014846:	8abb      	ldrh	r3, [r7, #20]
 8014848:	2b1f      	cmp	r3, #31
 801484a:	d03c      	beq.n	80148c6 <MAP_makeContourMap_dijkstra_modoki+0x38e>
							if((g_Map_direction[y][x]&0x10) == 0x10){
 801484c:	8aba      	ldrh	r2, [r7, #20]
 801484e:	8afb      	ldrh	r3, [r7, #22]
 8014850:	494e      	ldr	r1, [pc, #312]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8014852:	0152      	lsls	r2, r2, #5
 8014854:	440a      	add	r2, r1
 8014856:	4413      	add	r3, r2
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	f003 0310 	and.w	r3, r3, #16
 801485e:	2b00      	cmp	r3, #0
 8014860:	d003      	beq.n	801486a <MAP_makeContourMap_dijkstra_modoki+0x332>
								uc_new = uc_dase + 1;
 8014862:	8a3b      	ldrh	r3, [r7, #16]
 8014864:	3301      	adds	r3, #1
 8014866:	81fb      	strh	r3, [r7, #14]
 8014868:	e002      	b.n	8014870 <MAP_makeContourMap_dijkstra_modoki+0x338>
							}else{
								uc_new = uc_dase + 2;
 801486a:	8a3b      	ldrh	r3, [r7, #16]
 801486c:	3302      	adds	r3, #2
 801486e:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y + 1][x] > uc_new) {
 8014870:	8abb      	ldrh	r3, [r7, #20]
 8014872:	1c5a      	adds	r2, r3, #1
 8014874:	8afb      	ldrh	r3, [r7, #22]
 8014876:	4942      	ldr	r1, [pc, #264]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8014878:	0152      	lsls	r2, r2, #5
 801487a:	4413      	add	r3, r2
 801487c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014880:	89fa      	ldrh	r2, [r7, #14]
 8014882:	429a      	cmp	r2, r3
 8014884:	d21f      	bcs.n	80148c6 <MAP_makeContourMap_dijkstra_modoki+0x38e>
								us_cmap[y + 1][x] = uc_new;
 8014886:	8abb      	ldrh	r3, [r7, #20]
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	8afb      	ldrh	r3, [r7, #22]
 801488c:	493c      	ldr	r1, [pc, #240]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 801488e:	0152      	lsls	r2, r2, #5
 8014890:	4413      	add	r3, r2
 8014892:	89fa      	ldrh	r2, [r7, #14]
 8014894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y+1][x] |= 0x10;
 8014898:	8abb      	ldrh	r3, [r7, #20]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	8afb      	ldrh	r3, [r7, #22]
 801489e:	493b      	ldr	r1, [pc, #236]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 80148a0:	0152      	lsls	r2, r2, #5
 80148a2:	440a      	add	r2, r1
 80148a4:	4413      	add	r3, r2
 80148a6:	7819      	ldrb	r1, [r3, #0]
 80148a8:	8abb      	ldrh	r3, [r7, #20]
 80148aa:	1c5a      	adds	r2, r3, #1
 80148ac:	8afb      	ldrh	r3, [r7, #22]
 80148ae:	f041 0110 	orr.w	r1, r1, #16
 80148b2:	b2c8      	uxtb	r0, r1
 80148b4:	4935      	ldr	r1, [pc, #212]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 80148b6:	0152      	lsls	r2, r2, #5
 80148b8:	440a      	add	r2, r1
 80148ba:	4413      	add	r3, r2
 80148bc:	4602      	mov	r2, r0
 80148be:	701a      	strb	r2, [r3, #0]
								uc_level++;
 80148c0:	89bb      	ldrh	r3, [r7, #12]
 80148c2:	3301      	adds	r3, #1
 80148c4:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x22) == 0x20) && (x != (MAP_X_SIZE - 1))) {
 80148c6:	7afb      	ldrb	r3, [r7, #11]
 80148c8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80148cc:	2b20      	cmp	r3, #32
 80148ce:	d13f      	bne.n	8014950 <MAP_makeContourMap_dijkstra_modoki+0x418>
 80148d0:	8afb      	ldrh	r3, [r7, #22]
 80148d2:	2b1f      	cmp	r3, #31
 80148d4:	d03c      	beq.n	8014950 <MAP_makeContourMap_dijkstra_modoki+0x418>
							if((g_Map_direction[y][x]&0x40) == 0x40){
 80148d6:	8aba      	ldrh	r2, [r7, #20]
 80148d8:	8afb      	ldrh	r3, [r7, #22]
 80148da:	492c      	ldr	r1, [pc, #176]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 80148dc:	0152      	lsls	r2, r2, #5
 80148de:	440a      	add	r2, r1
 80148e0:	4413      	add	r3, r2
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d003      	beq.n	80148f4 <MAP_makeContourMap_dijkstra_modoki+0x3bc>
								uc_new = uc_dase + 1;
 80148ec:	8a3b      	ldrh	r3, [r7, #16]
 80148ee:	3301      	adds	r3, #1
 80148f0:	81fb      	strh	r3, [r7, #14]
 80148f2:	e002      	b.n	80148fa <MAP_makeContourMap_dijkstra_modoki+0x3c2>
							}else{
								uc_new = uc_dase + 2;
 80148f4:	8a3b      	ldrh	r3, [r7, #16]
 80148f6:	3302      	adds	r3, #2
 80148f8:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y][x + 1] > uc_new) {
 80148fa:	8aba      	ldrh	r2, [r7, #20]
 80148fc:	8afb      	ldrh	r3, [r7, #22]
 80148fe:	3301      	adds	r3, #1
 8014900:	491f      	ldr	r1, [pc, #124]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8014902:	0152      	lsls	r2, r2, #5
 8014904:	4413      	add	r3, r2
 8014906:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801490a:	89fa      	ldrh	r2, [r7, #14]
 801490c:	429a      	cmp	r2, r3
 801490e:	d21f      	bcs.n	8014950 <MAP_makeContourMap_dijkstra_modoki+0x418>
								us_cmap[y][x + 1] = uc_new;
 8014910:	8aba      	ldrh	r2, [r7, #20]
 8014912:	8afb      	ldrh	r3, [r7, #22]
 8014914:	3301      	adds	r3, #1
 8014916:	491a      	ldr	r1, [pc, #104]	; (8014980 <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8014918:	0152      	lsls	r2, r2, #5
 801491a:	4413      	add	r3, r2
 801491c:	89fa      	ldrh	r2, [r7, #14]
 801491e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y][x+1] |= 0x40;
 8014922:	8aba      	ldrh	r2, [r7, #20]
 8014924:	8afb      	ldrh	r3, [r7, #22]
 8014926:	3301      	adds	r3, #1
 8014928:	4918      	ldr	r1, [pc, #96]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 801492a:	0152      	lsls	r2, r2, #5
 801492c:	440a      	add	r2, r1
 801492e:	4413      	add	r3, r2
 8014930:	7819      	ldrb	r1, [r3, #0]
 8014932:	8aba      	ldrh	r2, [r7, #20]
 8014934:	8afb      	ldrh	r3, [r7, #22]
 8014936:	3301      	adds	r3, #1
 8014938:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801493c:	b2c8      	uxtb	r0, r1
 801493e:	4913      	ldr	r1, [pc, #76]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8014940:	0152      	lsls	r2, r2, #5
 8014942:	440a      	add	r2, r1
 8014944:	4413      	add	r3, r2
 8014946:	4602      	mov	r2, r0
 8014948:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801494a:	89bb      	ldrh	r3, [r7, #12]
 801494c:	3301      	adds	r3, #1
 801494e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x44) == 0x40) && (y != 0)) {
 8014950:	7afb      	ldrb	r3, [r7, #11]
 8014952:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014956:	2b40      	cmp	r3, #64	; 0x40
 8014958:	d148      	bne.n	80149ec <MAP_makeContourMap_dijkstra_modoki+0x4b4>
 801495a:	8abb      	ldrh	r3, [r7, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d045      	beq.n	80149ec <MAP_makeContourMap_dijkstra_modoki+0x4b4>
							if((g_Map_direction[y][x]&0x01) == 0x01){
 8014960:	8aba      	ldrh	r2, [r7, #20]
 8014962:	8afb      	ldrh	r3, [r7, #22]
 8014964:	4909      	ldr	r1, [pc, #36]	; (801498c <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8014966:	0152      	lsls	r2, r2, #5
 8014968:	440a      	add	r2, r1
 801496a:	4413      	add	r3, r2
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	f003 0301 	and.w	r3, r3, #1
 8014972:	2b00      	cmp	r3, #0
 8014974:	d00c      	beq.n	8014990 <MAP_makeContourMap_dijkstra_modoki+0x458>
								uc_new = uc_dase + 1;
 8014976:	8a3b      	ldrh	r3, [r7, #16]
 8014978:	3301      	adds	r3, #1
 801497a:	81fb      	strh	r3, [r7, #14]
 801497c:	e00b      	b.n	8014996 <MAP_makeContourMap_dijkstra_modoki+0x45e>
 801497e:	bf00      	nop
 8014980:	20000c78 	.word	0x20000c78
 8014984:	20000854 	.word	0x20000854
 8014988:	2000001a 	.word	0x2000001a
 801498c:	20000430 	.word	0x20000430
							}else{
								uc_new = uc_dase + 2;
 8014990:	8a3b      	ldrh	r3, [r7, #16]
 8014992:	3302      	adds	r3, #2
 8014994:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y - 1][x] > uc_new) {
 8014996:	8abb      	ldrh	r3, [r7, #20]
 8014998:	1e5a      	subs	r2, r3, #1
 801499a:	8afb      	ldrh	r3, [r7, #22]
 801499c:	4949      	ldr	r1, [pc, #292]	; (8014ac4 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 801499e:	0152      	lsls	r2, r2, #5
 80149a0:	4413      	add	r3, r2
 80149a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149a6:	89fa      	ldrh	r2, [r7, #14]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d21f      	bcs.n	80149ec <MAP_makeContourMap_dijkstra_modoki+0x4b4>
								us_cmap[y - 1][x] = uc_new;
 80149ac:	8abb      	ldrh	r3, [r7, #20]
 80149ae:	1e5a      	subs	r2, r3, #1
 80149b0:	8afb      	ldrh	r3, [r7, #22]
 80149b2:	4944      	ldr	r1, [pc, #272]	; (8014ac4 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 80149b4:	0152      	lsls	r2, r2, #5
 80149b6:	4413      	add	r3, r2
 80149b8:	89fa      	ldrh	r2, [r7, #14]
 80149ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y-1][x] |= 0x01;
 80149be:	8abb      	ldrh	r3, [r7, #20]
 80149c0:	1e5a      	subs	r2, r3, #1
 80149c2:	8afb      	ldrh	r3, [r7, #22]
 80149c4:	4940      	ldr	r1, [pc, #256]	; (8014ac8 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 80149c6:	0152      	lsls	r2, r2, #5
 80149c8:	440a      	add	r2, r1
 80149ca:	4413      	add	r3, r2
 80149cc:	7819      	ldrb	r1, [r3, #0]
 80149ce:	8abb      	ldrh	r3, [r7, #20]
 80149d0:	1e5a      	subs	r2, r3, #1
 80149d2:	8afb      	ldrh	r3, [r7, #22]
 80149d4:	f041 0101 	orr.w	r1, r1, #1
 80149d8:	b2c8      	uxtb	r0, r1
 80149da:	493b      	ldr	r1, [pc, #236]	; (8014ac8 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 80149dc:	0152      	lsls	r2, r2, #5
 80149de:	440a      	add	r2, r1
 80149e0:	4413      	add	r3, r2
 80149e2:	4602      	mov	r2, r0
 80149e4:	701a      	strb	r2, [r3, #0]
								uc_level++;
 80149e6:	89bb      	ldrh	r3, [r7, #12]
 80149e8:	3301      	adds	r3, #1
 80149ea:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x88) == 0x80) && (x != 0)) {
 80149ec:	7afb      	ldrb	r3, [r7, #11]
 80149ee:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80149f2:	2b80      	cmp	r3, #128	; 0x80
 80149f4:	d13f      	bne.n	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 80149f6:	8afb      	ldrh	r3, [r7, #22]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d03c      	beq.n	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if((g_Map_direction[y][x]&0x04) == 0x04){
 80149fc:	8aba      	ldrh	r2, [r7, #20]
 80149fe:	8afb      	ldrh	r3, [r7, #22]
 8014a00:	4931      	ldr	r1, [pc, #196]	; (8014ac8 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8014a02:	0152      	lsls	r2, r2, #5
 8014a04:	440a      	add	r2, r1
 8014a06:	4413      	add	r3, r2
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	f003 0304 	and.w	r3, r3, #4
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d003      	beq.n	8014a1a <MAP_makeContourMap_dijkstra_modoki+0x4e2>
								uc_new = uc_dase + 1;
 8014a12:	8a3b      	ldrh	r3, [r7, #16]
 8014a14:	3301      	adds	r3, #1
 8014a16:	81fb      	strh	r3, [r7, #14]
 8014a18:	e002      	b.n	8014a20 <MAP_makeContourMap_dijkstra_modoki+0x4e8>
							}else{
								uc_new = uc_dase + 2;
 8014a1a:	8a3b      	ldrh	r3, [r7, #16]
 8014a1c:	3302      	adds	r3, #2
 8014a1e:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y][x - 1] > uc_new) {
 8014a20:	8aba      	ldrh	r2, [r7, #20]
 8014a22:	8afb      	ldrh	r3, [r7, #22]
 8014a24:	3b01      	subs	r3, #1
 8014a26:	4927      	ldr	r1, [pc, #156]	; (8014ac4 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8014a28:	0152      	lsls	r2, r2, #5
 8014a2a:	4413      	add	r3, r2
 8014a2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a30:	89fa      	ldrh	r2, [r7, #14]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d21f      	bcs.n	8014a76 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_cmap[y][x - 1] = uc_new;
 8014a36:	8aba      	ldrh	r2, [r7, #20]
 8014a38:	8afb      	ldrh	r3, [r7, #22]
 8014a3a:	3b01      	subs	r3, #1
 8014a3c:	4921      	ldr	r1, [pc, #132]	; (8014ac4 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8014a3e:	0152      	lsls	r2, r2, #5
 8014a40:	4413      	add	r3, r2
 8014a42:	89fa      	ldrh	r2, [r7, #14]
 8014a44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y][x-1] |= 0x04;
 8014a48:	8aba      	ldrh	r2, [r7, #20]
 8014a4a:	8afb      	ldrh	r3, [r7, #22]
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	491e      	ldr	r1, [pc, #120]	; (8014ac8 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8014a50:	0152      	lsls	r2, r2, #5
 8014a52:	440a      	add	r2, r1
 8014a54:	4413      	add	r3, r2
 8014a56:	7819      	ldrb	r1, [r3, #0]
 8014a58:	8aba      	ldrh	r2, [r7, #20]
 8014a5a:	8afb      	ldrh	r3, [r7, #22]
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	f041 0104 	orr.w	r1, r1, #4
 8014a62:	b2c8      	uxtb	r0, r1
 8014a64:	4918      	ldr	r1, [pc, #96]	; (8014ac8 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8014a66:	0152      	lsls	r2, r2, #5
 8014a68:	440a      	add	r2, r1
 8014a6a:	4413      	add	r3, r2
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	701a      	strb	r2, [r3, #0]
								uc_level++;
 8014a70:	89bb      	ldrh	r3, [r7, #12]
 8014a72:	3301      	adds	r3, #1
 8014a74:	81bb      	strh	r3, [r7, #12]
							}
						}
					}
				}
				if(uc_dase != 4095)uc_level++;
 8014a76:	8a3b      	ldrh	r3, [r7, #16]
 8014a78:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d002      	beq.n	8014a86 <MAP_makeContourMap_dijkstra_modoki+0x54e>
 8014a80:	89bb      	ldrh	r3, [r7, #12]
 8014a82:	3301      	adds	r3, #1
 8014a84:	81bb      	strh	r3, [r7, #12]
			for (x = 0; x < MAP_X_SIZE; x++) {
 8014a86:	8afb      	ldrh	r3, [r7, #22]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	82fb      	strh	r3, [r7, #22]
 8014a8c:	8afb      	ldrh	r3, [r7, #22]
 8014a8e:	2b1f      	cmp	r3, #31
 8014a90:	f67f ae32 	bls.w	80146f8 <MAP_makeContourMap_dijkstra_modoki+0x1c0>
 8014a94:	e000      	b.n	8014a98 <MAP_makeContourMap_dijkstra_modoki+0x560>
					if (uc_max_x+1 < x) break;
 8014a96:	bf00      	nop
		for (y = 0; y < MAP_Y_SIZE; y++) {
 8014a98:	8abb      	ldrh	r3, [r7, #20]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	82bb      	strh	r3, [r7, #20]
 8014a9e:	8abb      	ldrh	r3, [r7, #20]
 8014aa0:	2b1f      	cmp	r3, #31
 8014aa2:	f67f ae11 	bls.w	80146c8 <MAP_makeContourMap_dijkstra_modoki+0x190>
 8014aa6:	e000      	b.n	8014aaa <MAP_makeContourMap_dijkstra_modoki+0x572>
			if (uc_max_y+1 < y) break;
 8014aa8:	bf00      	nop
			}
		}
		uc_dase = uc_dase + 1;
 8014aaa:	8a3b      	ldrh	r3, [r7, #16]
 8014aac:	3301      	adds	r3, #1
 8014aae:	823b      	strh	r3, [r7, #16]
	} while (uc_level != 0);
 8014ab0:	89bb      	ldrh	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f47f ae00 	bne.w	80146b8 <MAP_makeContourMap_dijkstra_modoki+0x180>

}
 8014ab8:	bf00      	nop
 8014aba:	bf00      	nop
 8014abc:	3718      	adds	r7, #24
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	20000c78 	.word	0x20000c78
 8014ac8:	20000430 	.word	0x20000430

08014acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8014acc:	480d      	ldr	r0, [pc, #52]	; (8014b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8014ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014ad0:	480d      	ldr	r0, [pc, #52]	; (8014b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8014ad2:	490e      	ldr	r1, [pc, #56]	; (8014b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8014ad4:	4a0e      	ldr	r2, [pc, #56]	; (8014b10 <LoopForever+0xe>)
  movs r3, #0
 8014ad6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8014ad8:	e002      	b.n	8014ae0 <LoopCopyDataInit>

08014ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014ade:	3304      	adds	r3, #4

08014ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014ae4:	d3f9      	bcc.n	8014ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014ae6:	4a0b      	ldr	r2, [pc, #44]	; (8014b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8014ae8:	4c0b      	ldr	r4, [pc, #44]	; (8014b18 <LoopForever+0x16>)
  movs r3, #0
 8014aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014aec:	e001      	b.n	8014af2 <LoopFillZerobss>

08014aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014af0:	3204      	adds	r2, #4

08014af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014af4:	d3fb      	bcc.n	8014aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8014af6:	f7ef fc73 	bl	80043e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014afa:	f002 fe39 	bl	8017770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8014afe:	f7ed fd51 	bl	80025a4 <main>

08014b02 <LoopForever>:

LoopForever:
    b LoopForever
 8014b02:	e7fe      	b.n	8014b02 <LoopForever>
  ldr   r0, =_estack
 8014b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8014b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014b0c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8014b10:	0801d008 	.word	0x0801d008
  ldr r2, =_sbss
 8014b14:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8014b18:	2000e754 	.word	0x2000e754

08014b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8014b1c:	e7fe      	b.n	8014b1c <ADC1_2_IRQHandler>

08014b1e <LL_ADC_REG_SetSequencerLength>:
{
 8014b1e:	b480      	push	{r7}
 8014b20:	b083      	sub	sp, #12
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b2c:	f023 020f 	bic.w	r2, r3, #15
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	431a      	orrs	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014b38:	bf00      	nop
 8014b3a:	370c      	adds	r7, #12
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <LL_ADC_IsEnabled>:
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	689b      	ldr	r3, [r3, #8]
 8014b50:	f003 0301 	and.w	r3, r3, #1
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d101      	bne.n	8014b5c <LL_ADC_IsEnabled+0x18>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e000      	b.n	8014b5e <LL_ADC_IsEnabled+0x1a>
 8014b5c:	2300      	movs	r3, #0
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	370c      	adds	r7, #12
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr
	...

08014b6c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8014b6c:	b590      	push	{r4, r7, lr}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8014b76:	2300      	movs	r3, #0
 8014b78:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4a27      	ldr	r2, [pc, #156]	; (8014c1c <LL_ADC_CommonInit+0xb0>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d10f      	bne.n	8014ba2 <LL_ADC_CommonInit+0x36>
 8014b82:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8014b86:	f7ff ffdd 	bl	8014b44 <LL_ADC_IsEnabled>
 8014b8a:	4604      	mov	r4, r0
 8014b8c:	4824      	ldr	r0, [pc, #144]	; (8014c20 <LL_ADC_CommonInit+0xb4>)
 8014b8e:	f7ff ffd9 	bl	8014b44 <LL_ADC_IsEnabled>
 8014b92:	4603      	mov	r3, r0
 8014b94:	4323      	orrs	r3, r4
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	bf0c      	ite	eq
 8014b9a:	2301      	moveq	r3, #1
 8014b9c:	2300      	movne	r3, #0
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	e012      	b.n	8014bc8 <LL_ADC_CommonInit+0x5c>
 8014ba2:	4820      	ldr	r0, [pc, #128]	; (8014c24 <LL_ADC_CommonInit+0xb8>)
 8014ba4:	f7ff ffce 	bl	8014b44 <LL_ADC_IsEnabled>
 8014ba8:	4604      	mov	r4, r0
 8014baa:	481f      	ldr	r0, [pc, #124]	; (8014c28 <LL_ADC_CommonInit+0xbc>)
 8014bac:	f7ff ffca 	bl	8014b44 <LL_ADC_IsEnabled>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	431c      	orrs	r4, r3
 8014bb4:	481d      	ldr	r0, [pc, #116]	; (8014c2c <LL_ADC_CommonInit+0xc0>)
 8014bb6:	f7ff ffc5 	bl	8014b44 <LL_ADC_IsEnabled>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	4323      	orrs	r3, r4
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	bf0c      	ite	eq
 8014bc2:	2301      	moveq	r3, #1
 8014bc4:	2300      	movne	r3, #0
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d020      	beq.n	8014c0e <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d012      	beq.n	8014bfa <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	689a      	ldr	r2, [r3, #8]
 8014bd8:	4b15      	ldr	r3, [pc, #84]	; (8014c30 <LL_ADC_CommonInit+0xc4>)
 8014bda:	4013      	ands	r3, r2
 8014bdc:	683a      	ldr	r2, [r7, #0]
 8014bde:	6811      	ldr	r1, [r2, #0]
 8014be0:	683a      	ldr	r2, [r7, #0]
 8014be2:	6852      	ldr	r2, [r2, #4]
 8014be4:	4311      	orrs	r1, r2
 8014be6:	683a      	ldr	r2, [r7, #0]
 8014be8:	6892      	ldr	r2, [r2, #8]
 8014bea:	4311      	orrs	r1, r2
 8014bec:	683a      	ldr	r2, [r7, #0]
 8014bee:	68d2      	ldr	r2, [r2, #12]
 8014bf0:	430a      	orrs	r2, r1
 8014bf2:	431a      	orrs	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	609a      	str	r2, [r3, #8]
 8014bf8:	e00b      	b.n	8014c12 <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	689a      	ldr	r2, [r3, #8]
 8014bfe:	4b0c      	ldr	r3, [pc, #48]	; (8014c30 <LL_ADC_CommonInit+0xc4>)
 8014c00:	4013      	ands	r3, r2
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	6812      	ldr	r2, [r2, #0]
 8014c06:	431a      	orrs	r2, r3
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	609a      	str	r2, [r3, #8]
 8014c0c:	e001      	b.n	8014c12 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8014c0e:	2301      	movs	r3, #1
 8014c10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3714      	adds	r7, #20
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd90      	pop	{r4, r7, pc}
 8014c1c:	50000300 	.word	0x50000300
 8014c20:	50000100 	.word	0x50000100
 8014c24:	50000400 	.word	0x50000400
 8014c28:	50000500 	.word	0x50000500
 8014c2c:	50000600 	.word	0x50000600
 8014c30:	ffc030e0 	.word	0xffc030e0

08014c34 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f7ff ff7e 	bl	8014b44 <LL_ADC_IsEnabled>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d111      	bne.n	8014c72 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014c56:	f023 0318 	bic.w	r3, r3, #24
 8014c5a:	683a      	ldr	r2, [r7, #0]
 8014c5c:	6811      	ldr	r1, [r2, #0]
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	6852      	ldr	r2, [r2, #4]
 8014c62:	4311      	orrs	r1, r2
 8014c64:	683a      	ldr	r2, [r7, #0]
 8014c66:	6892      	ldr	r2, [r2, #8]
 8014c68:	430a      	orrs	r2, r1
 8014c6a:	431a      	orrs	r2, r3
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	60da      	str	r2, [r3, #12]
 8014c70:	e001      	b.n	8014c76 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8014c72:	2301      	movs	r3, #1
 8014c74:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7ff ff58 	bl	8014b44 <LL_ADC_IsEnabled>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d132      	bne.n	8014d00 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d015      	beq.n	8014cce <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	68da      	ldr	r2, [r3, #12]
 8014ca6:	4b1a      	ldr	r3, [pc, #104]	; (8014d10 <LL_ADC_REG_Init+0x90>)
 8014ca8:	4013      	ands	r3, r2
 8014caa:	683a      	ldr	r2, [r7, #0]
 8014cac:	6811      	ldr	r1, [r2, #0]
 8014cae:	683a      	ldr	r2, [r7, #0]
 8014cb0:	6892      	ldr	r2, [r2, #8]
 8014cb2:	4311      	orrs	r1, r2
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	68d2      	ldr	r2, [r2, #12]
 8014cb8:	4311      	orrs	r1, r2
 8014cba:	683a      	ldr	r2, [r7, #0]
 8014cbc:	6912      	ldr	r2, [r2, #16]
 8014cbe:	4311      	orrs	r1, r2
 8014cc0:	683a      	ldr	r2, [r7, #0]
 8014cc2:	6952      	ldr	r2, [r2, #20]
 8014cc4:	430a      	orrs	r2, r1
 8014cc6:	431a      	orrs	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	60da      	str	r2, [r3, #12]
 8014ccc:	e011      	b.n	8014cf2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	68da      	ldr	r2, [r3, #12]
 8014cd2:	4b0f      	ldr	r3, [pc, #60]	; (8014d10 <LL_ADC_REG_Init+0x90>)
 8014cd4:	4013      	ands	r3, r2
 8014cd6:	683a      	ldr	r2, [r7, #0]
 8014cd8:	6811      	ldr	r1, [r2, #0]
 8014cda:	683a      	ldr	r2, [r7, #0]
 8014cdc:	68d2      	ldr	r2, [r2, #12]
 8014cde:	4311      	orrs	r1, r2
 8014ce0:	683a      	ldr	r2, [r7, #0]
 8014ce2:	6912      	ldr	r2, [r2, #16]
 8014ce4:	4311      	orrs	r1, r2
 8014ce6:	683a      	ldr	r2, [r7, #0]
 8014ce8:	6952      	ldr	r2, [r2, #20]
 8014cea:	430a      	orrs	r2, r1
 8014cec:	431a      	orrs	r2, r3
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff ff10 	bl	8014b1e <LL_ADC_REG_SetSequencerLength>
 8014cfe:	e001      	b.n	8014d04 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8014d00:	2301      	movs	r3, #1
 8014d02:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3710      	adds	r7, #16
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	fff0c01c 	.word	0xfff0c01c

08014d14 <LL_GPIO_SetPinMode>:
{
 8014d14:	b480      	push	{r7}
 8014d16:	b08b      	sub	sp, #44	; 0x2c
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	60b9      	str	r1, [r7, #8]
 8014d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	fa93 f3a3 	rbit	r3, r3
 8014d2e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d101      	bne.n	8014d3e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8014d3a:	2320      	movs	r3, #32
 8014d3c:	e003      	b.n	8014d46 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	fab3 f383 	clz	r3, r3
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	005b      	lsls	r3, r3, #1
 8014d48:	2103      	movs	r1, #3
 8014d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8014d4e:	43db      	mvns	r3, r3
 8014d50:	401a      	ands	r2, r3
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014d56:	6a3b      	ldr	r3, [r7, #32]
 8014d58:	fa93 f3a3 	rbit	r3, r3
 8014d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8014d5e:	69fb      	ldr	r3, [r7, #28]
 8014d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d101      	bne.n	8014d6c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8014d68:	2320      	movs	r3, #32
 8014d6a:	e003      	b.n	8014d74 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6e:	fab3 f383 	clz	r3, r3
 8014d72:	b2db      	uxtb	r3, r3
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	6879      	ldr	r1, [r7, #4]
 8014d78:	fa01 f303 	lsl.w	r3, r1, r3
 8014d7c:	431a      	orrs	r2, r3
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	601a      	str	r2, [r3, #0]
}
 8014d82:	bf00      	nop
 8014d84:	372c      	adds	r7, #44	; 0x2c
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr

08014d8e <LL_GPIO_SetPinOutputType>:
{
 8014d8e:	b480      	push	{r7}
 8014d90:	b085      	sub	sp, #20
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	60f8      	str	r0, [r7, #12]
 8014d96:	60b9      	str	r1, [r7, #8]
 8014d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	685a      	ldr	r2, [r3, #4]
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	43db      	mvns	r3, r3
 8014da2:	401a      	ands	r2, r3
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	6879      	ldr	r1, [r7, #4]
 8014da8:	fb01 f303 	mul.w	r3, r1, r3
 8014dac:	431a      	orrs	r2, r3
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	605a      	str	r2, [r3, #4]
}
 8014db2:	bf00      	nop
 8014db4:	3714      	adds	r7, #20
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr

08014dbe <LL_GPIO_SetPinSpeed>:
{
 8014dbe:	b480      	push	{r7}
 8014dc0:	b08b      	sub	sp, #44	; 0x2c
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	60f8      	str	r0, [r7, #12]
 8014dc6:	60b9      	str	r1, [r7, #8]
 8014dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	689a      	ldr	r2, [r3, #8]
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	fa93 f3a3 	rbit	r3, r3
 8014dd8:	613b      	str	r3, [r7, #16]
  return result;
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d101      	bne.n	8014de8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8014de4:	2320      	movs	r3, #32
 8014de6:	e003      	b.n	8014df0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	fab3 f383 	clz	r3, r3
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	2103      	movs	r1, #3
 8014df4:	fa01 f303 	lsl.w	r3, r1, r3
 8014df8:	43db      	mvns	r3, r3
 8014dfa:	401a      	ands	r2, r3
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e00:	6a3b      	ldr	r3, [r7, #32]
 8014e02:	fa93 f3a3 	rbit	r3, r3
 8014e06:	61fb      	str	r3, [r7, #28]
  return result;
 8014e08:	69fb      	ldr	r3, [r7, #28]
 8014e0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8014e12:	2320      	movs	r3, #32
 8014e14:	e003      	b.n	8014e1e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	fab3 f383 	clz	r3, r3
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	005b      	lsls	r3, r3, #1
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	fa01 f303 	lsl.w	r3, r1, r3
 8014e26:	431a      	orrs	r2, r3
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	609a      	str	r2, [r3, #8]
}
 8014e2c:	bf00      	nop
 8014e2e:	372c      	adds	r7, #44	; 0x2c
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <LL_GPIO_SetPinPull>:
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b08b      	sub	sp, #44	; 0x2c
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	68da      	ldr	r2, [r3, #12]
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	fa93 f3a3 	rbit	r3, r3
 8014e52:	613b      	str	r3, [r7, #16]
  return result;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d101      	bne.n	8014e62 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8014e5e:	2320      	movs	r3, #32
 8014e60:	e003      	b.n	8014e6a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	fab3 f383 	clz	r3, r3
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	005b      	lsls	r3, r3, #1
 8014e6c:	2103      	movs	r1, #3
 8014e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8014e72:	43db      	mvns	r3, r3
 8014e74:	401a      	ands	r2, r3
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014e7a:	6a3b      	ldr	r3, [r7, #32]
 8014e7c:	fa93 f3a3 	rbit	r3, r3
 8014e80:	61fb      	str	r3, [r7, #28]
  return result;
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8014e8c:	2320      	movs	r3, #32
 8014e8e:	e003      	b.n	8014e98 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8014e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e92:	fab3 f383 	clz	r3, r3
 8014e96:	b2db      	uxtb	r3, r3
 8014e98:	005b      	lsls	r3, r3, #1
 8014e9a:	6879      	ldr	r1, [r7, #4]
 8014e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8014ea0:	431a      	orrs	r2, r3
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	60da      	str	r2, [r3, #12]
}
 8014ea6:	bf00      	nop
 8014ea8:	372c      	adds	r7, #44	; 0x2c
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr

08014eb2 <LL_GPIO_SetAFPin_0_7>:
{
 8014eb2:	b480      	push	{r7}
 8014eb4:	b08b      	sub	sp, #44	; 0x2c
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	60f8      	str	r0, [r7, #12]
 8014eba:	60b9      	str	r1, [r7, #8]
 8014ebc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	6a1a      	ldr	r2, [r3, #32]
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	fa93 f3a3 	rbit	r3, r3
 8014ecc:	613b      	str	r3, [r7, #16]
  return result;
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d101      	bne.n	8014edc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8014ed8:	2320      	movs	r3, #32
 8014eda:	e003      	b.n	8014ee4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	fab3 f383 	clz	r3, r3
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	009b      	lsls	r3, r3, #2
 8014ee6:	210f      	movs	r1, #15
 8014ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8014eec:	43db      	mvns	r3, r3
 8014eee:	401a      	ands	r2, r3
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014ef4:	6a3b      	ldr	r3, [r7, #32]
 8014ef6:	fa93 f3a3 	rbit	r3, r3
 8014efa:	61fb      	str	r3, [r7, #28]
  return result;
 8014efc:	69fb      	ldr	r3, [r7, #28]
 8014efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d101      	bne.n	8014f0a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8014f06:	2320      	movs	r3, #32
 8014f08:	e003      	b.n	8014f12 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8014f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0c:	fab3 f383 	clz	r3, r3
 8014f10:	b2db      	uxtb	r3, r3
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	6879      	ldr	r1, [r7, #4]
 8014f16:	fa01 f303 	lsl.w	r3, r1, r3
 8014f1a:	431a      	orrs	r2, r3
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	621a      	str	r2, [r3, #32]
}
 8014f20:	bf00      	nop
 8014f22:	372c      	adds	r7, #44	; 0x2c
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <LL_GPIO_SetAFPin_8_15>:
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b08b      	sub	sp, #44	; 0x2c
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	0a1b      	lsrs	r3, r3, #8
 8014f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	fa93 f3a3 	rbit	r3, r3
 8014f48:	613b      	str	r3, [r7, #16]
  return result;
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d101      	bne.n	8014f58 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8014f54:	2320      	movs	r3, #32
 8014f56:	e003      	b.n	8014f60 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8014f58:	69bb      	ldr	r3, [r7, #24]
 8014f5a:	fab3 f383 	clz	r3, r3
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	210f      	movs	r1, #15
 8014f64:	fa01 f303 	lsl.w	r3, r1, r3
 8014f68:	43db      	mvns	r3, r3
 8014f6a:	401a      	ands	r2, r3
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	0a1b      	lsrs	r3, r3, #8
 8014f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f72:	6a3b      	ldr	r3, [r7, #32]
 8014f74:	fa93 f3a3 	rbit	r3, r3
 8014f78:	61fb      	str	r3, [r7, #28]
  return result;
 8014f7a:	69fb      	ldr	r3, [r7, #28]
 8014f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d101      	bne.n	8014f88 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8014f84:	2320      	movs	r3, #32
 8014f86:	e003      	b.n	8014f90 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8014f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8a:	fab3 f383 	clz	r3, r3
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	6879      	ldr	r1, [r7, #4]
 8014f94:	fa01 f303 	lsl.w	r3, r1, r3
 8014f98:	431a      	orrs	r2, r3
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014f9e:	bf00      	nop
 8014fa0:	372c      	adds	r7, #44	; 0x2c
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8014faa:	b580      	push	{r7, lr}
 8014fac:	b088      	sub	sp, #32
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	6078      	str	r0, [r7, #4]
 8014fb2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	fa93 f3a3 	rbit	r3, r3
 8014fc0:	60fb      	str	r3, [r7, #12]
  return result;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <LL_GPIO_Init+0x26>
    return 32U;
 8014fcc:	2320      	movs	r3, #32
 8014fce:	e003      	b.n	8014fd8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	fab3 f383 	clz	r3, r3
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8014fda:	e048      	b.n	801506e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	2101      	movs	r1, #1
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8014fe8:	4013      	ands	r3, r2
 8014fea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d03a      	beq.n	8015068 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d003      	beq.n	8015002 <LL_GPIO_Init+0x58>
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	2b02      	cmp	r3, #2
 8015000:	d10e      	bne.n	8015020 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	461a      	mov	r2, r3
 8015008:	69b9      	ldr	r1, [r7, #24]
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff fed7 	bl	8014dbe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	6819      	ldr	r1, [r3, #0]
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	68db      	ldr	r3, [r3, #12]
 8015018:	461a      	mov	r2, r3
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f7ff feb7 	bl	8014d8e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	691b      	ldr	r3, [r3, #16]
 8015024:	461a      	mov	r2, r3
 8015026:	69b9      	ldr	r1, [r7, #24]
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7ff ff05 	bl	8014e38 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	2b02      	cmp	r3, #2
 8015034:	d111      	bne.n	801505a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	2bff      	cmp	r3, #255	; 0xff
 801503a:	d807      	bhi.n	801504c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	695b      	ldr	r3, [r3, #20]
 8015040:	461a      	mov	r2, r3
 8015042:	69b9      	ldr	r1, [r7, #24]
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7ff ff34 	bl	8014eb2 <LL_GPIO_SetAFPin_0_7>
 801504a:	e006      	b.n	801505a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	695b      	ldr	r3, [r3, #20]
 8015050:	461a      	mov	r2, r3
 8015052:	69b9      	ldr	r1, [r7, #24]
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f7ff ff69 	bl	8014f2c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	461a      	mov	r2, r3
 8015060:	69b9      	ldr	r1, [r7, #24]
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f7ff fe56 	bl	8014d14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	3301      	adds	r3, #1
 801506c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	fa22 f303 	lsr.w	r3, r2, r3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d1af      	bne.n	8014fdc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 801507c:	2300      	movs	r3, #0
}
 801507e:	4618      	mov	r0, r3
 8015080:	3720      	adds	r7, #32
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
	...

08015088 <LL_RCC_HSI_IsReady>:
{
 8015088:	b480      	push	{r7}
 801508a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801508c:	4b07      	ldr	r3, [pc, #28]	; (80150ac <LL_RCC_HSI_IsReady+0x24>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015098:	d101      	bne.n	801509e <LL_RCC_HSI_IsReady+0x16>
 801509a:	2301      	movs	r3, #1
 801509c:	e000      	b.n	80150a0 <LL_RCC_HSI_IsReady+0x18>
 801509e:	2300      	movs	r3, #0
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	40021000 	.word	0x40021000

080150b0 <LL_RCC_LSE_IsReady>:
{
 80150b0:	b480      	push	{r7}
 80150b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80150b4:	4b07      	ldr	r3, [pc, #28]	; (80150d4 <LL_RCC_LSE_IsReady+0x24>)
 80150b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80150ba:	f003 0302 	and.w	r3, r3, #2
 80150be:	2b02      	cmp	r3, #2
 80150c0:	d101      	bne.n	80150c6 <LL_RCC_LSE_IsReady+0x16>
 80150c2:	2301      	movs	r3, #1
 80150c4:	e000      	b.n	80150c8 <LL_RCC_LSE_IsReady+0x18>
 80150c6:	2300      	movs	r3, #0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr
 80150d2:	bf00      	nop
 80150d4:	40021000 	.word	0x40021000

080150d8 <LL_RCC_GetSysClkSource>:
{
 80150d8:	b480      	push	{r7}
 80150da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80150dc:	4b04      	ldr	r3, [pc, #16]	; (80150f0 <LL_RCC_GetSysClkSource+0x18>)
 80150de:	689b      	ldr	r3, [r3, #8]
 80150e0:	f003 030c 	and.w	r3, r3, #12
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop
 80150f0:	40021000 	.word	0x40021000

080150f4 <LL_RCC_GetAHBPrescaler>:
{
 80150f4:	b480      	push	{r7}
 80150f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80150f8:	4b04      	ldr	r3, [pc, #16]	; (801510c <LL_RCC_GetAHBPrescaler+0x18>)
 80150fa:	689b      	ldr	r3, [r3, #8]
 80150fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8015100:	4618      	mov	r0, r3
 8015102:	46bd      	mov	sp, r7
 8015104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	40021000 	.word	0x40021000

08015110 <LL_RCC_GetAPB1Prescaler>:
{
 8015110:	b480      	push	{r7}
 8015112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8015114:	4b04      	ldr	r3, [pc, #16]	; (8015128 <LL_RCC_GetAPB1Prescaler+0x18>)
 8015116:	689b      	ldr	r3, [r3, #8]
 8015118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 801511c:	4618      	mov	r0, r3
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	40021000 	.word	0x40021000

0801512c <LL_RCC_GetAPB2Prescaler>:
{
 801512c:	b480      	push	{r7}
 801512e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8015130:	4b04      	ldr	r3, [pc, #16]	; (8015144 <LL_RCC_GetAPB2Prescaler+0x18>)
 8015132:	689b      	ldr	r3, [r3, #8]
 8015134:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8015138:	4618      	mov	r0, r3
 801513a:	46bd      	mov	sp, r7
 801513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop
 8015144:	40021000 	.word	0x40021000

08015148 <LL_RCC_GetUSARTClockSource>:
{
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8015150:	4b06      	ldr	r3, [pc, #24]	; (801516c <LL_RCC_GetUSARTClockSource+0x24>)
 8015152:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	401a      	ands	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	041b      	lsls	r3, r3, #16
 801515e:	4313      	orrs	r3, r2
}
 8015160:	4618      	mov	r0, r3
 8015162:	370c      	adds	r7, #12
 8015164:	46bd      	mov	sp, r7
 8015166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516a:	4770      	bx	lr
 801516c:	40021000 	.word	0x40021000

08015170 <LL_RCC_GetUARTClockSource>:
{
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8015178:	4b06      	ldr	r3, [pc, #24]	; (8015194 <LL_RCC_GetUARTClockSource+0x24>)
 801517a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	401a      	ands	r2, r3
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	041b      	lsls	r3, r3, #16
 8015186:	4313      	orrs	r3, r2
}
 8015188:	4618      	mov	r0, r3
 801518a:	370c      	adds	r7, #12
 801518c:	46bd      	mov	sp, r7
 801518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015192:	4770      	bx	lr
 8015194:	40021000 	.word	0x40021000

08015198 <LL_RCC_PLL_GetMainSource>:
{
 8015198:	b480      	push	{r7}
 801519a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801519c:	4b04      	ldr	r3, [pc, #16]	; (80151b0 <LL_RCC_PLL_GetMainSource+0x18>)
 801519e:	68db      	ldr	r3, [r3, #12]
 80151a0:	f003 0303 	and.w	r3, r3, #3
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	40021000 	.word	0x40021000

080151b4 <LL_RCC_PLL_GetN>:
{
 80151b4:	b480      	push	{r7}
 80151b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80151b8:	4b04      	ldr	r3, [pc, #16]	; (80151cc <LL_RCC_PLL_GetN+0x18>)
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	0a1b      	lsrs	r3, r3, #8
 80151be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr
 80151cc:	40021000 	.word	0x40021000

080151d0 <LL_RCC_PLL_GetR>:
{
 80151d0:	b480      	push	{r7}
 80151d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80151d4:	4b04      	ldr	r3, [pc, #16]	; (80151e8 <LL_RCC_PLL_GetR+0x18>)
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80151dc:	4618      	mov	r0, r3
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop
 80151e8:	40021000 	.word	0x40021000

080151ec <LL_RCC_PLL_GetDivider>:
{
 80151ec:	b480      	push	{r7}
 80151ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80151f0:	4b04      	ldr	r3, [pc, #16]	; (8015204 <LL_RCC_PLL_GetDivider+0x18>)
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	40021000 	.word	0x40021000

08015208 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8015210:	2300      	movs	r3, #0
 8015212:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b03      	cmp	r3, #3
 8015218:	d132      	bne.n	8015280 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f7ff ff94 	bl	8015148 <LL_RCC_GetUSARTClockSource>
 8015220:	4603      	mov	r3, r0
 8015222:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8015226:	d016      	beq.n	8015256 <LL_RCC_GetUSARTClockFreq+0x4e>
 8015228:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 801522c:	d81c      	bhi.n	8015268 <LL_RCC_GetUSARTClockFreq+0x60>
 801522e:	4a51      	ldr	r2, [pc, #324]	; (8015374 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8015230:	4293      	cmp	r3, r2
 8015232:	d003      	beq.n	801523c <LL_RCC_GetUSARTClockFreq+0x34>
 8015234:	4a50      	ldr	r2, [pc, #320]	; (8015378 <LL_RCC_GetUSARTClockFreq+0x170>)
 8015236:	4293      	cmp	r3, r2
 8015238:	d004      	beq.n	8015244 <LL_RCC_GetUSARTClockFreq+0x3c>
 801523a:	e015      	b.n	8015268 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 801523c:	f000 f92e 	bl	801549c <RCC_GetSystemClockFreq>
 8015240:	60f8      	str	r0, [r7, #12]
        break;
 8015242:	e092      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8015244:	f7ff ff20 	bl	8015088 <LL_RCC_HSI_IsReady>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	f000 8082 	beq.w	8015354 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8015250:	4b4a      	ldr	r3, [pc, #296]	; (801537c <LL_RCC_GetUSARTClockFreq+0x174>)
 8015252:	60fb      	str	r3, [r7, #12]
        }
        break;
 8015254:	e07e      	b.n	8015354 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8015256:	f7ff ff2b 	bl	80150b0 <LL_RCC_LSE_IsReady>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d07b      	beq.n	8015358 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8015260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015264:	60fb      	str	r3, [r7, #12]
        }
        break;
 8015266:	e077      	b.n	8015358 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8015268:	f000 f918 	bl	801549c <RCC_GetSystemClockFreq>
 801526c:	4603      	mov	r3, r0
 801526e:	4618      	mov	r0, r3
 8015270:	f000 f93a 	bl	80154e8 <RCC_GetHCLKClockFreq>
 8015274:	4603      	mov	r3, r0
 8015276:	4618      	mov	r0, r3
 8015278:	f000 f964 	bl	8015544 <RCC_GetPCLK2ClockFreq>
 801527c:	60f8      	str	r0, [r7, #12]
        break;
 801527e:	e074      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b0c      	cmp	r3, #12
 8015284:	d131      	bne.n	80152ea <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7ff ff5e 	bl	8015148 <LL_RCC_GetUSARTClockSource>
 801528c:	4603      	mov	r3, r0
 801528e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8015292:	d015      	beq.n	80152c0 <LL_RCC_GetUSARTClockFreq+0xb8>
 8015294:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8015298:	d81b      	bhi.n	80152d2 <LL_RCC_GetUSARTClockFreq+0xca>
 801529a:	4a39      	ldr	r2, [pc, #228]	; (8015380 <LL_RCC_GetUSARTClockFreq+0x178>)
 801529c:	4293      	cmp	r3, r2
 801529e:	d003      	beq.n	80152a8 <LL_RCC_GetUSARTClockFreq+0xa0>
 80152a0:	4a38      	ldr	r2, [pc, #224]	; (8015384 <LL_RCC_GetUSARTClockFreq+0x17c>)
 80152a2:	4293      	cmp	r3, r2
 80152a4:	d004      	beq.n	80152b0 <LL_RCC_GetUSARTClockFreq+0xa8>
 80152a6:	e014      	b.n	80152d2 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80152a8:	f000 f8f8 	bl	801549c <RCC_GetSystemClockFreq>
 80152ac:	60f8      	str	r0, [r7, #12]
        break;
 80152ae:	e05c      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80152b0:	f7ff feea 	bl	8015088 <LL_RCC_HSI_IsReady>
 80152b4:	4603      	mov	r3, r0
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d050      	beq.n	801535c <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 80152ba:	4b30      	ldr	r3, [pc, #192]	; (801537c <LL_RCC_GetUSARTClockFreq+0x174>)
 80152bc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80152be:	e04d      	b.n	801535c <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80152c0:	f7ff fef6 	bl	80150b0 <LL_RCC_LSE_IsReady>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d04a      	beq.n	8015360 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 80152ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152ce:	60fb      	str	r3, [r7, #12]
        }
        break;
 80152d0:	e046      	b.n	8015360 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80152d2:	f000 f8e3 	bl	801549c <RCC_GetSystemClockFreq>
 80152d6:	4603      	mov	r3, r0
 80152d8:	4618      	mov	r0, r3
 80152da:	f000 f905 	bl	80154e8 <RCC_GetHCLKClockFreq>
 80152de:	4603      	mov	r3, r0
 80152e0:	4618      	mov	r0, r3
 80152e2:	f000 f919 	bl	8015518 <RCC_GetPCLK1ClockFreq>
 80152e6:	60f8      	str	r0, [r7, #12]
        break;
 80152e8:	e03f      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b30      	cmp	r3, #48	; 0x30
 80152ee:	d13c      	bne.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7ff ff29 	bl	8015148 <LL_RCC_GetUSARTClockSource>
 80152f6:	4603      	mov	r3, r0
 80152f8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80152fc:	d015      	beq.n	801532a <LL_RCC_GetUSARTClockFreq+0x122>
 80152fe:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8015302:	d81b      	bhi.n	801533c <LL_RCC_GetUSARTClockFreq+0x134>
 8015304:	4a20      	ldr	r2, [pc, #128]	; (8015388 <LL_RCC_GetUSARTClockFreq+0x180>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d003      	beq.n	8015312 <LL_RCC_GetUSARTClockFreq+0x10a>
 801530a:	4a20      	ldr	r2, [pc, #128]	; (801538c <LL_RCC_GetUSARTClockFreq+0x184>)
 801530c:	4293      	cmp	r3, r2
 801530e:	d004      	beq.n	801531a <LL_RCC_GetUSARTClockFreq+0x112>
 8015310:	e014      	b.n	801533c <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8015312:	f000 f8c3 	bl	801549c <RCC_GetSystemClockFreq>
 8015316:	60f8      	str	r0, [r7, #12]
          break;
 8015318:	e027      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 801531a:	f7ff feb5 	bl	8015088 <LL_RCC_HSI_IsReady>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d01f      	beq.n	8015364 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 8015324:	4b15      	ldr	r3, [pc, #84]	; (801537c <LL_RCC_GetUSARTClockFreq+0x174>)
 8015326:	60fb      	str	r3, [r7, #12]
          }
          break;
 8015328:	e01c      	b.n	8015364 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 801532a:	f7ff fec1 	bl	80150b0 <LL_RCC_LSE_IsReady>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d019      	beq.n	8015368 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 8015334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015338:	60fb      	str	r3, [r7, #12]
          }
          break;
 801533a:	e015      	b.n	8015368 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801533c:	f000 f8ae 	bl	801549c <RCC_GetSystemClockFreq>
 8015340:	4603      	mov	r3, r0
 8015342:	4618      	mov	r0, r3
 8015344:	f000 f8d0 	bl	80154e8 <RCC_GetHCLKClockFreq>
 8015348:	4603      	mov	r3, r0
 801534a:	4618      	mov	r0, r3
 801534c:	f000 f8e4 	bl	8015518 <RCC_GetPCLK1ClockFreq>
 8015350:	60f8      	str	r0, [r7, #12]
          break;
 8015352:	e00a      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8015354:	bf00      	nop
 8015356:	e008      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8015358:	bf00      	nop
 801535a:	e006      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 801535c:	bf00      	nop
 801535e:	e004      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8015360:	bf00      	nop
 8015362:	e002      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8015364:	bf00      	nop
 8015366:	e000      	b.n	801536a <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8015368:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 801536a:	68fb      	ldr	r3, [r7, #12]
}
 801536c:	4618      	mov	r0, r3
 801536e:	3710      	adds	r7, #16
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	00030001 	.word	0x00030001
 8015378:	00030002 	.word	0x00030002
 801537c:	00f42400 	.word	0x00f42400
 8015380:	000c0004 	.word	0x000c0004
 8015384:	000c0008 	.word	0x000c0008
 8015388:	00300010 	.word	0x00300010
 801538c:	00300020 	.word	0x00300020

08015390 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8015398:	2300      	movs	r3, #0
 801539a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2bc0      	cmp	r3, #192	; 0xc0
 80153a0:	d134      	bne.n	801540c <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f7ff fee4 	bl	8015170 <LL_RCC_GetUARTClockSource>
 80153a8:	4603      	mov	r3, r0
 80153aa:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80153ae:	d015      	beq.n	80153dc <LL_RCC_GetUARTClockFreq+0x4c>
 80153b0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80153b4:	d81b      	bhi.n	80153ee <LL_RCC_GetUARTClockFreq+0x5e>
 80153b6:	4a34      	ldr	r2, [pc, #208]	; (8015488 <LL_RCC_GetUARTClockFreq+0xf8>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d003      	beq.n	80153c4 <LL_RCC_GetUARTClockFreq+0x34>
 80153bc:	4a33      	ldr	r2, [pc, #204]	; (801548c <LL_RCC_GetUARTClockFreq+0xfc>)
 80153be:	4293      	cmp	r3, r2
 80153c0:	d004      	beq.n	80153cc <LL_RCC_GetUARTClockFreq+0x3c>
 80153c2:	e014      	b.n	80153ee <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80153c4:	f000 f86a 	bl	801549c <RCC_GetSystemClockFreq>
 80153c8:	60f8      	str	r0, [r7, #12]
        break;
 80153ca:	e01f      	b.n	801540c <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80153cc:	f7ff fe5c 	bl	8015088 <LL_RCC_HSI_IsReady>
 80153d0:	4603      	mov	r3, r0
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d017      	beq.n	8015406 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 80153d6:	4b2e      	ldr	r3, [pc, #184]	; (8015490 <LL_RCC_GetUARTClockFreq+0x100>)
 80153d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80153da:	e014      	b.n	8015406 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80153dc:	f7ff fe68 	bl	80150b0 <LL_RCC_LSE_IsReady>
 80153e0:	4603      	mov	r3, r0
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d011      	beq.n	801540a <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 80153e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80153ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80153ec:	e00d      	b.n	801540a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80153ee:	f000 f855 	bl	801549c <RCC_GetSystemClockFreq>
 80153f2:	4603      	mov	r3, r0
 80153f4:	4618      	mov	r0, r3
 80153f6:	f000 f877 	bl	80154e8 <RCC_GetHCLKClockFreq>
 80153fa:	4603      	mov	r3, r0
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 f88b 	bl	8015518 <RCC_GetPCLK1ClockFreq>
 8015402:	60f8      	str	r0, [r7, #12]
        break;
 8015404:	e002      	b.n	801540c <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 8015406:	bf00      	nop
 8015408:	e000      	b.n	801540c <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 801540a:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015412:	d134      	bne.n	801547e <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f7ff feab 	bl	8015170 <LL_RCC_GetUARTClockSource>
 801541a:	4603      	mov	r3, r0
 801541c:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8015420:	d015      	beq.n	801544e <LL_RCC_GetUARTClockFreq+0xbe>
 8015422:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8015426:	d81b      	bhi.n	8015460 <LL_RCC_GetUARTClockFreq+0xd0>
 8015428:	4a1a      	ldr	r2, [pc, #104]	; (8015494 <LL_RCC_GetUARTClockFreq+0x104>)
 801542a:	4293      	cmp	r3, r2
 801542c:	d003      	beq.n	8015436 <LL_RCC_GetUARTClockFreq+0xa6>
 801542e:	4a1a      	ldr	r2, [pc, #104]	; (8015498 <LL_RCC_GetUARTClockFreq+0x108>)
 8015430:	4293      	cmp	r3, r2
 8015432:	d004      	beq.n	801543e <LL_RCC_GetUARTClockFreq+0xae>
 8015434:	e014      	b.n	8015460 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8015436:	f000 f831 	bl	801549c <RCC_GetSystemClockFreq>
 801543a:	60f8      	str	r0, [r7, #12]
        break;
 801543c:	e01f      	b.n	801547e <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801543e:	f7ff fe23 	bl	8015088 <LL_RCC_HSI_IsReady>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d017      	beq.n	8015478 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 8015448:	4b11      	ldr	r3, [pc, #68]	; (8015490 <LL_RCC_GetUARTClockFreq+0x100>)
 801544a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801544c:	e014      	b.n	8015478 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801544e:	f7ff fe2f 	bl	80150b0 <LL_RCC_LSE_IsReady>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d011      	beq.n	801547c <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 8015458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801545c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801545e:	e00d      	b.n	801547c <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8015460:	f000 f81c 	bl	801549c <RCC_GetSystemClockFreq>
 8015464:	4603      	mov	r3, r0
 8015466:	4618      	mov	r0, r3
 8015468:	f000 f83e 	bl	80154e8 <RCC_GetHCLKClockFreq>
 801546c:	4603      	mov	r3, r0
 801546e:	4618      	mov	r0, r3
 8015470:	f000 f852 	bl	8015518 <RCC_GetPCLK1ClockFreq>
 8015474:	60f8      	str	r0, [r7, #12]
        break;
 8015476:	e002      	b.n	801547e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8015478:	bf00      	nop
 801547a:	e000      	b.n	801547e <LL_RCC_GetUARTClockFreq+0xee>
        break;
 801547c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 801547e:	68fb      	ldr	r3, [r7, #12]
}
 8015480:	4618      	mov	r0, r3
 8015482:	3710      	adds	r7, #16
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	00c00040 	.word	0x00c00040
 801548c:	00c00080 	.word	0x00c00080
 8015490:	00f42400 	.word	0x00f42400
 8015494:	03000100 	.word	0x03000100
 8015498:	03000200 	.word	0x03000200

0801549c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80154a2:	f7ff fe19 	bl	80150d8 <LL_RCC_GetSysClkSource>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b0c      	cmp	r3, #12
 80154aa:	d00c      	beq.n	80154c6 <RCC_GetSystemClockFreq+0x2a>
 80154ac:	2b0c      	cmp	r3, #12
 80154ae:	d80e      	bhi.n	80154ce <RCC_GetSystemClockFreq+0x32>
 80154b0:	2b04      	cmp	r3, #4
 80154b2:	d002      	beq.n	80154ba <RCC_GetSystemClockFreq+0x1e>
 80154b4:	2b08      	cmp	r3, #8
 80154b6:	d003      	beq.n	80154c0 <RCC_GetSystemClockFreq+0x24>
 80154b8:	e009      	b.n	80154ce <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80154ba:	4b09      	ldr	r3, [pc, #36]	; (80154e0 <RCC_GetSystemClockFreq+0x44>)
 80154bc:	607b      	str	r3, [r7, #4]
      break;
 80154be:	e009      	b.n	80154d4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80154c0:	4b08      	ldr	r3, [pc, #32]	; (80154e4 <RCC_GetSystemClockFreq+0x48>)
 80154c2:	607b      	str	r3, [r7, #4]
      break;
 80154c4:	e006      	b.n	80154d4 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80154c6:	f000 f853 	bl	8015570 <RCC_PLL_GetFreqDomain_SYS>
 80154ca:	6078      	str	r0, [r7, #4]
      break;
 80154cc:	e002      	b.n	80154d4 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80154ce:	4b04      	ldr	r3, [pc, #16]	; (80154e0 <RCC_GetSystemClockFreq+0x44>)
 80154d0:	607b      	str	r3, [r7, #4]
      break;
 80154d2:	bf00      	nop
  }

  return frequency;
 80154d4:	687b      	ldr	r3, [r7, #4]
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	00f42400 	.word	0x00f42400
 80154e4:	007a1200 	.word	0x007a1200

080154e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80154f0:	f7ff fe00 	bl	80150f4 <LL_RCC_GetAHBPrescaler>
 80154f4:	4603      	mov	r3, r0
 80154f6:	091b      	lsrs	r3, r3, #4
 80154f8:	f003 030f 	and.w	r3, r3, #15
 80154fc:	4a05      	ldr	r2, [pc, #20]	; (8015514 <RCC_GetHCLKClockFreq+0x2c>)
 80154fe:	5cd3      	ldrb	r3, [r2, r3]
 8015500:	f003 031f 	and.w	r3, r3, #31
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	fa22 f303 	lsr.w	r3, r2, r3
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	0801c6ec 	.word	0x0801c6ec

08015518 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8015520:	f7ff fdf6 	bl	8015110 <LL_RCC_GetAPB1Prescaler>
 8015524:	4603      	mov	r3, r0
 8015526:	0a1b      	lsrs	r3, r3, #8
 8015528:	4a05      	ldr	r2, [pc, #20]	; (8015540 <RCC_GetPCLK1ClockFreq+0x28>)
 801552a:	5cd3      	ldrb	r3, [r2, r3]
 801552c:	f003 031f 	and.w	r3, r3, #31
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015536:	4618      	mov	r0, r3
 8015538:	3708      	adds	r7, #8
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	0801c6fc 	.word	0x0801c6fc

08015544 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 801554c:	f7ff fdee 	bl	801512c <LL_RCC_GetAPB2Prescaler>
 8015550:	4603      	mov	r3, r0
 8015552:	0adb      	lsrs	r3, r3, #11
 8015554:	4a05      	ldr	r2, [pc, #20]	; (801556c <RCC_GetPCLK2ClockFreq+0x28>)
 8015556:	5cd3      	ldrb	r3, [r2, r3]
 8015558:	f003 031f 	and.w	r3, r3, #31
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015562:	4618      	mov	r0, r3
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	0801c6fc 	.word	0x0801c6fc

08015570 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8015570:	b590      	push	{r4, r7, lr}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8015576:	f7ff fe0f 	bl	8015198 <LL_RCC_PLL_GetMainSource>
 801557a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	2b02      	cmp	r3, #2
 8015580:	d003      	beq.n	801558a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	2b03      	cmp	r3, #3
 8015586:	d003      	beq.n	8015590 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8015588:	e005      	b.n	8015596 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 801558a:	4b11      	ldr	r3, [pc, #68]	; (80155d0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801558c:	607b      	str	r3, [r7, #4]
      break;
 801558e:	e005      	b.n	801559c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8015590:	4b10      	ldr	r3, [pc, #64]	; (80155d4 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8015592:	607b      	str	r3, [r7, #4]
      break;
 8015594:	e002      	b.n	801559c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8015596:	4b0e      	ldr	r3, [pc, #56]	; (80155d0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8015598:	607b      	str	r3, [r7, #4]
      break;
 801559a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 801559c:	f7ff fe0a 	bl	80151b4 <LL_RCC_PLL_GetN>
 80155a0:	4602      	mov	r2, r0
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	fb03 f402 	mul.w	r4, r3, r2
 80155a8:	f7ff fe20 	bl	80151ec <LL_RCC_PLL_GetDivider>
 80155ac:	4603      	mov	r3, r0
 80155ae:	091b      	lsrs	r3, r3, #4
 80155b0:	3301      	adds	r3, #1
 80155b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80155b6:	f7ff fe0b 	bl	80151d0 <LL_RCC_PLL_GetR>
 80155ba:	4603      	mov	r3, r0
 80155bc:	0e5b      	lsrs	r3, r3, #25
 80155be:	3301      	adds	r3, #1
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd90      	pop	{r4, r7, pc}
 80155ce:	bf00      	nop
 80155d0:	00f42400 	.word	0x00f42400
 80155d4:	007a1200 	.word	0x007a1200

080155d8 <LL_SPI_IsEnabled>:
{
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155e8:	2b40      	cmp	r3, #64	; 0x40
 80155ea:	d101      	bne.n	80155f0 <LL_SPI_IsEnabled+0x18>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e000      	b.n	80155f2 <LL_SPI_IsEnabled+0x1a>
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	370c      	adds	r7, #12
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr

080155fe <LL_SPI_SetCRCPolynomial>:
{
 80155fe:	b480      	push	{r7}
 8015600:	b083      	sub	sp, #12
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	b29b      	uxth	r3, r3
 801560c:	461a      	mov	r2, r3
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	611a      	str	r2, [r3, #16]
}
 8015612:	bf00      	nop
 8015614:	370c      	adds	r7, #12
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr

0801561e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 801561e:	b580      	push	{r7, lr}
 8015620:	b084      	sub	sp, #16
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
 8015626:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8015628:	2301      	movs	r3, #1
 801562a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff ffd3 	bl	80155d8 <LL_SPI_IsEnabled>
 8015632:	4603      	mov	r3, r0
 8015634:	2b00      	cmp	r3, #0
 8015636:	d13b      	bne.n	80156b0 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015640:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8015644:	683a      	ldr	r2, [r7, #0]
 8015646:	6811      	ldr	r1, [r2, #0]
 8015648:	683a      	ldr	r2, [r7, #0]
 801564a:	6852      	ldr	r2, [r2, #4]
 801564c:	4311      	orrs	r1, r2
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	68d2      	ldr	r2, [r2, #12]
 8015652:	4311      	orrs	r1, r2
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	6912      	ldr	r2, [r2, #16]
 8015658:	4311      	orrs	r1, r2
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	6952      	ldr	r2, [r2, #20]
 801565e:	4311      	orrs	r1, r2
 8015660:	683a      	ldr	r2, [r7, #0]
 8015662:	6992      	ldr	r2, [r2, #24]
 8015664:	4311      	orrs	r1, r2
 8015666:	683a      	ldr	r2, [r7, #0]
 8015668:	69d2      	ldr	r2, [r2, #28]
 801566a:	4311      	orrs	r1, r2
 801566c:	683a      	ldr	r2, [r7, #0]
 801566e:	6a12      	ldr	r2, [r2, #32]
 8015670:	430a      	orrs	r2, r1
 8015672:	431a      	orrs	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8015680:	f023 0304 	bic.w	r3, r3, #4
 8015684:	683a      	ldr	r2, [r7, #0]
 8015686:	6891      	ldr	r1, [r2, #8]
 8015688:	683a      	ldr	r2, [r7, #0]
 801568a:	6952      	ldr	r2, [r2, #20]
 801568c:	0c12      	lsrs	r2, r2, #16
 801568e:	430a      	orrs	r2, r1
 8015690:	431a      	orrs	r2, r3
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	6a1b      	ldr	r3, [r3, #32]
 801569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801569e:	d105      	bne.n	80156ac <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a4:	4619      	mov	r1, r3
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7ff ffa9 	bl	80155fe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80156ac:	2300      	movs	r3, #0
 80156ae:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	69db      	ldr	r3, [r3, #28]
 80156b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80156bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}

080156c6 <LL_TIM_SetPrescaler>:
{
 80156c6:	b480      	push	{r7}
 80156c8:	b083      	sub	sp, #12
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	6078      	str	r0, [r7, #4]
 80156ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	683a      	ldr	r2, [r7, #0]
 80156d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80156d6:	bf00      	nop
 80156d8:	370c      	adds	r7, #12
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr

080156e2 <LL_TIM_SetAutoReload>:
{
 80156e2:	b480      	push	{r7}
 80156e4:	b083      	sub	sp, #12
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
 80156ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	683a      	ldr	r2, [r7, #0]
 80156f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80156f2:	bf00      	nop
 80156f4:	370c      	adds	r7, #12
 80156f6:	46bd      	mov	sp, r7
 80156f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fc:	4770      	bx	lr

080156fe <LL_TIM_SetRepetitionCounter>:
{
 80156fe:	b480      	push	{r7}
 8015700:	b083      	sub	sp, #12
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
 8015706:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801570e:	bf00      	nop
 8015710:	370c      	adds	r7, #12
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr

0801571a <LL_TIM_OC_SetCompareCH1>:
{
 801571a:	b480      	push	{r7}
 801571c:	b083      	sub	sp, #12
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
 8015722:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	683a      	ldr	r2, [r7, #0]
 8015728:	635a      	str	r2, [r3, #52]	; 0x34
}
 801572a:	bf00      	nop
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <LL_TIM_OC_SetCompareCH2>:
{
 8015736:	b480      	push	{r7}
 8015738:	b083      	sub	sp, #12
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
 801573e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	683a      	ldr	r2, [r7, #0]
 8015744:	639a      	str	r2, [r3, #56]	; 0x38
}
 8015746:	bf00      	nop
 8015748:	370c      	adds	r7, #12
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr

08015752 <LL_TIM_OC_SetCompareCH3>:
{
 8015752:	b480      	push	{r7}
 8015754:	b083      	sub	sp, #12
 8015756:	af00      	add	r7, sp, #0
 8015758:	6078      	str	r0, [r7, #4]
 801575a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	683a      	ldr	r2, [r7, #0]
 8015760:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8015762:	bf00      	nop
 8015764:	370c      	adds	r7, #12
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr

0801576e <LL_TIM_OC_SetCompareCH4>:
{
 801576e:	b480      	push	{r7}
 8015770:	b083      	sub	sp, #12
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
 8015776:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	683a      	ldr	r2, [r7, #0]
 801577c:	641a      	str	r2, [r3, #64]	; 0x40
}
 801577e:	bf00      	nop
 8015780:	370c      	adds	r7, #12
 8015782:	46bd      	mov	sp, r7
 8015784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015788:	4770      	bx	lr

0801578a <LL_TIM_OC_SetCompareCH5>:
{
 801578a:	b480      	push	{r7}
 801578c:	b083      	sub	sp, #12
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
 8015792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	649a      	str	r2, [r3, #72]	; 0x48
}
 801579e:	bf00      	nop
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr

080157aa <LL_TIM_OC_SetCompareCH6>:
{
 80157aa:	b480      	push	{r7}
 80157ac:	b083      	sub	sp, #12
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	6078      	str	r0, [r7, #4]
 80157b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	683a      	ldr	r2, [r7, #0]
 80157b8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80157ba:	bf00      	nop
 80157bc:	370c      	adds	r7, #12
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80157c6:	b480      	push	{r7}
 80157c8:	b083      	sub	sp, #12
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	695b      	ldr	r3, [r3, #20]
 80157d2:	f043 0201 	orr.w	r2, r3, #1
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	615a      	str	r2, [r3, #20]
}
 80157da:	bf00      	nop
 80157dc:	370c      	adds	r7, #12
 80157de:	46bd      	mov	sp, r7
 80157e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e4:	4770      	bx	lr
	...

080157e8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	4a43      	ldr	r2, [pc, #268]	; (8015908 <LL_TIM_Init+0x120>)
 80157fc:	4293      	cmp	r3, r2
 80157fe:	d017      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015806:	d013      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	4a40      	ldr	r2, [pc, #256]	; (801590c <LL_TIM_Init+0x124>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d00f      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	4a3f      	ldr	r2, [pc, #252]	; (8015910 <LL_TIM_Init+0x128>)
 8015814:	4293      	cmp	r3, r2
 8015816:	d00b      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	4a3e      	ldr	r2, [pc, #248]	; (8015914 <LL_TIM_Init+0x12c>)
 801581c:	4293      	cmp	r3, r2
 801581e:	d007      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4a3d      	ldr	r2, [pc, #244]	; (8015918 <LL_TIM_Init+0x130>)
 8015824:	4293      	cmp	r3, r2
 8015826:	d003      	beq.n	8015830 <LL_TIM_Init+0x48>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	4a3c      	ldr	r2, [pc, #240]	; (801591c <LL_TIM_Init+0x134>)
 801582c:	4293      	cmp	r3, r2
 801582e:	d106      	bne.n	801583e <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	4313      	orrs	r3, r2
 801583c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4a31      	ldr	r2, [pc, #196]	; (8015908 <LL_TIM_Init+0x120>)
 8015842:	4293      	cmp	r3, r2
 8015844:	d023      	beq.n	801588e <LL_TIM_Init+0xa6>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801584c:	d01f      	beq.n	801588e <LL_TIM_Init+0xa6>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	4a2e      	ldr	r2, [pc, #184]	; (801590c <LL_TIM_Init+0x124>)
 8015852:	4293      	cmp	r3, r2
 8015854:	d01b      	beq.n	801588e <LL_TIM_Init+0xa6>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4a2d      	ldr	r2, [pc, #180]	; (8015910 <LL_TIM_Init+0x128>)
 801585a:	4293      	cmp	r3, r2
 801585c:	d017      	beq.n	801588e <LL_TIM_Init+0xa6>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	4a2c      	ldr	r2, [pc, #176]	; (8015914 <LL_TIM_Init+0x12c>)
 8015862:	4293      	cmp	r3, r2
 8015864:	d013      	beq.n	801588e <LL_TIM_Init+0xa6>
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4a2b      	ldr	r2, [pc, #172]	; (8015918 <LL_TIM_Init+0x130>)
 801586a:	4293      	cmp	r3, r2
 801586c:	d00f      	beq.n	801588e <LL_TIM_Init+0xa6>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	4a2b      	ldr	r2, [pc, #172]	; (8015920 <LL_TIM_Init+0x138>)
 8015872:	4293      	cmp	r3, r2
 8015874:	d00b      	beq.n	801588e <LL_TIM_Init+0xa6>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	4a2a      	ldr	r2, [pc, #168]	; (8015924 <LL_TIM_Init+0x13c>)
 801587a:	4293      	cmp	r3, r2
 801587c:	d007      	beq.n	801588e <LL_TIM_Init+0xa6>
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	4a29      	ldr	r2, [pc, #164]	; (8015928 <LL_TIM_Init+0x140>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d003      	beq.n	801588e <LL_TIM_Init+0xa6>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4a24      	ldr	r2, [pc, #144]	; (801591c <LL_TIM_Init+0x134>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d106      	bne.n	801589c <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	4313      	orrs	r3, r2
 801589a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	68fa      	ldr	r2, [r7, #12]
 80158a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	4619      	mov	r1, r3
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7ff ff1a 	bl	80156e2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	881b      	ldrh	r3, [r3, #0]
 80158b2:	4619      	mov	r1, r3
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff ff06 	bl	80156c6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4a12      	ldr	r2, [pc, #72]	; (8015908 <LL_TIM_Init+0x120>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d013      	beq.n	80158ea <LL_TIM_Init+0x102>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4a14      	ldr	r2, [pc, #80]	; (8015918 <LL_TIM_Init+0x130>)
 80158c6:	4293      	cmp	r3, r2
 80158c8:	d00f      	beq.n	80158ea <LL_TIM_Init+0x102>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4a14      	ldr	r2, [pc, #80]	; (8015920 <LL_TIM_Init+0x138>)
 80158ce:	4293      	cmp	r3, r2
 80158d0:	d00b      	beq.n	80158ea <LL_TIM_Init+0x102>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4a13      	ldr	r2, [pc, #76]	; (8015924 <LL_TIM_Init+0x13c>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d007      	beq.n	80158ea <LL_TIM_Init+0x102>
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4a12      	ldr	r2, [pc, #72]	; (8015928 <LL_TIM_Init+0x140>)
 80158de:	4293      	cmp	r3, r2
 80158e0:	d003      	beq.n	80158ea <LL_TIM_Init+0x102>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	4a0d      	ldr	r2, [pc, #52]	; (801591c <LL_TIM_Init+0x134>)
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d105      	bne.n	80158f6 <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	691b      	ldr	r3, [r3, #16]
 80158ee:	4619      	mov	r1, r3
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7ff ff04 	bl	80156fe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f7ff ff65 	bl	80157c6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80158fc:	2300      	movs	r3, #0
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	40012c00 	.word	0x40012c00
 801590c:	40000400 	.word	0x40000400
 8015910:	40000800 	.word	0x40000800
 8015914:	40000c00 	.word	0x40000c00
 8015918:	40013400 	.word	0x40013400
 801591c:	40015000 	.word	0x40015000
 8015920:	40014000 	.word	0x40014000
 8015924:	40014400 	.word	0x40014400
 8015928:	40014800 	.word	0x40014800

0801592c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b086      	sub	sp, #24
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8015938:	2301      	movs	r3, #1
 801593a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015942:	d045      	beq.n	80159d0 <LL_TIM_OC_Init+0xa4>
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801594a:	d848      	bhi.n	80159de <LL_TIM_OC_Init+0xb2>
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015952:	d036      	beq.n	80159c2 <LL_TIM_OC_Init+0x96>
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801595a:	d840      	bhi.n	80159de <LL_TIM_OC_Init+0xb2>
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015962:	d027      	beq.n	80159b4 <LL_TIM_OC_Init+0x88>
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801596a:	d838      	bhi.n	80159de <LL_TIM_OC_Init+0xb2>
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015972:	d018      	beq.n	80159a6 <LL_TIM_OC_Init+0x7a>
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801597a:	d830      	bhi.n	80159de <LL_TIM_OC_Init+0xb2>
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	2b01      	cmp	r3, #1
 8015980:	d003      	beq.n	801598a <LL_TIM_OC_Init+0x5e>
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	2b10      	cmp	r3, #16
 8015986:	d007      	beq.n	8015998 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8015988:	e029      	b.n	80159de <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 801598a:	6879      	ldr	r1, [r7, #4]
 801598c:	68f8      	ldr	r0, [r7, #12]
 801598e:	f000 f8bf 	bl	8015b10 <OC1Config>
 8015992:	4603      	mov	r3, r0
 8015994:	75fb      	strb	r3, [r7, #23]
      break;
 8015996:	e023      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8015998:	6879      	ldr	r1, [r7, #4]
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f000 f93e 	bl	8015c1c <OC2Config>
 80159a0:	4603      	mov	r3, r0
 80159a2:	75fb      	strb	r3, [r7, #23]
      break;
 80159a4:	e01c      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80159a6:	6879      	ldr	r1, [r7, #4]
 80159a8:	68f8      	ldr	r0, [r7, #12]
 80159aa:	f000 f9c1 	bl	8015d30 <OC3Config>
 80159ae:	4603      	mov	r3, r0
 80159b0:	75fb      	strb	r3, [r7, #23]
      break;
 80159b2:	e015      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80159b4:	6879      	ldr	r1, [r7, #4]
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f000 fa44 	bl	8015e44 <OC4Config>
 80159bc:	4603      	mov	r3, r0
 80159be:	75fb      	strb	r3, [r7, #23]
      break;
 80159c0:	e00e      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80159c2:	6879      	ldr	r1, [r7, #4]
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f000 fac7 	bl	8015f58 <OC5Config>
 80159ca:	4603      	mov	r3, r0
 80159cc:	75fb      	strb	r3, [r7, #23]
      break;
 80159ce:	e007      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80159d0:	6879      	ldr	r1, [r7, #4]
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f000 fb2a 	bl	801602c <OC6Config>
 80159d8:	4603      	mov	r3, r0
 80159da:	75fb      	strb	r3, [r7, #23]
      break;
 80159dc:	e000      	b.n	80159e0 <LL_TIM_OC_Init+0xb4>
      break;
 80159de:	bf00      	nop
  }

  return result;
 80159e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3718      	adds	r7, #24
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b085      	sub	sp, #20
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80159f6:	2300      	movs	r3, #0
 80159f8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015a00:	683a      	ldr	r2, [r7, #0]
 8015a02:	7b12      	ldrb	r2, [r2, #12]
 8015a04:	4313      	orrs	r3, r2
 8015a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	689b      	ldr	r3, [r3, #8]
 8015a12:	4313      	orrs	r3, r2
 8015a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	685b      	ldr	r3, [r3, #4]
 8015a20:	4313      	orrs	r3, r2
 8015a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a38:	683a      	ldr	r2, [r7, #0]
 8015a3a:	89d2      	ldrh	r2, [r2, #14]
 8015a3c:	4313      	orrs	r3, r2
 8015a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	691b      	ldr	r3, [r3, #16]
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a58:	4313      	orrs	r3, r2
 8015a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a66:	4313      	orrs	r3, r2
 8015a68:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	4a25      	ldr	r2, [pc, #148]	; (8015b04 <LL_TIM_BDTR_Init+0x118>)
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	d007      	beq.n	8015a82 <LL_TIM_BDTR_Init+0x96>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	4a24      	ldr	r2, [pc, #144]	; (8015b08 <LL_TIM_BDTR_Init+0x11c>)
 8015a76:	4293      	cmp	r3, r2
 8015a78:	d003      	beq.n	8015a82 <LL_TIM_BDTR_Init+0x96>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4a23      	ldr	r2, [pc, #140]	; (8015b0c <LL_TIM_BDTR_Init+0x120>)
 8015a7e:	4293      	cmp	r3, r2
 8015a80:	d10d      	bne.n	8015a9e <LL_TIM_BDTR_Init+0xb2>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	695b      	ldr	r3, [r3, #20]
 8015a8c:	4313      	orrs	r3, r2
 8015a8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	699b      	ldr	r3, [r3, #24]
 8015a9a:	4313      	orrs	r3, r2
 8015a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	4a18      	ldr	r2, [pc, #96]	; (8015b04 <LL_TIM_BDTR_Init+0x118>)
 8015aa2:	4293      	cmp	r3, r2
 8015aa4:	d007      	beq.n	8015ab6 <LL_TIM_BDTR_Init+0xca>
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4a17      	ldr	r2, [pc, #92]	; (8015b08 <LL_TIM_BDTR_Init+0x11c>)
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	d003      	beq.n	8015ab6 <LL_TIM_BDTR_Init+0xca>
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4a16      	ldr	r2, [pc, #88]	; (8015b0c <LL_TIM_BDTR_Init+0x120>)
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d11b      	bne.n	8015aee <LL_TIM_BDTR_Init+0x102>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac0:	4313      	orrs	r3, r2
 8015ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	69db      	ldr	r3, [r3, #28]
 8015ace:	4313      	orrs	r3, r2
 8015ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	6a1b      	ldr	r3, [r3, #32]
 8015adc:	4313      	orrs	r3, r2
 8015ade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aea:	4313      	orrs	r3, r2
 8015aec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8015af4:	2300      	movs	r3, #0
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3714      	adds	r7, #20
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	40012c00 	.word	0x40012c00
 8015b08:	40013400 	.word	0x40013400
 8015b0c:	40015000 	.word	0x40015000

08015b10 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6a1b      	ldr	r3, [r3, #32]
 8015b1e:	f023 0201 	bic.w	r2, r3, #1
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6a1b      	ldr	r3, [r3, #32]
 8015b2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	699b      	ldr	r3, [r3, #24]
 8015b36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	f023 0303 	bic.w	r3, r3, #3
 8015b3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b4a:	683a      	ldr	r2, [r7, #0]
 8015b4c:	6812      	ldr	r2, [r2, #0]
 8015b4e:	4313      	orrs	r3, r2
 8015b50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	f023 0202 	bic.w	r2, r3, #2
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	691b      	ldr	r3, [r3, #16]
 8015b5c:	4313      	orrs	r3, r2
 8015b5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	f023 0201 	bic.w	r2, r3, #1
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	4313      	orrs	r3, r2
 8015b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4a24      	ldr	r2, [pc, #144]	; (8015c04 <OC1Config+0xf4>)
 8015b72:	4293      	cmp	r3, r2
 8015b74:	d013      	beq.n	8015b9e <OC1Config+0x8e>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	4a23      	ldr	r2, [pc, #140]	; (8015c08 <OC1Config+0xf8>)
 8015b7a:	4293      	cmp	r3, r2
 8015b7c:	d00f      	beq.n	8015b9e <OC1Config+0x8e>
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4a22      	ldr	r2, [pc, #136]	; (8015c0c <OC1Config+0xfc>)
 8015b82:	4293      	cmp	r3, r2
 8015b84:	d00b      	beq.n	8015b9e <OC1Config+0x8e>
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	4a21      	ldr	r2, [pc, #132]	; (8015c10 <OC1Config+0x100>)
 8015b8a:	4293      	cmp	r3, r2
 8015b8c:	d007      	beq.n	8015b9e <OC1Config+0x8e>
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4a20      	ldr	r2, [pc, #128]	; (8015c14 <OC1Config+0x104>)
 8015b92:	4293      	cmp	r3, r2
 8015b94:	d003      	beq.n	8015b9e <OC1Config+0x8e>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4a1f      	ldr	r2, [pc, #124]	; (8015c18 <OC1Config+0x108>)
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	d11e      	bne.n	8015bdc <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	f023 0208 	bic.w	r2, r3, #8
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	695b      	ldr	r3, [r3, #20]
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	4313      	orrs	r3, r2
 8015bac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	f023 0204 	bic.w	r2, r3, #4
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4313      	orrs	r3, r2
 8015bbc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	699b      	ldr	r3, [r3, #24]
 8015bc8:	4313      	orrs	r3, r2
 8015bca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	69db      	ldr	r3, [r3, #28]
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4313      	orrs	r3, r2
 8015bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	693a      	ldr	r2, [r7, #16]
 8015be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	4619      	mov	r1, r3
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f7ff fd93 	bl	801571a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	697a      	ldr	r2, [r7, #20]
 8015bf8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3718      	adds	r7, #24
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	40012c00 	.word	0x40012c00
 8015c08:	40013400 	.word	0x40013400
 8015c0c:	40014000 	.word	0x40014000
 8015c10:	40014400 	.word	0x40014400
 8015c14:	40014800 	.word	0x40014800
 8015c18:	40015000 	.word	0x40015000

08015c1c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6a1b      	ldr	r3, [r3, #32]
 8015c2a:	f023 0210 	bic.w	r2, r3, #16
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6a1b      	ldr	r3, [r3, #32]
 8015c36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	699b      	ldr	r3, [r3, #24]
 8015c42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015c56:	683a      	ldr	r2, [r7, #0]
 8015c58:	6812      	ldr	r2, [r2, #0]
 8015c5a:	0212      	lsls	r2, r2, #8
 8015c5c:	4313      	orrs	r3, r2
 8015c5e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f023 0220 	bic.w	r2, r3, #32
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	691b      	ldr	r3, [r3, #16]
 8015c6a:	011b      	lsls	r3, r3, #4
 8015c6c:	4313      	orrs	r3, r2
 8015c6e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	f023 0210 	bic.w	r2, r3, #16
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	011b      	lsls	r3, r3, #4
 8015c7c:	4313      	orrs	r3, r2
 8015c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	4a25      	ldr	r2, [pc, #148]	; (8015d18 <OC2Config+0xfc>)
 8015c84:	4293      	cmp	r3, r2
 8015c86:	d013      	beq.n	8015cb0 <OC2Config+0x94>
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	4a24      	ldr	r2, [pc, #144]	; (8015d1c <OC2Config+0x100>)
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d00f      	beq.n	8015cb0 <OC2Config+0x94>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	4a23      	ldr	r2, [pc, #140]	; (8015d20 <OC2Config+0x104>)
 8015c94:	4293      	cmp	r3, r2
 8015c96:	d00b      	beq.n	8015cb0 <OC2Config+0x94>
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	4a22      	ldr	r2, [pc, #136]	; (8015d24 <OC2Config+0x108>)
 8015c9c:	4293      	cmp	r3, r2
 8015c9e:	d007      	beq.n	8015cb0 <OC2Config+0x94>
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	4a21      	ldr	r2, [pc, #132]	; (8015d28 <OC2Config+0x10c>)
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	d003      	beq.n	8015cb0 <OC2Config+0x94>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	4a20      	ldr	r2, [pc, #128]	; (8015d2c <OC2Config+0x110>)
 8015cac:	4293      	cmp	r3, r2
 8015cae:	d11f      	bne.n	8015cf0 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015cb6:	683b      	ldr	r3, [r7, #0]
 8015cb8:	695b      	ldr	r3, [r3, #20]
 8015cba:	019b      	lsls	r3, r3, #6
 8015cbc:	4313      	orrs	r3, r2
 8015cbe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	689b      	ldr	r3, [r3, #8]
 8015cca:	019b      	lsls	r3, r3, #6
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	699b      	ldr	r3, [r3, #24]
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	4313      	orrs	r3, r2
 8015cde:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	69db      	ldr	r3, [r3, #28]
 8015cea:	00db      	lsls	r3, r3, #3
 8015cec:	4313      	orrs	r3, r2
 8015cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	693a      	ldr	r2, [r7, #16]
 8015cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	4619      	mov	r1, r3
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7ff fd17 	bl	8015736 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	697a      	ldr	r2, [r7, #20]
 8015d0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015d0e:	2300      	movs	r3, #0
}
 8015d10:	4618      	mov	r0, r3
 8015d12:	3718      	adds	r7, #24
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}
 8015d18:	40012c00 	.word	0x40012c00
 8015d1c:	40013400 	.word	0x40013400
 8015d20:	40014000 	.word	0x40014000
 8015d24:	40014400 	.word	0x40014400
 8015d28:	40014800 	.word	0x40014800
 8015d2c:	40015000 	.word	0x40015000

08015d30 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6a1b      	ldr	r3, [r3, #32]
 8015d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6a1b      	ldr	r3, [r3, #32]
 8015d4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	69db      	ldr	r3, [r3, #28]
 8015d56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	f023 0303 	bic.w	r3, r3, #3
 8015d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d6a:	683a      	ldr	r2, [r7, #0]
 8015d6c:	6812      	ldr	r2, [r2, #0]
 8015d6e:	4313      	orrs	r3, r2
 8015d70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	691b      	ldr	r3, [r3, #16]
 8015d7c:	021b      	lsls	r3, r3, #8
 8015d7e:	4313      	orrs	r3, r2
 8015d80:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	021b      	lsls	r3, r3, #8
 8015d8e:	4313      	orrs	r3, r2
 8015d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	4a25      	ldr	r2, [pc, #148]	; (8015e2c <OC3Config+0xfc>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d013      	beq.n	8015dc2 <OC3Config+0x92>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4a24      	ldr	r2, [pc, #144]	; (8015e30 <OC3Config+0x100>)
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	d00f      	beq.n	8015dc2 <OC3Config+0x92>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4a23      	ldr	r2, [pc, #140]	; (8015e34 <OC3Config+0x104>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d00b      	beq.n	8015dc2 <OC3Config+0x92>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4a22      	ldr	r2, [pc, #136]	; (8015e38 <OC3Config+0x108>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d007      	beq.n	8015dc2 <OC3Config+0x92>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	4a21      	ldr	r2, [pc, #132]	; (8015e3c <OC3Config+0x10c>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d003      	beq.n	8015dc2 <OC3Config+0x92>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	4a20      	ldr	r2, [pc, #128]	; (8015e40 <OC3Config+0x110>)
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d11f      	bne.n	8015e02 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	695b      	ldr	r3, [r3, #20]
 8015dcc:	029b      	lsls	r3, r3, #10
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	029b      	lsls	r3, r3, #10
 8015dde:	4313      	orrs	r3, r2
 8015de0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	699b      	ldr	r3, [r3, #24]
 8015dec:	011b      	lsls	r3, r3, #4
 8015dee:	4313      	orrs	r3, r2
 8015df0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	69db      	ldr	r3, [r3, #28]
 8015dfc:	015b      	lsls	r3, r3, #5
 8015dfe:	4313      	orrs	r3, r2
 8015e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	693a      	ldr	r2, [r7, #16]
 8015e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	68fa      	ldr	r2, [r7, #12]
 8015e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	68db      	ldr	r3, [r3, #12]
 8015e12:	4619      	mov	r1, r3
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f7ff fc9c 	bl	8015752 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	697a      	ldr	r2, [r7, #20]
 8015e1e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015e20:	2300      	movs	r3, #0
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3718      	adds	r7, #24
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	40012c00 	.word	0x40012c00
 8015e30:	40013400 	.word	0x40013400
 8015e34:	40014000 	.word	0x40014000
 8015e38:	40014400 	.word	0x40014400
 8015e3c:	40014800 	.word	0x40014800
 8015e40:	40015000 	.word	0x40015000

08015e44 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b086      	sub	sp, #24
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6a1b      	ldr	r3, [r3, #32]
 8015e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	6a1b      	ldr	r3, [r3, #32]
 8015e5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	69db      	ldr	r3, [r3, #28]
 8015e6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015e7e:	683a      	ldr	r2, [r7, #0]
 8015e80:	6812      	ldr	r2, [r2, #0]
 8015e82:	0212      	lsls	r2, r2, #8
 8015e84:	4313      	orrs	r3, r2
 8015e86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015e8e:	683b      	ldr	r3, [r7, #0]
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	031b      	lsls	r3, r3, #12
 8015e94:	4313      	orrs	r3, r2
 8015e96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	685b      	ldr	r3, [r3, #4]
 8015ea2:	031b      	lsls	r3, r3, #12
 8015ea4:	4313      	orrs	r3, r2
 8015ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	4a25      	ldr	r2, [pc, #148]	; (8015f40 <OC4Config+0xfc>)
 8015eac:	4293      	cmp	r3, r2
 8015eae:	d013      	beq.n	8015ed8 <OC4Config+0x94>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	4a24      	ldr	r2, [pc, #144]	; (8015f44 <OC4Config+0x100>)
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	d00f      	beq.n	8015ed8 <OC4Config+0x94>
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	4a23      	ldr	r2, [pc, #140]	; (8015f48 <OC4Config+0x104>)
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d00b      	beq.n	8015ed8 <OC4Config+0x94>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4a22      	ldr	r2, [pc, #136]	; (8015f4c <OC4Config+0x108>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d007      	beq.n	8015ed8 <OC4Config+0x94>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	4a21      	ldr	r2, [pc, #132]	; (8015f50 <OC4Config+0x10c>)
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	d003      	beq.n	8015ed8 <OC4Config+0x94>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	4a20      	ldr	r2, [pc, #128]	; (8015f54 <OC4Config+0x110>)
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	d11f      	bne.n	8015f18 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	695b      	ldr	r3, [r3, #20]
 8015ee2:	039b      	lsls	r3, r3, #14
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	689b      	ldr	r3, [r3, #8]
 8015ef2:	039b      	lsls	r3, r3, #14
 8015ef4:	4313      	orrs	r3, r2
 8015ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	699b      	ldr	r3, [r3, #24]
 8015f02:	019b      	lsls	r3, r3, #6
 8015f04:	4313      	orrs	r3, r2
 8015f06:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	69db      	ldr	r3, [r3, #28]
 8015f12:	01db      	lsls	r3, r3, #7
 8015f14:	4313      	orrs	r3, r2
 8015f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	693a      	ldr	r2, [r7, #16]
 8015f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	68db      	ldr	r3, [r3, #12]
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7ff fc1f 	bl	801576e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	697a      	ldr	r2, [r7, #20]
 8015f34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015f36:	2300      	movs	r3, #0
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3718      	adds	r7, #24
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}
 8015f40:	40012c00 	.word	0x40012c00
 8015f44:	40013400 	.word	0x40013400
 8015f48:	40014000 	.word	0x40014000
 8015f4c:	40014400 	.word	0x40014400
 8015f50:	40014800 	.word	0x40014800
 8015f54:	40015000 	.word	0x40015000

08015f58 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b084      	sub	sp, #16
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6a1b      	ldr	r3, [r3, #32]
 8015f66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6a1b      	ldr	r3, [r3, #32]
 8015f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f78:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f84:	683a      	ldr	r2, [r7, #0]
 8015f86:	6812      	ldr	r2, [r2, #0]
 8015f88:	4313      	orrs	r3, r2
 8015f8a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	691b      	ldr	r3, [r3, #16]
 8015f96:	041b      	lsls	r3, r3, #16
 8015f98:	4313      	orrs	r3, r2
 8015f9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	041b      	lsls	r3, r3, #16
 8015fa8:	4313      	orrs	r3, r2
 8015faa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	4a19      	ldr	r2, [pc, #100]	; (8016014 <OC5Config+0xbc>)
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	d013      	beq.n	8015fdc <OC5Config+0x84>
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	4a18      	ldr	r2, [pc, #96]	; (8016018 <OC5Config+0xc0>)
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d00f      	beq.n	8015fdc <OC5Config+0x84>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	4a17      	ldr	r2, [pc, #92]	; (801601c <OC5Config+0xc4>)
 8015fc0:	4293      	cmp	r3, r2
 8015fc2:	d00b      	beq.n	8015fdc <OC5Config+0x84>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	4a16      	ldr	r2, [pc, #88]	; (8016020 <OC5Config+0xc8>)
 8015fc8:	4293      	cmp	r3, r2
 8015fca:	d007      	beq.n	8015fdc <OC5Config+0x84>
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	4a15      	ldr	r2, [pc, #84]	; (8016024 <OC5Config+0xcc>)
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d003      	beq.n	8015fdc <OC5Config+0x84>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	4a14      	ldr	r2, [pc, #80]	; (8016028 <OC5Config+0xd0>)
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	d109      	bne.n	8015ff0 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	699b      	ldr	r3, [r3, #24]
 8015fe8:	021b      	lsls	r3, r3, #8
 8015fea:	431a      	orrs	r2, r3
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68ba      	ldr	r2, [r7, #8]
 8015ff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	68db      	ldr	r3, [r3, #12]
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7ff fbc4 	bl	801578a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	68fa      	ldr	r2, [r7, #12]
 8016006:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8016008:	2300      	movs	r3, #0
}
 801600a:	4618      	mov	r0, r3
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	40012c00 	.word	0x40012c00
 8016018:	40013400 	.word	0x40013400
 801601c:	40014000 	.word	0x40014000
 8016020:	40014400 	.word	0x40014400
 8016024:	40014800 	.word	0x40014800
 8016028:	40015000 	.word	0x40015000

0801602c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a1b      	ldr	r3, [r3, #32]
 801603a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a1b      	ldr	r3, [r3, #32]
 8016046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801604c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016058:	683a      	ldr	r2, [r7, #0]
 801605a:	6812      	ldr	r2, [r2, #0]
 801605c:	0212      	lsls	r2, r2, #8
 801605e:	4313      	orrs	r3, r2
 8016060:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	691b      	ldr	r3, [r3, #16]
 801606c:	051b      	lsls	r3, r3, #20
 801606e:	4313      	orrs	r3, r2
 8016070:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	685b      	ldr	r3, [r3, #4]
 801607c:	051b      	lsls	r3, r3, #20
 801607e:	4313      	orrs	r3, r2
 8016080:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	4a18      	ldr	r2, [pc, #96]	; (80160e8 <OC6Config+0xbc>)
 8016086:	4293      	cmp	r3, r2
 8016088:	d013      	beq.n	80160b2 <OC6Config+0x86>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	4a17      	ldr	r2, [pc, #92]	; (80160ec <OC6Config+0xc0>)
 801608e:	4293      	cmp	r3, r2
 8016090:	d00f      	beq.n	80160b2 <OC6Config+0x86>
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	4a16      	ldr	r2, [pc, #88]	; (80160f0 <OC6Config+0xc4>)
 8016096:	4293      	cmp	r3, r2
 8016098:	d00b      	beq.n	80160b2 <OC6Config+0x86>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	4a15      	ldr	r2, [pc, #84]	; (80160f4 <OC6Config+0xc8>)
 801609e:	4293      	cmp	r3, r2
 80160a0:	d007      	beq.n	80160b2 <OC6Config+0x86>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	4a14      	ldr	r2, [pc, #80]	; (80160f8 <OC6Config+0xcc>)
 80160a6:	4293      	cmp	r3, r2
 80160a8:	d003      	beq.n	80160b2 <OC6Config+0x86>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	4a13      	ldr	r2, [pc, #76]	; (80160fc <OC6Config+0xd0>)
 80160ae:	4293      	cmp	r3, r2
 80160b0:	d109      	bne.n	80160c6 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	699b      	ldr	r3, [r3, #24]
 80160be:	029b      	lsls	r3, r3, #10
 80160c0:	431a      	orrs	r2, r3
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	68ba      	ldr	r2, [r7, #8]
 80160ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f7ff fb69 	bl	80157aa <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	68fa      	ldr	r2, [r7, #12]
 80160dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80160de:	2300      	movs	r3, #0
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3710      	adds	r7, #16
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	40012c00 	.word	0x40012c00
 80160ec:	40013400 	.word	0x40013400
 80160f0:	40014000 	.word	0x40014000
 80160f4:	40014400 	.word	0x40014400
 80160f8:	40014800 	.word	0x40014800
 80160fc:	40015000 	.word	0x40015000

08016100 <LL_USART_IsEnabled>:
{
 8016100:	b480      	push	{r7}
 8016102:	b083      	sub	sp, #12
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f003 0301 	and.w	r3, r3, #1
 8016110:	2b01      	cmp	r3, #1
 8016112:	d101      	bne.n	8016118 <LL_USART_IsEnabled+0x18>
 8016114:	2301      	movs	r3, #1
 8016116:	e000      	b.n	801611a <LL_USART_IsEnabled+0x1a>
 8016118:	2300      	movs	r3, #0
}
 801611a:	4618      	mov	r0, r3
 801611c:	370c      	adds	r7, #12
 801611e:	46bd      	mov	sp, r7
 8016120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016124:	4770      	bx	lr

08016126 <LL_USART_SetPrescaler>:
{
 8016126:	b480      	push	{r7}
 8016128:	b083      	sub	sp, #12
 801612a:	af00      	add	r7, sp, #0
 801612c:	6078      	str	r0, [r7, #4]
 801612e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016134:	f023 030f 	bic.w	r3, r3, #15
 8016138:	683a      	ldr	r2, [r7, #0]
 801613a:	b292      	uxth	r2, r2
 801613c:	431a      	orrs	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8016142:	bf00      	nop
 8016144:	370c      	adds	r7, #12
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr

0801614e <LL_USART_SetStopBitsLength>:
{
 801614e:	b480      	push	{r7}
 8016150:	b083      	sub	sp, #12
 8016152:	af00      	add	r7, sp, #0
 8016154:	6078      	str	r0, [r7, #4]
 8016156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	431a      	orrs	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	605a      	str	r2, [r3, #4]
}
 8016168:	bf00      	nop
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr

08016174 <LL_USART_SetHWFlowCtrl>:
{
 8016174:	b480      	push	{r7}
 8016176:	b083      	sub	sp, #12
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	689b      	ldr	r3, [r3, #8]
 8016182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	431a      	orrs	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	609a      	str	r2, [r3, #8]
}
 801618e:	bf00      	nop
 8016190:	370c      	adds	r7, #12
 8016192:	46bd      	mov	sp, r7
 8016194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016198:	4770      	bx	lr
	...

0801619c <LL_USART_SetBaudRate>:
{
 801619c:	b480      	push	{r7}
 801619e:	b087      	sub	sp, #28
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
 80161a8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2b0b      	cmp	r3, #11
 80161ae:	d83c      	bhi.n	801622a <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80161b0:	6a3b      	ldr	r3, [r7, #32]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d039      	beq.n	801622a <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80161bc:	d122      	bne.n	8016204 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	461a      	mov	r2, r3
 80161c4:	4b1c      	ldr	r3, [pc, #112]	; (8016238 <LL_USART_SetBaudRate+0x9c>)
 80161c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161ca:	68ba      	ldr	r2, [r7, #8]
 80161cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80161d0:	005a      	lsls	r2, r3, #1
 80161d2:	6a3b      	ldr	r3, [r7, #32]
 80161d4:	085b      	lsrs	r3, r3, #1
 80161d6:	441a      	add	r2, r3
 80161d8:	6a3b      	ldr	r3, [r7, #32]
 80161da:	fbb2 f3f3 	udiv	r3, r2, r3
 80161de:	b29b      	uxth	r3, r3
 80161e0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80161e2:	697a      	ldr	r2, [r7, #20]
 80161e4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80161e8:	4013      	ands	r3, r2
 80161ea:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	085b      	lsrs	r3, r3, #1
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	f003 0307 	and.w	r3, r3, #7
 80161f6:	693a      	ldr	r2, [r7, #16]
 80161f8:	4313      	orrs	r3, r2
 80161fa:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	693a      	ldr	r2, [r7, #16]
 8016200:	60da      	str	r2, [r3, #12]
}
 8016202:	e012      	b.n	801622a <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	b2db      	uxtb	r3, r3
 8016208:	461a      	mov	r2, r3
 801620a:	4b0b      	ldr	r3, [pc, #44]	; (8016238 <LL_USART_SetBaudRate+0x9c>)
 801620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016210:	68ba      	ldr	r2, [r7, #8]
 8016212:	fbb2 f2f3 	udiv	r2, r2, r3
 8016216:	6a3b      	ldr	r3, [r7, #32]
 8016218:	085b      	lsrs	r3, r3, #1
 801621a:	441a      	add	r2, r3
 801621c:	6a3b      	ldr	r3, [r7, #32]
 801621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016222:	b29b      	uxth	r3, r3
 8016224:	461a      	mov	r2, r3
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	60da      	str	r2, [r3, #12]
}
 801622a:	bf00      	nop
 801622c:	371c      	adds	r7, #28
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	0801c9cc 	.word	0x0801c9cc

0801623c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b086      	sub	sp, #24
 8016240:	af02      	add	r7, sp, #8
 8016242:	6078      	str	r0, [r7, #4]
 8016244:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8016246:	2301      	movs	r3, #1
 8016248:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 801624a:	2300      	movs	r3, #0
 801624c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f7ff ff56 	bl	8016100 <LL_USART_IsEnabled>
 8016254:	4603      	mov	r3, r0
 8016256:	2b00      	cmp	r3, #0
 8016258:	d165      	bne.n	8016326 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	4b34      	ldr	r3, [pc, #208]	; (8016330 <LL_USART_Init+0xf4>)
 8016260:	4013      	ands	r3, r2
 8016262:	683a      	ldr	r2, [r7, #0]
 8016264:	6891      	ldr	r1, [r2, #8]
 8016266:	683a      	ldr	r2, [r7, #0]
 8016268:	6912      	ldr	r2, [r2, #16]
 801626a:	4311      	orrs	r1, r2
 801626c:	683a      	ldr	r2, [r7, #0]
 801626e:	6952      	ldr	r2, [r2, #20]
 8016270:	4311      	orrs	r1, r2
 8016272:	683a      	ldr	r2, [r7, #0]
 8016274:	69d2      	ldr	r2, [r2, #28]
 8016276:	430a      	orrs	r2, r1
 8016278:	431a      	orrs	r2, r3
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	4619      	mov	r1, r3
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f7ff ff62 	bl	801614e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	699b      	ldr	r3, [r3, #24]
 801628e:	4619      	mov	r1, r3
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f7ff ff6f 	bl	8016174 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4a26      	ldr	r2, [pc, #152]	; (8016334 <LL_USART_Init+0xf8>)
 801629a:	4293      	cmp	r3, r2
 801629c:	d104      	bne.n	80162a8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 801629e:	2003      	movs	r0, #3
 80162a0:	f7fe ffb2 	bl	8015208 <LL_RCC_GetUSARTClockFreq>
 80162a4:	60b8      	str	r0, [r7, #8]
 80162a6:	e023      	b.n	80162f0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	4a23      	ldr	r2, [pc, #140]	; (8016338 <LL_USART_Init+0xfc>)
 80162ac:	4293      	cmp	r3, r2
 80162ae:	d104      	bne.n	80162ba <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80162b0:	200c      	movs	r0, #12
 80162b2:	f7fe ffa9 	bl	8015208 <LL_RCC_GetUSARTClockFreq>
 80162b6:	60b8      	str	r0, [r7, #8]
 80162b8:	e01a      	b.n	80162f0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	4a1f      	ldr	r2, [pc, #124]	; (801633c <LL_USART_Init+0x100>)
 80162be:	4293      	cmp	r3, r2
 80162c0:	d104      	bne.n	80162cc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80162c2:	2030      	movs	r0, #48	; 0x30
 80162c4:	f7fe ffa0 	bl	8015208 <LL_RCC_GetUSARTClockFreq>
 80162c8:	60b8      	str	r0, [r7, #8]
 80162ca:	e011      	b.n	80162f0 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	4a1c      	ldr	r2, [pc, #112]	; (8016340 <LL_USART_Init+0x104>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d104      	bne.n	80162de <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80162d4:	20c0      	movs	r0, #192	; 0xc0
 80162d6:	f7ff f85b 	bl	8015390 <LL_RCC_GetUARTClockFreq>
 80162da:	60b8      	str	r0, [r7, #8]
 80162dc:	e008      	b.n	80162f0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	4a18      	ldr	r2, [pc, #96]	; (8016344 <LL_USART_Init+0x108>)
 80162e2:	4293      	cmp	r3, r2
 80162e4:	d104      	bne.n	80162f0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80162e6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80162ea:	f7ff f851 	bl	8015390 <LL_RCC_GetUARTClockFreq>
 80162ee:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d011      	beq.n	801631a <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00d      	beq.n	801631a <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80162fe:	2300      	movs	r3, #0
 8016300:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	681a      	ldr	r2, [r3, #0]
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	69d9      	ldr	r1, [r3, #28]
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	460b      	mov	r3, r1
 8016312:	68b9      	ldr	r1, [r7, #8]
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f7ff ff41 	bl	801619c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	4619      	mov	r1, r3
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f7ff ff00 	bl	8016126 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8016326:	7bfb      	ldrb	r3, [r7, #15]
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	efff69f3 	.word	0xefff69f3
 8016334:	40013800 	.word	0x40013800
 8016338:	40004400 	.word	0x40004400
 801633c:	40004800 	.word	0x40004800
 8016340:	40004c00 	.word	0x40004c00
 8016344:	40005000 	.word	0x40005000

08016348 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8016348:	b480      	push	{r7}
 801634a:	b083      	sub	sp, #12
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	fbb2 f3f3 	udiv	r3, r2, r3
 801635a:	4a07      	ldr	r2, [pc, #28]	; (8016378 <LL_InitTick+0x30>)
 801635c:	3b01      	subs	r3, #1
 801635e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8016360:	4b05      	ldr	r3, [pc, #20]	; (8016378 <LL_InitTick+0x30>)
 8016362:	2200      	movs	r2, #0
 8016364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016366:	4b04      	ldr	r3, [pc, #16]	; (8016378 <LL_InitTick+0x30>)
 8016368:	2205      	movs	r2, #5
 801636a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 801636c:	bf00      	nop
 801636e:	370c      	adds	r7, #12
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr
 8016378:	e000e010 	.word	0xe000e010

0801637c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8016384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f7ff ffdd 	bl	8016348 <LL_InitTick>
}
 801638e:	bf00      	nop
 8016390:	3708      	adds	r7, #8
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
	...

08016398 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8016398:	b480      	push	{r7}
 801639a:	b085      	sub	sp, #20
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80163a0:	4b10      	ldr	r3, [pc, #64]	; (80163e4 <LL_mDelay+0x4c>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80163a6:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163b2:	d00c      	beq.n	80163ce <LL_mDelay+0x36>
  {
    tmpDelay++;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	3301      	adds	r3, #1
 80163b8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80163ba:	e008      	b.n	80163ce <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80163bc:	4b09      	ldr	r3, [pc, #36]	; (80163e4 <LL_mDelay+0x4c>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d002      	beq.n	80163ce <LL_mDelay+0x36>
    {
      tmpDelay--;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	3b01      	subs	r3, #1
 80163cc:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1f3      	bne.n	80163bc <LL_mDelay+0x24>
    }
  }
}
 80163d4:	bf00      	nop
 80163d6:	bf00      	nop
 80163d8:	3714      	adds	r7, #20
 80163da:	46bd      	mov	sp, r7
 80163dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e0:	4770      	bx	lr
 80163e2:	bf00      	nop
 80163e4:	e000e010 	.word	0xe000e010

080163e8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80163f0:	4a04      	ldr	r2, [pc, #16]	; (8016404 <LL_SetSystemCoreClock+0x1c>)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6013      	str	r3, [r2, #0]
}
 80163f6:	bf00      	nop
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop
 8016404:	20000004 	.word	0x20000004

08016408 <__cvt>:
 8016408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801640c:	ec55 4b10 	vmov	r4, r5, d0
 8016410:	2d00      	cmp	r5, #0
 8016412:	460e      	mov	r6, r1
 8016414:	4619      	mov	r1, r3
 8016416:	462b      	mov	r3, r5
 8016418:	bfbb      	ittet	lt
 801641a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801641e:	461d      	movlt	r5, r3
 8016420:	2300      	movge	r3, #0
 8016422:	232d      	movlt	r3, #45	; 0x2d
 8016424:	700b      	strb	r3, [r1, #0]
 8016426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801642c:	4691      	mov	r9, r2
 801642e:	f023 0820 	bic.w	r8, r3, #32
 8016432:	bfbc      	itt	lt
 8016434:	4622      	movlt	r2, r4
 8016436:	4614      	movlt	r4, r2
 8016438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801643c:	d005      	beq.n	801644a <__cvt+0x42>
 801643e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016442:	d100      	bne.n	8016446 <__cvt+0x3e>
 8016444:	3601      	adds	r6, #1
 8016446:	2102      	movs	r1, #2
 8016448:	e000      	b.n	801644c <__cvt+0x44>
 801644a:	2103      	movs	r1, #3
 801644c:	ab03      	add	r3, sp, #12
 801644e:	9301      	str	r3, [sp, #4]
 8016450:	ab02      	add	r3, sp, #8
 8016452:	9300      	str	r3, [sp, #0]
 8016454:	ec45 4b10 	vmov	d0, r4, r5
 8016458:	4653      	mov	r3, sl
 801645a:	4632      	mov	r2, r6
 801645c:	f001 fa4c 	bl	80178f8 <_dtoa_r>
 8016460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016464:	4607      	mov	r7, r0
 8016466:	d102      	bne.n	801646e <__cvt+0x66>
 8016468:	f019 0f01 	tst.w	r9, #1
 801646c:	d022      	beq.n	80164b4 <__cvt+0xac>
 801646e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016472:	eb07 0906 	add.w	r9, r7, r6
 8016476:	d110      	bne.n	801649a <__cvt+0x92>
 8016478:	783b      	ldrb	r3, [r7, #0]
 801647a:	2b30      	cmp	r3, #48	; 0x30
 801647c:	d10a      	bne.n	8016494 <__cvt+0x8c>
 801647e:	2200      	movs	r2, #0
 8016480:	2300      	movs	r3, #0
 8016482:	4620      	mov	r0, r4
 8016484:	4629      	mov	r1, r5
 8016486:	f7ea fb47 	bl	8000b18 <__aeabi_dcmpeq>
 801648a:	b918      	cbnz	r0, 8016494 <__cvt+0x8c>
 801648c:	f1c6 0601 	rsb	r6, r6, #1
 8016490:	f8ca 6000 	str.w	r6, [sl]
 8016494:	f8da 3000 	ldr.w	r3, [sl]
 8016498:	4499      	add	r9, r3
 801649a:	2200      	movs	r2, #0
 801649c:	2300      	movs	r3, #0
 801649e:	4620      	mov	r0, r4
 80164a0:	4629      	mov	r1, r5
 80164a2:	f7ea fb39 	bl	8000b18 <__aeabi_dcmpeq>
 80164a6:	b108      	cbz	r0, 80164ac <__cvt+0xa4>
 80164a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80164ac:	2230      	movs	r2, #48	; 0x30
 80164ae:	9b03      	ldr	r3, [sp, #12]
 80164b0:	454b      	cmp	r3, r9
 80164b2:	d307      	bcc.n	80164c4 <__cvt+0xbc>
 80164b4:	9b03      	ldr	r3, [sp, #12]
 80164b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164b8:	1bdb      	subs	r3, r3, r7
 80164ba:	4638      	mov	r0, r7
 80164bc:	6013      	str	r3, [r2, #0]
 80164be:	b004      	add	sp, #16
 80164c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164c4:	1c59      	adds	r1, r3, #1
 80164c6:	9103      	str	r1, [sp, #12]
 80164c8:	701a      	strb	r2, [r3, #0]
 80164ca:	e7f0      	b.n	80164ae <__cvt+0xa6>

080164cc <__exponent>:
 80164cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164ce:	4603      	mov	r3, r0
 80164d0:	2900      	cmp	r1, #0
 80164d2:	bfb8      	it	lt
 80164d4:	4249      	neglt	r1, r1
 80164d6:	f803 2b02 	strb.w	r2, [r3], #2
 80164da:	bfb4      	ite	lt
 80164dc:	222d      	movlt	r2, #45	; 0x2d
 80164de:	222b      	movge	r2, #43	; 0x2b
 80164e0:	2909      	cmp	r1, #9
 80164e2:	7042      	strb	r2, [r0, #1]
 80164e4:	dd2a      	ble.n	801653c <__exponent+0x70>
 80164e6:	f10d 0207 	add.w	r2, sp, #7
 80164ea:	4617      	mov	r7, r2
 80164ec:	260a      	movs	r6, #10
 80164ee:	4694      	mov	ip, r2
 80164f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80164f4:	fb06 1415 	mls	r4, r6, r5, r1
 80164f8:	3430      	adds	r4, #48	; 0x30
 80164fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80164fe:	460c      	mov	r4, r1
 8016500:	2c63      	cmp	r4, #99	; 0x63
 8016502:	f102 32ff 	add.w	r2, r2, #4294967295
 8016506:	4629      	mov	r1, r5
 8016508:	dcf1      	bgt.n	80164ee <__exponent+0x22>
 801650a:	3130      	adds	r1, #48	; 0x30
 801650c:	f1ac 0402 	sub.w	r4, ip, #2
 8016510:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016514:	1c41      	adds	r1, r0, #1
 8016516:	4622      	mov	r2, r4
 8016518:	42ba      	cmp	r2, r7
 801651a:	d30a      	bcc.n	8016532 <__exponent+0x66>
 801651c:	f10d 0209 	add.w	r2, sp, #9
 8016520:	eba2 020c 	sub.w	r2, r2, ip
 8016524:	42bc      	cmp	r4, r7
 8016526:	bf88      	it	hi
 8016528:	2200      	movhi	r2, #0
 801652a:	4413      	add	r3, r2
 801652c:	1a18      	subs	r0, r3, r0
 801652e:	b003      	add	sp, #12
 8016530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016532:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016536:	f801 5f01 	strb.w	r5, [r1, #1]!
 801653a:	e7ed      	b.n	8016518 <__exponent+0x4c>
 801653c:	2330      	movs	r3, #48	; 0x30
 801653e:	3130      	adds	r1, #48	; 0x30
 8016540:	7083      	strb	r3, [r0, #2]
 8016542:	70c1      	strb	r1, [r0, #3]
 8016544:	1d03      	adds	r3, r0, #4
 8016546:	e7f1      	b.n	801652c <__exponent+0x60>

08016548 <_printf_float>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	ed2d 8b02 	vpush	{d8}
 8016550:	b08d      	sub	sp, #52	; 0x34
 8016552:	460c      	mov	r4, r1
 8016554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016558:	4616      	mov	r6, r2
 801655a:	461f      	mov	r7, r3
 801655c:	4605      	mov	r5, r0
 801655e:	f001 f8b7 	bl	80176d0 <_localeconv_r>
 8016562:	f8d0 a000 	ldr.w	sl, [r0]
 8016566:	4650      	mov	r0, sl
 8016568:	f7e9 feaa 	bl	80002c0 <strlen>
 801656c:	2300      	movs	r3, #0
 801656e:	930a      	str	r3, [sp, #40]	; 0x28
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	9305      	str	r3, [sp, #20]
 8016574:	f8d8 3000 	ldr.w	r3, [r8]
 8016578:	f894 b018 	ldrb.w	fp, [r4, #24]
 801657c:	3307      	adds	r3, #7
 801657e:	f023 0307 	bic.w	r3, r3, #7
 8016582:	f103 0208 	add.w	r2, r3, #8
 8016586:	f8c8 2000 	str.w	r2, [r8]
 801658a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801658e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016592:	9307      	str	r3, [sp, #28]
 8016594:	f8cd 8018 	str.w	r8, [sp, #24]
 8016598:	ee08 0a10 	vmov	s16, r0
 801659c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80165a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165a4:	4b9e      	ldr	r3, [pc, #632]	; (8016820 <_printf_float+0x2d8>)
 80165a6:	f04f 32ff 	mov.w	r2, #4294967295
 80165aa:	f7ea fae7 	bl	8000b7c <__aeabi_dcmpun>
 80165ae:	bb88      	cbnz	r0, 8016614 <_printf_float+0xcc>
 80165b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165b4:	4b9a      	ldr	r3, [pc, #616]	; (8016820 <_printf_float+0x2d8>)
 80165b6:	f04f 32ff 	mov.w	r2, #4294967295
 80165ba:	f7ea fac1 	bl	8000b40 <__aeabi_dcmple>
 80165be:	bb48      	cbnz	r0, 8016614 <_printf_float+0xcc>
 80165c0:	2200      	movs	r2, #0
 80165c2:	2300      	movs	r3, #0
 80165c4:	4640      	mov	r0, r8
 80165c6:	4649      	mov	r1, r9
 80165c8:	f7ea fab0 	bl	8000b2c <__aeabi_dcmplt>
 80165cc:	b110      	cbz	r0, 80165d4 <_printf_float+0x8c>
 80165ce:	232d      	movs	r3, #45	; 0x2d
 80165d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165d4:	4a93      	ldr	r2, [pc, #588]	; (8016824 <_printf_float+0x2dc>)
 80165d6:	4b94      	ldr	r3, [pc, #592]	; (8016828 <_printf_float+0x2e0>)
 80165d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80165dc:	bf94      	ite	ls
 80165de:	4690      	movls	r8, r2
 80165e0:	4698      	movhi	r8, r3
 80165e2:	2303      	movs	r3, #3
 80165e4:	6123      	str	r3, [r4, #16]
 80165e6:	9b05      	ldr	r3, [sp, #20]
 80165e8:	f023 0304 	bic.w	r3, r3, #4
 80165ec:	6023      	str	r3, [r4, #0]
 80165ee:	f04f 0900 	mov.w	r9, #0
 80165f2:	9700      	str	r7, [sp, #0]
 80165f4:	4633      	mov	r3, r6
 80165f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80165f8:	4621      	mov	r1, r4
 80165fa:	4628      	mov	r0, r5
 80165fc:	f000 f9da 	bl	80169b4 <_printf_common>
 8016600:	3001      	adds	r0, #1
 8016602:	f040 8090 	bne.w	8016726 <_printf_float+0x1de>
 8016606:	f04f 30ff 	mov.w	r0, #4294967295
 801660a:	b00d      	add	sp, #52	; 0x34
 801660c:	ecbd 8b02 	vpop	{d8}
 8016610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016614:	4642      	mov	r2, r8
 8016616:	464b      	mov	r3, r9
 8016618:	4640      	mov	r0, r8
 801661a:	4649      	mov	r1, r9
 801661c:	f7ea faae 	bl	8000b7c <__aeabi_dcmpun>
 8016620:	b140      	cbz	r0, 8016634 <_printf_float+0xec>
 8016622:	464b      	mov	r3, r9
 8016624:	2b00      	cmp	r3, #0
 8016626:	bfbc      	itt	lt
 8016628:	232d      	movlt	r3, #45	; 0x2d
 801662a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801662e:	4a7f      	ldr	r2, [pc, #508]	; (801682c <_printf_float+0x2e4>)
 8016630:	4b7f      	ldr	r3, [pc, #508]	; (8016830 <_printf_float+0x2e8>)
 8016632:	e7d1      	b.n	80165d8 <_printf_float+0x90>
 8016634:	6863      	ldr	r3, [r4, #4]
 8016636:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801663a:	9206      	str	r2, [sp, #24]
 801663c:	1c5a      	adds	r2, r3, #1
 801663e:	d13f      	bne.n	80166c0 <_printf_float+0x178>
 8016640:	2306      	movs	r3, #6
 8016642:	6063      	str	r3, [r4, #4]
 8016644:	9b05      	ldr	r3, [sp, #20]
 8016646:	6861      	ldr	r1, [r4, #4]
 8016648:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801664c:	2300      	movs	r3, #0
 801664e:	9303      	str	r3, [sp, #12]
 8016650:	ab0a      	add	r3, sp, #40	; 0x28
 8016652:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016656:	ab09      	add	r3, sp, #36	; 0x24
 8016658:	ec49 8b10 	vmov	d0, r8, r9
 801665c:	9300      	str	r3, [sp, #0]
 801665e:	6022      	str	r2, [r4, #0]
 8016660:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016664:	4628      	mov	r0, r5
 8016666:	f7ff fecf 	bl	8016408 <__cvt>
 801666a:	9b06      	ldr	r3, [sp, #24]
 801666c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801666e:	2b47      	cmp	r3, #71	; 0x47
 8016670:	4680      	mov	r8, r0
 8016672:	d108      	bne.n	8016686 <_printf_float+0x13e>
 8016674:	1cc8      	adds	r0, r1, #3
 8016676:	db02      	blt.n	801667e <_printf_float+0x136>
 8016678:	6863      	ldr	r3, [r4, #4]
 801667a:	4299      	cmp	r1, r3
 801667c:	dd41      	ble.n	8016702 <_printf_float+0x1ba>
 801667e:	f1ab 0302 	sub.w	r3, fp, #2
 8016682:	fa5f fb83 	uxtb.w	fp, r3
 8016686:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801668a:	d820      	bhi.n	80166ce <_printf_float+0x186>
 801668c:	3901      	subs	r1, #1
 801668e:	465a      	mov	r2, fp
 8016690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016694:	9109      	str	r1, [sp, #36]	; 0x24
 8016696:	f7ff ff19 	bl	80164cc <__exponent>
 801669a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801669c:	1813      	adds	r3, r2, r0
 801669e:	2a01      	cmp	r2, #1
 80166a0:	4681      	mov	r9, r0
 80166a2:	6123      	str	r3, [r4, #16]
 80166a4:	dc02      	bgt.n	80166ac <_printf_float+0x164>
 80166a6:	6822      	ldr	r2, [r4, #0]
 80166a8:	07d2      	lsls	r2, r2, #31
 80166aa:	d501      	bpl.n	80166b0 <_printf_float+0x168>
 80166ac:	3301      	adds	r3, #1
 80166ae:	6123      	str	r3, [r4, #16]
 80166b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d09c      	beq.n	80165f2 <_printf_float+0xaa>
 80166b8:	232d      	movs	r3, #45	; 0x2d
 80166ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166be:	e798      	b.n	80165f2 <_printf_float+0xaa>
 80166c0:	9a06      	ldr	r2, [sp, #24]
 80166c2:	2a47      	cmp	r2, #71	; 0x47
 80166c4:	d1be      	bne.n	8016644 <_printf_float+0xfc>
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d1bc      	bne.n	8016644 <_printf_float+0xfc>
 80166ca:	2301      	movs	r3, #1
 80166cc:	e7b9      	b.n	8016642 <_printf_float+0xfa>
 80166ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80166d2:	d118      	bne.n	8016706 <_printf_float+0x1be>
 80166d4:	2900      	cmp	r1, #0
 80166d6:	6863      	ldr	r3, [r4, #4]
 80166d8:	dd0b      	ble.n	80166f2 <_printf_float+0x1aa>
 80166da:	6121      	str	r1, [r4, #16]
 80166dc:	b913      	cbnz	r3, 80166e4 <_printf_float+0x19c>
 80166de:	6822      	ldr	r2, [r4, #0]
 80166e0:	07d0      	lsls	r0, r2, #31
 80166e2:	d502      	bpl.n	80166ea <_printf_float+0x1a2>
 80166e4:	3301      	adds	r3, #1
 80166e6:	440b      	add	r3, r1
 80166e8:	6123      	str	r3, [r4, #16]
 80166ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80166ec:	f04f 0900 	mov.w	r9, #0
 80166f0:	e7de      	b.n	80166b0 <_printf_float+0x168>
 80166f2:	b913      	cbnz	r3, 80166fa <_printf_float+0x1b2>
 80166f4:	6822      	ldr	r2, [r4, #0]
 80166f6:	07d2      	lsls	r2, r2, #31
 80166f8:	d501      	bpl.n	80166fe <_printf_float+0x1b6>
 80166fa:	3302      	adds	r3, #2
 80166fc:	e7f4      	b.n	80166e8 <_printf_float+0x1a0>
 80166fe:	2301      	movs	r3, #1
 8016700:	e7f2      	b.n	80166e8 <_printf_float+0x1a0>
 8016702:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016708:	4299      	cmp	r1, r3
 801670a:	db05      	blt.n	8016718 <_printf_float+0x1d0>
 801670c:	6823      	ldr	r3, [r4, #0]
 801670e:	6121      	str	r1, [r4, #16]
 8016710:	07d8      	lsls	r0, r3, #31
 8016712:	d5ea      	bpl.n	80166ea <_printf_float+0x1a2>
 8016714:	1c4b      	adds	r3, r1, #1
 8016716:	e7e7      	b.n	80166e8 <_printf_float+0x1a0>
 8016718:	2900      	cmp	r1, #0
 801671a:	bfd4      	ite	le
 801671c:	f1c1 0202 	rsble	r2, r1, #2
 8016720:	2201      	movgt	r2, #1
 8016722:	4413      	add	r3, r2
 8016724:	e7e0      	b.n	80166e8 <_printf_float+0x1a0>
 8016726:	6823      	ldr	r3, [r4, #0]
 8016728:	055a      	lsls	r2, r3, #21
 801672a:	d407      	bmi.n	801673c <_printf_float+0x1f4>
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	4642      	mov	r2, r8
 8016730:	4631      	mov	r1, r6
 8016732:	4628      	mov	r0, r5
 8016734:	47b8      	blx	r7
 8016736:	3001      	adds	r0, #1
 8016738:	d12c      	bne.n	8016794 <_printf_float+0x24c>
 801673a:	e764      	b.n	8016606 <_printf_float+0xbe>
 801673c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016740:	f240 80e0 	bls.w	8016904 <_printf_float+0x3bc>
 8016744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016748:	2200      	movs	r2, #0
 801674a:	2300      	movs	r3, #0
 801674c:	f7ea f9e4 	bl	8000b18 <__aeabi_dcmpeq>
 8016750:	2800      	cmp	r0, #0
 8016752:	d034      	beq.n	80167be <_printf_float+0x276>
 8016754:	4a37      	ldr	r2, [pc, #220]	; (8016834 <_printf_float+0x2ec>)
 8016756:	2301      	movs	r3, #1
 8016758:	4631      	mov	r1, r6
 801675a:	4628      	mov	r0, r5
 801675c:	47b8      	blx	r7
 801675e:	3001      	adds	r0, #1
 8016760:	f43f af51 	beq.w	8016606 <_printf_float+0xbe>
 8016764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016768:	429a      	cmp	r2, r3
 801676a:	db02      	blt.n	8016772 <_printf_float+0x22a>
 801676c:	6823      	ldr	r3, [r4, #0]
 801676e:	07d8      	lsls	r0, r3, #31
 8016770:	d510      	bpl.n	8016794 <_printf_float+0x24c>
 8016772:	ee18 3a10 	vmov	r3, s16
 8016776:	4652      	mov	r2, sl
 8016778:	4631      	mov	r1, r6
 801677a:	4628      	mov	r0, r5
 801677c:	47b8      	blx	r7
 801677e:	3001      	adds	r0, #1
 8016780:	f43f af41 	beq.w	8016606 <_printf_float+0xbe>
 8016784:	f04f 0800 	mov.w	r8, #0
 8016788:	f104 091a 	add.w	r9, r4, #26
 801678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801678e:	3b01      	subs	r3, #1
 8016790:	4543      	cmp	r3, r8
 8016792:	dc09      	bgt.n	80167a8 <_printf_float+0x260>
 8016794:	6823      	ldr	r3, [r4, #0]
 8016796:	079b      	lsls	r3, r3, #30
 8016798:	f100 8107 	bmi.w	80169aa <_printf_float+0x462>
 801679c:	68e0      	ldr	r0, [r4, #12]
 801679e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167a0:	4298      	cmp	r0, r3
 80167a2:	bfb8      	it	lt
 80167a4:	4618      	movlt	r0, r3
 80167a6:	e730      	b.n	801660a <_printf_float+0xc2>
 80167a8:	2301      	movs	r3, #1
 80167aa:	464a      	mov	r2, r9
 80167ac:	4631      	mov	r1, r6
 80167ae:	4628      	mov	r0, r5
 80167b0:	47b8      	blx	r7
 80167b2:	3001      	adds	r0, #1
 80167b4:	f43f af27 	beq.w	8016606 <_printf_float+0xbe>
 80167b8:	f108 0801 	add.w	r8, r8, #1
 80167bc:	e7e6      	b.n	801678c <_printf_float+0x244>
 80167be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dc39      	bgt.n	8016838 <_printf_float+0x2f0>
 80167c4:	4a1b      	ldr	r2, [pc, #108]	; (8016834 <_printf_float+0x2ec>)
 80167c6:	2301      	movs	r3, #1
 80167c8:	4631      	mov	r1, r6
 80167ca:	4628      	mov	r0, r5
 80167cc:	47b8      	blx	r7
 80167ce:	3001      	adds	r0, #1
 80167d0:	f43f af19 	beq.w	8016606 <_printf_float+0xbe>
 80167d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80167d8:	4313      	orrs	r3, r2
 80167da:	d102      	bne.n	80167e2 <_printf_float+0x29a>
 80167dc:	6823      	ldr	r3, [r4, #0]
 80167de:	07d9      	lsls	r1, r3, #31
 80167e0:	d5d8      	bpl.n	8016794 <_printf_float+0x24c>
 80167e2:	ee18 3a10 	vmov	r3, s16
 80167e6:	4652      	mov	r2, sl
 80167e8:	4631      	mov	r1, r6
 80167ea:	4628      	mov	r0, r5
 80167ec:	47b8      	blx	r7
 80167ee:	3001      	adds	r0, #1
 80167f0:	f43f af09 	beq.w	8016606 <_printf_float+0xbe>
 80167f4:	f04f 0900 	mov.w	r9, #0
 80167f8:	f104 0a1a 	add.w	sl, r4, #26
 80167fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167fe:	425b      	negs	r3, r3
 8016800:	454b      	cmp	r3, r9
 8016802:	dc01      	bgt.n	8016808 <_printf_float+0x2c0>
 8016804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016806:	e792      	b.n	801672e <_printf_float+0x1e6>
 8016808:	2301      	movs	r3, #1
 801680a:	4652      	mov	r2, sl
 801680c:	4631      	mov	r1, r6
 801680e:	4628      	mov	r0, r5
 8016810:	47b8      	blx	r7
 8016812:	3001      	adds	r0, #1
 8016814:	f43f aef7 	beq.w	8016606 <_printf_float+0xbe>
 8016818:	f109 0901 	add.w	r9, r9, #1
 801681c:	e7ee      	b.n	80167fc <_printf_float+0x2b4>
 801681e:	bf00      	nop
 8016820:	7fefffff 	.word	0x7fefffff
 8016824:	0801c9fc 	.word	0x0801c9fc
 8016828:	0801ca00 	.word	0x0801ca00
 801682c:	0801ca04 	.word	0x0801ca04
 8016830:	0801ca08 	.word	0x0801ca08
 8016834:	0801ca0c 	.word	0x0801ca0c
 8016838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801683a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801683c:	429a      	cmp	r2, r3
 801683e:	bfa8      	it	ge
 8016840:	461a      	movge	r2, r3
 8016842:	2a00      	cmp	r2, #0
 8016844:	4691      	mov	r9, r2
 8016846:	dc37      	bgt.n	80168b8 <_printf_float+0x370>
 8016848:	f04f 0b00 	mov.w	fp, #0
 801684c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016850:	f104 021a 	add.w	r2, r4, #26
 8016854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016856:	9305      	str	r3, [sp, #20]
 8016858:	eba3 0309 	sub.w	r3, r3, r9
 801685c:	455b      	cmp	r3, fp
 801685e:	dc33      	bgt.n	80168c8 <_printf_float+0x380>
 8016860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016864:	429a      	cmp	r2, r3
 8016866:	db3b      	blt.n	80168e0 <_printf_float+0x398>
 8016868:	6823      	ldr	r3, [r4, #0]
 801686a:	07da      	lsls	r2, r3, #31
 801686c:	d438      	bmi.n	80168e0 <_printf_float+0x398>
 801686e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016872:	eba2 0903 	sub.w	r9, r2, r3
 8016876:	9b05      	ldr	r3, [sp, #20]
 8016878:	1ad2      	subs	r2, r2, r3
 801687a:	4591      	cmp	r9, r2
 801687c:	bfa8      	it	ge
 801687e:	4691      	movge	r9, r2
 8016880:	f1b9 0f00 	cmp.w	r9, #0
 8016884:	dc35      	bgt.n	80168f2 <_printf_float+0x3aa>
 8016886:	f04f 0800 	mov.w	r8, #0
 801688a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801688e:	f104 0a1a 	add.w	sl, r4, #26
 8016892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016896:	1a9b      	subs	r3, r3, r2
 8016898:	eba3 0309 	sub.w	r3, r3, r9
 801689c:	4543      	cmp	r3, r8
 801689e:	f77f af79 	ble.w	8016794 <_printf_float+0x24c>
 80168a2:	2301      	movs	r3, #1
 80168a4:	4652      	mov	r2, sl
 80168a6:	4631      	mov	r1, r6
 80168a8:	4628      	mov	r0, r5
 80168aa:	47b8      	blx	r7
 80168ac:	3001      	adds	r0, #1
 80168ae:	f43f aeaa 	beq.w	8016606 <_printf_float+0xbe>
 80168b2:	f108 0801 	add.w	r8, r8, #1
 80168b6:	e7ec      	b.n	8016892 <_printf_float+0x34a>
 80168b8:	4613      	mov	r3, r2
 80168ba:	4631      	mov	r1, r6
 80168bc:	4642      	mov	r2, r8
 80168be:	4628      	mov	r0, r5
 80168c0:	47b8      	blx	r7
 80168c2:	3001      	adds	r0, #1
 80168c4:	d1c0      	bne.n	8016848 <_printf_float+0x300>
 80168c6:	e69e      	b.n	8016606 <_printf_float+0xbe>
 80168c8:	2301      	movs	r3, #1
 80168ca:	4631      	mov	r1, r6
 80168cc:	4628      	mov	r0, r5
 80168ce:	9205      	str	r2, [sp, #20]
 80168d0:	47b8      	blx	r7
 80168d2:	3001      	adds	r0, #1
 80168d4:	f43f ae97 	beq.w	8016606 <_printf_float+0xbe>
 80168d8:	9a05      	ldr	r2, [sp, #20]
 80168da:	f10b 0b01 	add.w	fp, fp, #1
 80168de:	e7b9      	b.n	8016854 <_printf_float+0x30c>
 80168e0:	ee18 3a10 	vmov	r3, s16
 80168e4:	4652      	mov	r2, sl
 80168e6:	4631      	mov	r1, r6
 80168e8:	4628      	mov	r0, r5
 80168ea:	47b8      	blx	r7
 80168ec:	3001      	adds	r0, #1
 80168ee:	d1be      	bne.n	801686e <_printf_float+0x326>
 80168f0:	e689      	b.n	8016606 <_printf_float+0xbe>
 80168f2:	9a05      	ldr	r2, [sp, #20]
 80168f4:	464b      	mov	r3, r9
 80168f6:	4442      	add	r2, r8
 80168f8:	4631      	mov	r1, r6
 80168fa:	4628      	mov	r0, r5
 80168fc:	47b8      	blx	r7
 80168fe:	3001      	adds	r0, #1
 8016900:	d1c1      	bne.n	8016886 <_printf_float+0x33e>
 8016902:	e680      	b.n	8016606 <_printf_float+0xbe>
 8016904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016906:	2a01      	cmp	r2, #1
 8016908:	dc01      	bgt.n	801690e <_printf_float+0x3c6>
 801690a:	07db      	lsls	r3, r3, #31
 801690c:	d53a      	bpl.n	8016984 <_printf_float+0x43c>
 801690e:	2301      	movs	r3, #1
 8016910:	4642      	mov	r2, r8
 8016912:	4631      	mov	r1, r6
 8016914:	4628      	mov	r0, r5
 8016916:	47b8      	blx	r7
 8016918:	3001      	adds	r0, #1
 801691a:	f43f ae74 	beq.w	8016606 <_printf_float+0xbe>
 801691e:	ee18 3a10 	vmov	r3, s16
 8016922:	4652      	mov	r2, sl
 8016924:	4631      	mov	r1, r6
 8016926:	4628      	mov	r0, r5
 8016928:	47b8      	blx	r7
 801692a:	3001      	adds	r0, #1
 801692c:	f43f ae6b 	beq.w	8016606 <_printf_float+0xbe>
 8016930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016934:	2200      	movs	r2, #0
 8016936:	2300      	movs	r3, #0
 8016938:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801693c:	f7ea f8ec 	bl	8000b18 <__aeabi_dcmpeq>
 8016940:	b9d8      	cbnz	r0, 801697a <_printf_float+0x432>
 8016942:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016946:	f108 0201 	add.w	r2, r8, #1
 801694a:	4631      	mov	r1, r6
 801694c:	4628      	mov	r0, r5
 801694e:	47b8      	blx	r7
 8016950:	3001      	adds	r0, #1
 8016952:	d10e      	bne.n	8016972 <_printf_float+0x42a>
 8016954:	e657      	b.n	8016606 <_printf_float+0xbe>
 8016956:	2301      	movs	r3, #1
 8016958:	4652      	mov	r2, sl
 801695a:	4631      	mov	r1, r6
 801695c:	4628      	mov	r0, r5
 801695e:	47b8      	blx	r7
 8016960:	3001      	adds	r0, #1
 8016962:	f43f ae50 	beq.w	8016606 <_printf_float+0xbe>
 8016966:	f108 0801 	add.w	r8, r8, #1
 801696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801696c:	3b01      	subs	r3, #1
 801696e:	4543      	cmp	r3, r8
 8016970:	dcf1      	bgt.n	8016956 <_printf_float+0x40e>
 8016972:	464b      	mov	r3, r9
 8016974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016978:	e6da      	b.n	8016730 <_printf_float+0x1e8>
 801697a:	f04f 0800 	mov.w	r8, #0
 801697e:	f104 0a1a 	add.w	sl, r4, #26
 8016982:	e7f2      	b.n	801696a <_printf_float+0x422>
 8016984:	2301      	movs	r3, #1
 8016986:	4642      	mov	r2, r8
 8016988:	e7df      	b.n	801694a <_printf_float+0x402>
 801698a:	2301      	movs	r3, #1
 801698c:	464a      	mov	r2, r9
 801698e:	4631      	mov	r1, r6
 8016990:	4628      	mov	r0, r5
 8016992:	47b8      	blx	r7
 8016994:	3001      	adds	r0, #1
 8016996:	f43f ae36 	beq.w	8016606 <_printf_float+0xbe>
 801699a:	f108 0801 	add.w	r8, r8, #1
 801699e:	68e3      	ldr	r3, [r4, #12]
 80169a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169a2:	1a5b      	subs	r3, r3, r1
 80169a4:	4543      	cmp	r3, r8
 80169a6:	dcf0      	bgt.n	801698a <_printf_float+0x442>
 80169a8:	e6f8      	b.n	801679c <_printf_float+0x254>
 80169aa:	f04f 0800 	mov.w	r8, #0
 80169ae:	f104 0919 	add.w	r9, r4, #25
 80169b2:	e7f4      	b.n	801699e <_printf_float+0x456>

080169b4 <_printf_common>:
 80169b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169b8:	4616      	mov	r6, r2
 80169ba:	4699      	mov	r9, r3
 80169bc:	688a      	ldr	r2, [r1, #8]
 80169be:	690b      	ldr	r3, [r1, #16]
 80169c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80169c4:	4293      	cmp	r3, r2
 80169c6:	bfb8      	it	lt
 80169c8:	4613      	movlt	r3, r2
 80169ca:	6033      	str	r3, [r6, #0]
 80169cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80169d0:	4607      	mov	r7, r0
 80169d2:	460c      	mov	r4, r1
 80169d4:	b10a      	cbz	r2, 80169da <_printf_common+0x26>
 80169d6:	3301      	adds	r3, #1
 80169d8:	6033      	str	r3, [r6, #0]
 80169da:	6823      	ldr	r3, [r4, #0]
 80169dc:	0699      	lsls	r1, r3, #26
 80169de:	bf42      	ittt	mi
 80169e0:	6833      	ldrmi	r3, [r6, #0]
 80169e2:	3302      	addmi	r3, #2
 80169e4:	6033      	strmi	r3, [r6, #0]
 80169e6:	6825      	ldr	r5, [r4, #0]
 80169e8:	f015 0506 	ands.w	r5, r5, #6
 80169ec:	d106      	bne.n	80169fc <_printf_common+0x48>
 80169ee:	f104 0a19 	add.w	sl, r4, #25
 80169f2:	68e3      	ldr	r3, [r4, #12]
 80169f4:	6832      	ldr	r2, [r6, #0]
 80169f6:	1a9b      	subs	r3, r3, r2
 80169f8:	42ab      	cmp	r3, r5
 80169fa:	dc26      	bgt.n	8016a4a <_printf_common+0x96>
 80169fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a00:	1e13      	subs	r3, r2, #0
 8016a02:	6822      	ldr	r2, [r4, #0]
 8016a04:	bf18      	it	ne
 8016a06:	2301      	movne	r3, #1
 8016a08:	0692      	lsls	r2, r2, #26
 8016a0a:	d42b      	bmi.n	8016a64 <_printf_common+0xb0>
 8016a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a10:	4649      	mov	r1, r9
 8016a12:	4638      	mov	r0, r7
 8016a14:	47c0      	blx	r8
 8016a16:	3001      	adds	r0, #1
 8016a18:	d01e      	beq.n	8016a58 <_printf_common+0xa4>
 8016a1a:	6823      	ldr	r3, [r4, #0]
 8016a1c:	6922      	ldr	r2, [r4, #16]
 8016a1e:	f003 0306 	and.w	r3, r3, #6
 8016a22:	2b04      	cmp	r3, #4
 8016a24:	bf02      	ittt	eq
 8016a26:	68e5      	ldreq	r5, [r4, #12]
 8016a28:	6833      	ldreq	r3, [r6, #0]
 8016a2a:	1aed      	subeq	r5, r5, r3
 8016a2c:	68a3      	ldr	r3, [r4, #8]
 8016a2e:	bf0c      	ite	eq
 8016a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a34:	2500      	movne	r5, #0
 8016a36:	4293      	cmp	r3, r2
 8016a38:	bfc4      	itt	gt
 8016a3a:	1a9b      	subgt	r3, r3, r2
 8016a3c:	18ed      	addgt	r5, r5, r3
 8016a3e:	2600      	movs	r6, #0
 8016a40:	341a      	adds	r4, #26
 8016a42:	42b5      	cmp	r5, r6
 8016a44:	d11a      	bne.n	8016a7c <_printf_common+0xc8>
 8016a46:	2000      	movs	r0, #0
 8016a48:	e008      	b.n	8016a5c <_printf_common+0xa8>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	4652      	mov	r2, sl
 8016a4e:	4649      	mov	r1, r9
 8016a50:	4638      	mov	r0, r7
 8016a52:	47c0      	blx	r8
 8016a54:	3001      	adds	r0, #1
 8016a56:	d103      	bne.n	8016a60 <_printf_common+0xac>
 8016a58:	f04f 30ff 	mov.w	r0, #4294967295
 8016a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a60:	3501      	adds	r5, #1
 8016a62:	e7c6      	b.n	80169f2 <_printf_common+0x3e>
 8016a64:	18e1      	adds	r1, r4, r3
 8016a66:	1c5a      	adds	r2, r3, #1
 8016a68:	2030      	movs	r0, #48	; 0x30
 8016a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a6e:	4422      	add	r2, r4
 8016a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a78:	3302      	adds	r3, #2
 8016a7a:	e7c7      	b.n	8016a0c <_printf_common+0x58>
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	4622      	mov	r2, r4
 8016a80:	4649      	mov	r1, r9
 8016a82:	4638      	mov	r0, r7
 8016a84:	47c0      	blx	r8
 8016a86:	3001      	adds	r0, #1
 8016a88:	d0e6      	beq.n	8016a58 <_printf_common+0xa4>
 8016a8a:	3601      	adds	r6, #1
 8016a8c:	e7d9      	b.n	8016a42 <_printf_common+0x8e>
	...

08016a90 <_printf_i>:
 8016a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a94:	7e0f      	ldrb	r7, [r1, #24]
 8016a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a98:	2f78      	cmp	r7, #120	; 0x78
 8016a9a:	4691      	mov	r9, r2
 8016a9c:	4680      	mov	r8, r0
 8016a9e:	460c      	mov	r4, r1
 8016aa0:	469a      	mov	sl, r3
 8016aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016aa6:	d807      	bhi.n	8016ab8 <_printf_i+0x28>
 8016aa8:	2f62      	cmp	r7, #98	; 0x62
 8016aaa:	d80a      	bhi.n	8016ac2 <_printf_i+0x32>
 8016aac:	2f00      	cmp	r7, #0
 8016aae:	f000 80d4 	beq.w	8016c5a <_printf_i+0x1ca>
 8016ab2:	2f58      	cmp	r7, #88	; 0x58
 8016ab4:	f000 80c0 	beq.w	8016c38 <_printf_i+0x1a8>
 8016ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016ac0:	e03a      	b.n	8016b38 <_printf_i+0xa8>
 8016ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016ac6:	2b15      	cmp	r3, #21
 8016ac8:	d8f6      	bhi.n	8016ab8 <_printf_i+0x28>
 8016aca:	a101      	add	r1, pc, #4	; (adr r1, 8016ad0 <_printf_i+0x40>)
 8016acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016ad0:	08016b29 	.word	0x08016b29
 8016ad4:	08016b3d 	.word	0x08016b3d
 8016ad8:	08016ab9 	.word	0x08016ab9
 8016adc:	08016ab9 	.word	0x08016ab9
 8016ae0:	08016ab9 	.word	0x08016ab9
 8016ae4:	08016ab9 	.word	0x08016ab9
 8016ae8:	08016b3d 	.word	0x08016b3d
 8016aec:	08016ab9 	.word	0x08016ab9
 8016af0:	08016ab9 	.word	0x08016ab9
 8016af4:	08016ab9 	.word	0x08016ab9
 8016af8:	08016ab9 	.word	0x08016ab9
 8016afc:	08016c41 	.word	0x08016c41
 8016b00:	08016b69 	.word	0x08016b69
 8016b04:	08016bfb 	.word	0x08016bfb
 8016b08:	08016ab9 	.word	0x08016ab9
 8016b0c:	08016ab9 	.word	0x08016ab9
 8016b10:	08016c63 	.word	0x08016c63
 8016b14:	08016ab9 	.word	0x08016ab9
 8016b18:	08016b69 	.word	0x08016b69
 8016b1c:	08016ab9 	.word	0x08016ab9
 8016b20:	08016ab9 	.word	0x08016ab9
 8016b24:	08016c03 	.word	0x08016c03
 8016b28:	682b      	ldr	r3, [r5, #0]
 8016b2a:	1d1a      	adds	r2, r3, #4
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	602a      	str	r2, [r5, #0]
 8016b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016b38:	2301      	movs	r3, #1
 8016b3a:	e09f      	b.n	8016c7c <_printf_i+0x1ec>
 8016b3c:	6820      	ldr	r0, [r4, #0]
 8016b3e:	682b      	ldr	r3, [r5, #0]
 8016b40:	0607      	lsls	r7, r0, #24
 8016b42:	f103 0104 	add.w	r1, r3, #4
 8016b46:	6029      	str	r1, [r5, #0]
 8016b48:	d501      	bpl.n	8016b4e <_printf_i+0xbe>
 8016b4a:	681e      	ldr	r6, [r3, #0]
 8016b4c:	e003      	b.n	8016b56 <_printf_i+0xc6>
 8016b4e:	0646      	lsls	r6, r0, #25
 8016b50:	d5fb      	bpl.n	8016b4a <_printf_i+0xba>
 8016b52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016b56:	2e00      	cmp	r6, #0
 8016b58:	da03      	bge.n	8016b62 <_printf_i+0xd2>
 8016b5a:	232d      	movs	r3, #45	; 0x2d
 8016b5c:	4276      	negs	r6, r6
 8016b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b62:	485a      	ldr	r0, [pc, #360]	; (8016ccc <_printf_i+0x23c>)
 8016b64:	230a      	movs	r3, #10
 8016b66:	e012      	b.n	8016b8e <_printf_i+0xfe>
 8016b68:	682b      	ldr	r3, [r5, #0]
 8016b6a:	6820      	ldr	r0, [r4, #0]
 8016b6c:	1d19      	adds	r1, r3, #4
 8016b6e:	6029      	str	r1, [r5, #0]
 8016b70:	0605      	lsls	r5, r0, #24
 8016b72:	d501      	bpl.n	8016b78 <_printf_i+0xe8>
 8016b74:	681e      	ldr	r6, [r3, #0]
 8016b76:	e002      	b.n	8016b7e <_printf_i+0xee>
 8016b78:	0641      	lsls	r1, r0, #25
 8016b7a:	d5fb      	bpl.n	8016b74 <_printf_i+0xe4>
 8016b7c:	881e      	ldrh	r6, [r3, #0]
 8016b7e:	4853      	ldr	r0, [pc, #332]	; (8016ccc <_printf_i+0x23c>)
 8016b80:	2f6f      	cmp	r7, #111	; 0x6f
 8016b82:	bf0c      	ite	eq
 8016b84:	2308      	moveq	r3, #8
 8016b86:	230a      	movne	r3, #10
 8016b88:	2100      	movs	r1, #0
 8016b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016b8e:	6865      	ldr	r5, [r4, #4]
 8016b90:	60a5      	str	r5, [r4, #8]
 8016b92:	2d00      	cmp	r5, #0
 8016b94:	bfa2      	ittt	ge
 8016b96:	6821      	ldrge	r1, [r4, #0]
 8016b98:	f021 0104 	bicge.w	r1, r1, #4
 8016b9c:	6021      	strge	r1, [r4, #0]
 8016b9e:	b90e      	cbnz	r6, 8016ba4 <_printf_i+0x114>
 8016ba0:	2d00      	cmp	r5, #0
 8016ba2:	d04b      	beq.n	8016c3c <_printf_i+0x1ac>
 8016ba4:	4615      	mov	r5, r2
 8016ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8016baa:	fb03 6711 	mls	r7, r3, r1, r6
 8016bae:	5dc7      	ldrb	r7, [r0, r7]
 8016bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016bb4:	4637      	mov	r7, r6
 8016bb6:	42bb      	cmp	r3, r7
 8016bb8:	460e      	mov	r6, r1
 8016bba:	d9f4      	bls.n	8016ba6 <_printf_i+0x116>
 8016bbc:	2b08      	cmp	r3, #8
 8016bbe:	d10b      	bne.n	8016bd8 <_printf_i+0x148>
 8016bc0:	6823      	ldr	r3, [r4, #0]
 8016bc2:	07de      	lsls	r6, r3, #31
 8016bc4:	d508      	bpl.n	8016bd8 <_printf_i+0x148>
 8016bc6:	6923      	ldr	r3, [r4, #16]
 8016bc8:	6861      	ldr	r1, [r4, #4]
 8016bca:	4299      	cmp	r1, r3
 8016bcc:	bfde      	ittt	le
 8016bce:	2330      	movle	r3, #48	; 0x30
 8016bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016bd8:	1b52      	subs	r2, r2, r5
 8016bda:	6122      	str	r2, [r4, #16]
 8016bdc:	f8cd a000 	str.w	sl, [sp]
 8016be0:	464b      	mov	r3, r9
 8016be2:	aa03      	add	r2, sp, #12
 8016be4:	4621      	mov	r1, r4
 8016be6:	4640      	mov	r0, r8
 8016be8:	f7ff fee4 	bl	80169b4 <_printf_common>
 8016bec:	3001      	adds	r0, #1
 8016bee:	d14a      	bne.n	8016c86 <_printf_i+0x1f6>
 8016bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8016bf4:	b004      	add	sp, #16
 8016bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bfa:	6823      	ldr	r3, [r4, #0]
 8016bfc:	f043 0320 	orr.w	r3, r3, #32
 8016c00:	6023      	str	r3, [r4, #0]
 8016c02:	4833      	ldr	r0, [pc, #204]	; (8016cd0 <_printf_i+0x240>)
 8016c04:	2778      	movs	r7, #120	; 0x78
 8016c06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	6829      	ldr	r1, [r5, #0]
 8016c0e:	061f      	lsls	r7, r3, #24
 8016c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8016c14:	d402      	bmi.n	8016c1c <_printf_i+0x18c>
 8016c16:	065f      	lsls	r7, r3, #25
 8016c18:	bf48      	it	mi
 8016c1a:	b2b6      	uxthmi	r6, r6
 8016c1c:	07df      	lsls	r7, r3, #31
 8016c1e:	bf48      	it	mi
 8016c20:	f043 0320 	orrmi.w	r3, r3, #32
 8016c24:	6029      	str	r1, [r5, #0]
 8016c26:	bf48      	it	mi
 8016c28:	6023      	strmi	r3, [r4, #0]
 8016c2a:	b91e      	cbnz	r6, 8016c34 <_printf_i+0x1a4>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	f023 0320 	bic.w	r3, r3, #32
 8016c32:	6023      	str	r3, [r4, #0]
 8016c34:	2310      	movs	r3, #16
 8016c36:	e7a7      	b.n	8016b88 <_printf_i+0xf8>
 8016c38:	4824      	ldr	r0, [pc, #144]	; (8016ccc <_printf_i+0x23c>)
 8016c3a:	e7e4      	b.n	8016c06 <_printf_i+0x176>
 8016c3c:	4615      	mov	r5, r2
 8016c3e:	e7bd      	b.n	8016bbc <_printf_i+0x12c>
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	6826      	ldr	r6, [r4, #0]
 8016c44:	6961      	ldr	r1, [r4, #20]
 8016c46:	1d18      	adds	r0, r3, #4
 8016c48:	6028      	str	r0, [r5, #0]
 8016c4a:	0635      	lsls	r5, r6, #24
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	d501      	bpl.n	8016c54 <_printf_i+0x1c4>
 8016c50:	6019      	str	r1, [r3, #0]
 8016c52:	e002      	b.n	8016c5a <_printf_i+0x1ca>
 8016c54:	0670      	lsls	r0, r6, #25
 8016c56:	d5fb      	bpl.n	8016c50 <_printf_i+0x1c0>
 8016c58:	8019      	strh	r1, [r3, #0]
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	6123      	str	r3, [r4, #16]
 8016c5e:	4615      	mov	r5, r2
 8016c60:	e7bc      	b.n	8016bdc <_printf_i+0x14c>
 8016c62:	682b      	ldr	r3, [r5, #0]
 8016c64:	1d1a      	adds	r2, r3, #4
 8016c66:	602a      	str	r2, [r5, #0]
 8016c68:	681d      	ldr	r5, [r3, #0]
 8016c6a:	6862      	ldr	r2, [r4, #4]
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	4628      	mov	r0, r5
 8016c70:	f7e9 fad6 	bl	8000220 <memchr>
 8016c74:	b108      	cbz	r0, 8016c7a <_printf_i+0x1ea>
 8016c76:	1b40      	subs	r0, r0, r5
 8016c78:	6060      	str	r0, [r4, #4]
 8016c7a:	6863      	ldr	r3, [r4, #4]
 8016c7c:	6123      	str	r3, [r4, #16]
 8016c7e:	2300      	movs	r3, #0
 8016c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c84:	e7aa      	b.n	8016bdc <_printf_i+0x14c>
 8016c86:	6923      	ldr	r3, [r4, #16]
 8016c88:	462a      	mov	r2, r5
 8016c8a:	4649      	mov	r1, r9
 8016c8c:	4640      	mov	r0, r8
 8016c8e:	47d0      	blx	sl
 8016c90:	3001      	adds	r0, #1
 8016c92:	d0ad      	beq.n	8016bf0 <_printf_i+0x160>
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	079b      	lsls	r3, r3, #30
 8016c98:	d413      	bmi.n	8016cc2 <_printf_i+0x232>
 8016c9a:	68e0      	ldr	r0, [r4, #12]
 8016c9c:	9b03      	ldr	r3, [sp, #12]
 8016c9e:	4298      	cmp	r0, r3
 8016ca0:	bfb8      	it	lt
 8016ca2:	4618      	movlt	r0, r3
 8016ca4:	e7a6      	b.n	8016bf4 <_printf_i+0x164>
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	4632      	mov	r2, r6
 8016caa:	4649      	mov	r1, r9
 8016cac:	4640      	mov	r0, r8
 8016cae:	47d0      	blx	sl
 8016cb0:	3001      	adds	r0, #1
 8016cb2:	d09d      	beq.n	8016bf0 <_printf_i+0x160>
 8016cb4:	3501      	adds	r5, #1
 8016cb6:	68e3      	ldr	r3, [r4, #12]
 8016cb8:	9903      	ldr	r1, [sp, #12]
 8016cba:	1a5b      	subs	r3, r3, r1
 8016cbc:	42ab      	cmp	r3, r5
 8016cbe:	dcf2      	bgt.n	8016ca6 <_printf_i+0x216>
 8016cc0:	e7eb      	b.n	8016c9a <_printf_i+0x20a>
 8016cc2:	2500      	movs	r5, #0
 8016cc4:	f104 0619 	add.w	r6, r4, #25
 8016cc8:	e7f5      	b.n	8016cb6 <_printf_i+0x226>
 8016cca:	bf00      	nop
 8016ccc:	0801ca0e 	.word	0x0801ca0e
 8016cd0:	0801ca1f 	.word	0x0801ca1f

08016cd4 <_scanf_float>:
 8016cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd8:	b087      	sub	sp, #28
 8016cda:	4617      	mov	r7, r2
 8016cdc:	9303      	str	r3, [sp, #12]
 8016cde:	688b      	ldr	r3, [r1, #8]
 8016ce0:	1e5a      	subs	r2, r3, #1
 8016ce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ce6:	bf83      	ittte	hi
 8016ce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016cec:	195b      	addhi	r3, r3, r5
 8016cee:	9302      	strhi	r3, [sp, #8]
 8016cf0:	2300      	movls	r3, #0
 8016cf2:	bf86      	itte	hi
 8016cf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016cf8:	608b      	strhi	r3, [r1, #8]
 8016cfa:	9302      	strls	r3, [sp, #8]
 8016cfc:	680b      	ldr	r3, [r1, #0]
 8016cfe:	468b      	mov	fp, r1
 8016d00:	2500      	movs	r5, #0
 8016d02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016d06:	f84b 3b1c 	str.w	r3, [fp], #28
 8016d0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016d0e:	4680      	mov	r8, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	465e      	mov	r6, fp
 8016d14:	46aa      	mov	sl, r5
 8016d16:	46a9      	mov	r9, r5
 8016d18:	9501      	str	r5, [sp, #4]
 8016d1a:	68a2      	ldr	r2, [r4, #8]
 8016d1c:	b152      	cbz	r2, 8016d34 <_scanf_float+0x60>
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	2b4e      	cmp	r3, #78	; 0x4e
 8016d24:	d864      	bhi.n	8016df0 <_scanf_float+0x11c>
 8016d26:	2b40      	cmp	r3, #64	; 0x40
 8016d28:	d83c      	bhi.n	8016da4 <_scanf_float+0xd0>
 8016d2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016d2e:	b2c8      	uxtb	r0, r1
 8016d30:	280e      	cmp	r0, #14
 8016d32:	d93a      	bls.n	8016daa <_scanf_float+0xd6>
 8016d34:	f1b9 0f00 	cmp.w	r9, #0
 8016d38:	d003      	beq.n	8016d42 <_scanf_float+0x6e>
 8016d3a:	6823      	ldr	r3, [r4, #0]
 8016d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d40:	6023      	str	r3, [r4, #0]
 8016d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d46:	f1ba 0f01 	cmp.w	sl, #1
 8016d4a:	f200 8113 	bhi.w	8016f74 <_scanf_float+0x2a0>
 8016d4e:	455e      	cmp	r6, fp
 8016d50:	f200 8105 	bhi.w	8016f5e <_scanf_float+0x28a>
 8016d54:	2501      	movs	r5, #1
 8016d56:	4628      	mov	r0, r5
 8016d58:	b007      	add	sp, #28
 8016d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016d62:	2a0d      	cmp	r2, #13
 8016d64:	d8e6      	bhi.n	8016d34 <_scanf_float+0x60>
 8016d66:	a101      	add	r1, pc, #4	; (adr r1, 8016d6c <_scanf_float+0x98>)
 8016d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016d6c:	08016eab 	.word	0x08016eab
 8016d70:	08016d35 	.word	0x08016d35
 8016d74:	08016d35 	.word	0x08016d35
 8016d78:	08016d35 	.word	0x08016d35
 8016d7c:	08016f0b 	.word	0x08016f0b
 8016d80:	08016ee3 	.word	0x08016ee3
 8016d84:	08016d35 	.word	0x08016d35
 8016d88:	08016d35 	.word	0x08016d35
 8016d8c:	08016eb9 	.word	0x08016eb9
 8016d90:	08016d35 	.word	0x08016d35
 8016d94:	08016d35 	.word	0x08016d35
 8016d98:	08016d35 	.word	0x08016d35
 8016d9c:	08016d35 	.word	0x08016d35
 8016da0:	08016e71 	.word	0x08016e71
 8016da4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016da8:	e7db      	b.n	8016d62 <_scanf_float+0x8e>
 8016daa:	290e      	cmp	r1, #14
 8016dac:	d8c2      	bhi.n	8016d34 <_scanf_float+0x60>
 8016dae:	a001      	add	r0, pc, #4	; (adr r0, 8016db4 <_scanf_float+0xe0>)
 8016db0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016db4:	08016e63 	.word	0x08016e63
 8016db8:	08016d35 	.word	0x08016d35
 8016dbc:	08016e63 	.word	0x08016e63
 8016dc0:	08016ef7 	.word	0x08016ef7
 8016dc4:	08016d35 	.word	0x08016d35
 8016dc8:	08016e11 	.word	0x08016e11
 8016dcc:	08016e4d 	.word	0x08016e4d
 8016dd0:	08016e4d 	.word	0x08016e4d
 8016dd4:	08016e4d 	.word	0x08016e4d
 8016dd8:	08016e4d 	.word	0x08016e4d
 8016ddc:	08016e4d 	.word	0x08016e4d
 8016de0:	08016e4d 	.word	0x08016e4d
 8016de4:	08016e4d 	.word	0x08016e4d
 8016de8:	08016e4d 	.word	0x08016e4d
 8016dec:	08016e4d 	.word	0x08016e4d
 8016df0:	2b6e      	cmp	r3, #110	; 0x6e
 8016df2:	d809      	bhi.n	8016e08 <_scanf_float+0x134>
 8016df4:	2b60      	cmp	r3, #96	; 0x60
 8016df6:	d8b2      	bhi.n	8016d5e <_scanf_float+0x8a>
 8016df8:	2b54      	cmp	r3, #84	; 0x54
 8016dfa:	d077      	beq.n	8016eec <_scanf_float+0x218>
 8016dfc:	2b59      	cmp	r3, #89	; 0x59
 8016dfe:	d199      	bne.n	8016d34 <_scanf_float+0x60>
 8016e00:	2d07      	cmp	r5, #7
 8016e02:	d197      	bne.n	8016d34 <_scanf_float+0x60>
 8016e04:	2508      	movs	r5, #8
 8016e06:	e029      	b.n	8016e5c <_scanf_float+0x188>
 8016e08:	2b74      	cmp	r3, #116	; 0x74
 8016e0a:	d06f      	beq.n	8016eec <_scanf_float+0x218>
 8016e0c:	2b79      	cmp	r3, #121	; 0x79
 8016e0e:	e7f6      	b.n	8016dfe <_scanf_float+0x12a>
 8016e10:	6821      	ldr	r1, [r4, #0]
 8016e12:	05c8      	lsls	r0, r1, #23
 8016e14:	d51a      	bpl.n	8016e4c <_scanf_float+0x178>
 8016e16:	9b02      	ldr	r3, [sp, #8]
 8016e18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016e1c:	6021      	str	r1, [r4, #0]
 8016e1e:	f109 0901 	add.w	r9, r9, #1
 8016e22:	b11b      	cbz	r3, 8016e2c <_scanf_float+0x158>
 8016e24:	3b01      	subs	r3, #1
 8016e26:	3201      	adds	r2, #1
 8016e28:	9302      	str	r3, [sp, #8]
 8016e2a:	60a2      	str	r2, [r4, #8]
 8016e2c:	68a3      	ldr	r3, [r4, #8]
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	60a3      	str	r3, [r4, #8]
 8016e32:	6923      	ldr	r3, [r4, #16]
 8016e34:	3301      	adds	r3, #1
 8016e36:	6123      	str	r3, [r4, #16]
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	3b01      	subs	r3, #1
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	607b      	str	r3, [r7, #4]
 8016e40:	f340 8084 	ble.w	8016f4c <_scanf_float+0x278>
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	3301      	adds	r3, #1
 8016e48:	603b      	str	r3, [r7, #0]
 8016e4a:	e766      	b.n	8016d1a <_scanf_float+0x46>
 8016e4c:	eb1a 0f05 	cmn.w	sl, r5
 8016e50:	f47f af70 	bne.w	8016d34 <_scanf_float+0x60>
 8016e54:	6822      	ldr	r2, [r4, #0]
 8016e56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016e5a:	6022      	str	r2, [r4, #0]
 8016e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8016e60:	e7e4      	b.n	8016e2c <_scanf_float+0x158>
 8016e62:	6822      	ldr	r2, [r4, #0]
 8016e64:	0610      	lsls	r0, r2, #24
 8016e66:	f57f af65 	bpl.w	8016d34 <_scanf_float+0x60>
 8016e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e6e:	e7f4      	b.n	8016e5a <_scanf_float+0x186>
 8016e70:	f1ba 0f00 	cmp.w	sl, #0
 8016e74:	d10e      	bne.n	8016e94 <_scanf_float+0x1c0>
 8016e76:	f1b9 0f00 	cmp.w	r9, #0
 8016e7a:	d10e      	bne.n	8016e9a <_scanf_float+0x1c6>
 8016e7c:	6822      	ldr	r2, [r4, #0]
 8016e7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016e82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016e86:	d108      	bne.n	8016e9a <_scanf_float+0x1c6>
 8016e88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016e8c:	6022      	str	r2, [r4, #0]
 8016e8e:	f04f 0a01 	mov.w	sl, #1
 8016e92:	e7e3      	b.n	8016e5c <_scanf_float+0x188>
 8016e94:	f1ba 0f02 	cmp.w	sl, #2
 8016e98:	d055      	beq.n	8016f46 <_scanf_float+0x272>
 8016e9a:	2d01      	cmp	r5, #1
 8016e9c:	d002      	beq.n	8016ea4 <_scanf_float+0x1d0>
 8016e9e:	2d04      	cmp	r5, #4
 8016ea0:	f47f af48 	bne.w	8016d34 <_scanf_float+0x60>
 8016ea4:	3501      	adds	r5, #1
 8016ea6:	b2ed      	uxtb	r5, r5
 8016ea8:	e7d8      	b.n	8016e5c <_scanf_float+0x188>
 8016eaa:	f1ba 0f01 	cmp.w	sl, #1
 8016eae:	f47f af41 	bne.w	8016d34 <_scanf_float+0x60>
 8016eb2:	f04f 0a02 	mov.w	sl, #2
 8016eb6:	e7d1      	b.n	8016e5c <_scanf_float+0x188>
 8016eb8:	b97d      	cbnz	r5, 8016eda <_scanf_float+0x206>
 8016eba:	f1b9 0f00 	cmp.w	r9, #0
 8016ebe:	f47f af3c 	bne.w	8016d3a <_scanf_float+0x66>
 8016ec2:	6822      	ldr	r2, [r4, #0]
 8016ec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016ec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016ecc:	f47f af39 	bne.w	8016d42 <_scanf_float+0x6e>
 8016ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016ed4:	6022      	str	r2, [r4, #0]
 8016ed6:	2501      	movs	r5, #1
 8016ed8:	e7c0      	b.n	8016e5c <_scanf_float+0x188>
 8016eda:	2d03      	cmp	r5, #3
 8016edc:	d0e2      	beq.n	8016ea4 <_scanf_float+0x1d0>
 8016ede:	2d05      	cmp	r5, #5
 8016ee0:	e7de      	b.n	8016ea0 <_scanf_float+0x1cc>
 8016ee2:	2d02      	cmp	r5, #2
 8016ee4:	f47f af26 	bne.w	8016d34 <_scanf_float+0x60>
 8016ee8:	2503      	movs	r5, #3
 8016eea:	e7b7      	b.n	8016e5c <_scanf_float+0x188>
 8016eec:	2d06      	cmp	r5, #6
 8016eee:	f47f af21 	bne.w	8016d34 <_scanf_float+0x60>
 8016ef2:	2507      	movs	r5, #7
 8016ef4:	e7b2      	b.n	8016e5c <_scanf_float+0x188>
 8016ef6:	6822      	ldr	r2, [r4, #0]
 8016ef8:	0591      	lsls	r1, r2, #22
 8016efa:	f57f af1b 	bpl.w	8016d34 <_scanf_float+0x60>
 8016efe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016f02:	6022      	str	r2, [r4, #0]
 8016f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8016f08:	e7a8      	b.n	8016e5c <_scanf_float+0x188>
 8016f0a:	6822      	ldr	r2, [r4, #0]
 8016f0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016f10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016f14:	d006      	beq.n	8016f24 <_scanf_float+0x250>
 8016f16:	0550      	lsls	r0, r2, #21
 8016f18:	f57f af0c 	bpl.w	8016d34 <_scanf_float+0x60>
 8016f1c:	f1b9 0f00 	cmp.w	r9, #0
 8016f20:	f43f af0f 	beq.w	8016d42 <_scanf_float+0x6e>
 8016f24:	0591      	lsls	r1, r2, #22
 8016f26:	bf58      	it	pl
 8016f28:	9901      	ldrpl	r1, [sp, #4]
 8016f2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016f2e:	bf58      	it	pl
 8016f30:	eba9 0101 	subpl.w	r1, r9, r1
 8016f34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016f38:	bf58      	it	pl
 8016f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016f3e:	6022      	str	r2, [r4, #0]
 8016f40:	f04f 0900 	mov.w	r9, #0
 8016f44:	e78a      	b.n	8016e5c <_scanf_float+0x188>
 8016f46:	f04f 0a03 	mov.w	sl, #3
 8016f4a:	e787      	b.n	8016e5c <_scanf_float+0x188>
 8016f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f50:	4639      	mov	r1, r7
 8016f52:	4640      	mov	r0, r8
 8016f54:	4798      	blx	r3
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f43f aedf 	beq.w	8016d1a <_scanf_float+0x46>
 8016f5c:	e6ea      	b.n	8016d34 <_scanf_float+0x60>
 8016f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016f66:	463a      	mov	r2, r7
 8016f68:	4640      	mov	r0, r8
 8016f6a:	4798      	blx	r3
 8016f6c:	6923      	ldr	r3, [r4, #16]
 8016f6e:	3b01      	subs	r3, #1
 8016f70:	6123      	str	r3, [r4, #16]
 8016f72:	e6ec      	b.n	8016d4e <_scanf_float+0x7a>
 8016f74:	1e6b      	subs	r3, r5, #1
 8016f76:	2b06      	cmp	r3, #6
 8016f78:	d825      	bhi.n	8016fc6 <_scanf_float+0x2f2>
 8016f7a:	2d02      	cmp	r5, #2
 8016f7c:	d836      	bhi.n	8016fec <_scanf_float+0x318>
 8016f7e:	455e      	cmp	r6, fp
 8016f80:	f67f aee8 	bls.w	8016d54 <_scanf_float+0x80>
 8016f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016f8c:	463a      	mov	r2, r7
 8016f8e:	4640      	mov	r0, r8
 8016f90:	4798      	blx	r3
 8016f92:	6923      	ldr	r3, [r4, #16]
 8016f94:	3b01      	subs	r3, #1
 8016f96:	6123      	str	r3, [r4, #16]
 8016f98:	e7f1      	b.n	8016f7e <_scanf_float+0x2aa>
 8016f9a:	9802      	ldr	r0, [sp, #8]
 8016f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016fa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016fa4:	9002      	str	r0, [sp, #8]
 8016fa6:	463a      	mov	r2, r7
 8016fa8:	4640      	mov	r0, r8
 8016faa:	4798      	blx	r3
 8016fac:	6923      	ldr	r3, [r4, #16]
 8016fae:	3b01      	subs	r3, #1
 8016fb0:	6123      	str	r3, [r4, #16]
 8016fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fb6:	fa5f fa8a 	uxtb.w	sl, sl
 8016fba:	f1ba 0f02 	cmp.w	sl, #2
 8016fbe:	d1ec      	bne.n	8016f9a <_scanf_float+0x2c6>
 8016fc0:	3d03      	subs	r5, #3
 8016fc2:	b2ed      	uxtb	r5, r5
 8016fc4:	1b76      	subs	r6, r6, r5
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	05da      	lsls	r2, r3, #23
 8016fca:	d52f      	bpl.n	801702c <_scanf_float+0x358>
 8016fcc:	055b      	lsls	r3, r3, #21
 8016fce:	d510      	bpl.n	8016ff2 <_scanf_float+0x31e>
 8016fd0:	455e      	cmp	r6, fp
 8016fd2:	f67f aebf 	bls.w	8016d54 <_scanf_float+0x80>
 8016fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016fde:	463a      	mov	r2, r7
 8016fe0:	4640      	mov	r0, r8
 8016fe2:	4798      	blx	r3
 8016fe4:	6923      	ldr	r3, [r4, #16]
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	6123      	str	r3, [r4, #16]
 8016fea:	e7f1      	b.n	8016fd0 <_scanf_float+0x2fc>
 8016fec:	46aa      	mov	sl, r5
 8016fee:	9602      	str	r6, [sp, #8]
 8016ff0:	e7df      	b.n	8016fb2 <_scanf_float+0x2de>
 8016ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016ff6:	6923      	ldr	r3, [r4, #16]
 8016ff8:	2965      	cmp	r1, #101	; 0x65
 8016ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ffe:	f106 35ff 	add.w	r5, r6, #4294967295
 8017002:	6123      	str	r3, [r4, #16]
 8017004:	d00c      	beq.n	8017020 <_scanf_float+0x34c>
 8017006:	2945      	cmp	r1, #69	; 0x45
 8017008:	d00a      	beq.n	8017020 <_scanf_float+0x34c>
 801700a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801700e:	463a      	mov	r2, r7
 8017010:	4640      	mov	r0, r8
 8017012:	4798      	blx	r3
 8017014:	6923      	ldr	r3, [r4, #16]
 8017016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801701a:	3b01      	subs	r3, #1
 801701c:	1eb5      	subs	r5, r6, #2
 801701e:	6123      	str	r3, [r4, #16]
 8017020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017024:	463a      	mov	r2, r7
 8017026:	4640      	mov	r0, r8
 8017028:	4798      	blx	r3
 801702a:	462e      	mov	r6, r5
 801702c:	6825      	ldr	r5, [r4, #0]
 801702e:	f015 0510 	ands.w	r5, r5, #16
 8017032:	d158      	bne.n	80170e6 <_scanf_float+0x412>
 8017034:	7035      	strb	r5, [r6, #0]
 8017036:	6823      	ldr	r3, [r4, #0]
 8017038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801703c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017040:	d11c      	bne.n	801707c <_scanf_float+0x3a8>
 8017042:	9b01      	ldr	r3, [sp, #4]
 8017044:	454b      	cmp	r3, r9
 8017046:	eba3 0209 	sub.w	r2, r3, r9
 801704a:	d124      	bne.n	8017096 <_scanf_float+0x3c2>
 801704c:	2200      	movs	r2, #0
 801704e:	4659      	mov	r1, fp
 8017050:	4640      	mov	r0, r8
 8017052:	f002 fdfd 	bl	8019c50 <_strtod_r>
 8017056:	9b03      	ldr	r3, [sp, #12]
 8017058:	6821      	ldr	r1, [r4, #0]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f011 0f02 	tst.w	r1, #2
 8017060:	ec57 6b10 	vmov	r6, r7, d0
 8017064:	f103 0204 	add.w	r2, r3, #4
 8017068:	d020      	beq.n	80170ac <_scanf_float+0x3d8>
 801706a:	9903      	ldr	r1, [sp, #12]
 801706c:	600a      	str	r2, [r1, #0]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	e9c3 6700 	strd	r6, r7, [r3]
 8017074:	68e3      	ldr	r3, [r4, #12]
 8017076:	3301      	adds	r3, #1
 8017078:	60e3      	str	r3, [r4, #12]
 801707a:	e66c      	b.n	8016d56 <_scanf_float+0x82>
 801707c:	9b04      	ldr	r3, [sp, #16]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d0e4      	beq.n	801704c <_scanf_float+0x378>
 8017082:	9905      	ldr	r1, [sp, #20]
 8017084:	230a      	movs	r3, #10
 8017086:	462a      	mov	r2, r5
 8017088:	3101      	adds	r1, #1
 801708a:	4640      	mov	r0, r8
 801708c:	f002 fe68 	bl	8019d60 <_strtol_r>
 8017090:	9b04      	ldr	r3, [sp, #16]
 8017092:	9e05      	ldr	r6, [sp, #20]
 8017094:	1ac2      	subs	r2, r0, r3
 8017096:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801709a:	429e      	cmp	r6, r3
 801709c:	bf28      	it	cs
 801709e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80170a2:	4912      	ldr	r1, [pc, #72]	; (80170ec <_scanf_float+0x418>)
 80170a4:	4630      	mov	r0, r6
 80170a6:	f000 fa13 	bl	80174d0 <siprintf>
 80170aa:	e7cf      	b.n	801704c <_scanf_float+0x378>
 80170ac:	f011 0f04 	tst.w	r1, #4
 80170b0:	9903      	ldr	r1, [sp, #12]
 80170b2:	600a      	str	r2, [r1, #0]
 80170b4:	d1db      	bne.n	801706e <_scanf_float+0x39a>
 80170b6:	f8d3 8000 	ldr.w	r8, [r3]
 80170ba:	ee10 2a10 	vmov	r2, s0
 80170be:	ee10 0a10 	vmov	r0, s0
 80170c2:	463b      	mov	r3, r7
 80170c4:	4639      	mov	r1, r7
 80170c6:	f7e9 fd59 	bl	8000b7c <__aeabi_dcmpun>
 80170ca:	b128      	cbz	r0, 80170d8 <_scanf_float+0x404>
 80170cc:	4808      	ldr	r0, [pc, #32]	; (80170f0 <_scanf_float+0x41c>)
 80170ce:	f000 fb85 	bl	80177dc <nanf>
 80170d2:	ed88 0a00 	vstr	s0, [r8]
 80170d6:	e7cd      	b.n	8017074 <_scanf_float+0x3a0>
 80170d8:	4630      	mov	r0, r6
 80170da:	4639      	mov	r1, r7
 80170dc:	f7e9 fdac 	bl	8000c38 <__aeabi_d2f>
 80170e0:	f8c8 0000 	str.w	r0, [r8]
 80170e4:	e7c6      	b.n	8017074 <_scanf_float+0x3a0>
 80170e6:	2500      	movs	r5, #0
 80170e8:	e635      	b.n	8016d56 <_scanf_float+0x82>
 80170ea:	bf00      	nop
 80170ec:	0801ca30 	.word	0x0801ca30
 80170f0:	0801cdc5 	.word	0x0801cdc5

080170f4 <std>:
 80170f4:	2300      	movs	r3, #0
 80170f6:	b510      	push	{r4, lr}
 80170f8:	4604      	mov	r4, r0
 80170fa:	e9c0 3300 	strd	r3, r3, [r0]
 80170fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017102:	6083      	str	r3, [r0, #8]
 8017104:	8181      	strh	r1, [r0, #12]
 8017106:	6643      	str	r3, [r0, #100]	; 0x64
 8017108:	81c2      	strh	r2, [r0, #14]
 801710a:	6183      	str	r3, [r0, #24]
 801710c:	4619      	mov	r1, r3
 801710e:	2208      	movs	r2, #8
 8017110:	305c      	adds	r0, #92	; 0x5c
 8017112:	f000 fad5 	bl	80176c0 <memset>
 8017116:	4b0d      	ldr	r3, [pc, #52]	; (801714c <std+0x58>)
 8017118:	6263      	str	r3, [r4, #36]	; 0x24
 801711a:	4b0d      	ldr	r3, [pc, #52]	; (8017150 <std+0x5c>)
 801711c:	62a3      	str	r3, [r4, #40]	; 0x28
 801711e:	4b0d      	ldr	r3, [pc, #52]	; (8017154 <std+0x60>)
 8017120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017122:	4b0d      	ldr	r3, [pc, #52]	; (8017158 <std+0x64>)
 8017124:	6323      	str	r3, [r4, #48]	; 0x30
 8017126:	4b0d      	ldr	r3, [pc, #52]	; (801715c <std+0x68>)
 8017128:	6224      	str	r4, [r4, #32]
 801712a:	429c      	cmp	r4, r3
 801712c:	d006      	beq.n	801713c <std+0x48>
 801712e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017132:	4294      	cmp	r4, r2
 8017134:	d002      	beq.n	801713c <std+0x48>
 8017136:	33d0      	adds	r3, #208	; 0xd0
 8017138:	429c      	cmp	r4, r3
 801713a:	d105      	bne.n	8017148 <std+0x54>
 801713c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017144:	f000 bb38 	b.w	80177b8 <__retarget_lock_init_recursive>
 8017148:	bd10      	pop	{r4, pc}
 801714a:	bf00      	nop
 801714c:	08017511 	.word	0x08017511
 8017150:	08017533 	.word	0x08017533
 8017154:	0801756b 	.word	0x0801756b
 8017158:	0801758f 	.word	0x0801758f
 801715c:	200002dc 	.word	0x200002dc

08017160 <stdio_exit_handler>:
 8017160:	4a02      	ldr	r2, [pc, #8]	; (801716c <stdio_exit_handler+0xc>)
 8017162:	4903      	ldr	r1, [pc, #12]	; (8017170 <stdio_exit_handler+0x10>)
 8017164:	4803      	ldr	r0, [pc, #12]	; (8017174 <stdio_exit_handler+0x14>)
 8017166:	f000 b869 	b.w	801723c <_fwalk_sglue>
 801716a:	bf00      	nop
 801716c:	2000001c 	.word	0x2000001c
 8017170:	0801a3a9 	.word	0x0801a3a9
 8017174:	20000028 	.word	0x20000028

08017178 <cleanup_stdio>:
 8017178:	6841      	ldr	r1, [r0, #4]
 801717a:	4b0c      	ldr	r3, [pc, #48]	; (80171ac <cleanup_stdio+0x34>)
 801717c:	4299      	cmp	r1, r3
 801717e:	b510      	push	{r4, lr}
 8017180:	4604      	mov	r4, r0
 8017182:	d001      	beq.n	8017188 <cleanup_stdio+0x10>
 8017184:	f003 f910 	bl	801a3a8 <_fflush_r>
 8017188:	68a1      	ldr	r1, [r4, #8]
 801718a:	4b09      	ldr	r3, [pc, #36]	; (80171b0 <cleanup_stdio+0x38>)
 801718c:	4299      	cmp	r1, r3
 801718e:	d002      	beq.n	8017196 <cleanup_stdio+0x1e>
 8017190:	4620      	mov	r0, r4
 8017192:	f003 f909 	bl	801a3a8 <_fflush_r>
 8017196:	68e1      	ldr	r1, [r4, #12]
 8017198:	4b06      	ldr	r3, [pc, #24]	; (80171b4 <cleanup_stdio+0x3c>)
 801719a:	4299      	cmp	r1, r3
 801719c:	d004      	beq.n	80171a8 <cleanup_stdio+0x30>
 801719e:	4620      	mov	r0, r4
 80171a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171a4:	f003 b900 	b.w	801a3a8 <_fflush_r>
 80171a8:	bd10      	pop	{r4, pc}
 80171aa:	bf00      	nop
 80171ac:	200002dc 	.word	0x200002dc
 80171b0:	20000344 	.word	0x20000344
 80171b4:	200003ac 	.word	0x200003ac

080171b8 <global_stdio_init.part.0>:
 80171b8:	b510      	push	{r4, lr}
 80171ba:	4b0b      	ldr	r3, [pc, #44]	; (80171e8 <global_stdio_init.part.0+0x30>)
 80171bc:	4c0b      	ldr	r4, [pc, #44]	; (80171ec <global_stdio_init.part.0+0x34>)
 80171be:	4a0c      	ldr	r2, [pc, #48]	; (80171f0 <global_stdio_init.part.0+0x38>)
 80171c0:	601a      	str	r2, [r3, #0]
 80171c2:	4620      	mov	r0, r4
 80171c4:	2200      	movs	r2, #0
 80171c6:	2104      	movs	r1, #4
 80171c8:	f7ff ff94 	bl	80170f4 <std>
 80171cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80171d0:	2201      	movs	r2, #1
 80171d2:	2109      	movs	r1, #9
 80171d4:	f7ff ff8e 	bl	80170f4 <std>
 80171d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80171dc:	2202      	movs	r2, #2
 80171de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171e2:	2112      	movs	r1, #18
 80171e4:	f7ff bf86 	b.w	80170f4 <std>
 80171e8:	20000414 	.word	0x20000414
 80171ec:	200002dc 	.word	0x200002dc
 80171f0:	08017161 	.word	0x08017161

080171f4 <__sfp_lock_acquire>:
 80171f4:	4801      	ldr	r0, [pc, #4]	; (80171fc <__sfp_lock_acquire+0x8>)
 80171f6:	f000 bae0 	b.w	80177ba <__retarget_lock_acquire_recursive>
 80171fa:	bf00      	nop
 80171fc:	2000041d 	.word	0x2000041d

08017200 <__sfp_lock_release>:
 8017200:	4801      	ldr	r0, [pc, #4]	; (8017208 <__sfp_lock_release+0x8>)
 8017202:	f000 badb 	b.w	80177bc <__retarget_lock_release_recursive>
 8017206:	bf00      	nop
 8017208:	2000041d 	.word	0x2000041d

0801720c <__sinit>:
 801720c:	b510      	push	{r4, lr}
 801720e:	4604      	mov	r4, r0
 8017210:	f7ff fff0 	bl	80171f4 <__sfp_lock_acquire>
 8017214:	6a23      	ldr	r3, [r4, #32]
 8017216:	b11b      	cbz	r3, 8017220 <__sinit+0x14>
 8017218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801721c:	f7ff bff0 	b.w	8017200 <__sfp_lock_release>
 8017220:	4b04      	ldr	r3, [pc, #16]	; (8017234 <__sinit+0x28>)
 8017222:	6223      	str	r3, [r4, #32]
 8017224:	4b04      	ldr	r3, [pc, #16]	; (8017238 <__sinit+0x2c>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d1f5      	bne.n	8017218 <__sinit+0xc>
 801722c:	f7ff ffc4 	bl	80171b8 <global_stdio_init.part.0>
 8017230:	e7f2      	b.n	8017218 <__sinit+0xc>
 8017232:	bf00      	nop
 8017234:	08017179 	.word	0x08017179
 8017238:	20000414 	.word	0x20000414

0801723c <_fwalk_sglue>:
 801723c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017240:	4607      	mov	r7, r0
 8017242:	4688      	mov	r8, r1
 8017244:	4614      	mov	r4, r2
 8017246:	2600      	movs	r6, #0
 8017248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801724c:	f1b9 0901 	subs.w	r9, r9, #1
 8017250:	d505      	bpl.n	801725e <_fwalk_sglue+0x22>
 8017252:	6824      	ldr	r4, [r4, #0]
 8017254:	2c00      	cmp	r4, #0
 8017256:	d1f7      	bne.n	8017248 <_fwalk_sglue+0xc>
 8017258:	4630      	mov	r0, r6
 801725a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801725e:	89ab      	ldrh	r3, [r5, #12]
 8017260:	2b01      	cmp	r3, #1
 8017262:	d907      	bls.n	8017274 <_fwalk_sglue+0x38>
 8017264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017268:	3301      	adds	r3, #1
 801726a:	d003      	beq.n	8017274 <_fwalk_sglue+0x38>
 801726c:	4629      	mov	r1, r5
 801726e:	4638      	mov	r0, r7
 8017270:	47c0      	blx	r8
 8017272:	4306      	orrs	r6, r0
 8017274:	3568      	adds	r5, #104	; 0x68
 8017276:	e7e9      	b.n	801724c <_fwalk_sglue+0x10>

08017278 <iprintf>:
 8017278:	b40f      	push	{r0, r1, r2, r3}
 801727a:	b507      	push	{r0, r1, r2, lr}
 801727c:	4906      	ldr	r1, [pc, #24]	; (8017298 <iprintf+0x20>)
 801727e:	ab04      	add	r3, sp, #16
 8017280:	6808      	ldr	r0, [r1, #0]
 8017282:	f853 2b04 	ldr.w	r2, [r3], #4
 8017286:	6881      	ldr	r1, [r0, #8]
 8017288:	9301      	str	r3, [sp, #4]
 801728a:	f002 feed 	bl	801a068 <_vfiprintf_r>
 801728e:	b003      	add	sp, #12
 8017290:	f85d eb04 	ldr.w	lr, [sp], #4
 8017294:	b004      	add	sp, #16
 8017296:	4770      	bx	lr
 8017298:	20000074 	.word	0x20000074

0801729c <putchar>:
 801729c:	4b02      	ldr	r3, [pc, #8]	; (80172a8 <putchar+0xc>)
 801729e:	4601      	mov	r1, r0
 80172a0:	6818      	ldr	r0, [r3, #0]
 80172a2:	6882      	ldr	r2, [r0, #8]
 80172a4:	f003 b90a 	b.w	801a4bc <_putc_r>
 80172a8:	20000074 	.word	0x20000074

080172ac <_puts_r>:
 80172ac:	6a03      	ldr	r3, [r0, #32]
 80172ae:	b570      	push	{r4, r5, r6, lr}
 80172b0:	6884      	ldr	r4, [r0, #8]
 80172b2:	4605      	mov	r5, r0
 80172b4:	460e      	mov	r6, r1
 80172b6:	b90b      	cbnz	r3, 80172bc <_puts_r+0x10>
 80172b8:	f7ff ffa8 	bl	801720c <__sinit>
 80172bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172be:	07db      	lsls	r3, r3, #31
 80172c0:	d405      	bmi.n	80172ce <_puts_r+0x22>
 80172c2:	89a3      	ldrh	r3, [r4, #12]
 80172c4:	0598      	lsls	r0, r3, #22
 80172c6:	d402      	bmi.n	80172ce <_puts_r+0x22>
 80172c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172ca:	f000 fa76 	bl	80177ba <__retarget_lock_acquire_recursive>
 80172ce:	89a3      	ldrh	r3, [r4, #12]
 80172d0:	0719      	lsls	r1, r3, #28
 80172d2:	d513      	bpl.n	80172fc <_puts_r+0x50>
 80172d4:	6923      	ldr	r3, [r4, #16]
 80172d6:	b18b      	cbz	r3, 80172fc <_puts_r+0x50>
 80172d8:	3e01      	subs	r6, #1
 80172da:	68a3      	ldr	r3, [r4, #8]
 80172dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80172e0:	3b01      	subs	r3, #1
 80172e2:	60a3      	str	r3, [r4, #8]
 80172e4:	b9e9      	cbnz	r1, 8017322 <_puts_r+0x76>
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	da2e      	bge.n	8017348 <_puts_r+0x9c>
 80172ea:	4622      	mov	r2, r4
 80172ec:	210a      	movs	r1, #10
 80172ee:	4628      	mov	r0, r5
 80172f0:	f000 f951 	bl	8017596 <__swbuf_r>
 80172f4:	3001      	adds	r0, #1
 80172f6:	d007      	beq.n	8017308 <_puts_r+0x5c>
 80172f8:	250a      	movs	r5, #10
 80172fa:	e007      	b.n	801730c <_puts_r+0x60>
 80172fc:	4621      	mov	r1, r4
 80172fe:	4628      	mov	r0, r5
 8017300:	f000 f986 	bl	8017610 <__swsetup_r>
 8017304:	2800      	cmp	r0, #0
 8017306:	d0e7      	beq.n	80172d8 <_puts_r+0x2c>
 8017308:	f04f 35ff 	mov.w	r5, #4294967295
 801730c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801730e:	07da      	lsls	r2, r3, #31
 8017310:	d405      	bmi.n	801731e <_puts_r+0x72>
 8017312:	89a3      	ldrh	r3, [r4, #12]
 8017314:	059b      	lsls	r3, r3, #22
 8017316:	d402      	bmi.n	801731e <_puts_r+0x72>
 8017318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801731a:	f000 fa4f 	bl	80177bc <__retarget_lock_release_recursive>
 801731e:	4628      	mov	r0, r5
 8017320:	bd70      	pop	{r4, r5, r6, pc}
 8017322:	2b00      	cmp	r3, #0
 8017324:	da04      	bge.n	8017330 <_puts_r+0x84>
 8017326:	69a2      	ldr	r2, [r4, #24]
 8017328:	429a      	cmp	r2, r3
 801732a:	dc06      	bgt.n	801733a <_puts_r+0x8e>
 801732c:	290a      	cmp	r1, #10
 801732e:	d004      	beq.n	801733a <_puts_r+0x8e>
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	1c5a      	adds	r2, r3, #1
 8017334:	6022      	str	r2, [r4, #0]
 8017336:	7019      	strb	r1, [r3, #0]
 8017338:	e7cf      	b.n	80172da <_puts_r+0x2e>
 801733a:	4622      	mov	r2, r4
 801733c:	4628      	mov	r0, r5
 801733e:	f000 f92a 	bl	8017596 <__swbuf_r>
 8017342:	3001      	adds	r0, #1
 8017344:	d1c9      	bne.n	80172da <_puts_r+0x2e>
 8017346:	e7df      	b.n	8017308 <_puts_r+0x5c>
 8017348:	6823      	ldr	r3, [r4, #0]
 801734a:	250a      	movs	r5, #10
 801734c:	1c5a      	adds	r2, r3, #1
 801734e:	6022      	str	r2, [r4, #0]
 8017350:	701d      	strb	r5, [r3, #0]
 8017352:	e7db      	b.n	801730c <_puts_r+0x60>

08017354 <puts>:
 8017354:	4b02      	ldr	r3, [pc, #8]	; (8017360 <puts+0xc>)
 8017356:	4601      	mov	r1, r0
 8017358:	6818      	ldr	r0, [r3, #0]
 801735a:	f7ff bfa7 	b.w	80172ac <_puts_r>
 801735e:	bf00      	nop
 8017360:	20000074 	.word	0x20000074

08017364 <setbuf>:
 8017364:	fab1 f281 	clz	r2, r1
 8017368:	0952      	lsrs	r2, r2, #5
 801736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801736e:	0052      	lsls	r2, r2, #1
 8017370:	f000 b800 	b.w	8017374 <setvbuf>

08017374 <setvbuf>:
 8017374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017378:	461d      	mov	r5, r3
 801737a:	4b54      	ldr	r3, [pc, #336]	; (80174cc <setvbuf+0x158>)
 801737c:	681f      	ldr	r7, [r3, #0]
 801737e:	4604      	mov	r4, r0
 8017380:	460e      	mov	r6, r1
 8017382:	4690      	mov	r8, r2
 8017384:	b127      	cbz	r7, 8017390 <setvbuf+0x1c>
 8017386:	6a3b      	ldr	r3, [r7, #32]
 8017388:	b913      	cbnz	r3, 8017390 <setvbuf+0x1c>
 801738a:	4638      	mov	r0, r7
 801738c:	f7ff ff3e 	bl	801720c <__sinit>
 8017390:	f1b8 0f02 	cmp.w	r8, #2
 8017394:	d006      	beq.n	80173a4 <setvbuf+0x30>
 8017396:	f1b8 0f01 	cmp.w	r8, #1
 801739a:	f200 8094 	bhi.w	80174c6 <setvbuf+0x152>
 801739e:	2d00      	cmp	r5, #0
 80173a0:	f2c0 8091 	blt.w	80174c6 <setvbuf+0x152>
 80173a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173a6:	07da      	lsls	r2, r3, #31
 80173a8:	d405      	bmi.n	80173b6 <setvbuf+0x42>
 80173aa:	89a3      	ldrh	r3, [r4, #12]
 80173ac:	059b      	lsls	r3, r3, #22
 80173ae:	d402      	bmi.n	80173b6 <setvbuf+0x42>
 80173b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173b2:	f000 fa02 	bl	80177ba <__retarget_lock_acquire_recursive>
 80173b6:	4621      	mov	r1, r4
 80173b8:	4638      	mov	r0, r7
 80173ba:	f002 fff5 	bl	801a3a8 <_fflush_r>
 80173be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173c0:	b141      	cbz	r1, 80173d4 <setvbuf+0x60>
 80173c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173c6:	4299      	cmp	r1, r3
 80173c8:	d002      	beq.n	80173d0 <setvbuf+0x5c>
 80173ca:	4638      	mov	r0, r7
 80173cc:	f001 f886 	bl	80184dc <_free_r>
 80173d0:	2300      	movs	r3, #0
 80173d2:	6363      	str	r3, [r4, #52]	; 0x34
 80173d4:	2300      	movs	r3, #0
 80173d6:	61a3      	str	r3, [r4, #24]
 80173d8:	6063      	str	r3, [r4, #4]
 80173da:	89a3      	ldrh	r3, [r4, #12]
 80173dc:	0618      	lsls	r0, r3, #24
 80173de:	d503      	bpl.n	80173e8 <setvbuf+0x74>
 80173e0:	6921      	ldr	r1, [r4, #16]
 80173e2:	4638      	mov	r0, r7
 80173e4:	f001 f87a 	bl	80184dc <_free_r>
 80173e8:	89a3      	ldrh	r3, [r4, #12]
 80173ea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80173ee:	f023 0303 	bic.w	r3, r3, #3
 80173f2:	f1b8 0f02 	cmp.w	r8, #2
 80173f6:	81a3      	strh	r3, [r4, #12]
 80173f8:	d05f      	beq.n	80174ba <setvbuf+0x146>
 80173fa:	ab01      	add	r3, sp, #4
 80173fc:	466a      	mov	r2, sp
 80173fe:	4621      	mov	r1, r4
 8017400:	4638      	mov	r0, r7
 8017402:	f002 fff9 	bl	801a3f8 <__swhatbuf_r>
 8017406:	89a3      	ldrh	r3, [r4, #12]
 8017408:	4318      	orrs	r0, r3
 801740a:	81a0      	strh	r0, [r4, #12]
 801740c:	bb2d      	cbnz	r5, 801745a <setvbuf+0xe6>
 801740e:	9d00      	ldr	r5, [sp, #0]
 8017410:	4628      	mov	r0, r5
 8017412:	f001 f8af 	bl	8018574 <malloc>
 8017416:	4606      	mov	r6, r0
 8017418:	2800      	cmp	r0, #0
 801741a:	d150      	bne.n	80174be <setvbuf+0x14a>
 801741c:	f8dd 9000 	ldr.w	r9, [sp]
 8017420:	45a9      	cmp	r9, r5
 8017422:	d13e      	bne.n	80174a2 <setvbuf+0x12e>
 8017424:	f04f 35ff 	mov.w	r5, #4294967295
 8017428:	2200      	movs	r2, #0
 801742a:	60a2      	str	r2, [r4, #8]
 801742c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017430:	6022      	str	r2, [r4, #0]
 8017432:	6122      	str	r2, [r4, #16]
 8017434:	2201      	movs	r2, #1
 8017436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801743a:	6162      	str	r2, [r4, #20]
 801743c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801743e:	f043 0302 	orr.w	r3, r3, #2
 8017442:	07d1      	lsls	r1, r2, #31
 8017444:	81a3      	strh	r3, [r4, #12]
 8017446:	d404      	bmi.n	8017452 <setvbuf+0xde>
 8017448:	059b      	lsls	r3, r3, #22
 801744a:	d402      	bmi.n	8017452 <setvbuf+0xde>
 801744c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801744e:	f000 f9b5 	bl	80177bc <__retarget_lock_release_recursive>
 8017452:	4628      	mov	r0, r5
 8017454:	b003      	add	sp, #12
 8017456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801745a:	2e00      	cmp	r6, #0
 801745c:	d0d8      	beq.n	8017410 <setvbuf+0x9c>
 801745e:	6a3b      	ldr	r3, [r7, #32]
 8017460:	b913      	cbnz	r3, 8017468 <setvbuf+0xf4>
 8017462:	4638      	mov	r0, r7
 8017464:	f7ff fed2 	bl	801720c <__sinit>
 8017468:	f1b8 0f01 	cmp.w	r8, #1
 801746c:	bf08      	it	eq
 801746e:	89a3      	ldrheq	r3, [r4, #12]
 8017470:	6026      	str	r6, [r4, #0]
 8017472:	bf04      	itt	eq
 8017474:	f043 0301 	orreq.w	r3, r3, #1
 8017478:	81a3      	strheq	r3, [r4, #12]
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	f013 0208 	ands.w	r2, r3, #8
 8017480:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017484:	d01d      	beq.n	80174c2 <setvbuf+0x14e>
 8017486:	07da      	lsls	r2, r3, #31
 8017488:	bf41      	itttt	mi
 801748a:	2200      	movmi	r2, #0
 801748c:	426d      	negmi	r5, r5
 801748e:	60a2      	strmi	r2, [r4, #8]
 8017490:	61a5      	strmi	r5, [r4, #24]
 8017492:	bf58      	it	pl
 8017494:	60a5      	strpl	r5, [r4, #8]
 8017496:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8017498:	f015 0501 	ands.w	r5, r5, #1
 801749c:	d0d4      	beq.n	8017448 <setvbuf+0xd4>
 801749e:	2500      	movs	r5, #0
 80174a0:	e7d7      	b.n	8017452 <setvbuf+0xde>
 80174a2:	4648      	mov	r0, r9
 80174a4:	f001 f866 	bl	8018574 <malloc>
 80174a8:	4606      	mov	r6, r0
 80174aa:	2800      	cmp	r0, #0
 80174ac:	d0ba      	beq.n	8017424 <setvbuf+0xb0>
 80174ae:	89a3      	ldrh	r3, [r4, #12]
 80174b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174b4:	81a3      	strh	r3, [r4, #12]
 80174b6:	464d      	mov	r5, r9
 80174b8:	e7d1      	b.n	801745e <setvbuf+0xea>
 80174ba:	2500      	movs	r5, #0
 80174bc:	e7b4      	b.n	8017428 <setvbuf+0xb4>
 80174be:	46a9      	mov	r9, r5
 80174c0:	e7f5      	b.n	80174ae <setvbuf+0x13a>
 80174c2:	60a2      	str	r2, [r4, #8]
 80174c4:	e7e7      	b.n	8017496 <setvbuf+0x122>
 80174c6:	f04f 35ff 	mov.w	r5, #4294967295
 80174ca:	e7c2      	b.n	8017452 <setvbuf+0xde>
 80174cc:	20000074 	.word	0x20000074

080174d0 <siprintf>:
 80174d0:	b40e      	push	{r1, r2, r3}
 80174d2:	b500      	push	{lr}
 80174d4:	b09c      	sub	sp, #112	; 0x70
 80174d6:	ab1d      	add	r3, sp, #116	; 0x74
 80174d8:	9002      	str	r0, [sp, #8]
 80174da:	9006      	str	r0, [sp, #24]
 80174dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174e0:	4809      	ldr	r0, [pc, #36]	; (8017508 <siprintf+0x38>)
 80174e2:	9107      	str	r1, [sp, #28]
 80174e4:	9104      	str	r1, [sp, #16]
 80174e6:	4909      	ldr	r1, [pc, #36]	; (801750c <siprintf+0x3c>)
 80174e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80174ec:	9105      	str	r1, [sp, #20]
 80174ee:	6800      	ldr	r0, [r0, #0]
 80174f0:	9301      	str	r3, [sp, #4]
 80174f2:	a902      	add	r1, sp, #8
 80174f4:	f002 fc90 	bl	8019e18 <_svfiprintf_r>
 80174f8:	9b02      	ldr	r3, [sp, #8]
 80174fa:	2200      	movs	r2, #0
 80174fc:	701a      	strb	r2, [r3, #0]
 80174fe:	b01c      	add	sp, #112	; 0x70
 8017500:	f85d eb04 	ldr.w	lr, [sp], #4
 8017504:	b003      	add	sp, #12
 8017506:	4770      	bx	lr
 8017508:	20000074 	.word	0x20000074
 801750c:	ffff0208 	.word	0xffff0208

08017510 <__sread>:
 8017510:	b510      	push	{r4, lr}
 8017512:	460c      	mov	r4, r1
 8017514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017518:	f000 f900 	bl	801771c <_read_r>
 801751c:	2800      	cmp	r0, #0
 801751e:	bfab      	itete	ge
 8017520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017522:	89a3      	ldrhlt	r3, [r4, #12]
 8017524:	181b      	addge	r3, r3, r0
 8017526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801752a:	bfac      	ite	ge
 801752c:	6563      	strge	r3, [r4, #84]	; 0x54
 801752e:	81a3      	strhlt	r3, [r4, #12]
 8017530:	bd10      	pop	{r4, pc}

08017532 <__swrite>:
 8017532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017536:	461f      	mov	r7, r3
 8017538:	898b      	ldrh	r3, [r1, #12]
 801753a:	05db      	lsls	r3, r3, #23
 801753c:	4605      	mov	r5, r0
 801753e:	460c      	mov	r4, r1
 8017540:	4616      	mov	r6, r2
 8017542:	d505      	bpl.n	8017550 <__swrite+0x1e>
 8017544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017548:	2302      	movs	r3, #2
 801754a:	2200      	movs	r2, #0
 801754c:	f000 f8d4 	bl	80176f8 <_lseek_r>
 8017550:	89a3      	ldrh	r3, [r4, #12]
 8017552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801755a:	81a3      	strh	r3, [r4, #12]
 801755c:	4632      	mov	r2, r6
 801755e:	463b      	mov	r3, r7
 8017560:	4628      	mov	r0, r5
 8017562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017566:	f000 b8eb 	b.w	8017740 <_write_r>

0801756a <__sseek>:
 801756a:	b510      	push	{r4, lr}
 801756c:	460c      	mov	r4, r1
 801756e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017572:	f000 f8c1 	bl	80176f8 <_lseek_r>
 8017576:	1c43      	adds	r3, r0, #1
 8017578:	89a3      	ldrh	r3, [r4, #12]
 801757a:	bf15      	itete	ne
 801757c:	6560      	strne	r0, [r4, #84]	; 0x54
 801757e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017586:	81a3      	strheq	r3, [r4, #12]
 8017588:	bf18      	it	ne
 801758a:	81a3      	strhne	r3, [r4, #12]
 801758c:	bd10      	pop	{r4, pc}

0801758e <__sclose>:
 801758e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017592:	f000 b8a1 	b.w	80176d8 <_close_r>

08017596 <__swbuf_r>:
 8017596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017598:	460e      	mov	r6, r1
 801759a:	4614      	mov	r4, r2
 801759c:	4605      	mov	r5, r0
 801759e:	b118      	cbz	r0, 80175a8 <__swbuf_r+0x12>
 80175a0:	6a03      	ldr	r3, [r0, #32]
 80175a2:	b90b      	cbnz	r3, 80175a8 <__swbuf_r+0x12>
 80175a4:	f7ff fe32 	bl	801720c <__sinit>
 80175a8:	69a3      	ldr	r3, [r4, #24]
 80175aa:	60a3      	str	r3, [r4, #8]
 80175ac:	89a3      	ldrh	r3, [r4, #12]
 80175ae:	071a      	lsls	r2, r3, #28
 80175b0:	d525      	bpl.n	80175fe <__swbuf_r+0x68>
 80175b2:	6923      	ldr	r3, [r4, #16]
 80175b4:	b31b      	cbz	r3, 80175fe <__swbuf_r+0x68>
 80175b6:	6823      	ldr	r3, [r4, #0]
 80175b8:	6922      	ldr	r2, [r4, #16]
 80175ba:	1a98      	subs	r0, r3, r2
 80175bc:	6963      	ldr	r3, [r4, #20]
 80175be:	b2f6      	uxtb	r6, r6
 80175c0:	4283      	cmp	r3, r0
 80175c2:	4637      	mov	r7, r6
 80175c4:	dc04      	bgt.n	80175d0 <__swbuf_r+0x3a>
 80175c6:	4621      	mov	r1, r4
 80175c8:	4628      	mov	r0, r5
 80175ca:	f002 feed 	bl	801a3a8 <_fflush_r>
 80175ce:	b9e0      	cbnz	r0, 801760a <__swbuf_r+0x74>
 80175d0:	68a3      	ldr	r3, [r4, #8]
 80175d2:	3b01      	subs	r3, #1
 80175d4:	60a3      	str	r3, [r4, #8]
 80175d6:	6823      	ldr	r3, [r4, #0]
 80175d8:	1c5a      	adds	r2, r3, #1
 80175da:	6022      	str	r2, [r4, #0]
 80175dc:	701e      	strb	r6, [r3, #0]
 80175de:	6962      	ldr	r2, [r4, #20]
 80175e0:	1c43      	adds	r3, r0, #1
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d004      	beq.n	80175f0 <__swbuf_r+0x5a>
 80175e6:	89a3      	ldrh	r3, [r4, #12]
 80175e8:	07db      	lsls	r3, r3, #31
 80175ea:	d506      	bpl.n	80175fa <__swbuf_r+0x64>
 80175ec:	2e0a      	cmp	r6, #10
 80175ee:	d104      	bne.n	80175fa <__swbuf_r+0x64>
 80175f0:	4621      	mov	r1, r4
 80175f2:	4628      	mov	r0, r5
 80175f4:	f002 fed8 	bl	801a3a8 <_fflush_r>
 80175f8:	b938      	cbnz	r0, 801760a <__swbuf_r+0x74>
 80175fa:	4638      	mov	r0, r7
 80175fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175fe:	4621      	mov	r1, r4
 8017600:	4628      	mov	r0, r5
 8017602:	f000 f805 	bl	8017610 <__swsetup_r>
 8017606:	2800      	cmp	r0, #0
 8017608:	d0d5      	beq.n	80175b6 <__swbuf_r+0x20>
 801760a:	f04f 37ff 	mov.w	r7, #4294967295
 801760e:	e7f4      	b.n	80175fa <__swbuf_r+0x64>

08017610 <__swsetup_r>:
 8017610:	b538      	push	{r3, r4, r5, lr}
 8017612:	4b2a      	ldr	r3, [pc, #168]	; (80176bc <__swsetup_r+0xac>)
 8017614:	4605      	mov	r5, r0
 8017616:	6818      	ldr	r0, [r3, #0]
 8017618:	460c      	mov	r4, r1
 801761a:	b118      	cbz	r0, 8017624 <__swsetup_r+0x14>
 801761c:	6a03      	ldr	r3, [r0, #32]
 801761e:	b90b      	cbnz	r3, 8017624 <__swsetup_r+0x14>
 8017620:	f7ff fdf4 	bl	801720c <__sinit>
 8017624:	89a3      	ldrh	r3, [r4, #12]
 8017626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801762a:	0718      	lsls	r0, r3, #28
 801762c:	d422      	bmi.n	8017674 <__swsetup_r+0x64>
 801762e:	06d9      	lsls	r1, r3, #27
 8017630:	d407      	bmi.n	8017642 <__swsetup_r+0x32>
 8017632:	2309      	movs	r3, #9
 8017634:	602b      	str	r3, [r5, #0]
 8017636:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801763a:	81a3      	strh	r3, [r4, #12]
 801763c:	f04f 30ff 	mov.w	r0, #4294967295
 8017640:	e034      	b.n	80176ac <__swsetup_r+0x9c>
 8017642:	0758      	lsls	r0, r3, #29
 8017644:	d512      	bpl.n	801766c <__swsetup_r+0x5c>
 8017646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017648:	b141      	cbz	r1, 801765c <__swsetup_r+0x4c>
 801764a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801764e:	4299      	cmp	r1, r3
 8017650:	d002      	beq.n	8017658 <__swsetup_r+0x48>
 8017652:	4628      	mov	r0, r5
 8017654:	f000 ff42 	bl	80184dc <_free_r>
 8017658:	2300      	movs	r3, #0
 801765a:	6363      	str	r3, [r4, #52]	; 0x34
 801765c:	89a3      	ldrh	r3, [r4, #12]
 801765e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017662:	81a3      	strh	r3, [r4, #12]
 8017664:	2300      	movs	r3, #0
 8017666:	6063      	str	r3, [r4, #4]
 8017668:	6923      	ldr	r3, [r4, #16]
 801766a:	6023      	str	r3, [r4, #0]
 801766c:	89a3      	ldrh	r3, [r4, #12]
 801766e:	f043 0308 	orr.w	r3, r3, #8
 8017672:	81a3      	strh	r3, [r4, #12]
 8017674:	6923      	ldr	r3, [r4, #16]
 8017676:	b94b      	cbnz	r3, 801768c <__swsetup_r+0x7c>
 8017678:	89a3      	ldrh	r3, [r4, #12]
 801767a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801767e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017682:	d003      	beq.n	801768c <__swsetup_r+0x7c>
 8017684:	4621      	mov	r1, r4
 8017686:	4628      	mov	r0, r5
 8017688:	f002 fedc 	bl	801a444 <__smakebuf_r>
 801768c:	89a0      	ldrh	r0, [r4, #12]
 801768e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017692:	f010 0301 	ands.w	r3, r0, #1
 8017696:	d00a      	beq.n	80176ae <__swsetup_r+0x9e>
 8017698:	2300      	movs	r3, #0
 801769a:	60a3      	str	r3, [r4, #8]
 801769c:	6963      	ldr	r3, [r4, #20]
 801769e:	425b      	negs	r3, r3
 80176a0:	61a3      	str	r3, [r4, #24]
 80176a2:	6923      	ldr	r3, [r4, #16]
 80176a4:	b943      	cbnz	r3, 80176b8 <__swsetup_r+0xa8>
 80176a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80176aa:	d1c4      	bne.n	8017636 <__swsetup_r+0x26>
 80176ac:	bd38      	pop	{r3, r4, r5, pc}
 80176ae:	0781      	lsls	r1, r0, #30
 80176b0:	bf58      	it	pl
 80176b2:	6963      	ldrpl	r3, [r4, #20]
 80176b4:	60a3      	str	r3, [r4, #8]
 80176b6:	e7f4      	b.n	80176a2 <__swsetup_r+0x92>
 80176b8:	2000      	movs	r0, #0
 80176ba:	e7f7      	b.n	80176ac <__swsetup_r+0x9c>
 80176bc:	20000074 	.word	0x20000074

080176c0 <memset>:
 80176c0:	4402      	add	r2, r0
 80176c2:	4603      	mov	r3, r0
 80176c4:	4293      	cmp	r3, r2
 80176c6:	d100      	bne.n	80176ca <memset+0xa>
 80176c8:	4770      	bx	lr
 80176ca:	f803 1b01 	strb.w	r1, [r3], #1
 80176ce:	e7f9      	b.n	80176c4 <memset+0x4>

080176d0 <_localeconv_r>:
 80176d0:	4800      	ldr	r0, [pc, #0]	; (80176d4 <_localeconv_r+0x4>)
 80176d2:	4770      	bx	lr
 80176d4:	20000168 	.word	0x20000168

080176d8 <_close_r>:
 80176d8:	b538      	push	{r3, r4, r5, lr}
 80176da:	4d06      	ldr	r5, [pc, #24]	; (80176f4 <_close_r+0x1c>)
 80176dc:	2300      	movs	r3, #0
 80176de:	4604      	mov	r4, r0
 80176e0:	4608      	mov	r0, r1
 80176e2:	602b      	str	r3, [r5, #0]
 80176e4:	f7ec fe11 	bl	800430a <_close>
 80176e8:	1c43      	adds	r3, r0, #1
 80176ea:	d102      	bne.n	80176f2 <_close_r+0x1a>
 80176ec:	682b      	ldr	r3, [r5, #0]
 80176ee:	b103      	cbz	r3, 80176f2 <_close_r+0x1a>
 80176f0:	6023      	str	r3, [r4, #0]
 80176f2:	bd38      	pop	{r3, r4, r5, pc}
 80176f4:	20000418 	.word	0x20000418

080176f8 <_lseek_r>:
 80176f8:	b538      	push	{r3, r4, r5, lr}
 80176fa:	4d07      	ldr	r5, [pc, #28]	; (8017718 <_lseek_r+0x20>)
 80176fc:	4604      	mov	r4, r0
 80176fe:	4608      	mov	r0, r1
 8017700:	4611      	mov	r1, r2
 8017702:	2200      	movs	r2, #0
 8017704:	602a      	str	r2, [r5, #0]
 8017706:	461a      	mov	r2, r3
 8017708:	f7ec fe26 	bl	8004358 <_lseek>
 801770c:	1c43      	adds	r3, r0, #1
 801770e:	d102      	bne.n	8017716 <_lseek_r+0x1e>
 8017710:	682b      	ldr	r3, [r5, #0]
 8017712:	b103      	cbz	r3, 8017716 <_lseek_r+0x1e>
 8017714:	6023      	str	r3, [r4, #0]
 8017716:	bd38      	pop	{r3, r4, r5, pc}
 8017718:	20000418 	.word	0x20000418

0801771c <_read_r>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	4d07      	ldr	r5, [pc, #28]	; (801773c <_read_r+0x20>)
 8017720:	4604      	mov	r4, r0
 8017722:	4608      	mov	r0, r1
 8017724:	4611      	mov	r1, r2
 8017726:	2200      	movs	r2, #0
 8017728:	602a      	str	r2, [r5, #0]
 801772a:	461a      	mov	r2, r3
 801772c:	f7ec fdb4 	bl	8004298 <_read>
 8017730:	1c43      	adds	r3, r0, #1
 8017732:	d102      	bne.n	801773a <_read_r+0x1e>
 8017734:	682b      	ldr	r3, [r5, #0]
 8017736:	b103      	cbz	r3, 801773a <_read_r+0x1e>
 8017738:	6023      	str	r3, [r4, #0]
 801773a:	bd38      	pop	{r3, r4, r5, pc}
 801773c:	20000418 	.word	0x20000418

08017740 <_write_r>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4d07      	ldr	r5, [pc, #28]	; (8017760 <_write_r+0x20>)
 8017744:	4604      	mov	r4, r0
 8017746:	4608      	mov	r0, r1
 8017748:	4611      	mov	r1, r2
 801774a:	2200      	movs	r2, #0
 801774c:	602a      	str	r2, [r5, #0]
 801774e:	461a      	mov	r2, r3
 8017750:	f7ec fdbf 	bl	80042d2 <_write>
 8017754:	1c43      	adds	r3, r0, #1
 8017756:	d102      	bne.n	801775e <_write_r+0x1e>
 8017758:	682b      	ldr	r3, [r5, #0]
 801775a:	b103      	cbz	r3, 801775e <_write_r+0x1e>
 801775c:	6023      	str	r3, [r4, #0]
 801775e:	bd38      	pop	{r3, r4, r5, pc}
 8017760:	20000418 	.word	0x20000418

08017764 <__errno>:
 8017764:	4b01      	ldr	r3, [pc, #4]	; (801776c <__errno+0x8>)
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	4770      	bx	lr
 801776a:	bf00      	nop
 801776c:	20000074 	.word	0x20000074

08017770 <__libc_init_array>:
 8017770:	b570      	push	{r4, r5, r6, lr}
 8017772:	4d0d      	ldr	r5, [pc, #52]	; (80177a8 <__libc_init_array+0x38>)
 8017774:	4c0d      	ldr	r4, [pc, #52]	; (80177ac <__libc_init_array+0x3c>)
 8017776:	1b64      	subs	r4, r4, r5
 8017778:	10a4      	asrs	r4, r4, #2
 801777a:	2600      	movs	r6, #0
 801777c:	42a6      	cmp	r6, r4
 801777e:	d109      	bne.n	8017794 <__libc_init_array+0x24>
 8017780:	4d0b      	ldr	r5, [pc, #44]	; (80177b0 <__libc_init_array+0x40>)
 8017782:	4c0c      	ldr	r4, [pc, #48]	; (80177b4 <__libc_init_array+0x44>)
 8017784:	f004 fd10 	bl	801c1a8 <_init>
 8017788:	1b64      	subs	r4, r4, r5
 801778a:	10a4      	asrs	r4, r4, #2
 801778c:	2600      	movs	r6, #0
 801778e:	42a6      	cmp	r6, r4
 8017790:	d105      	bne.n	801779e <__libc_init_array+0x2e>
 8017792:	bd70      	pop	{r4, r5, r6, pc}
 8017794:	f855 3b04 	ldr.w	r3, [r5], #4
 8017798:	4798      	blx	r3
 801779a:	3601      	adds	r6, #1
 801779c:	e7ee      	b.n	801777c <__libc_init_array+0xc>
 801779e:	f855 3b04 	ldr.w	r3, [r5], #4
 80177a2:	4798      	blx	r3
 80177a4:	3601      	adds	r6, #1
 80177a6:	e7f2      	b.n	801778e <__libc_init_array+0x1e>
 80177a8:	0801d000 	.word	0x0801d000
 80177ac:	0801d000 	.word	0x0801d000
 80177b0:	0801d000 	.word	0x0801d000
 80177b4:	0801d004 	.word	0x0801d004

080177b8 <__retarget_lock_init_recursive>:
 80177b8:	4770      	bx	lr

080177ba <__retarget_lock_acquire_recursive>:
 80177ba:	4770      	bx	lr

080177bc <__retarget_lock_release_recursive>:
 80177bc:	4770      	bx	lr

080177be <memcpy>:
 80177be:	440a      	add	r2, r1
 80177c0:	4291      	cmp	r1, r2
 80177c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80177c6:	d100      	bne.n	80177ca <memcpy+0xc>
 80177c8:	4770      	bx	lr
 80177ca:	b510      	push	{r4, lr}
 80177cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177d4:	4291      	cmp	r1, r2
 80177d6:	d1f9      	bne.n	80177cc <memcpy+0xe>
 80177d8:	bd10      	pop	{r4, pc}
	...

080177dc <nanf>:
 80177dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80177e4 <nanf+0x8>
 80177e0:	4770      	bx	lr
 80177e2:	bf00      	nop
 80177e4:	7fc00000 	.word	0x7fc00000

080177e8 <quorem>:
 80177e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ec:	6903      	ldr	r3, [r0, #16]
 80177ee:	690c      	ldr	r4, [r1, #16]
 80177f0:	42a3      	cmp	r3, r4
 80177f2:	4607      	mov	r7, r0
 80177f4:	db7e      	blt.n	80178f4 <quorem+0x10c>
 80177f6:	3c01      	subs	r4, #1
 80177f8:	f101 0814 	add.w	r8, r1, #20
 80177fc:	f100 0514 	add.w	r5, r0, #20
 8017800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017804:	9301      	str	r3, [sp, #4]
 8017806:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801780a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801780e:	3301      	adds	r3, #1
 8017810:	429a      	cmp	r2, r3
 8017812:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801781a:	fbb2 f6f3 	udiv	r6, r2, r3
 801781e:	d331      	bcc.n	8017884 <quorem+0x9c>
 8017820:	f04f 0e00 	mov.w	lr, #0
 8017824:	4640      	mov	r0, r8
 8017826:	46ac      	mov	ip, r5
 8017828:	46f2      	mov	sl, lr
 801782a:	f850 2b04 	ldr.w	r2, [r0], #4
 801782e:	b293      	uxth	r3, r2
 8017830:	fb06 e303 	mla	r3, r6, r3, lr
 8017834:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017838:	0c1a      	lsrs	r2, r3, #16
 801783a:	b29b      	uxth	r3, r3
 801783c:	ebaa 0303 	sub.w	r3, sl, r3
 8017840:	f8dc a000 	ldr.w	sl, [ip]
 8017844:	fa13 f38a 	uxtah	r3, r3, sl
 8017848:	fb06 220e 	mla	r2, r6, lr, r2
 801784c:	9300      	str	r3, [sp, #0]
 801784e:	9b00      	ldr	r3, [sp, #0]
 8017850:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017854:	b292      	uxth	r2, r2
 8017856:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801785a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801785e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017862:	4581      	cmp	r9, r0
 8017864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017868:	f84c 3b04 	str.w	r3, [ip], #4
 801786c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017870:	d2db      	bcs.n	801782a <quorem+0x42>
 8017872:	f855 300b 	ldr.w	r3, [r5, fp]
 8017876:	b92b      	cbnz	r3, 8017884 <quorem+0x9c>
 8017878:	9b01      	ldr	r3, [sp, #4]
 801787a:	3b04      	subs	r3, #4
 801787c:	429d      	cmp	r5, r3
 801787e:	461a      	mov	r2, r3
 8017880:	d32c      	bcc.n	80178dc <quorem+0xf4>
 8017882:	613c      	str	r4, [r7, #16]
 8017884:	4638      	mov	r0, r7
 8017886:	f001 f9ef 	bl	8018c68 <__mcmp>
 801788a:	2800      	cmp	r0, #0
 801788c:	db22      	blt.n	80178d4 <quorem+0xec>
 801788e:	3601      	adds	r6, #1
 8017890:	4629      	mov	r1, r5
 8017892:	2000      	movs	r0, #0
 8017894:	f858 2b04 	ldr.w	r2, [r8], #4
 8017898:	f8d1 c000 	ldr.w	ip, [r1]
 801789c:	b293      	uxth	r3, r2
 801789e:	1ac3      	subs	r3, r0, r3
 80178a0:	0c12      	lsrs	r2, r2, #16
 80178a2:	fa13 f38c 	uxtah	r3, r3, ip
 80178a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80178aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80178ae:	b29b      	uxth	r3, r3
 80178b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178b4:	45c1      	cmp	r9, r8
 80178b6:	f841 3b04 	str.w	r3, [r1], #4
 80178ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80178be:	d2e9      	bcs.n	8017894 <quorem+0xac>
 80178c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80178c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80178c8:	b922      	cbnz	r2, 80178d4 <quorem+0xec>
 80178ca:	3b04      	subs	r3, #4
 80178cc:	429d      	cmp	r5, r3
 80178ce:	461a      	mov	r2, r3
 80178d0:	d30a      	bcc.n	80178e8 <quorem+0x100>
 80178d2:	613c      	str	r4, [r7, #16]
 80178d4:	4630      	mov	r0, r6
 80178d6:	b003      	add	sp, #12
 80178d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178dc:	6812      	ldr	r2, [r2, #0]
 80178de:	3b04      	subs	r3, #4
 80178e0:	2a00      	cmp	r2, #0
 80178e2:	d1ce      	bne.n	8017882 <quorem+0x9a>
 80178e4:	3c01      	subs	r4, #1
 80178e6:	e7c9      	b.n	801787c <quorem+0x94>
 80178e8:	6812      	ldr	r2, [r2, #0]
 80178ea:	3b04      	subs	r3, #4
 80178ec:	2a00      	cmp	r2, #0
 80178ee:	d1f0      	bne.n	80178d2 <quorem+0xea>
 80178f0:	3c01      	subs	r4, #1
 80178f2:	e7eb      	b.n	80178cc <quorem+0xe4>
 80178f4:	2000      	movs	r0, #0
 80178f6:	e7ee      	b.n	80178d6 <quorem+0xee>

080178f8 <_dtoa_r>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	ed2d 8b04 	vpush	{d8-d9}
 8017900:	69c5      	ldr	r5, [r0, #28]
 8017902:	b093      	sub	sp, #76	; 0x4c
 8017904:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017908:	ec57 6b10 	vmov	r6, r7, d0
 801790c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017910:	9107      	str	r1, [sp, #28]
 8017912:	4604      	mov	r4, r0
 8017914:	920a      	str	r2, [sp, #40]	; 0x28
 8017916:	930d      	str	r3, [sp, #52]	; 0x34
 8017918:	b975      	cbnz	r5, 8017938 <_dtoa_r+0x40>
 801791a:	2010      	movs	r0, #16
 801791c:	f000 fe2a 	bl	8018574 <malloc>
 8017920:	4602      	mov	r2, r0
 8017922:	61e0      	str	r0, [r4, #28]
 8017924:	b920      	cbnz	r0, 8017930 <_dtoa_r+0x38>
 8017926:	4bae      	ldr	r3, [pc, #696]	; (8017be0 <_dtoa_r+0x2e8>)
 8017928:	21ef      	movs	r1, #239	; 0xef
 801792a:	48ae      	ldr	r0, [pc, #696]	; (8017be4 <_dtoa_r+0x2ec>)
 801792c:	f002 fe60 	bl	801a5f0 <__assert_func>
 8017930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017934:	6005      	str	r5, [r0, #0]
 8017936:	60c5      	str	r5, [r0, #12]
 8017938:	69e3      	ldr	r3, [r4, #28]
 801793a:	6819      	ldr	r1, [r3, #0]
 801793c:	b151      	cbz	r1, 8017954 <_dtoa_r+0x5c>
 801793e:	685a      	ldr	r2, [r3, #4]
 8017940:	604a      	str	r2, [r1, #4]
 8017942:	2301      	movs	r3, #1
 8017944:	4093      	lsls	r3, r2
 8017946:	608b      	str	r3, [r1, #8]
 8017948:	4620      	mov	r0, r4
 801794a:	f000 ff07 	bl	801875c <_Bfree>
 801794e:	69e3      	ldr	r3, [r4, #28]
 8017950:	2200      	movs	r2, #0
 8017952:	601a      	str	r2, [r3, #0]
 8017954:	1e3b      	subs	r3, r7, #0
 8017956:	bfbb      	ittet	lt
 8017958:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801795c:	9303      	strlt	r3, [sp, #12]
 801795e:	2300      	movge	r3, #0
 8017960:	2201      	movlt	r2, #1
 8017962:	bfac      	ite	ge
 8017964:	f8c8 3000 	strge.w	r3, [r8]
 8017968:	f8c8 2000 	strlt.w	r2, [r8]
 801796c:	4b9e      	ldr	r3, [pc, #632]	; (8017be8 <_dtoa_r+0x2f0>)
 801796e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017972:	ea33 0308 	bics.w	r3, r3, r8
 8017976:	d11b      	bne.n	80179b0 <_dtoa_r+0xb8>
 8017978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801797a:	f242 730f 	movw	r3, #9999	; 0x270f
 801797e:	6013      	str	r3, [r2, #0]
 8017980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017984:	4333      	orrs	r3, r6
 8017986:	f000 8593 	beq.w	80184b0 <_dtoa_r+0xbb8>
 801798a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801798c:	b963      	cbnz	r3, 80179a8 <_dtoa_r+0xb0>
 801798e:	4b97      	ldr	r3, [pc, #604]	; (8017bec <_dtoa_r+0x2f4>)
 8017990:	e027      	b.n	80179e2 <_dtoa_r+0xea>
 8017992:	4b97      	ldr	r3, [pc, #604]	; (8017bf0 <_dtoa_r+0x2f8>)
 8017994:	9300      	str	r3, [sp, #0]
 8017996:	3308      	adds	r3, #8
 8017998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801799a:	6013      	str	r3, [r2, #0]
 801799c:	9800      	ldr	r0, [sp, #0]
 801799e:	b013      	add	sp, #76	; 0x4c
 80179a0:	ecbd 8b04 	vpop	{d8-d9}
 80179a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a8:	4b90      	ldr	r3, [pc, #576]	; (8017bec <_dtoa_r+0x2f4>)
 80179aa:	9300      	str	r3, [sp, #0]
 80179ac:	3303      	adds	r3, #3
 80179ae:	e7f3      	b.n	8017998 <_dtoa_r+0xa0>
 80179b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80179b4:	2200      	movs	r2, #0
 80179b6:	ec51 0b17 	vmov	r0, r1, d7
 80179ba:	eeb0 8a47 	vmov.f32	s16, s14
 80179be:	eef0 8a67 	vmov.f32	s17, s15
 80179c2:	2300      	movs	r3, #0
 80179c4:	f7e9 f8a8 	bl	8000b18 <__aeabi_dcmpeq>
 80179c8:	4681      	mov	r9, r0
 80179ca:	b160      	cbz	r0, 80179e6 <_dtoa_r+0xee>
 80179cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179ce:	2301      	movs	r3, #1
 80179d0:	6013      	str	r3, [r2, #0]
 80179d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	f000 8568 	beq.w	80184aa <_dtoa_r+0xbb2>
 80179da:	4b86      	ldr	r3, [pc, #536]	; (8017bf4 <_dtoa_r+0x2fc>)
 80179dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179de:	6013      	str	r3, [r2, #0]
 80179e0:	3b01      	subs	r3, #1
 80179e2:	9300      	str	r3, [sp, #0]
 80179e4:	e7da      	b.n	801799c <_dtoa_r+0xa4>
 80179e6:	aa10      	add	r2, sp, #64	; 0x40
 80179e8:	a911      	add	r1, sp, #68	; 0x44
 80179ea:	4620      	mov	r0, r4
 80179ec:	eeb0 0a48 	vmov.f32	s0, s16
 80179f0:	eef0 0a68 	vmov.f32	s1, s17
 80179f4:	f001 fa4e 	bl	8018e94 <__d2b>
 80179f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80179fc:	4682      	mov	sl, r0
 80179fe:	2d00      	cmp	r5, #0
 8017a00:	d07f      	beq.n	8017b02 <_dtoa_r+0x20a>
 8017a02:	ee18 3a90 	vmov	r3, s17
 8017a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017a0e:	ec51 0b18 	vmov	r0, r1, d8
 8017a12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017a1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017a1e:	4619      	mov	r1, r3
 8017a20:	2200      	movs	r2, #0
 8017a22:	4b75      	ldr	r3, [pc, #468]	; (8017bf8 <_dtoa_r+0x300>)
 8017a24:	f7e8 fc58 	bl	80002d8 <__aeabi_dsub>
 8017a28:	a367      	add	r3, pc, #412	; (adr r3, 8017bc8 <_dtoa_r+0x2d0>)
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	f7e8 fe0b 	bl	8000648 <__aeabi_dmul>
 8017a32:	a367      	add	r3, pc, #412	; (adr r3, 8017bd0 <_dtoa_r+0x2d8>)
 8017a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a38:	f7e8 fc50 	bl	80002dc <__adddf3>
 8017a3c:	4606      	mov	r6, r0
 8017a3e:	4628      	mov	r0, r5
 8017a40:	460f      	mov	r7, r1
 8017a42:	f7e8 fd97 	bl	8000574 <__aeabi_i2d>
 8017a46:	a364      	add	r3, pc, #400	; (adr r3, 8017bd8 <_dtoa_r+0x2e0>)
 8017a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a4c:	f7e8 fdfc 	bl	8000648 <__aeabi_dmul>
 8017a50:	4602      	mov	r2, r0
 8017a52:	460b      	mov	r3, r1
 8017a54:	4630      	mov	r0, r6
 8017a56:	4639      	mov	r1, r7
 8017a58:	f7e8 fc40 	bl	80002dc <__adddf3>
 8017a5c:	4606      	mov	r6, r0
 8017a5e:	460f      	mov	r7, r1
 8017a60:	f7e9 f8a2 	bl	8000ba8 <__aeabi_d2iz>
 8017a64:	2200      	movs	r2, #0
 8017a66:	4683      	mov	fp, r0
 8017a68:	2300      	movs	r3, #0
 8017a6a:	4630      	mov	r0, r6
 8017a6c:	4639      	mov	r1, r7
 8017a6e:	f7e9 f85d 	bl	8000b2c <__aeabi_dcmplt>
 8017a72:	b148      	cbz	r0, 8017a88 <_dtoa_r+0x190>
 8017a74:	4658      	mov	r0, fp
 8017a76:	f7e8 fd7d 	bl	8000574 <__aeabi_i2d>
 8017a7a:	4632      	mov	r2, r6
 8017a7c:	463b      	mov	r3, r7
 8017a7e:	f7e9 f84b 	bl	8000b18 <__aeabi_dcmpeq>
 8017a82:	b908      	cbnz	r0, 8017a88 <_dtoa_r+0x190>
 8017a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a88:	f1bb 0f16 	cmp.w	fp, #22
 8017a8c:	d857      	bhi.n	8017b3e <_dtoa_r+0x246>
 8017a8e:	4b5b      	ldr	r3, [pc, #364]	; (8017bfc <_dtoa_r+0x304>)
 8017a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a98:	ec51 0b18 	vmov	r0, r1, d8
 8017a9c:	f7e9 f846 	bl	8000b2c <__aeabi_dcmplt>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d04e      	beq.n	8017b42 <_dtoa_r+0x24a>
 8017aa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8017aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017aae:	1b5b      	subs	r3, r3, r5
 8017ab0:	1e5a      	subs	r2, r3, #1
 8017ab2:	bf45      	ittet	mi
 8017ab4:	f1c3 0301 	rsbmi	r3, r3, #1
 8017ab8:	9305      	strmi	r3, [sp, #20]
 8017aba:	2300      	movpl	r3, #0
 8017abc:	2300      	movmi	r3, #0
 8017abe:	9206      	str	r2, [sp, #24]
 8017ac0:	bf54      	ite	pl
 8017ac2:	9305      	strpl	r3, [sp, #20]
 8017ac4:	9306      	strmi	r3, [sp, #24]
 8017ac6:	f1bb 0f00 	cmp.w	fp, #0
 8017aca:	db3c      	blt.n	8017b46 <_dtoa_r+0x24e>
 8017acc:	9b06      	ldr	r3, [sp, #24]
 8017ace:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017ad2:	445b      	add	r3, fp
 8017ad4:	9306      	str	r3, [sp, #24]
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	9308      	str	r3, [sp, #32]
 8017ada:	9b07      	ldr	r3, [sp, #28]
 8017adc:	2b09      	cmp	r3, #9
 8017ade:	d868      	bhi.n	8017bb2 <_dtoa_r+0x2ba>
 8017ae0:	2b05      	cmp	r3, #5
 8017ae2:	bfc4      	itt	gt
 8017ae4:	3b04      	subgt	r3, #4
 8017ae6:	9307      	strgt	r3, [sp, #28]
 8017ae8:	9b07      	ldr	r3, [sp, #28]
 8017aea:	f1a3 0302 	sub.w	r3, r3, #2
 8017aee:	bfcc      	ite	gt
 8017af0:	2500      	movgt	r5, #0
 8017af2:	2501      	movle	r5, #1
 8017af4:	2b03      	cmp	r3, #3
 8017af6:	f200 8085 	bhi.w	8017c04 <_dtoa_r+0x30c>
 8017afa:	e8df f003 	tbb	[pc, r3]
 8017afe:	3b2e      	.short	0x3b2e
 8017b00:	5839      	.short	0x5839
 8017b02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017b06:	441d      	add	r5, r3
 8017b08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017b0c:	2b20      	cmp	r3, #32
 8017b0e:	bfc1      	itttt	gt
 8017b10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017b14:	fa08 f803 	lslgt.w	r8, r8, r3
 8017b18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017b1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017b20:	bfd6      	itet	le
 8017b22:	f1c3 0320 	rsble	r3, r3, #32
 8017b26:	ea48 0003 	orrgt.w	r0, r8, r3
 8017b2a:	fa06 f003 	lslle.w	r0, r6, r3
 8017b2e:	f7e8 fd11 	bl	8000554 <__aeabi_ui2d>
 8017b32:	2201      	movs	r2, #1
 8017b34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017b38:	3d01      	subs	r5, #1
 8017b3a:	920e      	str	r2, [sp, #56]	; 0x38
 8017b3c:	e76f      	b.n	8017a1e <_dtoa_r+0x126>
 8017b3e:	2301      	movs	r3, #1
 8017b40:	e7b3      	b.n	8017aaa <_dtoa_r+0x1b2>
 8017b42:	900c      	str	r0, [sp, #48]	; 0x30
 8017b44:	e7b2      	b.n	8017aac <_dtoa_r+0x1b4>
 8017b46:	9b05      	ldr	r3, [sp, #20]
 8017b48:	eba3 030b 	sub.w	r3, r3, fp
 8017b4c:	9305      	str	r3, [sp, #20]
 8017b4e:	f1cb 0300 	rsb	r3, fp, #0
 8017b52:	9308      	str	r3, [sp, #32]
 8017b54:	2300      	movs	r3, #0
 8017b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b58:	e7bf      	b.n	8017ada <_dtoa_r+0x1e2>
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	dc52      	bgt.n	8017c0a <_dtoa_r+0x312>
 8017b64:	2301      	movs	r3, #1
 8017b66:	9301      	str	r3, [sp, #4]
 8017b68:	9304      	str	r3, [sp, #16]
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	920a      	str	r2, [sp, #40]	; 0x28
 8017b6e:	e00b      	b.n	8017b88 <_dtoa_r+0x290>
 8017b70:	2301      	movs	r3, #1
 8017b72:	e7f3      	b.n	8017b5c <_dtoa_r+0x264>
 8017b74:	2300      	movs	r3, #0
 8017b76:	9309      	str	r3, [sp, #36]	; 0x24
 8017b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b7a:	445b      	add	r3, fp
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	3301      	adds	r3, #1
 8017b80:	2b01      	cmp	r3, #1
 8017b82:	9304      	str	r3, [sp, #16]
 8017b84:	bfb8      	it	lt
 8017b86:	2301      	movlt	r3, #1
 8017b88:	69e0      	ldr	r0, [r4, #28]
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	2204      	movs	r2, #4
 8017b8e:	f102 0614 	add.w	r6, r2, #20
 8017b92:	429e      	cmp	r6, r3
 8017b94:	d93d      	bls.n	8017c12 <_dtoa_r+0x31a>
 8017b96:	6041      	str	r1, [r0, #4]
 8017b98:	4620      	mov	r0, r4
 8017b9a:	f000 fd9f 	bl	80186dc <_Balloc>
 8017b9e:	9000      	str	r0, [sp, #0]
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d139      	bne.n	8017c18 <_dtoa_r+0x320>
 8017ba4:	4b16      	ldr	r3, [pc, #88]	; (8017c00 <_dtoa_r+0x308>)
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	f240 11af 	movw	r1, #431	; 0x1af
 8017bac:	e6bd      	b.n	801792a <_dtoa_r+0x32>
 8017bae:	2301      	movs	r3, #1
 8017bb0:	e7e1      	b.n	8017b76 <_dtoa_r+0x27e>
 8017bb2:	2501      	movs	r5, #1
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9307      	str	r3, [sp, #28]
 8017bb8:	9509      	str	r5, [sp, #36]	; 0x24
 8017bba:	f04f 33ff 	mov.w	r3, #4294967295
 8017bbe:	9301      	str	r3, [sp, #4]
 8017bc0:	9304      	str	r3, [sp, #16]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	2312      	movs	r3, #18
 8017bc6:	e7d1      	b.n	8017b6c <_dtoa_r+0x274>
 8017bc8:	636f4361 	.word	0x636f4361
 8017bcc:	3fd287a7 	.word	0x3fd287a7
 8017bd0:	8b60c8b3 	.word	0x8b60c8b3
 8017bd4:	3fc68a28 	.word	0x3fc68a28
 8017bd8:	509f79fb 	.word	0x509f79fb
 8017bdc:	3fd34413 	.word	0x3fd34413
 8017be0:	0801ca42 	.word	0x0801ca42
 8017be4:	0801ca59 	.word	0x0801ca59
 8017be8:	7ff00000 	.word	0x7ff00000
 8017bec:	0801ca3e 	.word	0x0801ca3e
 8017bf0:	0801ca35 	.word	0x0801ca35
 8017bf4:	0801ca0d 	.word	0x0801ca0d
 8017bf8:	3ff80000 	.word	0x3ff80000
 8017bfc:	0801cb48 	.word	0x0801cb48
 8017c00:	0801cab1 	.word	0x0801cab1
 8017c04:	2301      	movs	r3, #1
 8017c06:	9309      	str	r3, [sp, #36]	; 0x24
 8017c08:	e7d7      	b.n	8017bba <_dtoa_r+0x2c2>
 8017c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c0c:	9301      	str	r3, [sp, #4]
 8017c0e:	9304      	str	r3, [sp, #16]
 8017c10:	e7ba      	b.n	8017b88 <_dtoa_r+0x290>
 8017c12:	3101      	adds	r1, #1
 8017c14:	0052      	lsls	r2, r2, #1
 8017c16:	e7ba      	b.n	8017b8e <_dtoa_r+0x296>
 8017c18:	69e3      	ldr	r3, [r4, #28]
 8017c1a:	9a00      	ldr	r2, [sp, #0]
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	9b04      	ldr	r3, [sp, #16]
 8017c20:	2b0e      	cmp	r3, #14
 8017c22:	f200 80a8 	bhi.w	8017d76 <_dtoa_r+0x47e>
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	f000 80a5 	beq.w	8017d76 <_dtoa_r+0x47e>
 8017c2c:	f1bb 0f00 	cmp.w	fp, #0
 8017c30:	dd38      	ble.n	8017ca4 <_dtoa_r+0x3ac>
 8017c32:	4bc0      	ldr	r3, [pc, #768]	; (8017f34 <_dtoa_r+0x63c>)
 8017c34:	f00b 020f 	and.w	r2, fp, #15
 8017c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017c40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017c44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017c48:	d019      	beq.n	8017c7e <_dtoa_r+0x386>
 8017c4a:	4bbb      	ldr	r3, [pc, #748]	; (8017f38 <_dtoa_r+0x640>)
 8017c4c:	ec51 0b18 	vmov	r0, r1, d8
 8017c50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017c54:	f7e8 fe22 	bl	800089c <__aeabi_ddiv>
 8017c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c5c:	f008 080f 	and.w	r8, r8, #15
 8017c60:	2503      	movs	r5, #3
 8017c62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017f38 <_dtoa_r+0x640>
 8017c66:	f1b8 0f00 	cmp.w	r8, #0
 8017c6a:	d10a      	bne.n	8017c82 <_dtoa_r+0x38a>
 8017c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c70:	4632      	mov	r2, r6
 8017c72:	463b      	mov	r3, r7
 8017c74:	f7e8 fe12 	bl	800089c <__aeabi_ddiv>
 8017c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c7c:	e02b      	b.n	8017cd6 <_dtoa_r+0x3de>
 8017c7e:	2502      	movs	r5, #2
 8017c80:	e7ef      	b.n	8017c62 <_dtoa_r+0x36a>
 8017c82:	f018 0f01 	tst.w	r8, #1
 8017c86:	d008      	beq.n	8017c9a <_dtoa_r+0x3a2>
 8017c88:	4630      	mov	r0, r6
 8017c8a:	4639      	mov	r1, r7
 8017c8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017c90:	f7e8 fcda 	bl	8000648 <__aeabi_dmul>
 8017c94:	3501      	adds	r5, #1
 8017c96:	4606      	mov	r6, r0
 8017c98:	460f      	mov	r7, r1
 8017c9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017c9e:	f109 0908 	add.w	r9, r9, #8
 8017ca2:	e7e0      	b.n	8017c66 <_dtoa_r+0x36e>
 8017ca4:	f000 809f 	beq.w	8017de6 <_dtoa_r+0x4ee>
 8017ca8:	f1cb 0600 	rsb	r6, fp, #0
 8017cac:	4ba1      	ldr	r3, [pc, #644]	; (8017f34 <_dtoa_r+0x63c>)
 8017cae:	4fa2      	ldr	r7, [pc, #648]	; (8017f38 <_dtoa_r+0x640>)
 8017cb0:	f006 020f 	and.w	r2, r6, #15
 8017cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cbc:	ec51 0b18 	vmov	r0, r1, d8
 8017cc0:	f7e8 fcc2 	bl	8000648 <__aeabi_dmul>
 8017cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017cc8:	1136      	asrs	r6, r6, #4
 8017cca:	2300      	movs	r3, #0
 8017ccc:	2502      	movs	r5, #2
 8017cce:	2e00      	cmp	r6, #0
 8017cd0:	d17e      	bne.n	8017dd0 <_dtoa_r+0x4d8>
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d1d0      	bne.n	8017c78 <_dtoa_r+0x380>
 8017cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	f000 8084 	beq.w	8017dea <_dtoa_r+0x4f2>
 8017ce2:	4b96      	ldr	r3, [pc, #600]	; (8017f3c <_dtoa_r+0x644>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	4640      	mov	r0, r8
 8017ce8:	4649      	mov	r1, r9
 8017cea:	f7e8 ff1f 	bl	8000b2c <__aeabi_dcmplt>
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	d07b      	beq.n	8017dea <_dtoa_r+0x4f2>
 8017cf2:	9b04      	ldr	r3, [sp, #16]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d078      	beq.n	8017dea <_dtoa_r+0x4f2>
 8017cf8:	9b01      	ldr	r3, [sp, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	dd39      	ble.n	8017d72 <_dtoa_r+0x47a>
 8017cfe:	4b90      	ldr	r3, [pc, #576]	; (8017f40 <_dtoa_r+0x648>)
 8017d00:	2200      	movs	r2, #0
 8017d02:	4640      	mov	r0, r8
 8017d04:	4649      	mov	r1, r9
 8017d06:	f7e8 fc9f 	bl	8000648 <__aeabi_dmul>
 8017d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d0e:	9e01      	ldr	r6, [sp, #4]
 8017d10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017d14:	3501      	adds	r5, #1
 8017d16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	f7e8 fc2a 	bl	8000574 <__aeabi_i2d>
 8017d20:	4642      	mov	r2, r8
 8017d22:	464b      	mov	r3, r9
 8017d24:	f7e8 fc90 	bl	8000648 <__aeabi_dmul>
 8017d28:	4b86      	ldr	r3, [pc, #536]	; (8017f44 <_dtoa_r+0x64c>)
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f7e8 fad6 	bl	80002dc <__adddf3>
 8017d30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d38:	9303      	str	r3, [sp, #12]
 8017d3a:	2e00      	cmp	r6, #0
 8017d3c:	d158      	bne.n	8017df0 <_dtoa_r+0x4f8>
 8017d3e:	4b82      	ldr	r3, [pc, #520]	; (8017f48 <_dtoa_r+0x650>)
 8017d40:	2200      	movs	r2, #0
 8017d42:	4640      	mov	r0, r8
 8017d44:	4649      	mov	r1, r9
 8017d46:	f7e8 fac7 	bl	80002d8 <__aeabi_dsub>
 8017d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d4e:	4680      	mov	r8, r0
 8017d50:	4689      	mov	r9, r1
 8017d52:	f7e8 ff09 	bl	8000b68 <__aeabi_dcmpgt>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	f040 8296 	bne.w	8018288 <_dtoa_r+0x990>
 8017d5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017d60:	4640      	mov	r0, r8
 8017d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d66:	4649      	mov	r1, r9
 8017d68:	f7e8 fee0 	bl	8000b2c <__aeabi_dcmplt>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	f040 8289 	bne.w	8018284 <_dtoa_r+0x98c>
 8017d72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f2c0 814e 	blt.w	801801a <_dtoa_r+0x722>
 8017d7e:	f1bb 0f0e 	cmp.w	fp, #14
 8017d82:	f300 814a 	bgt.w	801801a <_dtoa_r+0x722>
 8017d86:	4b6b      	ldr	r3, [pc, #428]	; (8017f34 <_dtoa_r+0x63c>)
 8017d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	f280 80dc 	bge.w	8017f50 <_dtoa_r+0x658>
 8017d98:	9b04      	ldr	r3, [sp, #16]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	f300 80d8 	bgt.w	8017f50 <_dtoa_r+0x658>
 8017da0:	f040 826f 	bne.w	8018282 <_dtoa_r+0x98a>
 8017da4:	4b68      	ldr	r3, [pc, #416]	; (8017f48 <_dtoa_r+0x650>)
 8017da6:	2200      	movs	r2, #0
 8017da8:	4640      	mov	r0, r8
 8017daa:	4649      	mov	r1, r9
 8017dac:	f7e8 fc4c 	bl	8000648 <__aeabi_dmul>
 8017db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017db4:	f7e8 fece 	bl	8000b54 <__aeabi_dcmpge>
 8017db8:	9e04      	ldr	r6, [sp, #16]
 8017dba:	4637      	mov	r7, r6
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	f040 8245 	bne.w	801824c <_dtoa_r+0x954>
 8017dc2:	9d00      	ldr	r5, [sp, #0]
 8017dc4:	2331      	movs	r3, #49	; 0x31
 8017dc6:	f805 3b01 	strb.w	r3, [r5], #1
 8017dca:	f10b 0b01 	add.w	fp, fp, #1
 8017dce:	e241      	b.n	8018254 <_dtoa_r+0x95c>
 8017dd0:	07f2      	lsls	r2, r6, #31
 8017dd2:	d505      	bpl.n	8017de0 <_dtoa_r+0x4e8>
 8017dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017dd8:	f7e8 fc36 	bl	8000648 <__aeabi_dmul>
 8017ddc:	3501      	adds	r5, #1
 8017dde:	2301      	movs	r3, #1
 8017de0:	1076      	asrs	r6, r6, #1
 8017de2:	3708      	adds	r7, #8
 8017de4:	e773      	b.n	8017cce <_dtoa_r+0x3d6>
 8017de6:	2502      	movs	r5, #2
 8017de8:	e775      	b.n	8017cd6 <_dtoa_r+0x3de>
 8017dea:	9e04      	ldr	r6, [sp, #16]
 8017dec:	465f      	mov	r7, fp
 8017dee:	e792      	b.n	8017d16 <_dtoa_r+0x41e>
 8017df0:	9900      	ldr	r1, [sp, #0]
 8017df2:	4b50      	ldr	r3, [pc, #320]	; (8017f34 <_dtoa_r+0x63c>)
 8017df4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017df8:	4431      	add	r1, r6
 8017dfa:	9102      	str	r1, [sp, #8]
 8017dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dfe:	eeb0 9a47 	vmov.f32	s18, s14
 8017e02:	eef0 9a67 	vmov.f32	s19, s15
 8017e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017e0e:	2900      	cmp	r1, #0
 8017e10:	d044      	beq.n	8017e9c <_dtoa_r+0x5a4>
 8017e12:	494e      	ldr	r1, [pc, #312]	; (8017f4c <_dtoa_r+0x654>)
 8017e14:	2000      	movs	r0, #0
 8017e16:	f7e8 fd41 	bl	800089c <__aeabi_ddiv>
 8017e1a:	ec53 2b19 	vmov	r2, r3, d9
 8017e1e:	f7e8 fa5b 	bl	80002d8 <__aeabi_dsub>
 8017e22:	9d00      	ldr	r5, [sp, #0]
 8017e24:	ec41 0b19 	vmov	d9, r0, r1
 8017e28:	4649      	mov	r1, r9
 8017e2a:	4640      	mov	r0, r8
 8017e2c:	f7e8 febc 	bl	8000ba8 <__aeabi_d2iz>
 8017e30:	4606      	mov	r6, r0
 8017e32:	f7e8 fb9f 	bl	8000574 <__aeabi_i2d>
 8017e36:	4602      	mov	r2, r0
 8017e38:	460b      	mov	r3, r1
 8017e3a:	4640      	mov	r0, r8
 8017e3c:	4649      	mov	r1, r9
 8017e3e:	f7e8 fa4b 	bl	80002d8 <__aeabi_dsub>
 8017e42:	3630      	adds	r6, #48	; 0x30
 8017e44:	f805 6b01 	strb.w	r6, [r5], #1
 8017e48:	ec53 2b19 	vmov	r2, r3, d9
 8017e4c:	4680      	mov	r8, r0
 8017e4e:	4689      	mov	r9, r1
 8017e50:	f7e8 fe6c 	bl	8000b2c <__aeabi_dcmplt>
 8017e54:	2800      	cmp	r0, #0
 8017e56:	d164      	bne.n	8017f22 <_dtoa_r+0x62a>
 8017e58:	4642      	mov	r2, r8
 8017e5a:	464b      	mov	r3, r9
 8017e5c:	4937      	ldr	r1, [pc, #220]	; (8017f3c <_dtoa_r+0x644>)
 8017e5e:	2000      	movs	r0, #0
 8017e60:	f7e8 fa3a 	bl	80002d8 <__aeabi_dsub>
 8017e64:	ec53 2b19 	vmov	r2, r3, d9
 8017e68:	f7e8 fe60 	bl	8000b2c <__aeabi_dcmplt>
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	f040 80b6 	bne.w	8017fde <_dtoa_r+0x6e6>
 8017e72:	9b02      	ldr	r3, [sp, #8]
 8017e74:	429d      	cmp	r5, r3
 8017e76:	f43f af7c 	beq.w	8017d72 <_dtoa_r+0x47a>
 8017e7a:	4b31      	ldr	r3, [pc, #196]	; (8017f40 <_dtoa_r+0x648>)
 8017e7c:	ec51 0b19 	vmov	r0, r1, d9
 8017e80:	2200      	movs	r2, #0
 8017e82:	f7e8 fbe1 	bl	8000648 <__aeabi_dmul>
 8017e86:	4b2e      	ldr	r3, [pc, #184]	; (8017f40 <_dtoa_r+0x648>)
 8017e88:	ec41 0b19 	vmov	d9, r0, r1
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	4640      	mov	r0, r8
 8017e90:	4649      	mov	r1, r9
 8017e92:	f7e8 fbd9 	bl	8000648 <__aeabi_dmul>
 8017e96:	4680      	mov	r8, r0
 8017e98:	4689      	mov	r9, r1
 8017e9a:	e7c5      	b.n	8017e28 <_dtoa_r+0x530>
 8017e9c:	ec51 0b17 	vmov	r0, r1, d7
 8017ea0:	f7e8 fbd2 	bl	8000648 <__aeabi_dmul>
 8017ea4:	9b02      	ldr	r3, [sp, #8]
 8017ea6:	9d00      	ldr	r5, [sp, #0]
 8017ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017eaa:	ec41 0b19 	vmov	d9, r0, r1
 8017eae:	4649      	mov	r1, r9
 8017eb0:	4640      	mov	r0, r8
 8017eb2:	f7e8 fe79 	bl	8000ba8 <__aeabi_d2iz>
 8017eb6:	4606      	mov	r6, r0
 8017eb8:	f7e8 fb5c 	bl	8000574 <__aeabi_i2d>
 8017ebc:	3630      	adds	r6, #48	; 0x30
 8017ebe:	4602      	mov	r2, r0
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	4640      	mov	r0, r8
 8017ec4:	4649      	mov	r1, r9
 8017ec6:	f7e8 fa07 	bl	80002d8 <__aeabi_dsub>
 8017eca:	f805 6b01 	strb.w	r6, [r5], #1
 8017ece:	9b02      	ldr	r3, [sp, #8]
 8017ed0:	429d      	cmp	r5, r3
 8017ed2:	4680      	mov	r8, r0
 8017ed4:	4689      	mov	r9, r1
 8017ed6:	f04f 0200 	mov.w	r2, #0
 8017eda:	d124      	bne.n	8017f26 <_dtoa_r+0x62e>
 8017edc:	4b1b      	ldr	r3, [pc, #108]	; (8017f4c <_dtoa_r+0x654>)
 8017ede:	ec51 0b19 	vmov	r0, r1, d9
 8017ee2:	f7e8 f9fb 	bl	80002dc <__adddf3>
 8017ee6:	4602      	mov	r2, r0
 8017ee8:	460b      	mov	r3, r1
 8017eea:	4640      	mov	r0, r8
 8017eec:	4649      	mov	r1, r9
 8017eee:	f7e8 fe3b 	bl	8000b68 <__aeabi_dcmpgt>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d173      	bne.n	8017fde <_dtoa_r+0x6e6>
 8017ef6:	ec53 2b19 	vmov	r2, r3, d9
 8017efa:	4914      	ldr	r1, [pc, #80]	; (8017f4c <_dtoa_r+0x654>)
 8017efc:	2000      	movs	r0, #0
 8017efe:	f7e8 f9eb 	bl	80002d8 <__aeabi_dsub>
 8017f02:	4602      	mov	r2, r0
 8017f04:	460b      	mov	r3, r1
 8017f06:	4640      	mov	r0, r8
 8017f08:	4649      	mov	r1, r9
 8017f0a:	f7e8 fe0f 	bl	8000b2c <__aeabi_dcmplt>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	f43f af2f 	beq.w	8017d72 <_dtoa_r+0x47a>
 8017f14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017f16:	1e6b      	subs	r3, r5, #1
 8017f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f1e:	2b30      	cmp	r3, #48	; 0x30
 8017f20:	d0f8      	beq.n	8017f14 <_dtoa_r+0x61c>
 8017f22:	46bb      	mov	fp, r7
 8017f24:	e04a      	b.n	8017fbc <_dtoa_r+0x6c4>
 8017f26:	4b06      	ldr	r3, [pc, #24]	; (8017f40 <_dtoa_r+0x648>)
 8017f28:	f7e8 fb8e 	bl	8000648 <__aeabi_dmul>
 8017f2c:	4680      	mov	r8, r0
 8017f2e:	4689      	mov	r9, r1
 8017f30:	e7bd      	b.n	8017eae <_dtoa_r+0x5b6>
 8017f32:	bf00      	nop
 8017f34:	0801cb48 	.word	0x0801cb48
 8017f38:	0801cb20 	.word	0x0801cb20
 8017f3c:	3ff00000 	.word	0x3ff00000
 8017f40:	40240000 	.word	0x40240000
 8017f44:	401c0000 	.word	0x401c0000
 8017f48:	40140000 	.word	0x40140000
 8017f4c:	3fe00000 	.word	0x3fe00000
 8017f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017f54:	9d00      	ldr	r5, [sp, #0]
 8017f56:	4642      	mov	r2, r8
 8017f58:	464b      	mov	r3, r9
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	4639      	mov	r1, r7
 8017f5e:	f7e8 fc9d 	bl	800089c <__aeabi_ddiv>
 8017f62:	f7e8 fe21 	bl	8000ba8 <__aeabi_d2iz>
 8017f66:	9001      	str	r0, [sp, #4]
 8017f68:	f7e8 fb04 	bl	8000574 <__aeabi_i2d>
 8017f6c:	4642      	mov	r2, r8
 8017f6e:	464b      	mov	r3, r9
 8017f70:	f7e8 fb6a 	bl	8000648 <__aeabi_dmul>
 8017f74:	4602      	mov	r2, r0
 8017f76:	460b      	mov	r3, r1
 8017f78:	4630      	mov	r0, r6
 8017f7a:	4639      	mov	r1, r7
 8017f7c:	f7e8 f9ac 	bl	80002d8 <__aeabi_dsub>
 8017f80:	9e01      	ldr	r6, [sp, #4]
 8017f82:	9f04      	ldr	r7, [sp, #16]
 8017f84:	3630      	adds	r6, #48	; 0x30
 8017f86:	f805 6b01 	strb.w	r6, [r5], #1
 8017f8a:	9e00      	ldr	r6, [sp, #0]
 8017f8c:	1bae      	subs	r6, r5, r6
 8017f8e:	42b7      	cmp	r7, r6
 8017f90:	4602      	mov	r2, r0
 8017f92:	460b      	mov	r3, r1
 8017f94:	d134      	bne.n	8018000 <_dtoa_r+0x708>
 8017f96:	f7e8 f9a1 	bl	80002dc <__adddf3>
 8017f9a:	4642      	mov	r2, r8
 8017f9c:	464b      	mov	r3, r9
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	460f      	mov	r7, r1
 8017fa2:	f7e8 fde1 	bl	8000b68 <__aeabi_dcmpgt>
 8017fa6:	b9c8      	cbnz	r0, 8017fdc <_dtoa_r+0x6e4>
 8017fa8:	4642      	mov	r2, r8
 8017faa:	464b      	mov	r3, r9
 8017fac:	4630      	mov	r0, r6
 8017fae:	4639      	mov	r1, r7
 8017fb0:	f7e8 fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 8017fb4:	b110      	cbz	r0, 8017fbc <_dtoa_r+0x6c4>
 8017fb6:	9b01      	ldr	r3, [sp, #4]
 8017fb8:	07db      	lsls	r3, r3, #31
 8017fba:	d40f      	bmi.n	8017fdc <_dtoa_r+0x6e4>
 8017fbc:	4651      	mov	r1, sl
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f000 fbcc 	bl	801875c <_Bfree>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fc8:	702b      	strb	r3, [r5, #0]
 8017fca:	f10b 0301 	add.w	r3, fp, #1
 8017fce:	6013      	str	r3, [r2, #0]
 8017fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	f43f ace2 	beq.w	801799c <_dtoa_r+0xa4>
 8017fd8:	601d      	str	r5, [r3, #0]
 8017fda:	e4df      	b.n	801799c <_dtoa_r+0xa4>
 8017fdc:	465f      	mov	r7, fp
 8017fde:	462b      	mov	r3, r5
 8017fe0:	461d      	mov	r5, r3
 8017fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017fe6:	2a39      	cmp	r2, #57	; 0x39
 8017fe8:	d106      	bne.n	8017ff8 <_dtoa_r+0x700>
 8017fea:	9a00      	ldr	r2, [sp, #0]
 8017fec:	429a      	cmp	r2, r3
 8017fee:	d1f7      	bne.n	8017fe0 <_dtoa_r+0x6e8>
 8017ff0:	9900      	ldr	r1, [sp, #0]
 8017ff2:	2230      	movs	r2, #48	; 0x30
 8017ff4:	3701      	adds	r7, #1
 8017ff6:	700a      	strb	r2, [r1, #0]
 8017ff8:	781a      	ldrb	r2, [r3, #0]
 8017ffa:	3201      	adds	r2, #1
 8017ffc:	701a      	strb	r2, [r3, #0]
 8017ffe:	e790      	b.n	8017f22 <_dtoa_r+0x62a>
 8018000:	4ba3      	ldr	r3, [pc, #652]	; (8018290 <_dtoa_r+0x998>)
 8018002:	2200      	movs	r2, #0
 8018004:	f7e8 fb20 	bl	8000648 <__aeabi_dmul>
 8018008:	2200      	movs	r2, #0
 801800a:	2300      	movs	r3, #0
 801800c:	4606      	mov	r6, r0
 801800e:	460f      	mov	r7, r1
 8018010:	f7e8 fd82 	bl	8000b18 <__aeabi_dcmpeq>
 8018014:	2800      	cmp	r0, #0
 8018016:	d09e      	beq.n	8017f56 <_dtoa_r+0x65e>
 8018018:	e7d0      	b.n	8017fbc <_dtoa_r+0x6c4>
 801801a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801801c:	2a00      	cmp	r2, #0
 801801e:	f000 80ca 	beq.w	80181b6 <_dtoa_r+0x8be>
 8018022:	9a07      	ldr	r2, [sp, #28]
 8018024:	2a01      	cmp	r2, #1
 8018026:	f300 80ad 	bgt.w	8018184 <_dtoa_r+0x88c>
 801802a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801802c:	2a00      	cmp	r2, #0
 801802e:	f000 80a5 	beq.w	801817c <_dtoa_r+0x884>
 8018032:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018036:	9e08      	ldr	r6, [sp, #32]
 8018038:	9d05      	ldr	r5, [sp, #20]
 801803a:	9a05      	ldr	r2, [sp, #20]
 801803c:	441a      	add	r2, r3
 801803e:	9205      	str	r2, [sp, #20]
 8018040:	9a06      	ldr	r2, [sp, #24]
 8018042:	2101      	movs	r1, #1
 8018044:	441a      	add	r2, r3
 8018046:	4620      	mov	r0, r4
 8018048:	9206      	str	r2, [sp, #24]
 801804a:	f000 fc87 	bl	801895c <__i2b>
 801804e:	4607      	mov	r7, r0
 8018050:	b165      	cbz	r5, 801806c <_dtoa_r+0x774>
 8018052:	9b06      	ldr	r3, [sp, #24]
 8018054:	2b00      	cmp	r3, #0
 8018056:	dd09      	ble.n	801806c <_dtoa_r+0x774>
 8018058:	42ab      	cmp	r3, r5
 801805a:	9a05      	ldr	r2, [sp, #20]
 801805c:	bfa8      	it	ge
 801805e:	462b      	movge	r3, r5
 8018060:	1ad2      	subs	r2, r2, r3
 8018062:	9205      	str	r2, [sp, #20]
 8018064:	9a06      	ldr	r2, [sp, #24]
 8018066:	1aed      	subs	r5, r5, r3
 8018068:	1ad3      	subs	r3, r2, r3
 801806a:	9306      	str	r3, [sp, #24]
 801806c:	9b08      	ldr	r3, [sp, #32]
 801806e:	b1f3      	cbz	r3, 80180ae <_dtoa_r+0x7b6>
 8018070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018072:	2b00      	cmp	r3, #0
 8018074:	f000 80a3 	beq.w	80181be <_dtoa_r+0x8c6>
 8018078:	2e00      	cmp	r6, #0
 801807a:	dd10      	ble.n	801809e <_dtoa_r+0x7a6>
 801807c:	4639      	mov	r1, r7
 801807e:	4632      	mov	r2, r6
 8018080:	4620      	mov	r0, r4
 8018082:	f000 fd2b 	bl	8018adc <__pow5mult>
 8018086:	4652      	mov	r2, sl
 8018088:	4601      	mov	r1, r0
 801808a:	4607      	mov	r7, r0
 801808c:	4620      	mov	r0, r4
 801808e:	f000 fc7b 	bl	8018988 <__multiply>
 8018092:	4651      	mov	r1, sl
 8018094:	4680      	mov	r8, r0
 8018096:	4620      	mov	r0, r4
 8018098:	f000 fb60 	bl	801875c <_Bfree>
 801809c:	46c2      	mov	sl, r8
 801809e:	9b08      	ldr	r3, [sp, #32]
 80180a0:	1b9a      	subs	r2, r3, r6
 80180a2:	d004      	beq.n	80180ae <_dtoa_r+0x7b6>
 80180a4:	4651      	mov	r1, sl
 80180a6:	4620      	mov	r0, r4
 80180a8:	f000 fd18 	bl	8018adc <__pow5mult>
 80180ac:	4682      	mov	sl, r0
 80180ae:	2101      	movs	r1, #1
 80180b0:	4620      	mov	r0, r4
 80180b2:	f000 fc53 	bl	801895c <__i2b>
 80180b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	4606      	mov	r6, r0
 80180bc:	f340 8081 	ble.w	80181c2 <_dtoa_r+0x8ca>
 80180c0:	461a      	mov	r2, r3
 80180c2:	4601      	mov	r1, r0
 80180c4:	4620      	mov	r0, r4
 80180c6:	f000 fd09 	bl	8018adc <__pow5mult>
 80180ca:	9b07      	ldr	r3, [sp, #28]
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	4606      	mov	r6, r0
 80180d0:	dd7a      	ble.n	80181c8 <_dtoa_r+0x8d0>
 80180d2:	f04f 0800 	mov.w	r8, #0
 80180d6:	6933      	ldr	r3, [r6, #16]
 80180d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80180dc:	6918      	ldr	r0, [r3, #16]
 80180de:	f000 fbef 	bl	80188c0 <__hi0bits>
 80180e2:	f1c0 0020 	rsb	r0, r0, #32
 80180e6:	9b06      	ldr	r3, [sp, #24]
 80180e8:	4418      	add	r0, r3
 80180ea:	f010 001f 	ands.w	r0, r0, #31
 80180ee:	f000 8094 	beq.w	801821a <_dtoa_r+0x922>
 80180f2:	f1c0 0320 	rsb	r3, r0, #32
 80180f6:	2b04      	cmp	r3, #4
 80180f8:	f340 8085 	ble.w	8018206 <_dtoa_r+0x90e>
 80180fc:	9b05      	ldr	r3, [sp, #20]
 80180fe:	f1c0 001c 	rsb	r0, r0, #28
 8018102:	4403      	add	r3, r0
 8018104:	9305      	str	r3, [sp, #20]
 8018106:	9b06      	ldr	r3, [sp, #24]
 8018108:	4403      	add	r3, r0
 801810a:	4405      	add	r5, r0
 801810c:	9306      	str	r3, [sp, #24]
 801810e:	9b05      	ldr	r3, [sp, #20]
 8018110:	2b00      	cmp	r3, #0
 8018112:	dd05      	ble.n	8018120 <_dtoa_r+0x828>
 8018114:	4651      	mov	r1, sl
 8018116:	461a      	mov	r2, r3
 8018118:	4620      	mov	r0, r4
 801811a:	f000 fd39 	bl	8018b90 <__lshift>
 801811e:	4682      	mov	sl, r0
 8018120:	9b06      	ldr	r3, [sp, #24]
 8018122:	2b00      	cmp	r3, #0
 8018124:	dd05      	ble.n	8018132 <_dtoa_r+0x83a>
 8018126:	4631      	mov	r1, r6
 8018128:	461a      	mov	r2, r3
 801812a:	4620      	mov	r0, r4
 801812c:	f000 fd30 	bl	8018b90 <__lshift>
 8018130:	4606      	mov	r6, r0
 8018132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018134:	2b00      	cmp	r3, #0
 8018136:	d072      	beq.n	801821e <_dtoa_r+0x926>
 8018138:	4631      	mov	r1, r6
 801813a:	4650      	mov	r0, sl
 801813c:	f000 fd94 	bl	8018c68 <__mcmp>
 8018140:	2800      	cmp	r0, #0
 8018142:	da6c      	bge.n	801821e <_dtoa_r+0x926>
 8018144:	2300      	movs	r3, #0
 8018146:	4651      	mov	r1, sl
 8018148:	220a      	movs	r2, #10
 801814a:	4620      	mov	r0, r4
 801814c:	f000 fb28 	bl	80187a0 <__multadd>
 8018150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018152:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018156:	4682      	mov	sl, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	f000 81b0 	beq.w	80184be <_dtoa_r+0xbc6>
 801815e:	2300      	movs	r3, #0
 8018160:	4639      	mov	r1, r7
 8018162:	220a      	movs	r2, #10
 8018164:	4620      	mov	r0, r4
 8018166:	f000 fb1b 	bl	80187a0 <__multadd>
 801816a:	9b01      	ldr	r3, [sp, #4]
 801816c:	2b00      	cmp	r3, #0
 801816e:	4607      	mov	r7, r0
 8018170:	f300 8096 	bgt.w	80182a0 <_dtoa_r+0x9a8>
 8018174:	9b07      	ldr	r3, [sp, #28]
 8018176:	2b02      	cmp	r3, #2
 8018178:	dc59      	bgt.n	801822e <_dtoa_r+0x936>
 801817a:	e091      	b.n	80182a0 <_dtoa_r+0x9a8>
 801817c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801817e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018182:	e758      	b.n	8018036 <_dtoa_r+0x73e>
 8018184:	9b04      	ldr	r3, [sp, #16]
 8018186:	1e5e      	subs	r6, r3, #1
 8018188:	9b08      	ldr	r3, [sp, #32]
 801818a:	42b3      	cmp	r3, r6
 801818c:	bfbf      	itttt	lt
 801818e:	9b08      	ldrlt	r3, [sp, #32]
 8018190:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8018192:	9608      	strlt	r6, [sp, #32]
 8018194:	1af3      	sublt	r3, r6, r3
 8018196:	bfb4      	ite	lt
 8018198:	18d2      	addlt	r2, r2, r3
 801819a:	1b9e      	subge	r6, r3, r6
 801819c:	9b04      	ldr	r3, [sp, #16]
 801819e:	bfbc      	itt	lt
 80181a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80181a2:	2600      	movlt	r6, #0
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	bfb7      	itett	lt
 80181a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80181ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80181b0:	1a9d      	sublt	r5, r3, r2
 80181b2:	2300      	movlt	r3, #0
 80181b4:	e741      	b.n	801803a <_dtoa_r+0x742>
 80181b6:	9e08      	ldr	r6, [sp, #32]
 80181b8:	9d05      	ldr	r5, [sp, #20]
 80181ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80181bc:	e748      	b.n	8018050 <_dtoa_r+0x758>
 80181be:	9a08      	ldr	r2, [sp, #32]
 80181c0:	e770      	b.n	80180a4 <_dtoa_r+0x7ac>
 80181c2:	9b07      	ldr	r3, [sp, #28]
 80181c4:	2b01      	cmp	r3, #1
 80181c6:	dc19      	bgt.n	80181fc <_dtoa_r+0x904>
 80181c8:	9b02      	ldr	r3, [sp, #8]
 80181ca:	b9bb      	cbnz	r3, 80181fc <_dtoa_r+0x904>
 80181cc:	9b03      	ldr	r3, [sp, #12]
 80181ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80181d2:	b99b      	cbnz	r3, 80181fc <_dtoa_r+0x904>
 80181d4:	9b03      	ldr	r3, [sp, #12]
 80181d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80181da:	0d1b      	lsrs	r3, r3, #20
 80181dc:	051b      	lsls	r3, r3, #20
 80181de:	b183      	cbz	r3, 8018202 <_dtoa_r+0x90a>
 80181e0:	9b05      	ldr	r3, [sp, #20]
 80181e2:	3301      	adds	r3, #1
 80181e4:	9305      	str	r3, [sp, #20]
 80181e6:	9b06      	ldr	r3, [sp, #24]
 80181e8:	3301      	adds	r3, #1
 80181ea:	9306      	str	r3, [sp, #24]
 80181ec:	f04f 0801 	mov.w	r8, #1
 80181f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	f47f af6f 	bne.w	80180d6 <_dtoa_r+0x7de>
 80181f8:	2001      	movs	r0, #1
 80181fa:	e774      	b.n	80180e6 <_dtoa_r+0x7ee>
 80181fc:	f04f 0800 	mov.w	r8, #0
 8018200:	e7f6      	b.n	80181f0 <_dtoa_r+0x8f8>
 8018202:	4698      	mov	r8, r3
 8018204:	e7f4      	b.n	80181f0 <_dtoa_r+0x8f8>
 8018206:	d082      	beq.n	801810e <_dtoa_r+0x816>
 8018208:	9a05      	ldr	r2, [sp, #20]
 801820a:	331c      	adds	r3, #28
 801820c:	441a      	add	r2, r3
 801820e:	9205      	str	r2, [sp, #20]
 8018210:	9a06      	ldr	r2, [sp, #24]
 8018212:	441a      	add	r2, r3
 8018214:	441d      	add	r5, r3
 8018216:	9206      	str	r2, [sp, #24]
 8018218:	e779      	b.n	801810e <_dtoa_r+0x816>
 801821a:	4603      	mov	r3, r0
 801821c:	e7f4      	b.n	8018208 <_dtoa_r+0x910>
 801821e:	9b04      	ldr	r3, [sp, #16]
 8018220:	2b00      	cmp	r3, #0
 8018222:	dc37      	bgt.n	8018294 <_dtoa_r+0x99c>
 8018224:	9b07      	ldr	r3, [sp, #28]
 8018226:	2b02      	cmp	r3, #2
 8018228:	dd34      	ble.n	8018294 <_dtoa_r+0x99c>
 801822a:	9b04      	ldr	r3, [sp, #16]
 801822c:	9301      	str	r3, [sp, #4]
 801822e:	9b01      	ldr	r3, [sp, #4]
 8018230:	b963      	cbnz	r3, 801824c <_dtoa_r+0x954>
 8018232:	4631      	mov	r1, r6
 8018234:	2205      	movs	r2, #5
 8018236:	4620      	mov	r0, r4
 8018238:	f000 fab2 	bl	80187a0 <__multadd>
 801823c:	4601      	mov	r1, r0
 801823e:	4606      	mov	r6, r0
 8018240:	4650      	mov	r0, sl
 8018242:	f000 fd11 	bl	8018c68 <__mcmp>
 8018246:	2800      	cmp	r0, #0
 8018248:	f73f adbb 	bgt.w	8017dc2 <_dtoa_r+0x4ca>
 801824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801824e:	9d00      	ldr	r5, [sp, #0]
 8018250:	ea6f 0b03 	mvn.w	fp, r3
 8018254:	f04f 0800 	mov.w	r8, #0
 8018258:	4631      	mov	r1, r6
 801825a:	4620      	mov	r0, r4
 801825c:	f000 fa7e 	bl	801875c <_Bfree>
 8018260:	2f00      	cmp	r7, #0
 8018262:	f43f aeab 	beq.w	8017fbc <_dtoa_r+0x6c4>
 8018266:	f1b8 0f00 	cmp.w	r8, #0
 801826a:	d005      	beq.n	8018278 <_dtoa_r+0x980>
 801826c:	45b8      	cmp	r8, r7
 801826e:	d003      	beq.n	8018278 <_dtoa_r+0x980>
 8018270:	4641      	mov	r1, r8
 8018272:	4620      	mov	r0, r4
 8018274:	f000 fa72 	bl	801875c <_Bfree>
 8018278:	4639      	mov	r1, r7
 801827a:	4620      	mov	r0, r4
 801827c:	f000 fa6e 	bl	801875c <_Bfree>
 8018280:	e69c      	b.n	8017fbc <_dtoa_r+0x6c4>
 8018282:	2600      	movs	r6, #0
 8018284:	4637      	mov	r7, r6
 8018286:	e7e1      	b.n	801824c <_dtoa_r+0x954>
 8018288:	46bb      	mov	fp, r7
 801828a:	4637      	mov	r7, r6
 801828c:	e599      	b.n	8017dc2 <_dtoa_r+0x4ca>
 801828e:	bf00      	nop
 8018290:	40240000 	.word	0x40240000
 8018294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018296:	2b00      	cmp	r3, #0
 8018298:	f000 80c8 	beq.w	801842c <_dtoa_r+0xb34>
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	9301      	str	r3, [sp, #4]
 80182a0:	2d00      	cmp	r5, #0
 80182a2:	dd05      	ble.n	80182b0 <_dtoa_r+0x9b8>
 80182a4:	4639      	mov	r1, r7
 80182a6:	462a      	mov	r2, r5
 80182a8:	4620      	mov	r0, r4
 80182aa:	f000 fc71 	bl	8018b90 <__lshift>
 80182ae:	4607      	mov	r7, r0
 80182b0:	f1b8 0f00 	cmp.w	r8, #0
 80182b4:	d05b      	beq.n	801836e <_dtoa_r+0xa76>
 80182b6:	6879      	ldr	r1, [r7, #4]
 80182b8:	4620      	mov	r0, r4
 80182ba:	f000 fa0f 	bl	80186dc <_Balloc>
 80182be:	4605      	mov	r5, r0
 80182c0:	b928      	cbnz	r0, 80182ce <_dtoa_r+0x9d6>
 80182c2:	4b83      	ldr	r3, [pc, #524]	; (80184d0 <_dtoa_r+0xbd8>)
 80182c4:	4602      	mov	r2, r0
 80182c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80182ca:	f7ff bb2e 	b.w	801792a <_dtoa_r+0x32>
 80182ce:	693a      	ldr	r2, [r7, #16]
 80182d0:	3202      	adds	r2, #2
 80182d2:	0092      	lsls	r2, r2, #2
 80182d4:	f107 010c 	add.w	r1, r7, #12
 80182d8:	300c      	adds	r0, #12
 80182da:	f7ff fa70 	bl	80177be <memcpy>
 80182de:	2201      	movs	r2, #1
 80182e0:	4629      	mov	r1, r5
 80182e2:	4620      	mov	r0, r4
 80182e4:	f000 fc54 	bl	8018b90 <__lshift>
 80182e8:	9b00      	ldr	r3, [sp, #0]
 80182ea:	3301      	adds	r3, #1
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80182f2:	4413      	add	r3, r2
 80182f4:	9308      	str	r3, [sp, #32]
 80182f6:	9b02      	ldr	r3, [sp, #8]
 80182f8:	f003 0301 	and.w	r3, r3, #1
 80182fc:	46b8      	mov	r8, r7
 80182fe:	9306      	str	r3, [sp, #24]
 8018300:	4607      	mov	r7, r0
 8018302:	9b04      	ldr	r3, [sp, #16]
 8018304:	4631      	mov	r1, r6
 8018306:	3b01      	subs	r3, #1
 8018308:	4650      	mov	r0, sl
 801830a:	9301      	str	r3, [sp, #4]
 801830c:	f7ff fa6c 	bl	80177e8 <quorem>
 8018310:	4641      	mov	r1, r8
 8018312:	9002      	str	r0, [sp, #8]
 8018314:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018318:	4650      	mov	r0, sl
 801831a:	f000 fca5 	bl	8018c68 <__mcmp>
 801831e:	463a      	mov	r2, r7
 8018320:	9005      	str	r0, [sp, #20]
 8018322:	4631      	mov	r1, r6
 8018324:	4620      	mov	r0, r4
 8018326:	f000 fcbb 	bl	8018ca0 <__mdiff>
 801832a:	68c2      	ldr	r2, [r0, #12]
 801832c:	4605      	mov	r5, r0
 801832e:	bb02      	cbnz	r2, 8018372 <_dtoa_r+0xa7a>
 8018330:	4601      	mov	r1, r0
 8018332:	4650      	mov	r0, sl
 8018334:	f000 fc98 	bl	8018c68 <__mcmp>
 8018338:	4602      	mov	r2, r0
 801833a:	4629      	mov	r1, r5
 801833c:	4620      	mov	r0, r4
 801833e:	9209      	str	r2, [sp, #36]	; 0x24
 8018340:	f000 fa0c 	bl	801875c <_Bfree>
 8018344:	9b07      	ldr	r3, [sp, #28]
 8018346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018348:	9d04      	ldr	r5, [sp, #16]
 801834a:	ea43 0102 	orr.w	r1, r3, r2
 801834e:	9b06      	ldr	r3, [sp, #24]
 8018350:	4319      	orrs	r1, r3
 8018352:	d110      	bne.n	8018376 <_dtoa_r+0xa7e>
 8018354:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018358:	d029      	beq.n	80183ae <_dtoa_r+0xab6>
 801835a:	9b05      	ldr	r3, [sp, #20]
 801835c:	2b00      	cmp	r3, #0
 801835e:	dd02      	ble.n	8018366 <_dtoa_r+0xa6e>
 8018360:	9b02      	ldr	r3, [sp, #8]
 8018362:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8018366:	9b01      	ldr	r3, [sp, #4]
 8018368:	f883 9000 	strb.w	r9, [r3]
 801836c:	e774      	b.n	8018258 <_dtoa_r+0x960>
 801836e:	4638      	mov	r0, r7
 8018370:	e7ba      	b.n	80182e8 <_dtoa_r+0x9f0>
 8018372:	2201      	movs	r2, #1
 8018374:	e7e1      	b.n	801833a <_dtoa_r+0xa42>
 8018376:	9b05      	ldr	r3, [sp, #20]
 8018378:	2b00      	cmp	r3, #0
 801837a:	db04      	blt.n	8018386 <_dtoa_r+0xa8e>
 801837c:	9907      	ldr	r1, [sp, #28]
 801837e:	430b      	orrs	r3, r1
 8018380:	9906      	ldr	r1, [sp, #24]
 8018382:	430b      	orrs	r3, r1
 8018384:	d120      	bne.n	80183c8 <_dtoa_r+0xad0>
 8018386:	2a00      	cmp	r2, #0
 8018388:	dded      	ble.n	8018366 <_dtoa_r+0xa6e>
 801838a:	4651      	mov	r1, sl
 801838c:	2201      	movs	r2, #1
 801838e:	4620      	mov	r0, r4
 8018390:	f000 fbfe 	bl	8018b90 <__lshift>
 8018394:	4631      	mov	r1, r6
 8018396:	4682      	mov	sl, r0
 8018398:	f000 fc66 	bl	8018c68 <__mcmp>
 801839c:	2800      	cmp	r0, #0
 801839e:	dc03      	bgt.n	80183a8 <_dtoa_r+0xab0>
 80183a0:	d1e1      	bne.n	8018366 <_dtoa_r+0xa6e>
 80183a2:	f019 0f01 	tst.w	r9, #1
 80183a6:	d0de      	beq.n	8018366 <_dtoa_r+0xa6e>
 80183a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80183ac:	d1d8      	bne.n	8018360 <_dtoa_r+0xa68>
 80183ae:	9a01      	ldr	r2, [sp, #4]
 80183b0:	2339      	movs	r3, #57	; 0x39
 80183b2:	7013      	strb	r3, [r2, #0]
 80183b4:	462b      	mov	r3, r5
 80183b6:	461d      	mov	r5, r3
 80183b8:	3b01      	subs	r3, #1
 80183ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80183be:	2a39      	cmp	r2, #57	; 0x39
 80183c0:	d06c      	beq.n	801849c <_dtoa_r+0xba4>
 80183c2:	3201      	adds	r2, #1
 80183c4:	701a      	strb	r2, [r3, #0]
 80183c6:	e747      	b.n	8018258 <_dtoa_r+0x960>
 80183c8:	2a00      	cmp	r2, #0
 80183ca:	dd07      	ble.n	80183dc <_dtoa_r+0xae4>
 80183cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80183d0:	d0ed      	beq.n	80183ae <_dtoa_r+0xab6>
 80183d2:	9a01      	ldr	r2, [sp, #4]
 80183d4:	f109 0301 	add.w	r3, r9, #1
 80183d8:	7013      	strb	r3, [r2, #0]
 80183da:	e73d      	b.n	8018258 <_dtoa_r+0x960>
 80183dc:	9b04      	ldr	r3, [sp, #16]
 80183de:	9a08      	ldr	r2, [sp, #32]
 80183e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80183e4:	4293      	cmp	r3, r2
 80183e6:	d043      	beq.n	8018470 <_dtoa_r+0xb78>
 80183e8:	4651      	mov	r1, sl
 80183ea:	2300      	movs	r3, #0
 80183ec:	220a      	movs	r2, #10
 80183ee:	4620      	mov	r0, r4
 80183f0:	f000 f9d6 	bl	80187a0 <__multadd>
 80183f4:	45b8      	cmp	r8, r7
 80183f6:	4682      	mov	sl, r0
 80183f8:	f04f 0300 	mov.w	r3, #0
 80183fc:	f04f 020a 	mov.w	r2, #10
 8018400:	4641      	mov	r1, r8
 8018402:	4620      	mov	r0, r4
 8018404:	d107      	bne.n	8018416 <_dtoa_r+0xb1e>
 8018406:	f000 f9cb 	bl	80187a0 <__multadd>
 801840a:	4680      	mov	r8, r0
 801840c:	4607      	mov	r7, r0
 801840e:	9b04      	ldr	r3, [sp, #16]
 8018410:	3301      	adds	r3, #1
 8018412:	9304      	str	r3, [sp, #16]
 8018414:	e775      	b.n	8018302 <_dtoa_r+0xa0a>
 8018416:	f000 f9c3 	bl	80187a0 <__multadd>
 801841a:	4639      	mov	r1, r7
 801841c:	4680      	mov	r8, r0
 801841e:	2300      	movs	r3, #0
 8018420:	220a      	movs	r2, #10
 8018422:	4620      	mov	r0, r4
 8018424:	f000 f9bc 	bl	80187a0 <__multadd>
 8018428:	4607      	mov	r7, r0
 801842a:	e7f0      	b.n	801840e <_dtoa_r+0xb16>
 801842c:	9b04      	ldr	r3, [sp, #16]
 801842e:	9301      	str	r3, [sp, #4]
 8018430:	9d00      	ldr	r5, [sp, #0]
 8018432:	4631      	mov	r1, r6
 8018434:	4650      	mov	r0, sl
 8018436:	f7ff f9d7 	bl	80177e8 <quorem>
 801843a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801843e:	9b00      	ldr	r3, [sp, #0]
 8018440:	f805 9b01 	strb.w	r9, [r5], #1
 8018444:	1aea      	subs	r2, r5, r3
 8018446:	9b01      	ldr	r3, [sp, #4]
 8018448:	4293      	cmp	r3, r2
 801844a:	dd07      	ble.n	801845c <_dtoa_r+0xb64>
 801844c:	4651      	mov	r1, sl
 801844e:	2300      	movs	r3, #0
 8018450:	220a      	movs	r2, #10
 8018452:	4620      	mov	r0, r4
 8018454:	f000 f9a4 	bl	80187a0 <__multadd>
 8018458:	4682      	mov	sl, r0
 801845a:	e7ea      	b.n	8018432 <_dtoa_r+0xb3a>
 801845c:	9b01      	ldr	r3, [sp, #4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	bfc8      	it	gt
 8018462:	461d      	movgt	r5, r3
 8018464:	9b00      	ldr	r3, [sp, #0]
 8018466:	bfd8      	it	le
 8018468:	2501      	movle	r5, #1
 801846a:	441d      	add	r5, r3
 801846c:	f04f 0800 	mov.w	r8, #0
 8018470:	4651      	mov	r1, sl
 8018472:	2201      	movs	r2, #1
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fb8b 	bl	8018b90 <__lshift>
 801847a:	4631      	mov	r1, r6
 801847c:	4682      	mov	sl, r0
 801847e:	f000 fbf3 	bl	8018c68 <__mcmp>
 8018482:	2800      	cmp	r0, #0
 8018484:	dc96      	bgt.n	80183b4 <_dtoa_r+0xabc>
 8018486:	d102      	bne.n	801848e <_dtoa_r+0xb96>
 8018488:	f019 0f01 	tst.w	r9, #1
 801848c:	d192      	bne.n	80183b4 <_dtoa_r+0xabc>
 801848e:	462b      	mov	r3, r5
 8018490:	461d      	mov	r5, r3
 8018492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018496:	2a30      	cmp	r2, #48	; 0x30
 8018498:	d0fa      	beq.n	8018490 <_dtoa_r+0xb98>
 801849a:	e6dd      	b.n	8018258 <_dtoa_r+0x960>
 801849c:	9a00      	ldr	r2, [sp, #0]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d189      	bne.n	80183b6 <_dtoa_r+0xabe>
 80184a2:	f10b 0b01 	add.w	fp, fp, #1
 80184a6:	2331      	movs	r3, #49	; 0x31
 80184a8:	e796      	b.n	80183d8 <_dtoa_r+0xae0>
 80184aa:	4b0a      	ldr	r3, [pc, #40]	; (80184d4 <_dtoa_r+0xbdc>)
 80184ac:	f7ff ba99 	b.w	80179e2 <_dtoa_r+0xea>
 80184b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f47f aa6d 	bne.w	8017992 <_dtoa_r+0x9a>
 80184b8:	4b07      	ldr	r3, [pc, #28]	; (80184d8 <_dtoa_r+0xbe0>)
 80184ba:	f7ff ba92 	b.w	80179e2 <_dtoa_r+0xea>
 80184be:	9b01      	ldr	r3, [sp, #4]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	dcb5      	bgt.n	8018430 <_dtoa_r+0xb38>
 80184c4:	9b07      	ldr	r3, [sp, #28]
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	f73f aeb1 	bgt.w	801822e <_dtoa_r+0x936>
 80184cc:	e7b0      	b.n	8018430 <_dtoa_r+0xb38>
 80184ce:	bf00      	nop
 80184d0:	0801cab1 	.word	0x0801cab1
 80184d4:	0801ca0c 	.word	0x0801ca0c
 80184d8:	0801ca35 	.word	0x0801ca35

080184dc <_free_r>:
 80184dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80184de:	2900      	cmp	r1, #0
 80184e0:	d044      	beq.n	801856c <_free_r+0x90>
 80184e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184e6:	9001      	str	r0, [sp, #4]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	f1a1 0404 	sub.w	r4, r1, #4
 80184ee:	bfb8      	it	lt
 80184f0:	18e4      	addlt	r4, r4, r3
 80184f2:	f000 f8e7 	bl	80186c4 <__malloc_lock>
 80184f6:	4a1e      	ldr	r2, [pc, #120]	; (8018570 <_free_r+0x94>)
 80184f8:	9801      	ldr	r0, [sp, #4]
 80184fa:	6813      	ldr	r3, [r2, #0]
 80184fc:	b933      	cbnz	r3, 801850c <_free_r+0x30>
 80184fe:	6063      	str	r3, [r4, #4]
 8018500:	6014      	str	r4, [r2, #0]
 8018502:	b003      	add	sp, #12
 8018504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018508:	f000 b8e2 	b.w	80186d0 <__malloc_unlock>
 801850c:	42a3      	cmp	r3, r4
 801850e:	d908      	bls.n	8018522 <_free_r+0x46>
 8018510:	6825      	ldr	r5, [r4, #0]
 8018512:	1961      	adds	r1, r4, r5
 8018514:	428b      	cmp	r3, r1
 8018516:	bf01      	itttt	eq
 8018518:	6819      	ldreq	r1, [r3, #0]
 801851a:	685b      	ldreq	r3, [r3, #4]
 801851c:	1949      	addeq	r1, r1, r5
 801851e:	6021      	streq	r1, [r4, #0]
 8018520:	e7ed      	b.n	80184fe <_free_r+0x22>
 8018522:	461a      	mov	r2, r3
 8018524:	685b      	ldr	r3, [r3, #4]
 8018526:	b10b      	cbz	r3, 801852c <_free_r+0x50>
 8018528:	42a3      	cmp	r3, r4
 801852a:	d9fa      	bls.n	8018522 <_free_r+0x46>
 801852c:	6811      	ldr	r1, [r2, #0]
 801852e:	1855      	adds	r5, r2, r1
 8018530:	42a5      	cmp	r5, r4
 8018532:	d10b      	bne.n	801854c <_free_r+0x70>
 8018534:	6824      	ldr	r4, [r4, #0]
 8018536:	4421      	add	r1, r4
 8018538:	1854      	adds	r4, r2, r1
 801853a:	42a3      	cmp	r3, r4
 801853c:	6011      	str	r1, [r2, #0]
 801853e:	d1e0      	bne.n	8018502 <_free_r+0x26>
 8018540:	681c      	ldr	r4, [r3, #0]
 8018542:	685b      	ldr	r3, [r3, #4]
 8018544:	6053      	str	r3, [r2, #4]
 8018546:	440c      	add	r4, r1
 8018548:	6014      	str	r4, [r2, #0]
 801854a:	e7da      	b.n	8018502 <_free_r+0x26>
 801854c:	d902      	bls.n	8018554 <_free_r+0x78>
 801854e:	230c      	movs	r3, #12
 8018550:	6003      	str	r3, [r0, #0]
 8018552:	e7d6      	b.n	8018502 <_free_r+0x26>
 8018554:	6825      	ldr	r5, [r4, #0]
 8018556:	1961      	adds	r1, r4, r5
 8018558:	428b      	cmp	r3, r1
 801855a:	bf04      	itt	eq
 801855c:	6819      	ldreq	r1, [r3, #0]
 801855e:	685b      	ldreq	r3, [r3, #4]
 8018560:	6063      	str	r3, [r4, #4]
 8018562:	bf04      	itt	eq
 8018564:	1949      	addeq	r1, r1, r5
 8018566:	6021      	streq	r1, [r4, #0]
 8018568:	6054      	str	r4, [r2, #4]
 801856a:	e7ca      	b.n	8018502 <_free_r+0x26>
 801856c:	b003      	add	sp, #12
 801856e:	bd30      	pop	{r4, r5, pc}
 8018570:	20000420 	.word	0x20000420

08018574 <malloc>:
 8018574:	4b02      	ldr	r3, [pc, #8]	; (8018580 <malloc+0xc>)
 8018576:	4601      	mov	r1, r0
 8018578:	6818      	ldr	r0, [r3, #0]
 801857a:	f000 b823 	b.w	80185c4 <_malloc_r>
 801857e:	bf00      	nop
 8018580:	20000074 	.word	0x20000074

08018584 <sbrk_aligned>:
 8018584:	b570      	push	{r4, r5, r6, lr}
 8018586:	4e0e      	ldr	r6, [pc, #56]	; (80185c0 <sbrk_aligned+0x3c>)
 8018588:	460c      	mov	r4, r1
 801858a:	6831      	ldr	r1, [r6, #0]
 801858c:	4605      	mov	r5, r0
 801858e:	b911      	cbnz	r1, 8018596 <sbrk_aligned+0x12>
 8018590:	f002 f816 	bl	801a5c0 <_sbrk_r>
 8018594:	6030      	str	r0, [r6, #0]
 8018596:	4621      	mov	r1, r4
 8018598:	4628      	mov	r0, r5
 801859a:	f002 f811 	bl	801a5c0 <_sbrk_r>
 801859e:	1c43      	adds	r3, r0, #1
 80185a0:	d00a      	beq.n	80185b8 <sbrk_aligned+0x34>
 80185a2:	1cc4      	adds	r4, r0, #3
 80185a4:	f024 0403 	bic.w	r4, r4, #3
 80185a8:	42a0      	cmp	r0, r4
 80185aa:	d007      	beq.n	80185bc <sbrk_aligned+0x38>
 80185ac:	1a21      	subs	r1, r4, r0
 80185ae:	4628      	mov	r0, r5
 80185b0:	f002 f806 	bl	801a5c0 <_sbrk_r>
 80185b4:	3001      	adds	r0, #1
 80185b6:	d101      	bne.n	80185bc <sbrk_aligned+0x38>
 80185b8:	f04f 34ff 	mov.w	r4, #4294967295
 80185bc:	4620      	mov	r0, r4
 80185be:	bd70      	pop	{r4, r5, r6, pc}
 80185c0:	20000424 	.word	0x20000424

080185c4 <_malloc_r>:
 80185c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185c8:	1ccd      	adds	r5, r1, #3
 80185ca:	f025 0503 	bic.w	r5, r5, #3
 80185ce:	3508      	adds	r5, #8
 80185d0:	2d0c      	cmp	r5, #12
 80185d2:	bf38      	it	cc
 80185d4:	250c      	movcc	r5, #12
 80185d6:	2d00      	cmp	r5, #0
 80185d8:	4607      	mov	r7, r0
 80185da:	db01      	blt.n	80185e0 <_malloc_r+0x1c>
 80185dc:	42a9      	cmp	r1, r5
 80185de:	d905      	bls.n	80185ec <_malloc_r+0x28>
 80185e0:	230c      	movs	r3, #12
 80185e2:	603b      	str	r3, [r7, #0]
 80185e4:	2600      	movs	r6, #0
 80185e6:	4630      	mov	r0, r6
 80185e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80186c0 <_malloc_r+0xfc>
 80185f0:	f000 f868 	bl	80186c4 <__malloc_lock>
 80185f4:	f8d8 3000 	ldr.w	r3, [r8]
 80185f8:	461c      	mov	r4, r3
 80185fa:	bb5c      	cbnz	r4, 8018654 <_malloc_r+0x90>
 80185fc:	4629      	mov	r1, r5
 80185fe:	4638      	mov	r0, r7
 8018600:	f7ff ffc0 	bl	8018584 <sbrk_aligned>
 8018604:	1c43      	adds	r3, r0, #1
 8018606:	4604      	mov	r4, r0
 8018608:	d155      	bne.n	80186b6 <_malloc_r+0xf2>
 801860a:	f8d8 4000 	ldr.w	r4, [r8]
 801860e:	4626      	mov	r6, r4
 8018610:	2e00      	cmp	r6, #0
 8018612:	d145      	bne.n	80186a0 <_malloc_r+0xdc>
 8018614:	2c00      	cmp	r4, #0
 8018616:	d048      	beq.n	80186aa <_malloc_r+0xe6>
 8018618:	6823      	ldr	r3, [r4, #0]
 801861a:	4631      	mov	r1, r6
 801861c:	4638      	mov	r0, r7
 801861e:	eb04 0903 	add.w	r9, r4, r3
 8018622:	f001 ffcd 	bl	801a5c0 <_sbrk_r>
 8018626:	4581      	cmp	r9, r0
 8018628:	d13f      	bne.n	80186aa <_malloc_r+0xe6>
 801862a:	6821      	ldr	r1, [r4, #0]
 801862c:	1a6d      	subs	r5, r5, r1
 801862e:	4629      	mov	r1, r5
 8018630:	4638      	mov	r0, r7
 8018632:	f7ff ffa7 	bl	8018584 <sbrk_aligned>
 8018636:	3001      	adds	r0, #1
 8018638:	d037      	beq.n	80186aa <_malloc_r+0xe6>
 801863a:	6823      	ldr	r3, [r4, #0]
 801863c:	442b      	add	r3, r5
 801863e:	6023      	str	r3, [r4, #0]
 8018640:	f8d8 3000 	ldr.w	r3, [r8]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d038      	beq.n	80186ba <_malloc_r+0xf6>
 8018648:	685a      	ldr	r2, [r3, #4]
 801864a:	42a2      	cmp	r2, r4
 801864c:	d12b      	bne.n	80186a6 <_malloc_r+0xe2>
 801864e:	2200      	movs	r2, #0
 8018650:	605a      	str	r2, [r3, #4]
 8018652:	e00f      	b.n	8018674 <_malloc_r+0xb0>
 8018654:	6822      	ldr	r2, [r4, #0]
 8018656:	1b52      	subs	r2, r2, r5
 8018658:	d41f      	bmi.n	801869a <_malloc_r+0xd6>
 801865a:	2a0b      	cmp	r2, #11
 801865c:	d917      	bls.n	801868e <_malloc_r+0xca>
 801865e:	1961      	adds	r1, r4, r5
 8018660:	42a3      	cmp	r3, r4
 8018662:	6025      	str	r5, [r4, #0]
 8018664:	bf18      	it	ne
 8018666:	6059      	strne	r1, [r3, #4]
 8018668:	6863      	ldr	r3, [r4, #4]
 801866a:	bf08      	it	eq
 801866c:	f8c8 1000 	streq.w	r1, [r8]
 8018670:	5162      	str	r2, [r4, r5]
 8018672:	604b      	str	r3, [r1, #4]
 8018674:	4638      	mov	r0, r7
 8018676:	f104 060b 	add.w	r6, r4, #11
 801867a:	f000 f829 	bl	80186d0 <__malloc_unlock>
 801867e:	f026 0607 	bic.w	r6, r6, #7
 8018682:	1d23      	adds	r3, r4, #4
 8018684:	1af2      	subs	r2, r6, r3
 8018686:	d0ae      	beq.n	80185e6 <_malloc_r+0x22>
 8018688:	1b9b      	subs	r3, r3, r6
 801868a:	50a3      	str	r3, [r4, r2]
 801868c:	e7ab      	b.n	80185e6 <_malloc_r+0x22>
 801868e:	42a3      	cmp	r3, r4
 8018690:	6862      	ldr	r2, [r4, #4]
 8018692:	d1dd      	bne.n	8018650 <_malloc_r+0x8c>
 8018694:	f8c8 2000 	str.w	r2, [r8]
 8018698:	e7ec      	b.n	8018674 <_malloc_r+0xb0>
 801869a:	4623      	mov	r3, r4
 801869c:	6864      	ldr	r4, [r4, #4]
 801869e:	e7ac      	b.n	80185fa <_malloc_r+0x36>
 80186a0:	4634      	mov	r4, r6
 80186a2:	6876      	ldr	r6, [r6, #4]
 80186a4:	e7b4      	b.n	8018610 <_malloc_r+0x4c>
 80186a6:	4613      	mov	r3, r2
 80186a8:	e7cc      	b.n	8018644 <_malloc_r+0x80>
 80186aa:	230c      	movs	r3, #12
 80186ac:	603b      	str	r3, [r7, #0]
 80186ae:	4638      	mov	r0, r7
 80186b0:	f000 f80e 	bl	80186d0 <__malloc_unlock>
 80186b4:	e797      	b.n	80185e6 <_malloc_r+0x22>
 80186b6:	6025      	str	r5, [r4, #0]
 80186b8:	e7dc      	b.n	8018674 <_malloc_r+0xb0>
 80186ba:	605b      	str	r3, [r3, #4]
 80186bc:	deff      	udf	#255	; 0xff
 80186be:	bf00      	nop
 80186c0:	20000420 	.word	0x20000420

080186c4 <__malloc_lock>:
 80186c4:	4801      	ldr	r0, [pc, #4]	; (80186cc <__malloc_lock+0x8>)
 80186c6:	f7ff b878 	b.w	80177ba <__retarget_lock_acquire_recursive>
 80186ca:	bf00      	nop
 80186cc:	2000041c 	.word	0x2000041c

080186d0 <__malloc_unlock>:
 80186d0:	4801      	ldr	r0, [pc, #4]	; (80186d8 <__malloc_unlock+0x8>)
 80186d2:	f7ff b873 	b.w	80177bc <__retarget_lock_release_recursive>
 80186d6:	bf00      	nop
 80186d8:	2000041c 	.word	0x2000041c

080186dc <_Balloc>:
 80186dc:	b570      	push	{r4, r5, r6, lr}
 80186de:	69c6      	ldr	r6, [r0, #28]
 80186e0:	4604      	mov	r4, r0
 80186e2:	460d      	mov	r5, r1
 80186e4:	b976      	cbnz	r6, 8018704 <_Balloc+0x28>
 80186e6:	2010      	movs	r0, #16
 80186e8:	f7ff ff44 	bl	8018574 <malloc>
 80186ec:	4602      	mov	r2, r0
 80186ee:	61e0      	str	r0, [r4, #28]
 80186f0:	b920      	cbnz	r0, 80186fc <_Balloc+0x20>
 80186f2:	4b18      	ldr	r3, [pc, #96]	; (8018754 <_Balloc+0x78>)
 80186f4:	4818      	ldr	r0, [pc, #96]	; (8018758 <_Balloc+0x7c>)
 80186f6:	216b      	movs	r1, #107	; 0x6b
 80186f8:	f001 ff7a 	bl	801a5f0 <__assert_func>
 80186fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018700:	6006      	str	r6, [r0, #0]
 8018702:	60c6      	str	r6, [r0, #12]
 8018704:	69e6      	ldr	r6, [r4, #28]
 8018706:	68f3      	ldr	r3, [r6, #12]
 8018708:	b183      	cbz	r3, 801872c <_Balloc+0x50>
 801870a:	69e3      	ldr	r3, [r4, #28]
 801870c:	68db      	ldr	r3, [r3, #12]
 801870e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018712:	b9b8      	cbnz	r0, 8018744 <_Balloc+0x68>
 8018714:	2101      	movs	r1, #1
 8018716:	fa01 f605 	lsl.w	r6, r1, r5
 801871a:	1d72      	adds	r2, r6, #5
 801871c:	0092      	lsls	r2, r2, #2
 801871e:	4620      	mov	r0, r4
 8018720:	f001 ff84 	bl	801a62c <_calloc_r>
 8018724:	b160      	cbz	r0, 8018740 <_Balloc+0x64>
 8018726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801872a:	e00e      	b.n	801874a <_Balloc+0x6e>
 801872c:	2221      	movs	r2, #33	; 0x21
 801872e:	2104      	movs	r1, #4
 8018730:	4620      	mov	r0, r4
 8018732:	f001 ff7b 	bl	801a62c <_calloc_r>
 8018736:	69e3      	ldr	r3, [r4, #28]
 8018738:	60f0      	str	r0, [r6, #12]
 801873a:	68db      	ldr	r3, [r3, #12]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d1e4      	bne.n	801870a <_Balloc+0x2e>
 8018740:	2000      	movs	r0, #0
 8018742:	bd70      	pop	{r4, r5, r6, pc}
 8018744:	6802      	ldr	r2, [r0, #0]
 8018746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801874a:	2300      	movs	r3, #0
 801874c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018750:	e7f7      	b.n	8018742 <_Balloc+0x66>
 8018752:	bf00      	nop
 8018754:	0801ca42 	.word	0x0801ca42
 8018758:	0801cac2 	.word	0x0801cac2

0801875c <_Bfree>:
 801875c:	b570      	push	{r4, r5, r6, lr}
 801875e:	69c6      	ldr	r6, [r0, #28]
 8018760:	4605      	mov	r5, r0
 8018762:	460c      	mov	r4, r1
 8018764:	b976      	cbnz	r6, 8018784 <_Bfree+0x28>
 8018766:	2010      	movs	r0, #16
 8018768:	f7ff ff04 	bl	8018574 <malloc>
 801876c:	4602      	mov	r2, r0
 801876e:	61e8      	str	r0, [r5, #28]
 8018770:	b920      	cbnz	r0, 801877c <_Bfree+0x20>
 8018772:	4b09      	ldr	r3, [pc, #36]	; (8018798 <_Bfree+0x3c>)
 8018774:	4809      	ldr	r0, [pc, #36]	; (801879c <_Bfree+0x40>)
 8018776:	218f      	movs	r1, #143	; 0x8f
 8018778:	f001 ff3a 	bl	801a5f0 <__assert_func>
 801877c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018780:	6006      	str	r6, [r0, #0]
 8018782:	60c6      	str	r6, [r0, #12]
 8018784:	b13c      	cbz	r4, 8018796 <_Bfree+0x3a>
 8018786:	69eb      	ldr	r3, [r5, #28]
 8018788:	6862      	ldr	r2, [r4, #4]
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018790:	6021      	str	r1, [r4, #0]
 8018792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018796:	bd70      	pop	{r4, r5, r6, pc}
 8018798:	0801ca42 	.word	0x0801ca42
 801879c:	0801cac2 	.word	0x0801cac2

080187a0 <__multadd>:
 80187a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a4:	690d      	ldr	r5, [r1, #16]
 80187a6:	4607      	mov	r7, r0
 80187a8:	460c      	mov	r4, r1
 80187aa:	461e      	mov	r6, r3
 80187ac:	f101 0c14 	add.w	ip, r1, #20
 80187b0:	2000      	movs	r0, #0
 80187b2:	f8dc 3000 	ldr.w	r3, [ip]
 80187b6:	b299      	uxth	r1, r3
 80187b8:	fb02 6101 	mla	r1, r2, r1, r6
 80187bc:	0c1e      	lsrs	r6, r3, #16
 80187be:	0c0b      	lsrs	r3, r1, #16
 80187c0:	fb02 3306 	mla	r3, r2, r6, r3
 80187c4:	b289      	uxth	r1, r1
 80187c6:	3001      	adds	r0, #1
 80187c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80187cc:	4285      	cmp	r5, r0
 80187ce:	f84c 1b04 	str.w	r1, [ip], #4
 80187d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80187d6:	dcec      	bgt.n	80187b2 <__multadd+0x12>
 80187d8:	b30e      	cbz	r6, 801881e <__multadd+0x7e>
 80187da:	68a3      	ldr	r3, [r4, #8]
 80187dc:	42ab      	cmp	r3, r5
 80187de:	dc19      	bgt.n	8018814 <__multadd+0x74>
 80187e0:	6861      	ldr	r1, [r4, #4]
 80187e2:	4638      	mov	r0, r7
 80187e4:	3101      	adds	r1, #1
 80187e6:	f7ff ff79 	bl	80186dc <_Balloc>
 80187ea:	4680      	mov	r8, r0
 80187ec:	b928      	cbnz	r0, 80187fa <__multadd+0x5a>
 80187ee:	4602      	mov	r2, r0
 80187f0:	4b0c      	ldr	r3, [pc, #48]	; (8018824 <__multadd+0x84>)
 80187f2:	480d      	ldr	r0, [pc, #52]	; (8018828 <__multadd+0x88>)
 80187f4:	21ba      	movs	r1, #186	; 0xba
 80187f6:	f001 fefb 	bl	801a5f0 <__assert_func>
 80187fa:	6922      	ldr	r2, [r4, #16]
 80187fc:	3202      	adds	r2, #2
 80187fe:	f104 010c 	add.w	r1, r4, #12
 8018802:	0092      	lsls	r2, r2, #2
 8018804:	300c      	adds	r0, #12
 8018806:	f7fe ffda 	bl	80177be <memcpy>
 801880a:	4621      	mov	r1, r4
 801880c:	4638      	mov	r0, r7
 801880e:	f7ff ffa5 	bl	801875c <_Bfree>
 8018812:	4644      	mov	r4, r8
 8018814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018818:	3501      	adds	r5, #1
 801881a:	615e      	str	r6, [r3, #20]
 801881c:	6125      	str	r5, [r4, #16]
 801881e:	4620      	mov	r0, r4
 8018820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018824:	0801cab1 	.word	0x0801cab1
 8018828:	0801cac2 	.word	0x0801cac2

0801882c <__s2b>:
 801882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018830:	460c      	mov	r4, r1
 8018832:	4615      	mov	r5, r2
 8018834:	461f      	mov	r7, r3
 8018836:	2209      	movs	r2, #9
 8018838:	3308      	adds	r3, #8
 801883a:	4606      	mov	r6, r0
 801883c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018840:	2100      	movs	r1, #0
 8018842:	2201      	movs	r2, #1
 8018844:	429a      	cmp	r2, r3
 8018846:	db09      	blt.n	801885c <__s2b+0x30>
 8018848:	4630      	mov	r0, r6
 801884a:	f7ff ff47 	bl	80186dc <_Balloc>
 801884e:	b940      	cbnz	r0, 8018862 <__s2b+0x36>
 8018850:	4602      	mov	r2, r0
 8018852:	4b19      	ldr	r3, [pc, #100]	; (80188b8 <__s2b+0x8c>)
 8018854:	4819      	ldr	r0, [pc, #100]	; (80188bc <__s2b+0x90>)
 8018856:	21d3      	movs	r1, #211	; 0xd3
 8018858:	f001 feca 	bl	801a5f0 <__assert_func>
 801885c:	0052      	lsls	r2, r2, #1
 801885e:	3101      	adds	r1, #1
 8018860:	e7f0      	b.n	8018844 <__s2b+0x18>
 8018862:	9b08      	ldr	r3, [sp, #32]
 8018864:	6143      	str	r3, [r0, #20]
 8018866:	2d09      	cmp	r5, #9
 8018868:	f04f 0301 	mov.w	r3, #1
 801886c:	6103      	str	r3, [r0, #16]
 801886e:	dd16      	ble.n	801889e <__s2b+0x72>
 8018870:	f104 0909 	add.w	r9, r4, #9
 8018874:	46c8      	mov	r8, r9
 8018876:	442c      	add	r4, r5
 8018878:	f818 3b01 	ldrb.w	r3, [r8], #1
 801887c:	4601      	mov	r1, r0
 801887e:	3b30      	subs	r3, #48	; 0x30
 8018880:	220a      	movs	r2, #10
 8018882:	4630      	mov	r0, r6
 8018884:	f7ff ff8c 	bl	80187a0 <__multadd>
 8018888:	45a0      	cmp	r8, r4
 801888a:	d1f5      	bne.n	8018878 <__s2b+0x4c>
 801888c:	f1a5 0408 	sub.w	r4, r5, #8
 8018890:	444c      	add	r4, r9
 8018892:	1b2d      	subs	r5, r5, r4
 8018894:	1963      	adds	r3, r4, r5
 8018896:	42bb      	cmp	r3, r7
 8018898:	db04      	blt.n	80188a4 <__s2b+0x78>
 801889a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801889e:	340a      	adds	r4, #10
 80188a0:	2509      	movs	r5, #9
 80188a2:	e7f6      	b.n	8018892 <__s2b+0x66>
 80188a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80188a8:	4601      	mov	r1, r0
 80188aa:	3b30      	subs	r3, #48	; 0x30
 80188ac:	220a      	movs	r2, #10
 80188ae:	4630      	mov	r0, r6
 80188b0:	f7ff ff76 	bl	80187a0 <__multadd>
 80188b4:	e7ee      	b.n	8018894 <__s2b+0x68>
 80188b6:	bf00      	nop
 80188b8:	0801cab1 	.word	0x0801cab1
 80188bc:	0801cac2 	.word	0x0801cac2

080188c0 <__hi0bits>:
 80188c0:	0c03      	lsrs	r3, r0, #16
 80188c2:	041b      	lsls	r3, r3, #16
 80188c4:	b9d3      	cbnz	r3, 80188fc <__hi0bits+0x3c>
 80188c6:	0400      	lsls	r0, r0, #16
 80188c8:	2310      	movs	r3, #16
 80188ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80188ce:	bf04      	itt	eq
 80188d0:	0200      	lsleq	r0, r0, #8
 80188d2:	3308      	addeq	r3, #8
 80188d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80188d8:	bf04      	itt	eq
 80188da:	0100      	lsleq	r0, r0, #4
 80188dc:	3304      	addeq	r3, #4
 80188de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80188e2:	bf04      	itt	eq
 80188e4:	0080      	lsleq	r0, r0, #2
 80188e6:	3302      	addeq	r3, #2
 80188e8:	2800      	cmp	r0, #0
 80188ea:	db05      	blt.n	80188f8 <__hi0bits+0x38>
 80188ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80188f0:	f103 0301 	add.w	r3, r3, #1
 80188f4:	bf08      	it	eq
 80188f6:	2320      	moveq	r3, #32
 80188f8:	4618      	mov	r0, r3
 80188fa:	4770      	bx	lr
 80188fc:	2300      	movs	r3, #0
 80188fe:	e7e4      	b.n	80188ca <__hi0bits+0xa>

08018900 <__lo0bits>:
 8018900:	6803      	ldr	r3, [r0, #0]
 8018902:	f013 0207 	ands.w	r2, r3, #7
 8018906:	d00c      	beq.n	8018922 <__lo0bits+0x22>
 8018908:	07d9      	lsls	r1, r3, #31
 801890a:	d422      	bmi.n	8018952 <__lo0bits+0x52>
 801890c:	079a      	lsls	r2, r3, #30
 801890e:	bf49      	itett	mi
 8018910:	085b      	lsrmi	r3, r3, #1
 8018912:	089b      	lsrpl	r3, r3, #2
 8018914:	6003      	strmi	r3, [r0, #0]
 8018916:	2201      	movmi	r2, #1
 8018918:	bf5c      	itt	pl
 801891a:	6003      	strpl	r3, [r0, #0]
 801891c:	2202      	movpl	r2, #2
 801891e:	4610      	mov	r0, r2
 8018920:	4770      	bx	lr
 8018922:	b299      	uxth	r1, r3
 8018924:	b909      	cbnz	r1, 801892a <__lo0bits+0x2a>
 8018926:	0c1b      	lsrs	r3, r3, #16
 8018928:	2210      	movs	r2, #16
 801892a:	b2d9      	uxtb	r1, r3
 801892c:	b909      	cbnz	r1, 8018932 <__lo0bits+0x32>
 801892e:	3208      	adds	r2, #8
 8018930:	0a1b      	lsrs	r3, r3, #8
 8018932:	0719      	lsls	r1, r3, #28
 8018934:	bf04      	itt	eq
 8018936:	091b      	lsreq	r3, r3, #4
 8018938:	3204      	addeq	r2, #4
 801893a:	0799      	lsls	r1, r3, #30
 801893c:	bf04      	itt	eq
 801893e:	089b      	lsreq	r3, r3, #2
 8018940:	3202      	addeq	r2, #2
 8018942:	07d9      	lsls	r1, r3, #31
 8018944:	d403      	bmi.n	801894e <__lo0bits+0x4e>
 8018946:	085b      	lsrs	r3, r3, #1
 8018948:	f102 0201 	add.w	r2, r2, #1
 801894c:	d003      	beq.n	8018956 <__lo0bits+0x56>
 801894e:	6003      	str	r3, [r0, #0]
 8018950:	e7e5      	b.n	801891e <__lo0bits+0x1e>
 8018952:	2200      	movs	r2, #0
 8018954:	e7e3      	b.n	801891e <__lo0bits+0x1e>
 8018956:	2220      	movs	r2, #32
 8018958:	e7e1      	b.n	801891e <__lo0bits+0x1e>
	...

0801895c <__i2b>:
 801895c:	b510      	push	{r4, lr}
 801895e:	460c      	mov	r4, r1
 8018960:	2101      	movs	r1, #1
 8018962:	f7ff febb 	bl	80186dc <_Balloc>
 8018966:	4602      	mov	r2, r0
 8018968:	b928      	cbnz	r0, 8018976 <__i2b+0x1a>
 801896a:	4b05      	ldr	r3, [pc, #20]	; (8018980 <__i2b+0x24>)
 801896c:	4805      	ldr	r0, [pc, #20]	; (8018984 <__i2b+0x28>)
 801896e:	f240 1145 	movw	r1, #325	; 0x145
 8018972:	f001 fe3d 	bl	801a5f0 <__assert_func>
 8018976:	2301      	movs	r3, #1
 8018978:	6144      	str	r4, [r0, #20]
 801897a:	6103      	str	r3, [r0, #16]
 801897c:	bd10      	pop	{r4, pc}
 801897e:	bf00      	nop
 8018980:	0801cab1 	.word	0x0801cab1
 8018984:	0801cac2 	.word	0x0801cac2

08018988 <__multiply>:
 8018988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898c:	4691      	mov	r9, r2
 801898e:	690a      	ldr	r2, [r1, #16]
 8018990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018994:	429a      	cmp	r2, r3
 8018996:	bfb8      	it	lt
 8018998:	460b      	movlt	r3, r1
 801899a:	460c      	mov	r4, r1
 801899c:	bfbc      	itt	lt
 801899e:	464c      	movlt	r4, r9
 80189a0:	4699      	movlt	r9, r3
 80189a2:	6927      	ldr	r7, [r4, #16]
 80189a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80189a8:	68a3      	ldr	r3, [r4, #8]
 80189aa:	6861      	ldr	r1, [r4, #4]
 80189ac:	eb07 060a 	add.w	r6, r7, sl
 80189b0:	42b3      	cmp	r3, r6
 80189b2:	b085      	sub	sp, #20
 80189b4:	bfb8      	it	lt
 80189b6:	3101      	addlt	r1, #1
 80189b8:	f7ff fe90 	bl	80186dc <_Balloc>
 80189bc:	b930      	cbnz	r0, 80189cc <__multiply+0x44>
 80189be:	4602      	mov	r2, r0
 80189c0:	4b44      	ldr	r3, [pc, #272]	; (8018ad4 <__multiply+0x14c>)
 80189c2:	4845      	ldr	r0, [pc, #276]	; (8018ad8 <__multiply+0x150>)
 80189c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80189c8:	f001 fe12 	bl	801a5f0 <__assert_func>
 80189cc:	f100 0514 	add.w	r5, r0, #20
 80189d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80189d4:	462b      	mov	r3, r5
 80189d6:	2200      	movs	r2, #0
 80189d8:	4543      	cmp	r3, r8
 80189da:	d321      	bcc.n	8018a20 <__multiply+0x98>
 80189dc:	f104 0314 	add.w	r3, r4, #20
 80189e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80189e4:	f109 0314 	add.w	r3, r9, #20
 80189e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80189ec:	9202      	str	r2, [sp, #8]
 80189ee:	1b3a      	subs	r2, r7, r4
 80189f0:	3a15      	subs	r2, #21
 80189f2:	f022 0203 	bic.w	r2, r2, #3
 80189f6:	3204      	adds	r2, #4
 80189f8:	f104 0115 	add.w	r1, r4, #21
 80189fc:	428f      	cmp	r7, r1
 80189fe:	bf38      	it	cc
 8018a00:	2204      	movcc	r2, #4
 8018a02:	9201      	str	r2, [sp, #4]
 8018a04:	9a02      	ldr	r2, [sp, #8]
 8018a06:	9303      	str	r3, [sp, #12]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d80c      	bhi.n	8018a26 <__multiply+0x9e>
 8018a0c:	2e00      	cmp	r6, #0
 8018a0e:	dd03      	ble.n	8018a18 <__multiply+0x90>
 8018a10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d05b      	beq.n	8018ad0 <__multiply+0x148>
 8018a18:	6106      	str	r6, [r0, #16]
 8018a1a:	b005      	add	sp, #20
 8018a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a20:	f843 2b04 	str.w	r2, [r3], #4
 8018a24:	e7d8      	b.n	80189d8 <__multiply+0x50>
 8018a26:	f8b3 a000 	ldrh.w	sl, [r3]
 8018a2a:	f1ba 0f00 	cmp.w	sl, #0
 8018a2e:	d024      	beq.n	8018a7a <__multiply+0xf2>
 8018a30:	f104 0e14 	add.w	lr, r4, #20
 8018a34:	46a9      	mov	r9, r5
 8018a36:	f04f 0c00 	mov.w	ip, #0
 8018a3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018a3e:	f8d9 1000 	ldr.w	r1, [r9]
 8018a42:	fa1f fb82 	uxth.w	fp, r2
 8018a46:	b289      	uxth	r1, r1
 8018a48:	fb0a 110b 	mla	r1, sl, fp, r1
 8018a4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018a50:	f8d9 2000 	ldr.w	r2, [r9]
 8018a54:	4461      	add	r1, ip
 8018a56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018a5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8018a5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018a62:	b289      	uxth	r1, r1
 8018a64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018a68:	4577      	cmp	r7, lr
 8018a6a:	f849 1b04 	str.w	r1, [r9], #4
 8018a6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018a72:	d8e2      	bhi.n	8018a3a <__multiply+0xb2>
 8018a74:	9a01      	ldr	r2, [sp, #4]
 8018a76:	f845 c002 	str.w	ip, [r5, r2]
 8018a7a:	9a03      	ldr	r2, [sp, #12]
 8018a7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018a80:	3304      	adds	r3, #4
 8018a82:	f1b9 0f00 	cmp.w	r9, #0
 8018a86:	d021      	beq.n	8018acc <__multiply+0x144>
 8018a88:	6829      	ldr	r1, [r5, #0]
 8018a8a:	f104 0c14 	add.w	ip, r4, #20
 8018a8e:	46ae      	mov	lr, r5
 8018a90:	f04f 0a00 	mov.w	sl, #0
 8018a94:	f8bc b000 	ldrh.w	fp, [ip]
 8018a98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018a9c:	fb09 220b 	mla	r2, r9, fp, r2
 8018aa0:	4452      	add	r2, sl
 8018aa2:	b289      	uxth	r1, r1
 8018aa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018aa8:	f84e 1b04 	str.w	r1, [lr], #4
 8018aac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018ab0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018ab4:	f8be 1000 	ldrh.w	r1, [lr]
 8018ab8:	fb09 110a 	mla	r1, r9, sl, r1
 8018abc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018ac0:	4567      	cmp	r7, ip
 8018ac2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018ac6:	d8e5      	bhi.n	8018a94 <__multiply+0x10c>
 8018ac8:	9a01      	ldr	r2, [sp, #4]
 8018aca:	50a9      	str	r1, [r5, r2]
 8018acc:	3504      	adds	r5, #4
 8018ace:	e799      	b.n	8018a04 <__multiply+0x7c>
 8018ad0:	3e01      	subs	r6, #1
 8018ad2:	e79b      	b.n	8018a0c <__multiply+0x84>
 8018ad4:	0801cab1 	.word	0x0801cab1
 8018ad8:	0801cac2 	.word	0x0801cac2

08018adc <__pow5mult>:
 8018adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ae0:	4615      	mov	r5, r2
 8018ae2:	f012 0203 	ands.w	r2, r2, #3
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	460f      	mov	r7, r1
 8018aea:	d007      	beq.n	8018afc <__pow5mult+0x20>
 8018aec:	4c25      	ldr	r4, [pc, #148]	; (8018b84 <__pow5mult+0xa8>)
 8018aee:	3a01      	subs	r2, #1
 8018af0:	2300      	movs	r3, #0
 8018af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018af6:	f7ff fe53 	bl	80187a0 <__multadd>
 8018afa:	4607      	mov	r7, r0
 8018afc:	10ad      	asrs	r5, r5, #2
 8018afe:	d03d      	beq.n	8018b7c <__pow5mult+0xa0>
 8018b00:	69f4      	ldr	r4, [r6, #28]
 8018b02:	b97c      	cbnz	r4, 8018b24 <__pow5mult+0x48>
 8018b04:	2010      	movs	r0, #16
 8018b06:	f7ff fd35 	bl	8018574 <malloc>
 8018b0a:	4602      	mov	r2, r0
 8018b0c:	61f0      	str	r0, [r6, #28]
 8018b0e:	b928      	cbnz	r0, 8018b1c <__pow5mult+0x40>
 8018b10:	4b1d      	ldr	r3, [pc, #116]	; (8018b88 <__pow5mult+0xac>)
 8018b12:	481e      	ldr	r0, [pc, #120]	; (8018b8c <__pow5mult+0xb0>)
 8018b14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018b18:	f001 fd6a 	bl	801a5f0 <__assert_func>
 8018b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b20:	6004      	str	r4, [r0, #0]
 8018b22:	60c4      	str	r4, [r0, #12]
 8018b24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b2c:	b94c      	cbnz	r4, 8018b42 <__pow5mult+0x66>
 8018b2e:	f240 2171 	movw	r1, #625	; 0x271
 8018b32:	4630      	mov	r0, r6
 8018b34:	f7ff ff12 	bl	801895c <__i2b>
 8018b38:	2300      	movs	r3, #0
 8018b3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b3e:	4604      	mov	r4, r0
 8018b40:	6003      	str	r3, [r0, #0]
 8018b42:	f04f 0900 	mov.w	r9, #0
 8018b46:	07eb      	lsls	r3, r5, #31
 8018b48:	d50a      	bpl.n	8018b60 <__pow5mult+0x84>
 8018b4a:	4639      	mov	r1, r7
 8018b4c:	4622      	mov	r2, r4
 8018b4e:	4630      	mov	r0, r6
 8018b50:	f7ff ff1a 	bl	8018988 <__multiply>
 8018b54:	4639      	mov	r1, r7
 8018b56:	4680      	mov	r8, r0
 8018b58:	4630      	mov	r0, r6
 8018b5a:	f7ff fdff 	bl	801875c <_Bfree>
 8018b5e:	4647      	mov	r7, r8
 8018b60:	106d      	asrs	r5, r5, #1
 8018b62:	d00b      	beq.n	8018b7c <__pow5mult+0xa0>
 8018b64:	6820      	ldr	r0, [r4, #0]
 8018b66:	b938      	cbnz	r0, 8018b78 <__pow5mult+0x9c>
 8018b68:	4622      	mov	r2, r4
 8018b6a:	4621      	mov	r1, r4
 8018b6c:	4630      	mov	r0, r6
 8018b6e:	f7ff ff0b 	bl	8018988 <__multiply>
 8018b72:	6020      	str	r0, [r4, #0]
 8018b74:	f8c0 9000 	str.w	r9, [r0]
 8018b78:	4604      	mov	r4, r0
 8018b7a:	e7e4      	b.n	8018b46 <__pow5mult+0x6a>
 8018b7c:	4638      	mov	r0, r7
 8018b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b82:	bf00      	nop
 8018b84:	0801cc10 	.word	0x0801cc10
 8018b88:	0801ca42 	.word	0x0801ca42
 8018b8c:	0801cac2 	.word	0x0801cac2

08018b90 <__lshift>:
 8018b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b94:	460c      	mov	r4, r1
 8018b96:	6849      	ldr	r1, [r1, #4]
 8018b98:	6923      	ldr	r3, [r4, #16]
 8018b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018b9e:	68a3      	ldr	r3, [r4, #8]
 8018ba0:	4607      	mov	r7, r0
 8018ba2:	4691      	mov	r9, r2
 8018ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018ba8:	f108 0601 	add.w	r6, r8, #1
 8018bac:	42b3      	cmp	r3, r6
 8018bae:	db0b      	blt.n	8018bc8 <__lshift+0x38>
 8018bb0:	4638      	mov	r0, r7
 8018bb2:	f7ff fd93 	bl	80186dc <_Balloc>
 8018bb6:	4605      	mov	r5, r0
 8018bb8:	b948      	cbnz	r0, 8018bce <__lshift+0x3e>
 8018bba:	4602      	mov	r2, r0
 8018bbc:	4b28      	ldr	r3, [pc, #160]	; (8018c60 <__lshift+0xd0>)
 8018bbe:	4829      	ldr	r0, [pc, #164]	; (8018c64 <__lshift+0xd4>)
 8018bc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018bc4:	f001 fd14 	bl	801a5f0 <__assert_func>
 8018bc8:	3101      	adds	r1, #1
 8018bca:	005b      	lsls	r3, r3, #1
 8018bcc:	e7ee      	b.n	8018bac <__lshift+0x1c>
 8018bce:	2300      	movs	r3, #0
 8018bd0:	f100 0114 	add.w	r1, r0, #20
 8018bd4:	f100 0210 	add.w	r2, r0, #16
 8018bd8:	4618      	mov	r0, r3
 8018bda:	4553      	cmp	r3, sl
 8018bdc:	db33      	blt.n	8018c46 <__lshift+0xb6>
 8018bde:	6920      	ldr	r0, [r4, #16]
 8018be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018be4:	f104 0314 	add.w	r3, r4, #20
 8018be8:	f019 091f 	ands.w	r9, r9, #31
 8018bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018bf4:	d02b      	beq.n	8018c4e <__lshift+0xbe>
 8018bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8018bfa:	468a      	mov	sl, r1
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	6818      	ldr	r0, [r3, #0]
 8018c00:	fa00 f009 	lsl.w	r0, r0, r9
 8018c04:	4310      	orrs	r0, r2
 8018c06:	f84a 0b04 	str.w	r0, [sl], #4
 8018c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c0e:	459c      	cmp	ip, r3
 8018c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8018c14:	d8f3      	bhi.n	8018bfe <__lshift+0x6e>
 8018c16:	ebac 0304 	sub.w	r3, ip, r4
 8018c1a:	3b15      	subs	r3, #21
 8018c1c:	f023 0303 	bic.w	r3, r3, #3
 8018c20:	3304      	adds	r3, #4
 8018c22:	f104 0015 	add.w	r0, r4, #21
 8018c26:	4584      	cmp	ip, r0
 8018c28:	bf38      	it	cc
 8018c2a:	2304      	movcc	r3, #4
 8018c2c:	50ca      	str	r2, [r1, r3]
 8018c2e:	b10a      	cbz	r2, 8018c34 <__lshift+0xa4>
 8018c30:	f108 0602 	add.w	r6, r8, #2
 8018c34:	3e01      	subs	r6, #1
 8018c36:	4638      	mov	r0, r7
 8018c38:	612e      	str	r6, [r5, #16]
 8018c3a:	4621      	mov	r1, r4
 8018c3c:	f7ff fd8e 	bl	801875c <_Bfree>
 8018c40:	4628      	mov	r0, r5
 8018c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8018c4a:	3301      	adds	r3, #1
 8018c4c:	e7c5      	b.n	8018bda <__lshift+0x4a>
 8018c4e:	3904      	subs	r1, #4
 8018c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c58:	459c      	cmp	ip, r3
 8018c5a:	d8f9      	bhi.n	8018c50 <__lshift+0xc0>
 8018c5c:	e7ea      	b.n	8018c34 <__lshift+0xa4>
 8018c5e:	bf00      	nop
 8018c60:	0801cab1 	.word	0x0801cab1
 8018c64:	0801cac2 	.word	0x0801cac2

08018c68 <__mcmp>:
 8018c68:	b530      	push	{r4, r5, lr}
 8018c6a:	6902      	ldr	r2, [r0, #16]
 8018c6c:	690c      	ldr	r4, [r1, #16]
 8018c6e:	1b12      	subs	r2, r2, r4
 8018c70:	d10e      	bne.n	8018c90 <__mcmp+0x28>
 8018c72:	f100 0314 	add.w	r3, r0, #20
 8018c76:	3114      	adds	r1, #20
 8018c78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018c80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018c84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018c88:	42a5      	cmp	r5, r4
 8018c8a:	d003      	beq.n	8018c94 <__mcmp+0x2c>
 8018c8c:	d305      	bcc.n	8018c9a <__mcmp+0x32>
 8018c8e:	2201      	movs	r2, #1
 8018c90:	4610      	mov	r0, r2
 8018c92:	bd30      	pop	{r4, r5, pc}
 8018c94:	4283      	cmp	r3, r0
 8018c96:	d3f3      	bcc.n	8018c80 <__mcmp+0x18>
 8018c98:	e7fa      	b.n	8018c90 <__mcmp+0x28>
 8018c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c9e:	e7f7      	b.n	8018c90 <__mcmp+0x28>

08018ca0 <__mdiff>:
 8018ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca4:	460c      	mov	r4, r1
 8018ca6:	4606      	mov	r6, r0
 8018ca8:	4611      	mov	r1, r2
 8018caa:	4620      	mov	r0, r4
 8018cac:	4690      	mov	r8, r2
 8018cae:	f7ff ffdb 	bl	8018c68 <__mcmp>
 8018cb2:	1e05      	subs	r5, r0, #0
 8018cb4:	d110      	bne.n	8018cd8 <__mdiff+0x38>
 8018cb6:	4629      	mov	r1, r5
 8018cb8:	4630      	mov	r0, r6
 8018cba:	f7ff fd0f 	bl	80186dc <_Balloc>
 8018cbe:	b930      	cbnz	r0, 8018cce <__mdiff+0x2e>
 8018cc0:	4b3a      	ldr	r3, [pc, #232]	; (8018dac <__mdiff+0x10c>)
 8018cc2:	4602      	mov	r2, r0
 8018cc4:	f240 2137 	movw	r1, #567	; 0x237
 8018cc8:	4839      	ldr	r0, [pc, #228]	; (8018db0 <__mdiff+0x110>)
 8018cca:	f001 fc91 	bl	801a5f0 <__assert_func>
 8018cce:	2301      	movs	r3, #1
 8018cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd8:	bfa4      	itt	ge
 8018cda:	4643      	movge	r3, r8
 8018cdc:	46a0      	movge	r8, r4
 8018cde:	4630      	mov	r0, r6
 8018ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018ce4:	bfa6      	itte	ge
 8018ce6:	461c      	movge	r4, r3
 8018ce8:	2500      	movge	r5, #0
 8018cea:	2501      	movlt	r5, #1
 8018cec:	f7ff fcf6 	bl	80186dc <_Balloc>
 8018cf0:	b920      	cbnz	r0, 8018cfc <__mdiff+0x5c>
 8018cf2:	4b2e      	ldr	r3, [pc, #184]	; (8018dac <__mdiff+0x10c>)
 8018cf4:	4602      	mov	r2, r0
 8018cf6:	f240 2145 	movw	r1, #581	; 0x245
 8018cfa:	e7e5      	b.n	8018cc8 <__mdiff+0x28>
 8018cfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018d00:	6926      	ldr	r6, [r4, #16]
 8018d02:	60c5      	str	r5, [r0, #12]
 8018d04:	f104 0914 	add.w	r9, r4, #20
 8018d08:	f108 0514 	add.w	r5, r8, #20
 8018d0c:	f100 0e14 	add.w	lr, r0, #20
 8018d10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018d14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018d18:	f108 0210 	add.w	r2, r8, #16
 8018d1c:	46f2      	mov	sl, lr
 8018d1e:	2100      	movs	r1, #0
 8018d20:	f859 3b04 	ldr.w	r3, [r9], #4
 8018d24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018d28:	fa11 f88b 	uxtah	r8, r1, fp
 8018d2c:	b299      	uxth	r1, r3
 8018d2e:	0c1b      	lsrs	r3, r3, #16
 8018d30:	eba8 0801 	sub.w	r8, r8, r1
 8018d34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018d38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018d3c:	fa1f f888 	uxth.w	r8, r8
 8018d40:	1419      	asrs	r1, r3, #16
 8018d42:	454e      	cmp	r6, r9
 8018d44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018d48:	f84a 3b04 	str.w	r3, [sl], #4
 8018d4c:	d8e8      	bhi.n	8018d20 <__mdiff+0x80>
 8018d4e:	1b33      	subs	r3, r6, r4
 8018d50:	3b15      	subs	r3, #21
 8018d52:	f023 0303 	bic.w	r3, r3, #3
 8018d56:	3304      	adds	r3, #4
 8018d58:	3415      	adds	r4, #21
 8018d5a:	42a6      	cmp	r6, r4
 8018d5c:	bf38      	it	cc
 8018d5e:	2304      	movcc	r3, #4
 8018d60:	441d      	add	r5, r3
 8018d62:	4473      	add	r3, lr
 8018d64:	469e      	mov	lr, r3
 8018d66:	462e      	mov	r6, r5
 8018d68:	4566      	cmp	r6, ip
 8018d6a:	d30e      	bcc.n	8018d8a <__mdiff+0xea>
 8018d6c:	f10c 0203 	add.w	r2, ip, #3
 8018d70:	1b52      	subs	r2, r2, r5
 8018d72:	f022 0203 	bic.w	r2, r2, #3
 8018d76:	3d03      	subs	r5, #3
 8018d78:	45ac      	cmp	ip, r5
 8018d7a:	bf38      	it	cc
 8018d7c:	2200      	movcc	r2, #0
 8018d7e:	4413      	add	r3, r2
 8018d80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018d84:	b17a      	cbz	r2, 8018da6 <__mdiff+0x106>
 8018d86:	6107      	str	r7, [r0, #16]
 8018d88:	e7a4      	b.n	8018cd4 <__mdiff+0x34>
 8018d8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8018d8e:	fa11 f288 	uxtah	r2, r1, r8
 8018d92:	1414      	asrs	r4, r2, #16
 8018d94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018d98:	b292      	uxth	r2, r2
 8018d9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018d9e:	f84e 2b04 	str.w	r2, [lr], #4
 8018da2:	1421      	asrs	r1, r4, #16
 8018da4:	e7e0      	b.n	8018d68 <__mdiff+0xc8>
 8018da6:	3f01      	subs	r7, #1
 8018da8:	e7ea      	b.n	8018d80 <__mdiff+0xe0>
 8018daa:	bf00      	nop
 8018dac:	0801cab1 	.word	0x0801cab1
 8018db0:	0801cac2 	.word	0x0801cac2

08018db4 <__ulp>:
 8018db4:	b082      	sub	sp, #8
 8018db6:	ed8d 0b00 	vstr	d0, [sp]
 8018dba:	9a01      	ldr	r2, [sp, #4]
 8018dbc:	4b0f      	ldr	r3, [pc, #60]	; (8018dfc <__ulp+0x48>)
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	dc08      	bgt.n	8018dda <__ulp+0x26>
 8018dc8:	425b      	negs	r3, r3
 8018dca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8018dce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018dd2:	da04      	bge.n	8018dde <__ulp+0x2a>
 8018dd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018dd8:	4113      	asrs	r3, r2
 8018dda:	2200      	movs	r2, #0
 8018ddc:	e008      	b.n	8018df0 <__ulp+0x3c>
 8018dde:	f1a2 0314 	sub.w	r3, r2, #20
 8018de2:	2b1e      	cmp	r3, #30
 8018de4:	bfda      	itte	le
 8018de6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018dea:	40da      	lsrle	r2, r3
 8018dec:	2201      	movgt	r2, #1
 8018dee:	2300      	movs	r3, #0
 8018df0:	4619      	mov	r1, r3
 8018df2:	4610      	mov	r0, r2
 8018df4:	ec41 0b10 	vmov	d0, r0, r1
 8018df8:	b002      	add	sp, #8
 8018dfa:	4770      	bx	lr
 8018dfc:	7ff00000 	.word	0x7ff00000

08018e00 <__b2d>:
 8018e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e04:	6906      	ldr	r6, [r0, #16]
 8018e06:	f100 0814 	add.w	r8, r0, #20
 8018e0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018e0e:	1f37      	subs	r7, r6, #4
 8018e10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018e14:	4610      	mov	r0, r2
 8018e16:	f7ff fd53 	bl	80188c0 <__hi0bits>
 8018e1a:	f1c0 0320 	rsb	r3, r0, #32
 8018e1e:	280a      	cmp	r0, #10
 8018e20:	600b      	str	r3, [r1, #0]
 8018e22:	491b      	ldr	r1, [pc, #108]	; (8018e90 <__b2d+0x90>)
 8018e24:	dc15      	bgt.n	8018e52 <__b2d+0x52>
 8018e26:	f1c0 0c0b 	rsb	ip, r0, #11
 8018e2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8018e2e:	45b8      	cmp	r8, r7
 8018e30:	ea43 0501 	orr.w	r5, r3, r1
 8018e34:	bf34      	ite	cc
 8018e36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018e3a:	2300      	movcs	r3, #0
 8018e3c:	3015      	adds	r0, #21
 8018e3e:	fa02 f000 	lsl.w	r0, r2, r0
 8018e42:	fa23 f30c 	lsr.w	r3, r3, ip
 8018e46:	4303      	orrs	r3, r0
 8018e48:	461c      	mov	r4, r3
 8018e4a:	ec45 4b10 	vmov	d0, r4, r5
 8018e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e52:	45b8      	cmp	r8, r7
 8018e54:	bf3a      	itte	cc
 8018e56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018e5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8018e5e:	2300      	movcs	r3, #0
 8018e60:	380b      	subs	r0, #11
 8018e62:	d012      	beq.n	8018e8a <__b2d+0x8a>
 8018e64:	f1c0 0120 	rsb	r1, r0, #32
 8018e68:	fa23 f401 	lsr.w	r4, r3, r1
 8018e6c:	4082      	lsls	r2, r0
 8018e6e:	4322      	orrs	r2, r4
 8018e70:	4547      	cmp	r7, r8
 8018e72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018e76:	bf8c      	ite	hi
 8018e78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018e7c:	2200      	movls	r2, #0
 8018e7e:	4083      	lsls	r3, r0
 8018e80:	40ca      	lsrs	r2, r1
 8018e82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018e86:	4313      	orrs	r3, r2
 8018e88:	e7de      	b.n	8018e48 <__b2d+0x48>
 8018e8a:	ea42 0501 	orr.w	r5, r2, r1
 8018e8e:	e7db      	b.n	8018e48 <__b2d+0x48>
 8018e90:	3ff00000 	.word	0x3ff00000

08018e94 <__d2b>:
 8018e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e98:	460f      	mov	r7, r1
 8018e9a:	2101      	movs	r1, #1
 8018e9c:	ec59 8b10 	vmov	r8, r9, d0
 8018ea0:	4616      	mov	r6, r2
 8018ea2:	f7ff fc1b 	bl	80186dc <_Balloc>
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	b930      	cbnz	r0, 8018eb8 <__d2b+0x24>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	4b24      	ldr	r3, [pc, #144]	; (8018f40 <__d2b+0xac>)
 8018eae:	4825      	ldr	r0, [pc, #148]	; (8018f44 <__d2b+0xb0>)
 8018eb0:	f240 310f 	movw	r1, #783	; 0x30f
 8018eb4:	f001 fb9c 	bl	801a5f0 <__assert_func>
 8018eb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ec0:	bb2d      	cbnz	r5, 8018f0e <__d2b+0x7a>
 8018ec2:	9301      	str	r3, [sp, #4]
 8018ec4:	f1b8 0300 	subs.w	r3, r8, #0
 8018ec8:	d026      	beq.n	8018f18 <__d2b+0x84>
 8018eca:	4668      	mov	r0, sp
 8018ecc:	9300      	str	r3, [sp, #0]
 8018ece:	f7ff fd17 	bl	8018900 <__lo0bits>
 8018ed2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018ed6:	b1e8      	cbz	r0, 8018f14 <__d2b+0x80>
 8018ed8:	f1c0 0320 	rsb	r3, r0, #32
 8018edc:	fa02 f303 	lsl.w	r3, r2, r3
 8018ee0:	430b      	orrs	r3, r1
 8018ee2:	40c2      	lsrs	r2, r0
 8018ee4:	6163      	str	r3, [r4, #20]
 8018ee6:	9201      	str	r2, [sp, #4]
 8018ee8:	9b01      	ldr	r3, [sp, #4]
 8018eea:	61a3      	str	r3, [r4, #24]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf14      	ite	ne
 8018ef0:	2202      	movne	r2, #2
 8018ef2:	2201      	moveq	r2, #1
 8018ef4:	6122      	str	r2, [r4, #16]
 8018ef6:	b1bd      	cbz	r5, 8018f28 <__d2b+0x94>
 8018ef8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018efc:	4405      	add	r5, r0
 8018efe:	603d      	str	r5, [r7, #0]
 8018f00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f04:	6030      	str	r0, [r6, #0]
 8018f06:	4620      	mov	r0, r4
 8018f08:	b003      	add	sp, #12
 8018f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f12:	e7d6      	b.n	8018ec2 <__d2b+0x2e>
 8018f14:	6161      	str	r1, [r4, #20]
 8018f16:	e7e7      	b.n	8018ee8 <__d2b+0x54>
 8018f18:	a801      	add	r0, sp, #4
 8018f1a:	f7ff fcf1 	bl	8018900 <__lo0bits>
 8018f1e:	9b01      	ldr	r3, [sp, #4]
 8018f20:	6163      	str	r3, [r4, #20]
 8018f22:	3020      	adds	r0, #32
 8018f24:	2201      	movs	r2, #1
 8018f26:	e7e5      	b.n	8018ef4 <__d2b+0x60>
 8018f28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018f2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f30:	6038      	str	r0, [r7, #0]
 8018f32:	6918      	ldr	r0, [r3, #16]
 8018f34:	f7ff fcc4 	bl	80188c0 <__hi0bits>
 8018f38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018f3c:	e7e2      	b.n	8018f04 <__d2b+0x70>
 8018f3e:	bf00      	nop
 8018f40:	0801cab1 	.word	0x0801cab1
 8018f44:	0801cac2 	.word	0x0801cac2

08018f48 <__ratio>:
 8018f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4c:	4688      	mov	r8, r1
 8018f4e:	4669      	mov	r1, sp
 8018f50:	4681      	mov	r9, r0
 8018f52:	f7ff ff55 	bl	8018e00 <__b2d>
 8018f56:	a901      	add	r1, sp, #4
 8018f58:	4640      	mov	r0, r8
 8018f5a:	ec55 4b10 	vmov	r4, r5, d0
 8018f5e:	f7ff ff4f 	bl	8018e00 <__b2d>
 8018f62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f6a:	eba3 0c02 	sub.w	ip, r3, r2
 8018f6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f72:	1a9b      	subs	r3, r3, r2
 8018f74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f78:	ec51 0b10 	vmov	r0, r1, d0
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	bfd6      	itet	le
 8018f80:	460a      	movle	r2, r1
 8018f82:	462a      	movgt	r2, r5
 8018f84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f88:	468b      	mov	fp, r1
 8018f8a:	462f      	mov	r7, r5
 8018f8c:	bfd4      	ite	le
 8018f8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018f92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018f96:	4620      	mov	r0, r4
 8018f98:	ee10 2a10 	vmov	r2, s0
 8018f9c:	465b      	mov	r3, fp
 8018f9e:	4639      	mov	r1, r7
 8018fa0:	f7e7 fc7c 	bl	800089c <__aeabi_ddiv>
 8018fa4:	ec41 0b10 	vmov	d0, r0, r1
 8018fa8:	b003      	add	sp, #12
 8018faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fae <__copybits>:
 8018fae:	3901      	subs	r1, #1
 8018fb0:	b570      	push	{r4, r5, r6, lr}
 8018fb2:	1149      	asrs	r1, r1, #5
 8018fb4:	6914      	ldr	r4, [r2, #16]
 8018fb6:	3101      	adds	r1, #1
 8018fb8:	f102 0314 	add.w	r3, r2, #20
 8018fbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018fc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018fc4:	1f05      	subs	r5, r0, #4
 8018fc6:	42a3      	cmp	r3, r4
 8018fc8:	d30c      	bcc.n	8018fe4 <__copybits+0x36>
 8018fca:	1aa3      	subs	r3, r4, r2
 8018fcc:	3b11      	subs	r3, #17
 8018fce:	f023 0303 	bic.w	r3, r3, #3
 8018fd2:	3211      	adds	r2, #17
 8018fd4:	42a2      	cmp	r2, r4
 8018fd6:	bf88      	it	hi
 8018fd8:	2300      	movhi	r3, #0
 8018fda:	4418      	add	r0, r3
 8018fdc:	2300      	movs	r3, #0
 8018fde:	4288      	cmp	r0, r1
 8018fe0:	d305      	bcc.n	8018fee <__copybits+0x40>
 8018fe2:	bd70      	pop	{r4, r5, r6, pc}
 8018fe4:	f853 6b04 	ldr.w	r6, [r3], #4
 8018fe8:	f845 6f04 	str.w	r6, [r5, #4]!
 8018fec:	e7eb      	b.n	8018fc6 <__copybits+0x18>
 8018fee:	f840 3b04 	str.w	r3, [r0], #4
 8018ff2:	e7f4      	b.n	8018fde <__copybits+0x30>

08018ff4 <__any_on>:
 8018ff4:	f100 0214 	add.w	r2, r0, #20
 8018ff8:	6900      	ldr	r0, [r0, #16]
 8018ffa:	114b      	asrs	r3, r1, #5
 8018ffc:	4298      	cmp	r0, r3
 8018ffe:	b510      	push	{r4, lr}
 8019000:	db11      	blt.n	8019026 <__any_on+0x32>
 8019002:	dd0a      	ble.n	801901a <__any_on+0x26>
 8019004:	f011 011f 	ands.w	r1, r1, #31
 8019008:	d007      	beq.n	801901a <__any_on+0x26>
 801900a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801900e:	fa24 f001 	lsr.w	r0, r4, r1
 8019012:	fa00 f101 	lsl.w	r1, r0, r1
 8019016:	428c      	cmp	r4, r1
 8019018:	d10b      	bne.n	8019032 <__any_on+0x3e>
 801901a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801901e:	4293      	cmp	r3, r2
 8019020:	d803      	bhi.n	801902a <__any_on+0x36>
 8019022:	2000      	movs	r0, #0
 8019024:	bd10      	pop	{r4, pc}
 8019026:	4603      	mov	r3, r0
 8019028:	e7f7      	b.n	801901a <__any_on+0x26>
 801902a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801902e:	2900      	cmp	r1, #0
 8019030:	d0f5      	beq.n	801901e <__any_on+0x2a>
 8019032:	2001      	movs	r0, #1
 8019034:	e7f6      	b.n	8019024 <__any_on+0x30>

08019036 <sulp>:
 8019036:	b570      	push	{r4, r5, r6, lr}
 8019038:	4604      	mov	r4, r0
 801903a:	460d      	mov	r5, r1
 801903c:	ec45 4b10 	vmov	d0, r4, r5
 8019040:	4616      	mov	r6, r2
 8019042:	f7ff feb7 	bl	8018db4 <__ulp>
 8019046:	ec51 0b10 	vmov	r0, r1, d0
 801904a:	b17e      	cbz	r6, 801906c <sulp+0x36>
 801904c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019050:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019054:	2b00      	cmp	r3, #0
 8019056:	dd09      	ble.n	801906c <sulp+0x36>
 8019058:	051b      	lsls	r3, r3, #20
 801905a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801905e:	2400      	movs	r4, #0
 8019060:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019064:	4622      	mov	r2, r4
 8019066:	462b      	mov	r3, r5
 8019068:	f7e7 faee 	bl	8000648 <__aeabi_dmul>
 801906c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019070 <_strtod_l>:
 8019070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019074:	ed2d 8b02 	vpush	{d8}
 8019078:	b09b      	sub	sp, #108	; 0x6c
 801907a:	4604      	mov	r4, r0
 801907c:	9213      	str	r2, [sp, #76]	; 0x4c
 801907e:	2200      	movs	r2, #0
 8019080:	9216      	str	r2, [sp, #88]	; 0x58
 8019082:	460d      	mov	r5, r1
 8019084:	f04f 0800 	mov.w	r8, #0
 8019088:	f04f 0900 	mov.w	r9, #0
 801908c:	460a      	mov	r2, r1
 801908e:	9215      	str	r2, [sp, #84]	; 0x54
 8019090:	7811      	ldrb	r1, [r2, #0]
 8019092:	292b      	cmp	r1, #43	; 0x2b
 8019094:	d04c      	beq.n	8019130 <_strtod_l+0xc0>
 8019096:	d83a      	bhi.n	801910e <_strtod_l+0x9e>
 8019098:	290d      	cmp	r1, #13
 801909a:	d834      	bhi.n	8019106 <_strtod_l+0x96>
 801909c:	2908      	cmp	r1, #8
 801909e:	d834      	bhi.n	801910a <_strtod_l+0x9a>
 80190a0:	2900      	cmp	r1, #0
 80190a2:	d03d      	beq.n	8019120 <_strtod_l+0xb0>
 80190a4:	2200      	movs	r2, #0
 80190a6:	920a      	str	r2, [sp, #40]	; 0x28
 80190a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80190aa:	7832      	ldrb	r2, [r6, #0]
 80190ac:	2a30      	cmp	r2, #48	; 0x30
 80190ae:	f040 80b4 	bne.w	801921a <_strtod_l+0x1aa>
 80190b2:	7872      	ldrb	r2, [r6, #1]
 80190b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80190b8:	2a58      	cmp	r2, #88	; 0x58
 80190ba:	d170      	bne.n	801919e <_strtod_l+0x12e>
 80190bc:	9302      	str	r3, [sp, #8]
 80190be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190c0:	9301      	str	r3, [sp, #4]
 80190c2:	ab16      	add	r3, sp, #88	; 0x58
 80190c4:	9300      	str	r3, [sp, #0]
 80190c6:	4a8e      	ldr	r2, [pc, #568]	; (8019300 <_strtod_l+0x290>)
 80190c8:	ab17      	add	r3, sp, #92	; 0x5c
 80190ca:	a915      	add	r1, sp, #84	; 0x54
 80190cc:	4620      	mov	r0, r4
 80190ce:	f001 fb2b 	bl	801a728 <__gethex>
 80190d2:	f010 070f 	ands.w	r7, r0, #15
 80190d6:	4605      	mov	r5, r0
 80190d8:	d005      	beq.n	80190e6 <_strtod_l+0x76>
 80190da:	2f06      	cmp	r7, #6
 80190dc:	d12a      	bne.n	8019134 <_strtod_l+0xc4>
 80190de:	3601      	adds	r6, #1
 80190e0:	2300      	movs	r3, #0
 80190e2:	9615      	str	r6, [sp, #84]	; 0x54
 80190e4:	930a      	str	r3, [sp, #40]	; 0x28
 80190e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f040 857f 	bne.w	8019bec <_strtod_l+0xb7c>
 80190ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190f0:	b1db      	cbz	r3, 801912a <_strtod_l+0xba>
 80190f2:	4642      	mov	r2, r8
 80190f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80190f8:	ec43 2b10 	vmov	d0, r2, r3
 80190fc:	b01b      	add	sp, #108	; 0x6c
 80190fe:	ecbd 8b02 	vpop	{d8}
 8019102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019106:	2920      	cmp	r1, #32
 8019108:	d1cc      	bne.n	80190a4 <_strtod_l+0x34>
 801910a:	3201      	adds	r2, #1
 801910c:	e7bf      	b.n	801908e <_strtod_l+0x1e>
 801910e:	292d      	cmp	r1, #45	; 0x2d
 8019110:	d1c8      	bne.n	80190a4 <_strtod_l+0x34>
 8019112:	2101      	movs	r1, #1
 8019114:	910a      	str	r1, [sp, #40]	; 0x28
 8019116:	1c51      	adds	r1, r2, #1
 8019118:	9115      	str	r1, [sp, #84]	; 0x54
 801911a:	7852      	ldrb	r2, [r2, #1]
 801911c:	2a00      	cmp	r2, #0
 801911e:	d1c3      	bne.n	80190a8 <_strtod_l+0x38>
 8019120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019122:	9515      	str	r5, [sp, #84]	; 0x54
 8019124:	2b00      	cmp	r3, #0
 8019126:	f040 855f 	bne.w	8019be8 <_strtod_l+0xb78>
 801912a:	4642      	mov	r2, r8
 801912c:	464b      	mov	r3, r9
 801912e:	e7e3      	b.n	80190f8 <_strtod_l+0x88>
 8019130:	2100      	movs	r1, #0
 8019132:	e7ef      	b.n	8019114 <_strtod_l+0xa4>
 8019134:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019136:	b13a      	cbz	r2, 8019148 <_strtod_l+0xd8>
 8019138:	2135      	movs	r1, #53	; 0x35
 801913a:	a818      	add	r0, sp, #96	; 0x60
 801913c:	f7ff ff37 	bl	8018fae <__copybits>
 8019140:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019142:	4620      	mov	r0, r4
 8019144:	f7ff fb0a 	bl	801875c <_Bfree>
 8019148:	3f01      	subs	r7, #1
 801914a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801914c:	2f04      	cmp	r7, #4
 801914e:	d806      	bhi.n	801915e <_strtod_l+0xee>
 8019150:	e8df f007 	tbb	[pc, r7]
 8019154:	201d0314 	.word	0x201d0314
 8019158:	14          	.byte	0x14
 8019159:	00          	.byte	0x00
 801915a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801915e:	05e9      	lsls	r1, r5, #23
 8019160:	bf48      	it	mi
 8019162:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8019166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801916a:	0d1b      	lsrs	r3, r3, #20
 801916c:	051b      	lsls	r3, r3, #20
 801916e:	2b00      	cmp	r3, #0
 8019170:	d1b9      	bne.n	80190e6 <_strtod_l+0x76>
 8019172:	f7fe faf7 	bl	8017764 <__errno>
 8019176:	2322      	movs	r3, #34	; 0x22
 8019178:	6003      	str	r3, [r0, #0]
 801917a:	e7b4      	b.n	80190e6 <_strtod_l+0x76>
 801917c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019180:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019184:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019188:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801918c:	e7e7      	b.n	801915e <_strtod_l+0xee>
 801918e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8019308 <_strtod_l+0x298>
 8019192:	e7e4      	b.n	801915e <_strtod_l+0xee>
 8019194:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019198:	f04f 38ff 	mov.w	r8, #4294967295
 801919c:	e7df      	b.n	801915e <_strtod_l+0xee>
 801919e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191a0:	1c5a      	adds	r2, r3, #1
 80191a2:	9215      	str	r2, [sp, #84]	; 0x54
 80191a4:	785b      	ldrb	r3, [r3, #1]
 80191a6:	2b30      	cmp	r3, #48	; 0x30
 80191a8:	d0f9      	beq.n	801919e <_strtod_l+0x12e>
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d09b      	beq.n	80190e6 <_strtod_l+0x76>
 80191ae:	2301      	movs	r3, #1
 80191b0:	f04f 0a00 	mov.w	sl, #0
 80191b4:	9304      	str	r3, [sp, #16]
 80191b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80191ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80191be:	46d3      	mov	fp, sl
 80191c0:	220a      	movs	r2, #10
 80191c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80191c4:	7806      	ldrb	r6, [r0, #0]
 80191c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80191ca:	b2d9      	uxtb	r1, r3
 80191cc:	2909      	cmp	r1, #9
 80191ce:	d926      	bls.n	801921e <_strtod_l+0x1ae>
 80191d0:	494c      	ldr	r1, [pc, #304]	; (8019304 <_strtod_l+0x294>)
 80191d2:	2201      	movs	r2, #1
 80191d4:	f001 f9c0 	bl	801a558 <strncmp>
 80191d8:	2800      	cmp	r0, #0
 80191da:	d030      	beq.n	801923e <_strtod_l+0x1ce>
 80191dc:	2000      	movs	r0, #0
 80191de:	4632      	mov	r2, r6
 80191e0:	9005      	str	r0, [sp, #20]
 80191e2:	465e      	mov	r6, fp
 80191e4:	4603      	mov	r3, r0
 80191e6:	2a65      	cmp	r2, #101	; 0x65
 80191e8:	d001      	beq.n	80191ee <_strtod_l+0x17e>
 80191ea:	2a45      	cmp	r2, #69	; 0x45
 80191ec:	d113      	bne.n	8019216 <_strtod_l+0x1a6>
 80191ee:	b91e      	cbnz	r6, 80191f8 <_strtod_l+0x188>
 80191f0:	9a04      	ldr	r2, [sp, #16]
 80191f2:	4302      	orrs	r2, r0
 80191f4:	d094      	beq.n	8019120 <_strtod_l+0xb0>
 80191f6:	2600      	movs	r6, #0
 80191f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80191fa:	1c6a      	adds	r2, r5, #1
 80191fc:	9215      	str	r2, [sp, #84]	; 0x54
 80191fe:	786a      	ldrb	r2, [r5, #1]
 8019200:	2a2b      	cmp	r2, #43	; 0x2b
 8019202:	d074      	beq.n	80192ee <_strtod_l+0x27e>
 8019204:	2a2d      	cmp	r2, #45	; 0x2d
 8019206:	d078      	beq.n	80192fa <_strtod_l+0x28a>
 8019208:	f04f 0c00 	mov.w	ip, #0
 801920c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019210:	2909      	cmp	r1, #9
 8019212:	d97f      	bls.n	8019314 <_strtod_l+0x2a4>
 8019214:	9515      	str	r5, [sp, #84]	; 0x54
 8019216:	2700      	movs	r7, #0
 8019218:	e09e      	b.n	8019358 <_strtod_l+0x2e8>
 801921a:	2300      	movs	r3, #0
 801921c:	e7c8      	b.n	80191b0 <_strtod_l+0x140>
 801921e:	f1bb 0f08 	cmp.w	fp, #8
 8019222:	bfd8      	it	le
 8019224:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019226:	f100 0001 	add.w	r0, r0, #1
 801922a:	bfda      	itte	le
 801922c:	fb02 3301 	mlale	r3, r2, r1, r3
 8019230:	9309      	strle	r3, [sp, #36]	; 0x24
 8019232:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8019236:	f10b 0b01 	add.w	fp, fp, #1
 801923a:	9015      	str	r0, [sp, #84]	; 0x54
 801923c:	e7c1      	b.n	80191c2 <_strtod_l+0x152>
 801923e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019240:	1c5a      	adds	r2, r3, #1
 8019242:	9215      	str	r2, [sp, #84]	; 0x54
 8019244:	785a      	ldrb	r2, [r3, #1]
 8019246:	f1bb 0f00 	cmp.w	fp, #0
 801924a:	d037      	beq.n	80192bc <_strtod_l+0x24c>
 801924c:	9005      	str	r0, [sp, #20]
 801924e:	465e      	mov	r6, fp
 8019250:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019254:	2b09      	cmp	r3, #9
 8019256:	d912      	bls.n	801927e <_strtod_l+0x20e>
 8019258:	2301      	movs	r3, #1
 801925a:	e7c4      	b.n	80191e6 <_strtod_l+0x176>
 801925c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801925e:	1c5a      	adds	r2, r3, #1
 8019260:	9215      	str	r2, [sp, #84]	; 0x54
 8019262:	785a      	ldrb	r2, [r3, #1]
 8019264:	3001      	adds	r0, #1
 8019266:	2a30      	cmp	r2, #48	; 0x30
 8019268:	d0f8      	beq.n	801925c <_strtod_l+0x1ec>
 801926a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801926e:	2b08      	cmp	r3, #8
 8019270:	f200 84c1 	bhi.w	8019bf6 <_strtod_l+0xb86>
 8019274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019276:	9005      	str	r0, [sp, #20]
 8019278:	2000      	movs	r0, #0
 801927a:	930b      	str	r3, [sp, #44]	; 0x2c
 801927c:	4606      	mov	r6, r0
 801927e:	3a30      	subs	r2, #48	; 0x30
 8019280:	f100 0301 	add.w	r3, r0, #1
 8019284:	d014      	beq.n	80192b0 <_strtod_l+0x240>
 8019286:	9905      	ldr	r1, [sp, #20]
 8019288:	4419      	add	r1, r3
 801928a:	9105      	str	r1, [sp, #20]
 801928c:	4633      	mov	r3, r6
 801928e:	eb00 0c06 	add.w	ip, r0, r6
 8019292:	210a      	movs	r1, #10
 8019294:	4563      	cmp	r3, ip
 8019296:	d113      	bne.n	80192c0 <_strtod_l+0x250>
 8019298:	1833      	adds	r3, r6, r0
 801929a:	2b08      	cmp	r3, #8
 801929c:	f106 0601 	add.w	r6, r6, #1
 80192a0:	4406      	add	r6, r0
 80192a2:	dc1a      	bgt.n	80192da <_strtod_l+0x26a>
 80192a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80192a6:	230a      	movs	r3, #10
 80192a8:	fb03 2301 	mla	r3, r3, r1, r2
 80192ac:	9309      	str	r3, [sp, #36]	; 0x24
 80192ae:	2300      	movs	r3, #0
 80192b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80192b2:	1c51      	adds	r1, r2, #1
 80192b4:	9115      	str	r1, [sp, #84]	; 0x54
 80192b6:	7852      	ldrb	r2, [r2, #1]
 80192b8:	4618      	mov	r0, r3
 80192ba:	e7c9      	b.n	8019250 <_strtod_l+0x1e0>
 80192bc:	4658      	mov	r0, fp
 80192be:	e7d2      	b.n	8019266 <_strtod_l+0x1f6>
 80192c0:	2b08      	cmp	r3, #8
 80192c2:	f103 0301 	add.w	r3, r3, #1
 80192c6:	dc03      	bgt.n	80192d0 <_strtod_l+0x260>
 80192c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80192ca:	434f      	muls	r7, r1
 80192cc:	9709      	str	r7, [sp, #36]	; 0x24
 80192ce:	e7e1      	b.n	8019294 <_strtod_l+0x224>
 80192d0:	2b10      	cmp	r3, #16
 80192d2:	bfd8      	it	le
 80192d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80192d8:	e7dc      	b.n	8019294 <_strtod_l+0x224>
 80192da:	2e10      	cmp	r6, #16
 80192dc:	bfdc      	itt	le
 80192de:	230a      	movle	r3, #10
 80192e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80192e4:	e7e3      	b.n	80192ae <_strtod_l+0x23e>
 80192e6:	2300      	movs	r3, #0
 80192e8:	9305      	str	r3, [sp, #20]
 80192ea:	2301      	movs	r3, #1
 80192ec:	e780      	b.n	80191f0 <_strtod_l+0x180>
 80192ee:	f04f 0c00 	mov.w	ip, #0
 80192f2:	1caa      	adds	r2, r5, #2
 80192f4:	9215      	str	r2, [sp, #84]	; 0x54
 80192f6:	78aa      	ldrb	r2, [r5, #2]
 80192f8:	e788      	b.n	801920c <_strtod_l+0x19c>
 80192fa:	f04f 0c01 	mov.w	ip, #1
 80192fe:	e7f8      	b.n	80192f2 <_strtod_l+0x282>
 8019300:	0801cc20 	.word	0x0801cc20
 8019304:	0801cc1c 	.word	0x0801cc1c
 8019308:	7ff00000 	.word	0x7ff00000
 801930c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801930e:	1c51      	adds	r1, r2, #1
 8019310:	9115      	str	r1, [sp, #84]	; 0x54
 8019312:	7852      	ldrb	r2, [r2, #1]
 8019314:	2a30      	cmp	r2, #48	; 0x30
 8019316:	d0f9      	beq.n	801930c <_strtod_l+0x29c>
 8019318:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801931c:	2908      	cmp	r1, #8
 801931e:	f63f af7a 	bhi.w	8019216 <_strtod_l+0x1a6>
 8019322:	3a30      	subs	r2, #48	; 0x30
 8019324:	9208      	str	r2, [sp, #32]
 8019326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019328:	920c      	str	r2, [sp, #48]	; 0x30
 801932a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801932c:	1c57      	adds	r7, r2, #1
 801932e:	9715      	str	r7, [sp, #84]	; 0x54
 8019330:	7852      	ldrb	r2, [r2, #1]
 8019332:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019336:	f1be 0f09 	cmp.w	lr, #9
 801933a:	d938      	bls.n	80193ae <_strtod_l+0x33e>
 801933c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801933e:	1a7f      	subs	r7, r7, r1
 8019340:	2f08      	cmp	r7, #8
 8019342:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8019346:	dc03      	bgt.n	8019350 <_strtod_l+0x2e0>
 8019348:	9908      	ldr	r1, [sp, #32]
 801934a:	428f      	cmp	r7, r1
 801934c:	bfa8      	it	ge
 801934e:	460f      	movge	r7, r1
 8019350:	f1bc 0f00 	cmp.w	ip, #0
 8019354:	d000      	beq.n	8019358 <_strtod_l+0x2e8>
 8019356:	427f      	negs	r7, r7
 8019358:	2e00      	cmp	r6, #0
 801935a:	d14f      	bne.n	80193fc <_strtod_l+0x38c>
 801935c:	9904      	ldr	r1, [sp, #16]
 801935e:	4301      	orrs	r1, r0
 8019360:	f47f aec1 	bne.w	80190e6 <_strtod_l+0x76>
 8019364:	2b00      	cmp	r3, #0
 8019366:	f47f aedb 	bne.w	8019120 <_strtod_l+0xb0>
 801936a:	2a69      	cmp	r2, #105	; 0x69
 801936c:	d029      	beq.n	80193c2 <_strtod_l+0x352>
 801936e:	dc26      	bgt.n	80193be <_strtod_l+0x34e>
 8019370:	2a49      	cmp	r2, #73	; 0x49
 8019372:	d026      	beq.n	80193c2 <_strtod_l+0x352>
 8019374:	2a4e      	cmp	r2, #78	; 0x4e
 8019376:	f47f aed3 	bne.w	8019120 <_strtod_l+0xb0>
 801937a:	499b      	ldr	r1, [pc, #620]	; (80195e8 <_strtod_l+0x578>)
 801937c:	a815      	add	r0, sp, #84	; 0x54
 801937e:	f001 fc13 	bl	801aba8 <__match>
 8019382:	2800      	cmp	r0, #0
 8019384:	f43f aecc 	beq.w	8019120 <_strtod_l+0xb0>
 8019388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	2b28      	cmp	r3, #40	; 0x28
 801938e:	d12f      	bne.n	80193f0 <_strtod_l+0x380>
 8019390:	4996      	ldr	r1, [pc, #600]	; (80195ec <_strtod_l+0x57c>)
 8019392:	aa18      	add	r2, sp, #96	; 0x60
 8019394:	a815      	add	r0, sp, #84	; 0x54
 8019396:	f001 fc1b 	bl	801abd0 <__hexnan>
 801939a:	2805      	cmp	r0, #5
 801939c:	d128      	bne.n	80193f0 <_strtod_l+0x380>
 801939e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80193a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80193a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80193a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80193ac:	e69b      	b.n	80190e6 <_strtod_l+0x76>
 80193ae:	9f08      	ldr	r7, [sp, #32]
 80193b0:	210a      	movs	r1, #10
 80193b2:	fb01 2107 	mla	r1, r1, r7, r2
 80193b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80193ba:	9208      	str	r2, [sp, #32]
 80193bc:	e7b5      	b.n	801932a <_strtod_l+0x2ba>
 80193be:	2a6e      	cmp	r2, #110	; 0x6e
 80193c0:	e7d9      	b.n	8019376 <_strtod_l+0x306>
 80193c2:	498b      	ldr	r1, [pc, #556]	; (80195f0 <_strtod_l+0x580>)
 80193c4:	a815      	add	r0, sp, #84	; 0x54
 80193c6:	f001 fbef 	bl	801aba8 <__match>
 80193ca:	2800      	cmp	r0, #0
 80193cc:	f43f aea8 	beq.w	8019120 <_strtod_l+0xb0>
 80193d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80193d2:	4988      	ldr	r1, [pc, #544]	; (80195f4 <_strtod_l+0x584>)
 80193d4:	3b01      	subs	r3, #1
 80193d6:	a815      	add	r0, sp, #84	; 0x54
 80193d8:	9315      	str	r3, [sp, #84]	; 0x54
 80193da:	f001 fbe5 	bl	801aba8 <__match>
 80193de:	b910      	cbnz	r0, 80193e6 <_strtod_l+0x376>
 80193e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80193e2:	3301      	adds	r3, #1
 80193e4:	9315      	str	r3, [sp, #84]	; 0x54
 80193e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8019604 <_strtod_l+0x594>
 80193ea:	f04f 0800 	mov.w	r8, #0
 80193ee:	e67a      	b.n	80190e6 <_strtod_l+0x76>
 80193f0:	4881      	ldr	r0, [pc, #516]	; (80195f8 <_strtod_l+0x588>)
 80193f2:	f001 f8f5 	bl	801a5e0 <nan>
 80193f6:	ec59 8b10 	vmov	r8, r9, d0
 80193fa:	e674      	b.n	80190e6 <_strtod_l+0x76>
 80193fc:	9b05      	ldr	r3, [sp, #20]
 80193fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019400:	1afb      	subs	r3, r7, r3
 8019402:	f1bb 0f00 	cmp.w	fp, #0
 8019406:	bf08      	it	eq
 8019408:	46b3      	moveq	fp, r6
 801940a:	2e10      	cmp	r6, #16
 801940c:	9308      	str	r3, [sp, #32]
 801940e:	4635      	mov	r5, r6
 8019410:	bfa8      	it	ge
 8019412:	2510      	movge	r5, #16
 8019414:	f7e7 f89e 	bl	8000554 <__aeabi_ui2d>
 8019418:	2e09      	cmp	r6, #9
 801941a:	4680      	mov	r8, r0
 801941c:	4689      	mov	r9, r1
 801941e:	dd13      	ble.n	8019448 <_strtod_l+0x3d8>
 8019420:	4b76      	ldr	r3, [pc, #472]	; (80195fc <_strtod_l+0x58c>)
 8019422:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019426:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801942a:	f7e7 f90d 	bl	8000648 <__aeabi_dmul>
 801942e:	4680      	mov	r8, r0
 8019430:	4650      	mov	r0, sl
 8019432:	4689      	mov	r9, r1
 8019434:	f7e7 f88e 	bl	8000554 <__aeabi_ui2d>
 8019438:	4602      	mov	r2, r0
 801943a:	460b      	mov	r3, r1
 801943c:	4640      	mov	r0, r8
 801943e:	4649      	mov	r1, r9
 8019440:	f7e6 ff4c 	bl	80002dc <__adddf3>
 8019444:	4680      	mov	r8, r0
 8019446:	4689      	mov	r9, r1
 8019448:	2e0f      	cmp	r6, #15
 801944a:	dc38      	bgt.n	80194be <_strtod_l+0x44e>
 801944c:	9b08      	ldr	r3, [sp, #32]
 801944e:	2b00      	cmp	r3, #0
 8019450:	f43f ae49 	beq.w	80190e6 <_strtod_l+0x76>
 8019454:	dd24      	ble.n	80194a0 <_strtod_l+0x430>
 8019456:	2b16      	cmp	r3, #22
 8019458:	dc0b      	bgt.n	8019472 <_strtod_l+0x402>
 801945a:	4968      	ldr	r1, [pc, #416]	; (80195fc <_strtod_l+0x58c>)
 801945c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019464:	4642      	mov	r2, r8
 8019466:	464b      	mov	r3, r9
 8019468:	f7e7 f8ee 	bl	8000648 <__aeabi_dmul>
 801946c:	4680      	mov	r8, r0
 801946e:	4689      	mov	r9, r1
 8019470:	e639      	b.n	80190e6 <_strtod_l+0x76>
 8019472:	9a08      	ldr	r2, [sp, #32]
 8019474:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019478:	4293      	cmp	r3, r2
 801947a:	db20      	blt.n	80194be <_strtod_l+0x44e>
 801947c:	4c5f      	ldr	r4, [pc, #380]	; (80195fc <_strtod_l+0x58c>)
 801947e:	f1c6 060f 	rsb	r6, r6, #15
 8019482:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8019486:	4642      	mov	r2, r8
 8019488:	464b      	mov	r3, r9
 801948a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801948e:	f7e7 f8db 	bl	8000648 <__aeabi_dmul>
 8019492:	9b08      	ldr	r3, [sp, #32]
 8019494:	1b9e      	subs	r6, r3, r6
 8019496:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801949a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801949e:	e7e3      	b.n	8019468 <_strtod_l+0x3f8>
 80194a0:	9b08      	ldr	r3, [sp, #32]
 80194a2:	3316      	adds	r3, #22
 80194a4:	db0b      	blt.n	80194be <_strtod_l+0x44e>
 80194a6:	9b05      	ldr	r3, [sp, #20]
 80194a8:	1bdf      	subs	r7, r3, r7
 80194aa:	4b54      	ldr	r3, [pc, #336]	; (80195fc <_strtod_l+0x58c>)
 80194ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80194b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80194b4:	4640      	mov	r0, r8
 80194b6:	4649      	mov	r1, r9
 80194b8:	f7e7 f9f0 	bl	800089c <__aeabi_ddiv>
 80194bc:	e7d6      	b.n	801946c <_strtod_l+0x3fc>
 80194be:	9b08      	ldr	r3, [sp, #32]
 80194c0:	1b75      	subs	r5, r6, r5
 80194c2:	441d      	add	r5, r3
 80194c4:	2d00      	cmp	r5, #0
 80194c6:	dd70      	ble.n	80195aa <_strtod_l+0x53a>
 80194c8:	f015 030f 	ands.w	r3, r5, #15
 80194cc:	d00a      	beq.n	80194e4 <_strtod_l+0x474>
 80194ce:	494b      	ldr	r1, [pc, #300]	; (80195fc <_strtod_l+0x58c>)
 80194d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80194d4:	4642      	mov	r2, r8
 80194d6:	464b      	mov	r3, r9
 80194d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194dc:	f7e7 f8b4 	bl	8000648 <__aeabi_dmul>
 80194e0:	4680      	mov	r8, r0
 80194e2:	4689      	mov	r9, r1
 80194e4:	f035 050f 	bics.w	r5, r5, #15
 80194e8:	d04d      	beq.n	8019586 <_strtod_l+0x516>
 80194ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80194ee:	dd22      	ble.n	8019536 <_strtod_l+0x4c6>
 80194f0:	2500      	movs	r5, #0
 80194f2:	46ab      	mov	fp, r5
 80194f4:	9509      	str	r5, [sp, #36]	; 0x24
 80194f6:	9505      	str	r5, [sp, #20]
 80194f8:	2322      	movs	r3, #34	; 0x22
 80194fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019604 <_strtod_l+0x594>
 80194fe:	6023      	str	r3, [r4, #0]
 8019500:	f04f 0800 	mov.w	r8, #0
 8019504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019506:	2b00      	cmp	r3, #0
 8019508:	f43f aded 	beq.w	80190e6 <_strtod_l+0x76>
 801950c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801950e:	4620      	mov	r0, r4
 8019510:	f7ff f924 	bl	801875c <_Bfree>
 8019514:	9905      	ldr	r1, [sp, #20]
 8019516:	4620      	mov	r0, r4
 8019518:	f7ff f920 	bl	801875c <_Bfree>
 801951c:	4659      	mov	r1, fp
 801951e:	4620      	mov	r0, r4
 8019520:	f7ff f91c 	bl	801875c <_Bfree>
 8019524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019526:	4620      	mov	r0, r4
 8019528:	f7ff f918 	bl	801875c <_Bfree>
 801952c:	4629      	mov	r1, r5
 801952e:	4620      	mov	r0, r4
 8019530:	f7ff f914 	bl	801875c <_Bfree>
 8019534:	e5d7      	b.n	80190e6 <_strtod_l+0x76>
 8019536:	4b32      	ldr	r3, [pc, #200]	; (8019600 <_strtod_l+0x590>)
 8019538:	9304      	str	r3, [sp, #16]
 801953a:	2300      	movs	r3, #0
 801953c:	112d      	asrs	r5, r5, #4
 801953e:	4640      	mov	r0, r8
 8019540:	4649      	mov	r1, r9
 8019542:	469a      	mov	sl, r3
 8019544:	2d01      	cmp	r5, #1
 8019546:	dc21      	bgt.n	801958c <_strtod_l+0x51c>
 8019548:	b10b      	cbz	r3, 801954e <_strtod_l+0x4de>
 801954a:	4680      	mov	r8, r0
 801954c:	4689      	mov	r9, r1
 801954e:	492c      	ldr	r1, [pc, #176]	; (8019600 <_strtod_l+0x590>)
 8019550:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019554:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019558:	4642      	mov	r2, r8
 801955a:	464b      	mov	r3, r9
 801955c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019560:	f7e7 f872 	bl	8000648 <__aeabi_dmul>
 8019564:	4b27      	ldr	r3, [pc, #156]	; (8019604 <_strtod_l+0x594>)
 8019566:	460a      	mov	r2, r1
 8019568:	400b      	ands	r3, r1
 801956a:	4927      	ldr	r1, [pc, #156]	; (8019608 <_strtod_l+0x598>)
 801956c:	428b      	cmp	r3, r1
 801956e:	4680      	mov	r8, r0
 8019570:	d8be      	bhi.n	80194f0 <_strtod_l+0x480>
 8019572:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019576:	428b      	cmp	r3, r1
 8019578:	bf86      	itte	hi
 801957a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801960c <_strtod_l+0x59c>
 801957e:	f04f 38ff 	movhi.w	r8, #4294967295
 8019582:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8019586:	2300      	movs	r3, #0
 8019588:	9304      	str	r3, [sp, #16]
 801958a:	e07b      	b.n	8019684 <_strtod_l+0x614>
 801958c:	07ea      	lsls	r2, r5, #31
 801958e:	d505      	bpl.n	801959c <_strtod_l+0x52c>
 8019590:	9b04      	ldr	r3, [sp, #16]
 8019592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019596:	f7e7 f857 	bl	8000648 <__aeabi_dmul>
 801959a:	2301      	movs	r3, #1
 801959c:	9a04      	ldr	r2, [sp, #16]
 801959e:	3208      	adds	r2, #8
 80195a0:	f10a 0a01 	add.w	sl, sl, #1
 80195a4:	106d      	asrs	r5, r5, #1
 80195a6:	9204      	str	r2, [sp, #16]
 80195a8:	e7cc      	b.n	8019544 <_strtod_l+0x4d4>
 80195aa:	d0ec      	beq.n	8019586 <_strtod_l+0x516>
 80195ac:	426d      	negs	r5, r5
 80195ae:	f015 020f 	ands.w	r2, r5, #15
 80195b2:	d00a      	beq.n	80195ca <_strtod_l+0x55a>
 80195b4:	4b11      	ldr	r3, [pc, #68]	; (80195fc <_strtod_l+0x58c>)
 80195b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80195ba:	4640      	mov	r0, r8
 80195bc:	4649      	mov	r1, r9
 80195be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c2:	f7e7 f96b 	bl	800089c <__aeabi_ddiv>
 80195c6:	4680      	mov	r8, r0
 80195c8:	4689      	mov	r9, r1
 80195ca:	112d      	asrs	r5, r5, #4
 80195cc:	d0db      	beq.n	8019586 <_strtod_l+0x516>
 80195ce:	2d1f      	cmp	r5, #31
 80195d0:	dd1e      	ble.n	8019610 <_strtod_l+0x5a0>
 80195d2:	2500      	movs	r5, #0
 80195d4:	46ab      	mov	fp, r5
 80195d6:	9509      	str	r5, [sp, #36]	; 0x24
 80195d8:	9505      	str	r5, [sp, #20]
 80195da:	2322      	movs	r3, #34	; 0x22
 80195dc:	f04f 0800 	mov.w	r8, #0
 80195e0:	f04f 0900 	mov.w	r9, #0
 80195e4:	6023      	str	r3, [r4, #0]
 80195e6:	e78d      	b.n	8019504 <_strtod_l+0x494>
 80195e8:	0801ca09 	.word	0x0801ca09
 80195ec:	0801cc34 	.word	0x0801cc34
 80195f0:	0801ca01 	.word	0x0801ca01
 80195f4:	0801ca38 	.word	0x0801ca38
 80195f8:	0801cdc5 	.word	0x0801cdc5
 80195fc:	0801cb48 	.word	0x0801cb48
 8019600:	0801cb20 	.word	0x0801cb20
 8019604:	7ff00000 	.word	0x7ff00000
 8019608:	7ca00000 	.word	0x7ca00000
 801960c:	7fefffff 	.word	0x7fefffff
 8019610:	f015 0310 	ands.w	r3, r5, #16
 8019614:	bf18      	it	ne
 8019616:	236a      	movne	r3, #106	; 0x6a
 8019618:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80199bc <_strtod_l+0x94c>
 801961c:	9304      	str	r3, [sp, #16]
 801961e:	4640      	mov	r0, r8
 8019620:	4649      	mov	r1, r9
 8019622:	2300      	movs	r3, #0
 8019624:	07ea      	lsls	r2, r5, #31
 8019626:	d504      	bpl.n	8019632 <_strtod_l+0x5c2>
 8019628:	e9da 2300 	ldrd	r2, r3, [sl]
 801962c:	f7e7 f80c 	bl	8000648 <__aeabi_dmul>
 8019630:	2301      	movs	r3, #1
 8019632:	106d      	asrs	r5, r5, #1
 8019634:	f10a 0a08 	add.w	sl, sl, #8
 8019638:	d1f4      	bne.n	8019624 <_strtod_l+0x5b4>
 801963a:	b10b      	cbz	r3, 8019640 <_strtod_l+0x5d0>
 801963c:	4680      	mov	r8, r0
 801963e:	4689      	mov	r9, r1
 8019640:	9b04      	ldr	r3, [sp, #16]
 8019642:	b1bb      	cbz	r3, 8019674 <_strtod_l+0x604>
 8019644:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8019648:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801964c:	2b00      	cmp	r3, #0
 801964e:	4649      	mov	r1, r9
 8019650:	dd10      	ble.n	8019674 <_strtod_l+0x604>
 8019652:	2b1f      	cmp	r3, #31
 8019654:	f340 811e 	ble.w	8019894 <_strtod_l+0x824>
 8019658:	2b34      	cmp	r3, #52	; 0x34
 801965a:	bfde      	ittt	le
 801965c:	f04f 33ff 	movle.w	r3, #4294967295
 8019660:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8019664:	4093      	lslle	r3, r2
 8019666:	f04f 0800 	mov.w	r8, #0
 801966a:	bfcc      	ite	gt
 801966c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019670:	ea03 0901 	andle.w	r9, r3, r1
 8019674:	2200      	movs	r2, #0
 8019676:	2300      	movs	r3, #0
 8019678:	4640      	mov	r0, r8
 801967a:	4649      	mov	r1, r9
 801967c:	f7e7 fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 8019680:	2800      	cmp	r0, #0
 8019682:	d1a6      	bne.n	80195d2 <_strtod_l+0x562>
 8019684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019686:	9300      	str	r3, [sp, #0]
 8019688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801968a:	4633      	mov	r3, r6
 801968c:	465a      	mov	r2, fp
 801968e:	4620      	mov	r0, r4
 8019690:	f7ff f8cc 	bl	801882c <__s2b>
 8019694:	9009      	str	r0, [sp, #36]	; 0x24
 8019696:	2800      	cmp	r0, #0
 8019698:	f43f af2a 	beq.w	80194f0 <_strtod_l+0x480>
 801969c:	9a08      	ldr	r2, [sp, #32]
 801969e:	9b05      	ldr	r3, [sp, #20]
 80196a0:	2a00      	cmp	r2, #0
 80196a2:	eba3 0307 	sub.w	r3, r3, r7
 80196a6:	bfa8      	it	ge
 80196a8:	2300      	movge	r3, #0
 80196aa:	930c      	str	r3, [sp, #48]	; 0x30
 80196ac:	2500      	movs	r5, #0
 80196ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80196b2:	9312      	str	r3, [sp, #72]	; 0x48
 80196b4:	46ab      	mov	fp, r5
 80196b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196b8:	4620      	mov	r0, r4
 80196ba:	6859      	ldr	r1, [r3, #4]
 80196bc:	f7ff f80e 	bl	80186dc <_Balloc>
 80196c0:	9005      	str	r0, [sp, #20]
 80196c2:	2800      	cmp	r0, #0
 80196c4:	f43f af18 	beq.w	80194f8 <_strtod_l+0x488>
 80196c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ca:	691a      	ldr	r2, [r3, #16]
 80196cc:	3202      	adds	r2, #2
 80196ce:	f103 010c 	add.w	r1, r3, #12
 80196d2:	0092      	lsls	r2, r2, #2
 80196d4:	300c      	adds	r0, #12
 80196d6:	f7fe f872 	bl	80177be <memcpy>
 80196da:	ec49 8b10 	vmov	d0, r8, r9
 80196de:	aa18      	add	r2, sp, #96	; 0x60
 80196e0:	a917      	add	r1, sp, #92	; 0x5c
 80196e2:	4620      	mov	r0, r4
 80196e4:	f7ff fbd6 	bl	8018e94 <__d2b>
 80196e8:	ec49 8b18 	vmov	d8, r8, r9
 80196ec:	9016      	str	r0, [sp, #88]	; 0x58
 80196ee:	2800      	cmp	r0, #0
 80196f0:	f43f af02 	beq.w	80194f8 <_strtod_l+0x488>
 80196f4:	2101      	movs	r1, #1
 80196f6:	4620      	mov	r0, r4
 80196f8:	f7ff f930 	bl	801895c <__i2b>
 80196fc:	4683      	mov	fp, r0
 80196fe:	2800      	cmp	r0, #0
 8019700:	f43f aefa 	beq.w	80194f8 <_strtod_l+0x488>
 8019704:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019706:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019708:	2e00      	cmp	r6, #0
 801970a:	bfab      	itete	ge
 801970c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801970e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8019710:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8019712:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8019716:	bfac      	ite	ge
 8019718:	eb06 0a03 	addge.w	sl, r6, r3
 801971c:	1b9f      	sublt	r7, r3, r6
 801971e:	9b04      	ldr	r3, [sp, #16]
 8019720:	1af6      	subs	r6, r6, r3
 8019722:	4416      	add	r6, r2
 8019724:	4ba0      	ldr	r3, [pc, #640]	; (80199a8 <_strtod_l+0x938>)
 8019726:	3e01      	subs	r6, #1
 8019728:	429e      	cmp	r6, r3
 801972a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801972e:	f280 80c4 	bge.w	80198ba <_strtod_l+0x84a>
 8019732:	1b9b      	subs	r3, r3, r6
 8019734:	2b1f      	cmp	r3, #31
 8019736:	eba2 0203 	sub.w	r2, r2, r3
 801973a:	f04f 0101 	mov.w	r1, #1
 801973e:	f300 80b0 	bgt.w	80198a2 <_strtod_l+0x832>
 8019742:	fa01 f303 	lsl.w	r3, r1, r3
 8019746:	930e      	str	r3, [sp, #56]	; 0x38
 8019748:	2300      	movs	r3, #0
 801974a:	930d      	str	r3, [sp, #52]	; 0x34
 801974c:	eb0a 0602 	add.w	r6, sl, r2
 8019750:	9b04      	ldr	r3, [sp, #16]
 8019752:	45b2      	cmp	sl, r6
 8019754:	4417      	add	r7, r2
 8019756:	441f      	add	r7, r3
 8019758:	4653      	mov	r3, sl
 801975a:	bfa8      	it	ge
 801975c:	4633      	movge	r3, r6
 801975e:	42bb      	cmp	r3, r7
 8019760:	bfa8      	it	ge
 8019762:	463b      	movge	r3, r7
 8019764:	2b00      	cmp	r3, #0
 8019766:	bfc2      	ittt	gt
 8019768:	1af6      	subgt	r6, r6, r3
 801976a:	1aff      	subgt	r7, r7, r3
 801976c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019772:	2b00      	cmp	r3, #0
 8019774:	dd17      	ble.n	80197a6 <_strtod_l+0x736>
 8019776:	4659      	mov	r1, fp
 8019778:	461a      	mov	r2, r3
 801977a:	4620      	mov	r0, r4
 801977c:	f7ff f9ae 	bl	8018adc <__pow5mult>
 8019780:	4683      	mov	fp, r0
 8019782:	2800      	cmp	r0, #0
 8019784:	f43f aeb8 	beq.w	80194f8 <_strtod_l+0x488>
 8019788:	4601      	mov	r1, r0
 801978a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801978c:	4620      	mov	r0, r4
 801978e:	f7ff f8fb 	bl	8018988 <__multiply>
 8019792:	900b      	str	r0, [sp, #44]	; 0x2c
 8019794:	2800      	cmp	r0, #0
 8019796:	f43f aeaf 	beq.w	80194f8 <_strtod_l+0x488>
 801979a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801979c:	4620      	mov	r0, r4
 801979e:	f7fe ffdd 	bl	801875c <_Bfree>
 80197a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197a4:	9316      	str	r3, [sp, #88]	; 0x58
 80197a6:	2e00      	cmp	r6, #0
 80197a8:	f300 808c 	bgt.w	80198c4 <_strtod_l+0x854>
 80197ac:	9b08      	ldr	r3, [sp, #32]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	dd08      	ble.n	80197c4 <_strtod_l+0x754>
 80197b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80197b4:	9905      	ldr	r1, [sp, #20]
 80197b6:	4620      	mov	r0, r4
 80197b8:	f7ff f990 	bl	8018adc <__pow5mult>
 80197bc:	9005      	str	r0, [sp, #20]
 80197be:	2800      	cmp	r0, #0
 80197c0:	f43f ae9a 	beq.w	80194f8 <_strtod_l+0x488>
 80197c4:	2f00      	cmp	r7, #0
 80197c6:	dd08      	ble.n	80197da <_strtod_l+0x76a>
 80197c8:	9905      	ldr	r1, [sp, #20]
 80197ca:	463a      	mov	r2, r7
 80197cc:	4620      	mov	r0, r4
 80197ce:	f7ff f9df 	bl	8018b90 <__lshift>
 80197d2:	9005      	str	r0, [sp, #20]
 80197d4:	2800      	cmp	r0, #0
 80197d6:	f43f ae8f 	beq.w	80194f8 <_strtod_l+0x488>
 80197da:	f1ba 0f00 	cmp.w	sl, #0
 80197de:	dd08      	ble.n	80197f2 <_strtod_l+0x782>
 80197e0:	4659      	mov	r1, fp
 80197e2:	4652      	mov	r2, sl
 80197e4:	4620      	mov	r0, r4
 80197e6:	f7ff f9d3 	bl	8018b90 <__lshift>
 80197ea:	4683      	mov	fp, r0
 80197ec:	2800      	cmp	r0, #0
 80197ee:	f43f ae83 	beq.w	80194f8 <_strtod_l+0x488>
 80197f2:	9a05      	ldr	r2, [sp, #20]
 80197f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80197f6:	4620      	mov	r0, r4
 80197f8:	f7ff fa52 	bl	8018ca0 <__mdiff>
 80197fc:	4605      	mov	r5, r0
 80197fe:	2800      	cmp	r0, #0
 8019800:	f43f ae7a 	beq.w	80194f8 <_strtod_l+0x488>
 8019804:	68c3      	ldr	r3, [r0, #12]
 8019806:	930b      	str	r3, [sp, #44]	; 0x2c
 8019808:	2300      	movs	r3, #0
 801980a:	60c3      	str	r3, [r0, #12]
 801980c:	4659      	mov	r1, fp
 801980e:	f7ff fa2b 	bl	8018c68 <__mcmp>
 8019812:	2800      	cmp	r0, #0
 8019814:	da60      	bge.n	80198d8 <_strtod_l+0x868>
 8019816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019818:	ea53 0308 	orrs.w	r3, r3, r8
 801981c:	f040 8084 	bne.w	8019928 <_strtod_l+0x8b8>
 8019820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019824:	2b00      	cmp	r3, #0
 8019826:	d17f      	bne.n	8019928 <_strtod_l+0x8b8>
 8019828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801982c:	0d1b      	lsrs	r3, r3, #20
 801982e:	051b      	lsls	r3, r3, #20
 8019830:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019834:	d978      	bls.n	8019928 <_strtod_l+0x8b8>
 8019836:	696b      	ldr	r3, [r5, #20]
 8019838:	b913      	cbnz	r3, 8019840 <_strtod_l+0x7d0>
 801983a:	692b      	ldr	r3, [r5, #16]
 801983c:	2b01      	cmp	r3, #1
 801983e:	dd73      	ble.n	8019928 <_strtod_l+0x8b8>
 8019840:	4629      	mov	r1, r5
 8019842:	2201      	movs	r2, #1
 8019844:	4620      	mov	r0, r4
 8019846:	f7ff f9a3 	bl	8018b90 <__lshift>
 801984a:	4659      	mov	r1, fp
 801984c:	4605      	mov	r5, r0
 801984e:	f7ff fa0b 	bl	8018c68 <__mcmp>
 8019852:	2800      	cmp	r0, #0
 8019854:	dd68      	ble.n	8019928 <_strtod_l+0x8b8>
 8019856:	9904      	ldr	r1, [sp, #16]
 8019858:	4a54      	ldr	r2, [pc, #336]	; (80199ac <_strtod_l+0x93c>)
 801985a:	464b      	mov	r3, r9
 801985c:	2900      	cmp	r1, #0
 801985e:	f000 8084 	beq.w	801996a <_strtod_l+0x8fa>
 8019862:	ea02 0109 	and.w	r1, r2, r9
 8019866:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801986a:	dc7e      	bgt.n	801996a <_strtod_l+0x8fa>
 801986c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019870:	f77f aeb3 	ble.w	80195da <_strtod_l+0x56a>
 8019874:	4b4e      	ldr	r3, [pc, #312]	; (80199b0 <_strtod_l+0x940>)
 8019876:	4640      	mov	r0, r8
 8019878:	4649      	mov	r1, r9
 801987a:	2200      	movs	r2, #0
 801987c:	f7e6 fee4 	bl	8000648 <__aeabi_dmul>
 8019880:	4b4a      	ldr	r3, [pc, #296]	; (80199ac <_strtod_l+0x93c>)
 8019882:	400b      	ands	r3, r1
 8019884:	4680      	mov	r8, r0
 8019886:	4689      	mov	r9, r1
 8019888:	2b00      	cmp	r3, #0
 801988a:	f47f ae3f 	bne.w	801950c <_strtod_l+0x49c>
 801988e:	2322      	movs	r3, #34	; 0x22
 8019890:	6023      	str	r3, [r4, #0]
 8019892:	e63b      	b.n	801950c <_strtod_l+0x49c>
 8019894:	f04f 32ff 	mov.w	r2, #4294967295
 8019898:	fa02 f303 	lsl.w	r3, r2, r3
 801989c:	ea03 0808 	and.w	r8, r3, r8
 80198a0:	e6e8      	b.n	8019674 <_strtod_l+0x604>
 80198a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80198a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80198aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80198ae:	36e2      	adds	r6, #226	; 0xe2
 80198b0:	fa01 f306 	lsl.w	r3, r1, r6
 80198b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80198b8:	e748      	b.n	801974c <_strtod_l+0x6dc>
 80198ba:	2100      	movs	r1, #0
 80198bc:	2301      	movs	r3, #1
 80198be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80198c2:	e743      	b.n	801974c <_strtod_l+0x6dc>
 80198c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80198c6:	4632      	mov	r2, r6
 80198c8:	4620      	mov	r0, r4
 80198ca:	f7ff f961 	bl	8018b90 <__lshift>
 80198ce:	9016      	str	r0, [sp, #88]	; 0x58
 80198d0:	2800      	cmp	r0, #0
 80198d2:	f47f af6b 	bne.w	80197ac <_strtod_l+0x73c>
 80198d6:	e60f      	b.n	80194f8 <_strtod_l+0x488>
 80198d8:	46ca      	mov	sl, r9
 80198da:	d171      	bne.n	80199c0 <_strtod_l+0x950>
 80198dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80198de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198e2:	b352      	cbz	r2, 801993a <_strtod_l+0x8ca>
 80198e4:	4a33      	ldr	r2, [pc, #204]	; (80199b4 <_strtod_l+0x944>)
 80198e6:	4293      	cmp	r3, r2
 80198e8:	d12a      	bne.n	8019940 <_strtod_l+0x8d0>
 80198ea:	9b04      	ldr	r3, [sp, #16]
 80198ec:	4641      	mov	r1, r8
 80198ee:	b1fb      	cbz	r3, 8019930 <_strtod_l+0x8c0>
 80198f0:	4b2e      	ldr	r3, [pc, #184]	; (80199ac <_strtod_l+0x93c>)
 80198f2:	ea09 0303 	and.w	r3, r9, r3
 80198f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80198fa:	f04f 32ff 	mov.w	r2, #4294967295
 80198fe:	d81a      	bhi.n	8019936 <_strtod_l+0x8c6>
 8019900:	0d1b      	lsrs	r3, r3, #20
 8019902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019906:	fa02 f303 	lsl.w	r3, r2, r3
 801990a:	4299      	cmp	r1, r3
 801990c:	d118      	bne.n	8019940 <_strtod_l+0x8d0>
 801990e:	4b2a      	ldr	r3, [pc, #168]	; (80199b8 <_strtod_l+0x948>)
 8019910:	459a      	cmp	sl, r3
 8019912:	d102      	bne.n	801991a <_strtod_l+0x8aa>
 8019914:	3101      	adds	r1, #1
 8019916:	f43f adef 	beq.w	80194f8 <_strtod_l+0x488>
 801991a:	4b24      	ldr	r3, [pc, #144]	; (80199ac <_strtod_l+0x93c>)
 801991c:	ea0a 0303 	and.w	r3, sl, r3
 8019920:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019924:	f04f 0800 	mov.w	r8, #0
 8019928:	9b04      	ldr	r3, [sp, #16]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d1a2      	bne.n	8019874 <_strtod_l+0x804>
 801992e:	e5ed      	b.n	801950c <_strtod_l+0x49c>
 8019930:	f04f 33ff 	mov.w	r3, #4294967295
 8019934:	e7e9      	b.n	801990a <_strtod_l+0x89a>
 8019936:	4613      	mov	r3, r2
 8019938:	e7e7      	b.n	801990a <_strtod_l+0x89a>
 801993a:	ea53 0308 	orrs.w	r3, r3, r8
 801993e:	d08a      	beq.n	8019856 <_strtod_l+0x7e6>
 8019940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019942:	b1e3      	cbz	r3, 801997e <_strtod_l+0x90e>
 8019944:	ea13 0f0a 	tst.w	r3, sl
 8019948:	d0ee      	beq.n	8019928 <_strtod_l+0x8b8>
 801994a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801994c:	9a04      	ldr	r2, [sp, #16]
 801994e:	4640      	mov	r0, r8
 8019950:	4649      	mov	r1, r9
 8019952:	b1c3      	cbz	r3, 8019986 <_strtod_l+0x916>
 8019954:	f7ff fb6f 	bl	8019036 <sulp>
 8019958:	4602      	mov	r2, r0
 801995a:	460b      	mov	r3, r1
 801995c:	ec51 0b18 	vmov	r0, r1, d8
 8019960:	f7e6 fcbc 	bl	80002dc <__adddf3>
 8019964:	4680      	mov	r8, r0
 8019966:	4689      	mov	r9, r1
 8019968:	e7de      	b.n	8019928 <_strtod_l+0x8b8>
 801996a:	4013      	ands	r3, r2
 801996c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019970:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019974:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019978:	f04f 38ff 	mov.w	r8, #4294967295
 801997c:	e7d4      	b.n	8019928 <_strtod_l+0x8b8>
 801997e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019980:	ea13 0f08 	tst.w	r3, r8
 8019984:	e7e0      	b.n	8019948 <_strtod_l+0x8d8>
 8019986:	f7ff fb56 	bl	8019036 <sulp>
 801998a:	4602      	mov	r2, r0
 801998c:	460b      	mov	r3, r1
 801998e:	ec51 0b18 	vmov	r0, r1, d8
 8019992:	f7e6 fca1 	bl	80002d8 <__aeabi_dsub>
 8019996:	2200      	movs	r2, #0
 8019998:	2300      	movs	r3, #0
 801999a:	4680      	mov	r8, r0
 801999c:	4689      	mov	r9, r1
 801999e:	f7e7 f8bb 	bl	8000b18 <__aeabi_dcmpeq>
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d0c0      	beq.n	8019928 <_strtod_l+0x8b8>
 80199a6:	e618      	b.n	80195da <_strtod_l+0x56a>
 80199a8:	fffffc02 	.word	0xfffffc02
 80199ac:	7ff00000 	.word	0x7ff00000
 80199b0:	39500000 	.word	0x39500000
 80199b4:	000fffff 	.word	0x000fffff
 80199b8:	7fefffff 	.word	0x7fefffff
 80199bc:	0801cc48 	.word	0x0801cc48
 80199c0:	4659      	mov	r1, fp
 80199c2:	4628      	mov	r0, r5
 80199c4:	f7ff fac0 	bl	8018f48 <__ratio>
 80199c8:	ec57 6b10 	vmov	r6, r7, d0
 80199cc:	ee10 0a10 	vmov	r0, s0
 80199d0:	2200      	movs	r2, #0
 80199d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80199d6:	4639      	mov	r1, r7
 80199d8:	f7e7 f8b2 	bl	8000b40 <__aeabi_dcmple>
 80199dc:	2800      	cmp	r0, #0
 80199de:	d071      	beq.n	8019ac4 <_strtod_l+0xa54>
 80199e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d17c      	bne.n	8019ae0 <_strtod_l+0xa70>
 80199e6:	f1b8 0f00 	cmp.w	r8, #0
 80199ea:	d15a      	bne.n	8019aa2 <_strtod_l+0xa32>
 80199ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d15d      	bne.n	8019ab0 <_strtod_l+0xa40>
 80199f4:	4b90      	ldr	r3, [pc, #576]	; (8019c38 <_strtod_l+0xbc8>)
 80199f6:	2200      	movs	r2, #0
 80199f8:	4630      	mov	r0, r6
 80199fa:	4639      	mov	r1, r7
 80199fc:	f7e7 f896 	bl	8000b2c <__aeabi_dcmplt>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	d15c      	bne.n	8019abe <_strtod_l+0xa4e>
 8019a04:	4630      	mov	r0, r6
 8019a06:	4639      	mov	r1, r7
 8019a08:	4b8c      	ldr	r3, [pc, #560]	; (8019c3c <_strtod_l+0xbcc>)
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	f7e6 fe1c 	bl	8000648 <__aeabi_dmul>
 8019a10:	4606      	mov	r6, r0
 8019a12:	460f      	mov	r7, r1
 8019a14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019a18:	9606      	str	r6, [sp, #24]
 8019a1a:	9307      	str	r3, [sp, #28]
 8019a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019a24:	4b86      	ldr	r3, [pc, #536]	; (8019c40 <_strtod_l+0xbd0>)
 8019a26:	ea0a 0303 	and.w	r3, sl, r3
 8019a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8019a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a2e:	4b85      	ldr	r3, [pc, #532]	; (8019c44 <_strtod_l+0xbd4>)
 8019a30:	429a      	cmp	r2, r3
 8019a32:	f040 8090 	bne.w	8019b56 <_strtod_l+0xae6>
 8019a36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019a3a:	ec49 8b10 	vmov	d0, r8, r9
 8019a3e:	f7ff f9b9 	bl	8018db4 <__ulp>
 8019a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a46:	ec51 0b10 	vmov	r0, r1, d0
 8019a4a:	f7e6 fdfd 	bl	8000648 <__aeabi_dmul>
 8019a4e:	4642      	mov	r2, r8
 8019a50:	464b      	mov	r3, r9
 8019a52:	f7e6 fc43 	bl	80002dc <__adddf3>
 8019a56:	460b      	mov	r3, r1
 8019a58:	4979      	ldr	r1, [pc, #484]	; (8019c40 <_strtod_l+0xbd0>)
 8019a5a:	4a7b      	ldr	r2, [pc, #492]	; (8019c48 <_strtod_l+0xbd8>)
 8019a5c:	4019      	ands	r1, r3
 8019a5e:	4291      	cmp	r1, r2
 8019a60:	4680      	mov	r8, r0
 8019a62:	d944      	bls.n	8019aee <_strtod_l+0xa7e>
 8019a64:	ee18 2a90 	vmov	r2, s17
 8019a68:	4b78      	ldr	r3, [pc, #480]	; (8019c4c <_strtod_l+0xbdc>)
 8019a6a:	429a      	cmp	r2, r3
 8019a6c:	d104      	bne.n	8019a78 <_strtod_l+0xa08>
 8019a6e:	ee18 3a10 	vmov	r3, s16
 8019a72:	3301      	adds	r3, #1
 8019a74:	f43f ad40 	beq.w	80194f8 <_strtod_l+0x488>
 8019a78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019c4c <_strtod_l+0xbdc>
 8019a7c:	f04f 38ff 	mov.w	r8, #4294967295
 8019a80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019a82:	4620      	mov	r0, r4
 8019a84:	f7fe fe6a 	bl	801875c <_Bfree>
 8019a88:	9905      	ldr	r1, [sp, #20]
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	f7fe fe66 	bl	801875c <_Bfree>
 8019a90:	4659      	mov	r1, fp
 8019a92:	4620      	mov	r0, r4
 8019a94:	f7fe fe62 	bl	801875c <_Bfree>
 8019a98:	4629      	mov	r1, r5
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	f7fe fe5e 	bl	801875c <_Bfree>
 8019aa0:	e609      	b.n	80196b6 <_strtod_l+0x646>
 8019aa2:	f1b8 0f01 	cmp.w	r8, #1
 8019aa6:	d103      	bne.n	8019ab0 <_strtod_l+0xa40>
 8019aa8:	f1b9 0f00 	cmp.w	r9, #0
 8019aac:	f43f ad95 	beq.w	80195da <_strtod_l+0x56a>
 8019ab0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019c08 <_strtod_l+0xb98>
 8019ab4:	4f60      	ldr	r7, [pc, #384]	; (8019c38 <_strtod_l+0xbc8>)
 8019ab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019aba:	2600      	movs	r6, #0
 8019abc:	e7ae      	b.n	8019a1c <_strtod_l+0x9ac>
 8019abe:	4f5f      	ldr	r7, [pc, #380]	; (8019c3c <_strtod_l+0xbcc>)
 8019ac0:	2600      	movs	r6, #0
 8019ac2:	e7a7      	b.n	8019a14 <_strtod_l+0x9a4>
 8019ac4:	4b5d      	ldr	r3, [pc, #372]	; (8019c3c <_strtod_l+0xbcc>)
 8019ac6:	4630      	mov	r0, r6
 8019ac8:	4639      	mov	r1, r7
 8019aca:	2200      	movs	r2, #0
 8019acc:	f7e6 fdbc 	bl	8000648 <__aeabi_dmul>
 8019ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019ad2:	4606      	mov	r6, r0
 8019ad4:	460f      	mov	r7, r1
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d09c      	beq.n	8019a14 <_strtod_l+0x9a4>
 8019ada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019ade:	e79d      	b.n	8019a1c <_strtod_l+0x9ac>
 8019ae0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019c10 <_strtod_l+0xba0>
 8019ae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019ae8:	ec57 6b17 	vmov	r6, r7, d7
 8019aec:	e796      	b.n	8019a1c <_strtod_l+0x9ac>
 8019aee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019af2:	9b04      	ldr	r3, [sp, #16]
 8019af4:	46ca      	mov	sl, r9
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d1c2      	bne.n	8019a80 <_strtod_l+0xa10>
 8019afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b00:	0d1b      	lsrs	r3, r3, #20
 8019b02:	051b      	lsls	r3, r3, #20
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d1bb      	bne.n	8019a80 <_strtod_l+0xa10>
 8019b08:	4630      	mov	r0, r6
 8019b0a:	4639      	mov	r1, r7
 8019b0c:	f7e7 f8e4 	bl	8000cd8 <__aeabi_d2lz>
 8019b10:	f7e6 fd6c 	bl	80005ec <__aeabi_l2d>
 8019b14:	4602      	mov	r2, r0
 8019b16:	460b      	mov	r3, r1
 8019b18:	4630      	mov	r0, r6
 8019b1a:	4639      	mov	r1, r7
 8019b1c:	f7e6 fbdc 	bl	80002d8 <__aeabi_dsub>
 8019b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019b22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019b26:	ea43 0308 	orr.w	r3, r3, r8
 8019b2a:	4313      	orrs	r3, r2
 8019b2c:	4606      	mov	r6, r0
 8019b2e:	460f      	mov	r7, r1
 8019b30:	d054      	beq.n	8019bdc <_strtod_l+0xb6c>
 8019b32:	a339      	add	r3, pc, #228	; (adr r3, 8019c18 <_strtod_l+0xba8>)
 8019b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b38:	f7e6 fff8 	bl	8000b2c <__aeabi_dcmplt>
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	f47f ace5 	bne.w	801950c <_strtod_l+0x49c>
 8019b42:	a337      	add	r3, pc, #220	; (adr r3, 8019c20 <_strtod_l+0xbb0>)
 8019b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b48:	4630      	mov	r0, r6
 8019b4a:	4639      	mov	r1, r7
 8019b4c:	f7e7 f80c 	bl	8000b68 <__aeabi_dcmpgt>
 8019b50:	2800      	cmp	r0, #0
 8019b52:	d095      	beq.n	8019a80 <_strtod_l+0xa10>
 8019b54:	e4da      	b.n	801950c <_strtod_l+0x49c>
 8019b56:	9b04      	ldr	r3, [sp, #16]
 8019b58:	b333      	cbz	r3, 8019ba8 <_strtod_l+0xb38>
 8019b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019b60:	d822      	bhi.n	8019ba8 <_strtod_l+0xb38>
 8019b62:	a331      	add	r3, pc, #196	; (adr r3, 8019c28 <_strtod_l+0xbb8>)
 8019b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b68:	4630      	mov	r0, r6
 8019b6a:	4639      	mov	r1, r7
 8019b6c:	f7e6 ffe8 	bl	8000b40 <__aeabi_dcmple>
 8019b70:	b1a0      	cbz	r0, 8019b9c <_strtod_l+0xb2c>
 8019b72:	4639      	mov	r1, r7
 8019b74:	4630      	mov	r0, r6
 8019b76:	f7e7 f83f 	bl	8000bf8 <__aeabi_d2uiz>
 8019b7a:	2801      	cmp	r0, #1
 8019b7c:	bf38      	it	cc
 8019b7e:	2001      	movcc	r0, #1
 8019b80:	f7e6 fce8 	bl	8000554 <__aeabi_ui2d>
 8019b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b86:	4606      	mov	r6, r0
 8019b88:	460f      	mov	r7, r1
 8019b8a:	bb23      	cbnz	r3, 8019bd6 <_strtod_l+0xb66>
 8019b8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b90:	9010      	str	r0, [sp, #64]	; 0x40
 8019b92:	9311      	str	r3, [sp, #68]	; 0x44
 8019b94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019b98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ba0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019ba4:	1a9b      	subs	r3, r3, r2
 8019ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019bac:	eeb0 0a48 	vmov.f32	s0, s16
 8019bb0:	eef0 0a68 	vmov.f32	s1, s17
 8019bb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019bb8:	f7ff f8fc 	bl	8018db4 <__ulp>
 8019bbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019bc0:	ec53 2b10 	vmov	r2, r3, d0
 8019bc4:	f7e6 fd40 	bl	8000648 <__aeabi_dmul>
 8019bc8:	ec53 2b18 	vmov	r2, r3, d8
 8019bcc:	f7e6 fb86 	bl	80002dc <__adddf3>
 8019bd0:	4680      	mov	r8, r0
 8019bd2:	4689      	mov	r9, r1
 8019bd4:	e78d      	b.n	8019af2 <_strtod_l+0xa82>
 8019bd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019bda:	e7db      	b.n	8019b94 <_strtod_l+0xb24>
 8019bdc:	a314      	add	r3, pc, #80	; (adr r3, 8019c30 <_strtod_l+0xbc0>)
 8019bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be2:	f7e6 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 8019be6:	e7b3      	b.n	8019b50 <_strtod_l+0xae0>
 8019be8:	2300      	movs	r3, #0
 8019bea:	930a      	str	r3, [sp, #40]	; 0x28
 8019bec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bf0:	6013      	str	r3, [r2, #0]
 8019bf2:	f7ff ba7c 	b.w	80190ee <_strtod_l+0x7e>
 8019bf6:	2a65      	cmp	r2, #101	; 0x65
 8019bf8:	f43f ab75 	beq.w	80192e6 <_strtod_l+0x276>
 8019bfc:	2a45      	cmp	r2, #69	; 0x45
 8019bfe:	f43f ab72 	beq.w	80192e6 <_strtod_l+0x276>
 8019c02:	2301      	movs	r3, #1
 8019c04:	f7ff bbaa 	b.w	801935c <_strtod_l+0x2ec>
 8019c08:	00000000 	.word	0x00000000
 8019c0c:	bff00000 	.word	0xbff00000
 8019c10:	00000000 	.word	0x00000000
 8019c14:	3ff00000 	.word	0x3ff00000
 8019c18:	94a03595 	.word	0x94a03595
 8019c1c:	3fdfffff 	.word	0x3fdfffff
 8019c20:	35afe535 	.word	0x35afe535
 8019c24:	3fe00000 	.word	0x3fe00000
 8019c28:	ffc00000 	.word	0xffc00000
 8019c2c:	41dfffff 	.word	0x41dfffff
 8019c30:	94a03595 	.word	0x94a03595
 8019c34:	3fcfffff 	.word	0x3fcfffff
 8019c38:	3ff00000 	.word	0x3ff00000
 8019c3c:	3fe00000 	.word	0x3fe00000
 8019c40:	7ff00000 	.word	0x7ff00000
 8019c44:	7fe00000 	.word	0x7fe00000
 8019c48:	7c9fffff 	.word	0x7c9fffff
 8019c4c:	7fefffff 	.word	0x7fefffff

08019c50 <_strtod_r>:
 8019c50:	4b01      	ldr	r3, [pc, #4]	; (8019c58 <_strtod_r+0x8>)
 8019c52:	f7ff ba0d 	b.w	8019070 <_strtod_l>
 8019c56:	bf00      	nop
 8019c58:	20000078 	.word	0x20000078

08019c5c <_strtol_l.constprop.0>:
 8019c5c:	2b01      	cmp	r3, #1
 8019c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c62:	d001      	beq.n	8019c68 <_strtol_l.constprop.0+0xc>
 8019c64:	2b24      	cmp	r3, #36	; 0x24
 8019c66:	d906      	bls.n	8019c76 <_strtol_l.constprop.0+0x1a>
 8019c68:	f7fd fd7c 	bl	8017764 <__errno>
 8019c6c:	2316      	movs	r3, #22
 8019c6e:	6003      	str	r3, [r0, #0]
 8019c70:	2000      	movs	r0, #0
 8019c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019d5c <_strtol_l.constprop.0+0x100>
 8019c7a:	460d      	mov	r5, r1
 8019c7c:	462e      	mov	r6, r5
 8019c7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019c86:	f017 0708 	ands.w	r7, r7, #8
 8019c8a:	d1f7      	bne.n	8019c7c <_strtol_l.constprop.0+0x20>
 8019c8c:	2c2d      	cmp	r4, #45	; 0x2d
 8019c8e:	d132      	bne.n	8019cf6 <_strtol_l.constprop.0+0x9a>
 8019c90:	782c      	ldrb	r4, [r5, #0]
 8019c92:	2701      	movs	r7, #1
 8019c94:	1cb5      	adds	r5, r6, #2
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d05b      	beq.n	8019d52 <_strtol_l.constprop.0+0xf6>
 8019c9a:	2b10      	cmp	r3, #16
 8019c9c:	d109      	bne.n	8019cb2 <_strtol_l.constprop.0+0x56>
 8019c9e:	2c30      	cmp	r4, #48	; 0x30
 8019ca0:	d107      	bne.n	8019cb2 <_strtol_l.constprop.0+0x56>
 8019ca2:	782c      	ldrb	r4, [r5, #0]
 8019ca4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019ca8:	2c58      	cmp	r4, #88	; 0x58
 8019caa:	d14d      	bne.n	8019d48 <_strtol_l.constprop.0+0xec>
 8019cac:	786c      	ldrb	r4, [r5, #1]
 8019cae:	2310      	movs	r3, #16
 8019cb0:	3502      	adds	r5, #2
 8019cb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019cb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8019cba:	f04f 0e00 	mov.w	lr, #0
 8019cbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8019cc2:	4676      	mov	r6, lr
 8019cc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8019cc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019ccc:	f1bc 0f09 	cmp.w	ip, #9
 8019cd0:	d816      	bhi.n	8019d00 <_strtol_l.constprop.0+0xa4>
 8019cd2:	4664      	mov	r4, ip
 8019cd4:	42a3      	cmp	r3, r4
 8019cd6:	dd24      	ble.n	8019d22 <_strtol_l.constprop.0+0xc6>
 8019cd8:	f1be 3fff 	cmp.w	lr, #4294967295
 8019cdc:	d008      	beq.n	8019cf0 <_strtol_l.constprop.0+0x94>
 8019cde:	45b1      	cmp	r9, r6
 8019ce0:	d31c      	bcc.n	8019d1c <_strtol_l.constprop.0+0xc0>
 8019ce2:	d101      	bne.n	8019ce8 <_strtol_l.constprop.0+0x8c>
 8019ce4:	45a2      	cmp	sl, r4
 8019ce6:	db19      	blt.n	8019d1c <_strtol_l.constprop.0+0xc0>
 8019ce8:	fb06 4603 	mla	r6, r6, r3, r4
 8019cec:	f04f 0e01 	mov.w	lr, #1
 8019cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019cf4:	e7e8      	b.n	8019cc8 <_strtol_l.constprop.0+0x6c>
 8019cf6:	2c2b      	cmp	r4, #43	; 0x2b
 8019cf8:	bf04      	itt	eq
 8019cfa:	782c      	ldrbeq	r4, [r5, #0]
 8019cfc:	1cb5      	addeq	r5, r6, #2
 8019cfe:	e7ca      	b.n	8019c96 <_strtol_l.constprop.0+0x3a>
 8019d00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019d04:	f1bc 0f19 	cmp.w	ip, #25
 8019d08:	d801      	bhi.n	8019d0e <_strtol_l.constprop.0+0xb2>
 8019d0a:	3c37      	subs	r4, #55	; 0x37
 8019d0c:	e7e2      	b.n	8019cd4 <_strtol_l.constprop.0+0x78>
 8019d0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019d12:	f1bc 0f19 	cmp.w	ip, #25
 8019d16:	d804      	bhi.n	8019d22 <_strtol_l.constprop.0+0xc6>
 8019d18:	3c57      	subs	r4, #87	; 0x57
 8019d1a:	e7db      	b.n	8019cd4 <_strtol_l.constprop.0+0x78>
 8019d1c:	f04f 3eff 	mov.w	lr, #4294967295
 8019d20:	e7e6      	b.n	8019cf0 <_strtol_l.constprop.0+0x94>
 8019d22:	f1be 3fff 	cmp.w	lr, #4294967295
 8019d26:	d105      	bne.n	8019d34 <_strtol_l.constprop.0+0xd8>
 8019d28:	2322      	movs	r3, #34	; 0x22
 8019d2a:	6003      	str	r3, [r0, #0]
 8019d2c:	4646      	mov	r6, r8
 8019d2e:	b942      	cbnz	r2, 8019d42 <_strtol_l.constprop.0+0xe6>
 8019d30:	4630      	mov	r0, r6
 8019d32:	e79e      	b.n	8019c72 <_strtol_l.constprop.0+0x16>
 8019d34:	b107      	cbz	r7, 8019d38 <_strtol_l.constprop.0+0xdc>
 8019d36:	4276      	negs	r6, r6
 8019d38:	2a00      	cmp	r2, #0
 8019d3a:	d0f9      	beq.n	8019d30 <_strtol_l.constprop.0+0xd4>
 8019d3c:	f1be 0f00 	cmp.w	lr, #0
 8019d40:	d000      	beq.n	8019d44 <_strtol_l.constprop.0+0xe8>
 8019d42:	1e69      	subs	r1, r5, #1
 8019d44:	6011      	str	r1, [r2, #0]
 8019d46:	e7f3      	b.n	8019d30 <_strtol_l.constprop.0+0xd4>
 8019d48:	2430      	movs	r4, #48	; 0x30
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d1b1      	bne.n	8019cb2 <_strtol_l.constprop.0+0x56>
 8019d4e:	2308      	movs	r3, #8
 8019d50:	e7af      	b.n	8019cb2 <_strtol_l.constprop.0+0x56>
 8019d52:	2c30      	cmp	r4, #48	; 0x30
 8019d54:	d0a5      	beq.n	8019ca2 <_strtol_l.constprop.0+0x46>
 8019d56:	230a      	movs	r3, #10
 8019d58:	e7ab      	b.n	8019cb2 <_strtol_l.constprop.0+0x56>
 8019d5a:	bf00      	nop
 8019d5c:	0801cc71 	.word	0x0801cc71

08019d60 <_strtol_r>:
 8019d60:	f7ff bf7c 	b.w	8019c5c <_strtol_l.constprop.0>

08019d64 <__ssputs_r>:
 8019d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d68:	688e      	ldr	r6, [r1, #8]
 8019d6a:	461f      	mov	r7, r3
 8019d6c:	42be      	cmp	r6, r7
 8019d6e:	680b      	ldr	r3, [r1, #0]
 8019d70:	4682      	mov	sl, r0
 8019d72:	460c      	mov	r4, r1
 8019d74:	4690      	mov	r8, r2
 8019d76:	d82c      	bhi.n	8019dd2 <__ssputs_r+0x6e>
 8019d78:	898a      	ldrh	r2, [r1, #12]
 8019d7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d7e:	d026      	beq.n	8019dce <__ssputs_r+0x6a>
 8019d80:	6965      	ldr	r5, [r4, #20]
 8019d82:	6909      	ldr	r1, [r1, #16]
 8019d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d88:	eba3 0901 	sub.w	r9, r3, r1
 8019d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d90:	1c7b      	adds	r3, r7, #1
 8019d92:	444b      	add	r3, r9
 8019d94:	106d      	asrs	r5, r5, #1
 8019d96:	429d      	cmp	r5, r3
 8019d98:	bf38      	it	cc
 8019d9a:	461d      	movcc	r5, r3
 8019d9c:	0553      	lsls	r3, r2, #21
 8019d9e:	d527      	bpl.n	8019df0 <__ssputs_r+0x8c>
 8019da0:	4629      	mov	r1, r5
 8019da2:	f7fe fc0f 	bl	80185c4 <_malloc_r>
 8019da6:	4606      	mov	r6, r0
 8019da8:	b360      	cbz	r0, 8019e04 <__ssputs_r+0xa0>
 8019daa:	6921      	ldr	r1, [r4, #16]
 8019dac:	464a      	mov	r2, r9
 8019dae:	f7fd fd06 	bl	80177be <memcpy>
 8019db2:	89a3      	ldrh	r3, [r4, #12]
 8019db4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dbc:	81a3      	strh	r3, [r4, #12]
 8019dbe:	6126      	str	r6, [r4, #16]
 8019dc0:	6165      	str	r5, [r4, #20]
 8019dc2:	444e      	add	r6, r9
 8019dc4:	eba5 0509 	sub.w	r5, r5, r9
 8019dc8:	6026      	str	r6, [r4, #0]
 8019dca:	60a5      	str	r5, [r4, #8]
 8019dcc:	463e      	mov	r6, r7
 8019dce:	42be      	cmp	r6, r7
 8019dd0:	d900      	bls.n	8019dd4 <__ssputs_r+0x70>
 8019dd2:	463e      	mov	r6, r7
 8019dd4:	6820      	ldr	r0, [r4, #0]
 8019dd6:	4632      	mov	r2, r6
 8019dd8:	4641      	mov	r1, r8
 8019dda:	f000 fba3 	bl	801a524 <memmove>
 8019dde:	68a3      	ldr	r3, [r4, #8]
 8019de0:	1b9b      	subs	r3, r3, r6
 8019de2:	60a3      	str	r3, [r4, #8]
 8019de4:	6823      	ldr	r3, [r4, #0]
 8019de6:	4433      	add	r3, r6
 8019de8:	6023      	str	r3, [r4, #0]
 8019dea:	2000      	movs	r0, #0
 8019dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019df0:	462a      	mov	r2, r5
 8019df2:	f000 ff9a 	bl	801ad2a <_realloc_r>
 8019df6:	4606      	mov	r6, r0
 8019df8:	2800      	cmp	r0, #0
 8019dfa:	d1e0      	bne.n	8019dbe <__ssputs_r+0x5a>
 8019dfc:	6921      	ldr	r1, [r4, #16]
 8019dfe:	4650      	mov	r0, sl
 8019e00:	f7fe fb6c 	bl	80184dc <_free_r>
 8019e04:	230c      	movs	r3, #12
 8019e06:	f8ca 3000 	str.w	r3, [sl]
 8019e0a:	89a3      	ldrh	r3, [r4, #12]
 8019e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e10:	81a3      	strh	r3, [r4, #12]
 8019e12:	f04f 30ff 	mov.w	r0, #4294967295
 8019e16:	e7e9      	b.n	8019dec <__ssputs_r+0x88>

08019e18 <_svfiprintf_r>:
 8019e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	4698      	mov	r8, r3
 8019e1e:	898b      	ldrh	r3, [r1, #12]
 8019e20:	061b      	lsls	r3, r3, #24
 8019e22:	b09d      	sub	sp, #116	; 0x74
 8019e24:	4607      	mov	r7, r0
 8019e26:	460d      	mov	r5, r1
 8019e28:	4614      	mov	r4, r2
 8019e2a:	d50e      	bpl.n	8019e4a <_svfiprintf_r+0x32>
 8019e2c:	690b      	ldr	r3, [r1, #16]
 8019e2e:	b963      	cbnz	r3, 8019e4a <_svfiprintf_r+0x32>
 8019e30:	2140      	movs	r1, #64	; 0x40
 8019e32:	f7fe fbc7 	bl	80185c4 <_malloc_r>
 8019e36:	6028      	str	r0, [r5, #0]
 8019e38:	6128      	str	r0, [r5, #16]
 8019e3a:	b920      	cbnz	r0, 8019e46 <_svfiprintf_r+0x2e>
 8019e3c:	230c      	movs	r3, #12
 8019e3e:	603b      	str	r3, [r7, #0]
 8019e40:	f04f 30ff 	mov.w	r0, #4294967295
 8019e44:	e0d0      	b.n	8019fe8 <_svfiprintf_r+0x1d0>
 8019e46:	2340      	movs	r3, #64	; 0x40
 8019e48:	616b      	str	r3, [r5, #20]
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019e4e:	2320      	movs	r3, #32
 8019e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e58:	2330      	movs	r3, #48	; 0x30
 8019e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a000 <_svfiprintf_r+0x1e8>
 8019e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e62:	f04f 0901 	mov.w	r9, #1
 8019e66:	4623      	mov	r3, r4
 8019e68:	469a      	mov	sl, r3
 8019e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e6e:	b10a      	cbz	r2, 8019e74 <_svfiprintf_r+0x5c>
 8019e70:	2a25      	cmp	r2, #37	; 0x25
 8019e72:	d1f9      	bne.n	8019e68 <_svfiprintf_r+0x50>
 8019e74:	ebba 0b04 	subs.w	fp, sl, r4
 8019e78:	d00b      	beq.n	8019e92 <_svfiprintf_r+0x7a>
 8019e7a:	465b      	mov	r3, fp
 8019e7c:	4622      	mov	r2, r4
 8019e7e:	4629      	mov	r1, r5
 8019e80:	4638      	mov	r0, r7
 8019e82:	f7ff ff6f 	bl	8019d64 <__ssputs_r>
 8019e86:	3001      	adds	r0, #1
 8019e88:	f000 80a9 	beq.w	8019fde <_svfiprintf_r+0x1c6>
 8019e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e8e:	445a      	add	r2, fp
 8019e90:	9209      	str	r2, [sp, #36]	; 0x24
 8019e92:	f89a 3000 	ldrb.w	r3, [sl]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	f000 80a1 	beq.w	8019fde <_svfiprintf_r+0x1c6>
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ea6:	f10a 0a01 	add.w	sl, sl, #1
 8019eaa:	9304      	str	r3, [sp, #16]
 8019eac:	9307      	str	r3, [sp, #28]
 8019eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8019eb4:	4654      	mov	r4, sl
 8019eb6:	2205      	movs	r2, #5
 8019eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ebc:	4850      	ldr	r0, [pc, #320]	; (801a000 <_svfiprintf_r+0x1e8>)
 8019ebe:	f7e6 f9af 	bl	8000220 <memchr>
 8019ec2:	9a04      	ldr	r2, [sp, #16]
 8019ec4:	b9d8      	cbnz	r0, 8019efe <_svfiprintf_r+0xe6>
 8019ec6:	06d0      	lsls	r0, r2, #27
 8019ec8:	bf44      	itt	mi
 8019eca:	2320      	movmi	r3, #32
 8019ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ed0:	0711      	lsls	r1, r2, #28
 8019ed2:	bf44      	itt	mi
 8019ed4:	232b      	movmi	r3, #43	; 0x2b
 8019ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019eda:	f89a 3000 	ldrb.w	r3, [sl]
 8019ede:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee0:	d015      	beq.n	8019f0e <_svfiprintf_r+0xf6>
 8019ee2:	9a07      	ldr	r2, [sp, #28]
 8019ee4:	4654      	mov	r4, sl
 8019ee6:	2000      	movs	r0, #0
 8019ee8:	f04f 0c0a 	mov.w	ip, #10
 8019eec:	4621      	mov	r1, r4
 8019eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ef2:	3b30      	subs	r3, #48	; 0x30
 8019ef4:	2b09      	cmp	r3, #9
 8019ef6:	d94d      	bls.n	8019f94 <_svfiprintf_r+0x17c>
 8019ef8:	b1b0      	cbz	r0, 8019f28 <_svfiprintf_r+0x110>
 8019efa:	9207      	str	r2, [sp, #28]
 8019efc:	e014      	b.n	8019f28 <_svfiprintf_r+0x110>
 8019efe:	eba0 0308 	sub.w	r3, r0, r8
 8019f02:	fa09 f303 	lsl.w	r3, r9, r3
 8019f06:	4313      	orrs	r3, r2
 8019f08:	9304      	str	r3, [sp, #16]
 8019f0a:	46a2      	mov	sl, r4
 8019f0c:	e7d2      	b.n	8019eb4 <_svfiprintf_r+0x9c>
 8019f0e:	9b03      	ldr	r3, [sp, #12]
 8019f10:	1d19      	adds	r1, r3, #4
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	9103      	str	r1, [sp, #12]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	bfbb      	ittet	lt
 8019f1a:	425b      	neglt	r3, r3
 8019f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8019f20:	9307      	strge	r3, [sp, #28]
 8019f22:	9307      	strlt	r3, [sp, #28]
 8019f24:	bfb8      	it	lt
 8019f26:	9204      	strlt	r2, [sp, #16]
 8019f28:	7823      	ldrb	r3, [r4, #0]
 8019f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8019f2c:	d10c      	bne.n	8019f48 <_svfiprintf_r+0x130>
 8019f2e:	7863      	ldrb	r3, [r4, #1]
 8019f30:	2b2a      	cmp	r3, #42	; 0x2a
 8019f32:	d134      	bne.n	8019f9e <_svfiprintf_r+0x186>
 8019f34:	9b03      	ldr	r3, [sp, #12]
 8019f36:	1d1a      	adds	r2, r3, #4
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	9203      	str	r2, [sp, #12]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	bfb8      	it	lt
 8019f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f44:	3402      	adds	r4, #2
 8019f46:	9305      	str	r3, [sp, #20]
 8019f48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a010 <_svfiprintf_r+0x1f8>
 8019f4c:	7821      	ldrb	r1, [r4, #0]
 8019f4e:	2203      	movs	r2, #3
 8019f50:	4650      	mov	r0, sl
 8019f52:	f7e6 f965 	bl	8000220 <memchr>
 8019f56:	b138      	cbz	r0, 8019f68 <_svfiprintf_r+0x150>
 8019f58:	9b04      	ldr	r3, [sp, #16]
 8019f5a:	eba0 000a 	sub.w	r0, r0, sl
 8019f5e:	2240      	movs	r2, #64	; 0x40
 8019f60:	4082      	lsls	r2, r0
 8019f62:	4313      	orrs	r3, r2
 8019f64:	3401      	adds	r4, #1
 8019f66:	9304      	str	r3, [sp, #16]
 8019f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f6c:	4825      	ldr	r0, [pc, #148]	; (801a004 <_svfiprintf_r+0x1ec>)
 8019f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f72:	2206      	movs	r2, #6
 8019f74:	f7e6 f954 	bl	8000220 <memchr>
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	d038      	beq.n	8019fee <_svfiprintf_r+0x1d6>
 8019f7c:	4b22      	ldr	r3, [pc, #136]	; (801a008 <_svfiprintf_r+0x1f0>)
 8019f7e:	bb1b      	cbnz	r3, 8019fc8 <_svfiprintf_r+0x1b0>
 8019f80:	9b03      	ldr	r3, [sp, #12]
 8019f82:	3307      	adds	r3, #7
 8019f84:	f023 0307 	bic.w	r3, r3, #7
 8019f88:	3308      	adds	r3, #8
 8019f8a:	9303      	str	r3, [sp, #12]
 8019f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f8e:	4433      	add	r3, r6
 8019f90:	9309      	str	r3, [sp, #36]	; 0x24
 8019f92:	e768      	b.n	8019e66 <_svfiprintf_r+0x4e>
 8019f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f98:	460c      	mov	r4, r1
 8019f9a:	2001      	movs	r0, #1
 8019f9c:	e7a6      	b.n	8019eec <_svfiprintf_r+0xd4>
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	3401      	adds	r4, #1
 8019fa2:	9305      	str	r3, [sp, #20]
 8019fa4:	4619      	mov	r1, r3
 8019fa6:	f04f 0c0a 	mov.w	ip, #10
 8019faa:	4620      	mov	r0, r4
 8019fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fb0:	3a30      	subs	r2, #48	; 0x30
 8019fb2:	2a09      	cmp	r2, #9
 8019fb4:	d903      	bls.n	8019fbe <_svfiprintf_r+0x1a6>
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d0c6      	beq.n	8019f48 <_svfiprintf_r+0x130>
 8019fba:	9105      	str	r1, [sp, #20]
 8019fbc:	e7c4      	b.n	8019f48 <_svfiprintf_r+0x130>
 8019fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	2301      	movs	r3, #1
 8019fc6:	e7f0      	b.n	8019faa <_svfiprintf_r+0x192>
 8019fc8:	ab03      	add	r3, sp, #12
 8019fca:	9300      	str	r3, [sp, #0]
 8019fcc:	462a      	mov	r2, r5
 8019fce:	4b0f      	ldr	r3, [pc, #60]	; (801a00c <_svfiprintf_r+0x1f4>)
 8019fd0:	a904      	add	r1, sp, #16
 8019fd2:	4638      	mov	r0, r7
 8019fd4:	f7fc fab8 	bl	8016548 <_printf_float>
 8019fd8:	1c42      	adds	r2, r0, #1
 8019fda:	4606      	mov	r6, r0
 8019fdc:	d1d6      	bne.n	8019f8c <_svfiprintf_r+0x174>
 8019fde:	89ab      	ldrh	r3, [r5, #12]
 8019fe0:	065b      	lsls	r3, r3, #25
 8019fe2:	f53f af2d 	bmi.w	8019e40 <_svfiprintf_r+0x28>
 8019fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fe8:	b01d      	add	sp, #116	; 0x74
 8019fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fee:	ab03      	add	r3, sp, #12
 8019ff0:	9300      	str	r3, [sp, #0]
 8019ff2:	462a      	mov	r2, r5
 8019ff4:	4b05      	ldr	r3, [pc, #20]	; (801a00c <_svfiprintf_r+0x1f4>)
 8019ff6:	a904      	add	r1, sp, #16
 8019ff8:	4638      	mov	r0, r7
 8019ffa:	f7fc fd49 	bl	8016a90 <_printf_i>
 8019ffe:	e7eb      	b.n	8019fd8 <_svfiprintf_r+0x1c0>
 801a000:	0801cd71 	.word	0x0801cd71
 801a004:	0801cd7b 	.word	0x0801cd7b
 801a008:	08016549 	.word	0x08016549
 801a00c:	08019d65 	.word	0x08019d65
 801a010:	0801cd77 	.word	0x0801cd77

0801a014 <__sfputc_r>:
 801a014:	6893      	ldr	r3, [r2, #8]
 801a016:	3b01      	subs	r3, #1
 801a018:	2b00      	cmp	r3, #0
 801a01a:	b410      	push	{r4}
 801a01c:	6093      	str	r3, [r2, #8]
 801a01e:	da08      	bge.n	801a032 <__sfputc_r+0x1e>
 801a020:	6994      	ldr	r4, [r2, #24]
 801a022:	42a3      	cmp	r3, r4
 801a024:	db01      	blt.n	801a02a <__sfputc_r+0x16>
 801a026:	290a      	cmp	r1, #10
 801a028:	d103      	bne.n	801a032 <__sfputc_r+0x1e>
 801a02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a02e:	f7fd bab2 	b.w	8017596 <__swbuf_r>
 801a032:	6813      	ldr	r3, [r2, #0]
 801a034:	1c58      	adds	r0, r3, #1
 801a036:	6010      	str	r0, [r2, #0]
 801a038:	7019      	strb	r1, [r3, #0]
 801a03a:	4608      	mov	r0, r1
 801a03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a040:	4770      	bx	lr

0801a042 <__sfputs_r>:
 801a042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a044:	4606      	mov	r6, r0
 801a046:	460f      	mov	r7, r1
 801a048:	4614      	mov	r4, r2
 801a04a:	18d5      	adds	r5, r2, r3
 801a04c:	42ac      	cmp	r4, r5
 801a04e:	d101      	bne.n	801a054 <__sfputs_r+0x12>
 801a050:	2000      	movs	r0, #0
 801a052:	e007      	b.n	801a064 <__sfputs_r+0x22>
 801a054:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a058:	463a      	mov	r2, r7
 801a05a:	4630      	mov	r0, r6
 801a05c:	f7ff ffda 	bl	801a014 <__sfputc_r>
 801a060:	1c43      	adds	r3, r0, #1
 801a062:	d1f3      	bne.n	801a04c <__sfputs_r+0xa>
 801a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a068 <_vfiprintf_r>:
 801a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a06c:	460d      	mov	r5, r1
 801a06e:	b09d      	sub	sp, #116	; 0x74
 801a070:	4614      	mov	r4, r2
 801a072:	4698      	mov	r8, r3
 801a074:	4606      	mov	r6, r0
 801a076:	b118      	cbz	r0, 801a080 <_vfiprintf_r+0x18>
 801a078:	6a03      	ldr	r3, [r0, #32]
 801a07a:	b90b      	cbnz	r3, 801a080 <_vfiprintf_r+0x18>
 801a07c:	f7fd f8c6 	bl	801720c <__sinit>
 801a080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a082:	07d9      	lsls	r1, r3, #31
 801a084:	d405      	bmi.n	801a092 <_vfiprintf_r+0x2a>
 801a086:	89ab      	ldrh	r3, [r5, #12]
 801a088:	059a      	lsls	r2, r3, #22
 801a08a:	d402      	bmi.n	801a092 <_vfiprintf_r+0x2a>
 801a08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a08e:	f7fd fb94 	bl	80177ba <__retarget_lock_acquire_recursive>
 801a092:	89ab      	ldrh	r3, [r5, #12]
 801a094:	071b      	lsls	r3, r3, #28
 801a096:	d501      	bpl.n	801a09c <_vfiprintf_r+0x34>
 801a098:	692b      	ldr	r3, [r5, #16]
 801a09a:	b99b      	cbnz	r3, 801a0c4 <_vfiprintf_r+0x5c>
 801a09c:	4629      	mov	r1, r5
 801a09e:	4630      	mov	r0, r6
 801a0a0:	f7fd fab6 	bl	8017610 <__swsetup_r>
 801a0a4:	b170      	cbz	r0, 801a0c4 <_vfiprintf_r+0x5c>
 801a0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0a8:	07dc      	lsls	r4, r3, #31
 801a0aa:	d504      	bpl.n	801a0b6 <_vfiprintf_r+0x4e>
 801a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a0b0:	b01d      	add	sp, #116	; 0x74
 801a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0b6:	89ab      	ldrh	r3, [r5, #12]
 801a0b8:	0598      	lsls	r0, r3, #22
 801a0ba:	d4f7      	bmi.n	801a0ac <_vfiprintf_r+0x44>
 801a0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0be:	f7fd fb7d 	bl	80177bc <__retarget_lock_release_recursive>
 801a0c2:	e7f3      	b.n	801a0ac <_vfiprintf_r+0x44>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a0c8:	2320      	movs	r3, #32
 801a0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0d2:	2330      	movs	r3, #48	; 0x30
 801a0d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a288 <_vfiprintf_r+0x220>
 801a0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0dc:	f04f 0901 	mov.w	r9, #1
 801a0e0:	4623      	mov	r3, r4
 801a0e2:	469a      	mov	sl, r3
 801a0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0e8:	b10a      	cbz	r2, 801a0ee <_vfiprintf_r+0x86>
 801a0ea:	2a25      	cmp	r2, #37	; 0x25
 801a0ec:	d1f9      	bne.n	801a0e2 <_vfiprintf_r+0x7a>
 801a0ee:	ebba 0b04 	subs.w	fp, sl, r4
 801a0f2:	d00b      	beq.n	801a10c <_vfiprintf_r+0xa4>
 801a0f4:	465b      	mov	r3, fp
 801a0f6:	4622      	mov	r2, r4
 801a0f8:	4629      	mov	r1, r5
 801a0fa:	4630      	mov	r0, r6
 801a0fc:	f7ff ffa1 	bl	801a042 <__sfputs_r>
 801a100:	3001      	adds	r0, #1
 801a102:	f000 80a9 	beq.w	801a258 <_vfiprintf_r+0x1f0>
 801a106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a108:	445a      	add	r2, fp
 801a10a:	9209      	str	r2, [sp, #36]	; 0x24
 801a10c:	f89a 3000 	ldrb.w	r3, [sl]
 801a110:	2b00      	cmp	r3, #0
 801a112:	f000 80a1 	beq.w	801a258 <_vfiprintf_r+0x1f0>
 801a116:	2300      	movs	r3, #0
 801a118:	f04f 32ff 	mov.w	r2, #4294967295
 801a11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a120:	f10a 0a01 	add.w	sl, sl, #1
 801a124:	9304      	str	r3, [sp, #16]
 801a126:	9307      	str	r3, [sp, #28]
 801a128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a12c:	931a      	str	r3, [sp, #104]	; 0x68
 801a12e:	4654      	mov	r4, sl
 801a130:	2205      	movs	r2, #5
 801a132:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a136:	4854      	ldr	r0, [pc, #336]	; (801a288 <_vfiprintf_r+0x220>)
 801a138:	f7e6 f872 	bl	8000220 <memchr>
 801a13c:	9a04      	ldr	r2, [sp, #16]
 801a13e:	b9d8      	cbnz	r0, 801a178 <_vfiprintf_r+0x110>
 801a140:	06d1      	lsls	r1, r2, #27
 801a142:	bf44      	itt	mi
 801a144:	2320      	movmi	r3, #32
 801a146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a14a:	0713      	lsls	r3, r2, #28
 801a14c:	bf44      	itt	mi
 801a14e:	232b      	movmi	r3, #43	; 0x2b
 801a150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a154:	f89a 3000 	ldrb.w	r3, [sl]
 801a158:	2b2a      	cmp	r3, #42	; 0x2a
 801a15a:	d015      	beq.n	801a188 <_vfiprintf_r+0x120>
 801a15c:	9a07      	ldr	r2, [sp, #28]
 801a15e:	4654      	mov	r4, sl
 801a160:	2000      	movs	r0, #0
 801a162:	f04f 0c0a 	mov.w	ip, #10
 801a166:	4621      	mov	r1, r4
 801a168:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a16c:	3b30      	subs	r3, #48	; 0x30
 801a16e:	2b09      	cmp	r3, #9
 801a170:	d94d      	bls.n	801a20e <_vfiprintf_r+0x1a6>
 801a172:	b1b0      	cbz	r0, 801a1a2 <_vfiprintf_r+0x13a>
 801a174:	9207      	str	r2, [sp, #28]
 801a176:	e014      	b.n	801a1a2 <_vfiprintf_r+0x13a>
 801a178:	eba0 0308 	sub.w	r3, r0, r8
 801a17c:	fa09 f303 	lsl.w	r3, r9, r3
 801a180:	4313      	orrs	r3, r2
 801a182:	9304      	str	r3, [sp, #16]
 801a184:	46a2      	mov	sl, r4
 801a186:	e7d2      	b.n	801a12e <_vfiprintf_r+0xc6>
 801a188:	9b03      	ldr	r3, [sp, #12]
 801a18a:	1d19      	adds	r1, r3, #4
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	9103      	str	r1, [sp, #12]
 801a190:	2b00      	cmp	r3, #0
 801a192:	bfbb      	ittet	lt
 801a194:	425b      	neglt	r3, r3
 801a196:	f042 0202 	orrlt.w	r2, r2, #2
 801a19a:	9307      	strge	r3, [sp, #28]
 801a19c:	9307      	strlt	r3, [sp, #28]
 801a19e:	bfb8      	it	lt
 801a1a0:	9204      	strlt	r2, [sp, #16]
 801a1a2:	7823      	ldrb	r3, [r4, #0]
 801a1a4:	2b2e      	cmp	r3, #46	; 0x2e
 801a1a6:	d10c      	bne.n	801a1c2 <_vfiprintf_r+0x15a>
 801a1a8:	7863      	ldrb	r3, [r4, #1]
 801a1aa:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ac:	d134      	bne.n	801a218 <_vfiprintf_r+0x1b0>
 801a1ae:	9b03      	ldr	r3, [sp, #12]
 801a1b0:	1d1a      	adds	r2, r3, #4
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	9203      	str	r2, [sp, #12]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	bfb8      	it	lt
 801a1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1be:	3402      	adds	r4, #2
 801a1c0:	9305      	str	r3, [sp, #20]
 801a1c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a298 <_vfiprintf_r+0x230>
 801a1c6:	7821      	ldrb	r1, [r4, #0]
 801a1c8:	2203      	movs	r2, #3
 801a1ca:	4650      	mov	r0, sl
 801a1cc:	f7e6 f828 	bl	8000220 <memchr>
 801a1d0:	b138      	cbz	r0, 801a1e2 <_vfiprintf_r+0x17a>
 801a1d2:	9b04      	ldr	r3, [sp, #16]
 801a1d4:	eba0 000a 	sub.w	r0, r0, sl
 801a1d8:	2240      	movs	r2, #64	; 0x40
 801a1da:	4082      	lsls	r2, r0
 801a1dc:	4313      	orrs	r3, r2
 801a1de:	3401      	adds	r4, #1
 801a1e0:	9304      	str	r3, [sp, #16]
 801a1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1e6:	4829      	ldr	r0, [pc, #164]	; (801a28c <_vfiprintf_r+0x224>)
 801a1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1ec:	2206      	movs	r2, #6
 801a1ee:	f7e6 f817 	bl	8000220 <memchr>
 801a1f2:	2800      	cmp	r0, #0
 801a1f4:	d03f      	beq.n	801a276 <_vfiprintf_r+0x20e>
 801a1f6:	4b26      	ldr	r3, [pc, #152]	; (801a290 <_vfiprintf_r+0x228>)
 801a1f8:	bb1b      	cbnz	r3, 801a242 <_vfiprintf_r+0x1da>
 801a1fa:	9b03      	ldr	r3, [sp, #12]
 801a1fc:	3307      	adds	r3, #7
 801a1fe:	f023 0307 	bic.w	r3, r3, #7
 801a202:	3308      	adds	r3, #8
 801a204:	9303      	str	r3, [sp, #12]
 801a206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a208:	443b      	add	r3, r7
 801a20a:	9309      	str	r3, [sp, #36]	; 0x24
 801a20c:	e768      	b.n	801a0e0 <_vfiprintf_r+0x78>
 801a20e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a212:	460c      	mov	r4, r1
 801a214:	2001      	movs	r0, #1
 801a216:	e7a6      	b.n	801a166 <_vfiprintf_r+0xfe>
 801a218:	2300      	movs	r3, #0
 801a21a:	3401      	adds	r4, #1
 801a21c:	9305      	str	r3, [sp, #20]
 801a21e:	4619      	mov	r1, r3
 801a220:	f04f 0c0a 	mov.w	ip, #10
 801a224:	4620      	mov	r0, r4
 801a226:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a22a:	3a30      	subs	r2, #48	; 0x30
 801a22c:	2a09      	cmp	r2, #9
 801a22e:	d903      	bls.n	801a238 <_vfiprintf_r+0x1d0>
 801a230:	2b00      	cmp	r3, #0
 801a232:	d0c6      	beq.n	801a1c2 <_vfiprintf_r+0x15a>
 801a234:	9105      	str	r1, [sp, #20]
 801a236:	e7c4      	b.n	801a1c2 <_vfiprintf_r+0x15a>
 801a238:	fb0c 2101 	mla	r1, ip, r1, r2
 801a23c:	4604      	mov	r4, r0
 801a23e:	2301      	movs	r3, #1
 801a240:	e7f0      	b.n	801a224 <_vfiprintf_r+0x1bc>
 801a242:	ab03      	add	r3, sp, #12
 801a244:	9300      	str	r3, [sp, #0]
 801a246:	462a      	mov	r2, r5
 801a248:	4b12      	ldr	r3, [pc, #72]	; (801a294 <_vfiprintf_r+0x22c>)
 801a24a:	a904      	add	r1, sp, #16
 801a24c:	4630      	mov	r0, r6
 801a24e:	f7fc f97b 	bl	8016548 <_printf_float>
 801a252:	4607      	mov	r7, r0
 801a254:	1c78      	adds	r0, r7, #1
 801a256:	d1d6      	bne.n	801a206 <_vfiprintf_r+0x19e>
 801a258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a25a:	07d9      	lsls	r1, r3, #31
 801a25c:	d405      	bmi.n	801a26a <_vfiprintf_r+0x202>
 801a25e:	89ab      	ldrh	r3, [r5, #12]
 801a260:	059a      	lsls	r2, r3, #22
 801a262:	d402      	bmi.n	801a26a <_vfiprintf_r+0x202>
 801a264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a266:	f7fd faa9 	bl	80177bc <__retarget_lock_release_recursive>
 801a26a:	89ab      	ldrh	r3, [r5, #12]
 801a26c:	065b      	lsls	r3, r3, #25
 801a26e:	f53f af1d 	bmi.w	801a0ac <_vfiprintf_r+0x44>
 801a272:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a274:	e71c      	b.n	801a0b0 <_vfiprintf_r+0x48>
 801a276:	ab03      	add	r3, sp, #12
 801a278:	9300      	str	r3, [sp, #0]
 801a27a:	462a      	mov	r2, r5
 801a27c:	4b05      	ldr	r3, [pc, #20]	; (801a294 <_vfiprintf_r+0x22c>)
 801a27e:	a904      	add	r1, sp, #16
 801a280:	4630      	mov	r0, r6
 801a282:	f7fc fc05 	bl	8016a90 <_printf_i>
 801a286:	e7e4      	b.n	801a252 <_vfiprintf_r+0x1ea>
 801a288:	0801cd71 	.word	0x0801cd71
 801a28c:	0801cd7b 	.word	0x0801cd7b
 801a290:	08016549 	.word	0x08016549
 801a294:	0801a043 	.word	0x0801a043
 801a298:	0801cd77 	.word	0x0801cd77

0801a29c <__sflush_r>:
 801a29c:	898a      	ldrh	r2, [r1, #12]
 801a29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a2:	4605      	mov	r5, r0
 801a2a4:	0710      	lsls	r0, r2, #28
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	d458      	bmi.n	801a35c <__sflush_r+0xc0>
 801a2aa:	684b      	ldr	r3, [r1, #4]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	dc05      	bgt.n	801a2bc <__sflush_r+0x20>
 801a2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	dc02      	bgt.n	801a2bc <__sflush_r+0x20>
 801a2b6:	2000      	movs	r0, #0
 801a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2be:	2e00      	cmp	r6, #0
 801a2c0:	d0f9      	beq.n	801a2b6 <__sflush_r+0x1a>
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2c8:	682f      	ldr	r7, [r5, #0]
 801a2ca:	6a21      	ldr	r1, [r4, #32]
 801a2cc:	602b      	str	r3, [r5, #0]
 801a2ce:	d032      	beq.n	801a336 <__sflush_r+0x9a>
 801a2d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2d2:	89a3      	ldrh	r3, [r4, #12]
 801a2d4:	075a      	lsls	r2, r3, #29
 801a2d6:	d505      	bpl.n	801a2e4 <__sflush_r+0x48>
 801a2d8:	6863      	ldr	r3, [r4, #4]
 801a2da:	1ac0      	subs	r0, r0, r3
 801a2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a2de:	b10b      	cbz	r3, 801a2e4 <__sflush_r+0x48>
 801a2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a2e2:	1ac0      	subs	r0, r0, r3
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	4602      	mov	r2, r0
 801a2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2ea:	6a21      	ldr	r1, [r4, #32]
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	47b0      	blx	r6
 801a2f0:	1c43      	adds	r3, r0, #1
 801a2f2:	89a3      	ldrh	r3, [r4, #12]
 801a2f4:	d106      	bne.n	801a304 <__sflush_r+0x68>
 801a2f6:	6829      	ldr	r1, [r5, #0]
 801a2f8:	291d      	cmp	r1, #29
 801a2fa:	d82b      	bhi.n	801a354 <__sflush_r+0xb8>
 801a2fc:	4a29      	ldr	r2, [pc, #164]	; (801a3a4 <__sflush_r+0x108>)
 801a2fe:	410a      	asrs	r2, r1
 801a300:	07d6      	lsls	r6, r2, #31
 801a302:	d427      	bmi.n	801a354 <__sflush_r+0xb8>
 801a304:	2200      	movs	r2, #0
 801a306:	6062      	str	r2, [r4, #4]
 801a308:	04d9      	lsls	r1, r3, #19
 801a30a:	6922      	ldr	r2, [r4, #16]
 801a30c:	6022      	str	r2, [r4, #0]
 801a30e:	d504      	bpl.n	801a31a <__sflush_r+0x7e>
 801a310:	1c42      	adds	r2, r0, #1
 801a312:	d101      	bne.n	801a318 <__sflush_r+0x7c>
 801a314:	682b      	ldr	r3, [r5, #0]
 801a316:	b903      	cbnz	r3, 801a31a <__sflush_r+0x7e>
 801a318:	6560      	str	r0, [r4, #84]	; 0x54
 801a31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a31c:	602f      	str	r7, [r5, #0]
 801a31e:	2900      	cmp	r1, #0
 801a320:	d0c9      	beq.n	801a2b6 <__sflush_r+0x1a>
 801a322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a326:	4299      	cmp	r1, r3
 801a328:	d002      	beq.n	801a330 <__sflush_r+0x94>
 801a32a:	4628      	mov	r0, r5
 801a32c:	f7fe f8d6 	bl	80184dc <_free_r>
 801a330:	2000      	movs	r0, #0
 801a332:	6360      	str	r0, [r4, #52]	; 0x34
 801a334:	e7c0      	b.n	801a2b8 <__sflush_r+0x1c>
 801a336:	2301      	movs	r3, #1
 801a338:	4628      	mov	r0, r5
 801a33a:	47b0      	blx	r6
 801a33c:	1c41      	adds	r1, r0, #1
 801a33e:	d1c8      	bne.n	801a2d2 <__sflush_r+0x36>
 801a340:	682b      	ldr	r3, [r5, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d0c5      	beq.n	801a2d2 <__sflush_r+0x36>
 801a346:	2b1d      	cmp	r3, #29
 801a348:	d001      	beq.n	801a34e <__sflush_r+0xb2>
 801a34a:	2b16      	cmp	r3, #22
 801a34c:	d101      	bne.n	801a352 <__sflush_r+0xb6>
 801a34e:	602f      	str	r7, [r5, #0]
 801a350:	e7b1      	b.n	801a2b6 <__sflush_r+0x1a>
 801a352:	89a3      	ldrh	r3, [r4, #12]
 801a354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a358:	81a3      	strh	r3, [r4, #12]
 801a35a:	e7ad      	b.n	801a2b8 <__sflush_r+0x1c>
 801a35c:	690f      	ldr	r7, [r1, #16]
 801a35e:	2f00      	cmp	r7, #0
 801a360:	d0a9      	beq.n	801a2b6 <__sflush_r+0x1a>
 801a362:	0793      	lsls	r3, r2, #30
 801a364:	680e      	ldr	r6, [r1, #0]
 801a366:	bf08      	it	eq
 801a368:	694b      	ldreq	r3, [r1, #20]
 801a36a:	600f      	str	r7, [r1, #0]
 801a36c:	bf18      	it	ne
 801a36e:	2300      	movne	r3, #0
 801a370:	eba6 0807 	sub.w	r8, r6, r7
 801a374:	608b      	str	r3, [r1, #8]
 801a376:	f1b8 0f00 	cmp.w	r8, #0
 801a37a:	dd9c      	ble.n	801a2b6 <__sflush_r+0x1a>
 801a37c:	6a21      	ldr	r1, [r4, #32]
 801a37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a380:	4643      	mov	r3, r8
 801a382:	463a      	mov	r2, r7
 801a384:	4628      	mov	r0, r5
 801a386:	47b0      	blx	r6
 801a388:	2800      	cmp	r0, #0
 801a38a:	dc06      	bgt.n	801a39a <__sflush_r+0xfe>
 801a38c:	89a3      	ldrh	r3, [r4, #12]
 801a38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a392:	81a3      	strh	r3, [r4, #12]
 801a394:	f04f 30ff 	mov.w	r0, #4294967295
 801a398:	e78e      	b.n	801a2b8 <__sflush_r+0x1c>
 801a39a:	4407      	add	r7, r0
 801a39c:	eba8 0800 	sub.w	r8, r8, r0
 801a3a0:	e7e9      	b.n	801a376 <__sflush_r+0xda>
 801a3a2:	bf00      	nop
 801a3a4:	dfbffffe 	.word	0xdfbffffe

0801a3a8 <_fflush_r>:
 801a3a8:	b538      	push	{r3, r4, r5, lr}
 801a3aa:	690b      	ldr	r3, [r1, #16]
 801a3ac:	4605      	mov	r5, r0
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	b913      	cbnz	r3, 801a3b8 <_fflush_r+0x10>
 801a3b2:	2500      	movs	r5, #0
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	bd38      	pop	{r3, r4, r5, pc}
 801a3b8:	b118      	cbz	r0, 801a3c2 <_fflush_r+0x1a>
 801a3ba:	6a03      	ldr	r3, [r0, #32]
 801a3bc:	b90b      	cbnz	r3, 801a3c2 <_fflush_r+0x1a>
 801a3be:	f7fc ff25 	bl	801720c <__sinit>
 801a3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d0f3      	beq.n	801a3b2 <_fflush_r+0xa>
 801a3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3cc:	07d0      	lsls	r0, r2, #31
 801a3ce:	d404      	bmi.n	801a3da <_fflush_r+0x32>
 801a3d0:	0599      	lsls	r1, r3, #22
 801a3d2:	d402      	bmi.n	801a3da <_fflush_r+0x32>
 801a3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3d6:	f7fd f9f0 	bl	80177ba <__retarget_lock_acquire_recursive>
 801a3da:	4628      	mov	r0, r5
 801a3dc:	4621      	mov	r1, r4
 801a3de:	f7ff ff5d 	bl	801a29c <__sflush_r>
 801a3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3e4:	07da      	lsls	r2, r3, #31
 801a3e6:	4605      	mov	r5, r0
 801a3e8:	d4e4      	bmi.n	801a3b4 <_fflush_r+0xc>
 801a3ea:	89a3      	ldrh	r3, [r4, #12]
 801a3ec:	059b      	lsls	r3, r3, #22
 801a3ee:	d4e1      	bmi.n	801a3b4 <_fflush_r+0xc>
 801a3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3f2:	f7fd f9e3 	bl	80177bc <__retarget_lock_release_recursive>
 801a3f6:	e7dd      	b.n	801a3b4 <_fflush_r+0xc>

0801a3f8 <__swhatbuf_r>:
 801a3f8:	b570      	push	{r4, r5, r6, lr}
 801a3fa:	460c      	mov	r4, r1
 801a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a400:	2900      	cmp	r1, #0
 801a402:	b096      	sub	sp, #88	; 0x58
 801a404:	4615      	mov	r5, r2
 801a406:	461e      	mov	r6, r3
 801a408:	da0d      	bge.n	801a426 <__swhatbuf_r+0x2e>
 801a40a:	89a3      	ldrh	r3, [r4, #12]
 801a40c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a410:	f04f 0100 	mov.w	r1, #0
 801a414:	bf0c      	ite	eq
 801a416:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a41a:	2340      	movne	r3, #64	; 0x40
 801a41c:	2000      	movs	r0, #0
 801a41e:	6031      	str	r1, [r6, #0]
 801a420:	602b      	str	r3, [r5, #0]
 801a422:	b016      	add	sp, #88	; 0x58
 801a424:	bd70      	pop	{r4, r5, r6, pc}
 801a426:	466a      	mov	r2, sp
 801a428:	f000 f8a8 	bl	801a57c <_fstat_r>
 801a42c:	2800      	cmp	r0, #0
 801a42e:	dbec      	blt.n	801a40a <__swhatbuf_r+0x12>
 801a430:	9901      	ldr	r1, [sp, #4]
 801a432:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a436:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a43a:	4259      	negs	r1, r3
 801a43c:	4159      	adcs	r1, r3
 801a43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a442:	e7eb      	b.n	801a41c <__swhatbuf_r+0x24>

0801a444 <__smakebuf_r>:
 801a444:	898b      	ldrh	r3, [r1, #12]
 801a446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a448:	079d      	lsls	r5, r3, #30
 801a44a:	4606      	mov	r6, r0
 801a44c:	460c      	mov	r4, r1
 801a44e:	d507      	bpl.n	801a460 <__smakebuf_r+0x1c>
 801a450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a454:	6023      	str	r3, [r4, #0]
 801a456:	6123      	str	r3, [r4, #16]
 801a458:	2301      	movs	r3, #1
 801a45a:	6163      	str	r3, [r4, #20]
 801a45c:	b002      	add	sp, #8
 801a45e:	bd70      	pop	{r4, r5, r6, pc}
 801a460:	ab01      	add	r3, sp, #4
 801a462:	466a      	mov	r2, sp
 801a464:	f7ff ffc8 	bl	801a3f8 <__swhatbuf_r>
 801a468:	9900      	ldr	r1, [sp, #0]
 801a46a:	4605      	mov	r5, r0
 801a46c:	4630      	mov	r0, r6
 801a46e:	f7fe f8a9 	bl	80185c4 <_malloc_r>
 801a472:	b948      	cbnz	r0, 801a488 <__smakebuf_r+0x44>
 801a474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a478:	059a      	lsls	r2, r3, #22
 801a47a:	d4ef      	bmi.n	801a45c <__smakebuf_r+0x18>
 801a47c:	f023 0303 	bic.w	r3, r3, #3
 801a480:	f043 0302 	orr.w	r3, r3, #2
 801a484:	81a3      	strh	r3, [r4, #12]
 801a486:	e7e3      	b.n	801a450 <__smakebuf_r+0xc>
 801a488:	89a3      	ldrh	r3, [r4, #12]
 801a48a:	6020      	str	r0, [r4, #0]
 801a48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a490:	81a3      	strh	r3, [r4, #12]
 801a492:	9b00      	ldr	r3, [sp, #0]
 801a494:	6163      	str	r3, [r4, #20]
 801a496:	9b01      	ldr	r3, [sp, #4]
 801a498:	6120      	str	r0, [r4, #16]
 801a49a:	b15b      	cbz	r3, 801a4b4 <__smakebuf_r+0x70>
 801a49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4a0:	4630      	mov	r0, r6
 801a4a2:	f000 f87d 	bl	801a5a0 <_isatty_r>
 801a4a6:	b128      	cbz	r0, 801a4b4 <__smakebuf_r+0x70>
 801a4a8:	89a3      	ldrh	r3, [r4, #12]
 801a4aa:	f023 0303 	bic.w	r3, r3, #3
 801a4ae:	f043 0301 	orr.w	r3, r3, #1
 801a4b2:	81a3      	strh	r3, [r4, #12]
 801a4b4:	89a3      	ldrh	r3, [r4, #12]
 801a4b6:	431d      	orrs	r5, r3
 801a4b8:	81a5      	strh	r5, [r4, #12]
 801a4ba:	e7cf      	b.n	801a45c <__smakebuf_r+0x18>

0801a4bc <_putc_r>:
 801a4bc:	b570      	push	{r4, r5, r6, lr}
 801a4be:	460d      	mov	r5, r1
 801a4c0:	4614      	mov	r4, r2
 801a4c2:	4606      	mov	r6, r0
 801a4c4:	b118      	cbz	r0, 801a4ce <_putc_r+0x12>
 801a4c6:	6a03      	ldr	r3, [r0, #32]
 801a4c8:	b90b      	cbnz	r3, 801a4ce <_putc_r+0x12>
 801a4ca:	f7fc fe9f 	bl	801720c <__sinit>
 801a4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a4d0:	07d8      	lsls	r0, r3, #31
 801a4d2:	d405      	bmi.n	801a4e0 <_putc_r+0x24>
 801a4d4:	89a3      	ldrh	r3, [r4, #12]
 801a4d6:	0599      	lsls	r1, r3, #22
 801a4d8:	d402      	bmi.n	801a4e0 <_putc_r+0x24>
 801a4da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4dc:	f7fd f96d 	bl	80177ba <__retarget_lock_acquire_recursive>
 801a4e0:	68a3      	ldr	r3, [r4, #8]
 801a4e2:	3b01      	subs	r3, #1
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	60a3      	str	r3, [r4, #8]
 801a4e8:	da05      	bge.n	801a4f6 <_putc_r+0x3a>
 801a4ea:	69a2      	ldr	r2, [r4, #24]
 801a4ec:	4293      	cmp	r3, r2
 801a4ee:	db12      	blt.n	801a516 <_putc_r+0x5a>
 801a4f0:	b2eb      	uxtb	r3, r5
 801a4f2:	2b0a      	cmp	r3, #10
 801a4f4:	d00f      	beq.n	801a516 <_putc_r+0x5a>
 801a4f6:	6823      	ldr	r3, [r4, #0]
 801a4f8:	1c5a      	adds	r2, r3, #1
 801a4fa:	6022      	str	r2, [r4, #0]
 801a4fc:	701d      	strb	r5, [r3, #0]
 801a4fe:	b2ed      	uxtb	r5, r5
 801a500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a502:	07da      	lsls	r2, r3, #31
 801a504:	d405      	bmi.n	801a512 <_putc_r+0x56>
 801a506:	89a3      	ldrh	r3, [r4, #12]
 801a508:	059b      	lsls	r3, r3, #22
 801a50a:	d402      	bmi.n	801a512 <_putc_r+0x56>
 801a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a50e:	f7fd f955 	bl	80177bc <__retarget_lock_release_recursive>
 801a512:	4628      	mov	r0, r5
 801a514:	bd70      	pop	{r4, r5, r6, pc}
 801a516:	4629      	mov	r1, r5
 801a518:	4622      	mov	r2, r4
 801a51a:	4630      	mov	r0, r6
 801a51c:	f7fd f83b 	bl	8017596 <__swbuf_r>
 801a520:	4605      	mov	r5, r0
 801a522:	e7ed      	b.n	801a500 <_putc_r+0x44>

0801a524 <memmove>:
 801a524:	4288      	cmp	r0, r1
 801a526:	b510      	push	{r4, lr}
 801a528:	eb01 0402 	add.w	r4, r1, r2
 801a52c:	d902      	bls.n	801a534 <memmove+0x10>
 801a52e:	4284      	cmp	r4, r0
 801a530:	4623      	mov	r3, r4
 801a532:	d807      	bhi.n	801a544 <memmove+0x20>
 801a534:	1e43      	subs	r3, r0, #1
 801a536:	42a1      	cmp	r1, r4
 801a538:	d008      	beq.n	801a54c <memmove+0x28>
 801a53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a542:	e7f8      	b.n	801a536 <memmove+0x12>
 801a544:	4402      	add	r2, r0
 801a546:	4601      	mov	r1, r0
 801a548:	428a      	cmp	r2, r1
 801a54a:	d100      	bne.n	801a54e <memmove+0x2a>
 801a54c:	bd10      	pop	{r4, pc}
 801a54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a556:	e7f7      	b.n	801a548 <memmove+0x24>

0801a558 <strncmp>:
 801a558:	b510      	push	{r4, lr}
 801a55a:	b16a      	cbz	r2, 801a578 <strncmp+0x20>
 801a55c:	3901      	subs	r1, #1
 801a55e:	1884      	adds	r4, r0, r2
 801a560:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a568:	429a      	cmp	r2, r3
 801a56a:	d103      	bne.n	801a574 <strncmp+0x1c>
 801a56c:	42a0      	cmp	r0, r4
 801a56e:	d001      	beq.n	801a574 <strncmp+0x1c>
 801a570:	2a00      	cmp	r2, #0
 801a572:	d1f5      	bne.n	801a560 <strncmp+0x8>
 801a574:	1ad0      	subs	r0, r2, r3
 801a576:	bd10      	pop	{r4, pc}
 801a578:	4610      	mov	r0, r2
 801a57a:	e7fc      	b.n	801a576 <strncmp+0x1e>

0801a57c <_fstat_r>:
 801a57c:	b538      	push	{r3, r4, r5, lr}
 801a57e:	4d07      	ldr	r5, [pc, #28]	; (801a59c <_fstat_r+0x20>)
 801a580:	2300      	movs	r3, #0
 801a582:	4604      	mov	r4, r0
 801a584:	4608      	mov	r0, r1
 801a586:	4611      	mov	r1, r2
 801a588:	602b      	str	r3, [r5, #0]
 801a58a:	f7e9 feca 	bl	8004322 <_fstat>
 801a58e:	1c43      	adds	r3, r0, #1
 801a590:	d102      	bne.n	801a598 <_fstat_r+0x1c>
 801a592:	682b      	ldr	r3, [r5, #0]
 801a594:	b103      	cbz	r3, 801a598 <_fstat_r+0x1c>
 801a596:	6023      	str	r3, [r4, #0]
 801a598:	bd38      	pop	{r3, r4, r5, pc}
 801a59a:	bf00      	nop
 801a59c:	20000418 	.word	0x20000418

0801a5a0 <_isatty_r>:
 801a5a0:	b538      	push	{r3, r4, r5, lr}
 801a5a2:	4d06      	ldr	r5, [pc, #24]	; (801a5bc <_isatty_r+0x1c>)
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	4604      	mov	r4, r0
 801a5a8:	4608      	mov	r0, r1
 801a5aa:	602b      	str	r3, [r5, #0]
 801a5ac:	f7e9 fec9 	bl	8004342 <_isatty>
 801a5b0:	1c43      	adds	r3, r0, #1
 801a5b2:	d102      	bne.n	801a5ba <_isatty_r+0x1a>
 801a5b4:	682b      	ldr	r3, [r5, #0]
 801a5b6:	b103      	cbz	r3, 801a5ba <_isatty_r+0x1a>
 801a5b8:	6023      	str	r3, [r4, #0]
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}
 801a5bc:	20000418 	.word	0x20000418

0801a5c0 <_sbrk_r>:
 801a5c0:	b538      	push	{r3, r4, r5, lr}
 801a5c2:	4d06      	ldr	r5, [pc, #24]	; (801a5dc <_sbrk_r+0x1c>)
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	4604      	mov	r4, r0
 801a5c8:	4608      	mov	r0, r1
 801a5ca:	602b      	str	r3, [r5, #0]
 801a5cc:	f7e9 fed2 	bl	8004374 <_sbrk>
 801a5d0:	1c43      	adds	r3, r0, #1
 801a5d2:	d102      	bne.n	801a5da <_sbrk_r+0x1a>
 801a5d4:	682b      	ldr	r3, [r5, #0]
 801a5d6:	b103      	cbz	r3, 801a5da <_sbrk_r+0x1a>
 801a5d8:	6023      	str	r3, [r4, #0]
 801a5da:	bd38      	pop	{r3, r4, r5, pc}
 801a5dc:	20000418 	.word	0x20000418

0801a5e0 <nan>:
 801a5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a5e8 <nan+0x8>
 801a5e4:	4770      	bx	lr
 801a5e6:	bf00      	nop
 801a5e8:	00000000 	.word	0x00000000
 801a5ec:	7ff80000 	.word	0x7ff80000

0801a5f0 <__assert_func>:
 801a5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5f2:	4614      	mov	r4, r2
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	4b09      	ldr	r3, [pc, #36]	; (801a61c <__assert_func+0x2c>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4605      	mov	r5, r0
 801a5fc:	68d8      	ldr	r0, [r3, #12]
 801a5fe:	b14c      	cbz	r4, 801a614 <__assert_func+0x24>
 801a600:	4b07      	ldr	r3, [pc, #28]	; (801a620 <__assert_func+0x30>)
 801a602:	9100      	str	r1, [sp, #0]
 801a604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a608:	4906      	ldr	r1, [pc, #24]	; (801a624 <__assert_func+0x34>)
 801a60a:	462b      	mov	r3, r5
 801a60c:	f000 fbca 	bl	801ada4 <fiprintf>
 801a610:	f000 fbda 	bl	801adc8 <abort>
 801a614:	4b04      	ldr	r3, [pc, #16]	; (801a628 <__assert_func+0x38>)
 801a616:	461c      	mov	r4, r3
 801a618:	e7f3      	b.n	801a602 <__assert_func+0x12>
 801a61a:	bf00      	nop
 801a61c:	20000074 	.word	0x20000074
 801a620:	0801cd8a 	.word	0x0801cd8a
 801a624:	0801cd97 	.word	0x0801cd97
 801a628:	0801cdc5 	.word	0x0801cdc5

0801a62c <_calloc_r>:
 801a62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a62e:	fba1 2402 	umull	r2, r4, r1, r2
 801a632:	b94c      	cbnz	r4, 801a648 <_calloc_r+0x1c>
 801a634:	4611      	mov	r1, r2
 801a636:	9201      	str	r2, [sp, #4]
 801a638:	f7fd ffc4 	bl	80185c4 <_malloc_r>
 801a63c:	9a01      	ldr	r2, [sp, #4]
 801a63e:	4605      	mov	r5, r0
 801a640:	b930      	cbnz	r0, 801a650 <_calloc_r+0x24>
 801a642:	4628      	mov	r0, r5
 801a644:	b003      	add	sp, #12
 801a646:	bd30      	pop	{r4, r5, pc}
 801a648:	220c      	movs	r2, #12
 801a64a:	6002      	str	r2, [r0, #0]
 801a64c:	2500      	movs	r5, #0
 801a64e:	e7f8      	b.n	801a642 <_calloc_r+0x16>
 801a650:	4621      	mov	r1, r4
 801a652:	f7fd f835 	bl	80176c0 <memset>
 801a656:	e7f4      	b.n	801a642 <_calloc_r+0x16>

0801a658 <rshift>:
 801a658:	6903      	ldr	r3, [r0, #16]
 801a65a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a65e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a662:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a666:	f100 0414 	add.w	r4, r0, #20
 801a66a:	dd45      	ble.n	801a6f8 <rshift+0xa0>
 801a66c:	f011 011f 	ands.w	r1, r1, #31
 801a670:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a674:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a678:	d10c      	bne.n	801a694 <rshift+0x3c>
 801a67a:	f100 0710 	add.w	r7, r0, #16
 801a67e:	4629      	mov	r1, r5
 801a680:	42b1      	cmp	r1, r6
 801a682:	d334      	bcc.n	801a6ee <rshift+0x96>
 801a684:	1a9b      	subs	r3, r3, r2
 801a686:	009b      	lsls	r3, r3, #2
 801a688:	1eea      	subs	r2, r5, #3
 801a68a:	4296      	cmp	r6, r2
 801a68c:	bf38      	it	cc
 801a68e:	2300      	movcc	r3, #0
 801a690:	4423      	add	r3, r4
 801a692:	e015      	b.n	801a6c0 <rshift+0x68>
 801a694:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a698:	f1c1 0820 	rsb	r8, r1, #32
 801a69c:	40cf      	lsrs	r7, r1
 801a69e:	f105 0e04 	add.w	lr, r5, #4
 801a6a2:	46a1      	mov	r9, r4
 801a6a4:	4576      	cmp	r6, lr
 801a6a6:	46f4      	mov	ip, lr
 801a6a8:	d815      	bhi.n	801a6d6 <rshift+0x7e>
 801a6aa:	1a9a      	subs	r2, r3, r2
 801a6ac:	0092      	lsls	r2, r2, #2
 801a6ae:	3a04      	subs	r2, #4
 801a6b0:	3501      	adds	r5, #1
 801a6b2:	42ae      	cmp	r6, r5
 801a6b4:	bf38      	it	cc
 801a6b6:	2200      	movcc	r2, #0
 801a6b8:	18a3      	adds	r3, r4, r2
 801a6ba:	50a7      	str	r7, [r4, r2]
 801a6bc:	b107      	cbz	r7, 801a6c0 <rshift+0x68>
 801a6be:	3304      	adds	r3, #4
 801a6c0:	1b1a      	subs	r2, r3, r4
 801a6c2:	42a3      	cmp	r3, r4
 801a6c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a6c8:	bf08      	it	eq
 801a6ca:	2300      	moveq	r3, #0
 801a6cc:	6102      	str	r2, [r0, #16]
 801a6ce:	bf08      	it	eq
 801a6d0:	6143      	streq	r3, [r0, #20]
 801a6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6d6:	f8dc c000 	ldr.w	ip, [ip]
 801a6da:	fa0c fc08 	lsl.w	ip, ip, r8
 801a6de:	ea4c 0707 	orr.w	r7, ip, r7
 801a6e2:	f849 7b04 	str.w	r7, [r9], #4
 801a6e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a6ea:	40cf      	lsrs	r7, r1
 801a6ec:	e7da      	b.n	801a6a4 <rshift+0x4c>
 801a6ee:	f851 cb04 	ldr.w	ip, [r1], #4
 801a6f2:	f847 cf04 	str.w	ip, [r7, #4]!
 801a6f6:	e7c3      	b.n	801a680 <rshift+0x28>
 801a6f8:	4623      	mov	r3, r4
 801a6fa:	e7e1      	b.n	801a6c0 <rshift+0x68>

0801a6fc <__hexdig_fun>:
 801a6fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a700:	2b09      	cmp	r3, #9
 801a702:	d802      	bhi.n	801a70a <__hexdig_fun+0xe>
 801a704:	3820      	subs	r0, #32
 801a706:	b2c0      	uxtb	r0, r0
 801a708:	4770      	bx	lr
 801a70a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a70e:	2b05      	cmp	r3, #5
 801a710:	d801      	bhi.n	801a716 <__hexdig_fun+0x1a>
 801a712:	3847      	subs	r0, #71	; 0x47
 801a714:	e7f7      	b.n	801a706 <__hexdig_fun+0xa>
 801a716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a71a:	2b05      	cmp	r3, #5
 801a71c:	d801      	bhi.n	801a722 <__hexdig_fun+0x26>
 801a71e:	3827      	subs	r0, #39	; 0x27
 801a720:	e7f1      	b.n	801a706 <__hexdig_fun+0xa>
 801a722:	2000      	movs	r0, #0
 801a724:	4770      	bx	lr
	...

0801a728 <__gethex>:
 801a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a72c:	4617      	mov	r7, r2
 801a72e:	680a      	ldr	r2, [r1, #0]
 801a730:	b085      	sub	sp, #20
 801a732:	f102 0b02 	add.w	fp, r2, #2
 801a736:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a73a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a73e:	4681      	mov	r9, r0
 801a740:	468a      	mov	sl, r1
 801a742:	9302      	str	r3, [sp, #8]
 801a744:	32fe      	adds	r2, #254	; 0xfe
 801a746:	eb02 030b 	add.w	r3, r2, fp
 801a74a:	46d8      	mov	r8, fp
 801a74c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a750:	9301      	str	r3, [sp, #4]
 801a752:	2830      	cmp	r0, #48	; 0x30
 801a754:	d0f7      	beq.n	801a746 <__gethex+0x1e>
 801a756:	f7ff ffd1 	bl	801a6fc <__hexdig_fun>
 801a75a:	4604      	mov	r4, r0
 801a75c:	2800      	cmp	r0, #0
 801a75e:	d138      	bne.n	801a7d2 <__gethex+0xaa>
 801a760:	49a7      	ldr	r1, [pc, #668]	; (801aa00 <__gethex+0x2d8>)
 801a762:	2201      	movs	r2, #1
 801a764:	4640      	mov	r0, r8
 801a766:	f7ff fef7 	bl	801a558 <strncmp>
 801a76a:	4606      	mov	r6, r0
 801a76c:	2800      	cmp	r0, #0
 801a76e:	d169      	bne.n	801a844 <__gethex+0x11c>
 801a770:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a774:	465d      	mov	r5, fp
 801a776:	f7ff ffc1 	bl	801a6fc <__hexdig_fun>
 801a77a:	2800      	cmp	r0, #0
 801a77c:	d064      	beq.n	801a848 <__gethex+0x120>
 801a77e:	465a      	mov	r2, fp
 801a780:	7810      	ldrb	r0, [r2, #0]
 801a782:	2830      	cmp	r0, #48	; 0x30
 801a784:	4690      	mov	r8, r2
 801a786:	f102 0201 	add.w	r2, r2, #1
 801a78a:	d0f9      	beq.n	801a780 <__gethex+0x58>
 801a78c:	f7ff ffb6 	bl	801a6fc <__hexdig_fun>
 801a790:	2301      	movs	r3, #1
 801a792:	fab0 f480 	clz	r4, r0
 801a796:	0964      	lsrs	r4, r4, #5
 801a798:	465e      	mov	r6, fp
 801a79a:	9301      	str	r3, [sp, #4]
 801a79c:	4642      	mov	r2, r8
 801a79e:	4615      	mov	r5, r2
 801a7a0:	3201      	adds	r2, #1
 801a7a2:	7828      	ldrb	r0, [r5, #0]
 801a7a4:	f7ff ffaa 	bl	801a6fc <__hexdig_fun>
 801a7a8:	2800      	cmp	r0, #0
 801a7aa:	d1f8      	bne.n	801a79e <__gethex+0x76>
 801a7ac:	4994      	ldr	r1, [pc, #592]	; (801aa00 <__gethex+0x2d8>)
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	f7ff fed1 	bl	801a558 <strncmp>
 801a7b6:	b978      	cbnz	r0, 801a7d8 <__gethex+0xb0>
 801a7b8:	b946      	cbnz	r6, 801a7cc <__gethex+0xa4>
 801a7ba:	1c6e      	adds	r6, r5, #1
 801a7bc:	4632      	mov	r2, r6
 801a7be:	4615      	mov	r5, r2
 801a7c0:	3201      	adds	r2, #1
 801a7c2:	7828      	ldrb	r0, [r5, #0]
 801a7c4:	f7ff ff9a 	bl	801a6fc <__hexdig_fun>
 801a7c8:	2800      	cmp	r0, #0
 801a7ca:	d1f8      	bne.n	801a7be <__gethex+0x96>
 801a7cc:	1b73      	subs	r3, r6, r5
 801a7ce:	009e      	lsls	r6, r3, #2
 801a7d0:	e004      	b.n	801a7dc <__gethex+0xb4>
 801a7d2:	2400      	movs	r4, #0
 801a7d4:	4626      	mov	r6, r4
 801a7d6:	e7e1      	b.n	801a79c <__gethex+0x74>
 801a7d8:	2e00      	cmp	r6, #0
 801a7da:	d1f7      	bne.n	801a7cc <__gethex+0xa4>
 801a7dc:	782b      	ldrb	r3, [r5, #0]
 801a7de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a7e2:	2b50      	cmp	r3, #80	; 0x50
 801a7e4:	d13d      	bne.n	801a862 <__gethex+0x13a>
 801a7e6:	786b      	ldrb	r3, [r5, #1]
 801a7e8:	2b2b      	cmp	r3, #43	; 0x2b
 801a7ea:	d02f      	beq.n	801a84c <__gethex+0x124>
 801a7ec:	2b2d      	cmp	r3, #45	; 0x2d
 801a7ee:	d031      	beq.n	801a854 <__gethex+0x12c>
 801a7f0:	1c69      	adds	r1, r5, #1
 801a7f2:	f04f 0b00 	mov.w	fp, #0
 801a7f6:	7808      	ldrb	r0, [r1, #0]
 801a7f8:	f7ff ff80 	bl	801a6fc <__hexdig_fun>
 801a7fc:	1e42      	subs	r2, r0, #1
 801a7fe:	b2d2      	uxtb	r2, r2
 801a800:	2a18      	cmp	r2, #24
 801a802:	d82e      	bhi.n	801a862 <__gethex+0x13a>
 801a804:	f1a0 0210 	sub.w	r2, r0, #16
 801a808:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a80c:	f7ff ff76 	bl	801a6fc <__hexdig_fun>
 801a810:	f100 3cff 	add.w	ip, r0, #4294967295
 801a814:	fa5f fc8c 	uxtb.w	ip, ip
 801a818:	f1bc 0f18 	cmp.w	ip, #24
 801a81c:	d91d      	bls.n	801a85a <__gethex+0x132>
 801a81e:	f1bb 0f00 	cmp.w	fp, #0
 801a822:	d000      	beq.n	801a826 <__gethex+0xfe>
 801a824:	4252      	negs	r2, r2
 801a826:	4416      	add	r6, r2
 801a828:	f8ca 1000 	str.w	r1, [sl]
 801a82c:	b1dc      	cbz	r4, 801a866 <__gethex+0x13e>
 801a82e:	9b01      	ldr	r3, [sp, #4]
 801a830:	2b00      	cmp	r3, #0
 801a832:	bf14      	ite	ne
 801a834:	f04f 0800 	movne.w	r8, #0
 801a838:	f04f 0806 	moveq.w	r8, #6
 801a83c:	4640      	mov	r0, r8
 801a83e:	b005      	add	sp, #20
 801a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a844:	4645      	mov	r5, r8
 801a846:	4626      	mov	r6, r4
 801a848:	2401      	movs	r4, #1
 801a84a:	e7c7      	b.n	801a7dc <__gethex+0xb4>
 801a84c:	f04f 0b00 	mov.w	fp, #0
 801a850:	1ca9      	adds	r1, r5, #2
 801a852:	e7d0      	b.n	801a7f6 <__gethex+0xce>
 801a854:	f04f 0b01 	mov.w	fp, #1
 801a858:	e7fa      	b.n	801a850 <__gethex+0x128>
 801a85a:	230a      	movs	r3, #10
 801a85c:	fb03 0002 	mla	r0, r3, r2, r0
 801a860:	e7d0      	b.n	801a804 <__gethex+0xdc>
 801a862:	4629      	mov	r1, r5
 801a864:	e7e0      	b.n	801a828 <__gethex+0x100>
 801a866:	eba5 0308 	sub.w	r3, r5, r8
 801a86a:	3b01      	subs	r3, #1
 801a86c:	4621      	mov	r1, r4
 801a86e:	2b07      	cmp	r3, #7
 801a870:	dc0a      	bgt.n	801a888 <__gethex+0x160>
 801a872:	4648      	mov	r0, r9
 801a874:	f7fd ff32 	bl	80186dc <_Balloc>
 801a878:	4604      	mov	r4, r0
 801a87a:	b940      	cbnz	r0, 801a88e <__gethex+0x166>
 801a87c:	4b61      	ldr	r3, [pc, #388]	; (801aa04 <__gethex+0x2dc>)
 801a87e:	4602      	mov	r2, r0
 801a880:	21e4      	movs	r1, #228	; 0xe4
 801a882:	4861      	ldr	r0, [pc, #388]	; (801aa08 <__gethex+0x2e0>)
 801a884:	f7ff feb4 	bl	801a5f0 <__assert_func>
 801a888:	3101      	adds	r1, #1
 801a88a:	105b      	asrs	r3, r3, #1
 801a88c:	e7ef      	b.n	801a86e <__gethex+0x146>
 801a88e:	f100 0a14 	add.w	sl, r0, #20
 801a892:	2300      	movs	r3, #0
 801a894:	495a      	ldr	r1, [pc, #360]	; (801aa00 <__gethex+0x2d8>)
 801a896:	f8cd a004 	str.w	sl, [sp, #4]
 801a89a:	469b      	mov	fp, r3
 801a89c:	45a8      	cmp	r8, r5
 801a89e:	d342      	bcc.n	801a926 <__gethex+0x1fe>
 801a8a0:	9801      	ldr	r0, [sp, #4]
 801a8a2:	f840 bb04 	str.w	fp, [r0], #4
 801a8a6:	eba0 000a 	sub.w	r0, r0, sl
 801a8aa:	1080      	asrs	r0, r0, #2
 801a8ac:	6120      	str	r0, [r4, #16]
 801a8ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a8b2:	4658      	mov	r0, fp
 801a8b4:	f7fe f804 	bl	80188c0 <__hi0bits>
 801a8b8:	683d      	ldr	r5, [r7, #0]
 801a8ba:	eba8 0000 	sub.w	r0, r8, r0
 801a8be:	42a8      	cmp	r0, r5
 801a8c0:	dd59      	ble.n	801a976 <__gethex+0x24e>
 801a8c2:	eba0 0805 	sub.w	r8, r0, r5
 801a8c6:	4641      	mov	r1, r8
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	f7fe fb93 	bl	8018ff4 <__any_on>
 801a8ce:	4683      	mov	fp, r0
 801a8d0:	b1b8      	cbz	r0, 801a902 <__gethex+0x1da>
 801a8d2:	f108 33ff 	add.w	r3, r8, #4294967295
 801a8d6:	1159      	asrs	r1, r3, #5
 801a8d8:	f003 021f 	and.w	r2, r3, #31
 801a8dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a8e0:	f04f 0b01 	mov.w	fp, #1
 801a8e4:	fa0b f202 	lsl.w	r2, fp, r2
 801a8e8:	420a      	tst	r2, r1
 801a8ea:	d00a      	beq.n	801a902 <__gethex+0x1da>
 801a8ec:	455b      	cmp	r3, fp
 801a8ee:	dd06      	ble.n	801a8fe <__gethex+0x1d6>
 801a8f0:	f1a8 0102 	sub.w	r1, r8, #2
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	f7fe fb7d 	bl	8018ff4 <__any_on>
 801a8fa:	2800      	cmp	r0, #0
 801a8fc:	d138      	bne.n	801a970 <__gethex+0x248>
 801a8fe:	f04f 0b02 	mov.w	fp, #2
 801a902:	4641      	mov	r1, r8
 801a904:	4620      	mov	r0, r4
 801a906:	f7ff fea7 	bl	801a658 <rshift>
 801a90a:	4446      	add	r6, r8
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	42b3      	cmp	r3, r6
 801a910:	da41      	bge.n	801a996 <__gethex+0x26e>
 801a912:	4621      	mov	r1, r4
 801a914:	4648      	mov	r0, r9
 801a916:	f7fd ff21 	bl	801875c <_Bfree>
 801a91a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a91c:	2300      	movs	r3, #0
 801a91e:	6013      	str	r3, [r2, #0]
 801a920:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801a924:	e78a      	b.n	801a83c <__gethex+0x114>
 801a926:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801a92a:	2a2e      	cmp	r2, #46	; 0x2e
 801a92c:	d014      	beq.n	801a958 <__gethex+0x230>
 801a92e:	2b20      	cmp	r3, #32
 801a930:	d106      	bne.n	801a940 <__gethex+0x218>
 801a932:	9b01      	ldr	r3, [sp, #4]
 801a934:	f843 bb04 	str.w	fp, [r3], #4
 801a938:	f04f 0b00 	mov.w	fp, #0
 801a93c:	9301      	str	r3, [sp, #4]
 801a93e:	465b      	mov	r3, fp
 801a940:	7828      	ldrb	r0, [r5, #0]
 801a942:	9303      	str	r3, [sp, #12]
 801a944:	f7ff feda 	bl	801a6fc <__hexdig_fun>
 801a948:	9b03      	ldr	r3, [sp, #12]
 801a94a:	f000 000f 	and.w	r0, r0, #15
 801a94e:	4098      	lsls	r0, r3
 801a950:	ea4b 0b00 	orr.w	fp, fp, r0
 801a954:	3304      	adds	r3, #4
 801a956:	e7a1      	b.n	801a89c <__gethex+0x174>
 801a958:	45a8      	cmp	r8, r5
 801a95a:	d8e8      	bhi.n	801a92e <__gethex+0x206>
 801a95c:	2201      	movs	r2, #1
 801a95e:	4628      	mov	r0, r5
 801a960:	9303      	str	r3, [sp, #12]
 801a962:	f7ff fdf9 	bl	801a558 <strncmp>
 801a966:	4926      	ldr	r1, [pc, #152]	; (801aa00 <__gethex+0x2d8>)
 801a968:	9b03      	ldr	r3, [sp, #12]
 801a96a:	2800      	cmp	r0, #0
 801a96c:	d1df      	bne.n	801a92e <__gethex+0x206>
 801a96e:	e795      	b.n	801a89c <__gethex+0x174>
 801a970:	f04f 0b03 	mov.w	fp, #3
 801a974:	e7c5      	b.n	801a902 <__gethex+0x1da>
 801a976:	da0b      	bge.n	801a990 <__gethex+0x268>
 801a978:	eba5 0800 	sub.w	r8, r5, r0
 801a97c:	4621      	mov	r1, r4
 801a97e:	4642      	mov	r2, r8
 801a980:	4648      	mov	r0, r9
 801a982:	f7fe f905 	bl	8018b90 <__lshift>
 801a986:	eba6 0608 	sub.w	r6, r6, r8
 801a98a:	4604      	mov	r4, r0
 801a98c:	f100 0a14 	add.w	sl, r0, #20
 801a990:	f04f 0b00 	mov.w	fp, #0
 801a994:	e7ba      	b.n	801a90c <__gethex+0x1e4>
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	42b3      	cmp	r3, r6
 801a99a:	dd73      	ble.n	801aa84 <__gethex+0x35c>
 801a99c:	1b9e      	subs	r6, r3, r6
 801a99e:	42b5      	cmp	r5, r6
 801a9a0:	dc34      	bgt.n	801aa0c <__gethex+0x2e4>
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	2b02      	cmp	r3, #2
 801a9a6:	d023      	beq.n	801a9f0 <__gethex+0x2c8>
 801a9a8:	2b03      	cmp	r3, #3
 801a9aa:	d025      	beq.n	801a9f8 <__gethex+0x2d0>
 801a9ac:	2b01      	cmp	r3, #1
 801a9ae:	d115      	bne.n	801a9dc <__gethex+0x2b4>
 801a9b0:	42b5      	cmp	r5, r6
 801a9b2:	d113      	bne.n	801a9dc <__gethex+0x2b4>
 801a9b4:	2d01      	cmp	r5, #1
 801a9b6:	d10b      	bne.n	801a9d0 <__gethex+0x2a8>
 801a9b8:	9a02      	ldr	r2, [sp, #8]
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6013      	str	r3, [r2, #0]
 801a9be:	2301      	movs	r3, #1
 801a9c0:	6123      	str	r3, [r4, #16]
 801a9c2:	f8ca 3000 	str.w	r3, [sl]
 801a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801a9cc:	601c      	str	r4, [r3, #0]
 801a9ce:	e735      	b.n	801a83c <__gethex+0x114>
 801a9d0:	1e69      	subs	r1, r5, #1
 801a9d2:	4620      	mov	r0, r4
 801a9d4:	f7fe fb0e 	bl	8018ff4 <__any_on>
 801a9d8:	2800      	cmp	r0, #0
 801a9da:	d1ed      	bne.n	801a9b8 <__gethex+0x290>
 801a9dc:	4621      	mov	r1, r4
 801a9de:	4648      	mov	r0, r9
 801a9e0:	f7fd febc 	bl	801875c <_Bfree>
 801a9e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	6013      	str	r3, [r2, #0]
 801a9ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 801a9ee:	e725      	b.n	801a83c <__gethex+0x114>
 801a9f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d1f2      	bne.n	801a9dc <__gethex+0x2b4>
 801a9f6:	e7df      	b.n	801a9b8 <__gethex+0x290>
 801a9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d1dc      	bne.n	801a9b8 <__gethex+0x290>
 801a9fe:	e7ed      	b.n	801a9dc <__gethex+0x2b4>
 801aa00:	0801cc1c 	.word	0x0801cc1c
 801aa04:	0801cab1 	.word	0x0801cab1
 801aa08:	0801cdc6 	.word	0x0801cdc6
 801aa0c:	f106 38ff 	add.w	r8, r6, #4294967295
 801aa10:	f1bb 0f00 	cmp.w	fp, #0
 801aa14:	d133      	bne.n	801aa7e <__gethex+0x356>
 801aa16:	f1b8 0f00 	cmp.w	r8, #0
 801aa1a:	d004      	beq.n	801aa26 <__gethex+0x2fe>
 801aa1c:	4641      	mov	r1, r8
 801aa1e:	4620      	mov	r0, r4
 801aa20:	f7fe fae8 	bl	8018ff4 <__any_on>
 801aa24:	4683      	mov	fp, r0
 801aa26:	ea4f 1268 	mov.w	r2, r8, asr #5
 801aa2a:	2301      	movs	r3, #1
 801aa2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801aa30:	f008 081f 	and.w	r8, r8, #31
 801aa34:	fa03 f308 	lsl.w	r3, r3, r8
 801aa38:	4213      	tst	r3, r2
 801aa3a:	4631      	mov	r1, r6
 801aa3c:	4620      	mov	r0, r4
 801aa3e:	bf18      	it	ne
 801aa40:	f04b 0b02 	orrne.w	fp, fp, #2
 801aa44:	1bad      	subs	r5, r5, r6
 801aa46:	f7ff fe07 	bl	801a658 <rshift>
 801aa4a:	687e      	ldr	r6, [r7, #4]
 801aa4c:	f04f 0802 	mov.w	r8, #2
 801aa50:	f1bb 0f00 	cmp.w	fp, #0
 801aa54:	d04a      	beq.n	801aaec <__gethex+0x3c4>
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	2b02      	cmp	r3, #2
 801aa5a:	d016      	beq.n	801aa8a <__gethex+0x362>
 801aa5c:	2b03      	cmp	r3, #3
 801aa5e:	d018      	beq.n	801aa92 <__gethex+0x36a>
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	d109      	bne.n	801aa78 <__gethex+0x350>
 801aa64:	f01b 0f02 	tst.w	fp, #2
 801aa68:	d006      	beq.n	801aa78 <__gethex+0x350>
 801aa6a:	f8da 3000 	ldr.w	r3, [sl]
 801aa6e:	ea4b 0b03 	orr.w	fp, fp, r3
 801aa72:	f01b 0f01 	tst.w	fp, #1
 801aa76:	d10f      	bne.n	801aa98 <__gethex+0x370>
 801aa78:	f048 0810 	orr.w	r8, r8, #16
 801aa7c:	e036      	b.n	801aaec <__gethex+0x3c4>
 801aa7e:	f04f 0b01 	mov.w	fp, #1
 801aa82:	e7d0      	b.n	801aa26 <__gethex+0x2fe>
 801aa84:	f04f 0801 	mov.w	r8, #1
 801aa88:	e7e2      	b.n	801aa50 <__gethex+0x328>
 801aa8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa8c:	f1c3 0301 	rsb	r3, r3, #1
 801aa90:	930f      	str	r3, [sp, #60]	; 0x3c
 801aa92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d0ef      	beq.n	801aa78 <__gethex+0x350>
 801aa98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801aa9c:	f104 0214 	add.w	r2, r4, #20
 801aaa0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801aaa4:	9301      	str	r3, [sp, #4]
 801aaa6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801aaaa:	2300      	movs	r3, #0
 801aaac:	4694      	mov	ip, r2
 801aaae:	f852 1b04 	ldr.w	r1, [r2], #4
 801aab2:	f1b1 3fff 	cmp.w	r1, #4294967295
 801aab6:	d01e      	beq.n	801aaf6 <__gethex+0x3ce>
 801aab8:	3101      	adds	r1, #1
 801aaba:	f8cc 1000 	str.w	r1, [ip]
 801aabe:	f1b8 0f02 	cmp.w	r8, #2
 801aac2:	f104 0214 	add.w	r2, r4, #20
 801aac6:	d13d      	bne.n	801ab44 <__gethex+0x41c>
 801aac8:	683b      	ldr	r3, [r7, #0]
 801aaca:	3b01      	subs	r3, #1
 801aacc:	42ab      	cmp	r3, r5
 801aace:	d10b      	bne.n	801aae8 <__gethex+0x3c0>
 801aad0:	1169      	asrs	r1, r5, #5
 801aad2:	2301      	movs	r3, #1
 801aad4:	f005 051f 	and.w	r5, r5, #31
 801aad8:	fa03 f505 	lsl.w	r5, r3, r5
 801aadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aae0:	421d      	tst	r5, r3
 801aae2:	bf18      	it	ne
 801aae4:	f04f 0801 	movne.w	r8, #1
 801aae8:	f048 0820 	orr.w	r8, r8, #32
 801aaec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aaee:	601c      	str	r4, [r3, #0]
 801aaf0:	9b02      	ldr	r3, [sp, #8]
 801aaf2:	601e      	str	r6, [r3, #0]
 801aaf4:	e6a2      	b.n	801a83c <__gethex+0x114>
 801aaf6:	4290      	cmp	r0, r2
 801aaf8:	f842 3c04 	str.w	r3, [r2, #-4]
 801aafc:	d8d6      	bhi.n	801aaac <__gethex+0x384>
 801aafe:	68a2      	ldr	r2, [r4, #8]
 801ab00:	4593      	cmp	fp, r2
 801ab02:	db17      	blt.n	801ab34 <__gethex+0x40c>
 801ab04:	6861      	ldr	r1, [r4, #4]
 801ab06:	4648      	mov	r0, r9
 801ab08:	3101      	adds	r1, #1
 801ab0a:	f7fd fde7 	bl	80186dc <_Balloc>
 801ab0e:	4682      	mov	sl, r0
 801ab10:	b918      	cbnz	r0, 801ab1a <__gethex+0x3f2>
 801ab12:	4b1b      	ldr	r3, [pc, #108]	; (801ab80 <__gethex+0x458>)
 801ab14:	4602      	mov	r2, r0
 801ab16:	2184      	movs	r1, #132	; 0x84
 801ab18:	e6b3      	b.n	801a882 <__gethex+0x15a>
 801ab1a:	6922      	ldr	r2, [r4, #16]
 801ab1c:	3202      	adds	r2, #2
 801ab1e:	f104 010c 	add.w	r1, r4, #12
 801ab22:	0092      	lsls	r2, r2, #2
 801ab24:	300c      	adds	r0, #12
 801ab26:	f7fc fe4a 	bl	80177be <memcpy>
 801ab2a:	4621      	mov	r1, r4
 801ab2c:	4648      	mov	r0, r9
 801ab2e:	f7fd fe15 	bl	801875c <_Bfree>
 801ab32:	4654      	mov	r4, sl
 801ab34:	6922      	ldr	r2, [r4, #16]
 801ab36:	1c51      	adds	r1, r2, #1
 801ab38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ab3c:	6121      	str	r1, [r4, #16]
 801ab3e:	2101      	movs	r1, #1
 801ab40:	6151      	str	r1, [r2, #20]
 801ab42:	e7bc      	b.n	801aabe <__gethex+0x396>
 801ab44:	6921      	ldr	r1, [r4, #16]
 801ab46:	4559      	cmp	r1, fp
 801ab48:	dd0b      	ble.n	801ab62 <__gethex+0x43a>
 801ab4a:	2101      	movs	r1, #1
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f7ff fd83 	bl	801a658 <rshift>
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	3601      	adds	r6, #1
 801ab56:	42b3      	cmp	r3, r6
 801ab58:	f6ff aedb 	blt.w	801a912 <__gethex+0x1ea>
 801ab5c:	f04f 0801 	mov.w	r8, #1
 801ab60:	e7c2      	b.n	801aae8 <__gethex+0x3c0>
 801ab62:	f015 051f 	ands.w	r5, r5, #31
 801ab66:	d0f9      	beq.n	801ab5c <__gethex+0x434>
 801ab68:	9b01      	ldr	r3, [sp, #4]
 801ab6a:	441a      	add	r2, r3
 801ab6c:	f1c5 0520 	rsb	r5, r5, #32
 801ab70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ab74:	f7fd fea4 	bl	80188c0 <__hi0bits>
 801ab78:	42a8      	cmp	r0, r5
 801ab7a:	dbe6      	blt.n	801ab4a <__gethex+0x422>
 801ab7c:	e7ee      	b.n	801ab5c <__gethex+0x434>
 801ab7e:	bf00      	nop
 801ab80:	0801cab1 	.word	0x0801cab1

0801ab84 <L_shift>:
 801ab84:	f1c2 0208 	rsb	r2, r2, #8
 801ab88:	0092      	lsls	r2, r2, #2
 801ab8a:	b570      	push	{r4, r5, r6, lr}
 801ab8c:	f1c2 0620 	rsb	r6, r2, #32
 801ab90:	6843      	ldr	r3, [r0, #4]
 801ab92:	6804      	ldr	r4, [r0, #0]
 801ab94:	fa03 f506 	lsl.w	r5, r3, r6
 801ab98:	432c      	orrs	r4, r5
 801ab9a:	40d3      	lsrs	r3, r2
 801ab9c:	6004      	str	r4, [r0, #0]
 801ab9e:	f840 3f04 	str.w	r3, [r0, #4]!
 801aba2:	4288      	cmp	r0, r1
 801aba4:	d3f4      	bcc.n	801ab90 <L_shift+0xc>
 801aba6:	bd70      	pop	{r4, r5, r6, pc}

0801aba8 <__match>:
 801aba8:	b530      	push	{r4, r5, lr}
 801abaa:	6803      	ldr	r3, [r0, #0]
 801abac:	3301      	adds	r3, #1
 801abae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801abb2:	b914      	cbnz	r4, 801abba <__match+0x12>
 801abb4:	6003      	str	r3, [r0, #0]
 801abb6:	2001      	movs	r0, #1
 801abb8:	bd30      	pop	{r4, r5, pc}
 801abba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801abc2:	2d19      	cmp	r5, #25
 801abc4:	bf98      	it	ls
 801abc6:	3220      	addls	r2, #32
 801abc8:	42a2      	cmp	r2, r4
 801abca:	d0f0      	beq.n	801abae <__match+0x6>
 801abcc:	2000      	movs	r0, #0
 801abce:	e7f3      	b.n	801abb8 <__match+0x10>

0801abd0 <__hexnan>:
 801abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd4:	680b      	ldr	r3, [r1, #0]
 801abd6:	6801      	ldr	r1, [r0, #0]
 801abd8:	115e      	asrs	r6, r3, #5
 801abda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801abde:	f013 031f 	ands.w	r3, r3, #31
 801abe2:	b087      	sub	sp, #28
 801abe4:	bf18      	it	ne
 801abe6:	3604      	addne	r6, #4
 801abe8:	2500      	movs	r5, #0
 801abea:	1f37      	subs	r7, r6, #4
 801abec:	4682      	mov	sl, r0
 801abee:	4690      	mov	r8, r2
 801abf0:	9301      	str	r3, [sp, #4]
 801abf2:	f846 5c04 	str.w	r5, [r6, #-4]
 801abf6:	46b9      	mov	r9, r7
 801abf8:	463c      	mov	r4, r7
 801abfa:	9502      	str	r5, [sp, #8]
 801abfc:	46ab      	mov	fp, r5
 801abfe:	784a      	ldrb	r2, [r1, #1]
 801ac00:	1c4b      	adds	r3, r1, #1
 801ac02:	9303      	str	r3, [sp, #12]
 801ac04:	b342      	cbz	r2, 801ac58 <__hexnan+0x88>
 801ac06:	4610      	mov	r0, r2
 801ac08:	9105      	str	r1, [sp, #20]
 801ac0a:	9204      	str	r2, [sp, #16]
 801ac0c:	f7ff fd76 	bl	801a6fc <__hexdig_fun>
 801ac10:	2800      	cmp	r0, #0
 801ac12:	d14f      	bne.n	801acb4 <__hexnan+0xe4>
 801ac14:	9a04      	ldr	r2, [sp, #16]
 801ac16:	9905      	ldr	r1, [sp, #20]
 801ac18:	2a20      	cmp	r2, #32
 801ac1a:	d818      	bhi.n	801ac4e <__hexnan+0x7e>
 801ac1c:	9b02      	ldr	r3, [sp, #8]
 801ac1e:	459b      	cmp	fp, r3
 801ac20:	dd13      	ble.n	801ac4a <__hexnan+0x7a>
 801ac22:	454c      	cmp	r4, r9
 801ac24:	d206      	bcs.n	801ac34 <__hexnan+0x64>
 801ac26:	2d07      	cmp	r5, #7
 801ac28:	dc04      	bgt.n	801ac34 <__hexnan+0x64>
 801ac2a:	462a      	mov	r2, r5
 801ac2c:	4649      	mov	r1, r9
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f7ff ffa8 	bl	801ab84 <L_shift>
 801ac34:	4544      	cmp	r4, r8
 801ac36:	d950      	bls.n	801acda <__hexnan+0x10a>
 801ac38:	2300      	movs	r3, #0
 801ac3a:	f1a4 0904 	sub.w	r9, r4, #4
 801ac3e:	f844 3c04 	str.w	r3, [r4, #-4]
 801ac42:	f8cd b008 	str.w	fp, [sp, #8]
 801ac46:	464c      	mov	r4, r9
 801ac48:	461d      	mov	r5, r3
 801ac4a:	9903      	ldr	r1, [sp, #12]
 801ac4c:	e7d7      	b.n	801abfe <__hexnan+0x2e>
 801ac4e:	2a29      	cmp	r2, #41	; 0x29
 801ac50:	d155      	bne.n	801acfe <__hexnan+0x12e>
 801ac52:	3102      	adds	r1, #2
 801ac54:	f8ca 1000 	str.w	r1, [sl]
 801ac58:	f1bb 0f00 	cmp.w	fp, #0
 801ac5c:	d04f      	beq.n	801acfe <__hexnan+0x12e>
 801ac5e:	454c      	cmp	r4, r9
 801ac60:	d206      	bcs.n	801ac70 <__hexnan+0xa0>
 801ac62:	2d07      	cmp	r5, #7
 801ac64:	dc04      	bgt.n	801ac70 <__hexnan+0xa0>
 801ac66:	462a      	mov	r2, r5
 801ac68:	4649      	mov	r1, r9
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f7ff ff8a 	bl	801ab84 <L_shift>
 801ac70:	4544      	cmp	r4, r8
 801ac72:	d934      	bls.n	801acde <__hexnan+0x10e>
 801ac74:	f1a8 0204 	sub.w	r2, r8, #4
 801ac78:	4623      	mov	r3, r4
 801ac7a:	f853 1b04 	ldr.w	r1, [r3], #4
 801ac7e:	f842 1f04 	str.w	r1, [r2, #4]!
 801ac82:	429f      	cmp	r7, r3
 801ac84:	d2f9      	bcs.n	801ac7a <__hexnan+0xaa>
 801ac86:	1b3b      	subs	r3, r7, r4
 801ac88:	f023 0303 	bic.w	r3, r3, #3
 801ac8c:	3304      	adds	r3, #4
 801ac8e:	3e03      	subs	r6, #3
 801ac90:	3401      	adds	r4, #1
 801ac92:	42a6      	cmp	r6, r4
 801ac94:	bf38      	it	cc
 801ac96:	2304      	movcc	r3, #4
 801ac98:	4443      	add	r3, r8
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	f843 2b04 	str.w	r2, [r3], #4
 801aca0:	429f      	cmp	r7, r3
 801aca2:	d2fb      	bcs.n	801ac9c <__hexnan+0xcc>
 801aca4:	683b      	ldr	r3, [r7, #0]
 801aca6:	b91b      	cbnz	r3, 801acb0 <__hexnan+0xe0>
 801aca8:	4547      	cmp	r7, r8
 801acaa:	d126      	bne.n	801acfa <__hexnan+0x12a>
 801acac:	2301      	movs	r3, #1
 801acae:	603b      	str	r3, [r7, #0]
 801acb0:	2005      	movs	r0, #5
 801acb2:	e025      	b.n	801ad00 <__hexnan+0x130>
 801acb4:	3501      	adds	r5, #1
 801acb6:	2d08      	cmp	r5, #8
 801acb8:	f10b 0b01 	add.w	fp, fp, #1
 801acbc:	dd06      	ble.n	801accc <__hexnan+0xfc>
 801acbe:	4544      	cmp	r4, r8
 801acc0:	d9c3      	bls.n	801ac4a <__hexnan+0x7a>
 801acc2:	2300      	movs	r3, #0
 801acc4:	f844 3c04 	str.w	r3, [r4, #-4]
 801acc8:	2501      	movs	r5, #1
 801acca:	3c04      	subs	r4, #4
 801accc:	6822      	ldr	r2, [r4, #0]
 801acce:	f000 000f 	and.w	r0, r0, #15
 801acd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801acd6:	6020      	str	r0, [r4, #0]
 801acd8:	e7b7      	b.n	801ac4a <__hexnan+0x7a>
 801acda:	2508      	movs	r5, #8
 801acdc:	e7b5      	b.n	801ac4a <__hexnan+0x7a>
 801acde:	9b01      	ldr	r3, [sp, #4]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d0df      	beq.n	801aca4 <__hexnan+0xd4>
 801ace4:	f1c3 0320 	rsb	r3, r3, #32
 801ace8:	f04f 32ff 	mov.w	r2, #4294967295
 801acec:	40da      	lsrs	r2, r3
 801acee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801acf2:	4013      	ands	r3, r2
 801acf4:	f846 3c04 	str.w	r3, [r6, #-4]
 801acf8:	e7d4      	b.n	801aca4 <__hexnan+0xd4>
 801acfa:	3f04      	subs	r7, #4
 801acfc:	e7d2      	b.n	801aca4 <__hexnan+0xd4>
 801acfe:	2004      	movs	r0, #4
 801ad00:	b007      	add	sp, #28
 801ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad06 <__ascii_mbtowc>:
 801ad06:	b082      	sub	sp, #8
 801ad08:	b901      	cbnz	r1, 801ad0c <__ascii_mbtowc+0x6>
 801ad0a:	a901      	add	r1, sp, #4
 801ad0c:	b142      	cbz	r2, 801ad20 <__ascii_mbtowc+0x1a>
 801ad0e:	b14b      	cbz	r3, 801ad24 <__ascii_mbtowc+0x1e>
 801ad10:	7813      	ldrb	r3, [r2, #0]
 801ad12:	600b      	str	r3, [r1, #0]
 801ad14:	7812      	ldrb	r2, [r2, #0]
 801ad16:	1e10      	subs	r0, r2, #0
 801ad18:	bf18      	it	ne
 801ad1a:	2001      	movne	r0, #1
 801ad1c:	b002      	add	sp, #8
 801ad1e:	4770      	bx	lr
 801ad20:	4610      	mov	r0, r2
 801ad22:	e7fb      	b.n	801ad1c <__ascii_mbtowc+0x16>
 801ad24:	f06f 0001 	mvn.w	r0, #1
 801ad28:	e7f8      	b.n	801ad1c <__ascii_mbtowc+0x16>

0801ad2a <_realloc_r>:
 801ad2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad2e:	4680      	mov	r8, r0
 801ad30:	4614      	mov	r4, r2
 801ad32:	460e      	mov	r6, r1
 801ad34:	b921      	cbnz	r1, 801ad40 <_realloc_r+0x16>
 801ad36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad3a:	4611      	mov	r1, r2
 801ad3c:	f7fd bc42 	b.w	80185c4 <_malloc_r>
 801ad40:	b92a      	cbnz	r2, 801ad4e <_realloc_r+0x24>
 801ad42:	f7fd fbcb 	bl	80184dc <_free_r>
 801ad46:	4625      	mov	r5, r4
 801ad48:	4628      	mov	r0, r5
 801ad4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad4e:	f000 f842 	bl	801add6 <_malloc_usable_size_r>
 801ad52:	4284      	cmp	r4, r0
 801ad54:	4607      	mov	r7, r0
 801ad56:	d802      	bhi.n	801ad5e <_realloc_r+0x34>
 801ad58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad5c:	d812      	bhi.n	801ad84 <_realloc_r+0x5a>
 801ad5e:	4621      	mov	r1, r4
 801ad60:	4640      	mov	r0, r8
 801ad62:	f7fd fc2f 	bl	80185c4 <_malloc_r>
 801ad66:	4605      	mov	r5, r0
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	d0ed      	beq.n	801ad48 <_realloc_r+0x1e>
 801ad6c:	42bc      	cmp	r4, r7
 801ad6e:	4622      	mov	r2, r4
 801ad70:	4631      	mov	r1, r6
 801ad72:	bf28      	it	cs
 801ad74:	463a      	movcs	r2, r7
 801ad76:	f7fc fd22 	bl	80177be <memcpy>
 801ad7a:	4631      	mov	r1, r6
 801ad7c:	4640      	mov	r0, r8
 801ad7e:	f7fd fbad 	bl	80184dc <_free_r>
 801ad82:	e7e1      	b.n	801ad48 <_realloc_r+0x1e>
 801ad84:	4635      	mov	r5, r6
 801ad86:	e7df      	b.n	801ad48 <_realloc_r+0x1e>

0801ad88 <__ascii_wctomb>:
 801ad88:	b149      	cbz	r1, 801ad9e <__ascii_wctomb+0x16>
 801ad8a:	2aff      	cmp	r2, #255	; 0xff
 801ad8c:	bf85      	ittet	hi
 801ad8e:	238a      	movhi	r3, #138	; 0x8a
 801ad90:	6003      	strhi	r3, [r0, #0]
 801ad92:	700a      	strbls	r2, [r1, #0]
 801ad94:	f04f 30ff 	movhi.w	r0, #4294967295
 801ad98:	bf98      	it	ls
 801ad9a:	2001      	movls	r0, #1
 801ad9c:	4770      	bx	lr
 801ad9e:	4608      	mov	r0, r1
 801ada0:	4770      	bx	lr
	...

0801ada4 <fiprintf>:
 801ada4:	b40e      	push	{r1, r2, r3}
 801ada6:	b503      	push	{r0, r1, lr}
 801ada8:	4601      	mov	r1, r0
 801adaa:	ab03      	add	r3, sp, #12
 801adac:	4805      	ldr	r0, [pc, #20]	; (801adc4 <fiprintf+0x20>)
 801adae:	f853 2b04 	ldr.w	r2, [r3], #4
 801adb2:	6800      	ldr	r0, [r0, #0]
 801adb4:	9301      	str	r3, [sp, #4]
 801adb6:	f7ff f957 	bl	801a068 <_vfiprintf_r>
 801adba:	b002      	add	sp, #8
 801adbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801adc0:	b003      	add	sp, #12
 801adc2:	4770      	bx	lr
 801adc4:	20000074 	.word	0x20000074

0801adc8 <abort>:
 801adc8:	b508      	push	{r3, lr}
 801adca:	2006      	movs	r0, #6
 801adcc:	f000 f834 	bl	801ae38 <raise>
 801add0:	2001      	movs	r0, #1
 801add2:	f7e9 fa57 	bl	8004284 <_exit>

0801add6 <_malloc_usable_size_r>:
 801add6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adda:	1f18      	subs	r0, r3, #4
 801addc:	2b00      	cmp	r3, #0
 801adde:	bfbc      	itt	lt
 801ade0:	580b      	ldrlt	r3, [r1, r0]
 801ade2:	18c0      	addlt	r0, r0, r3
 801ade4:	4770      	bx	lr

0801ade6 <_raise_r>:
 801ade6:	291f      	cmp	r1, #31
 801ade8:	b538      	push	{r3, r4, r5, lr}
 801adea:	4604      	mov	r4, r0
 801adec:	460d      	mov	r5, r1
 801adee:	d904      	bls.n	801adfa <_raise_r+0x14>
 801adf0:	2316      	movs	r3, #22
 801adf2:	6003      	str	r3, [r0, #0]
 801adf4:	f04f 30ff 	mov.w	r0, #4294967295
 801adf8:	bd38      	pop	{r3, r4, r5, pc}
 801adfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801adfc:	b112      	cbz	r2, 801ae04 <_raise_r+0x1e>
 801adfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae02:	b94b      	cbnz	r3, 801ae18 <_raise_r+0x32>
 801ae04:	4620      	mov	r0, r4
 801ae06:	f000 f831 	bl	801ae6c <_getpid_r>
 801ae0a:	462a      	mov	r2, r5
 801ae0c:	4601      	mov	r1, r0
 801ae0e:	4620      	mov	r0, r4
 801ae10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae14:	f000 b818 	b.w	801ae48 <_kill_r>
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	d00a      	beq.n	801ae32 <_raise_r+0x4c>
 801ae1c:	1c59      	adds	r1, r3, #1
 801ae1e:	d103      	bne.n	801ae28 <_raise_r+0x42>
 801ae20:	2316      	movs	r3, #22
 801ae22:	6003      	str	r3, [r0, #0]
 801ae24:	2001      	movs	r0, #1
 801ae26:	e7e7      	b.n	801adf8 <_raise_r+0x12>
 801ae28:	2400      	movs	r4, #0
 801ae2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ae2e:	4628      	mov	r0, r5
 801ae30:	4798      	blx	r3
 801ae32:	2000      	movs	r0, #0
 801ae34:	e7e0      	b.n	801adf8 <_raise_r+0x12>
	...

0801ae38 <raise>:
 801ae38:	4b02      	ldr	r3, [pc, #8]	; (801ae44 <raise+0xc>)
 801ae3a:	4601      	mov	r1, r0
 801ae3c:	6818      	ldr	r0, [r3, #0]
 801ae3e:	f7ff bfd2 	b.w	801ade6 <_raise_r>
 801ae42:	bf00      	nop
 801ae44:	20000074 	.word	0x20000074

0801ae48 <_kill_r>:
 801ae48:	b538      	push	{r3, r4, r5, lr}
 801ae4a:	4d07      	ldr	r5, [pc, #28]	; (801ae68 <_kill_r+0x20>)
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	4604      	mov	r4, r0
 801ae50:	4608      	mov	r0, r1
 801ae52:	4611      	mov	r1, r2
 801ae54:	602b      	str	r3, [r5, #0]
 801ae56:	f7e9 fa05 	bl	8004264 <_kill>
 801ae5a:	1c43      	adds	r3, r0, #1
 801ae5c:	d102      	bne.n	801ae64 <_kill_r+0x1c>
 801ae5e:	682b      	ldr	r3, [r5, #0]
 801ae60:	b103      	cbz	r3, 801ae64 <_kill_r+0x1c>
 801ae62:	6023      	str	r3, [r4, #0]
 801ae64:	bd38      	pop	{r3, r4, r5, pc}
 801ae66:	bf00      	nop
 801ae68:	20000418 	.word	0x20000418

0801ae6c <_getpid_r>:
 801ae6c:	f7e9 b9f2 	b.w	8004254 <_getpid>

0801ae70 <sqrt>:
 801ae70:	b538      	push	{r3, r4, r5, lr}
 801ae72:	ed2d 8b02 	vpush	{d8}
 801ae76:	ec55 4b10 	vmov	r4, r5, d0
 801ae7a:	f000 f8d1 	bl	801b020 <__ieee754_sqrt>
 801ae7e:	4622      	mov	r2, r4
 801ae80:	462b      	mov	r3, r5
 801ae82:	4620      	mov	r0, r4
 801ae84:	4629      	mov	r1, r5
 801ae86:	eeb0 8a40 	vmov.f32	s16, s0
 801ae8a:	eef0 8a60 	vmov.f32	s17, s1
 801ae8e:	f7e5 fe75 	bl	8000b7c <__aeabi_dcmpun>
 801ae92:	b990      	cbnz	r0, 801aeba <sqrt+0x4a>
 801ae94:	2200      	movs	r2, #0
 801ae96:	2300      	movs	r3, #0
 801ae98:	4620      	mov	r0, r4
 801ae9a:	4629      	mov	r1, r5
 801ae9c:	f7e5 fe46 	bl	8000b2c <__aeabi_dcmplt>
 801aea0:	b158      	cbz	r0, 801aeba <sqrt+0x4a>
 801aea2:	f7fc fc5f 	bl	8017764 <__errno>
 801aea6:	2321      	movs	r3, #33	; 0x21
 801aea8:	6003      	str	r3, [r0, #0]
 801aeaa:	2200      	movs	r2, #0
 801aeac:	2300      	movs	r3, #0
 801aeae:	4610      	mov	r0, r2
 801aeb0:	4619      	mov	r1, r3
 801aeb2:	f7e5 fcf3 	bl	800089c <__aeabi_ddiv>
 801aeb6:	ec41 0b18 	vmov	d8, r0, r1
 801aeba:	eeb0 0a48 	vmov.f32	s0, s16
 801aebe:	eef0 0a68 	vmov.f32	s1, s17
 801aec2:	ecbd 8b02 	vpop	{d8}
 801aec6:	bd38      	pop	{r3, r4, r5, pc}

0801aec8 <cos>:
 801aec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aeca:	ec53 2b10 	vmov	r2, r3, d0
 801aece:	4826      	ldr	r0, [pc, #152]	; (801af68 <cos+0xa0>)
 801aed0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801aed4:	4281      	cmp	r1, r0
 801aed6:	dc06      	bgt.n	801aee6 <cos+0x1e>
 801aed8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801af60 <cos+0x98>
 801aedc:	b005      	add	sp, #20
 801aede:	f85d eb04 	ldr.w	lr, [sp], #4
 801aee2:	f000 b979 	b.w	801b1d8 <__kernel_cos>
 801aee6:	4821      	ldr	r0, [pc, #132]	; (801af6c <cos+0xa4>)
 801aee8:	4281      	cmp	r1, r0
 801aeea:	dd09      	ble.n	801af00 <cos+0x38>
 801aeec:	ee10 0a10 	vmov	r0, s0
 801aef0:	4619      	mov	r1, r3
 801aef2:	f7e5 f9f1 	bl	80002d8 <__aeabi_dsub>
 801aef6:	ec41 0b10 	vmov	d0, r0, r1
 801aefa:	b005      	add	sp, #20
 801aefc:	f85d fb04 	ldr.w	pc, [sp], #4
 801af00:	4668      	mov	r0, sp
 801af02:	f000 faf1 	bl	801b4e8 <__ieee754_rem_pio2>
 801af06:	f000 0003 	and.w	r0, r0, #3
 801af0a:	2801      	cmp	r0, #1
 801af0c:	d00b      	beq.n	801af26 <cos+0x5e>
 801af0e:	2802      	cmp	r0, #2
 801af10:	d016      	beq.n	801af40 <cos+0x78>
 801af12:	b9e0      	cbnz	r0, 801af4e <cos+0x86>
 801af14:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af18:	ed9d 0b00 	vldr	d0, [sp]
 801af1c:	f000 f95c 	bl	801b1d8 <__kernel_cos>
 801af20:	ec51 0b10 	vmov	r0, r1, d0
 801af24:	e7e7      	b.n	801aef6 <cos+0x2e>
 801af26:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af2a:	ed9d 0b00 	vldr	d0, [sp]
 801af2e:	f000 fa1b 	bl	801b368 <__kernel_sin>
 801af32:	ec53 2b10 	vmov	r2, r3, d0
 801af36:	ee10 0a10 	vmov	r0, s0
 801af3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801af3e:	e7da      	b.n	801aef6 <cos+0x2e>
 801af40:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af44:	ed9d 0b00 	vldr	d0, [sp]
 801af48:	f000 f946 	bl	801b1d8 <__kernel_cos>
 801af4c:	e7f1      	b.n	801af32 <cos+0x6a>
 801af4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801af52:	ed9d 0b00 	vldr	d0, [sp]
 801af56:	2001      	movs	r0, #1
 801af58:	f000 fa06 	bl	801b368 <__kernel_sin>
 801af5c:	e7e0      	b.n	801af20 <cos+0x58>
 801af5e:	bf00      	nop
	...
 801af68:	3fe921fb 	.word	0x3fe921fb
 801af6c:	7fefffff 	.word	0x7fefffff

0801af70 <sin>:
 801af70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af72:	ec53 2b10 	vmov	r2, r3, d0
 801af76:	4828      	ldr	r0, [pc, #160]	; (801b018 <sin+0xa8>)
 801af78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801af7c:	4281      	cmp	r1, r0
 801af7e:	dc07      	bgt.n	801af90 <sin+0x20>
 801af80:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801b010 <sin+0xa0>
 801af84:	2000      	movs	r0, #0
 801af86:	b005      	add	sp, #20
 801af88:	f85d eb04 	ldr.w	lr, [sp], #4
 801af8c:	f000 b9ec 	b.w	801b368 <__kernel_sin>
 801af90:	4822      	ldr	r0, [pc, #136]	; (801b01c <sin+0xac>)
 801af92:	4281      	cmp	r1, r0
 801af94:	dd09      	ble.n	801afaa <sin+0x3a>
 801af96:	ee10 0a10 	vmov	r0, s0
 801af9a:	4619      	mov	r1, r3
 801af9c:	f7e5 f99c 	bl	80002d8 <__aeabi_dsub>
 801afa0:	ec41 0b10 	vmov	d0, r0, r1
 801afa4:	b005      	add	sp, #20
 801afa6:	f85d fb04 	ldr.w	pc, [sp], #4
 801afaa:	4668      	mov	r0, sp
 801afac:	f000 fa9c 	bl	801b4e8 <__ieee754_rem_pio2>
 801afb0:	f000 0003 	and.w	r0, r0, #3
 801afb4:	2801      	cmp	r0, #1
 801afb6:	d00c      	beq.n	801afd2 <sin+0x62>
 801afb8:	2802      	cmp	r0, #2
 801afba:	d011      	beq.n	801afe0 <sin+0x70>
 801afbc:	b9f0      	cbnz	r0, 801affc <sin+0x8c>
 801afbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801afc2:	ed9d 0b00 	vldr	d0, [sp]
 801afc6:	2001      	movs	r0, #1
 801afc8:	f000 f9ce 	bl	801b368 <__kernel_sin>
 801afcc:	ec51 0b10 	vmov	r0, r1, d0
 801afd0:	e7e6      	b.n	801afa0 <sin+0x30>
 801afd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801afd6:	ed9d 0b00 	vldr	d0, [sp]
 801afda:	f000 f8fd 	bl	801b1d8 <__kernel_cos>
 801afde:	e7f5      	b.n	801afcc <sin+0x5c>
 801afe0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801afe4:	ed9d 0b00 	vldr	d0, [sp]
 801afe8:	2001      	movs	r0, #1
 801afea:	f000 f9bd 	bl	801b368 <__kernel_sin>
 801afee:	ec53 2b10 	vmov	r2, r3, d0
 801aff2:	ee10 0a10 	vmov	r0, s0
 801aff6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801affa:	e7d1      	b.n	801afa0 <sin+0x30>
 801affc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b000:	ed9d 0b00 	vldr	d0, [sp]
 801b004:	f000 f8e8 	bl	801b1d8 <__kernel_cos>
 801b008:	e7f1      	b.n	801afee <sin+0x7e>
 801b00a:	bf00      	nop
 801b00c:	f3af 8000 	nop.w
	...
 801b018:	3fe921fb 	.word	0x3fe921fb
 801b01c:	7fefffff 	.word	0x7fefffff

0801b020 <__ieee754_sqrt>:
 801b020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b024:	ec55 4b10 	vmov	r4, r5, d0
 801b028:	4e67      	ldr	r6, [pc, #412]	; (801b1c8 <__ieee754_sqrt+0x1a8>)
 801b02a:	43ae      	bics	r6, r5
 801b02c:	ee10 0a10 	vmov	r0, s0
 801b030:	ee10 2a10 	vmov	r2, s0
 801b034:	4629      	mov	r1, r5
 801b036:	462b      	mov	r3, r5
 801b038:	d10d      	bne.n	801b056 <__ieee754_sqrt+0x36>
 801b03a:	f7e5 fb05 	bl	8000648 <__aeabi_dmul>
 801b03e:	4602      	mov	r2, r0
 801b040:	460b      	mov	r3, r1
 801b042:	4620      	mov	r0, r4
 801b044:	4629      	mov	r1, r5
 801b046:	f7e5 f949 	bl	80002dc <__adddf3>
 801b04a:	4604      	mov	r4, r0
 801b04c:	460d      	mov	r5, r1
 801b04e:	ec45 4b10 	vmov	d0, r4, r5
 801b052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b056:	2d00      	cmp	r5, #0
 801b058:	dc0b      	bgt.n	801b072 <__ieee754_sqrt+0x52>
 801b05a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b05e:	4326      	orrs	r6, r4
 801b060:	d0f5      	beq.n	801b04e <__ieee754_sqrt+0x2e>
 801b062:	b135      	cbz	r5, 801b072 <__ieee754_sqrt+0x52>
 801b064:	f7e5 f938 	bl	80002d8 <__aeabi_dsub>
 801b068:	4602      	mov	r2, r0
 801b06a:	460b      	mov	r3, r1
 801b06c:	f7e5 fc16 	bl	800089c <__aeabi_ddiv>
 801b070:	e7eb      	b.n	801b04a <__ieee754_sqrt+0x2a>
 801b072:	1509      	asrs	r1, r1, #20
 801b074:	f000 808d 	beq.w	801b192 <__ieee754_sqrt+0x172>
 801b078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b07c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801b080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b084:	07c9      	lsls	r1, r1, #31
 801b086:	bf5c      	itt	pl
 801b088:	005b      	lslpl	r3, r3, #1
 801b08a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801b08e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b092:	bf58      	it	pl
 801b094:	0052      	lslpl	r2, r2, #1
 801b096:	2500      	movs	r5, #0
 801b098:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b09c:	1076      	asrs	r6, r6, #1
 801b09e:	0052      	lsls	r2, r2, #1
 801b0a0:	f04f 0e16 	mov.w	lr, #22
 801b0a4:	46ac      	mov	ip, r5
 801b0a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b0aa:	eb0c 0001 	add.w	r0, ip, r1
 801b0ae:	4298      	cmp	r0, r3
 801b0b0:	bfde      	ittt	le
 801b0b2:	1a1b      	suble	r3, r3, r0
 801b0b4:	eb00 0c01 	addle.w	ip, r0, r1
 801b0b8:	186d      	addle	r5, r5, r1
 801b0ba:	005b      	lsls	r3, r3, #1
 801b0bc:	f1be 0e01 	subs.w	lr, lr, #1
 801b0c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b0c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b0c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b0cc:	d1ed      	bne.n	801b0aa <__ieee754_sqrt+0x8a>
 801b0ce:	4674      	mov	r4, lr
 801b0d0:	2720      	movs	r7, #32
 801b0d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b0d6:	4563      	cmp	r3, ip
 801b0d8:	eb01 000e 	add.w	r0, r1, lr
 801b0dc:	dc02      	bgt.n	801b0e4 <__ieee754_sqrt+0xc4>
 801b0de:	d113      	bne.n	801b108 <__ieee754_sqrt+0xe8>
 801b0e0:	4290      	cmp	r0, r2
 801b0e2:	d811      	bhi.n	801b108 <__ieee754_sqrt+0xe8>
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	eb00 0e01 	add.w	lr, r0, r1
 801b0ea:	da57      	bge.n	801b19c <__ieee754_sqrt+0x17c>
 801b0ec:	f1be 0f00 	cmp.w	lr, #0
 801b0f0:	db54      	blt.n	801b19c <__ieee754_sqrt+0x17c>
 801b0f2:	f10c 0801 	add.w	r8, ip, #1
 801b0f6:	eba3 030c 	sub.w	r3, r3, ip
 801b0fa:	4290      	cmp	r0, r2
 801b0fc:	bf88      	it	hi
 801b0fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801b102:	1a12      	subs	r2, r2, r0
 801b104:	440c      	add	r4, r1
 801b106:	46c4      	mov	ip, r8
 801b108:	005b      	lsls	r3, r3, #1
 801b10a:	3f01      	subs	r7, #1
 801b10c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801b110:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b114:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801b118:	d1dd      	bne.n	801b0d6 <__ieee754_sqrt+0xb6>
 801b11a:	4313      	orrs	r3, r2
 801b11c:	d01b      	beq.n	801b156 <__ieee754_sqrt+0x136>
 801b11e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801b1cc <__ieee754_sqrt+0x1ac>
 801b122:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801b1d0 <__ieee754_sqrt+0x1b0>
 801b126:	e9da 0100 	ldrd	r0, r1, [sl]
 801b12a:	e9db 2300 	ldrd	r2, r3, [fp]
 801b12e:	f7e5 f8d3 	bl	80002d8 <__aeabi_dsub>
 801b132:	e9da 8900 	ldrd	r8, r9, [sl]
 801b136:	4602      	mov	r2, r0
 801b138:	460b      	mov	r3, r1
 801b13a:	4640      	mov	r0, r8
 801b13c:	4649      	mov	r1, r9
 801b13e:	f7e5 fcff 	bl	8000b40 <__aeabi_dcmple>
 801b142:	b140      	cbz	r0, 801b156 <__ieee754_sqrt+0x136>
 801b144:	f1b4 3fff 	cmp.w	r4, #4294967295
 801b148:	e9da 0100 	ldrd	r0, r1, [sl]
 801b14c:	e9db 2300 	ldrd	r2, r3, [fp]
 801b150:	d126      	bne.n	801b1a0 <__ieee754_sqrt+0x180>
 801b152:	3501      	adds	r5, #1
 801b154:	463c      	mov	r4, r7
 801b156:	106a      	asrs	r2, r5, #1
 801b158:	0863      	lsrs	r3, r4, #1
 801b15a:	07e9      	lsls	r1, r5, #31
 801b15c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801b160:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801b164:	bf48      	it	mi
 801b166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801b16a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801b16e:	461c      	mov	r4, r3
 801b170:	e76d      	b.n	801b04e <__ieee754_sqrt+0x2e>
 801b172:	0ad3      	lsrs	r3, r2, #11
 801b174:	3815      	subs	r0, #21
 801b176:	0552      	lsls	r2, r2, #21
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d0fa      	beq.n	801b172 <__ieee754_sqrt+0x152>
 801b17c:	02dc      	lsls	r4, r3, #11
 801b17e:	d50a      	bpl.n	801b196 <__ieee754_sqrt+0x176>
 801b180:	f1c1 0420 	rsb	r4, r1, #32
 801b184:	fa22 f404 	lsr.w	r4, r2, r4
 801b188:	1e4d      	subs	r5, r1, #1
 801b18a:	408a      	lsls	r2, r1
 801b18c:	4323      	orrs	r3, r4
 801b18e:	1b41      	subs	r1, r0, r5
 801b190:	e772      	b.n	801b078 <__ieee754_sqrt+0x58>
 801b192:	4608      	mov	r0, r1
 801b194:	e7f0      	b.n	801b178 <__ieee754_sqrt+0x158>
 801b196:	005b      	lsls	r3, r3, #1
 801b198:	3101      	adds	r1, #1
 801b19a:	e7ef      	b.n	801b17c <__ieee754_sqrt+0x15c>
 801b19c:	46e0      	mov	r8, ip
 801b19e:	e7aa      	b.n	801b0f6 <__ieee754_sqrt+0xd6>
 801b1a0:	f7e5 f89c 	bl	80002dc <__adddf3>
 801b1a4:	e9da 8900 	ldrd	r8, r9, [sl]
 801b1a8:	4602      	mov	r2, r0
 801b1aa:	460b      	mov	r3, r1
 801b1ac:	4640      	mov	r0, r8
 801b1ae:	4649      	mov	r1, r9
 801b1b0:	f7e5 fcbc 	bl	8000b2c <__aeabi_dcmplt>
 801b1b4:	b120      	cbz	r0, 801b1c0 <__ieee754_sqrt+0x1a0>
 801b1b6:	1ca0      	adds	r0, r4, #2
 801b1b8:	bf08      	it	eq
 801b1ba:	3501      	addeq	r5, #1
 801b1bc:	3402      	adds	r4, #2
 801b1be:	e7ca      	b.n	801b156 <__ieee754_sqrt+0x136>
 801b1c0:	3401      	adds	r4, #1
 801b1c2:	f024 0401 	bic.w	r4, r4, #1
 801b1c6:	e7c6      	b.n	801b156 <__ieee754_sqrt+0x136>
 801b1c8:	7ff00000 	.word	0x7ff00000
 801b1cc:	200001e8 	.word	0x200001e8
 801b1d0:	200001f0 	.word	0x200001f0
 801b1d4:	00000000 	.word	0x00000000

0801b1d8 <__kernel_cos>:
 801b1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1dc:	ec57 6b10 	vmov	r6, r7, d0
 801b1e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b1e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b1e8:	ed8d 1b00 	vstr	d1, [sp]
 801b1ec:	da07      	bge.n	801b1fe <__kernel_cos+0x26>
 801b1ee:	ee10 0a10 	vmov	r0, s0
 801b1f2:	4639      	mov	r1, r7
 801b1f4:	f7e5 fcd8 	bl	8000ba8 <__aeabi_d2iz>
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	f000 8088 	beq.w	801b30e <__kernel_cos+0x136>
 801b1fe:	4632      	mov	r2, r6
 801b200:	463b      	mov	r3, r7
 801b202:	4630      	mov	r0, r6
 801b204:	4639      	mov	r1, r7
 801b206:	f7e5 fa1f 	bl	8000648 <__aeabi_dmul>
 801b20a:	4b51      	ldr	r3, [pc, #324]	; (801b350 <__kernel_cos+0x178>)
 801b20c:	2200      	movs	r2, #0
 801b20e:	4604      	mov	r4, r0
 801b210:	460d      	mov	r5, r1
 801b212:	f7e5 fa19 	bl	8000648 <__aeabi_dmul>
 801b216:	a340      	add	r3, pc, #256	; (adr r3, 801b318 <__kernel_cos+0x140>)
 801b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21c:	4682      	mov	sl, r0
 801b21e:	468b      	mov	fp, r1
 801b220:	4620      	mov	r0, r4
 801b222:	4629      	mov	r1, r5
 801b224:	f7e5 fa10 	bl	8000648 <__aeabi_dmul>
 801b228:	a33d      	add	r3, pc, #244	; (adr r3, 801b320 <__kernel_cos+0x148>)
 801b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b22e:	f7e5 f855 	bl	80002dc <__adddf3>
 801b232:	4622      	mov	r2, r4
 801b234:	462b      	mov	r3, r5
 801b236:	f7e5 fa07 	bl	8000648 <__aeabi_dmul>
 801b23a:	a33b      	add	r3, pc, #236	; (adr r3, 801b328 <__kernel_cos+0x150>)
 801b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b240:	f7e5 f84a 	bl	80002d8 <__aeabi_dsub>
 801b244:	4622      	mov	r2, r4
 801b246:	462b      	mov	r3, r5
 801b248:	f7e5 f9fe 	bl	8000648 <__aeabi_dmul>
 801b24c:	a338      	add	r3, pc, #224	; (adr r3, 801b330 <__kernel_cos+0x158>)
 801b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b252:	f7e5 f843 	bl	80002dc <__adddf3>
 801b256:	4622      	mov	r2, r4
 801b258:	462b      	mov	r3, r5
 801b25a:	f7e5 f9f5 	bl	8000648 <__aeabi_dmul>
 801b25e:	a336      	add	r3, pc, #216	; (adr r3, 801b338 <__kernel_cos+0x160>)
 801b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b264:	f7e5 f838 	bl	80002d8 <__aeabi_dsub>
 801b268:	4622      	mov	r2, r4
 801b26a:	462b      	mov	r3, r5
 801b26c:	f7e5 f9ec 	bl	8000648 <__aeabi_dmul>
 801b270:	a333      	add	r3, pc, #204	; (adr r3, 801b340 <__kernel_cos+0x168>)
 801b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b276:	f7e5 f831 	bl	80002dc <__adddf3>
 801b27a:	4622      	mov	r2, r4
 801b27c:	462b      	mov	r3, r5
 801b27e:	f7e5 f9e3 	bl	8000648 <__aeabi_dmul>
 801b282:	4622      	mov	r2, r4
 801b284:	462b      	mov	r3, r5
 801b286:	f7e5 f9df 	bl	8000648 <__aeabi_dmul>
 801b28a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b28e:	4604      	mov	r4, r0
 801b290:	460d      	mov	r5, r1
 801b292:	4630      	mov	r0, r6
 801b294:	4639      	mov	r1, r7
 801b296:	f7e5 f9d7 	bl	8000648 <__aeabi_dmul>
 801b29a:	460b      	mov	r3, r1
 801b29c:	4602      	mov	r2, r0
 801b29e:	4629      	mov	r1, r5
 801b2a0:	4620      	mov	r0, r4
 801b2a2:	f7e5 f819 	bl	80002d8 <__aeabi_dsub>
 801b2a6:	4b2b      	ldr	r3, [pc, #172]	; (801b354 <__kernel_cos+0x17c>)
 801b2a8:	4598      	cmp	r8, r3
 801b2aa:	4606      	mov	r6, r0
 801b2ac:	460f      	mov	r7, r1
 801b2ae:	dc10      	bgt.n	801b2d2 <__kernel_cos+0xfa>
 801b2b0:	4602      	mov	r2, r0
 801b2b2:	460b      	mov	r3, r1
 801b2b4:	4650      	mov	r0, sl
 801b2b6:	4659      	mov	r1, fp
 801b2b8:	f7e5 f80e 	bl	80002d8 <__aeabi_dsub>
 801b2bc:	460b      	mov	r3, r1
 801b2be:	4926      	ldr	r1, [pc, #152]	; (801b358 <__kernel_cos+0x180>)
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	2000      	movs	r0, #0
 801b2c4:	f7e5 f808 	bl	80002d8 <__aeabi_dsub>
 801b2c8:	ec41 0b10 	vmov	d0, r0, r1
 801b2cc:	b003      	add	sp, #12
 801b2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d2:	4b22      	ldr	r3, [pc, #136]	; (801b35c <__kernel_cos+0x184>)
 801b2d4:	4920      	ldr	r1, [pc, #128]	; (801b358 <__kernel_cos+0x180>)
 801b2d6:	4598      	cmp	r8, r3
 801b2d8:	bfcc      	ite	gt
 801b2da:	4d21      	ldrgt	r5, [pc, #132]	; (801b360 <__kernel_cos+0x188>)
 801b2dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b2e0:	2400      	movs	r4, #0
 801b2e2:	4622      	mov	r2, r4
 801b2e4:	462b      	mov	r3, r5
 801b2e6:	2000      	movs	r0, #0
 801b2e8:	f7e4 fff6 	bl	80002d8 <__aeabi_dsub>
 801b2ec:	4622      	mov	r2, r4
 801b2ee:	4680      	mov	r8, r0
 801b2f0:	4689      	mov	r9, r1
 801b2f2:	462b      	mov	r3, r5
 801b2f4:	4650      	mov	r0, sl
 801b2f6:	4659      	mov	r1, fp
 801b2f8:	f7e4 ffee 	bl	80002d8 <__aeabi_dsub>
 801b2fc:	4632      	mov	r2, r6
 801b2fe:	463b      	mov	r3, r7
 801b300:	f7e4 ffea 	bl	80002d8 <__aeabi_dsub>
 801b304:	4602      	mov	r2, r0
 801b306:	460b      	mov	r3, r1
 801b308:	4640      	mov	r0, r8
 801b30a:	4649      	mov	r1, r9
 801b30c:	e7da      	b.n	801b2c4 <__kernel_cos+0xec>
 801b30e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b348 <__kernel_cos+0x170>
 801b312:	e7db      	b.n	801b2cc <__kernel_cos+0xf4>
 801b314:	f3af 8000 	nop.w
 801b318:	be8838d4 	.word	0xbe8838d4
 801b31c:	bda8fae9 	.word	0xbda8fae9
 801b320:	bdb4b1c4 	.word	0xbdb4b1c4
 801b324:	3e21ee9e 	.word	0x3e21ee9e
 801b328:	809c52ad 	.word	0x809c52ad
 801b32c:	3e927e4f 	.word	0x3e927e4f
 801b330:	19cb1590 	.word	0x19cb1590
 801b334:	3efa01a0 	.word	0x3efa01a0
 801b338:	16c15177 	.word	0x16c15177
 801b33c:	3f56c16c 	.word	0x3f56c16c
 801b340:	5555554c 	.word	0x5555554c
 801b344:	3fa55555 	.word	0x3fa55555
 801b348:	00000000 	.word	0x00000000
 801b34c:	3ff00000 	.word	0x3ff00000
 801b350:	3fe00000 	.word	0x3fe00000
 801b354:	3fd33332 	.word	0x3fd33332
 801b358:	3ff00000 	.word	0x3ff00000
 801b35c:	3fe90000 	.word	0x3fe90000
 801b360:	3fd20000 	.word	0x3fd20000
 801b364:	00000000 	.word	0x00000000

0801b368 <__kernel_sin>:
 801b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b36c:	ed2d 8b04 	vpush	{d8-d9}
 801b370:	eeb0 8a41 	vmov.f32	s16, s2
 801b374:	eef0 8a61 	vmov.f32	s17, s3
 801b378:	ec55 4b10 	vmov	r4, r5, d0
 801b37c:	b083      	sub	sp, #12
 801b37e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b382:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b386:	9001      	str	r0, [sp, #4]
 801b388:	da06      	bge.n	801b398 <__kernel_sin+0x30>
 801b38a:	ee10 0a10 	vmov	r0, s0
 801b38e:	4629      	mov	r1, r5
 801b390:	f7e5 fc0a 	bl	8000ba8 <__aeabi_d2iz>
 801b394:	2800      	cmp	r0, #0
 801b396:	d051      	beq.n	801b43c <__kernel_sin+0xd4>
 801b398:	4622      	mov	r2, r4
 801b39a:	462b      	mov	r3, r5
 801b39c:	4620      	mov	r0, r4
 801b39e:	4629      	mov	r1, r5
 801b3a0:	f7e5 f952 	bl	8000648 <__aeabi_dmul>
 801b3a4:	4682      	mov	sl, r0
 801b3a6:	468b      	mov	fp, r1
 801b3a8:	4602      	mov	r2, r0
 801b3aa:	460b      	mov	r3, r1
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	f7e5 f94a 	bl	8000648 <__aeabi_dmul>
 801b3b4:	a341      	add	r3, pc, #260	; (adr r3, 801b4bc <__kernel_sin+0x154>)
 801b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ba:	4680      	mov	r8, r0
 801b3bc:	4689      	mov	r9, r1
 801b3be:	4650      	mov	r0, sl
 801b3c0:	4659      	mov	r1, fp
 801b3c2:	f7e5 f941 	bl	8000648 <__aeabi_dmul>
 801b3c6:	a33f      	add	r3, pc, #252	; (adr r3, 801b4c4 <__kernel_sin+0x15c>)
 801b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3cc:	f7e4 ff84 	bl	80002d8 <__aeabi_dsub>
 801b3d0:	4652      	mov	r2, sl
 801b3d2:	465b      	mov	r3, fp
 801b3d4:	f7e5 f938 	bl	8000648 <__aeabi_dmul>
 801b3d8:	a33c      	add	r3, pc, #240	; (adr r3, 801b4cc <__kernel_sin+0x164>)
 801b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3de:	f7e4 ff7d 	bl	80002dc <__adddf3>
 801b3e2:	4652      	mov	r2, sl
 801b3e4:	465b      	mov	r3, fp
 801b3e6:	f7e5 f92f 	bl	8000648 <__aeabi_dmul>
 801b3ea:	a33a      	add	r3, pc, #232	; (adr r3, 801b4d4 <__kernel_sin+0x16c>)
 801b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f0:	f7e4 ff72 	bl	80002d8 <__aeabi_dsub>
 801b3f4:	4652      	mov	r2, sl
 801b3f6:	465b      	mov	r3, fp
 801b3f8:	f7e5 f926 	bl	8000648 <__aeabi_dmul>
 801b3fc:	a337      	add	r3, pc, #220	; (adr r3, 801b4dc <__kernel_sin+0x174>)
 801b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b402:	f7e4 ff6b 	bl	80002dc <__adddf3>
 801b406:	9b01      	ldr	r3, [sp, #4]
 801b408:	4606      	mov	r6, r0
 801b40a:	460f      	mov	r7, r1
 801b40c:	b9eb      	cbnz	r3, 801b44a <__kernel_sin+0xe2>
 801b40e:	4602      	mov	r2, r0
 801b410:	460b      	mov	r3, r1
 801b412:	4650      	mov	r0, sl
 801b414:	4659      	mov	r1, fp
 801b416:	f7e5 f917 	bl	8000648 <__aeabi_dmul>
 801b41a:	a325      	add	r3, pc, #148	; (adr r3, 801b4b0 <__kernel_sin+0x148>)
 801b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b420:	f7e4 ff5a 	bl	80002d8 <__aeabi_dsub>
 801b424:	4642      	mov	r2, r8
 801b426:	464b      	mov	r3, r9
 801b428:	f7e5 f90e 	bl	8000648 <__aeabi_dmul>
 801b42c:	4602      	mov	r2, r0
 801b42e:	460b      	mov	r3, r1
 801b430:	4620      	mov	r0, r4
 801b432:	4629      	mov	r1, r5
 801b434:	f7e4 ff52 	bl	80002dc <__adddf3>
 801b438:	4604      	mov	r4, r0
 801b43a:	460d      	mov	r5, r1
 801b43c:	ec45 4b10 	vmov	d0, r4, r5
 801b440:	b003      	add	sp, #12
 801b442:	ecbd 8b04 	vpop	{d8-d9}
 801b446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b44a:	4b1b      	ldr	r3, [pc, #108]	; (801b4b8 <__kernel_sin+0x150>)
 801b44c:	ec51 0b18 	vmov	r0, r1, d8
 801b450:	2200      	movs	r2, #0
 801b452:	f7e5 f8f9 	bl	8000648 <__aeabi_dmul>
 801b456:	4632      	mov	r2, r6
 801b458:	ec41 0b19 	vmov	d9, r0, r1
 801b45c:	463b      	mov	r3, r7
 801b45e:	4640      	mov	r0, r8
 801b460:	4649      	mov	r1, r9
 801b462:	f7e5 f8f1 	bl	8000648 <__aeabi_dmul>
 801b466:	4602      	mov	r2, r0
 801b468:	460b      	mov	r3, r1
 801b46a:	ec51 0b19 	vmov	r0, r1, d9
 801b46e:	f7e4 ff33 	bl	80002d8 <__aeabi_dsub>
 801b472:	4652      	mov	r2, sl
 801b474:	465b      	mov	r3, fp
 801b476:	f7e5 f8e7 	bl	8000648 <__aeabi_dmul>
 801b47a:	ec53 2b18 	vmov	r2, r3, d8
 801b47e:	f7e4 ff2b 	bl	80002d8 <__aeabi_dsub>
 801b482:	a30b      	add	r3, pc, #44	; (adr r3, 801b4b0 <__kernel_sin+0x148>)
 801b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b488:	4606      	mov	r6, r0
 801b48a:	460f      	mov	r7, r1
 801b48c:	4640      	mov	r0, r8
 801b48e:	4649      	mov	r1, r9
 801b490:	f7e5 f8da 	bl	8000648 <__aeabi_dmul>
 801b494:	4602      	mov	r2, r0
 801b496:	460b      	mov	r3, r1
 801b498:	4630      	mov	r0, r6
 801b49a:	4639      	mov	r1, r7
 801b49c:	f7e4 ff1e 	bl	80002dc <__adddf3>
 801b4a0:	4602      	mov	r2, r0
 801b4a2:	460b      	mov	r3, r1
 801b4a4:	4620      	mov	r0, r4
 801b4a6:	4629      	mov	r1, r5
 801b4a8:	f7e4 ff16 	bl	80002d8 <__aeabi_dsub>
 801b4ac:	e7c4      	b.n	801b438 <__kernel_sin+0xd0>
 801b4ae:	bf00      	nop
 801b4b0:	55555549 	.word	0x55555549
 801b4b4:	3fc55555 	.word	0x3fc55555
 801b4b8:	3fe00000 	.word	0x3fe00000
 801b4bc:	5acfd57c 	.word	0x5acfd57c
 801b4c0:	3de5d93a 	.word	0x3de5d93a
 801b4c4:	8a2b9ceb 	.word	0x8a2b9ceb
 801b4c8:	3e5ae5e6 	.word	0x3e5ae5e6
 801b4cc:	57b1fe7d 	.word	0x57b1fe7d
 801b4d0:	3ec71de3 	.word	0x3ec71de3
 801b4d4:	19c161d5 	.word	0x19c161d5
 801b4d8:	3f2a01a0 	.word	0x3f2a01a0
 801b4dc:	1110f8a6 	.word	0x1110f8a6
 801b4e0:	3f811111 	.word	0x3f811111
 801b4e4:	00000000 	.word	0x00000000

0801b4e8 <__ieee754_rem_pio2>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	ed2d 8b02 	vpush	{d8}
 801b4f0:	ec55 4b10 	vmov	r4, r5, d0
 801b4f4:	4bca      	ldr	r3, [pc, #808]	; (801b820 <__ieee754_rem_pio2+0x338>)
 801b4f6:	b08b      	sub	sp, #44	; 0x2c
 801b4f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b4fc:	4598      	cmp	r8, r3
 801b4fe:	4682      	mov	sl, r0
 801b500:	9502      	str	r5, [sp, #8]
 801b502:	dc08      	bgt.n	801b516 <__ieee754_rem_pio2+0x2e>
 801b504:	2200      	movs	r2, #0
 801b506:	2300      	movs	r3, #0
 801b508:	ed80 0b00 	vstr	d0, [r0]
 801b50c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b510:	f04f 0b00 	mov.w	fp, #0
 801b514:	e028      	b.n	801b568 <__ieee754_rem_pio2+0x80>
 801b516:	4bc3      	ldr	r3, [pc, #780]	; (801b824 <__ieee754_rem_pio2+0x33c>)
 801b518:	4598      	cmp	r8, r3
 801b51a:	dc78      	bgt.n	801b60e <__ieee754_rem_pio2+0x126>
 801b51c:	9b02      	ldr	r3, [sp, #8]
 801b51e:	4ec2      	ldr	r6, [pc, #776]	; (801b828 <__ieee754_rem_pio2+0x340>)
 801b520:	2b00      	cmp	r3, #0
 801b522:	ee10 0a10 	vmov	r0, s0
 801b526:	a3b0      	add	r3, pc, #704	; (adr r3, 801b7e8 <__ieee754_rem_pio2+0x300>)
 801b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b52c:	4629      	mov	r1, r5
 801b52e:	dd39      	ble.n	801b5a4 <__ieee754_rem_pio2+0xbc>
 801b530:	f7e4 fed2 	bl	80002d8 <__aeabi_dsub>
 801b534:	45b0      	cmp	r8, r6
 801b536:	4604      	mov	r4, r0
 801b538:	460d      	mov	r5, r1
 801b53a:	d01b      	beq.n	801b574 <__ieee754_rem_pio2+0x8c>
 801b53c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x308>)
 801b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b542:	f7e4 fec9 	bl	80002d8 <__aeabi_dsub>
 801b546:	4602      	mov	r2, r0
 801b548:	460b      	mov	r3, r1
 801b54a:	e9ca 2300 	strd	r2, r3, [sl]
 801b54e:	4620      	mov	r0, r4
 801b550:	4629      	mov	r1, r5
 801b552:	f7e4 fec1 	bl	80002d8 <__aeabi_dsub>
 801b556:	a3a6      	add	r3, pc, #664	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x308>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	f7e4 febc 	bl	80002d8 <__aeabi_dsub>
 801b560:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b564:	f04f 0b01 	mov.w	fp, #1
 801b568:	4658      	mov	r0, fp
 801b56a:	b00b      	add	sp, #44	; 0x2c
 801b56c:	ecbd 8b02 	vpop	{d8}
 801b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b574:	a3a0      	add	r3, pc, #640	; (adr r3, 801b7f8 <__ieee754_rem_pio2+0x310>)
 801b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b57a:	f7e4 fead 	bl	80002d8 <__aeabi_dsub>
 801b57e:	a3a0      	add	r3, pc, #640	; (adr r3, 801b800 <__ieee754_rem_pio2+0x318>)
 801b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b584:	4604      	mov	r4, r0
 801b586:	460d      	mov	r5, r1
 801b588:	f7e4 fea6 	bl	80002d8 <__aeabi_dsub>
 801b58c:	4602      	mov	r2, r0
 801b58e:	460b      	mov	r3, r1
 801b590:	e9ca 2300 	strd	r2, r3, [sl]
 801b594:	4620      	mov	r0, r4
 801b596:	4629      	mov	r1, r5
 801b598:	f7e4 fe9e 	bl	80002d8 <__aeabi_dsub>
 801b59c:	a398      	add	r3, pc, #608	; (adr r3, 801b800 <__ieee754_rem_pio2+0x318>)
 801b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a2:	e7db      	b.n	801b55c <__ieee754_rem_pio2+0x74>
 801b5a4:	f7e4 fe9a 	bl	80002dc <__adddf3>
 801b5a8:	45b0      	cmp	r8, r6
 801b5aa:	4604      	mov	r4, r0
 801b5ac:	460d      	mov	r5, r1
 801b5ae:	d016      	beq.n	801b5de <__ieee754_rem_pio2+0xf6>
 801b5b0:	a38f      	add	r3, pc, #572	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x308>)
 801b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b6:	f7e4 fe91 	bl	80002dc <__adddf3>
 801b5ba:	4602      	mov	r2, r0
 801b5bc:	460b      	mov	r3, r1
 801b5be:	e9ca 2300 	strd	r2, r3, [sl]
 801b5c2:	4620      	mov	r0, r4
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	f7e4 fe87 	bl	80002d8 <__aeabi_dsub>
 801b5ca:	a389      	add	r3, pc, #548	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x308>)
 801b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d0:	f7e4 fe84 	bl	80002dc <__adddf3>
 801b5d4:	f04f 3bff 	mov.w	fp, #4294967295
 801b5d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5dc:	e7c4      	b.n	801b568 <__ieee754_rem_pio2+0x80>
 801b5de:	a386      	add	r3, pc, #536	; (adr r3, 801b7f8 <__ieee754_rem_pio2+0x310>)
 801b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e4:	f7e4 fe7a 	bl	80002dc <__adddf3>
 801b5e8:	a385      	add	r3, pc, #532	; (adr r3, 801b800 <__ieee754_rem_pio2+0x318>)
 801b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ee:	4604      	mov	r4, r0
 801b5f0:	460d      	mov	r5, r1
 801b5f2:	f7e4 fe73 	bl	80002dc <__adddf3>
 801b5f6:	4602      	mov	r2, r0
 801b5f8:	460b      	mov	r3, r1
 801b5fa:	e9ca 2300 	strd	r2, r3, [sl]
 801b5fe:	4620      	mov	r0, r4
 801b600:	4629      	mov	r1, r5
 801b602:	f7e4 fe69 	bl	80002d8 <__aeabi_dsub>
 801b606:	a37e      	add	r3, pc, #504	; (adr r3, 801b800 <__ieee754_rem_pio2+0x318>)
 801b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b60c:	e7e0      	b.n	801b5d0 <__ieee754_rem_pio2+0xe8>
 801b60e:	4b87      	ldr	r3, [pc, #540]	; (801b82c <__ieee754_rem_pio2+0x344>)
 801b610:	4598      	cmp	r8, r3
 801b612:	f300 80d8 	bgt.w	801b7c6 <__ieee754_rem_pio2+0x2de>
 801b616:	f000 f96d 	bl	801b8f4 <fabs>
 801b61a:	ec55 4b10 	vmov	r4, r5, d0
 801b61e:	ee10 0a10 	vmov	r0, s0
 801b622:	a379      	add	r3, pc, #484	; (adr r3, 801b808 <__ieee754_rem_pio2+0x320>)
 801b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b628:	4629      	mov	r1, r5
 801b62a:	f7e5 f80d 	bl	8000648 <__aeabi_dmul>
 801b62e:	4b80      	ldr	r3, [pc, #512]	; (801b830 <__ieee754_rem_pio2+0x348>)
 801b630:	2200      	movs	r2, #0
 801b632:	f7e4 fe53 	bl	80002dc <__adddf3>
 801b636:	f7e5 fab7 	bl	8000ba8 <__aeabi_d2iz>
 801b63a:	4683      	mov	fp, r0
 801b63c:	f7e4 ff9a 	bl	8000574 <__aeabi_i2d>
 801b640:	4602      	mov	r2, r0
 801b642:	460b      	mov	r3, r1
 801b644:	ec43 2b18 	vmov	d8, r2, r3
 801b648:	a367      	add	r3, pc, #412	; (adr r3, 801b7e8 <__ieee754_rem_pio2+0x300>)
 801b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b64e:	f7e4 fffb 	bl	8000648 <__aeabi_dmul>
 801b652:	4602      	mov	r2, r0
 801b654:	460b      	mov	r3, r1
 801b656:	4620      	mov	r0, r4
 801b658:	4629      	mov	r1, r5
 801b65a:	f7e4 fe3d 	bl	80002d8 <__aeabi_dsub>
 801b65e:	a364      	add	r3, pc, #400	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x308>)
 801b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b664:	4606      	mov	r6, r0
 801b666:	460f      	mov	r7, r1
 801b668:	ec51 0b18 	vmov	r0, r1, d8
 801b66c:	f7e4 ffec 	bl	8000648 <__aeabi_dmul>
 801b670:	f1bb 0f1f 	cmp.w	fp, #31
 801b674:	4604      	mov	r4, r0
 801b676:	460d      	mov	r5, r1
 801b678:	dc0d      	bgt.n	801b696 <__ieee754_rem_pio2+0x1ae>
 801b67a:	4b6e      	ldr	r3, [pc, #440]	; (801b834 <__ieee754_rem_pio2+0x34c>)
 801b67c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b684:	4543      	cmp	r3, r8
 801b686:	d006      	beq.n	801b696 <__ieee754_rem_pio2+0x1ae>
 801b688:	4622      	mov	r2, r4
 801b68a:	462b      	mov	r3, r5
 801b68c:	4630      	mov	r0, r6
 801b68e:	4639      	mov	r1, r7
 801b690:	f7e4 fe22 	bl	80002d8 <__aeabi_dsub>
 801b694:	e00e      	b.n	801b6b4 <__ieee754_rem_pio2+0x1cc>
 801b696:	462b      	mov	r3, r5
 801b698:	4622      	mov	r2, r4
 801b69a:	4630      	mov	r0, r6
 801b69c:	4639      	mov	r1, r7
 801b69e:	f7e4 fe1b 	bl	80002d8 <__aeabi_dsub>
 801b6a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b6a6:	9303      	str	r3, [sp, #12]
 801b6a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b6ac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801b6b0:	2b10      	cmp	r3, #16
 801b6b2:	dc02      	bgt.n	801b6ba <__ieee754_rem_pio2+0x1d2>
 801b6b4:	e9ca 0100 	strd	r0, r1, [sl]
 801b6b8:	e039      	b.n	801b72e <__ieee754_rem_pio2+0x246>
 801b6ba:	a34f      	add	r3, pc, #316	; (adr r3, 801b7f8 <__ieee754_rem_pio2+0x310>)
 801b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c0:	ec51 0b18 	vmov	r0, r1, d8
 801b6c4:	f7e4 ffc0 	bl	8000648 <__aeabi_dmul>
 801b6c8:	4604      	mov	r4, r0
 801b6ca:	460d      	mov	r5, r1
 801b6cc:	4602      	mov	r2, r0
 801b6ce:	460b      	mov	r3, r1
 801b6d0:	4630      	mov	r0, r6
 801b6d2:	4639      	mov	r1, r7
 801b6d4:	f7e4 fe00 	bl	80002d8 <__aeabi_dsub>
 801b6d8:	4602      	mov	r2, r0
 801b6da:	460b      	mov	r3, r1
 801b6dc:	4680      	mov	r8, r0
 801b6de:	4689      	mov	r9, r1
 801b6e0:	4630      	mov	r0, r6
 801b6e2:	4639      	mov	r1, r7
 801b6e4:	f7e4 fdf8 	bl	80002d8 <__aeabi_dsub>
 801b6e8:	4622      	mov	r2, r4
 801b6ea:	462b      	mov	r3, r5
 801b6ec:	f7e4 fdf4 	bl	80002d8 <__aeabi_dsub>
 801b6f0:	a343      	add	r3, pc, #268	; (adr r3, 801b800 <__ieee754_rem_pio2+0x318>)
 801b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f6:	4604      	mov	r4, r0
 801b6f8:	460d      	mov	r5, r1
 801b6fa:	ec51 0b18 	vmov	r0, r1, d8
 801b6fe:	f7e4 ffa3 	bl	8000648 <__aeabi_dmul>
 801b702:	4622      	mov	r2, r4
 801b704:	462b      	mov	r3, r5
 801b706:	f7e4 fde7 	bl	80002d8 <__aeabi_dsub>
 801b70a:	4602      	mov	r2, r0
 801b70c:	460b      	mov	r3, r1
 801b70e:	4604      	mov	r4, r0
 801b710:	460d      	mov	r5, r1
 801b712:	4640      	mov	r0, r8
 801b714:	4649      	mov	r1, r9
 801b716:	f7e4 fddf 	bl	80002d8 <__aeabi_dsub>
 801b71a:	9a03      	ldr	r2, [sp, #12]
 801b71c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b720:	1ad3      	subs	r3, r2, r3
 801b722:	2b31      	cmp	r3, #49	; 0x31
 801b724:	dc24      	bgt.n	801b770 <__ieee754_rem_pio2+0x288>
 801b726:	e9ca 0100 	strd	r0, r1, [sl]
 801b72a:	4646      	mov	r6, r8
 801b72c:	464f      	mov	r7, r9
 801b72e:	e9da 8900 	ldrd	r8, r9, [sl]
 801b732:	4630      	mov	r0, r6
 801b734:	4642      	mov	r2, r8
 801b736:	464b      	mov	r3, r9
 801b738:	4639      	mov	r1, r7
 801b73a:	f7e4 fdcd 	bl	80002d8 <__aeabi_dsub>
 801b73e:	462b      	mov	r3, r5
 801b740:	4622      	mov	r2, r4
 801b742:	f7e4 fdc9 	bl	80002d8 <__aeabi_dsub>
 801b746:	9b02      	ldr	r3, [sp, #8]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b74e:	f6bf af0b 	bge.w	801b568 <__ieee754_rem_pio2+0x80>
 801b752:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b756:	f8ca 3004 	str.w	r3, [sl, #4]
 801b75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b75e:	f8ca 8000 	str.w	r8, [sl]
 801b762:	f8ca 0008 	str.w	r0, [sl, #8]
 801b766:	f8ca 300c 	str.w	r3, [sl, #12]
 801b76a:	f1cb 0b00 	rsb	fp, fp, #0
 801b76e:	e6fb      	b.n	801b568 <__ieee754_rem_pio2+0x80>
 801b770:	a327      	add	r3, pc, #156	; (adr r3, 801b810 <__ieee754_rem_pio2+0x328>)
 801b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b776:	ec51 0b18 	vmov	r0, r1, d8
 801b77a:	f7e4 ff65 	bl	8000648 <__aeabi_dmul>
 801b77e:	4604      	mov	r4, r0
 801b780:	460d      	mov	r5, r1
 801b782:	4602      	mov	r2, r0
 801b784:	460b      	mov	r3, r1
 801b786:	4640      	mov	r0, r8
 801b788:	4649      	mov	r1, r9
 801b78a:	f7e4 fda5 	bl	80002d8 <__aeabi_dsub>
 801b78e:	4602      	mov	r2, r0
 801b790:	460b      	mov	r3, r1
 801b792:	4606      	mov	r6, r0
 801b794:	460f      	mov	r7, r1
 801b796:	4640      	mov	r0, r8
 801b798:	4649      	mov	r1, r9
 801b79a:	f7e4 fd9d 	bl	80002d8 <__aeabi_dsub>
 801b79e:	4622      	mov	r2, r4
 801b7a0:	462b      	mov	r3, r5
 801b7a2:	f7e4 fd99 	bl	80002d8 <__aeabi_dsub>
 801b7a6:	a31c      	add	r3, pc, #112	; (adr r3, 801b818 <__ieee754_rem_pio2+0x330>)
 801b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	460d      	mov	r5, r1
 801b7b0:	ec51 0b18 	vmov	r0, r1, d8
 801b7b4:	f7e4 ff48 	bl	8000648 <__aeabi_dmul>
 801b7b8:	4622      	mov	r2, r4
 801b7ba:	462b      	mov	r3, r5
 801b7bc:	f7e4 fd8c 	bl	80002d8 <__aeabi_dsub>
 801b7c0:	4604      	mov	r4, r0
 801b7c2:	460d      	mov	r5, r1
 801b7c4:	e760      	b.n	801b688 <__ieee754_rem_pio2+0x1a0>
 801b7c6:	4b1c      	ldr	r3, [pc, #112]	; (801b838 <__ieee754_rem_pio2+0x350>)
 801b7c8:	4598      	cmp	r8, r3
 801b7ca:	dd37      	ble.n	801b83c <__ieee754_rem_pio2+0x354>
 801b7cc:	ee10 2a10 	vmov	r2, s0
 801b7d0:	462b      	mov	r3, r5
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	4629      	mov	r1, r5
 801b7d6:	f7e4 fd7f 	bl	80002d8 <__aeabi_dsub>
 801b7da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b7de:	e9ca 0100 	strd	r0, r1, [sl]
 801b7e2:	e695      	b.n	801b510 <__ieee754_rem_pio2+0x28>
 801b7e4:	f3af 8000 	nop.w
 801b7e8:	54400000 	.word	0x54400000
 801b7ec:	3ff921fb 	.word	0x3ff921fb
 801b7f0:	1a626331 	.word	0x1a626331
 801b7f4:	3dd0b461 	.word	0x3dd0b461
 801b7f8:	1a600000 	.word	0x1a600000
 801b7fc:	3dd0b461 	.word	0x3dd0b461
 801b800:	2e037073 	.word	0x2e037073
 801b804:	3ba3198a 	.word	0x3ba3198a
 801b808:	6dc9c883 	.word	0x6dc9c883
 801b80c:	3fe45f30 	.word	0x3fe45f30
 801b810:	2e000000 	.word	0x2e000000
 801b814:	3ba3198a 	.word	0x3ba3198a
 801b818:	252049c1 	.word	0x252049c1
 801b81c:	397b839a 	.word	0x397b839a
 801b820:	3fe921fb 	.word	0x3fe921fb
 801b824:	4002d97b 	.word	0x4002d97b
 801b828:	3ff921fb 	.word	0x3ff921fb
 801b82c:	413921fb 	.word	0x413921fb
 801b830:	3fe00000 	.word	0x3fe00000
 801b834:	0801ce28 	.word	0x0801ce28
 801b838:	7fefffff 	.word	0x7fefffff
 801b83c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801b840:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801b844:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801b848:	4620      	mov	r0, r4
 801b84a:	460d      	mov	r5, r1
 801b84c:	f7e5 f9ac 	bl	8000ba8 <__aeabi_d2iz>
 801b850:	f7e4 fe90 	bl	8000574 <__aeabi_i2d>
 801b854:	4602      	mov	r2, r0
 801b856:	460b      	mov	r3, r1
 801b858:	4620      	mov	r0, r4
 801b85a:	4629      	mov	r1, r5
 801b85c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b860:	f7e4 fd3a 	bl	80002d8 <__aeabi_dsub>
 801b864:	4b21      	ldr	r3, [pc, #132]	; (801b8ec <__ieee754_rem_pio2+0x404>)
 801b866:	2200      	movs	r2, #0
 801b868:	f7e4 feee 	bl	8000648 <__aeabi_dmul>
 801b86c:	460d      	mov	r5, r1
 801b86e:	4604      	mov	r4, r0
 801b870:	f7e5 f99a 	bl	8000ba8 <__aeabi_d2iz>
 801b874:	f7e4 fe7e 	bl	8000574 <__aeabi_i2d>
 801b878:	4602      	mov	r2, r0
 801b87a:	460b      	mov	r3, r1
 801b87c:	4620      	mov	r0, r4
 801b87e:	4629      	mov	r1, r5
 801b880:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b884:	f7e4 fd28 	bl	80002d8 <__aeabi_dsub>
 801b888:	4b18      	ldr	r3, [pc, #96]	; (801b8ec <__ieee754_rem_pio2+0x404>)
 801b88a:	2200      	movs	r2, #0
 801b88c:	f7e4 fedc 	bl	8000648 <__aeabi_dmul>
 801b890:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b894:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b898:	2703      	movs	r7, #3
 801b89a:	2400      	movs	r4, #0
 801b89c:	2500      	movs	r5, #0
 801b89e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801b8a2:	4622      	mov	r2, r4
 801b8a4:	462b      	mov	r3, r5
 801b8a6:	46b9      	mov	r9, r7
 801b8a8:	3f01      	subs	r7, #1
 801b8aa:	f7e5 f935 	bl	8000b18 <__aeabi_dcmpeq>
 801b8ae:	2800      	cmp	r0, #0
 801b8b0:	d1f5      	bne.n	801b89e <__ieee754_rem_pio2+0x3b6>
 801b8b2:	4b0f      	ldr	r3, [pc, #60]	; (801b8f0 <__ieee754_rem_pio2+0x408>)
 801b8b4:	9301      	str	r3, [sp, #4]
 801b8b6:	2302      	movs	r3, #2
 801b8b8:	9300      	str	r3, [sp, #0]
 801b8ba:	4632      	mov	r2, r6
 801b8bc:	464b      	mov	r3, r9
 801b8be:	4651      	mov	r1, sl
 801b8c0:	a804      	add	r0, sp, #16
 801b8c2:	f000 f821 	bl	801b908 <__kernel_rem_pio2>
 801b8c6:	9b02      	ldr	r3, [sp, #8]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	4683      	mov	fp, r0
 801b8cc:	f6bf ae4c 	bge.w	801b568 <__ieee754_rem_pio2+0x80>
 801b8d0:	e9da 2100 	ldrd	r2, r1, [sl]
 801b8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8d8:	e9ca 2300 	strd	r2, r3, [sl]
 801b8dc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b8e8:	e73f      	b.n	801b76a <__ieee754_rem_pio2+0x282>
 801b8ea:	bf00      	nop
 801b8ec:	41700000 	.word	0x41700000
 801b8f0:	0801cea8 	.word	0x0801cea8

0801b8f4 <fabs>:
 801b8f4:	ec51 0b10 	vmov	r0, r1, d0
 801b8f8:	ee10 2a10 	vmov	r2, s0
 801b8fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b900:	ec43 2b10 	vmov	d0, r2, r3
 801b904:	4770      	bx	lr
	...

0801b908 <__kernel_rem_pio2>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	ed2d 8b02 	vpush	{d8}
 801b910:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801b914:	f112 0f14 	cmn.w	r2, #20
 801b918:	9306      	str	r3, [sp, #24]
 801b91a:	9104      	str	r1, [sp, #16]
 801b91c:	4bc2      	ldr	r3, [pc, #776]	; (801bc28 <__kernel_rem_pio2+0x320>)
 801b91e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801b920:	9009      	str	r0, [sp, #36]	; 0x24
 801b922:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	9b06      	ldr	r3, [sp, #24]
 801b92a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b92e:	bfa8      	it	ge
 801b930:	1ed4      	subge	r4, r2, #3
 801b932:	9305      	str	r3, [sp, #20]
 801b934:	bfb2      	itee	lt
 801b936:	2400      	movlt	r4, #0
 801b938:	2318      	movge	r3, #24
 801b93a:	fb94 f4f3 	sdivge	r4, r4, r3
 801b93e:	f06f 0317 	mvn.w	r3, #23
 801b942:	fb04 3303 	mla	r3, r4, r3, r3
 801b946:	eb03 0a02 	add.w	sl, r3, r2
 801b94a:	9b00      	ldr	r3, [sp, #0]
 801b94c:	9a05      	ldr	r2, [sp, #20]
 801b94e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801bc18 <__kernel_rem_pio2+0x310>
 801b952:	eb03 0802 	add.w	r8, r3, r2
 801b956:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b958:	1aa7      	subs	r7, r4, r2
 801b95a:	ae20      	add	r6, sp, #128	; 0x80
 801b95c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b960:	2500      	movs	r5, #0
 801b962:	4545      	cmp	r5, r8
 801b964:	dd13      	ble.n	801b98e <__kernel_rem_pio2+0x86>
 801b966:	9b06      	ldr	r3, [sp, #24]
 801b968:	aa20      	add	r2, sp, #128	; 0x80
 801b96a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b96e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801b972:	f04f 0800 	mov.w	r8, #0
 801b976:	9b00      	ldr	r3, [sp, #0]
 801b978:	4598      	cmp	r8, r3
 801b97a:	dc31      	bgt.n	801b9e0 <__kernel_rem_pio2+0xd8>
 801b97c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801bc18 <__kernel_rem_pio2+0x310>
 801b980:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b984:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b988:	462f      	mov	r7, r5
 801b98a:	2600      	movs	r6, #0
 801b98c:	e01b      	b.n	801b9c6 <__kernel_rem_pio2+0xbe>
 801b98e:	42ef      	cmn	r7, r5
 801b990:	d407      	bmi.n	801b9a2 <__kernel_rem_pio2+0x9a>
 801b992:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b996:	f7e4 fded 	bl	8000574 <__aeabi_i2d>
 801b99a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b99e:	3501      	adds	r5, #1
 801b9a0:	e7df      	b.n	801b962 <__kernel_rem_pio2+0x5a>
 801b9a2:	ec51 0b18 	vmov	r0, r1, d8
 801b9a6:	e7f8      	b.n	801b99a <__kernel_rem_pio2+0x92>
 801b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b9ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b9b0:	f7e4 fe4a 	bl	8000648 <__aeabi_dmul>
 801b9b4:	4602      	mov	r2, r0
 801b9b6:	460b      	mov	r3, r1
 801b9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9bc:	f7e4 fc8e 	bl	80002dc <__adddf3>
 801b9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9c4:	3601      	adds	r6, #1
 801b9c6:	9b05      	ldr	r3, [sp, #20]
 801b9c8:	429e      	cmp	r6, r3
 801b9ca:	f1a7 0708 	sub.w	r7, r7, #8
 801b9ce:	ddeb      	ble.n	801b9a8 <__kernel_rem_pio2+0xa0>
 801b9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b9d4:	f108 0801 	add.w	r8, r8, #1
 801b9d8:	ecab 7b02 	vstmia	fp!, {d7}
 801b9dc:	3508      	adds	r5, #8
 801b9de:	e7ca      	b.n	801b976 <__kernel_rem_pio2+0x6e>
 801b9e0:	9b00      	ldr	r3, [sp, #0]
 801b9e2:	aa0c      	add	r2, sp, #48	; 0x30
 801b9e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b9e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9ea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801b9ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b9f0:	9c00      	ldr	r4, [sp, #0]
 801b9f2:	930a      	str	r3, [sp, #40]	; 0x28
 801b9f4:	00e3      	lsls	r3, r4, #3
 801b9f6:	9308      	str	r3, [sp, #32]
 801b9f8:	ab98      	add	r3, sp, #608	; 0x260
 801b9fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b9fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801ba02:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ba06:	ab70      	add	r3, sp, #448	; 0x1c0
 801ba08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801ba0c:	46c3      	mov	fp, r8
 801ba0e:	46a1      	mov	r9, r4
 801ba10:	f1b9 0f00 	cmp.w	r9, #0
 801ba14:	f1a5 0508 	sub.w	r5, r5, #8
 801ba18:	dc77      	bgt.n	801bb0a <__kernel_rem_pio2+0x202>
 801ba1a:	ec47 6b10 	vmov	d0, r6, r7
 801ba1e:	4650      	mov	r0, sl
 801ba20:	f000 fac2 	bl	801bfa8 <scalbn>
 801ba24:	ec57 6b10 	vmov	r6, r7, d0
 801ba28:	2200      	movs	r2, #0
 801ba2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ba2e:	ee10 0a10 	vmov	r0, s0
 801ba32:	4639      	mov	r1, r7
 801ba34:	f7e4 fe08 	bl	8000648 <__aeabi_dmul>
 801ba38:	ec41 0b10 	vmov	d0, r0, r1
 801ba3c:	f000 fb34 	bl	801c0a8 <floor>
 801ba40:	4b7a      	ldr	r3, [pc, #488]	; (801bc2c <__kernel_rem_pio2+0x324>)
 801ba42:	ec51 0b10 	vmov	r0, r1, d0
 801ba46:	2200      	movs	r2, #0
 801ba48:	f7e4 fdfe 	bl	8000648 <__aeabi_dmul>
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	460b      	mov	r3, r1
 801ba50:	4630      	mov	r0, r6
 801ba52:	4639      	mov	r1, r7
 801ba54:	f7e4 fc40 	bl	80002d8 <__aeabi_dsub>
 801ba58:	460f      	mov	r7, r1
 801ba5a:	4606      	mov	r6, r0
 801ba5c:	f7e5 f8a4 	bl	8000ba8 <__aeabi_d2iz>
 801ba60:	9002      	str	r0, [sp, #8]
 801ba62:	f7e4 fd87 	bl	8000574 <__aeabi_i2d>
 801ba66:	4602      	mov	r2, r0
 801ba68:	460b      	mov	r3, r1
 801ba6a:	4630      	mov	r0, r6
 801ba6c:	4639      	mov	r1, r7
 801ba6e:	f7e4 fc33 	bl	80002d8 <__aeabi_dsub>
 801ba72:	f1ba 0f00 	cmp.w	sl, #0
 801ba76:	4606      	mov	r6, r0
 801ba78:	460f      	mov	r7, r1
 801ba7a:	dd6d      	ble.n	801bb58 <__kernel_rem_pio2+0x250>
 801ba7c:	1e61      	subs	r1, r4, #1
 801ba7e:	ab0c      	add	r3, sp, #48	; 0x30
 801ba80:	9d02      	ldr	r5, [sp, #8]
 801ba82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba86:	f1ca 0018 	rsb	r0, sl, #24
 801ba8a:	fa43 f200 	asr.w	r2, r3, r0
 801ba8e:	4415      	add	r5, r2
 801ba90:	4082      	lsls	r2, r0
 801ba92:	1a9b      	subs	r3, r3, r2
 801ba94:	aa0c      	add	r2, sp, #48	; 0x30
 801ba96:	9502      	str	r5, [sp, #8]
 801ba98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ba9c:	f1ca 0217 	rsb	r2, sl, #23
 801baa0:	fa43 fb02 	asr.w	fp, r3, r2
 801baa4:	f1bb 0f00 	cmp.w	fp, #0
 801baa8:	dd65      	ble.n	801bb76 <__kernel_rem_pio2+0x26e>
 801baaa:	9b02      	ldr	r3, [sp, #8]
 801baac:	2200      	movs	r2, #0
 801baae:	3301      	adds	r3, #1
 801bab0:	9302      	str	r3, [sp, #8]
 801bab2:	4615      	mov	r5, r2
 801bab4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bab8:	4294      	cmp	r4, r2
 801baba:	f300 809f 	bgt.w	801bbfc <__kernel_rem_pio2+0x2f4>
 801babe:	f1ba 0f00 	cmp.w	sl, #0
 801bac2:	dd07      	ble.n	801bad4 <__kernel_rem_pio2+0x1cc>
 801bac4:	f1ba 0f01 	cmp.w	sl, #1
 801bac8:	f000 80c1 	beq.w	801bc4e <__kernel_rem_pio2+0x346>
 801bacc:	f1ba 0f02 	cmp.w	sl, #2
 801bad0:	f000 80c7 	beq.w	801bc62 <__kernel_rem_pio2+0x35a>
 801bad4:	f1bb 0f02 	cmp.w	fp, #2
 801bad8:	d14d      	bne.n	801bb76 <__kernel_rem_pio2+0x26e>
 801bada:	4632      	mov	r2, r6
 801badc:	463b      	mov	r3, r7
 801bade:	4954      	ldr	r1, [pc, #336]	; (801bc30 <__kernel_rem_pio2+0x328>)
 801bae0:	2000      	movs	r0, #0
 801bae2:	f7e4 fbf9 	bl	80002d8 <__aeabi_dsub>
 801bae6:	4606      	mov	r6, r0
 801bae8:	460f      	mov	r7, r1
 801baea:	2d00      	cmp	r5, #0
 801baec:	d043      	beq.n	801bb76 <__kernel_rem_pio2+0x26e>
 801baee:	4650      	mov	r0, sl
 801baf0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801bc20 <__kernel_rem_pio2+0x318>
 801baf4:	f000 fa58 	bl	801bfa8 <scalbn>
 801baf8:	4630      	mov	r0, r6
 801bafa:	4639      	mov	r1, r7
 801bafc:	ec53 2b10 	vmov	r2, r3, d0
 801bb00:	f7e4 fbea 	bl	80002d8 <__aeabi_dsub>
 801bb04:	4606      	mov	r6, r0
 801bb06:	460f      	mov	r7, r1
 801bb08:	e035      	b.n	801bb76 <__kernel_rem_pio2+0x26e>
 801bb0a:	4b4a      	ldr	r3, [pc, #296]	; (801bc34 <__kernel_rem_pio2+0x32c>)
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	4630      	mov	r0, r6
 801bb10:	4639      	mov	r1, r7
 801bb12:	f7e4 fd99 	bl	8000648 <__aeabi_dmul>
 801bb16:	f7e5 f847 	bl	8000ba8 <__aeabi_d2iz>
 801bb1a:	f7e4 fd2b 	bl	8000574 <__aeabi_i2d>
 801bb1e:	4602      	mov	r2, r0
 801bb20:	460b      	mov	r3, r1
 801bb22:	ec43 2b18 	vmov	d8, r2, r3
 801bb26:	4b44      	ldr	r3, [pc, #272]	; (801bc38 <__kernel_rem_pio2+0x330>)
 801bb28:	2200      	movs	r2, #0
 801bb2a:	f7e4 fd8d 	bl	8000648 <__aeabi_dmul>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	460b      	mov	r3, r1
 801bb32:	4630      	mov	r0, r6
 801bb34:	4639      	mov	r1, r7
 801bb36:	f7e4 fbcf 	bl	80002d8 <__aeabi_dsub>
 801bb3a:	f7e5 f835 	bl	8000ba8 <__aeabi_d2iz>
 801bb3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bb42:	f84b 0b04 	str.w	r0, [fp], #4
 801bb46:	ec51 0b18 	vmov	r0, r1, d8
 801bb4a:	f7e4 fbc7 	bl	80002dc <__adddf3>
 801bb4e:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb52:	4606      	mov	r6, r0
 801bb54:	460f      	mov	r7, r1
 801bb56:	e75b      	b.n	801ba10 <__kernel_rem_pio2+0x108>
 801bb58:	d106      	bne.n	801bb68 <__kernel_rem_pio2+0x260>
 801bb5a:	1e63      	subs	r3, r4, #1
 801bb5c:	aa0c      	add	r2, sp, #48	; 0x30
 801bb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb62:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801bb66:	e79d      	b.n	801baa4 <__kernel_rem_pio2+0x19c>
 801bb68:	4b34      	ldr	r3, [pc, #208]	; (801bc3c <__kernel_rem_pio2+0x334>)
 801bb6a:	2200      	movs	r2, #0
 801bb6c:	f7e4 fff2 	bl	8000b54 <__aeabi_dcmpge>
 801bb70:	2800      	cmp	r0, #0
 801bb72:	d140      	bne.n	801bbf6 <__kernel_rem_pio2+0x2ee>
 801bb74:	4683      	mov	fp, r0
 801bb76:	2200      	movs	r2, #0
 801bb78:	2300      	movs	r3, #0
 801bb7a:	4630      	mov	r0, r6
 801bb7c:	4639      	mov	r1, r7
 801bb7e:	f7e4 ffcb 	bl	8000b18 <__aeabi_dcmpeq>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	f000 80c1 	beq.w	801bd0a <__kernel_rem_pio2+0x402>
 801bb88:	1e65      	subs	r5, r4, #1
 801bb8a:	462b      	mov	r3, r5
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	9900      	ldr	r1, [sp, #0]
 801bb90:	428b      	cmp	r3, r1
 801bb92:	da6d      	bge.n	801bc70 <__kernel_rem_pio2+0x368>
 801bb94:	2a00      	cmp	r2, #0
 801bb96:	f000 808a 	beq.w	801bcae <__kernel_rem_pio2+0x3a6>
 801bb9a:	ab0c      	add	r3, sp, #48	; 0x30
 801bb9c:	f1aa 0a18 	sub.w	sl, sl, #24
 801bba0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	f000 80ae 	beq.w	801bd06 <__kernel_rem_pio2+0x3fe>
 801bbaa:	4650      	mov	r0, sl
 801bbac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801bc20 <__kernel_rem_pio2+0x318>
 801bbb0:	f000 f9fa 	bl	801bfa8 <scalbn>
 801bbb4:	1c6b      	adds	r3, r5, #1
 801bbb6:	00da      	lsls	r2, r3, #3
 801bbb8:	9205      	str	r2, [sp, #20]
 801bbba:	ec57 6b10 	vmov	r6, r7, d0
 801bbbe:	aa70      	add	r2, sp, #448	; 0x1c0
 801bbc0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801bc34 <__kernel_rem_pio2+0x32c>
 801bbc4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801bbc8:	462c      	mov	r4, r5
 801bbca:	f04f 0800 	mov.w	r8, #0
 801bbce:	2c00      	cmp	r4, #0
 801bbd0:	f280 80d4 	bge.w	801bd7c <__kernel_rem_pio2+0x474>
 801bbd4:	462c      	mov	r4, r5
 801bbd6:	2c00      	cmp	r4, #0
 801bbd8:	f2c0 8102 	blt.w	801bde0 <__kernel_rem_pio2+0x4d8>
 801bbdc:	4b18      	ldr	r3, [pc, #96]	; (801bc40 <__kernel_rem_pio2+0x338>)
 801bbde:	461e      	mov	r6, r3
 801bbe0:	ab70      	add	r3, sp, #448	; 0x1c0
 801bbe2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801bbe6:	1b2b      	subs	r3, r5, r4
 801bbe8:	f04f 0900 	mov.w	r9, #0
 801bbec:	f04f 0a00 	mov.w	sl, #0
 801bbf0:	2700      	movs	r7, #0
 801bbf2:	9306      	str	r3, [sp, #24]
 801bbf4:	e0e6      	b.n	801bdc4 <__kernel_rem_pio2+0x4bc>
 801bbf6:	f04f 0b02 	mov.w	fp, #2
 801bbfa:	e756      	b.n	801baaa <__kernel_rem_pio2+0x1a2>
 801bbfc:	f8d8 3000 	ldr.w	r3, [r8]
 801bc00:	bb05      	cbnz	r5, 801bc44 <__kernel_rem_pio2+0x33c>
 801bc02:	b123      	cbz	r3, 801bc0e <__kernel_rem_pio2+0x306>
 801bc04:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bc08:	f8c8 3000 	str.w	r3, [r8]
 801bc0c:	2301      	movs	r3, #1
 801bc0e:	3201      	adds	r2, #1
 801bc10:	f108 0804 	add.w	r8, r8, #4
 801bc14:	461d      	mov	r5, r3
 801bc16:	e74f      	b.n	801bab8 <__kernel_rem_pio2+0x1b0>
	...
 801bc24:	3ff00000 	.word	0x3ff00000
 801bc28:	0801cff0 	.word	0x0801cff0
 801bc2c:	40200000 	.word	0x40200000
 801bc30:	3ff00000 	.word	0x3ff00000
 801bc34:	3e700000 	.word	0x3e700000
 801bc38:	41700000 	.word	0x41700000
 801bc3c:	3fe00000 	.word	0x3fe00000
 801bc40:	0801cfb0 	.word	0x0801cfb0
 801bc44:	1acb      	subs	r3, r1, r3
 801bc46:	f8c8 3000 	str.w	r3, [r8]
 801bc4a:	462b      	mov	r3, r5
 801bc4c:	e7df      	b.n	801bc0e <__kernel_rem_pio2+0x306>
 801bc4e:	1e62      	subs	r2, r4, #1
 801bc50:	ab0c      	add	r3, sp, #48	; 0x30
 801bc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bc5a:	a90c      	add	r1, sp, #48	; 0x30
 801bc5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bc60:	e738      	b.n	801bad4 <__kernel_rem_pio2+0x1cc>
 801bc62:	1e62      	subs	r2, r4, #1
 801bc64:	ab0c      	add	r3, sp, #48	; 0x30
 801bc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bc6e:	e7f4      	b.n	801bc5a <__kernel_rem_pio2+0x352>
 801bc70:	a90c      	add	r1, sp, #48	; 0x30
 801bc72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bc76:	3b01      	subs	r3, #1
 801bc78:	430a      	orrs	r2, r1
 801bc7a:	e788      	b.n	801bb8e <__kernel_rem_pio2+0x286>
 801bc7c:	3301      	adds	r3, #1
 801bc7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bc82:	2900      	cmp	r1, #0
 801bc84:	d0fa      	beq.n	801bc7c <__kernel_rem_pio2+0x374>
 801bc86:	9a08      	ldr	r2, [sp, #32]
 801bc88:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801bc8c:	446a      	add	r2, sp
 801bc8e:	3a98      	subs	r2, #152	; 0x98
 801bc90:	9208      	str	r2, [sp, #32]
 801bc92:	9a06      	ldr	r2, [sp, #24]
 801bc94:	a920      	add	r1, sp, #128	; 0x80
 801bc96:	18a2      	adds	r2, r4, r2
 801bc98:	18e3      	adds	r3, r4, r3
 801bc9a:	f104 0801 	add.w	r8, r4, #1
 801bc9e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801bca2:	9302      	str	r3, [sp, #8]
 801bca4:	9b02      	ldr	r3, [sp, #8]
 801bca6:	4543      	cmp	r3, r8
 801bca8:	da04      	bge.n	801bcb4 <__kernel_rem_pio2+0x3ac>
 801bcaa:	461c      	mov	r4, r3
 801bcac:	e6a2      	b.n	801b9f4 <__kernel_rem_pio2+0xec>
 801bcae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	e7e4      	b.n	801bc7e <__kernel_rem_pio2+0x376>
 801bcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcb6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bcba:	f7e4 fc5b 	bl	8000574 <__aeabi_i2d>
 801bcbe:	e8e5 0102 	strd	r0, r1, [r5], #8
 801bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc4:	46ab      	mov	fp, r5
 801bcc6:	461c      	mov	r4, r3
 801bcc8:	f04f 0900 	mov.w	r9, #0
 801bccc:	2600      	movs	r6, #0
 801bcce:	2700      	movs	r7, #0
 801bcd0:	9b05      	ldr	r3, [sp, #20]
 801bcd2:	4599      	cmp	r9, r3
 801bcd4:	dd06      	ble.n	801bce4 <__kernel_rem_pio2+0x3dc>
 801bcd6:	9b08      	ldr	r3, [sp, #32]
 801bcd8:	e8e3 6702 	strd	r6, r7, [r3], #8
 801bcdc:	f108 0801 	add.w	r8, r8, #1
 801bce0:	9308      	str	r3, [sp, #32]
 801bce2:	e7df      	b.n	801bca4 <__kernel_rem_pio2+0x39c>
 801bce4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bce8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bcec:	f7e4 fcac 	bl	8000648 <__aeabi_dmul>
 801bcf0:	4602      	mov	r2, r0
 801bcf2:	460b      	mov	r3, r1
 801bcf4:	4630      	mov	r0, r6
 801bcf6:	4639      	mov	r1, r7
 801bcf8:	f7e4 faf0 	bl	80002dc <__adddf3>
 801bcfc:	f109 0901 	add.w	r9, r9, #1
 801bd00:	4606      	mov	r6, r0
 801bd02:	460f      	mov	r7, r1
 801bd04:	e7e4      	b.n	801bcd0 <__kernel_rem_pio2+0x3c8>
 801bd06:	3d01      	subs	r5, #1
 801bd08:	e747      	b.n	801bb9a <__kernel_rem_pio2+0x292>
 801bd0a:	ec47 6b10 	vmov	d0, r6, r7
 801bd0e:	f1ca 0000 	rsb	r0, sl, #0
 801bd12:	f000 f949 	bl	801bfa8 <scalbn>
 801bd16:	ec57 6b10 	vmov	r6, r7, d0
 801bd1a:	4ba0      	ldr	r3, [pc, #640]	; (801bf9c <__kernel_rem_pio2+0x694>)
 801bd1c:	ee10 0a10 	vmov	r0, s0
 801bd20:	2200      	movs	r2, #0
 801bd22:	4639      	mov	r1, r7
 801bd24:	f7e4 ff16 	bl	8000b54 <__aeabi_dcmpge>
 801bd28:	b1f8      	cbz	r0, 801bd6a <__kernel_rem_pio2+0x462>
 801bd2a:	4b9d      	ldr	r3, [pc, #628]	; (801bfa0 <__kernel_rem_pio2+0x698>)
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	4630      	mov	r0, r6
 801bd30:	4639      	mov	r1, r7
 801bd32:	f7e4 fc89 	bl	8000648 <__aeabi_dmul>
 801bd36:	f7e4 ff37 	bl	8000ba8 <__aeabi_d2iz>
 801bd3a:	4680      	mov	r8, r0
 801bd3c:	f7e4 fc1a 	bl	8000574 <__aeabi_i2d>
 801bd40:	4b96      	ldr	r3, [pc, #600]	; (801bf9c <__kernel_rem_pio2+0x694>)
 801bd42:	2200      	movs	r2, #0
 801bd44:	f7e4 fc80 	bl	8000648 <__aeabi_dmul>
 801bd48:	460b      	mov	r3, r1
 801bd4a:	4602      	mov	r2, r0
 801bd4c:	4639      	mov	r1, r7
 801bd4e:	4630      	mov	r0, r6
 801bd50:	f7e4 fac2 	bl	80002d8 <__aeabi_dsub>
 801bd54:	f7e4 ff28 	bl	8000ba8 <__aeabi_d2iz>
 801bd58:	1c65      	adds	r5, r4, #1
 801bd5a:	ab0c      	add	r3, sp, #48	; 0x30
 801bd5c:	f10a 0a18 	add.w	sl, sl, #24
 801bd60:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bd64:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801bd68:	e71f      	b.n	801bbaa <__kernel_rem_pio2+0x2a2>
 801bd6a:	4630      	mov	r0, r6
 801bd6c:	4639      	mov	r1, r7
 801bd6e:	f7e4 ff1b 	bl	8000ba8 <__aeabi_d2iz>
 801bd72:	ab0c      	add	r3, sp, #48	; 0x30
 801bd74:	4625      	mov	r5, r4
 801bd76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bd7a:	e716      	b.n	801bbaa <__kernel_rem_pio2+0x2a2>
 801bd7c:	ab0c      	add	r3, sp, #48	; 0x30
 801bd7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bd82:	f7e4 fbf7 	bl	8000574 <__aeabi_i2d>
 801bd86:	4632      	mov	r2, r6
 801bd88:	463b      	mov	r3, r7
 801bd8a:	f7e4 fc5d 	bl	8000648 <__aeabi_dmul>
 801bd8e:	4642      	mov	r2, r8
 801bd90:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801bd94:	464b      	mov	r3, r9
 801bd96:	4630      	mov	r0, r6
 801bd98:	4639      	mov	r1, r7
 801bd9a:	f7e4 fc55 	bl	8000648 <__aeabi_dmul>
 801bd9e:	3c01      	subs	r4, #1
 801bda0:	4606      	mov	r6, r0
 801bda2:	460f      	mov	r7, r1
 801bda4:	e713      	b.n	801bbce <__kernel_rem_pio2+0x2c6>
 801bda6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801bdaa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801bdae:	f7e4 fc4b 	bl	8000648 <__aeabi_dmul>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4648      	mov	r0, r9
 801bdb8:	4651      	mov	r1, sl
 801bdba:	f7e4 fa8f 	bl	80002dc <__adddf3>
 801bdbe:	3701      	adds	r7, #1
 801bdc0:	4681      	mov	r9, r0
 801bdc2:	468a      	mov	sl, r1
 801bdc4:	9b00      	ldr	r3, [sp, #0]
 801bdc6:	429f      	cmp	r7, r3
 801bdc8:	dc02      	bgt.n	801bdd0 <__kernel_rem_pio2+0x4c8>
 801bdca:	9b06      	ldr	r3, [sp, #24]
 801bdcc:	429f      	cmp	r7, r3
 801bdce:	ddea      	ble.n	801bda6 <__kernel_rem_pio2+0x49e>
 801bdd0:	9a06      	ldr	r2, [sp, #24]
 801bdd2:	ab48      	add	r3, sp, #288	; 0x120
 801bdd4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801bdd8:	e9c6 9a00 	strd	r9, sl, [r6]
 801bddc:	3c01      	subs	r4, #1
 801bdde:	e6fa      	b.n	801bbd6 <__kernel_rem_pio2+0x2ce>
 801bde0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bde2:	2b02      	cmp	r3, #2
 801bde4:	dc0b      	bgt.n	801bdfe <__kernel_rem_pio2+0x4f6>
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	dc39      	bgt.n	801be5e <__kernel_rem_pio2+0x556>
 801bdea:	d05d      	beq.n	801bea8 <__kernel_rem_pio2+0x5a0>
 801bdec:	9b02      	ldr	r3, [sp, #8]
 801bdee:	f003 0007 	and.w	r0, r3, #7
 801bdf2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bdf6:	ecbd 8b02 	vpop	{d8}
 801bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdfe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801be00:	2b03      	cmp	r3, #3
 801be02:	d1f3      	bne.n	801bdec <__kernel_rem_pio2+0x4e4>
 801be04:	9b05      	ldr	r3, [sp, #20]
 801be06:	9500      	str	r5, [sp, #0]
 801be08:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801be0c:	eb0d 0403 	add.w	r4, sp, r3
 801be10:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801be14:	46a2      	mov	sl, r4
 801be16:	9b00      	ldr	r3, [sp, #0]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	f1aa 0a08 	sub.w	sl, sl, #8
 801be1e:	dc69      	bgt.n	801bef4 <__kernel_rem_pio2+0x5ec>
 801be20:	46aa      	mov	sl, r5
 801be22:	f1ba 0f01 	cmp.w	sl, #1
 801be26:	f1a4 0408 	sub.w	r4, r4, #8
 801be2a:	f300 8083 	bgt.w	801bf34 <__kernel_rem_pio2+0x62c>
 801be2e:	9c05      	ldr	r4, [sp, #20]
 801be30:	ab48      	add	r3, sp, #288	; 0x120
 801be32:	441c      	add	r4, r3
 801be34:	2000      	movs	r0, #0
 801be36:	2100      	movs	r1, #0
 801be38:	2d01      	cmp	r5, #1
 801be3a:	f300 809a 	bgt.w	801bf72 <__kernel_rem_pio2+0x66a>
 801be3e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801be42:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801be46:	f1bb 0f00 	cmp.w	fp, #0
 801be4a:	f040 8098 	bne.w	801bf7e <__kernel_rem_pio2+0x676>
 801be4e:	9b04      	ldr	r3, [sp, #16]
 801be50:	e9c3 7800 	strd	r7, r8, [r3]
 801be54:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801be58:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801be5c:	e7c6      	b.n	801bdec <__kernel_rem_pio2+0x4e4>
 801be5e:	9e05      	ldr	r6, [sp, #20]
 801be60:	ab48      	add	r3, sp, #288	; 0x120
 801be62:	441e      	add	r6, r3
 801be64:	462c      	mov	r4, r5
 801be66:	2000      	movs	r0, #0
 801be68:	2100      	movs	r1, #0
 801be6a:	2c00      	cmp	r4, #0
 801be6c:	da33      	bge.n	801bed6 <__kernel_rem_pio2+0x5ce>
 801be6e:	f1bb 0f00 	cmp.w	fp, #0
 801be72:	d036      	beq.n	801bee2 <__kernel_rem_pio2+0x5da>
 801be74:	4602      	mov	r2, r0
 801be76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be7a:	9c04      	ldr	r4, [sp, #16]
 801be7c:	e9c4 2300 	strd	r2, r3, [r4]
 801be80:	4602      	mov	r2, r0
 801be82:	460b      	mov	r3, r1
 801be84:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801be88:	f7e4 fa26 	bl	80002d8 <__aeabi_dsub>
 801be8c:	ae4a      	add	r6, sp, #296	; 0x128
 801be8e:	2401      	movs	r4, #1
 801be90:	42a5      	cmp	r5, r4
 801be92:	da29      	bge.n	801bee8 <__kernel_rem_pio2+0x5e0>
 801be94:	f1bb 0f00 	cmp.w	fp, #0
 801be98:	d002      	beq.n	801bea0 <__kernel_rem_pio2+0x598>
 801be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be9e:	4619      	mov	r1, r3
 801bea0:	9b04      	ldr	r3, [sp, #16]
 801bea2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801bea6:	e7a1      	b.n	801bdec <__kernel_rem_pio2+0x4e4>
 801bea8:	9c05      	ldr	r4, [sp, #20]
 801beaa:	ab48      	add	r3, sp, #288	; 0x120
 801beac:	441c      	add	r4, r3
 801beae:	2000      	movs	r0, #0
 801beb0:	2100      	movs	r1, #0
 801beb2:	2d00      	cmp	r5, #0
 801beb4:	da09      	bge.n	801beca <__kernel_rem_pio2+0x5c2>
 801beb6:	f1bb 0f00 	cmp.w	fp, #0
 801beba:	d002      	beq.n	801bec2 <__kernel_rem_pio2+0x5ba>
 801bebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bec0:	4619      	mov	r1, r3
 801bec2:	9b04      	ldr	r3, [sp, #16]
 801bec4:	e9c3 0100 	strd	r0, r1, [r3]
 801bec8:	e790      	b.n	801bdec <__kernel_rem_pio2+0x4e4>
 801beca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bece:	f7e4 fa05 	bl	80002dc <__adddf3>
 801bed2:	3d01      	subs	r5, #1
 801bed4:	e7ed      	b.n	801beb2 <__kernel_rem_pio2+0x5aa>
 801bed6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801beda:	f7e4 f9ff 	bl	80002dc <__adddf3>
 801bede:	3c01      	subs	r4, #1
 801bee0:	e7c3      	b.n	801be6a <__kernel_rem_pio2+0x562>
 801bee2:	4602      	mov	r2, r0
 801bee4:	460b      	mov	r3, r1
 801bee6:	e7c8      	b.n	801be7a <__kernel_rem_pio2+0x572>
 801bee8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801beec:	f7e4 f9f6 	bl	80002dc <__adddf3>
 801bef0:	3401      	adds	r4, #1
 801bef2:	e7cd      	b.n	801be90 <__kernel_rem_pio2+0x588>
 801bef4:	e9da 8900 	ldrd	r8, r9, [sl]
 801bef8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801befc:	9b00      	ldr	r3, [sp, #0]
 801befe:	3b01      	subs	r3, #1
 801bf00:	9300      	str	r3, [sp, #0]
 801bf02:	4632      	mov	r2, r6
 801bf04:	463b      	mov	r3, r7
 801bf06:	4640      	mov	r0, r8
 801bf08:	4649      	mov	r1, r9
 801bf0a:	f7e4 f9e7 	bl	80002dc <__adddf3>
 801bf0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bf12:	4602      	mov	r2, r0
 801bf14:	460b      	mov	r3, r1
 801bf16:	4640      	mov	r0, r8
 801bf18:	4649      	mov	r1, r9
 801bf1a:	f7e4 f9dd 	bl	80002d8 <__aeabi_dsub>
 801bf1e:	4632      	mov	r2, r6
 801bf20:	463b      	mov	r3, r7
 801bf22:	f7e4 f9db 	bl	80002dc <__adddf3>
 801bf26:	ed9d 7b06 	vldr	d7, [sp, #24]
 801bf2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bf2e:	ed8a 7b00 	vstr	d7, [sl]
 801bf32:	e770      	b.n	801be16 <__kernel_rem_pio2+0x50e>
 801bf34:	e9d4 8900 	ldrd	r8, r9, [r4]
 801bf38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801bf3c:	4640      	mov	r0, r8
 801bf3e:	4632      	mov	r2, r6
 801bf40:	463b      	mov	r3, r7
 801bf42:	4649      	mov	r1, r9
 801bf44:	f7e4 f9ca 	bl	80002dc <__adddf3>
 801bf48:	e9cd 0100 	strd	r0, r1, [sp]
 801bf4c:	4602      	mov	r2, r0
 801bf4e:	460b      	mov	r3, r1
 801bf50:	4640      	mov	r0, r8
 801bf52:	4649      	mov	r1, r9
 801bf54:	f7e4 f9c0 	bl	80002d8 <__aeabi_dsub>
 801bf58:	4632      	mov	r2, r6
 801bf5a:	463b      	mov	r3, r7
 801bf5c:	f7e4 f9be 	bl	80002dc <__adddf3>
 801bf60:	ed9d 7b00 	vldr	d7, [sp]
 801bf64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bf68:	ed84 7b00 	vstr	d7, [r4]
 801bf6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf70:	e757      	b.n	801be22 <__kernel_rem_pio2+0x51a>
 801bf72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bf76:	f7e4 f9b1 	bl	80002dc <__adddf3>
 801bf7a:	3d01      	subs	r5, #1
 801bf7c:	e75c      	b.n	801be38 <__kernel_rem_pio2+0x530>
 801bf7e:	9b04      	ldr	r3, [sp, #16]
 801bf80:	9a04      	ldr	r2, [sp, #16]
 801bf82:	601f      	str	r7, [r3, #0]
 801bf84:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801bf88:	605c      	str	r4, [r3, #4]
 801bf8a:	609d      	str	r5, [r3, #8]
 801bf8c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801bf90:	60d3      	str	r3, [r2, #12]
 801bf92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf96:	6110      	str	r0, [r2, #16]
 801bf98:	6153      	str	r3, [r2, #20]
 801bf9a:	e727      	b.n	801bdec <__kernel_rem_pio2+0x4e4>
 801bf9c:	41700000 	.word	0x41700000
 801bfa0:	3e700000 	.word	0x3e700000
 801bfa4:	00000000 	.word	0x00000000

0801bfa8 <scalbn>:
 801bfa8:	b570      	push	{r4, r5, r6, lr}
 801bfaa:	ec55 4b10 	vmov	r4, r5, d0
 801bfae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801bfb2:	4606      	mov	r6, r0
 801bfb4:	462b      	mov	r3, r5
 801bfb6:	b999      	cbnz	r1, 801bfe0 <scalbn+0x38>
 801bfb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bfbc:	4323      	orrs	r3, r4
 801bfbe:	d03f      	beq.n	801c040 <scalbn+0x98>
 801bfc0:	4b35      	ldr	r3, [pc, #212]	; (801c098 <scalbn+0xf0>)
 801bfc2:	4629      	mov	r1, r5
 801bfc4:	ee10 0a10 	vmov	r0, s0
 801bfc8:	2200      	movs	r2, #0
 801bfca:	f7e4 fb3d 	bl	8000648 <__aeabi_dmul>
 801bfce:	4b33      	ldr	r3, [pc, #204]	; (801c09c <scalbn+0xf4>)
 801bfd0:	429e      	cmp	r6, r3
 801bfd2:	4604      	mov	r4, r0
 801bfd4:	460d      	mov	r5, r1
 801bfd6:	da10      	bge.n	801bffa <scalbn+0x52>
 801bfd8:	a327      	add	r3, pc, #156	; (adr r3, 801c078 <scalbn+0xd0>)
 801bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfde:	e01f      	b.n	801c020 <scalbn+0x78>
 801bfe0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bfe4:	4291      	cmp	r1, r2
 801bfe6:	d10c      	bne.n	801c002 <scalbn+0x5a>
 801bfe8:	ee10 2a10 	vmov	r2, s0
 801bfec:	4620      	mov	r0, r4
 801bfee:	4629      	mov	r1, r5
 801bff0:	f7e4 f974 	bl	80002dc <__adddf3>
 801bff4:	4604      	mov	r4, r0
 801bff6:	460d      	mov	r5, r1
 801bff8:	e022      	b.n	801c040 <scalbn+0x98>
 801bffa:	460b      	mov	r3, r1
 801bffc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c000:	3936      	subs	r1, #54	; 0x36
 801c002:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c006:	4296      	cmp	r6, r2
 801c008:	dd0d      	ble.n	801c026 <scalbn+0x7e>
 801c00a:	2d00      	cmp	r5, #0
 801c00c:	a11c      	add	r1, pc, #112	; (adr r1, 801c080 <scalbn+0xd8>)
 801c00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c012:	da02      	bge.n	801c01a <scalbn+0x72>
 801c014:	a11c      	add	r1, pc, #112	; (adr r1, 801c088 <scalbn+0xe0>)
 801c016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c01a:	a319      	add	r3, pc, #100	; (adr r3, 801c080 <scalbn+0xd8>)
 801c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c020:	f7e4 fb12 	bl	8000648 <__aeabi_dmul>
 801c024:	e7e6      	b.n	801bff4 <scalbn+0x4c>
 801c026:	1872      	adds	r2, r6, r1
 801c028:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c02c:	428a      	cmp	r2, r1
 801c02e:	dcec      	bgt.n	801c00a <scalbn+0x62>
 801c030:	2a00      	cmp	r2, #0
 801c032:	dd08      	ble.n	801c046 <scalbn+0x9e>
 801c034:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c038:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c03c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c040:	ec45 4b10 	vmov	d0, r4, r5
 801c044:	bd70      	pop	{r4, r5, r6, pc}
 801c046:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c04a:	da08      	bge.n	801c05e <scalbn+0xb6>
 801c04c:	2d00      	cmp	r5, #0
 801c04e:	a10a      	add	r1, pc, #40	; (adr r1, 801c078 <scalbn+0xd0>)
 801c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c054:	dac0      	bge.n	801bfd8 <scalbn+0x30>
 801c056:	a10e      	add	r1, pc, #56	; (adr r1, 801c090 <scalbn+0xe8>)
 801c058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c05c:	e7bc      	b.n	801bfd8 <scalbn+0x30>
 801c05e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c062:	3236      	adds	r2, #54	; 0x36
 801c064:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c068:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c06c:	4620      	mov	r0, r4
 801c06e:	4b0c      	ldr	r3, [pc, #48]	; (801c0a0 <scalbn+0xf8>)
 801c070:	2200      	movs	r2, #0
 801c072:	e7d5      	b.n	801c020 <scalbn+0x78>
 801c074:	f3af 8000 	nop.w
 801c078:	c2f8f359 	.word	0xc2f8f359
 801c07c:	01a56e1f 	.word	0x01a56e1f
 801c080:	8800759c 	.word	0x8800759c
 801c084:	7e37e43c 	.word	0x7e37e43c
 801c088:	8800759c 	.word	0x8800759c
 801c08c:	fe37e43c 	.word	0xfe37e43c
 801c090:	c2f8f359 	.word	0xc2f8f359
 801c094:	81a56e1f 	.word	0x81a56e1f
 801c098:	43500000 	.word	0x43500000
 801c09c:	ffff3cb0 	.word	0xffff3cb0
 801c0a0:	3c900000 	.word	0x3c900000
 801c0a4:	00000000 	.word	0x00000000

0801c0a8 <floor>:
 801c0a8:	ec51 0b10 	vmov	r0, r1, d0
 801c0ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801c0b8:	2e13      	cmp	r6, #19
 801c0ba:	ee10 5a10 	vmov	r5, s0
 801c0be:	ee10 8a10 	vmov	r8, s0
 801c0c2:	460c      	mov	r4, r1
 801c0c4:	dc31      	bgt.n	801c12a <floor+0x82>
 801c0c6:	2e00      	cmp	r6, #0
 801c0c8:	da14      	bge.n	801c0f4 <floor+0x4c>
 801c0ca:	a333      	add	r3, pc, #204	; (adr r3, 801c198 <floor+0xf0>)
 801c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d0:	f7e4 f904 	bl	80002dc <__adddf3>
 801c0d4:	2200      	movs	r2, #0
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	f7e4 fd46 	bl	8000b68 <__aeabi_dcmpgt>
 801c0dc:	b138      	cbz	r0, 801c0ee <floor+0x46>
 801c0de:	2c00      	cmp	r4, #0
 801c0e0:	da53      	bge.n	801c18a <floor+0xe2>
 801c0e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801c0e6:	4325      	orrs	r5, r4
 801c0e8:	d052      	beq.n	801c190 <floor+0xe8>
 801c0ea:	4c2d      	ldr	r4, [pc, #180]	; (801c1a0 <floor+0xf8>)
 801c0ec:	2500      	movs	r5, #0
 801c0ee:	4621      	mov	r1, r4
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	e024      	b.n	801c13e <floor+0x96>
 801c0f4:	4f2b      	ldr	r7, [pc, #172]	; (801c1a4 <floor+0xfc>)
 801c0f6:	4137      	asrs	r7, r6
 801c0f8:	ea01 0307 	and.w	r3, r1, r7
 801c0fc:	4303      	orrs	r3, r0
 801c0fe:	d01e      	beq.n	801c13e <floor+0x96>
 801c100:	a325      	add	r3, pc, #148	; (adr r3, 801c198 <floor+0xf0>)
 801c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c106:	f7e4 f8e9 	bl	80002dc <__adddf3>
 801c10a:	2200      	movs	r2, #0
 801c10c:	2300      	movs	r3, #0
 801c10e:	f7e4 fd2b 	bl	8000b68 <__aeabi_dcmpgt>
 801c112:	2800      	cmp	r0, #0
 801c114:	d0eb      	beq.n	801c0ee <floor+0x46>
 801c116:	2c00      	cmp	r4, #0
 801c118:	bfbe      	ittt	lt
 801c11a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c11e:	4133      	asrlt	r3, r6
 801c120:	18e4      	addlt	r4, r4, r3
 801c122:	ea24 0407 	bic.w	r4, r4, r7
 801c126:	2500      	movs	r5, #0
 801c128:	e7e1      	b.n	801c0ee <floor+0x46>
 801c12a:	2e33      	cmp	r6, #51	; 0x33
 801c12c:	dd0b      	ble.n	801c146 <floor+0x9e>
 801c12e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c132:	d104      	bne.n	801c13e <floor+0x96>
 801c134:	ee10 2a10 	vmov	r2, s0
 801c138:	460b      	mov	r3, r1
 801c13a:	f7e4 f8cf 	bl	80002dc <__adddf3>
 801c13e:	ec41 0b10 	vmov	d0, r0, r1
 801c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c146:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801c14a:	f04f 37ff 	mov.w	r7, #4294967295
 801c14e:	40df      	lsrs	r7, r3
 801c150:	4238      	tst	r0, r7
 801c152:	d0f4      	beq.n	801c13e <floor+0x96>
 801c154:	a310      	add	r3, pc, #64	; (adr r3, 801c198 <floor+0xf0>)
 801c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15a:	f7e4 f8bf 	bl	80002dc <__adddf3>
 801c15e:	2200      	movs	r2, #0
 801c160:	2300      	movs	r3, #0
 801c162:	f7e4 fd01 	bl	8000b68 <__aeabi_dcmpgt>
 801c166:	2800      	cmp	r0, #0
 801c168:	d0c1      	beq.n	801c0ee <floor+0x46>
 801c16a:	2c00      	cmp	r4, #0
 801c16c:	da0a      	bge.n	801c184 <floor+0xdc>
 801c16e:	2e14      	cmp	r6, #20
 801c170:	d101      	bne.n	801c176 <floor+0xce>
 801c172:	3401      	adds	r4, #1
 801c174:	e006      	b.n	801c184 <floor+0xdc>
 801c176:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c17a:	2301      	movs	r3, #1
 801c17c:	40b3      	lsls	r3, r6
 801c17e:	441d      	add	r5, r3
 801c180:	45a8      	cmp	r8, r5
 801c182:	d8f6      	bhi.n	801c172 <floor+0xca>
 801c184:	ea25 0507 	bic.w	r5, r5, r7
 801c188:	e7b1      	b.n	801c0ee <floor+0x46>
 801c18a:	2500      	movs	r5, #0
 801c18c:	462c      	mov	r4, r5
 801c18e:	e7ae      	b.n	801c0ee <floor+0x46>
 801c190:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801c194:	e7ab      	b.n	801c0ee <floor+0x46>
 801c196:	bf00      	nop
 801c198:	8800759c 	.word	0x8800759c
 801c19c:	7e37e43c 	.word	0x7e37e43c
 801c1a0:	bff00000 	.word	0xbff00000
 801c1a4:	000fffff 	.word	0x000fffff

0801c1a8 <_init>:
 801c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1aa:	bf00      	nop
 801c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1ae:	bc08      	pop	{r3}
 801c1b0:	469e      	mov	lr, r3
 801c1b2:	4770      	bx	lr

0801c1b4 <_fini>:
 801c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1b6:	bf00      	nop
 801c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1ba:	bc08      	pop	{r3}
 801c1bc:	469e      	mov	lr, r3
 801c1be:	4770      	bx	lr

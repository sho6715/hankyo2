
hankyo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  0801b990  0801b990  0002b990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c858  0801c858  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  0801c858  0801c858  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801c858  0801c858  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c858  0801c858  0002c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c85c  0801c85c  0002c85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801c860  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e414  200001f4  0801ca54  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e608  0801ca54  0003e608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019401  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409b  00000000  00000000  00049625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  0004d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0004ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292b2  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0e3  00000000  00000000  000794da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d380e  00000000  00000000  000955bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075ac  00000000  00000000  00168e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b974 	.word	0x0801b974

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	0801b974 	.word	0x0801b974

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d002      	beq.n	8000d7a <LL_ADC_SetGainCompensation+0x36>
 8000d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d78:	e000      	b.n	8000d7c <LL_ADC_SetGainCompensation+0x38>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	; 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	211f      	movs	r1, #31
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e9b      	lsrs	r3, r3, #26
 8000dc6:	f003 011f 	and.w	r1, r3, #31
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0e5b      	lsrs	r3, r3, #25
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0d1b      	lsrs	r3, r3, #20
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2107      	movs	r1, #7
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0d1b      	lsrs	r3, r3, #20
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6093      	str	r3, [r2, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsEnabled+0x18>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsEnabled+0x1a>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001006:	d101      	bne.n	800100c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	f043 0204 	orr.w	r2, r3, #4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	b29b      	uxth	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2208      	movs	r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80010ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 800112a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800112e:	f7ff ffc3 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ffc0 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f013 fa03 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001150:	2302      	movs	r3, #2
 8001152:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f013 f9f7 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f013 f9eb 	bl	8014556 <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800118c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001196:	f013 f823 	bl	80141e0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 800119e:	2305      	movs	r3, #5
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011be:	f013 f835 	bl	801422c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011c8:	f7ff fdbc 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011cc:	2100      	movs	r1, #0
 80011ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011d2:	f7ff fe57 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80011d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011da:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	484a      	ldr	r0, [pc, #296]	; (8001310 <MX_ADC1_Init+0x228>)
 80011e8:	f012 ff96 	bl	8014118 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80011ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f0:	f7ff fe5d 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80011f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f8:	f7ff fe7f 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <MX_ADC1_Init+0x22c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	099b      	lsrs	r3, r3, #6
 8001202:	4a45      	ldr	r2, [pc, #276]	; (8001318 <MX_ADC1_Init+0x230>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	099a      	lsrs	r2, r3, #6
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <MX_ADC1_Init+0x234>)
 8001216:	fba3 2302 	umull	r2, r3, r3, r2
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800121e:	e002      	b.n	8001226 <MX_ADC1_Init+0x13e>
  {
    wait_loop_index--;
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001222:	3b01      	subs	r3, #1
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <MX_ADC1_Init+0x138>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 800122c:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <MX_ADC1_Init+0x238>)
 800122e:	2106      	movs	r1, #6
 8001230:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001234:	f7ff fdab 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001238:	2202      	movs	r2, #2
 800123a:	4939      	ldr	r1, [pc, #228]	; (8001320 <MX_ADC1_Init+0x238>)
 800123c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001240:	f7ff fdd1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	4936      	ldr	r1, [pc, #216]	; (8001320 <MX_ADC1_Init+0x238>)
 8001248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800124c:	f7ff fdf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_ADC1_Init+0x238>)
 8001252:	210c      	movs	r1, #12
 8001254:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001258:	f7ff fd99 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800125c:	2202      	movs	r2, #2
 800125e:	4930      	ldr	r1, [pc, #192]	; (8001320 <MX_ADC1_Init+0x238>)
 8001260:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001264:	f7ff fdbf 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001268:	227f      	movs	r2, #127	; 0x7f
 800126a:	492d      	ldr	r1, [pc, #180]	; (8001320 <MX_ADC1_Init+0x238>)
 800126c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001270:	f7ff fde4 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001276:	2112      	movs	r1, #18
 8001278:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800127c:	f7ff fd87 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001280:	2202      	movs	r2, #2
 8001282:	4928      	ldr	r1, [pc, #160]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001284:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001288:	f7ff fdad 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800128c:	227f      	movs	r2, #127	; 0x7f
 800128e:	4925      	ldr	r1, [pc, #148]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001294:	f7ff fdd2 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_ADC1_Init+0x23c>)
 800129a:	2118      	movs	r1, #24
 800129c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012a0:	f7ff fd75 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012a4:	2202      	movs	r2, #2
 80012a6:	491f      	ldr	r1, [pc, #124]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ac:	f7ff fd9b 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80012b0:	227f      	movs	r2, #127	; 0x7f
 80012b2:	491c      	ldr	r1, [pc, #112]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012b8:	f7ff fdc0 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_1);
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <MX_ADC1_Init+0x240>)
 80012be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012c6:	f7ff fd62 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012ca:	2202      	movs	r2, #2
 80012cc:	4916      	ldr	r1, [pc, #88]	; (8001328 <MX_ADC1_Init+0x240>)
 80012ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d2:	f7ff fd88 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012d6:	227f      	movs	r2, #127	; 0x7f
 80012d8:	4913      	ldr	r1, [pc, #76]	; (8001328 <MX_ADC1_Init+0x240>)
 80012da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012de:	f7ff fdad 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_1);
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_ADC1_Init+0x240>)
 80012e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ec:	f7ff fd4f 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012f0:	2202      	movs	r2, #2
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <MX_ADC1_Init+0x240>)
 80012f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012f8:	f7ff fd75 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012fc:	227f      	movs	r2, #127	; 0x7f
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <MX_ADC1_Init+0x240>)
 8001300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001304:	f7ff fd9a 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	50000300 	.word	0x50000300
 8001314:	20000004 	.word	0x20000004
 8001318:	053e2d63 	.word	0x053e2d63
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	08600004 	.word	0x08600004
 8001324:	0c900008 	.word	0x0c900008
 8001328:	04300002 	.word	0x04300002

0800132c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 800136e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001372:	f7ff fea1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff fe9e 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB1   ------> ADC3_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800137c:	2302      	movs	r3, #2
 800137e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	483a      	ldr	r0, [pc, #232]	; (8001478 <MX_ADC3_Init+0x14c>)
 800138e:	f013 f8e2 	bl	8014556 <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800139e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <MX_ADC3_Init+0x150>)
 80013a6:	f012 ff1b 	bl	80141e0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <MX_ADC3_Init+0x150>)
 80013cc:	f012 ff2e 	bl	801422c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC3, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_ADC3_Init+0x150>)
 80013d4:	f7ff fcb6 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 80013d8:	2100      	movs	r1, #0
 80013da:	4828      	ldr	r0, [pc, #160]	; (800147c <MX_ADC3_Init+0x150>)
 80013dc:	f7ff fd52 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_ADC3_Init+0x154>)
 80013f2:	f012 fe91 	bl	8014118 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 80013f6:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_ADC3_Init+0x150>)
 80013f8:	f7ff fd59 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <MX_ADC3_Init+0x150>)
 80013fe:	f7ff fd7c 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC3_Init+0x158>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	099b      	lsrs	r3, r3, #6
 8001408:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <MX_ADC3_Init+0x15c>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	099a      	lsrs	r2, r3, #6
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_ADC3_Init+0x160>)
 800141c:	fba3 2302 	umull	r2, r3, r3, r2
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001424:	e002      	b.n	800142c <MX_ADC3_Init+0x100>
  {
    wait_loop_index--;
 8001426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001428:	3b01      	subs	r3, #1
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <MX_ADC3_Init+0xfa>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MX_ADC3_Init+0x164>)
 8001434:	2106      	movs	r1, #6
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_ADC3_Init+0x150>)
 8001438:	f7ff fca9 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800143c:	2202      	movs	r2, #2
 800143e:	4914      	ldr	r1, [pc, #80]	; (8001490 <MX_ADC3_Init+0x164>)
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <MX_ADC3_Init+0x150>)
 8001442:	f7ff fcd0 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001446:	227f      	movs	r2, #127	; 0x7f
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <MX_ADC3_Init+0x164>)
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_ADC3_Init+0x150>)
 800144c:	f7ff fcf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_ADC3_Init+0x164>)
 8001452:	210c      	movs	r1, #12
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <MX_ADC3_Init+0x150>)
 8001456:	f7ff fc9a 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800145a:	2202      	movs	r2, #2
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <MX_ADC3_Init+0x164>)
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_ADC3_Init+0x150>)
 8001460:	f7ff fcc1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001464:	227f      	movs	r2, #127	; 0x7f
 8001466:	490a      	ldr	r1, [pc, #40]	; (8001490 <MX_ADC3_Init+0x164>)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_ADC3_Init+0x150>)
 800146a:	f7ff fce7 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	; 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400
 800147c:	50000400 	.word	0x50000400
 8001480:	50000700 	.word	0x50000700
 8001484:	20000004 	.word	0x20000004
 8001488:	053e2d63 	.word	0x053e2d63
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	04300002 	.word	0x04300002

08001494 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	; 0x40
 8001498:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800149a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80014c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014cc:	f7ff fdf4 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff fdf1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB12   ------> ADC4_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014dc:	2303      	movs	r3, #3
 80014de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <MX_ADC4_Init+0x108>)
 80014ea:	f013 f834 	bl	8014556 <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 80014fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fe:	4619      	mov	r1, r3
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001502:	f012 fe6d 	bl	80141e0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001526:	f012 fe81 	bl	801422c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC4, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800152e:	f7ff fc09 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC4, LL_ADC_OVS_DISABLE);
 8001532:	2100      	movs	r1, #0
 8001534:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001536:	f7ff fca5 	bl	8000e84 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC4);
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800153c:	f7ff fcb7 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC4);
 8001540:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001542:	f7ff fcda 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_ADC4_Init+0x110>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <MX_ADC4_Init+0x114>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	099a      	lsrs	r2, r3, #6
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	461a      	mov	r2, r3
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_ADC4_Init+0x118>)
 8001560:	fba3 2302 	umull	r2, r3, r3, r2
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001568:	e002      	b.n	8001570 <MX_ADC4_Init+0xdc>
  {
    wait_loop_index--;
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	3b01      	subs	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <MX_ADC4_Init+0xd6>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001578:	2106      	movs	r1, #6
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800157c:	f7ff fc07 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8001580:	2203      	movs	r2, #3
 8001582:	490b      	ldr	r1, [pc, #44]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001586:	f7ff fc2e 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800158a:	227f      	movs	r2, #127	; 0x7f
 800158c:	4908      	ldr	r1, [pc, #32]	; (80015b0 <MX_ADC4_Init+0x11c>)
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001590:	f7ff fc54 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001594:	bf00      	nop
 8001596:	3740      	adds	r7, #64	; 0x40
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48000400 	.word	0x48000400
 80015a0:	50000500 	.word	0x50000500
 80015a4:	20000004 	.word	0x20000004
 80015a8:	053e2d63 	.word	0x053e2d63
 80015ac:	cccccccd 	.word	0xcccccccd
 80015b0:	0c900008 	.word	0x0c900008

080015b4 <ADC1_Calibration>:
#define ADC_CONVERT_DATA_BUFFR_SIZE	((uint32_t)3)

uint16_t adcConvertData[ADC_CONVERT_DATA_BUFFR_SIZE];

void ADC1_Calibration(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 80015b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015bc:	f7ff fc89 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11f      	bne.n	8001606 <ADC1_Calibration+0x52>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 80015c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015ca:	f7ff fcaa 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11a      	bne.n	800160a <ADC1_Calibration+0x56>
	if(LL_ADC_IsEnabled(ADC1) != 0){
 80015d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015d8:	f7ff fcdf 	bl	8000f9a <LL_ADC_IsEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <ADC1_Calibration+0x36>
		LL_ADC_Disable(ADC1);
 80015e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015e6:	f7ff fcc4 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC1,LL_ADC_SINGLE_ENDED);
 80015ea:	217f      	movs	r1, #127	; 0x7f
 80015ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f0:	f7ff fce6 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)==1);
 80015f4:	bf00      	nop
 80015f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015fa:	f7ff fcfa 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d0f8      	beq.n	80015f6 <ADC1_Calibration+0x42>
 8001604:	e002      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 800160a:	bf00      	nop
}
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <ADC2_Calibration>:

void ADC2_Calibration(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <ADC2_Calibration+0x50>)
 8001616:	f7ff fc5c 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11a      	bne.n	8001656 <ADC2_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <ADC2_Calibration+0x50>)
 8001622:	f7ff fc7e 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d116      	bne.n	800165a <ADC2_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC2) != 0){
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <ADC2_Calibration+0x50>)
 800162e:	f7ff fcb4 	bl	8000f9a <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <ADC2_Calibration+0x2e>
		LL_ADC_Disable(ADC2);
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <ADC2_Calibration+0x50>)
 800163a:	f7ff fc9a 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC2,LL_ADC_SINGLE_ENDED);
 800163e:	217f      	movs	r1, #127	; 0x7f
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <ADC2_Calibration+0x50>)
 8001642:	f7ff fcbd 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2)==1);
 8001646:	bf00      	nop
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <ADC2_Calibration+0x50>)
 800164a:	f7ff fcd2 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f9      	beq.n	8001648 <ADC2_Calibration+0x38>
 8001654:	e002      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 800165a:	bf00      	nop
}
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	50000100 	.word	0x50000100

08001664 <ADC3_Calibration>:

void ADC3_Calibration(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <ADC3_Calibration+0x50>)
 800166a:	f7ff fc32 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11a      	bne.n	80016aa <ADC3_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <ADC3_Calibration+0x50>)
 8001676:	f7ff fc54 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d116      	bne.n	80016ae <ADC3_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC3) != 0){
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <ADC3_Calibration+0x50>)
 8001682:	f7ff fc8a 	bl	8000f9a <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <ADC3_Calibration+0x2e>
		LL_ADC_Disable(ADC3);
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <ADC3_Calibration+0x50>)
 800168e:	f7ff fc70 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC3,LL_ADC_SINGLE_ENDED);
 8001692:	217f      	movs	r1, #127	; 0x7f
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <ADC3_Calibration+0x50>)
 8001696:	f7ff fc93 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC3)==1);
 800169a:	bf00      	nop
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <ADC3_Calibration+0x50>)
 800169e:	f7ff fca8 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d0f9      	beq.n	800169c <ADC3_Calibration+0x38>
 80016a8:	e002      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016ae:	bf00      	nop
}
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50000400 	.word	0x50000400

080016b8 <ADC4_Calibration>:

void ADC4_Calibration(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <ADC4_Calibration+0x50>)
 80016be:	f7ff fc08 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <ADC4_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <ADC4_Calibration+0x50>)
 80016ca:	f7ff fc2a 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d116      	bne.n	8001702 <ADC4_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC4) != 0){
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <ADC4_Calibration+0x50>)
 80016d6:	f7ff fc60 	bl	8000f9a <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <ADC4_Calibration+0x2e>
		LL_ADC_Disable(ADC4);
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <ADC4_Calibration+0x50>)
 80016e2:	f7ff fc46 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC4,LL_ADC_SINGLE_ENDED);
 80016e6:	217f      	movs	r1, #127	; 0x7f
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <ADC4_Calibration+0x50>)
 80016ea:	f7ff fc69 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC4)==1);
 80016ee:	bf00      	nop
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <ADC4_Calibration+0x50>)
 80016f2:	f7ff fc7e 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d0f9      	beq.n	80016f0 <ADC4_Calibration+0x38>
 80016fc:	e002      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 8001702:	bf00      	nop
}
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	50000500 	.word	0x50000500

0800170c <ADC4_Start>:

void ADC4_Start(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  ADC4_Calibration();
 8001710:	f7ff ffd2 	bl	80016b8 <ADC4_Calibration>
//	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_7);
	LL_ADC_Enable(ADC4);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <ADC4_Start+0x14>)
 8001716:	f7ff fc18 	bl	8000f4a <LL_ADC_Enable>

//	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_7,ADC_CONVERT_DATA_BUFFR_SIZE);

//	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_7);

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	50000500 	.word	0x50000500

08001724 <ADC3_Start>:

void ADC3_Start(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  ADC3_Calibration();
 8001728:	f7ff ff9c 	bl	8001664 <ADC3_Calibration>
	LL_ADC_Enable(ADC3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <ADC3_Start+0x14>)
 800172e:	f7ff fc0c 	bl	8000f4a <LL_ADC_Enable>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	50000400 	.word	0x50000400

0800173c <ADC2_Start>:

void ADC2_Start(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  ADC2_Calibration();
 8001740:	f7ff ff66 	bl	8001610 <ADC2_Calibration>
	LL_ADC_Enable(ADC2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <ADC2_Start+0x14>)
 8001746:	f7ff fc00 	bl	8000f4a <LL_ADC_Enable>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	50000100 	.word	0x50000100

08001754 <ADC1_Start>:

void ADC1_Start(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  ADC1_Calibration();
 8001758:	f7ff ff2c 	bl	80015b4 <ADC1_Calibration>
	LL_ADC_Enable(ADC1);
 800175c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001760:	f7ff fbf3 	bl	8000f4a <LL_ADC_Enable>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <GetSensor_FL>:

uint16_t GetSensor_FL(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC3);
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <GetSensor_FL+0x2c>)
 800176e:	f7ff fc54 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC3)==0);
 8001772:	bf00      	nop
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <GetSensor_FL+0x2c>)
 8001776:	f7ff fc71 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <GetSensor_FL+0xc>
	LL_ADC_ClearFlag_EOC(ADC3);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <GetSensor_FL+0x2c>)
 8001782:	f7ff fc7e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC3);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <GetSensor_FL+0x2c>)
 8001788:	f7ff fc5b 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	50000400 	.word	0x50000400

08001798 <ADC3_clearEOS>:

void ADC3_clearEOS(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC3);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <ADC3_clearEOS+0x10>)
 800179e:	f7ff fc7d 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	50000400 	.word	0x50000400

080017ac <ADC2_clearEOS>:

void ADC2_clearEOS(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <ADC2_clearEOS+0x10>)
 80017b2:	f7ff fc73 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	50000100 	.word	0x50000100

080017c0 <ADC1_clearEOS>:

void ADC1_clearEOS(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC1);
 80017c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c8:	f7ff fc68 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GetSensor_SL>:


uint16_t GetSensor_SL(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 80017d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d8:	f7ff fc1f 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 80017dc:	bf00      	nop
 80017de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e2:	f7ff fc3b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <GetSensor_SL+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 80017ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f0:	f7ff fc47 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 80017f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f8:	f7ff fc23 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}

08001802 <GetSensor_SR>:

uint16_t GetSensor_SR(void){
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001806:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800180a:	f7ff fc06 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 800180e:	bf00      	nop
 8001810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001814:	f7ff fc22 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f8      	beq.n	8001810 <GetSensor_SR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 800181e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001822:	f7ff fc2e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001826:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800182a:	f7ff fc0a 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800182e:	4603      	mov	r3, r0
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}

08001834 <GetSensor_FR>:

uint16_t GetSensor_FR(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001838:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800183c:	f7ff fbed 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001840:	bf00      	nop
 8001842:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001846:	f7ff fc09 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f8      	beq.n	8001842 <GetSensor_FR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 8001850:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001854:	f7ff fc15 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001858:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800185c:	f7ff fbf1 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <GetBatVal>:

uint16_t GetBatVal(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC4);
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <GetBatVal+0x2c>)
 800186e:	f7ff fbd4 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC4)==0);
 8001872:	bf00      	nop
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <GetBatVal+0x2c>)
 8001876:	f7ff fbf1 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f9      	beq.n	8001874 <GetBatVal+0xc>
	LL_ADC_ClearFlag_EOC(ADC4);
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <GetBatVal+0x2c>)
 8001882:	f7ff fbfe 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC4);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <GetBatVal+0x2c>)
 8001888:	f7ff fbdb 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	50000500 	.word	0x50000500

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <LL_AHB1_GRP1_EnableClock>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff ffe3 	bl	80019ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff ffe0 	bl	80019ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ec:	f7ff ff54 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffa4 	bl	8001944 <NVIC_EncodePriority>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	200b      	movs	r0, #11
 8001a02:	f7ff ff75 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff ff54 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a0c:	f7ff ff44 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff94 	bl	8001944 <NVIC_EncodePriority>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	200c      	movs	r0, #12
 8001a22:	f7ff ff65 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a26:	200c      	movs	r0, #12
 8001a28:	f7ff ff44 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a2c:	f7ff ff34 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff84 	bl	8001944 <NVIC_EncodePriority>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	200d      	movs	r0, #13
 8001a42:	f7ff ff55 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a46:	200d      	movs	r0, #13
 8001a48:	f7ff ff34 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a4c:	f7ff ff24 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff74 	bl	8001944 <NVIC_EncodePriority>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	200e      	movs	r0, #14
 8001a62:	f7ff ff45 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a66:	200e      	movs	r0, #14
 8001a68:	f7ff ff24 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a6c:	f7ff ff14 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff64 	bl	8001944 <NVIC_EncodePriority>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	200f      	movs	r0, #15
 8001a82:	f7ff ff35 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f7ff ff14 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a8c:	f7ff ff04 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <NVIC_EncodePriority>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	2010      	movs	r0, #16
 8001aa2:	f7ff ff25 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ff04 	bl	80018b4 <__NVIC_EnableIRQ>

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <FLASH_Lock>:

#define sta_add_127 0x0807F800
#define end_add_127 0x0807FFFF

__STATIC_INLINE void FLASH_Lock(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <FLASH_Lock+0x1c>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <FLASH_Lock+0x1c>)
 8001aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001abe:	6153      	str	r3, [r2, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_Unlock>:

__STATIC_INLINE void FLASH_Unlock(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <FLASH_Unlock+0x1c>)
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <FLASH_Unlock+0x20>)
 8001ad8:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <FLASH_Unlock+0x1c>)
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <FLASH_Unlock+0x24>)
 8001ade:	609a      	str	r2, [r3, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	45670123 	.word	0x45670123
 8001af4:	cdef89ab 	.word	0xcdef89ab

08001af8 <FLASH_WaitBusy>:
#define FLASH_TYPEPROGRAM_BYTE	0x00000000U

//#define FLASH

void FLASH_WaitBusy(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	while(((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY)==1);
 8001afc:	bf00      	nop
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <FLASH_WaitBusy+0x20>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d0f8      	beq.n	8001afe <FLASH_WaitBusy+0x6>
//	while((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY);
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40022000 	.word	0x40022000

08001b1c <FLASH_Erase>:

void FLASH_Erase(uint8_t page)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	FLASH_WaitBusy();
 8001b26:	f7ff ffe7 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->SR &= 0x00000000;	//error clear?
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <FLASH_Erase+0x64>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <FLASH_Erase+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <FLASH_Erase+0x64>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <FLASH_Erase+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_BKER);	//set bank2
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <FLASH_Erase+0x64>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <FLASH_Erase+0x64>)
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b48:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_PER;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <FLASH_Erase+0x64>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <FLASH_Erase+0x64>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page<<3));
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <FLASH_Erase+0x64>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	f403 737e 	and.w	r3, r3, #1016	; 0x3f8
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <FLASH_Erase+0x64>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	614b      	str	r3, [r1, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6153      	str	r3, [r2, #20]
	FLASH_WaitBusy();
 8001b74:	f7ff ffc0 	bl	8001af8 <FLASH_WaitBusy>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40022000 	.word	0x40022000

08001b84 <FLASH_WriteByte>:

void FLASH_WriteByte(uint32_t address, uint64_t data)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t data2 = (uint32_t)(data >> 32);
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
	FLASH_WaitBusy();
 8001ba4:	f7ff ffa8 	bl	8001af8 <FLASH_WaitBusy>
	FLASH->SR &= 0x00000000;	//error clear
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PG;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6153      	str	r3, [r2, #20]

	*(__IO uint32_t*)address = (uint32_t)data;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
	*(__IO uint32_t*)(address+4) = data2;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	6013      	str	r3, [r2, #0]
	FLASH_WaitBusy();
 8001bd8:	f7ff ff8e 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->CR &= ~(FLASH_CR_PG);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6153      	str	r3, [r2, #20]
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <FLASH_WriteData>:

void FLASH_WriteData(uint8_t page,uint32_t address, uint64_t* data, uint32_t size)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	FLASH_Unlock();
 8001c04:	f7ff ff64 	bl	8001ad0 <FLASH_Unlock>

	FLASH_Erase(page);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff86 	bl	8001b1c <FLASH_Erase>

	do {
		FLASH_WriteByte(address, *data);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7ff ffb4 	bl	8001b84 <FLASH_WriteByte>
		address+=8;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
		data++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3308      	adds	r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
		size -=8;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	603b      	str	r3, [r7, #0]
	}while(size > 0);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ed      	bne.n	8001c10 <FLASH_WriteData+0x1c>

	FLASH_Lock();
 8001c34:	f7ff ff3c 	bl	8001ab0 <FLASH_Lock>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <FLASH_ReadData>:

void FLASH_ReadData(uint32_t address, uint64_t* data, uint32_t size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address,size);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f013 fede 	bl	8015a14 <memcpy>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_AHB2_GRP1_EnableClock>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000

08001c90 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d101      	bne.n	8001cac <LL_GPIO_IsInputPinSet+0x1c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_GPIO_IsInputPinSet+0x1e>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f7ff ffa8 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ffa5 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ffa2 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff ff9f 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SEN3_GPIO_Port, SEN3_Pin);
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	48a5      	ldr	r0, [pc, #660]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d28:	f7ff ffd5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN2_GPIO_Port, SEN2_Pin);
 8001d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d30:	48a2      	ldr	r0, [pc, #648]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d32:	f7ff ffd0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3a:	48a0      	ldr	r0, [pc, #640]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d3c:	f7ff ffcb 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001d40:	2101      	movs	r1, #1
 8001d42:	489f      	ldr	r0, [pc, #636]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d44:	f7ff ffc7 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001d48:	2102      	movs	r1, #2
 8001d4a:	489d      	ldr	r0, [pc, #628]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d4c:	f7ff ffc3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN1_GPIO_Port, SEN1_Pin);
 8001d50:	2108      	movs	r1, #8
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f7ff ffbe 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN0_GPIO_Port, SEN0_Pin);
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f7ff ffb9 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001d64:	2104      	movs	r1, #4
 8001d66:	4897      	ldr	r0, [pc, #604]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d68:	f7ff ffb5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port, BAT_LED_Pin);
 8001d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d70:	4894      	ldr	r0, [pc, #592]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d72:	f7ff ffb0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT0_GPIO_Port, MOT0_Pin);
 8001d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f7ff ffaa 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT1_GPIO_Port, MOT1_Pin);
 8001d82:	2110      	movs	r1, #16
 8001d84:	488f      	ldr	r0, [pc, #572]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d86:	f7ff ffa6 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	488d      	ldr	r0, [pc, #564]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d8e:	f7ff ffa2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8001d92:	2101      	movs	r1, #1
 8001d94:	488b      	ldr	r0, [pc, #556]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d96:	f7ff ff90 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4889      	ldr	r0, [pc, #548]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da0:	f7ff ff8b 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4887      	ldr	r0, [pc, #540]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da8:	f7ff ff87 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SEN3_Pin;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001db2:	2301      	movs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN3_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	487d      	ldr	r0, [pc, #500]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001dc8:	f012 fbc5 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN2_Pin;
 8001dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN2_GPIO_Port, &GPIO_InitStruct);
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	4875      	ldr	r0, [pc, #468]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001de8:	f012 fbb5 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001df2:	2301      	movs	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001e02:	463b      	mov	r3, r7
 8001e04:	4619      	mov	r1, r3
 8001e06:	486d      	ldr	r0, [pc, #436]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001e08:	f012 fba5 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e10:	2301      	movs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001e20:	463b      	mov	r3, r7
 8001e22:	4619      	mov	r1, r3
 8001e24:	4866      	ldr	r0, [pc, #408]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e26:	f012 fb96 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	485f      	ldr	r0, [pc, #380]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e44:	f012 fb87 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN1_Pin;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f012 fb77 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN0_Pin;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f012 fb67 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_gyro_Pin;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_gyro_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4848      	ldr	r0, [pc, #288]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ea2:	f012 fb58 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ec0:	f012 fb49 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enL_Pin;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enL_GPIO_Port, &GPIO_InitStruct);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4619      	mov	r1, r3
 8001ede:	4839      	ldr	r0, [pc, #228]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ee0:	f012 fb39 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAT_LED_Pin;
 8001ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4619      	mov	r1, r3
 8001efe:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f00:	f012 fb29 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f012 fb1c 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f012 fb0f 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT0_Pin;
 8001f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT0_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f012 fafe 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT1_Pin;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f74:	f012 faef 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f92:	f012 fae0 	bl	8014556 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enR_Pin;
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enR_GPIO_Port, &GPIO_InitStruct);
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001fb0:	f012 fad1 	bl	8014556 <LL_GPIO_Init>

}
 8001fb4:	bf00      	nop
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	48001400 	.word	0x48001400
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(uint8_t data){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if((data&0x01)==0x01){ 	LL_GPIO_SetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <SetLED+0x1e>
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <SetLED+0xa4>)
 8001fe0:	f7ff fe6b 	bl	8001cba <LL_GPIO_SetOutputPin>
 8001fe4:	e003      	b.n	8001fee <SetLED+0x26>
	}else{					LL_GPIO_ResetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	4820      	ldr	r0, [pc, #128]	; (800206c <SetLED+0xa4>)
 8001fea:	f7ff fe74 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x02)==0x02){ 	LL_GPIO_SetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <SetLED+0x3a>
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	481d      	ldr	r0, [pc, #116]	; (8002070 <SetLED+0xa8>)
 8001ffc:	f7ff fe5d 	bl	8001cba <LL_GPIO_SetOutputPin>
 8002000:	e003      	b.n	800200a <SetLED+0x42>
	}else{					LL_GPIO_ResetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8002002:	2102      	movs	r1, #2
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <SetLED+0xa8>)
 8002006:	f7ff fe66 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x04)==0x04){ 	LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <SetLED+0x56>
 8002014:	2101      	movs	r1, #1
 8002016:	4816      	ldr	r0, [pc, #88]	; (8002070 <SetLED+0xa8>)
 8002018:	f7ff fe4f 	bl	8001cba <LL_GPIO_SetOutputPin>
 800201c:	e003      	b.n	8002026 <SetLED+0x5e>
	}else{					LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800201e:	2101      	movs	r1, #1
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <SetLED+0xa8>)
 8002022:	f7ff fe58 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x08)==0x08){ 	LL_GPIO_SetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <SetLED+0x74>
 8002030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <SetLED+0xac>)
 8002036:	f7ff fe40 	bl	8001cba <LL_GPIO_SetOutputPin>
 800203a:	e004      	b.n	8002046 <SetLED+0x7e>
	}else{					LL_GPIO_ResetOutputPin(LED3_GPIO_Port,LED3_Pin);
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <SetLED+0xac>)
 8002042:	f7ff fe48 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x10)==0x10){ 	LL_GPIO_SetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <SetLED+0x92>
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <SetLED+0xa4>)
 8002054:	f7ff fe31 	bl	8001cba <LL_GPIO_SetOutputPin>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
	}
}
 8002058:	e003      	b.n	8002062 <SetLED+0x9a>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <SetLED+0xa4>)
 800205e:	f7ff fe3a 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	48000400 	.word	0x48000400
 8002070:	48001400 	.word	0x48001400
 8002074:	48000800 	.word	0x48000800

08002078 <SetBatLED>:

void SetBatLED(uint8_t data){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <SetBatLED+0x1c>
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <SetBatLED+0x30>)
 800208e:	f7ff fe14 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
}
 8002092:	e004      	b.n	800209e <SetBatLED+0x26>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <SetBatLED+0x30>)
 800209a:	f7ff fe1c 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	48000400 	.word	0x48000400

080020ac <SW_IsOn_0>:

int8_t SW_IsOn_0(void){//virtical
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW0_GPIO_Port,SW0_Pin);
 80020b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f7ff fdea 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020bc:	4603      	mov	r3, r0
 80020be:	b25b      	sxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SW_IsOn_1>:

int8_t SW_IsOn_1(void){//horizontal
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW1_GPIO_Port,SW1_Pin);
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f7ff fdde 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b25b      	sxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}

080020dc <Set_SenFL>:

void Set_SenFL(uint8_t data){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <Set_SenFL+0x1c>
 80020ec:	2110      	movs	r1, #16
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f7ff fde2 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
}
 80020f6:	e004      	b.n	8002102 <Set_SenFL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020f8:	2110      	movs	r1, #16
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7ff fdea 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Set_SenSL>:

void Set_SenSL(uint8_t data){
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <Set_SenSL+0x1c>
 800211a:	2108      	movs	r1, #8
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fdcb 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
}
 8002124:	e004      	b.n	8002130 <Set_SenSL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002126:	2108      	movs	r1, #8
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff fdd3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <Set_SenSR>:

void Set_SenSR(uint8_t data){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <Set_SenSR+0x1c>
 8002148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <Set_SenSR+0x30>)
 800214e:	f7ff fdb4 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
}
 8002152:	e004      	b.n	800215e <Set_SenSR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <Set_SenSR+0x30>)
 800215a:	f7ff fdbc 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	48000800 	.word	0x48000800

0800216c <Set_SenFR>:

void Set_SenFR(uint8_t data){
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <Set_SenFR+0x1c>
 800217c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <Set_SenFR+0x30>)
 8002182:	f7ff fd9a 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
}
 8002186:	e004      	b.n	8002192 <Set_SenFR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <Set_SenFR+0x30>)
 800218e:	f7ff fda2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	48000800 	.word	0x48000800

080021a0 <Set_MOT0>:

void Set_MOT0(uint8_t data){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <Set_MOT0+0x1e>
 80021b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f7ff fd7f 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
}
 80021bc:	e005      	b.n	80021ca <Set_MOT0+0x2a>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f7ff fd86 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <Set_MOT1>:

void Set_MOT1(uint8_t data){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <Set_MOT1+0x1a>
 80021e4:	2110      	movs	r1, #16
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <Set_MOT1+0x2c>)
 80021e8:	f7ff fd67 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
}
 80021ec:	e003      	b.n	80021f6 <Set_MOT1+0x22>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021ee:	2110      	movs	r1, #16
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <Set_MOT1+0x2c>)
 80021f2:	f7ff fd70 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	48000400 	.word	0x48000400

08002204 <__NVIC_SetPriorityGrouping>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <LL_RCC_HSI_IsReady+0x24>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d101      	bne.n	8002282 <LL_RCC_HSI_IsReady+0x16>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_HSI_IsReady+0x18>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 0203 	bic.w	r2, r3, #3
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <LL_RCC_GetSysClkSource+0x18>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000

0800232c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002386:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	43db      	mvns	r3, r3
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2103      	movs	r1, #3
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <LL_RCC_PLL_IsReady+0x24>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d101      	bne.n	800242e <LL_RCC_PLL_IsReady+0x16>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_RCC_PLL_IsReady+0x18>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002454:	4013      	ands	r3, r2
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	4311      	orrs	r1, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	f9ff800c 	.word	0xf9ff800c

08002480 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000

080024d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40022000 	.word	0x40022000

08002528 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <LL_FLASH_GetLatency+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000

08002544 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002576:	6093      	str	r3, [r2, #8]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(ch);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 f821 	bl	80055dc <USART_TransmitByte>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff ff91 	bl	80024d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80025ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80025b2:	f7ff ff75 	bl	80024a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f7ff fe24 	bl	8002204 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80025bc:	f7ff ffd4 	bl	8002568 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c0:	f000 f85c 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c4:	f7ff fb96 	bl	8001cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c8:	f7ff fa08 	bl	80019dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025cc:	f002 ff2a 	bl	8005424 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80025d0:	f001 f9f4 	bl	80039bc <MX_SPI2_Init>
  MX_ADC1_Init();
 80025d4:	f7fe fd88 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80025d8:	f7fe fea8 	bl	800132c <MX_ADC3_Init>
  MX_SPI1_Init();
 80025dc:	f001 f922 	bl	8003824 <MX_SPI1_Init>
  MX_ADC4_Init();
 80025e0:	f7fe ff58 	bl	8001494 <MX_ADC4_Init>
  MX_TIM2_Init();
 80025e4:	f002 f9be 	bl	8004964 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025e8:	f002 fa2c 	bl	8004a44 <MX_TIM3_Init>
  MX_TIM1_Init();
 80025ec:	f002 f962 	bl	80048b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80025f0:	f002 fa94 	bl	8004b1c <MX_TIM4_Init>
  MX_TIM5_Init();
 80025f4:	f002 fad0 	bl	8004b98 <MX_TIM5_Init>
  MX_TIM6_Init();
 80025f8:	f002 fb0c 	bl	8004c14 <MX_TIM6_Init>
  MX_TIM8_Init();
 80025fc:	f002 fb44 	bl	8004c88 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  SetLED(0x0E);
 8002600:	200e      	movs	r0, #14
 8002602:	f7ff fce1 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002606:	20c8      	movs	r0, #200	; 0xc8
 8002608:	f013 f9a2 	bl	8015950 <LL_mDelay>
  SetLED(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fcdb 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002612:	20c8      	movs	r0, #200	; 0xc8
 8002614:	f013 f99c 	bl	8015950 <LL_mDelay>
  SetLED(0x0E);
 8002618:	200e      	movs	r0, #14
 800261a:	f7ff fcd5 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 800261e:	20c8      	movs	r0, #200	; 0xc8
 8002620:	f013 f996 	bl	8015950 <LL_mDelay>
  SetLED(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fccf 	bl	8001fc8 <SetLED>

  Communication_Initialize();
 800262a:	f002 ffc9 	bl	80055c0 <Communication_Initialize>
  HAL_init();
 800262e:	f006 f9f7 	bl	8008a20 <HAL_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002632:	f7ff fd47 	bl	80020c4 <SW_IsOn_1>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <main+0xaa>
		MODE_inc();								// モードを1つ進める
 800263c:	f006 fc48 	bl	8008ed0 <MODE_inc>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002640:	20c8      	movs	r0, #200	; 0xc8
 8002642:	f013 f985 	bl	8015950 <LL_mDelay>
		printf("mode selecting\r\n");
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <main+0xd4>)
 8002648:	f014 f910 	bl	801686c <puts>
 800264c:	e00e      	b.n	800266c <main+0xc8>
	}
	else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800264e:	f7ff fd2d 	bl	80020ac <SW_IsOn_0>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d004      	beq.n	8002662 <main+0xbe>
 8002658:	f008 f9f5 	bl	800aa46 <MODE_CheckExe>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <main+0xc8>
//		else if ( SW_ON == SW_EXE_PIN ){
		MODE_exe();								// モード実行
 8002662:	f008 f805 	bl	800a670 <MODE_exe>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002666:	20c8      	movs	r0, #200	; 0xc8
 8002668:	f013 f972 	bl	8015950 <LL_mDelay>
	}
    LL_mDelay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f013 f96f 	bl	8015950 <LL_mDelay>
  Get_Sen_Nowdata();
 8002672:	f00a ff59 	bl	800d528 <Get_Sen_Nowdata>
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002676:	e7dc      	b.n	8002632 <main+0x8e>
 8002678:	0801b990 	.word	0x0801b990

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002680:	2004      	movs	r0, #4
 8002682:	f7ff ff3d 	bl	8002500 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8002686:	bf00      	nop
 8002688:	f7ff ff4e 	bl	8002528 <LL_FLASH_GetLatency>
 800268c:	4603      	mov	r3, r0
 800268e:	2b04      	cmp	r3, #4
 8002690:	d1fa      	bne.n	8002688 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8002692:	f7ff ff57 	bl	8002544 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 8002696:	f7ff fdd9 	bl	800224c <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800269a:	bf00      	nop
 800269c:	f7ff fde6 	bl	800226c <LL_RCC_HSI_IsReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d1fa      	bne.n	800269c <SystemClock_Config+0x20>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80026a6:	2040      	movs	r0, #64	; 0x40
 80026a8:	f7ff fdf4 	bl	8002294 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80026ac:	2300      	movs	r3, #0
 80026ae:	2255      	movs	r2, #85	; 0x55
 80026b0:	2130      	movs	r1, #48	; 0x30
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff fec4 	bl	8002440 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80026b8:	f7ff fee2 	bl	8002480 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80026bc:	f7ff fe9c 	bl	80023f8 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026c0:	bf00      	nop
 80026c2:	f7ff fea9 	bl	8002418 <LL_RCC_PLL_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d1fa      	bne.n	80026c2 <SystemClock_Config+0x46>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f7ff fdf7 	bl	80022c0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80026d2:	2080      	movs	r0, #128	; 0x80
 80026d4:	f7ff fe16 	bl	8002304 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026d8:	bf00      	nop
 80026da:	f7ff fe05 	bl	80022e8 <LL_RCC_GetSysClkSource>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d1fa      	bne.n	80026da <SystemClock_Config+0x5e>
  {
  }

  /* Insure 1��s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <SystemClock_Config+0xc8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <SystemClock_Config+0xc8>)
 80026ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ee:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <SystemClock_Config+0xcc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <SystemClock_Config+0xcc>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <SystemClock_Config+0xcc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8002702:	bf00      	nop
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <SystemClock_Config+0xcc>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b63      	cmp	r3, #99	; 0x63
 800270a:	d9fb      	bls.n	8002704 <SystemClock_Config+0x88>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fdf9 	bl	8002304 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fe0a 	bl	800232c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fe1b 	bl	8002354 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <SystemClock_Config+0xd0>)
 8002720:	f013 f908 	bl	8015934 <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <SystemClock_Config+0xd0>)
 8002726:	f013 f93b 	bl	80159a0 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800272a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800272e:	f7ff fe25 	bl	800237c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <SystemClock_Config+0xd4>)
 8002734:	f7ff fe3c 	bl	80023b0 <LL_RCC_SetADCClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <SystemClock_Config+0xd8>)
 800273a:	f7ff fe39 	bl	80023b0 <LL_RCC_SetADCClockSource>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000edf0 	.word	0xe000edf0
 8002748:	e0001000 	.word	0xe0001000
 800274c:	0a21fe80 	.word	0x0a21fe80
 8002750:	001c0002 	.word	0x001c0002
 8002754:	001e0002 	.word	0x001e0002

08002758 <PARAM_setSpeedType>:
/* ============== */
/*  GainData  */
/* ============== */

void PARAM_setSpeedType( enPARAM_MODE en_mode, enPARAM_MOVE_SPEED en_speed )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	switch( en_mode ){
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	2b17      	cmp	r3, #23
 800276c:	d00e      	beq.n	800278c <PARAM_setSpeedType+0x34>
 800276e:	2b17      	cmp	r3, #23
 8002770:	dc10      	bgt.n	8002794 <PARAM_setSpeedType+0x3c>
 8002772:	2b15      	cmp	r3, #21
 8002774:	d002      	beq.n	800277c <PARAM_setSpeedType+0x24>
 8002776:	2b16      	cmp	r3, #22
 8002778:	d004      	beq.n	8002784 <PARAM_setSpeedType+0x2c>
 800277a:	e00b      	b.n	8002794 <PARAM_setSpeedType+0x3c>
		
		case PARAM_ST:
			en_Speed_st = en_speed;
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <PARAM_setSpeedType+0x4c>)
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	7013      	strb	r3, [r2, #0]
			break;
 8002782:	e00b      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_TRUN:
			en_Speed_trun = en_speed;
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <PARAM_setSpeedType+0x50>)
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	7013      	strb	r3, [r2, #0]
			break;
 800278a:	e007      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_SLA:
			en_Speed_sla = en_speed;
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <PARAM_setSpeedType+0x54>)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	7013      	strb	r3, [r2, #0]
			break;
 8002792:	e003      	b.n	800279c <PARAM_setSpeedType+0x44>
			
		default:
			printf("Can't find parameter type \n\r");
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <PARAM_setSpeedType+0x58>)
 8002796:	f013 ffcd 	bl	8016734 <iprintf>
			break;
 800279a:	bf00      	nop
	}
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000001 	.word	0x20000001
 80027ac:	20000002 	.word	0x20000002
 80027b0:	0801b9a0 	.word	0x0801b9a0

080027b4 <PARAM_getSpeed>:

const stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	const stSPEED* p_adr;
	
	switch( en_mode ){
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	2b16      	cmp	r3, #22
 80027c4:	d845      	bhi.n	8002852 <PARAM_getSpeed+0x9e>
 80027c6:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <PARAM_getSpeed+0x18>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002829 	.word	0x08002829
 80027d0:	08002829 	.word	0x08002829
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002829 	.word	0x08002829
 80027dc:	08002829 	.word	0x08002829
 80027e0:	08002829 	.word	0x08002829
 80027e4:	08002829 	.word	0x08002829
 80027e8:	08002853 	.word	0x08002853
 80027ec:	08002853 	.word	0x08002853
 80027f0:	08002837 	.word	0x08002837
 80027f4:	08002837 	.word	0x08002837
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002853 	.word	0x08002853
 8002800:	08002853 	.word	0x08002853
 8002804:	08002845 	.word	0x08002845
 8002808:	08002845 	.word	0x08002845
 800280c:	08002845 	.word	0x08002845
 8002810:	08002845 	.word	0x08002845
 8002814:	08002845 	.word	0x08002845
 8002818:	08002853 	.word	0x08002853
 800281c:	08002829 	.word	0x08002829
 8002820:	08002837 	.word	0x08002837
 8002824:	08002845 	.word	0x08002845
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StSpeedData[en_Speed_st];
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <PARAM_getSpeed+0xbc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <PARAM_getSpeed+0xc0>)
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
			break;
 8002834:	e017      	b.n	8002866 <PARAM_getSpeed+0xb2>
			
		case PARAM_TRUN:												// 旋回
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnSpeedData[en_Speed_trun];
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <PARAM_getSpeed+0xc4>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <PARAM_getSpeed+0xc8>)
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
			break;
 8002842:	e010      	b.n	8002866 <PARAM_getSpeed+0xb2>
		case PARAM_ENTRY_SURA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SURA:											// 加速中(スラローム)
		case PARAM_CONST_SURA:											// 等速中(スラローム)
		case PARAM_DEC_SURA:											// 減速中(スラローム)
		case PARAM_EXIT_SURA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <PARAM_getSpeed+0xcc>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <PARAM_getSpeed+0xd0>)
 800284c:	4413      	add	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
			break;
 8002850:	e009      	b.n	8002866 <PARAM_getSpeed+0xb2>

		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("Can't find speed type \n\r");
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <PARAM_getSpeed+0xd4>)
 8002854:	f013 ff6e 	bl	8016734 <iprintf>
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <PARAM_getSpeed+0xcc>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <PARAM_getSpeed+0xd0>)
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
			break;
 8002864:	bf00      	nop
	}
	
	return p_adr;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000000 	.word	0x20000000
 8002874:	0801bdc4 	.word	0x0801bdc4
 8002878:	20000001 	.word	0x20000001
 800287c:	0801be14 	.word	0x0801be14
 8002880:	20000002 	.word	0x20000002
 8002884:	0801be64 	.word	0x0801be64
 8002888:	0801b9c0 	.word	0x0801b9c0
 800288c:	00000000 	.word	0x00000000

08002890 <PARAM_makeSra>:
	return p_adr;
}
*/

void PARAM_makeSra( float f_speed, float f_angAcc, float f_g , enSLA_TYPE en_mode)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b094      	sub	sp, #80	; 0x50
 8002894:	af00      	add	r7, sp, #0
 8002896:	ed87 0a03 	vstr	s0, [r7, #12]
 800289a:	edc7 0a02 	vstr	s1, [r7, #8]
 800289e:	ed87 1a01 	vstr	s2, [r7, #4]
 80028a2:	4603      	mov	r3, r0
 80028a4:	70fb      	strb	r3, [r7, #3]
	float	f_start_x;					// 開始x位置 [mm]
	float	f_start_y;					// 開始y位置 [mm]
	float	f_final_x;					// 最終x位置 [mm]
	float	f_final_y;					// 最終y位置 [mm]
	float	f_final_ang;				// 角減速時の最終角度 [rad]	
	float	f_maxAngleV		= 0;		// 最大角速度[rad/s]
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float	f_timeAcc		= 0;		// 加速時間[s]
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
	float	f_accAngle		= 0;		// 加速角度[rad]
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
	float	f_timeConst		= 0;		// 等速時間[s]
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
	float	f_constAngle	= 0;		// 等速角度[rad]
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
	float	f_ang			= 0;		// 演算用、角度 [rad]
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
	float	f_time			= 0;		// 演算用、時間 [s]
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
	float	f_x;						// 演算用x位置 [mm]
	float	f_y;						// 演算用y位置 [mm]
	uint16_t	i = 0;						// ループ用
 80028d0:	2300      	movs	r3, #0
 80028d2:	867b      	strh	r3, [r7, #50]	; 0x32
	stSLA* 	p_adr = &st_Sla[en_mode];		// 記録する走行データ
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4aa8      	ldr	r2, [pc, #672]	; (8002b80 <PARAM_makeSra+0x2f0>)
 80028e0:	4413      	add	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

	// スラロームに応じた設定値からスラロームに必要なパラメータを演算する 
	switch(en_mode){
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d83a      	bhi.n	8002960 <PARAM_makeSra+0xd0>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <PARAM_makeSra+0x60>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002949 	.word	0x08002949
 80028fc:	08002931 	.word	0x08002931

		case SLA_90:
			f_start_x   = HALF_BLOCK;
 8002900:	4ba0      	ldr	r3, [pc, #640]	; (8002b84 <PARAM_makeSra+0x2f4>)
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK;
 800290a:	4b9f      	ldr	r3, [pc, #636]	; (8002b88 <PARAM_makeSra+0x2f8>)
 800290c:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK;
 800290e:	4b9d      	ldr	r3, [pc, #628]	; (8002b84 <PARAM_makeSra+0x2f4>)
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002912:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <PARAM_makeSra+0x2fc>)
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002916:	e024      	b.n	8002962 <PARAM_makeSra+0xd2>

		case SLA_45:
			f_start_x   = HALF_BLOCK;
 8002918:	4b9a      	ldr	r3, [pc, #616]	; (8002b84 <PARAM_makeSra+0x2f4>)
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 0.75f;
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <PARAM_makeSra+0x300>)
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.75f;
 8002926:	4b9a      	ldr	r3, [pc, #616]	; (8002b90 <PARAM_makeSra+0x300>)
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 45.0f * DEG_TO_RAD;
 800292a:	4b9a      	ldr	r3, [pc, #616]	; (8002b94 <PARAM_makeSra+0x304>)
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800292e:	e018      	b.n	8002962 <PARAM_makeSra+0xd2>
			
		case SLA_N90:
			f_start_x   = HALF_BLOCK * 0.5f * 1.4142f;
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <PARAM_makeSra+0x308>)
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = HALF_BLOCK * 1.4142f;
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <PARAM_makeSra+0x30c>)
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK * 0.5f * 1.4142f;
 800293e:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <PARAM_makeSra+0x308>)
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002942:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <PARAM_makeSra+0x2fc>)
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002946:	e00c      	b.n	8002962 <PARAM_makeSra+0xd2>
			
		case SLA_135:
			f_start_x   = HALF_BLOCK;
 8002948:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <PARAM_makeSra+0x2f4>)
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 1.25f;
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <PARAM_makeSra+0x310>)
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.25;
 8002956:	4b93      	ldr	r3, [pc, #588]	; (8002ba4 <PARAM_makeSra+0x314>)
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 135.0f * DEG_TO_RAD;
 800295a:	4b93      	ldr	r3, [pc, #588]	; (8002ba8 <PARAM_makeSra+0x318>)
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800295e:	e000      	b.n	8002962 <PARAM_makeSra+0xd2>

		default:
			break;
 8002960:	bf00      	nop
	}

	// caluculate acc and dec angle speed 
	f_maxAngleV		= f_g / f_speed;							// max angle speed[rad/s] (omega[rad/s] = g[m/s^2] / v[m/s] )
 8002962:	edd7 6a01 	vldr	s13, [r7, #4]
 8002966:	ed97 7a03 	vldr	s14, [r7, #12]
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	f_timeAcc		= f_maxAngleV / f_angAcc;					// acc time[s]
 8002972:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002976:	ed97 7a02 	vldr	s14, [r7, #8]
 800297a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_accAngle		= 0.5f * f_angAcc * f_timeAcc * f_timeAcc;	// acc angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002982:	edd7 7a02 	vldr	s15, [r7, #8]
 8002986:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800298a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800298e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	f_constAngle	= f_final_ang - f_accAngle * 2;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
 80029a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	edc7 7a07 	vstr	s15, [r7, #28]
	f_timeConst		= f_constAngle / f_maxAngleV;				// max angle speed time[s]( t[s] = theta[rad] / omega[rad/s] )
 80029b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80029ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	edc7 7a08 	vstr	s15, [r7, #32]

	// -------------------------------- 
	// sla end position 
	// -------------------------------- 
	// start position 
	f_x		= f_start_x;
 80029c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
	f_y		= f_start_y;
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34

	// ACC 
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80029ce:	2300      	movs	r3, #0
 80029d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80029d2:	e05b      	b.n	8002a8c <PARAM_makeSra+0x1fc>
	
		f_time	=  0.001f * (float)i;								// time[s]
 80029d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029de:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002bac <PARAM_makeSra+0x31c>
 80029e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 80029ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8002a0a:	69b8      	ldr	r0, [r7, #24]
 8002a0c:	f7fd fdc4 	bl	8000598 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	ec43 2b10 	vmov	d0, r2, r3
 8002a18:	f017 fe82 	bl	801a720 <sin>
 8002a1c:	ec53 2b10 	vmov	r2, r3, d0
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f908 	bl	8000c38 <__aeabi_d2f>
 8002a28:	ee07 0a10 	vmov	s14, r0
 8002a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002bac <PARAM_makeSra+0x31c>
 8002a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 8002a48:	69b8      	ldr	r0, [r7, #24]
 8002a4a:	f7fd fda5 	bl	8000598 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	ec43 2b10 	vmov	d0, r2, r3
 8002a56:	f017 fe0f 	bl	801a678 <cos>
 8002a5a:	ec53 2b10 	vmov	r2, r3, d0
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f8e9 	bl	8000c38 <__aeabi_d2f>
 8002a66:	ee07 0a10 	vmov	s14, r0
 8002a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002bac <PARAM_makeSra+0x31c>
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002a86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a88:	3301      	adds	r3, #1
 8002a8a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002bb0 <PARAM_makeSra+0x320>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d395      	bcc.n	80029d4 <PARAM_makeSra+0x144>
	}
	
	// CONST 
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	867b      	strh	r3, [r7, #50]	; 0x32
 8002aac:	e057      	b.n	8002b5e <PARAM_makeSra+0x2ce>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002aae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002bac <PARAM_makeSra+0x31c>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 8002ac4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002adc:	69b8      	ldr	r0, [r7, #24]
 8002ade:	f7fd fd5b 	bl	8000598 <__aeabi_f2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b10 	vmov	d0, r2, r3
 8002aea:	f017 fe19 	bl	801a720 <sin>
 8002aee:	ec53 2b10 	vmov	r2, r3, d0
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f89f 	bl	8000c38 <__aeabi_d2f>
 8002afa:	ee07 0a10 	vmov	s14, r0
 8002afe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002bac <PARAM_makeSra+0x31c>
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002b1a:	69b8      	ldr	r0, [r7, #24]
 8002b1c:	f7fd fd3c 	bl	8000598 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	ec43 2b10 	vmov	d0, r2, r3
 8002b28:	f017 fda6 	bl	801a678 <cos>
 8002b2c:	ec53 2b10 	vmov	r2, r3, d0
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f880 	bl	8000c38 <__aeabi_d2f>
 8002b38:	ee07 0a10 	vmov	s14, r0
 8002b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002bac <PARAM_makeSra+0x31c>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002b58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b62:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bb0 <PARAM_makeSra+0x320>
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d399      	bcc.n	8002aae <PARAM_makeSra+0x21e>
	}

	// DEC
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b7e:	e07d      	b.n	8002c7c <PARAM_makeSra+0x3ec>
 8002b80:	20001330 	.word	0x20001330
 8002b84:	3d3851ec 	.word	0x3d3851ec
 8002b88:	3db851ec 	.word	0x3db851ec
 8002b8c:	3fc90ff9 	.word	0x3fc90ff9
 8002b90:	3d8a3d71 	.word	0x3d8a3d71
 8002b94:	3f490ff9 	.word	0x3f490ff9
 8002b98:	3d02552a 	.word	0x3d02552a
 8002b9c:	3d82552a 	.word	0x3d82552a
 8002ba0:	3de66667 	.word	0x3de66667
 8002ba4:	3cb851ec 	.word	0x3cb851ec
 8002ba8:	4016cbfb 	.word	0x4016cbfb
 8002bac:	3a83126f 	.word	0x3a83126f
 8002bb0:	447a0000 	.word	0x447a0000
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002bb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002bac <PARAM_makeSra+0x31c>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_constAngle +0.5f * f_angAcc * f_time * f_time;	// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002bca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bce:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bde:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f7fd fccc 	bl	8000598 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	ec43 2b10 	vmov	d0, r2, r3
 8002c08:	f017 fd8a 	bl	801a720 <sin>
 8002c0c:	ec53 2b10 	vmov	r2, r3, d0
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fe f810 	bl	8000c38 <__aeabi_d2f>
 8002c18:	ee07 0a10 	vmov	s14, r0
 8002c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 8002bac <PARAM_makeSra+0x31c>
 8002c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7fd fcad 	bl	8000598 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ec43 2b10 	vmov	d0, r2, r3
 8002c46:	f017 fd17 	bl	801a678 <cos>
 8002c4a:	ec53 2b10 	vmov	r2, r3, d0
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd fff1 	bl	8000c38 <__aeabi_d2f>
 8002c56:	ee07 0a10 	vmov	s14, r0
 8002c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8002bac <PARAM_makeSra+0x31c>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002c76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002c78:	3301      	adds	r3, #1
 8002c7a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c80:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8002bb0 <PARAM_makeSra+0x320>
 8002c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8c:	ee17 3a90 	vmov	r3, s15
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d38d      	bcc.n	8002bb4 <PARAM_makeSra+0x324>
	}

	// ---------------------------- 
	//  sla parameter  
	// ---------------------------- 
	p_adr->f_speed				= f_speed;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
	printf("enter speed %5.2f\n\r",f_speed);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7fd fc7a 	bl	8000598 <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	48c9      	ldr	r0, [pc, #804]	; (8002fd0 <PARAM_makeSra+0x740>)
 8002caa:	f013 fd43 	bl	8016734 <iprintf>
	p_adr->f_angAcc				= f_angAcc;// * RAD_TO_DEG ;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	605a      	str	r2, [r3, #4]
	printf("angle acc%5.2f\n\r",f_angAcc);// * RAD_TO_DEG);
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f7fd fc6f 	bl	8000598 <__aeabi_f2d>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	48c5      	ldr	r0, [pc, #788]	; (8002fd4 <PARAM_makeSra+0x744>)
 8002cc0:	f013 fd38 	bl	8016734 <iprintf>
	p_adr->f_angvel				= f_maxAngleV;// * RAD_TO_DEG;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	609a      	str	r2, [r3, #8]
	printf("max angle speed%5.2f\n\r",f_maxAngleV);// * RAD_TO_DEG);
 8002cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ccc:	f7fd fc64 	bl	8000598 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	48c0      	ldr	r0, [pc, #768]	; (8002fd8 <PARAM_makeSra+0x748>)
 8002cd6:	f013 fd2d 	bl	8016734 <iprintf>
	p_adr->us_accAngvelTime		= (uint16_t)( f_timeAcc * 1000.0f );
 8002cda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cde:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002fdc <PARAM_makeSra+0x74c>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	829a      	strh	r2, [r3, #20]
	printf("time of angle acc %5.2f\n\r",f_timeAcc * 1000.0f);
 8002cf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cf8:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002fdc <PARAM_makeSra+0x74c>
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	ee17 0a90 	vmov	r0, s15
 8002d04:	f7fd fc48 	bl	8000598 <__aeabi_f2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	48b4      	ldr	r0, [pc, #720]	; (8002fe0 <PARAM_makeSra+0x750>)
 8002d0e:	f013 fd11 	bl	8016734 <iprintf>
	p_adr->us_constAngvelTime	= (uint16_t)( f_timeConst * 1000.0f );
 8002d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d16:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002fdc <PARAM_makeSra+0x74c>
 8002d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d22:	ee17 3a90 	vmov	r3, s15
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	82da      	strh	r2, [r3, #22]
	printf("time of constant angle acc %5.2f\n\r",f_timeConst * 1000.0f);
 8002d2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d30:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002fdc <PARAM_makeSra+0x74c>
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	ee17 0a90 	vmov	r0, s15
 8002d3c:	f7fd fc2c 	bl	8000598 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	48a7      	ldr	r0, [pc, #668]	; (8002fe4 <PARAM_makeSra+0x754>)
 8002d46:	f013 fcf5 	bl	8016734 <iprintf>
	p_adr->f_ang_AccEnd			= f_accAngle;// * RAD_TO_DEG;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	619a      	str	r2, [r3, #24]
	printf("acc angle[deg] %5.2f\n\r",f_accAngle);// * RAD_TO_DEG);
 8002d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d52:	f7fd fc21 	bl	8000598 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	48a3      	ldr	r0, [pc, #652]	; (8002fe8 <PARAM_makeSra+0x758>)
 8002d5c:	f013 fcea 	bl	8016734 <iprintf>
	p_adr->f_ang_ConstEnd		= ( f_accAngle + f_constAngle );// * RAD_TO_DEG;
 8002d60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	edc3 7a07 	vstr	s15, [r3, #28]
	printf("const angle[deg] %5.2f\n\r",( f_accAngle + f_constAngle ));// * RAD_TO_DEG);
 8002d72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	ee17 0a90 	vmov	r0, s15
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4898      	ldr	r0, [pc, #608]	; (8002fec <PARAM_makeSra+0x75c>)
 8002d8c:	f013 fcd2 	bl	8016734 <iprintf>
	p_adr->f_ang_Total			= f_final_ang;// * RAD_TO_DEG;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d94:	621a      	str	r2, [r3, #32]
	printf("angle [deg] %5.2f\n\r",f_final_ang);// * RAD_TO_DEG);
 8002d96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4893      	ldr	r0, [pc, #588]	; (8002ff0 <PARAM_makeSra+0x760>)
 8002da2:	f013 fcc7 	bl	8016734 <iprintf>
	
	// calaculate enter and exit length 
	switch(en_mode){
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	f200 80dc 	bhi.w	8002f66 <PARAM_makeSra+0x6d6>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <PARAM_makeSra+0x524>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002e27 	.word	0x08002e27
 8002dbc:	08002eed 	.word	0x08002eed
 8002dc0:	08002e8b 	.word	0x08002e8b
		case SLA_90:
			p_adr->f_escapeLen = f_final_x - f_x+0.003 ;
 8002dc4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002dc8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	ee17 0a90 	vmov	r0, s15
 8002dd4:	f7fd fbe0 	bl	8000598 <__aeabi_f2d>
 8002dd8:	a375      	add	r3, pc, #468	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fa7d 	bl	80002dc <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd ff25 	bl	8000c38 <__aeabi_d2f>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.001 ;
 8002df4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002df8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	ee17 0a90 	vmov	r0, s15
 8002e04:	f7fd fbc8 	bl	8000598 <__aeabi_f2d>
 8002e08:	a36b      	add	r3, pc, #428	; (adr r3, 8002fb8 <PARAM_makeSra+0x728>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fa63 	bl	80002d8 <__aeabi_dsub>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd ff0d 	bl	8000c38 <__aeabi_d2f>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	60da      	str	r2, [r3, #12]
			break;
 8002e24:	e0a0      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_45:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.00;
 8002e26:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002ff4 <PARAM_makeSra+0x764>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002ff8 <PARAM_makeSra+0x768>
 8002e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	edc3 7a04 	vstr	s15, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y - ( f_final_x - f_x )+0.003;
 8002e48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e54:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e64:	ee17 0a90 	vmov	r0, s15
 8002e68:	f7fd fb96 	bl	8000598 <__aeabi_f2d>
 8002e6c:	a350      	add	r3, pc, #320	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fa33 	bl	80002dc <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd fedb 	bl	8000c38 <__aeabi_d2f>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	60da      	str	r2, [r3, #12]
			break;
 8002e88:	e06e      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_N90:
			p_adr->f_escapeLen = f_final_x - f_x+0.002;
 8002e8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f7fd fb7d 	bl	8000598 <__aeabi_f2d>
 8002e9e:	a348      	add	r3, pc, #288	; (adr r3, 8002fc0 <PARAM_makeSra+0x730>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fa1a 	bl	80002dc <__adddf3>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fec2 	bl	8000c38 <__aeabi_d2f>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.002;
 8002eba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ebe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec6:	ee17 0a90 	vmov	r0, s15
 8002eca:	f7fd fb65 	bl	8000598 <__aeabi_f2d>
 8002ece:	a33c      	add	r3, pc, #240	; (adr r3, 8002fc0 <PARAM_makeSra+0x730>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fa00 	bl	80002d8 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd feaa 	bl	8000c38 <__aeabi_d2f>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	60da      	str	r2, [r3, #12]
			break;
 8002eea:	e03d      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_135:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.005;
 8002eec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ef0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ff4 <PARAM_makeSra+0x764>
 8002efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd fb48 	bl	8000598 <__aeabi_f2d>
 8002f08:	a32f      	add	r3, pc, #188	; (adr r3, 8002fc8 <PARAM_makeSra+0x738>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd f9e5 	bl	80002dc <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7fd fe8d 	bl	8000c38 <__aeabi_d2f>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y + ( f_final_x - f_x )-0.003;
 8002f24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f30:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002f34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd fb28 	bl	8000598 <__aeabi_f2d>
 8002f48:	a319      	add	r3, pc, #100	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd f9c3 	bl	80002d8 <__aeabi_dsub>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fe6d 	bl	8000c38 <__aeabi_d2f>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	60da      	str	r2, [r3, #12]
			break;
 8002f64:	e000      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		default:
			break;
 8002f66:	bf00      	nop
	}
	printf("entry %6.4f\n\r",f_final_x - f_x);
 8002f68:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002f6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f74:	ee17 0a90 	vmov	r0, s15
 8002f78:	f7fd fb0e 	bl	8000598 <__aeabi_f2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	481e      	ldr	r0, [pc, #120]	; (8002ffc <PARAM_makeSra+0x76c>)
 8002f82:	f013 fbd7 	bl	8016734 <iprintf>
	printf("escape %6.4f\n\r",f_final_y - f_y);
 8002f86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd faff 	bl	8000598 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4818      	ldr	r0, [pc, #96]	; (8003000 <PARAM_makeSra+0x770>)
 8002fa0:	f013 fbc8 	bl	8016734 <iprintf>
}
 8002fa4:	bf00      	nop
 8002fa6:	3750      	adds	r7, #80	; 0x50
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	f3af 8000 	nop.w
 8002fb0:	bc6a7efa 	.word	0xbc6a7efa
 8002fb4:	3f689374 	.word	0x3f689374
 8002fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fbc:	3f50624d 	.word	0x3f50624d
 8002fc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fc4:	3f60624d 	.word	0x3f60624d
 8002fc8:	47ae147b 	.word	0x47ae147b
 8002fcc:	3f747ae1 	.word	0x3f747ae1
 8002fd0:	0801b9dc 	.word	0x0801b9dc
 8002fd4:	0801b9f0 	.word	0x0801b9f0
 8002fd8:	0801ba04 	.word	0x0801ba04
 8002fdc:	447a0000 	.word	0x447a0000
 8002fe0:	0801ba1c 	.word	0x0801ba1c
 8002fe4:	0801ba38 	.word	0x0801ba38
 8002fe8:	0801ba5c 	.word	0x0801ba5c
 8002fec:	0801ba74 	.word	0x0801ba74
 8002ff0:	0801ba90 	.word	0x0801ba90
 8002ff4:	3fb50481 	.word	0x3fb50481
 8002ff8:	00000000 	.word	0x00000000
 8002ffc:	0801baa4 	.word	0x0801baa4
 8003000:	0801bab4 	.word	0x0801bab4

08003004 <PARAM_getSra>:
	printf("entry %6.4f\n\r",f_final_x - f_x);
	printf("escape %6.4f\n\r",f_final_y - f_y);
}

stSLA* PARAM_getSra( enSLA_TYPE en_mode )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	return &st_Sla[en_mode];
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <PARAM_getSra+0x24>)
 800301a:	4413      	add	r3, r2
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20001330 	.word	0x20001330

0800302c <initQueue>:
	}
	printf("\n");
}

//キューの初期化
void initQueue(queue_t* pQueue) {
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	int i;
	//キューの中身を0埋め
	for (i = 0; i <= SIZE - 1; i++) {
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e013      	b.n	8003062 <initQueue+0x36>
		pQueue->data[i].x =  0 ;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	2100      	movs	r1, #0
 8003040:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		pQueue->data[i].y =  0 ;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
		pQueue->data[i].step =  0 ;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	2200      	movs	r2, #0
 800305a:	805a      	strh	r2, [r3, #2]
	for (i = 0; i <= SIZE - 1; i++) {
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b3f      	cmp	r3, #63	; 0x3f
 8003066:	dde8      	ble.n	800303a <initQueue+0xe>
	}
	//初期化
	pQueue->head = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pQueue->tail = 0;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pQueue->flag = EMPTY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
//	printQueue(pQueue);
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <enqueue>:


//enqueue関数
void enqueue(queue_t* pQueue, stPOSITION value) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
//	printf("enQ(%d)\n", value);
	//キューがFullの処理
	if (pQueue->flag == FULL) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800309c:	2b02      	cmp	r3, #2
 800309e:	d103      	bne.n	80030a8 <enqueue+0x1c>
		printf("Full\n");
 80030a0:	4817      	ldr	r0, [pc, #92]	; (8003100 <enqueue+0x74>)
 80030a2:	f013 fbe3 	bl	801686c <puts>
		return;
 80030a6:	e028      	b.n	80030fa <enqueue+0x6e>
	}
	//キューがFullでないので、enqueue操作
	pQueue->data[pQueue->tail] = value;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	//リングバッファのため、tailが配列の終端だったら0にする
	if (pQueue->tail == SIZE - 1) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030bc:	2b3f      	cmp	r3, #63	; 0x3f
 80030be:	d104      	bne.n	80030ca <enqueue+0x3e>
		pQueue->tail = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80030c8:	e006      	b.n	80030d8 <enqueue+0x4c>
		//終端でなければ、tailをインクリメント
	}
	else {
		pQueue->tail++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d104      	bne.n	80030f2 <enqueue+0x66>
		pQueue->flag = FULL;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80030f0:	e003      	b.n	80030fa <enqueue+0x6e>
	}
	else {
		pQueue->flag = AVAILABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);
}
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	0801bac8 	.word	0x0801bac8

08003104 <dequeue>:

//dequeue関数
stPOSITION dequeue(queue_t* pQueue) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
//	printf("deQ\n");
	stPOSITION dequeue;
	//キューがEmptyの処理
	if (pQueue->flag == EMPTY) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <dequeue+0x2a>
		printf("Empty\n");
 8003116:	482c      	ldr	r0, [pc, #176]	; (80031c8 <dequeue+0xc4>)
 8003118:	f013 fba8 	bl	801686c <puts>
		dequeue.x = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	723b      	strb	r3, [r7, #8]
		dequeue.y = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	727b      	strb	r3, [r7, #9]
		dequeue.step = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	817b      	strh	r3, [r7, #10]
		return  dequeue ;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e041      	b.n	80031b2 <dequeue+0xae>
	}
	dequeue = pQueue->data[pQueue->head];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313a:	60bb      	str	r3, [r7, #8]
	//キューがEmptyでなければ、dequeue操作
	pQueue->data[pQueue->head].x =  0 ;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2100      	movs	r1, #0
 8003146:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pQueue->data[pQueue->head].y =  0 ;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	705a      	strb	r2, [r3, #1]
	pQueue->data[pQueue->head].step =  0 ;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	805a      	strh	r2, [r3, #2]
	//リングバッファのため、headが配列の終端だったら0にする
	if (pQueue->head == SIZE - 1) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003170:	2b3f      	cmp	r3, #63	; 0x3f
 8003172:	d104      	bne.n	800317e <dequeue+0x7a>
		pQueue->head = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800317c:	e006      	b.n	800318c <dequeue+0x88>
		//終端でなければ、headをインクリメント
	}
	else {
		pQueue->head++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003198:	429a      	cmp	r2, r3
 800319a:	d104      	bne.n	80031a6 <dequeue+0xa2>
		pQueue->flag = EMPTY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80031a4:	e003      	b.n	80031ae <dequeue+0xaa>
	}
	else {
		pQueue->flag = AVAILABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);

	return dequeue;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
}
 80031b2:	2300      	movs	r3, #0
 80031b4:	89ba      	ldrh	r2, [r7, #12]
 80031b6:	f362 030f 	bfi	r3, r2, #0, #16
 80031ba:	89fa      	ldrh	r2, [r7, #14]
 80031bc:	f362 431f 	bfi	r3, r2, #16, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	0801bad0 	.word	0x0801bad0

080031cc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <LL_DMA_EnableChannel+0x40>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <LL_DMA_EnableChannel+0x40>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	440a      	add	r2, r1
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	4611      	mov	r1, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	440a      	add	r2, r1
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	0801beb4 	.word	0x0801beb4

08003210 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <LL_DMA_DisableChannel+0x40>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <LL_DMA_DisableChannel+0x40>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	440a      	add	r2, r1
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	440a      	add	r2, r1
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	0801beb4 	.word	0x0801beb4

08003254 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	4908      	ldr	r1, [pc, #32]	; (80032a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	440a      	add	r2, r1
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4611      	mov	r1, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	440a      	add	r2, r1
 800328a:	4611      	mov	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	0801beb4 	.word	0x0801beb4

080032a4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <LL_DMA_SetMode+0x48>)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 0220 	bic.w	r2, r3, #32
 80032c8:	4908      	ldr	r1, [pc, #32]	; (80032ec <LL_DMA_SetMode+0x48>)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	440b      	add	r3, r1
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	440b      	add	r3, r1
 80032d6:	4619      	mov	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	0801beb4 	.word	0x0801beb4

080032f0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <LL_DMA_SetPeriphIncMode+0x48>)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003314:	4908      	ldr	r1, [pc, #32]	; (8003338 <LL_DMA_SetPeriphIncMode+0x48>)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	440b      	add	r3, r1
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	440b      	add	r3, r1
 8003322:	4619      	mov	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	0801beb4 	.word	0x0801beb4

0800333c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <LL_DMA_SetMemoryIncMode+0x48>)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4413      	add	r3, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003360:	4908      	ldr	r1, [pc, #32]	; (8003384 <LL_DMA_SetMemoryIncMode+0x48>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	440b      	add	r3, r1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	440b      	add	r3, r1
 800336e:	4619      	mov	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	0801beb4 	.word	0x0801beb4

08003388 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <LL_DMA_SetPeriphSize+0x48>)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	4908      	ldr	r1, [pc, #32]	; (80033d0 <LL_DMA_SetPeriphSize+0x48>)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	440b      	add	r3, r1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	440b      	add	r3, r1
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	0801beb4 	.word	0x0801beb4

080033d4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <LL_DMA_SetMemorySize+0x48>)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f8:	4908      	ldr	r1, [pc, #32]	; (800341c <LL_DMA_SetMemorySize+0x48>)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	440b      	add	r3, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	440b      	add	r3, r1
 8003406:	4619      	mov	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	0801beb4 	.word	0x0801beb4

08003420 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003444:	4908      	ldr	r1, [pc, #32]	; (8003468 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	440b      	add	r3, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4619      	mov	r1, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	440b      	add	r3, r1
 8003452:	4619      	mov	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
             Priority);
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	0801beb4 	.word	0x0801beb4

0800346c <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <LL_DMA_SetDataLength+0x48>)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4908      	ldr	r1, [pc, #32]	; (80034b4 <LL_DMA_SetDataLength+0x48>)
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	440a      	add	r2, r1
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	4611      	mov	r1, r2
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	440a      	add	r2, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	0801beb4 	.word	0x0801beb4

080034b8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d114      	bne.n	80034fa <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4413      	add	r3, r2
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	461a      	mov	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 80034f8:	e013      	b.n	8003522 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4413      	add	r3, r2
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4413      	add	r3, r2
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4413      	add	r3, r2
 800351c:	461a      	mov	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	60d3      	str	r3, [r2, #12]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	0801beb4 	.word	0x0801beb4

08003534 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003548:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800355c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003572:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <LL_DMA_EnableIT_TC+0x40>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <LL_DMA_EnableIT_TC+0x40>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	440a      	add	r2, r1
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	4611      	mov	r1, r2
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	440a      	add	r2, r1
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	0801beb4 	.word	0x0801beb4

080035cc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <LL_DMA_EnableIT_TE+0x40>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <LL_DMA_EnableIT_TE+0x40>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	440a      	add	r2, r1
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	4611      	mov	r1, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	440a      	add	r2, r1
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	0801beb4 	.word	0x0801beb4

08003610 <LL_AHB2_GRP1_EnableClock>:
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800361a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000

08003640 <LL_APB1_GRP1_EnableClock>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 800364a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003656:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40021000 	.word	0x40021000

08003670 <LL_APB2_GRP1_EnableClock>:
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 800367a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4313      	orrs	r3, r2
 8003682:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003686:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000

080036a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d101      	bne.n	80036d8 <LL_SPI_IsEnabled+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_SPI_IsEnabled+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 0210 	bic.w	r2, r3, #16
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f023 0208 	bic.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	605a      	str	r2, [r3, #4]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	605a      	str	r2, [r3, #4]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	330c      	adds	r3, #12
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	b2db      	uxtb	r3, r3
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_GPIO_SetOutputPin>:
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_GPIO_ResetOutputPin>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b090      	sub	sp, #64	; 0x40
 8003828:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800382a:	f107 0318 	add.w	r3, r7, #24
 800382e:	2228      	movs	r2, #40	; 0x28
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f012 f8fc 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	463b      	mov	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003848:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800384c:	f7ff ff10 	bl	8003670 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003850:	2001      	movs	r0, #1
 8003852:	f7ff fedd 	bl	8003610 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003856:	2320      	movs	r3, #32
 8003858:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800385a:	2302      	movs	r3, #2
 800385c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800386a:	2305      	movs	r3, #5
 800386c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	463b      	mov	r3, r7
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003876:	f010 fe6e 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800387a:	2340      	movs	r3, #64	; 0x40
 800387c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800387e:	2302      	movs	r3, #2
 8003880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800388e:	2305      	movs	r3, #5
 8003890:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389a:	f010 fe5c 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038a2:	2302      	movs	r3, #2
 80038a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80038b2:	2305      	movs	r3, #5
 80038b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b6:	463b      	mov	r3, r7
 80038b8:	4619      	mov	r1, r3
 80038ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038be:	f010 fe4a 	bl	8014556 <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_SPI1_RX);
 80038c2:	220a      	movs	r2, #10
 80038c4:	2100      	movs	r1, #0
 80038c6:	483b      	ldr	r0, [pc, #236]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038c8:	f7ff fe34 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	4838      	ldr	r0, [pc, #224]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038d2:	f7ff fcbf 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	4836      	ldr	r0, [pc, #216]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038dc:	f7ff fda0 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2100      	movs	r1, #0
 80038e4:	4833      	ldr	r0, [pc, #204]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038e6:	f7ff fcdd 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	4831      	ldr	r0, [pc, #196]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038f0:	f7ff fcfe 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	2100      	movs	r1, #0
 80038f8:	482e      	ldr	r0, [pc, #184]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038fa:	f7ff fd1f 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	482c      	ldr	r0, [pc, #176]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003904:	f7ff fd40 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8003908:	2200      	movs	r2, #0
 800390a:	2100      	movs	r1, #0
 800390c:	4829      	ldr	r0, [pc, #164]	; (80039b4 <MX_SPI1_Init+0x190>)
 800390e:	f7ff fd61 	bl	80033d4 <LL_DMA_SetMemorySize>

  /* SPI1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_SPI1_TX);
 8003912:	220b      	movs	r2, #11
 8003914:	2101      	movs	r1, #1
 8003916:	4827      	ldr	r0, [pc, #156]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003918:	f7ff fe0c 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800391c:	2210      	movs	r2, #16
 800391e:	2101      	movs	r1, #1
 8003920:	4824      	ldr	r0, [pc, #144]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003922:	f7ff fc97 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003926:	2200      	movs	r2, #0
 8003928:	2101      	movs	r1, #1
 800392a:	4822      	ldr	r0, [pc, #136]	; (80039b4 <MX_SPI1_Init+0x190>)
 800392c:	f7ff fd78 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8003930:	2200      	movs	r2, #0
 8003932:	2101      	movs	r1, #1
 8003934:	481f      	ldr	r0, [pc, #124]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003936:	f7ff fcb5 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800393a:	2200      	movs	r2, #0
 800393c:	2101      	movs	r1, #1
 800393e:	481d      	ldr	r0, [pc, #116]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003940:	f7ff fcd6 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	2101      	movs	r1, #1
 8003948:	481a      	ldr	r0, [pc, #104]	; (80039b4 <MX_SPI1_Init+0x190>)
 800394a:	f7ff fcf7 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800394e:	2200      	movs	r2, #0
 8003950:	2101      	movs	r1, #1
 8003952:	4818      	ldr	r0, [pc, #96]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003954:	f7ff fd18 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8003958:	2200      	movs	r2, #0
 800395a:	2101      	movs	r1, #1
 800395c:	4815      	ldr	r0, [pc, #84]	; (80039b4 <MX_SPI1_Init+0x190>)
 800395e:	f7ff fd39 	bl	80033d4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003966:	f44f 7382 	mov.w	r3, #260	; 0x104
 800396a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800396c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003970:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003972:	2302      	movs	r3, #2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003976:	2301      	movs	r3, #1
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800397a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003980:	2318      	movs	r3, #24
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800398c:	2307      	movs	r3, #7
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	4619      	mov	r1, r3
 8003996:	4808      	ldr	r0, [pc, #32]	; (80039b8 <MX_SPI1_Init+0x194>)
 8003998:	f011 f91d 	bl	8014bd6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800399c:	2100      	movs	r1, #0
 800399e:	4806      	ldr	r0, [pc, #24]	; (80039b8 <MX_SPI1_Init+0x194>)
 80039a0:	f7ff fea1 	bl	80036e6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80039a4:	4804      	ldr	r0, [pc, #16]	; (80039b8 <MX_SPI1_Init+0x194>)
 80039a6:	f7ff fec4 	bl	8003732 <LL_SPI_DisableNSSPulseMgt>

}
 80039aa:	bf00      	nop
 80039ac:	3740      	adds	r7, #64	; 0x40
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40013000 	.word	0x40013000

080039bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	; 0x40
 80039c0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039c2:	f107 0318 	add.w	r3, r7, #24
 80039c6:	2228      	movs	r2, #40	; 0x28
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f012 f830 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	463b      	mov	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039e4:	f7ff fe2c 	bl	8003640 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80039e8:	2002      	movs	r0, #2
 80039ea:	f7ff fe11 	bl	8003610 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80039ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039f4:	2302      	movs	r3, #2
 80039f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a04:	2305      	movs	r3, #5
 8003a06:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	463b      	mov	r3, r7
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	484f      	ldr	r0, [pc, #316]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a0e:	f010 fda2 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8003a12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a28:	2305      	movs	r3, #5
 8003a2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4846      	ldr	r0, [pc, #280]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a32:	f010 fd90 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	463b      	mov	r3, r7
 8003a52:	4619      	mov	r1, r3
 8003a54:	483d      	ldr	r0, [pc, #244]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a56:	f010 fd7e 	bl	8014556 <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_RX);
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	483c      	ldr	r0, [pc, #240]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a60:	f7ff fd68 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2102      	movs	r1, #2
 8003a68:	4839      	ldr	r0, [pc, #228]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a6a:	f7ff fbf3 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2102      	movs	r1, #2
 8003a72:	4837      	ldr	r0, [pc, #220]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a74:	f7ff fcd4 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	4834      	ldr	r0, [pc, #208]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a7e:	f7ff fc11 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2102      	movs	r1, #2
 8003a86:	4832      	ldr	r0, [pc, #200]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a88:	f7ff fc32 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	2102      	movs	r1, #2
 8003a90:	482f      	ldr	r0, [pc, #188]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a92:	f7ff fc53 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2102      	movs	r1, #2
 8003a9a:	482d      	ldr	r0, [pc, #180]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a9c:	f7ff fc74 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	482a      	ldr	r0, [pc, #168]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aa6:	f7ff fc95 	bl	80033d4 <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_SPI2_TX);
 8003aaa:	220d      	movs	r2, #13
 8003aac:	2103      	movs	r1, #3
 8003aae:	4828      	ldr	r0, [pc, #160]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ab0:	f7ff fd40 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	2103      	movs	r1, #3
 8003ab8:	4825      	ldr	r0, [pc, #148]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aba:	f7ff fbcb 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	4823      	ldr	r0, [pc, #140]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ac4:	f7ff fcac 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2103      	movs	r1, #3
 8003acc:	4820      	ldr	r0, [pc, #128]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ace:	f7ff fbe9 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	481e      	ldr	r0, [pc, #120]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ad8:	f7ff fc0a 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	2103      	movs	r1, #3
 8003ae0:	481b      	ldr	r0, [pc, #108]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ae2:	f7ff fc2b 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2103      	movs	r1, #3
 8003aea:	4819      	ldr	r0, [pc, #100]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aec:	f7ff fc4c 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2103      	movs	r1, #3
 8003af4:	4816      	ldr	r0, [pc, #88]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003af6:	f7ff fc6d 	bl	80033d4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003afe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b02:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b08:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003b18:	2318      	movs	r3, #24
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003b24:	2307      	movs	r3, #7
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003b28:	f107 0318 	add.w	r3, r7, #24
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b30:	f011 f851 	bl	8014bd6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003b34:	2100      	movs	r1, #0
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b38:	f7ff fdd5 	bl	80036e6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b3e:	f7ff fdf8 	bl	8003732 <LL_SPI_DisableNSSPulseMgt>

}
 8003b42:	bf00      	nop
 8003b44:	3740      	adds	r7, #64	; 0x40
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40003800 	.word	0x40003800

08003b58 <DMA1_Channel1_Init>:

//uint8_t rx_flag = 0;
//uint8_t tx_flag = 0;

void DMA1_Channel1_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_1);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4806      	ldr	r0, [pc, #24]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b60:	f7ff fd12 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_1);
 8003b64:	2100      	movs	r1, #0
 8003b66:	4804      	ldr	r0, [pc, #16]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b68:	f7ff fd30 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4802      	ldr	r0, [pc, #8]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b70:	f7ff fb4e 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40020000 	.word	0x40020000

08003b7c <DMA1_Channel2_Init>:

void DMA1_Channel2_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_2);
 8003b80:	2101      	movs	r1, #1
 8003b82:	4806      	ldr	r0, [pc, #24]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b84:	f7ff fd00 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_2);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b8c:	f7ff fd1e 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003b90:	2101      	movs	r1, #1
 8003b92:	4802      	ldr	r0, [pc, #8]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b94:	f7ff fb3c 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40020000 	.word	0x40020000

08003ba0 <DMA1_Channel3_Init>:

void DMA1_Channel3_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_3);
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4806      	ldr	r0, [pc, #24]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003ba8:	f7ff fcee 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_3);
 8003bac:	2102      	movs	r1, #2
 8003bae:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003bb0:	f7ff fd0c 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003bb8:	f7ff fb2a 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <DMA1_Channel4_Init>:

void DMA1_Channel4_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_4);
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4806      	ldr	r0, [pc, #24]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bcc:	f7ff fcdc 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_4);
 8003bd0:	2103      	movs	r1, #3
 8003bd2:	4804      	ldr	r0, [pc, #16]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bd4:	f7ff fcfa 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003bd8:	2103      	movs	r1, #3
 8003bda:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bdc:	f7ff fb18 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020000 	.word	0x40020000

08003be8 <SPI1_Start>:

void SPI1_Start(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
 8003bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf0:	4808      	ldr	r0, [pc, #32]	; (8003c14 <SPI1_Start+0x2c>)
 8003bf2:	f7ff fd8b 	bl	800370c <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel1_Init();
 8003bf6:	f7ff ffaf 	bl	8003b58 <DMA1_Channel1_Init>
	DMA1_Channel2_Init();
 8003bfa:	f7ff ffbf 	bl	8003b7c <DMA1_Channel2_Init>
	LL_SPI_EnableDMAReq_RX(SPI1);
 8003bfe:	4805      	ldr	r0, [pc, #20]	; (8003c14 <SPI1_Start+0x2c>)
 8003c00:	f7ff fdba 	bl	8003778 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI1);
 8003c04:	4803      	ldr	r0, [pc, #12]	; (8003c14 <SPI1_Start+0x2c>)
 8003c06:	f7ff fdc7 	bl	8003798 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI1);
 8003c0a:	4802      	ldr	r0, [pc, #8]	; (8003c14 <SPI1_Start+0x2c>)
 8003c0c:	f7ff fd48 	bl	80036a0 <LL_SPI_Enable>
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40013000 	.word	0x40013000

08003c18 <SPI1_DMA_Communication>:

void SPI1_DMA_Communication(uint8_t length)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003c22:	2101      	movs	r1, #1
 8003c24:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <SPI1_DMA_Communication+0x98>)
 8003c26:	f7ff fdee 	bl	8003806 <LL_GPIO_ResetOutputPin>

	if( LL_SPI_IsActiveFlag_RXNE(SPI1) == SET)LL_SPI_ReceiveData8(SPI1);
 8003c2a:	4822      	ldr	r0, [pc, #136]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c2c:	f7ff fd91 	bl	8003752 <LL_SPI_IsActiveFlag_RXNE>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <SPI1_DMA_Communication+0x24>
 8003c36:	481f      	ldr	r0, [pc, #124]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c38:	f7ff fdca 	bl	80037d0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI1) == RESET) LL_SPI_Enable(SPI1);
 8003c3c:	481d      	ldr	r0, [pc, #116]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c3e:	f7ff fd3f 	bl	80036c0 <LL_SPI_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <SPI1_DMA_Communication+0x36>
 8003c48:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c4a:	f7ff fd29 	bl	80036a0 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_2,(uint32_t)SPI1TransmitData,
 8003c4e:	4c1a      	ldr	r4, [pc, #104]	; (8003cb8 <SPI1_DMA_Communication+0xa0>)
 8003c50:	4818      	ldr	r0, [pc, #96]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c52:	f7ff fdb1 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2210      	movs	r2, #16
 8003c5a:	9200      	str	r2, [sp, #0]
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4816      	ldr	r0, [pc, #88]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c62:	f7ff fc29 	bl	80034b8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI1),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_2,length);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4813      	ldr	r0, [pc, #76]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c6e:	f7ff fbfd 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_1,LL_SPI_DMA_GetRegAddr(SPI1),
 8003c72:	4810      	ldr	r0, [pc, #64]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c74:	f7ff fda0 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4911      	ldr	r1, [pc, #68]	; (8003cc0 <SPI1_DMA_Communication+0xa8>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	2100      	movs	r1, #0
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c86:	f7ff fc17 	bl	80034b8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI1ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,length);
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c92:	f7ff fbeb 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003c96:	2101      	movs	r1, #1
 8003c98:	4808      	ldr	r0, [pc, #32]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c9a:	f7ff fa97 	bl	80031cc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003ca2:	f7ff fa93 	bl	80031cc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	40013000 	.word	0x40013000
 8003cb8:	200013c0 	.word	0x200013c0
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	200013c8 	.word	0x200013c8

08003cc4 <SPI1_DMA1_ReceiveComplete_Callback>:

void SPI1_DMA1_ReceiveComplete_Callback(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4804      	ldr	r0, [pc, #16]	; (8003cdc <SPI1_DMA1_ReceiveComplete_Callback+0x18>)
 8003ccc:	f7ff faa0 	bl	8003210 <LL_DMA_DisableChannel>
	LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <SPI1_DMA1_ReceiveComplete_Callback+0x1c>)
 8003cd4:	f7ff fd89 	bl	80037ea <LL_GPIO_SetOutputPin>
//	rx_flag = 1;
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	48000400 	.word	0x48000400

08003ce4 <SPI1_DMA1_TransmitComplete_Callback>:

void SPI1_DMA1_TransmitComplete_Callback(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <SPI1_DMA1_TransmitComplete_Callback+0x10>)
 8003cec:	f7ff fa90 	bl	8003210 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <Get_SPI1ReciveData>:

uint8_t Get_SPI1ReciveData(uint8_t num){
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	return SPI1ReciveData[num];
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <Get_SPI1ReciveData+0x1c>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	200013c8 	.word	0x200013c8

08003d18 <SetSPI1TransmitData>:

void SetSPI1TransmitData(uint8_t num, uint8_t data){
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
	SPI1TransmitData[num] = data;
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <SetSPI1TransmitData+0x24>)
 8003d2c:	79ba      	ldrb	r2, [r7, #6]
 8003d2e:	54ca      	strb	r2, [r1, r3]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	200013c0 	.word	0x200013c0

08003d40 <SPI2_Start>:

uint8_t SPI2ReciveData[SPI2_DATA_BUFFR_SIZE];
uint8_t SPI2TransmitData[SPI2_DATA_BUFFR_SIZE];

void SPI2_Start(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 8003d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <SPI2_Start+0x2c>)
 8003d4a:	f7ff fcdf 	bl	800370c <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel3_Init();
 8003d4e:	f7ff ff27 	bl	8003ba0 <DMA1_Channel3_Init>
	DMA1_Channel4_Init();
 8003d52:	f7ff ff37 	bl	8003bc4 <DMA1_Channel4_Init>
	LL_SPI_EnableDMAReq_RX(SPI2);
 8003d56:	4805      	ldr	r0, [pc, #20]	; (8003d6c <SPI2_Start+0x2c>)
 8003d58:	f7ff fd0e 	bl	8003778 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI2);
 8003d5c:	4803      	ldr	r0, [pc, #12]	; (8003d6c <SPI2_Start+0x2c>)
 8003d5e:	f7ff fd1b 	bl	8003798 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI2);
 8003d62:	4802      	ldr	r0, [pc, #8]	; (8003d6c <SPI2_Start+0x2c>)
 8003d64:	f7ff fc9c 	bl	80036a0 <LL_SPI_Enable>
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40003800 	.word	0x40003800

08003d70 <SPI2_DMA_Communication>:

void SPI2_DMA_Communication(uint8_t length,uint8_t dir)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	4603      	mov	r3, r0
 8003d78:	460a      	mov	r2, r1
 8003d7a:	71fb      	strb	r3, [r7, #7]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71bb      	strb	r3, [r7, #6]
  if(dir == enL){
 8003d80:	79bb      	ldrb	r3, [r7, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <SPI2_DMA_Communication+0x22>
	  LL_GPIO_ResetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8a:	4825      	ldr	r0, [pc, #148]	; (8003e20 <SPI2_DMA_Communication+0xb0>)
 8003d8c:	f7ff fd3b 	bl	8003806 <LL_GPIO_ResetOutputPin>
 8003d90:	e003      	b.n	8003d9a <SPI2_DMA_Communication+0x2a>
  }else{
    LL_GPIO_ResetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	4822      	ldr	r0, [pc, #136]	; (8003e20 <SPI2_DMA_Communication+0xb0>)
 8003d96:	f7ff fd36 	bl	8003806 <LL_GPIO_ResetOutputPin>
  }
	if( LL_SPI_IsActiveFlag_RXNE(SPI2) == SET)LL_SPI_ReceiveData8(SPI2);
 8003d9a:	4822      	ldr	r0, [pc, #136]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003d9c:	f7ff fcd9 	bl	8003752 <LL_SPI_IsActiveFlag_RXNE>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <SPI2_DMA_Communication+0x3c>
 8003da6:	481f      	ldr	r0, [pc, #124]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003da8:	f7ff fd12 	bl	80037d0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI2) == RESET) LL_SPI_Enable(SPI2);
 8003dac:	481d      	ldr	r0, [pc, #116]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dae:	f7ff fc87 	bl	80036c0 <LL_SPI_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <SPI2_DMA_Communication+0x4e>
 8003db8:	481a      	ldr	r0, [pc, #104]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dba:	f7ff fc71 	bl	80036a0 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_4,(uint32_t)SPI2TransmitData,
 8003dbe:	4c1a      	ldr	r4, [pc, #104]	; (8003e28 <SPI2_DMA_Communication+0xb8>)
 8003dc0:	4818      	ldr	r0, [pc, #96]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dc2:	f7ff fcf9 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2210      	movs	r2, #16
 8003dca:	9200      	str	r2, [sp, #0]
 8003dcc:	4622      	mov	r2, r4
 8003dce:	2103      	movs	r1, #3
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003dd2:	f7ff fb71 	bl	80034b8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI2),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_4,length);
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4813      	ldr	r0, [pc, #76]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003dde:	f7ff fb45 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_3,LL_SPI_DMA_GetRegAddr(SPI2),
 8003de2:	4810      	ldr	r0, [pc, #64]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003de4:	f7ff fce8 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4911      	ldr	r1, [pc, #68]	; (8003e30 <SPI2_DMA_Communication+0xc0>)
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	460b      	mov	r3, r1
 8003df2:	2102      	movs	r1, #2
 8003df4:	480d      	ldr	r0, [pc, #52]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003df6:	f7ff fb5f 	bl	80034b8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI2ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,length);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2102      	movs	r1, #2
 8003e00:	480a      	ldr	r0, [pc, #40]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e02:	f7ff fb33 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003e06:	2103      	movs	r1, #3
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e0a:	f7ff f9df 	bl	80031cc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4806      	ldr	r0, [pc, #24]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e12:	f7ff f9db 	bl	80031cc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	48000400 	.word	0x48000400
 8003e24:	40003800 	.word	0x40003800
 8003e28:	200013c4 	.word	0x200013c4
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	200013cc 	.word	0x200013cc

08003e34 <SPI2_DMA1_ReceiveComplete_Callback>:

void SPI2_DMA1_ReceiveComplete_Callback(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4809      	ldr	r0, [pc, #36]	; (8003e60 <SPI2_DMA1_ReceiveComplete_Callback+0x2c>)
 8003e3c:	f7ff f9e8 	bl	8003210 <LL_DMA_DisableChannel>
  if(encoderdir == enL){
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <SPI2_DMA1_ReceiveComplete_Callback+0x30>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <SPI2_DMA1_ReceiveComplete_Callback+0x20>
	  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e4e:	f7ff fccc 	bl	80037ea <LL_GPIO_SetOutputPin>
  }else{
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
  }
//	rx_flag = 1;
}
 8003e52:	e003      	b.n	8003e5c <SPI2_DMA1_ReceiveComplete_Callback+0x28>
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	4804      	ldr	r0, [pc, #16]	; (8003e68 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e58:	f7ff fcc7 	bl	80037ea <LL_GPIO_SetOutputPin>
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020000 	.word	0x40020000
 8003e64:	20000b1a 	.word	0x20000b1a
 8003e68:	48000400 	.word	0x48000400

08003e6c <SPI2_DMA1_TransmitComplete_Callback>:

void SPI2_DMA1_TransmitComplete_Callback(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003e70:	2103      	movs	r1, #3
 8003e72:	4802      	ldr	r0, [pc, #8]	; (8003e7c <SPI2_DMA1_TransmitComplete_Callback+0x10>)
 8003e74:	f7ff f9cc 	bl	8003210 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40020000 	.word	0x40020000

08003e80 <Get_SPI2ReciveData>:

uint8_t Get_SPI2ReciveData(uint8_t num){
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	return SPI2ReciveData[num];
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <Get_SPI2ReciveData+0x1c>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	200013cc 	.word	0x200013cc

08003ea0 <SetSPI2TransmitData>:

void SetSPI2TransmitData(uint8_t num, uint8_t data){
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	71fb      	strb	r3, [r7, #7]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71bb      	strb	r3, [r7, #6]
	SPI2TransmitData[num] = data;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4904      	ldr	r1, [pc, #16]	; (8003ec4 <SetSPI2TransmitData+0x24>)
 8003eb4:	79ba      	ldrb	r2, [r7, #6]
 8003eb6:	54ca      	strb	r2, [r1, r3]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	200013c4 	.word	0x200013c4

08003ec8 <LL_DMA_IsActiveFlag_TC1>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d101      	bne.n	8003ee0 <LL_DMA_IsActiveFlag_TC1+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_DMA_IsActiveFlag_TC2>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d101      	bne.n	8003f06 <LL_DMA_IsActiveFlag_TC2+0x18>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_DMA_IsActiveFlag_TC3>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d101      	bne.n	8003f2e <LL_DMA_IsActiveFlag_TC3+0x1a>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_DMA_IsActiveFlag_TC3+0x1c>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_DMA_IsActiveFlag_TC4>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d101      	bne.n	8003f56 <LL_DMA_IsActiveFlag_TC4+0x1a>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <LL_DMA_IsActiveFlag_TC4+0x1c>
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_DMA_ClearFlag_GI1>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	605a      	str	r2, [r3, #4]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_DMA_ClearFlag_GI2>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_DMA_ClearFlag_GI3>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa6:	605a      	str	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_DMA_ClearFlag_GI4>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc2:	605a      	str	r2, [r3, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f06f 0201 	mvn.w	r2, #1
 8003fde:	611a      	str	r2, [r3, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <HardFault_Handler+0x4>

08004026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800402a:	e7fe      	b.n	800402a <MemManage_Handler+0x4>

0800402c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <BusFault_Handler+0x4>

08004032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <UsageFault_Handler+0x4>

08004038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1){
 8004074:	4806      	ldr	r0, [pc, #24]	; (8004090 <DMA1_Channel1_IRQHandler+0x20>)
 8004076:	f7ff ff27 	bl	8003ec8 <LL_DMA_IsActiveFlag_TC1>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d104      	bne.n	800408a <DMA1_Channel1_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI1(DMA1);
 8004080:	4803      	ldr	r0, [pc, #12]	; (8004090 <DMA1_Channel1_IRQHandler+0x20>)
 8004082:	f7ff ff6f 	bl	8003f64 <LL_DMA_ClearFlag_GI1>
		SPI1_DMA1_ReceiveComplete_Callback();
 8004086:	f7ff fe1d 	bl	8003cc4 <SPI1_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40020000 	.word	0x40020000

08004094 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1) == 1){
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <DMA1_Channel2_IRQHandler+0x20>)
 800409a:	f7ff ff28 	bl	8003eee <LL_DMA_IsActiveFlag_TC2>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d104      	bne.n	80040ae <DMA1_Channel2_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI2(DMA1);
 80040a4:	4803      	ldr	r0, [pc, #12]	; (80040b4 <DMA1_Channel2_IRQHandler+0x20>)
 80040a6:	f7ff ff6a 	bl	8003f7e <LL_DMA_ClearFlag_GI2>
		SPI1_DMA1_TransmitComplete_Callback();
 80040aa:	f7ff fe1b 	bl	8003ce4 <SPI1_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020000 	.word	0x40020000

080040b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1) == 1){
 80040bc:	4806      	ldr	r0, [pc, #24]	; (80040d8 <DMA1_Channel3_IRQHandler+0x20>)
 80040be:	f7ff ff29 	bl	8003f14 <LL_DMA_IsActiveFlag_TC3>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d104      	bne.n	80040d2 <DMA1_Channel3_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI3(DMA1);
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <DMA1_Channel3_IRQHandler+0x20>)
 80040ca:	f7ff ff65 	bl	8003f98 <LL_DMA_ClearFlag_GI3>
		SPI2_DMA1_ReceiveComplete_Callback();
 80040ce:	f7ff feb1 	bl	8003e34 <SPI2_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020000 	.word	0x40020000

080040dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1){
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <DMA1_Channel4_IRQHandler+0x20>)
 80040e2:	f7ff ff2b 	bl	8003f3c <LL_DMA_IsActiveFlag_TC4>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d104      	bne.n	80040f6 <DMA1_Channel4_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI4(DMA1);
 80040ec:	4803      	ldr	r0, [pc, #12]	; (80040fc <DMA1_Channel4_IRQHandler+0x20>)
 80040ee:	f7ff ff61 	bl	8003fb4 <LL_DMA_ClearFlag_GI4>
	  SPI2_DMA1_TransmitComplete_Callback();
 80040f2:	f7ff febb 	bl	8003e6c <SPI2_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020000 	.word	0x40020000

08004100 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM1)==1){
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004122:	f7ff ff63 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <TIM1_UP_TIM16_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM1);
 800412c:	4803      	ldr	r0, [pc, #12]	; (800413c <TIM1_UP_TIM16_IRQHandler+0x20>)
 800412e:	f7ff ff4f 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
  INTC_sys();
 8004132:	f001 fadd 	bl	80056f0 <INTC_sys>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00

08004140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM4)==1){
 8004144:	481e      	ldr	r0, [pc, #120]	; (80041c0 <TIM4_IRQHandler+0x80>)
 8004146:	f7ff ff51 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <TIM4_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8004150:	481b      	ldr	r0, [pc, #108]	; (80041c0 <TIM4_IRQHandler+0x80>)
 8004152:	f7ff ff3d 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
  switch(i){
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <TIM4_IRQHandler+0x84>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d821      	bhi.n	80041a2 <TIM4_IRQHandler+0x62>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <TIM4_IRQHandler+0x24>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004175 	.word	0x08004175
 8004168:	0800417d 	.word	0x0800417d
 800416c:	0800418b 	.word	0x0800418b
 8004170:	08004199 	.word	0x08004199
		case 0:
			recv_spi_encoder(enL);
 8004174:	2000      	movs	r0, #0
 8004176:	f004 f98f 	bl	8008498 <recv_spi_encoder>
			break;
 800417a:	e012      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 1:
			Set_encoder_data(enL);
 800417c:	2000      	movs	r0, #0
 800417e:	f004 f999 	bl	80084b4 <Set_encoder_data>
      recv_spi_encoder(enR);
 8004182:	2001      	movs	r0, #1
 8004184:	f004 f988 	bl	8008498 <recv_spi_encoder>
			break;
 8004188:	e00b      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 2:
      Set_encoder_data(enR);
 800418a:	2001      	movs	r0, #1
 800418c:	f004 f992 	bl	80084b4 <Set_encoder_data>
      ICM_42688_GyroRead_DMA(0x29);
 8004190:	2029      	movs	r0, #41	; 0x29
 8004192:	f004 fb0e 	bl	80087b2 <ICM_42688_GyroRead_DMA>
			break;
 8004196:	e004      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 3:
			ICM_42688_GyroData();
 8004198:	f004 fb1a 	bl	80087d0 <ICM_42688_GyroData>
			GYRO_Pol();
 800419c:	f004 fbc8 	bl	8008930 <GYRO_Pol>
			break;
 80041a0:	bf00      	nop
	}
	i = (i+1)%4;
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <TIM4_IRQHandler+0x84>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	425a      	negs	r2, r3
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	f002 0203 	and.w	r2, r2, #3
 80041b2:	bf58      	it	pl
 80041b4:	4253      	negpl	r3, r2
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <TIM4_IRQHandler+0x84>)
 80041ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40000800 	.word	0x40000800
 80041c4:	20000210 	.word	0x20000210

080041c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM5)==1){
 80041cc:	4819      	ldr	r0, [pc, #100]	; (8004234 <TIM5_IRQHandler+0x6c>)
 80041ce:	f7ff ff0d 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d102      	bne.n	80041de <TIM5_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 80041d8:	4816      	ldr	r0, [pc, #88]	; (8004234 <TIM5_IRQHandler+0x6c>)
 80041da:	f7ff fef9 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
	switch(i){
 80041de:	4b16      	ldr	r3, [pc, #88]	; (8004238 <TIM5_IRQHandler+0x70>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d816      	bhi.n	8004214 <TIM5_IRQHandler+0x4c>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <TIM5_IRQHandler+0x24>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	08004209 	.word	0x08004209
 80041f8:	0800420f 	.word	0x0800420f
		case 0:
			DIST_Pol_FL();
 80041fc:	f009 f8b6 	bl	800d36c <DIST_Pol_FL>
			break;
 8004200:	e008      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 1:
			DIST_Pol_SR();
 8004202:	f009 f95b 	bl	800d4bc <DIST_Pol_SR>
			break;
 8004206:	e005      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 2:
			DIST_Pol_SL();
 8004208:	f009 f920 	bl	800d44c <DIST_Pol_SL>
			break;
 800420c:	e002      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 3:
			DIST_Pol_FR();
 800420e:	f009 f8e5 	bl	800d3dc <DIST_Pol_FR>
			break;
 8004212:	bf00      	nop
	}
	i = (i+1)%4;
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <TIM5_IRQHandler+0x70>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	425a      	negs	r2, r3
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	f002 0203 	and.w	r2, r2, #3
 8004224:	bf58      	it	pl
 8004226:	4253      	negpl	r3, r2
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <TIM5_IRQHandler+0x70>)
 800422c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40000c00 	.word	0x40000c00
 8004238:	20000211 	.word	0x20000211

0800423c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM6)==1){
 8004240:	4807      	ldr	r0, [pc, #28]	; (8004260 <TIM6_DAC_IRQHandler+0x24>)
 8004242:	f7ff fed3 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <TIM6_DAC_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <TIM6_DAC_IRQHandler+0x24>)
 800424e:	f7ff febf 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
	BAT_Pol();
 8004252:	f008 fd95 	bl	800cd80 <BAT_Pol>
	log_interrupt ();
 8004256:	f004 fcbb 	bl	8008bd0 <log_interrupt>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40001000 	.word	0x40001000

08004264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
	return 1;
 8004268:	2301      	movs	r3, #1
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_kill>:

int _kill(int pid, int sig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800427e:	f011 fb9f 	bl	80159c0 <__errno>
 8004282:	4603      	mov	r3, r0
 8004284:	2216      	movs	r2, #22
 8004286:	601a      	str	r2, [r3, #0]
	return -1;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_exit>:

void _exit (int status)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800429c:	f04f 31ff 	mov.w	r1, #4294967295
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffe7 	bl	8004274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042a6:	e7fe      	b.n	80042a6 <_exit+0x12>

080042a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e00a      	b.n	80042d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042ba:	f3af 8000 	nop.w
 80042be:	4601      	mov	r1, r0
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	60ba      	str	r2, [r7, #8]
 80042c6:	b2ca      	uxtb	r2, r1
 80042c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3301      	adds	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dbf0      	blt.n	80042ba <_read+0x12>
	}

return len;
 80042d8:	687b      	ldr	r3, [r7, #4]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e009      	b.n	8004308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	60ba      	str	r2, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f943 	bl	8002588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	dbf1      	blt.n	80042f4 <_write+0x12>
	}
	return len;
 8004310:	687b      	ldr	r3, [r7, #4]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_close>:

int _close(int file)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
	return -1;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004342:	605a      	str	r2, [r3, #4]
	return 0;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_isatty>:

int _isatty(int file)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
	return 1;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
	return 0;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <_sbrk+0x5c>)
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <_sbrk+0x60>)
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <_sbrk+0x64>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <_sbrk+0x68>)
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_sbrk+0x64>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b4:	f011 fb04 	bl	80159c0 <__errno>
 80043b8:	4603      	mov	r3, r0
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e009      	b.n	80043d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_sbrk+0x64>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <_sbrk+0x64>)
 80043d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20020000 	.word	0x20020000
 80043e4:	00000400 	.word	0x00000400
 80043e8:	20000214 	.word	0x20000214
 80043ec:	2000e608 	.word	0x2000e608

080043f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <SystemInit+0x28>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <SystemInit+0x28>)
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <SystemInit+0x28>)
 8004406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800440a:	609a      	str	r2, [r3, #8]
#endif
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_GetPriorityGrouping>:
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4907      	ldr	r1, [pc, #28]	; (8004470 <__NVIC_EnableIRQ+0x38>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e100 	.word	0xe000e100

08004474 <__NVIC_SetPriority>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	; (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <NVIC_EncodePriority>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0307 	rsb	r3, r3, #7
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf28      	it	cs
 80044e6:	2304      	movcs	r3, #4
 80044e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d902      	bls.n	80044f8 <NVIC_EncodePriority+0x30>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3b03      	subs	r3, #3
 80044f6:	e000      	b.n	80044fa <NVIC_EncodePriority+0x32>
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	401a      	ands	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004510:	f04f 31ff 	mov.w	r1, #4294967295
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43d9      	mvns	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	4313      	orrs	r3, r2
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <LL_AHB2_GRP1_EnableClock>:
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800453a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800453c:	4907      	ldr	r1, [pc, #28]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40021000 	.word	0x40021000

08004560 <LL_APB1_GRP1_EnableClock>:
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 800456a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004576:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40021000 	.word	0x40021000

08004590 <LL_APB2_GRP1_EnableClock>:
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800459a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800459c:	4907      	ldr	r1, [pc, #28]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80045a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4013      	ands	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40021000 	.word	0x40021000

080045c0 <LL_TIM_EnableCounter>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_TIM_EnableARRPreload>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_TIM_DisableARRPreload>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_TIM_CC_EnableChannel>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1a      	ldr	r2, [r3, #32]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <LL_TIM_OC_DisableFast>:
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d02e      	beq.n	80046b2 <LL_TIM_OC_DisableFast+0x6e>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d029      	beq.n	80046ae <LL_TIM_OC_DisableFast+0x6a>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d024      	beq.n	80046aa <LL_TIM_OC_DisableFast+0x66>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d01f      	beq.n	80046a6 <LL_TIM_OC_DisableFast+0x62>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466c:	d019      	beq.n	80046a2 <LL_TIM_OC_DisableFast+0x5e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d013      	beq.n	800469e <LL_TIM_OC_DisableFast+0x5a>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d00d      	beq.n	800469a <LL_TIM_OC_DisableFast+0x56>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004684:	d007      	beq.n	8004696 <LL_TIM_OC_DisableFast+0x52>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d101      	bne.n	8004692 <LL_TIM_OC_DisableFast+0x4e>
 800468e:	2308      	movs	r3, #8
 8004690:	e010      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 8004692:	2309      	movs	r3, #9
 8004694:	e00e      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 8004696:	2307      	movs	r3, #7
 8004698:	e00c      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 800469a:	2306      	movs	r3, #6
 800469c:	e00a      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 800469e:	2305      	movs	r3, #5
 80046a0:	e008      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <LL_TIM_OC_DisableFast+0xa8>)
 80046c0:	5cd3      	ldrb	r3, [r2, r3]
 80046c2:	440b      	add	r3, r1
 80046c4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	4908      	ldr	r1, [pc, #32]	; (80046f0 <LL_TIM_OC_DisableFast+0xac>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	4619      	mov	r1, r3
 80046d2:	2304      	movs	r3, #4
 80046d4:	408b      	lsls	r3, r1
 80046d6:	43db      	mvns	r3, r3
 80046d8:	401a      	ands	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	0801bed4 	.word	0x0801bed4
 80046f0:	0801bee0 	.word	0x0801bee0

080046f4 <LL_TIM_OC_EnablePreload>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d02e      	beq.n	8004762 <LL_TIM_OC_EnablePreload+0x6e>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d029      	beq.n	800475e <LL_TIM_OC_EnablePreload+0x6a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b10      	cmp	r3, #16
 800470e:	d024      	beq.n	800475a <LL_TIM_OC_EnablePreload+0x66>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d01f      	beq.n	8004756 <LL_TIM_OC_EnablePreload+0x62>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471c:	d019      	beq.n	8004752 <LL_TIM_OC_EnablePreload+0x5e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d013      	beq.n	800474e <LL_TIM_OC_EnablePreload+0x5a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d00d      	beq.n	800474a <LL_TIM_OC_EnablePreload+0x56>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d007      	beq.n	8004746 <LL_TIM_OC_EnablePreload+0x52>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473c:	d101      	bne.n	8004742 <LL_TIM_OC_EnablePreload+0x4e>
 800473e:	2308      	movs	r3, #8
 8004740:	e010      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004742:	2309      	movs	r3, #9
 8004744:	e00e      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004746:	2307      	movs	r3, #7
 8004748:	e00c      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800474a:	2306      	movs	r3, #6
 800474c:	e00a      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3318      	adds	r3, #24
 800476a:	4619      	mov	r1, r3
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <LL_TIM_OC_EnablePreload+0xa4>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	440b      	add	r3, r1
 8004774:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <LL_TIM_OC_EnablePreload+0xa8>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	4619      	mov	r1, r3
 8004782:	2308      	movs	r3, #8
 8004784:	408b      	lsls	r3, r1
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	0801bed4 	.word	0x0801bed4
 800479c:	0801bee0 	.word	0x0801bee0

080047a0 <LL_TIM_OC_SetCompareCH2>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_TIM_OC_SetCompareCH3>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_TIM_SetClockSource>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_TIM_SetTriggerOutput>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_TIM_SetTriggerOutput2>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_TIM_DisableMasterSlaveMode>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_TIM_EnableAllOutputs>:
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60da      	str	r2, [r3, #12]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b092      	sub	sp, #72	; 0x48
 80048b8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80048ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	611a      	str	r2, [r3, #16]
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f011 f8ad 	bl	8015a30 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80048d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048da:	f7ff fe59 	bl	8004590 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80048de:	f7ff fd9d 	bl	800441c <__NVIC_GetPriorityGrouping>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fded 	bl	80044c8 <NVIC_EncodePriority>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4619      	mov	r1, r3
 80048f2:	2019      	movs	r0, #25
 80048f4:	f7ff fdbe 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80048f8:	2019      	movs	r0, #25
 80048fa:	f7ff fd9d 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 80048fe:	23a9      	movs	r3, #169	; 0xa9
 8004900:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004902:	2300      	movs	r3, #0
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 999;
 8004906:	f240 33e7 	movw	r3, #999	; 0x3e7
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800490c:	2300      	movs	r3, #0
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.RepetitionCounter = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004918:	4619      	mov	r1, r3
 800491a:	4811      	ldr	r0, [pc, #68]	; (8004960 <MX_TIM1_Init+0xac>)
 800491c:	f010 fa40 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004920:	480f      	ldr	r0, [pc, #60]	; (8004960 <MX_TIM1_Init+0xac>)
 8004922:	f7ff fe6d 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004926:	2100      	movs	r1, #0
 8004928:	480d      	ldr	r0, [pc, #52]	; (8004960 <MX_TIM1_Init+0xac>)
 800492a:	f7ff ff55 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800492e:	2100      	movs	r1, #0
 8004930:	480b      	ldr	r0, [pc, #44]	; (8004960 <MX_TIM1_Init+0xac>)
 8004932:	f7ff ff66 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8004936:	2100      	movs	r1, #0
 8004938:	4809      	ldr	r0, [pc, #36]	; (8004960 <MX_TIM1_Init+0xac>)
 800493a:	f7ff ff77 	bl	800482c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800493e:	4808      	ldr	r0, [pc, #32]	; (8004960 <MX_TIM1_Init+0xac>)
 8004940:	f7ff ff87 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4803      	ldr	r0, [pc, #12]	; (8004960 <MX_TIM1_Init+0xac>)
 8004952:	f010 fb27 	bl	8014fa4 <LL_TIM_BDTR_Init>

}
 8004956:	bf00      	nop
 8004958:	3748      	adds	r7, #72	; 0x48
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00

08004964 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b094      	sub	sp, #80	; 0x50
 8004968:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800496a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	60da      	str	r2, [r3, #12]
 8004978:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	2220      	movs	r2, #32
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f011 f854 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff fde1 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80049a2:	2300      	movs	r3, #0
 80049a4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 80049a6:	f240 3351 	movw	r3, #849	; 0x351
 80049aa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80049ac:	2300      	movs	r3, #0
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80049b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049b4:	4619      	mov	r1, r3
 80049b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ba:	f010 f9f1 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80049be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049c2:	f7ff fe0d 	bl	80045e0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80049c6:	2110      	movs	r1, #16
 80049c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049cc:	f7ff fe92 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80049d0:	2360      	movs	r3, #96	; 0x60
 80049d2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	461a      	mov	r2, r3
 80049ea:	2110      	movs	r1, #16
 80049ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049f0:	f010 fa78 	bl	8014ee4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80049f4:	2110      	movs	r1, #16
 80049f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049fa:	f7ff fe23 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80049fe:	2100      	movs	r1, #0
 8004a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a04:	f7ff fefd 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004a08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a0c:	f7ff ff21 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004a10:	2002      	movs	r0, #2
 8004a12:	f7ff fd8d 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004a16:	2308      	movs	r3, #8
 8004a18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <MX_TIM2_Init+0xdc>)
 8004a34:	f00f fd8f 	bl	8014556 <LL_GPIO_Init>

}
 8004a38:	bf00      	nop
 8004a3a:	3750      	adds	r7, #80	; 0x50
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	48000400 	.word	0x48000400

08004a44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b094      	sub	sp, #80	; 0x50
 8004a48:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004a5a:	f107 031c 	add.w	r3, r7, #28
 8004a5e:	2220      	movs	r2, #32
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f010 ffe4 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	60da      	str	r2, [r3, #12]
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f7ff fd71 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a82:	2300      	movs	r3, #0
 8004a84:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 8004a86:	f240 3351 	movw	r3, #849	; 0x351
 8004a8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004a90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a94:	4619      	mov	r1, r3
 8004a96:	481f      	ldr	r0, [pc, #124]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004a98:	f010 f982 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004a9c:	481d      	ldr	r0, [pc, #116]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004a9e:	f7ff fd9f 	bl	80045e0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	481b      	ldr	r0, [pc, #108]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004aa6:	f7ff fe25 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004aaa:	2360      	movs	r3, #96	; 0x60
 8004aac:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2110      	movs	r1, #16
 8004ac6:	4813      	ldr	r0, [pc, #76]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ac8:	f010 fa0c 	bl	8014ee4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8004acc:	2110      	movs	r1, #16
 8004ace:	4811      	ldr	r0, [pc, #68]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ad0:	f7ff fdb8 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	480f      	ldr	r0, [pc, #60]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ad8:	f7ff fe93 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004adc:	480d      	ldr	r0, [pc, #52]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ade:	f7ff feb8 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f7ff fd24 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004aec:	2302      	movs	r3, #2
 8004aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004afc:	2302      	movs	r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4804      	ldr	r0, [pc, #16]	; (8004b18 <MX_TIM3_Init+0xd4>)
 8004b06:	f00f fd26 	bl	8014556 <LL_GPIO_Init>

}
 8004b0a:	bf00      	nop
 8004b0c:	3750      	adds	r7, #80	; 0x50
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40000400 	.word	0x40000400
 8004b18:	48000400 	.word	0x48000400

08004b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8004b30:	2004      	movs	r0, #4
 8004b32:	f7ff fd15 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b36:	f7ff fc71 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fcc1 	bl	80044c8 <NVIC_EncodePriority>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4619      	mov	r1, r3
 8004b4a:	201e      	movs	r0, #30
 8004b4c:	f7ff fc92 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8004b50:	201e      	movs	r0, #30
 8004b52:	f7ff fc71 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004b56:	23a9      	movs	r3, #169	; 0xa9
 8004b58:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004b5e:	23f9      	movs	r3, #249	; 0xf9
 8004b60:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	480a      	ldr	r0, [pc, #40]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b6c:	f010 f918 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8004b70:	4808      	ldr	r0, [pc, #32]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b72:	f7ff fd45 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004b76:	2100      	movs	r1, #0
 8004b78:	4806      	ldr	r0, [pc, #24]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b7a:	f7ff fe2d 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4804      	ldr	r0, [pc, #16]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b82:	f7ff fe3e 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8004b86:	4803      	ldr	r0, [pc, #12]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b88:	f7ff fe63 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40000800 	.word	0x40000800

08004b98 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004bac:	2008      	movs	r0, #8
 8004bae:	f7ff fcd7 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bb2:	f7ff fc33 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fc83 	bl	80044c8 <NVIC_EncodePriority>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	2032      	movs	r0, #50	; 0x32
 8004bc8:	f7ff fc54 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8004bcc:	2032      	movs	r0, #50	; 0x32
 8004bce:	f7ff fc33 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004bd2:	23a9      	movs	r3, #169	; 0xa9
 8004bd4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004bda:	23f9      	movs	r3, #249	; 0xf9
 8004bdc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	480a      	ldr	r0, [pc, #40]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004be8:	f010 f8da 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004bec:	4808      	ldr	r0, [pc, #32]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bee:	f7ff fd07 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4806      	ldr	r0, [pc, #24]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bf6:	f7ff fdef 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4804      	ldr	r0, [pc, #16]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bfe:	f7ff fe00 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004c02:	4803      	ldr	r0, [pc, #12]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004c04:	f7ff fe25 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40000c00 	.word	0x40000c00

08004c14 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8004c28:	2010      	movs	r0, #16
 8004c2a:	f7ff fc99 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c2e:	f7ff fbf5 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fc45 	bl	80044c8 <NVIC_EncodePriority>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	2036      	movs	r0, #54	; 0x36
 8004c44:	f7ff fc16 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c48:	2036      	movs	r0, #54	; 0x36
 8004c4a:	f7ff fbf5 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004c4e:	23a9      	movs	r3, #169	; 0xa9
 8004c50:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8004c56:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c5a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4808      	ldr	r0, [pc, #32]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c62:	f010 f89d 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8004c66:	4807      	ldr	r0, [pc, #28]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c68:	f7ff fcca 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c70:	f7ff fdc7 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8004c74:	4803      	ldr	r0, [pc, #12]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c76:	f7ff fdec 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40001000 	.word	0x40001000

08004c88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b0a0      	sub	sp, #128	; 0x80
 8004c8c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	609a      	str	r2, [r3, #8]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004c9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f010 fec2 	bl	8015a30 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004cac:	f107 031c 	add.w	r3, r7, #28
 8004cb0:	2230      	movs	r2, #48	; 0x30
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f010 febb 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8004cca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cce:	f7ff fc5f 	bl	8004590 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 849;
 8004cdc:	f240 3351 	movw	r3, #849	; 0x351
 8004ce0:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004cea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4837      	ldr	r0, [pc, #220]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004cf2:	f010 f855 	bl	8014da0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8004cf6:	4836      	ldr	r0, [pc, #216]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004cf8:	f7ff fc82 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
 8004cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d00:	4833      	ldr	r0, [pc, #204]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d02:	f7ff fcf7 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d16:	2300      	movs	r3, #0
 8004d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d22:	2300      	movs	r3, #0
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d30:	4827      	ldr	r0, [pc, #156]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d32:	f010 f8d7 	bl	8014ee4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH3);
 8004d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d3a:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d3c:	f7ff fc82 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8004d40:	2100      	movs	r1, #0
 8004d42:	4823      	ldr	r0, [pc, #140]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d44:	f7ff fd5d 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4821      	ldr	r0, [pc, #132]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d4c:	f7ff fd6e 	bl	800482c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8004d50:	481f      	ldr	r0, [pc, #124]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d52:	f7ff fd7e 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004d72:	2300      	movs	r3, #0
 8004d74:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004d84:	2300      	movs	r3, #0
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d98:	f010 f904 	bl	8014fa4 <LL_TIM_BDTR_Init>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	f7ff fbc7 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PB9     ------> TIM8_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004da8:	2302      	movs	r3, #2
 8004daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004db8:	230a      	movs	r3, #10
 8004dba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4804      	ldr	r0, [pc, #16]	; (8004dd4 <MX_TIM8_Init+0x14c>)
 8004dc2:	f00f fbc8 	bl	8014556 <LL_GPIO_Init>

}
 8004dc6:	bf00      	nop
 8004dc8:	3780      	adds	r7, #128	; 0x80
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	48000400 	.word	0x48000400

08004dd8 <TIMER_init>:

/* USER CODE BEGIN 1 */
void TIMER_init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  //sensor encode gyro
  LL_TIM_EnableIT_UPDATE(TIM4);
 8004ddc:	481a      	ldr	r0, [pc, #104]	; (8004e48 <TIMER_init+0x70>)
 8004dde:	f7ff fd58 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM4);
 8004de2:	4819      	ldr	r0, [pc, #100]	; (8004e48 <TIMER_init+0x70>)
 8004de4:	f7ff fbec 	bl	80045c0 <LL_TIM_EnableCounter>
  //wall sensor
  LL_TIM_EnableIT_UPDATE(TIM5);
 8004de8:	4818      	ldr	r0, [pc, #96]	; (8004e4c <TIMER_init+0x74>)
 8004dea:	f7ff fd52 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8004dee:	4817      	ldr	r0, [pc, #92]	; (8004e4c <TIMER_init+0x74>)
 8004df0:	f7ff fbe6 	bl	80045c0 <LL_TIM_EnableCounter>
  //batt_LV
  LL_TIM_EnableIT_UPDATE(TIM6);
 8004df4:	4816      	ldr	r0, [pc, #88]	; (8004e50 <TIMER_init+0x78>)
 8004df6:	f7ff fd4c 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8004dfa:	4815      	ldr	r0, [pc, #84]	; (8004e50 <TIMER_init+0x78>)
 8004dfc:	f7ff fbe0 	bl	80045c0 <LL_TIM_EnableCounter>
  //motor
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8004e00:	2110      	movs	r1, #16
 8004e02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e06:	f7ff fc0b 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8004e0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e0e:	f7ff fbd7 	bl	80045c0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8004e12:	2110      	movs	r1, #16
 8004e14:	480f      	ldr	r0, [pc, #60]	; (8004e54 <TIMER_init+0x7c>)
 8004e16:	f7ff fc03 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8004e1a:	480e      	ldr	r0, [pc, #56]	; (8004e54 <TIMER_init+0x7c>)
 8004e1c:	f7ff fbd0 	bl	80045c0 <LL_TIM_EnableCounter>
  //fan
  LL_TIM_EnableAllOutputs(TIM8);
 8004e20:	480d      	ldr	r0, [pc, #52]	; (8004e58 <TIMER_init+0x80>)
 8004e22:	f7ff fd26 	bl	8004872 <LL_TIM_EnableAllOutputs>
  LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH3);
 8004e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e2a:	480b      	ldr	r0, [pc, #44]	; (8004e58 <TIMER_init+0x80>)
 8004e2c:	f7ff fbf8 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM8);
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <TIMER_init+0x80>)
 8004e32:	f7ff fbc5 	bl	80045c0 <LL_TIM_EnableCounter>
  //ctrl
  LL_TIM_EnableIT_UPDATE(TIM1);
 8004e36:	4809      	ldr	r0, [pc, #36]	; (8004e5c <TIMER_init+0x84>)
 8004e38:	f7ff fd2b 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8004e3c:	4807      	ldr	r0, [pc, #28]	; (8004e5c <TIMER_init+0x84>)
 8004e3e:	f7ff fbbf 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40001000 	.word	0x40001000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40013400 	.word	0x40013400
 8004e5c:	40012c00 	.word	0x40012c00

08004e60 <Enable_TIM2>:

void Enable_TIM2(void){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM2);
 8004e64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e68:	f7ff fbaa 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <Enable_TIM3>:

void Disable_TIM2(void){
  LL_TIM_DisableCounter(TIM2);
}

void Enable_TIM3(void){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM3);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <Enable_TIM3+0x10>)
 8004e76:	f7ff fba3 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40000400 	.word	0x40000400
 8004e84:	00000000 	.word	0x00000000

08004e88 <Set_DutyTIM2>:

void Disable_TIM3(void){
  LL_TIM_DisableCounter(TIM3);
}

void Set_DutyTIM2(uint16_t duty){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9c:	ee17 0a90 	vmov	r0, s15
 8004ea0:	f7fb fb7a 	bl	8000598 <__aeabi_f2d>
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <Set_DutyTIM2+0x78>)
 8004eaa:	f7fb fcf7 	bl	800089c <__aeabi_ddiv>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	a310      	add	r3, pc, #64	; (adr r3, 8004ef8 <Set_DutyTIM2+0x70>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb fbc4 	bl	8000648 <__aeabi_dmul>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f7fb fe96 	bl	8000bf8 <__aeabi_d2uiz>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f240 3251 	movw	r2, #849	; 0x351
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d902      	bls.n	8004ee0 <Set_DutyTIM2+0x58>
    compare = 849;
 8004eda:	f240 3351 	movw	r3, #849	; 0x351
 8004ede:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM2,compare);
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004ee8:	f7ff fc5a 	bl	80047a0 <LL_TIM_OC_SetCompareCH2>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	408a8800 	.word	0x408a8800
 8004f00:	408f4000 	.word	0x408f4000
 8004f04:	00000000 	.word	0x00000000

08004f08 <Set_DutyTIM3>:

void Set_DutyTIM3(uint16_t duty){
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	ee17 0a90 	vmov	r0, s15
 8004f20:	f7fb fb3a 	bl	8000598 <__aeabi_f2d>
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <Set_DutyTIM3+0x78>)
 8004f2a:	f7fb fcb7 	bl	800089c <__aeabi_ddiv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	a310      	add	r3, pc, #64	; (adr r3, 8004f78 <Set_DutyTIM3+0x70>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fb84 	bl	8000648 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fb fe56 	bl	8000bf8 <__aeabi_d2uiz>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	f240 3251 	movw	r2, #849	; 0x351
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d902      	bls.n	8004f60 <Set_DutyTIM3+0x58>
    compare = 849;
 8004f5a:	f240 3351 	movw	r3, #849	; 0x351
 8004f5e:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM3,compare);
 8004f60:	89fb      	ldrh	r3, [r7, #14]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <Set_DutyTIM3+0x7c>)
 8004f66:	f7ff fc1b 	bl	80047a0 <LL_TIM_OC_SetCompareCH2>
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	408a8800 	.word	0x408a8800
 8004f80:	408f4000 	.word	0x408f4000
 8004f84:	40000400 	.word	0x40000400

08004f88 <Set_DutyTIM8>:

void Disable_TIM8(void){
  LL_TIM_DisableCounter(TIM8);
}

void Set_DutyTIM8(uint16_t duty){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	ee17 0a90 	vmov	r0, s15
 8004fa0:	f7fb fafa 	bl	8000598 <__aeabi_f2d>
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <Set_DutyTIM8+0x78>)
 8004faa:	f7fb fc77 	bl	800089c <__aeabi_ddiv>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	a310      	add	r3, pc, #64	; (adr r3, 8004ff8 <Set_DutyTIM8+0x70>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fb44 	bl	8000648 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f7fb fe16 	bl	8000bf8 <__aeabi_d2uiz>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	f240 3251 	movw	r2, #849	; 0x351
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d902      	bls.n	8004fe0 <Set_DutyTIM8+0x58>
    compare = 849;
 8004fda:	f240 3351 	movw	r3, #849	; 0x351
 8004fde:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH3(TIM8,compare);
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <Set_DutyTIM8+0x7c>)
 8004fe6:	f7ff fbe9 	bl	80047bc <LL_TIM_OC_SetCompareCH3>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	408a8800 	.word	0x408a8800
 8005000:	408f4000 	.word	0x408f4000
 8005004:	40013400 	.word	0x40013400

08005008 <LL_DMA_SetDataTransferDirection>:
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <LL_DMA_SetDataTransferDirection+0x4c>)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	4908      	ldr	r1, [pc, #32]	; (8005054 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	440a      	add	r2, r1
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	4611      	mov	r1, r2
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	4611      	mov	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	0801beec 	.word	0x0801beec

08005058 <LL_DMA_SetMode>:
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005068:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <LL_DMA_SetMode+0x48>)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 0220 	bic.w	r2, r3, #32
 800507c:	4908      	ldr	r1, [pc, #32]	; (80050a0 <LL_DMA_SetMode+0x48>)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	440b      	add	r3, r1
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	440b      	add	r3, r1
 800508a:	4619      	mov	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	0801beec 	.word	0x0801beec

080050a4 <LL_DMA_SetPeriphIncMode>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <LL_DMA_SetPeriphIncMode+0x48>)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4413      	add	r3, r2
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050c8:	4908      	ldr	r1, [pc, #32]	; (80050ec <LL_DMA_SetPeriphIncMode+0x48>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	440b      	add	r3, r1
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	440b      	add	r3, r1
 80050d6:	4619      	mov	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	0801beec 	.word	0x0801beec

080050f0 <LL_DMA_SetMemoryIncMode>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <LL_DMA_SetMemoryIncMode+0x48>)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005114:	4908      	ldr	r1, [pc, #32]	; (8005138 <LL_DMA_SetMemoryIncMode+0x48>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	440b      	add	r3, r1
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	440b      	add	r3, r1
 8005122:	4619      	mov	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	0801beec 	.word	0x0801beec

0800513c <LL_DMA_SetPeriphSize>:
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <LL_DMA_SetPeriphSize+0x48>)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	4908      	ldr	r1, [pc, #32]	; (8005184 <LL_DMA_SetPeriphSize+0x48>)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	440b      	add	r3, r1
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	4619      	mov	r1, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	440b      	add	r3, r1
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	0801beec 	.word	0x0801beec

08005188 <LL_DMA_SetMemorySize>:
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <LL_DMA_SetMemorySize+0x48>)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ac:	4908      	ldr	r1, [pc, #32]	; (80051d0 <LL_DMA_SetMemorySize+0x48>)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	440b      	add	r3, r1
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	440b      	add	r3, r1
 80051ba:	4619      	mov	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	0801beec 	.word	0x0801beec

080051d4 <LL_DMA_SetChannelPriorityLevel>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f8:	4908      	ldr	r1, [pc, #32]	; (800521c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	440b      	add	r3, r1
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	4619      	mov	r1, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	440b      	add	r3, r1
 8005206:	4619      	mov	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	0801beec 	.word	0x0801beec

08005220 <LL_DMA_SetPeriphRequest>:
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	0a9b      	lsrs	r3, r3, #10
 8005230:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005234:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005248:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800525e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_AHB2_GRP1_EnableClock>:
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800527e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4313      	orrs	r3, r2
 8005286:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800528a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40021000 	.word	0x40021000

080052a4 <LL_APB2_GRP1_EnableClock>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052b0:	4907      	ldr	r1, [pc, #28]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4013      	ands	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40021000 	.word	0x40021000

080052d4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	075b      	lsls	r3, r3, #29
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	065b      	lsls	r3, r3, #25
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d101      	bne.n	80053a8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ca:	d101      	bne.n	80053d0 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d101      	bne.n	80053f8 <LL_USART_IsActiveFlag_REACK+0x1a>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <LL_USART_IsActiveFlag_REACK+0x1c>
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	; 0x38
 8005428:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800542a:	f107 0318 	add.w	r3, r7, #24
 800542e:	2220      	movs	r2, #32
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f010 fafc 	bl	8015a30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	463b      	mov	r3, r7
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	609a      	str	r2, [r3, #8]
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	611a      	str	r2, [r3, #16]
 8005446:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8005448:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800544c:	f7ff ff2a 	bl	80052a4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005450:	2001      	movs	r0, #1
 8005452:	f7ff ff0f 	bl	8005274 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800545c:	2302      	movs	r3, #2
 800545e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005460:	2300      	movs	r3, #0
 8005462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800546c:	2307      	movs	r3, #7
 800546e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005470:	463b      	mov	r3, r7
 8005472:	4619      	mov	r1, r3
 8005474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005478:	f00f f86d 	bl	8014556 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800547c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005480:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005482:	2302      	movs	r3, #2
 8005484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005492:	2307      	movs	r3, #7
 8005494:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005496:	463b      	mov	r3, r7
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800549e:	f00f f85a 	bl	8014556 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMAMUX_REQ_USART1_RX);
 80054a2:	2218      	movs	r2, #24
 80054a4:	2104      	movs	r1, #4
 80054a6:	4844      	ldr	r0, [pc, #272]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054a8:	f7ff feba 	bl	8005220 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80054ac:	2200      	movs	r2, #0
 80054ae:	2104      	movs	r1, #4
 80054b0:	4841      	ldr	r0, [pc, #260]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054b2:	f7ff fda9 	bl	8005008 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2104      	movs	r1, #4
 80054ba:	483f      	ldr	r0, [pc, #252]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054bc:	f7ff fe8a 	bl	80051d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2104      	movs	r1, #4
 80054c4:	483c      	ldr	r0, [pc, #240]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054c6:	f7ff fdc7 	bl	8005058 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2104      	movs	r1, #4
 80054ce:	483a      	ldr	r0, [pc, #232]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054d0:	f7ff fde8 	bl	80050a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	2104      	movs	r1, #4
 80054d8:	4837      	ldr	r0, [pc, #220]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054da:	f7ff fe09 	bl	80050f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 80054de:	2200      	movs	r2, #0
 80054e0:	2104      	movs	r1, #4
 80054e2:	4835      	ldr	r0, [pc, #212]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054e4:	f7ff fe2a 	bl	800513c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2104      	movs	r1, #4
 80054ec:	4832      	ldr	r0, [pc, #200]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054ee:	f7ff fe4b 	bl	8005188 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMAMUX_REQ_USART1_TX);
 80054f2:	2219      	movs	r2, #25
 80054f4:	2105      	movs	r1, #5
 80054f6:	4830      	ldr	r0, [pc, #192]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054f8:	f7ff fe92 	bl	8005220 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80054fc:	2210      	movs	r2, #16
 80054fe:	2105      	movs	r1, #5
 8005500:	482d      	ldr	r0, [pc, #180]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005502:	f7ff fd81 	bl	8005008 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8005506:	2200      	movs	r2, #0
 8005508:	2105      	movs	r1, #5
 800550a:	482b      	ldr	r0, [pc, #172]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800550c:	f7ff fe62 	bl	80051d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8005510:	2200      	movs	r2, #0
 8005512:	2105      	movs	r1, #5
 8005514:	4828      	ldr	r0, [pc, #160]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005516:	f7ff fd9f 	bl	8005058 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800551a:	2200      	movs	r2, #0
 800551c:	2105      	movs	r1, #5
 800551e:	4826      	ldr	r0, [pc, #152]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005520:	f7ff fdc0 	bl	80050a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	2105      	movs	r1, #5
 8005528:	4823      	ldr	r0, [pc, #140]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800552a:	f7ff fde1 	bl	80050f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800552e:	2200      	movs	r2, #0
 8005530:	2105      	movs	r1, #5
 8005532:	4821      	ldr	r0, [pc, #132]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005534:	f7ff fe02 	bl	800513c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8005538:	2200      	movs	r2, #0
 800553a:	2105      	movs	r1, #5
 800553c:	481e      	ldr	r0, [pc, #120]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800553e:	f7ff fe23 	bl	8005188 <LL_DMA_SetMemorySize>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8005546:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800554a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005554:	2300      	movs	r3, #0
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005558:	230c      	movs	r3, #12
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800555c:	2300      	movs	r3, #0
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005560:	2300      	movs	r3, #0
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8005564:	f107 0318 	add.w	r3, r7, #24
 8005568:	4619      	mov	r1, r3
 800556a:	4814      	ldr	r0, [pc, #80]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800556c:	f010 f942 	bl	80157f4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005570:	2100      	movs	r1, #0
 8005572:	4812      	ldr	r0, [pc, #72]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005574:	f7ff fece 	bl	8005314 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005578:	2100      	movs	r1, #0
 800557a:	4810      	ldr	r0, [pc, #64]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800557c:	f7ff fede 	bl	800533c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8005580:	480e      	ldr	r0, [pc, #56]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005582:	f7ff feb7 	bl	80052f4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8005586:	480d      	ldr	r0, [pc, #52]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005588:	f7ff feec 	bl	8005364 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 800558c:	480b      	ldr	r0, [pc, #44]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800558e:	f7ff fea1 	bl	80052d4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8005592:	bf00      	nop
 8005594:	4809      	ldr	r0, [pc, #36]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005596:	f7ff ff0e 	bl	80053b6 <LL_USART_IsActiveFlag_TEACK>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f9      	beq.n	8005594 <MX_USART1_UART_Init+0x170>
 80055a0:	4806      	ldr	r0, [pc, #24]	; (80055bc <MX_USART1_UART_Init+0x198>)
 80055a2:	f7ff ff1c 	bl	80053de <LL_USART_IsActiveFlag_REACK>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f3      	beq.n	8005594 <MX_USART1_UART_Init+0x170>
  {
  }

}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	3738      	adds	r7, #56	; 0x38
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40013800 	.word	0x40013800

080055c0 <Communication_Initialize>:

/* USER CODE BEGIN 1 */
void Communication_Initialize(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
    setbuf(stdout,NULL);
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <Communication_Initialize+0x18>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f011 f955 	bl	801687c <setbuf>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000020 	.word	0x20000020

080055dc <USART_TransmitByte>:

void USART_TransmitByte(uint8_t ch){
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1,ch);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4807      	ldr	r0, [pc, #28]	; (8005608 <USART_TransmitByte+0x2c>)
 80055ec:	f7ff ff0b 	bl	8005406 <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1)==0);
 80055f0:	bf00      	nop
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <USART_TransmitByte+0x2c>)
 80055f4:	f7ff fecc 	bl	8005390 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f9      	beq.n	80055f2 <USART_TransmitByte+0x16>
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40013800 	.word	0x40013800

0800560c <Get_NowSpeed>:
float  			f_ErrChkAngle; 			  // ジャイロセンサのエラー検出用の角度
bool   			bl_ErrChk; 				  // ジャイロセンサのエラー検出（FALSE：検知しない、TRUE：検知する）
bool			bl_failsafe		= FALSE;	// マウスがの制御不能（TRUE：制御不能、FALSE：制御可能）


float Get_NowSpeed(void){
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
	return f_NowSpeed;
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <Get_NowSpeed+0x18>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	ee07 3a90 	vmov	s15, r3
}
 8005618:	eeb0 0a67 	vmov.f32	s0, s15
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	2000022c 	.word	0x2000022c

08005628 <Get_NowDist>:

float Get_NowDist(void){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	return f_NowDist;
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <Get_NowDist+0x18>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	ee07 3a90 	vmov	s15, r3
}
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000250 	.word	0x20000250

08005644 <Get_TrgtDist>:

float Get_TrgtDist(void){
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	return f_TrgtDist;
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <Get_TrgtDist+0x18>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	ee07 3a90 	vmov	s15, r3
}
 8005650:	eeb0 0a67 	vmov.f32	s0, s15
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000024c 	.word	0x2000024c

08005660 <Get_TrgtSpeed>:

float Get_TrgtSpeed(void){
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
	return f_TrgtSpeed;
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <Get_TrgtSpeed+0x18>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	ee07 3a90 	vmov	s15, r3
}
 800566c:	eeb0 0a67 	vmov.f32	s0, s15
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000230 	.word	0x20000230

0800567c <Set_TrgtSpeed>:

void Set_TrgtSpeed(float speed){
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	ed87 0a01 	vstr	s0, [r7, #4]
	f_TrgtSpeed = speed;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <Set_TrgtSpeed+0x1c>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000230 	.word	0x20000230

0800569c <Get_NowAngle>:

float Get_NowAngle(void){
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
	return f_NowAngle;
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <Get_NowAngle+0x18>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	ee07 3a90 	vmov	s15, r3
}
 80056a8:	eeb0 0a67 	vmov.f32	s0, s15
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000280 	.word	0x20000280

080056b8 <Get_TrgtAngle>:

float Get_TrgtAngle(void){
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
	return f_TrgtAngle;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <Get_TrgtAngle+0x18>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	ee07 3a90 	vmov	s15, r3
}
 80056c4:	eeb0 0a67 	vmov.f32	s0, s15
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000284 	.word	0x20000284

080056d4 <Get_TrgtAngleS>:

float Get_TrgtAngleS(void){
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
	return f_TrgtAngleS;
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <Get_TrgtAngleS+0x18>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	ee07 3a90 	vmov	s15, r3
}
 80056e0:	eeb0 0a67 	vmov.f32	s0, s15
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	2000026c 	.word	0x2000026c

080056f0 <INTC_sys>:

void INTC_sys(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	Msec_in++;					// msec
 80056f4:	4b14      	ldr	r3, [pc, #80]	; (8005748 <INTC_sys+0x58>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <INTC_sys+0x58>)
 8005700:	801a      	strh	r2, [r3, #0]
	if( Msec_in > 999 ){		// msec → sec
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <INTC_sys+0x58>)
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570c:	d309      	bcc.n	8005722 <INTC_sys+0x32>
		Msec_in  = 0;
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <INTC_sys+0x58>)
 8005710:	2200      	movs	r2, #0
 8005712:	801a      	strh	r2, [r3, #0]
		Sec_in++;
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <INTC_sys+0x5c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	3301      	adds	r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <INTC_sys+0x5c>)
 8005720:	701a      	strb	r2, [r3, #0]
	}
	if( Sec_in > 59 ){			// sec → min
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <INTC_sys+0x5c>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b3b      	cmp	r3, #59	; 0x3b
 800572a:	d909      	bls.n	8005740 <INTC_sys+0x50>
		Sec_in = 0;
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <INTC_sys+0x5c>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
		Min_in++;
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <INTC_sys+0x60>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3301      	adds	r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <INTC_sys+0x60>)
 800573e:	701a      	strb	r2, [r3, #0]
	}

	CTRL_pol();
 8005740:	f001 fdae 	bl	80072a0 <CTRL_pol>
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000b18 	.word	0x20000b18
 800574c:	200006ec 	.word	0x200006ec
 8005750:	200002e0 	.word	0x200002e0

08005754 <CTRL_sta>:

void CTRL_sta( void )
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
	uc_CtrlFlag = TRUE;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <CTRL_sta+0x14>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	20000218 	.word	0x20000218

0800576c <CTRL_stop>:

void CTRL_stop( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	uc_CtrlFlag = FALSE;
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <CTRL_stop+0x1c>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	DCM_brakeMot( DCM_R );		// ブレーキ
 8005776:	2000      	movs	r0, #0
 8005778:	f002 fdf2 	bl	8008360 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800577c:	2001      	movs	r0, #1
 800577e:	f002 fdef 	bl	8008360 <DCM_brakeMot>
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000218 	.word	0x20000218

0800578c <CTRL_clrData>:

void CTRL_clrData( void )
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
	s_GyroVal		= 0;						// ジャイロ値クリア
	f_GyroNowAngle	= 0;							// ジャイロ値クリア

	/* 目標値 */
	f_TrgtSpeed		= 0;						// [速度制御]   目標移動速度 [mm/s]			（1[msec]毎に更新される）
 8005790:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <CTRL_clrData+0x74>)
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
	f_TrgtDist 		= 0;						// [距離制御]   目標移動距離				（1[msec]毎に更新される）
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <CTRL_clrData+0x78>)
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
	f_TrgtAngleS	= 0;							// [角速度制御] 目標角速度 [rad/s]			（1[msec]毎に更新される）
 80057a0:	4b19      	ldr	r3, [pc, #100]	; (8005808 <CTRL_clrData+0x7c>)
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
	f_TrgtAngle		= 0;						// [角度制御]   目標角度					（1[msec]毎に更新される）
 80057a8:	4b18      	ldr	r3, [pc, #96]	; (800580c <CTRL_clrData+0x80>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	/* 制御データ */
	f_SpeedErrSum	= 0;
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <CTRL_clrData+0x84>)
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
	f_DistErrSum 	= 0;						// [距離制御]   距離積分制御のサム値			（1[msec]毎に更新される）
 80057b8:	4b16      	ldr	r3, [pc, #88]	; (8005814 <CTRL_clrData+0x88>)
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
//	f_AngleSErrSum	= 0;
//	f_AngleErrSum 	= 0;						// [角度制御]   角度積分制御のサム値			（1[msec]毎に更新される）
	f_ErrSpeedBuf	= 0;
 80057c0:	4b15      	ldr	r3, [pc, #84]	; (8005818 <CTRL_clrData+0x8c>)
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
	f_ErrDistBuf	= 0;						// [壁制御]     距離センサーエラー値のバッファ		（1[msec]毎に更新される）
 80057c8:	4b14      	ldr	r3, [pc, #80]	; (800581c <CTRL_clrData+0x90>)
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
	f_ErrAngleSBuf  = 0;
 80057d0:	4b13      	ldr	r3, [pc, #76]	; (8005820 <CTRL_clrData+0x94>)
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
	l_frontSen_vErr		=0;
 80057d8:	4b12      	ldr	r3, [pc, #72]	; (8005824 <CTRL_clrData+0x98>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
	l_frontSen_omegaErr		=0;
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <CTRL_clrData+0x9c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_vBuf	= 0;
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <CTRL_clrData+0xa0>)
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
	f_ErrFrontSen_omegaBuf	= 0;
 80057ec:	4b10      	ldr	r3, [pc, #64]	; (8005830 <CTRL_clrData+0xa4>)
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000230 	.word	0x20000230
 8005804:	2000024c 	.word	0x2000024c
 8005808:	2000026c 	.word	0x2000026c
 800580c:	20000284 	.word	0x20000284
 8005810:	20000238 	.word	0x20000238
 8005814:	2000025c 	.word	0x2000025c
 8005818:	20000234 	.word	0x20000234
 800581c:	20000290 	.word	0x20000290
 8005820:	20000270 	.word	0x20000270
 8005824:	20000294 	.word	0x20000294
 8005828:	20000298 	.word	0x20000298
 800582c:	2000029c 	.word	0x2000029c
 8005830:	200002a0 	.word	0x200002a0

08005834 <CTRL_clrAngleErrSum>:

void CTRL_clrAngleErrSum(void){
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
	f_AngleErrSum = 0.0;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <CTRL_clrAngleErrSum+0x20>)
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
	f_AngleSErrSum = 0.0;
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <CTRL_clrAngleErrSum+0x24>)
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000288 	.word	0x20000288
 8005858:	20000274 	.word	0x20000274

0800585c <CTRL_clrNowData>:

void CTRL_clrNowData(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
	ENC_setref();
 8005860:	f002 ff2c 	bl	80086bc <ENC_setref>
	l_CntR			= 0;						// カウンタクリア
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <CTRL_clrNowData+0x50>)
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <CTRL_clrNowData+0x54>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;						// 移動距離リセット
 8005870:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <CTRL_clrNowData+0x58>)
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <CTRL_clrNowData+0x5c>)
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <CTRL_clrNowData+0x60>)
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <CTRL_clrNowData+0x64>)
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <CTRL_clrNowData+0x68>)
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
	s_GyroVal		= 0;						// ジャイロ値クリア
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <CTRL_clrNowData+0x6c>)
 800589a:	2200      	movs	r2, #0
 800589c:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <CTRL_clrNowData+0x70>)
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200013d4 	.word	0x200013d4
 80058b0:	200013d0 	.word	0x200013d0
 80058b4:	20000250 	.word	0x20000250
 80058b8:	20000254 	.word	0x20000254
 80058bc:	20000258 	.word	0x20000258
 80058c0:	2000022c 	.word	0x2000022c
 80058c4:	20000280 	.word	0x20000280
 80058c8:	20000702 	.word	0x20000702
 80058cc:	200002dc 	.word	0x200002dc

080058d0 <CTRL_setNowData_Err>:

void CTRL_setNowData_Err(/*float trgt_Dist, */float trgt_Angle){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	ed87 0a01 	vstr	s0, [r7, #4]
	ENC_setref();
 80058da:	f002 feef 	bl	80086bc <ENC_setref>
	l_CntR			= 0;						// カウンタクリア
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <CTRL_setNowData_Err+0x64>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <CTRL_setNowData_Err+0x68>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;//f_NowDist - trgt_Dist;//本来こっちにしたいが妥協						// 移動距離リセット
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <CTRL_setNowData_Err+0x6c>)
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <CTRL_setNowData_Err+0x70>)
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <CTRL_setNowData_Err+0x74>)
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <CTRL_setNowData_Err+0x78>)
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
	f_NowAngle		= f_NowAngle - trgt_Angle;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 800590a:	4b10      	ldr	r3, [pc, #64]	; (800594c <CTRL_setNowData_Err+0x7c>)
 800590c:	ed93 7a00 	vldr	s14, [r3]
 8005910:	edd7 7a01 	vldr	s15, [r7, #4]
 8005914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <CTRL_setNowData_Err+0x7c>)
 800591a:	edc3 7a00 	vstr	s15, [r3]
	s_GyroVal		= 0;						// ジャイロ値クリア
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <CTRL_setNowData_Err+0x80>)
 8005920:	2200      	movs	r2, #0
 8005922:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <CTRL_setNowData_Err+0x84>)
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	200013d4 	.word	0x200013d4
 8005938:	200013d0 	.word	0x200013d0
 800593c:	20000250 	.word	0x20000250
 8005940:	20000254 	.word	0x20000254
 8005944:	20000258 	.word	0x20000258
 8005948:	2000022c 	.word	0x2000022c
 800594c:	20000280 	.word	0x20000280
 8005950:	20000702 	.word	0x20000702
 8005954:	200002dc 	.word	0x200002dc

08005958 <CTRL_setData>:

void CTRL_setData( stCTRL_DATA* p_data )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* 制御方法 */
	en_Type					= p_data->en_type;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <CTRL_setData+0x84>)
 8005966:	701a      	strb	r2, [r3, #0]

	/* 速度制御 */
	f_Acc 					= p_data->f_acc;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <CTRL_setData+0x88>)
 800596e:	6013      	str	r3, [r2, #0]
	f_BaseSpeed				= p_data->f_now;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <CTRL_setData+0x8c>)
 8005976:	6013      	str	r3, [r2, #0]
	f_LastSpeed				= p_data->f_trgt;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <CTRL_setData+0x90>)
 800597e:	6013      	str	r3, [r2, #0]

	/* 距離制御 */
	f_BaseDist 				= p_data->f_nowDist;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <CTRL_setData+0x94>)
 8005986:	6013      	str	r3, [r2, #0]
	f_LastDist 				= p_data->f_dist;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <CTRL_setData+0x98>)
 800598e:	6013      	str	r3, [r2, #0]

	/* 角速度制御 */
	f_AccAngleS 			= p_data->f_accAngleS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <CTRL_setData+0x9c>)
 8005996:	6013      	str	r3, [r2, #0]
	f_BaseAngleS			= p_data->f_nowAngleS;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <CTRL_setData+0xa0>)
 800599e:	6013      	str	r3, [r2, #0]
	f_LastAngleS			= p_data->f_trgtAngleS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	4a15      	ldr	r2, [pc, #84]	; (80059fc <CTRL_setData+0xa4>)
 80059a6:	6013      	str	r3, [r2, #0]

	/* 角度制御 */
	f_BaseAngle 			= p_data->f_nowAngle;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <CTRL_setData+0xa8>)
 80059ae:	6013      	str	r3, [r2, #0]
	f_LastAngle 			= p_data->f_angle;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <CTRL_setData+0xac>)
 80059b6:	6013      	str	r3, [r2, #0]

	f_Time 					= 0;
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <CTRL_setData+0xb0>)
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
	f_TrgtTime				= p_data->f_time;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <CTRL_setData+0xb4>)
 80059c6:	6013      	str	r3, [r2, #0]

	escape_wait			= 0;
 80059c8:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <CTRL_setData+0xb8>)
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

	CTRL_sta();				// 制御開始
 80059d0:	f7ff fec0 	bl	8005754 <CTRL_sta>

}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200006ee 	.word	0x200006ee
 80059e0:	20000220 	.word	0x20000220
 80059e4:	20000224 	.word	0x20000224
 80059e8:	20000228 	.word	0x20000228
 80059ec:	20000244 	.word	0x20000244
 80059f0:	20000248 	.word	0x20000248
 80059f4:	20000260 	.word	0x20000260
 80059f8:	20000264 	.word	0x20000264
 80059fc:	20000268 	.word	0x20000268
 8005a00:	20000278 	.word	0x20000278
 8005a04:	2000027c 	.word	0x2000027c
 8005a08:	2000021c 	.word	0x2000021c
 8005a0c:	20000008 	.word	0x20000008
 8005a10:	20000b08 	.word	0x20000b08

08005a14 <CTRL_refNow>:

void CTRL_refNow( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
	float f_speedR		= 0;							// 右モータ現在速度 [mm/s]
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
	float f_speedL		= 0;							// 左モータ現在速度 [mm/s]
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
	float f_r 			= F_CNT2MM(l_CntR);				// 右モータの進んだ距離 [mm]
 8005a26:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <CTRL_refNow+0x104>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a32:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005b1c <CTRL_refNow+0x108>
 8005a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a3a:	edc7 7a01 	vstr	s15, [r7, #4]
	float f_l 			= F_CNT2MM(l_CntL);				// 左モータの進んだ距離 [mm]
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <CTRL_refNow+0x10c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005b1c <CTRL_refNow+0x108>
 8005a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a52:	edc7 7a00 	vstr	s15, [r7]

	/* 速度更新 */
	f_speedR = f_r * 1000.0;								// 右モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8005a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a5a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005b24 <CTRL_refNow+0x110>
 8005a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a62:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speedL = f_l * 1000.0;								// 左モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8005a66:	edd7 7a00 	vldr	s15, [r7]
 8005a6a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005b24 <CTRL_refNow+0x110>
 8005a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a72:	edc7 7a02 	vstr	s15, [r7, #8]
	f_NowSpeed  = ( f_speedR + f_speedL ) / 2;			// マウス（進行方向中心軸） [1mm/s] 
 8005a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <CTRL_refNow+0x114>)
 8005a8c:	edc3 7a00 	vstr	s15, [r3]
	
	/*motor AngleS*/
	f_MotorR_AngleS	= f_speedR /(PI*TIRE_D)/GEAR_RATIO;
 8005a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a94:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005b2c <CTRL_refNow+0x118>
 8005a98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a9c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005b30 <CTRL_refNow+0x11c>
 8005aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aa4:	4b23      	ldr	r3, [pc, #140]	; (8005b34 <CTRL_refNow+0x120>)
 8005aa6:	edc3 7a00 	vstr	s15, [r3]
	f_MotorL_AngleS = f_speedL /(PI*TIRE_D)/GEAR_RATIO;
 8005aaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aae:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005b2c <CTRL_refNow+0x118>
 8005ab2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ab6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005b30 <CTRL_refNow+0x11c>
 8005aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005abe:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <CTRL_refNow+0x124>)
 8005ac0:	edc3 7a00 	vstr	s15, [r3]

	/* 距離更新 */
	f_NowDistR += f_r;									// カウント更新
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <CTRL_refNow+0x128>)
 8005ac6:	ed93 7a00 	vldr	s14, [r3]
 8005aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <CTRL_refNow+0x128>)
 8005ad4:	edc3 7a00 	vstr	s15, [r3]
	f_NowDistL += f_l;									// カウント更新
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <CTRL_refNow+0x12c>)
 8005ada:	ed93 7a00 	vldr	s14, [r3]
 8005ade:	edd7 7a00 	vldr	s15, [r7]
 8005ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <CTRL_refNow+0x12c>)
 8005ae8:	edc3 7a00 	vstr	s15, [r3]
	f_NowDist  = ( f_NowDistR + f_NowDistL ) / 2.0;		// 平均値更新
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <CTRL_refNow+0x128>)
 8005aee:	ed93 7a00 	vldr	s14, [r3]
 8005af2:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <CTRL_refNow+0x12c>)
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005afc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <CTRL_refNow+0x130>)
 8005b06:	edc3 7a00 	vstr	s15, [r3]
//	f_NowDist  += (f_r + f_l) / 2.0; 	//setNowdataの残り　うまく行かないため上に戻し
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	200013d4 	.word	0x200013d4
 8005b1c:	3720d973 	.word	0x3720d973
 8005b20:	200013d0 	.word	0x200013d0
 8005b24:	447a0000 	.word	0x447a0000
 8005b28:	2000022c 	.word	0x2000022c
 8005b2c:	3d20d973 	.word	0x3d20d973
 8005b30:	40666666 	.word	0x40666666
 8005b34:	2000023c 	.word	0x2000023c
 8005b38:	20000240 	.word	0x20000240
 8005b3c:	20000254 	.word	0x20000254
 8005b40:	20000258 	.word	0x20000258
 8005b44:	20000250 	.word	0x20000250

08005b48 <CTRL_refTarget>:

void CTRL_refTarget( void )
{
 8005b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b4c:	af00      	add	r7, sp, #0
	/* mode */
	switch( en_Type ){
 8005b4e:	4ba8      	ldr	r3, [pc, #672]	; (8005df0 <CTRL_refTarget+0x2a8>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b0e      	cmp	r3, #14
 8005b54:	f200 859b 	bhi.w	800668e <CTRL_refTarget+0xb46>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <CTRL_refTarget+0x18>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005c1b 	.word	0x08005c1b
 8005b68:	08005c27 	.word	0x08005c27
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005c1b 	.word	0x08005c1b
 8005b74:	08005c27 	.word	0x08005c27
 8005b78:	0800668f 	.word	0x0800668f
 8005b7c:	08005cdf 	.word	0x08005cdf
 8005b80:	0800668f 	.word	0x0800668f
 8005b84:	08005e29 	.word	0x08005e29
 8005b88:	08005fa1 	.word	0x08005fa1
 8005b8c:	0800601b 	.word	0x0800601b
 8005b90:	08006241 	.word	0x08006241
 8005b94:	0800640d 	.word	0x0800640d
 8005b98:	08006605 	.word	0x08006605

		/* acc(straight) */
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
			if( f_TrgtSpeed < (f_LastSpeed -(f_Acc * 0.001)) ){								// 加速目標更新区間
 8005b9c:	4b95      	ldr	r3, [pc, #596]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fcf9 	bl	8000598 <__aeabi_f2d>
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	460d      	mov	r5, r1
 8005baa:	4b93      	ldr	r3, [pc, #588]	; (8005df8 <CTRL_refTarget+0x2b0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fa fcf2 	bl	8000598 <__aeabi_f2d>
 8005bb4:	4680      	mov	r8, r0
 8005bb6:	4689      	mov	r9, r1
 8005bb8:	4b90      	ldr	r3, [pc, #576]	; (8005dfc <CTRL_refTarget+0x2b4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fceb 	bl	8000598 <__aeabi_f2d>
 8005bc2:	a389      	add	r3, pc, #548	; (adr r3, 8005de8 <CTRL_refTarget+0x2a0>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fd3e 	bl	8000648 <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	f7fa fb80 	bl	80002d8 <__aeabi_dsub>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4629      	mov	r1, r5
 8005be0:	f7fa ffa4 	bl	8000b2c <__aeabi_dcmplt>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <CTRL_refTarget+0xc6>
				f_TrgtSpeed = f_BaseSpeed + f_Acc * f_Time;									// 目標速度
 8005bea:	4b84      	ldr	r3, [pc, #528]	; (8005dfc <CTRL_refTarget+0x2b4>)
 8005bec:	ed93 7a00 	vldr	s14, [r3]
 8005bf0:	4b83      	ldr	r3, [pc, #524]	; (8005e00 <CTRL_refTarget+0x2b8>)
 8005bf2:	edd3 7a00 	vldr	s15, [r3]
 8005bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bfa:	4b82      	ldr	r3, [pc, #520]	; (8005e04 <CTRL_refTarget+0x2bc>)
 8005bfc:	edd3 7a00 	vldr	s15, [r3]
 8005c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c04:	4b7b      	ldr	r3, [pc, #492]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c06:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtSpeed = f_LastSpeed;
			}
			break;
 8005c0a:	f000 bd41 	b.w	8006690 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005c0e:	4b7a      	ldr	r3, [pc, #488]	; (8005df8 <CTRL_refTarget+0x2b0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a78      	ldr	r2, [pc, #480]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c14:	6013      	str	r3, [r2, #0]
			break;
 8005c16:	f000 bd3b 	b.w	8006690 <CTRL_refTarget+0xb48>

		/* const(straight) */
		case CTRL_CONST:
		case CTRL_SKEW_CONST:
			f_TrgtSpeed = f_BaseSpeed;														// 目標速度
 8005c1a:	4b7a      	ldr	r3, [pc, #488]	; (8005e04 <CTRL_refTarget+0x2bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a75      	ldr	r2, [pc, #468]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c20:	6013      	str	r3, [r2, #0]
			break;
 8005c22:	f000 bd35 	b.w	8006690 <CTRL_refTarget+0xb48>

		/* dec(straight) */
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
			/* speed CTRL + position CTRL */
			if( f_TrgtSpeed > (f_LastSpeed +(f_Acc * 0.001))){								// 減速目標更新区間
 8005c26:	4b73      	ldr	r3, [pc, #460]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fa fcb4 	bl	8000598 <__aeabi_f2d>
 8005c30:	4604      	mov	r4, r0
 8005c32:	460d      	mov	r5, r1
 8005c34:	4b70      	ldr	r3, [pc, #448]	; (8005df8 <CTRL_refTarget+0x2b0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fcad 	bl	8000598 <__aeabi_f2d>
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4689      	mov	r9, r1
 8005c42:	4b6e      	ldr	r3, [pc, #440]	; (8005dfc <CTRL_refTarget+0x2b4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fca6 	bl	8000598 <__aeabi_f2d>
 8005c4c:	a366      	add	r3, pc, #408	; (adr r3, 8005de8 <CTRL_refTarget+0x2a0>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fcf9 	bl	8000648 <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fb3d 	bl	80002dc <__adddf3>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa ff7d 	bl	8000b68 <__aeabi_dcmpgt>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02a      	beq.n	8005cca <CTRL_refTarget+0x182>
				f_TrgtSpeed = f_BaseSpeed - f_Acc * f_Time;									// 目標速度
 8005c74:	4b63      	ldr	r3, [pc, #396]	; (8005e04 <CTRL_refTarget+0x2bc>)
 8005c76:	ed93 7a00 	vldr	s14, [r3]
 8005c7a:	4b60      	ldr	r3, [pc, #384]	; (8005dfc <CTRL_refTarget+0x2b4>)
 8005c7c:	edd3 6a00 	vldr	s13, [r3]
 8005c80:	4b5f      	ldr	r3, [pc, #380]	; (8005e00 <CTRL_refTarget+0x2b8>)
 8005c82:	edd3 7a00 	vldr	s15, [r3]
 8005c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8e:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c90:	edc3 7a00 	vstr	s15, [r3]
				f_TrgtDist  = f_BaseDist + ( f_BaseSpeed + f_TrgtSpeed ) * f_Time / 2;		// 目標距離
 8005c94:	4b5b      	ldr	r3, [pc, #364]	; (8005e04 <CTRL_refTarget+0x2bc>)
 8005c96:	ed93 7a00 	vldr	s14, [r3]
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005c9c:	edd3 7a00 	vldr	s15, [r3]
 8005ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ca4:	4b56      	ldr	r3, [pc, #344]	; (8005e00 <CTRL_refTarget+0x2b8>)
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005cb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005cb6:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <CTRL_refTarget+0x2c0>)
 8005cb8:	edd3 7a00 	vldr	s15, [r3]
 8005cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc0:	4b52      	ldr	r3, [pc, #328]	; (8005e0c <CTRL_refTarget+0x2c4>)
 8005cc2:	edc3 7a00 	vstr	s15, [r3]
			/* position CTRL */
			else{
				f_TrgtSpeed = f_LastSpeed;
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8005cc6:	f000 bce3 	b.w	8006690 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005cca:	4b4b      	ldr	r3, [pc, #300]	; (8005df8 <CTRL_refTarget+0x2b0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a49      	ldr	r2, [pc, #292]	; (8005df4 <CTRL_refTarget+0x2ac>)
 8005cd0:	6013      	str	r3, [r2, #0]
				f_TrgtDist  = f_LastDist;													// 目標距離
 8005cd2:	4b4f      	ldr	r3, [pc, #316]	; (8005e10 <CTRL_refTarget+0x2c8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a4d      	ldr	r2, [pc, #308]	; (8005e0c <CTRL_refTarget+0x2c4>)
 8005cd8:	6013      	str	r3, [r2, #0]
			break;
 8005cda:	f000 bcd9 	b.w	8006690 <CTRL_refTarget+0xb48>

		/* acc(Turn) */
		case CTRL_ACC_TRUN:

			/* CCW  hidari*/
			if( f_LastAngle > 0 ){
 8005cde:	4b4d      	ldr	r3, [pc, #308]	; (8005e14 <CTRL_refTarget+0x2cc>)
 8005ce0:	edd3 7a00 	vldr	s15, [r3]
 8005ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	dd3d      	ble.n	8005d6a <CTRL_refTarget+0x222>
				if ( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fa fc50 	bl	8000598 <__aeabi_f2d>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <CTRL_refTarget+0x2d4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fa fc49 	bl	8000598 <__aeabi_f2d>
 8005d06:	4680      	mov	r8, r0
 8005d08:	4689      	mov	r9, r1
 8005d0a:	4b45      	ldr	r3, [pc, #276]	; (8005e20 <CTRL_refTarget+0x2d8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fc42 	bl	8000598 <__aeabi_f2d>
 8005d14:	a334      	add	r3, pc, #208	; (adr r3, 8005de8 <CTRL_refTarget+0x2a0>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa fc95 	bl	8000648 <__aeabi_dmul>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	f7fa fad7 	bl	80002d8 <__aeabi_dsub>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fefb 	bl	8000b2c <__aeabi_dcmplt>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <CTRL_refTarget+0x216>
					f_TrgtAngleS = 0.0 + f_AccAngleS * f_Time;									// 目標角速度
 8005d3c:	4b38      	ldr	r3, [pc, #224]	; (8005e20 <CTRL_refTarget+0x2d8>)
 8005d3e:	ed93 7a00 	vldr	s14, [r3]
 8005d42:	4b2f      	ldr	r3, [pc, #188]	; (8005e00 <CTRL_refTarget+0x2b8>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005e24 <CTRL_refTarget+0x2dc>
 8005d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d54:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005d56:	edc3 7a00 	vstr	s15, [r3]
				}
				else{
					f_TrgtAngleS = f_LastAngleS;
				}
			}
			break;
 8005d5a:	f000 bc99 	b.w	8006690 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005d5e:	4b2f      	ldr	r3, [pc, #188]	; (8005e1c <CTRL_refTarget+0x2d4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005d64:	6013      	str	r3, [r2, #0]
			break;
 8005d66:	f000 bc93 	b.w	8006690 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fc12 	bl	8000598 <__aeabi_f2d>
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <CTRL_refTarget+0x2d4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fc0b 	bl	8000598 <__aeabi_f2d>
 8005d82:	4680      	mov	r8, r0
 8005d84:	4689      	mov	r9, r1
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <CTRL_refTarget+0x2d8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fc04 	bl	8000598 <__aeabi_f2d>
 8005d90:	a315      	add	r3, pc, #84	; (adr r3, 8005de8 <CTRL_refTarget+0x2a0>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fc57 	bl	8000648 <__aeabi_dmul>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa fa9b 	bl	80002dc <__adddf3>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4620      	mov	r0, r4
 8005dac:	4629      	mov	r1, r5
 8005dae:	f7fa fedb 	bl	8000b68 <__aeabi_dcmpgt>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <CTRL_refTarget+0x292>
				f_TrgtAngleS = 0.0 - f_AccAngleS * f_Time;									// 目標角速度
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <CTRL_refTarget+0x2d8>)
 8005dba:	ed93 7a00 	vldr	s14, [r3]
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <CTRL_refTarget+0x2b8>)
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005e24 <CTRL_refTarget+0x2dc>
 8005dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd0:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005dd2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005dd6:	f000 bc5b 	b.w	8006690 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <CTRL_refTarget+0x2d4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <CTRL_refTarget+0x2d0>)
 8005de0:	6013      	str	r3, [r2, #0]
			break;
 8005de2:	f000 bc55 	b.w	8006690 <CTRL_refTarget+0xb48>
 8005de6:	bf00      	nop
 8005de8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dec:	3f50624d 	.word	0x3f50624d
 8005df0:	200006ee 	.word	0x200006ee
 8005df4:	20000230 	.word	0x20000230
 8005df8:	20000228 	.word	0x20000228
 8005dfc:	20000220 	.word	0x20000220
 8005e00:	2000021c 	.word	0x2000021c
 8005e04:	20000224 	.word	0x20000224
 8005e08:	20000244 	.word	0x20000244
 8005e0c:	2000024c 	.word	0x2000024c
 8005e10:	20000248 	.word	0x20000248
 8005e14:	2000027c 	.word	0x2000027c
 8005e18:	2000026c 	.word	0x2000026c
 8005e1c:	20000268 	.word	0x20000268
 8005e20:	20000260 	.word	0x20000260
 8005e24:	00000000 	.word	0x00000000
			break;

		/* dec(Turn) */
		case CTRL_DEC_TRUN:
			/* CCW */
			if( f_LastAngle > 0 ){
 8005e28:	4baf      	ldr	r3, [pc, #700]	; (80060e8 <CTRL_refTarget+0x5a0>)
 8005e2a:	edd3 7a00 	vldr	s15, [r3]
 8005e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e36:	dd59      	ble.n	8005eec <CTRL_refTarget+0x3a4>

				/* Angle speed CTRL + Angle CTRL */
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){						// 減速目標更新区間
 8005e38:	4bac      	ldr	r3, [pc, #688]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fa fbab 	bl	8000598 <__aeabi_f2d>
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	4baa      	ldr	r3, [pc, #680]	; (80060f0 <CTRL_refTarget+0x5a8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fba4 	bl	8000598 <__aeabi_f2d>
 8005e50:	4680      	mov	r8, r0
 8005e52:	4689      	mov	r9, r1
 8005e54:	4ba7      	ldr	r3, [pc, #668]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb9d 	bl	8000598 <__aeabi_f2d>
 8005e5e:	a3a0      	add	r3, pc, #640	; (adr r3, 80060e0 <CTRL_refTarget+0x598>)
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f7fa fbf0 	bl	8000648 <__aeabi_dmul>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fa34 	bl	80002dc <__adddf3>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa fe74 	bl	8000b68 <__aeabi_dcmpgt>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d029      	beq.n	8005eda <CTRL_refTarget+0x392>
					f_TrgtAngleS = f_BaseAngleS - f_AccAngleS * f_Time;							// 目標角速度
 8005e86:	4b9c      	ldr	r3, [pc, #624]	; (80060f8 <CTRL_refTarget+0x5b0>)
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	4b99      	ldr	r3, [pc, #612]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8005e8e:	edd3 6a00 	vldr	s13, [r3]
 8005e92:	4b9a      	ldr	r3, [pc, #616]	; (80060fc <CTRL_refTarget+0x5b4>)
 8005e94:	edd3 7a00 	vldr	s15, [r3]
 8005e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea0:	4b92      	ldr	r3, [pc, #584]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005ea2:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005ea6:	4b94      	ldr	r3, [pc, #592]	; (80060f8 <CTRL_refTarget+0x5b0>)
 8005ea8:	ed93 7a00 	vldr	s14, [r3]
 8005eac:	4b8f      	ldr	r3, [pc, #572]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005eae:	edd3 7a00 	vldr	s15, [r3]
 8005eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005eb6:	4b91      	ldr	r3, [pc, #580]	; (80060fc <CTRL_refTarget+0x5b4>)
 8005eb8:	edd3 7a00 	vldr	s15, [r3]
 8005ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005ec4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ec8:	4b8d      	ldr	r3, [pc, #564]	; (8006100 <CTRL_refTarget+0x5b8>)
 8005eca:	edd3 7a00 	vldr	s15, [r3]
 8005ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed2:	4b8c      	ldr	r3, [pc, #560]	; (8006104 <CTRL_refTarget+0x5bc>)
 8005ed4:	edc3 7a00 	vstr	s15, [r3]
				else{
					f_TrgtAngleS = f_LastAngleS;
					f_TrgtAngle  = f_LastAngle;													// 目標距離
				}
			}
			break;
 8005ed8:	e3da      	b.n	8006690 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005eda:	4b85      	ldr	r3, [pc, #532]	; (80060f0 <CTRL_refTarget+0x5a8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a83      	ldr	r2, [pc, #524]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005ee0:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <CTRL_refTarget+0x5a0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a87      	ldr	r2, [pc, #540]	; (8006104 <CTRL_refTarget+0x5bc>)
 8005ee8:	6013      	str	r3, [r2, #0]
			break;
 8005eea:	e3d1      	b.n	8006690 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001))){						// 減速目標更新区間
 8005eec:	4b7f      	ldr	r3, [pc, #508]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fb51 	bl	8000598 <__aeabi_f2d>
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	4b7d      	ldr	r3, [pc, #500]	; (80060f0 <CTRL_refTarget+0x5a8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fa fb4a 	bl	8000598 <__aeabi_f2d>
 8005f04:	4680      	mov	r8, r0
 8005f06:	4689      	mov	r9, r1
 8005f08:	4b7a      	ldr	r3, [pc, #488]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa fb43 	bl	8000598 <__aeabi_f2d>
 8005f12:	a373      	add	r3, pc, #460	; (adr r3, 80060e0 <CTRL_refTarget+0x598>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa fb96 	bl	8000648 <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4640      	mov	r0, r8
 8005f22:	4649      	mov	r1, r9
 8005f24:	f7fa f9d8 	bl	80002d8 <__aeabi_dsub>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fdfc 	bl	8000b2c <__aeabi_dcmplt>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d029      	beq.n	8005f8e <CTRL_refTarget+0x446>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8005f3a:	4b6e      	ldr	r3, [pc, #440]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8005f3c:	ed93 7a00 	vldr	s14, [r3]
 8005f40:	4b6e      	ldr	r3, [pc, #440]	; (80060fc <CTRL_refTarget+0x5b4>)
 8005f42:	edd3 7a00 	vldr	s15, [r3]
 8005f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f4a:	4b6b      	ldr	r3, [pc, #428]	; (80060f8 <CTRL_refTarget+0x5b0>)
 8005f4c:	edd3 7a00 	vldr	s15, [r3]
 8005f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f54:	4b65      	ldr	r3, [pc, #404]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005f56:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005f5a:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <CTRL_refTarget+0x5b0>)
 8005f5c:	ed93 7a00 	vldr	s14, [r3]
 8005f60:	4b62      	ldr	r3, [pc, #392]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005f62:	edd3 7a00 	vldr	s15, [r3]
 8005f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f6a:	4b64      	ldr	r3, [pc, #400]	; (80060fc <CTRL_refTarget+0x5b4>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f7c:	4b60      	ldr	r3, [pc, #384]	; (8006100 <CTRL_refTarget+0x5b8>)
 8005f7e:	edd3 7a00 	vldr	s15, [r3]
 8005f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f86:	4b5f      	ldr	r3, [pc, #380]	; (8006104 <CTRL_refTarget+0x5bc>)
 8005f88:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005f8c:	e380      	b.n	8006690 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005f8e:	4b58      	ldr	r3, [pc, #352]	; (80060f0 <CTRL_refTarget+0x5a8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <CTRL_refTarget+0x5a4>)
 8005f94:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005f96:	4b54      	ldr	r3, [pc, #336]	; (80060e8 <CTRL_refTarget+0x5a0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a5a      	ldr	r2, [pc, #360]	; (8006104 <CTRL_refTarget+0x5bc>)
 8005f9c:	6013      	str	r3, [r2, #0]
			break;
 8005f9e:	e377      	b.n	8006690 <CTRL_refTarget+0xb48>

		/* entry(sura) */
		case CTRL_ENTRY_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8005fa0:	4b59      	ldr	r3, [pc, #356]	; (8006108 <CTRL_refTarget+0x5c0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a59      	ldr	r2, [pc, #356]	; (800610c <CTRL_refTarget+0x5c4>)
 8005fa6:	6013      	str	r3, [r2, #0]
			if( f_TrgtDist <= f_LastDist - (f_TrgtSpeed * 0.001) ){
 8005fa8:	4b59      	ldr	r3, [pc, #356]	; (8006110 <CTRL_refTarget+0x5c8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa faf3 	bl	8000598 <__aeabi_f2d>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	4b57      	ldr	r3, [pc, #348]	; (8006114 <CTRL_refTarget+0x5cc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fa faec 	bl	8000598 <__aeabi_f2d>
 8005fc0:	4680      	mov	r8, r0
 8005fc2:	4689      	mov	r9, r1
 8005fc4:	4b51      	ldr	r3, [pc, #324]	; (800610c <CTRL_refTarget+0x5c4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fa fae5 	bl	8000598 <__aeabi_f2d>
 8005fce:	a344      	add	r3, pc, #272	; (adr r3, 80060e0 <CTRL_refTarget+0x598>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa fb38 	bl	8000648 <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4640      	mov	r0, r8
 8005fde:	4649      	mov	r1, r9
 8005fe0:	f7fa f97a 	bl	80002d8 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa fda8 	bl	8000b40 <__aeabi_dcmple>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d100      	bne.n	8005ff8 <CTRL_refTarget+0x4b0>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
			}
			break;
 8005ff6:	e34b      	b.n	8006690 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 8005ff8:	4b44      	ldr	r3, [pc, #272]	; (800610c <CTRL_refTarget+0x5c4>)
 8005ffa:	ed93 7a00 	vldr	s14, [r3]
 8005ffe:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <CTRL_refTarget+0x5b4>)
 8006000:	edd3 7a00 	vldr	s15, [r3]
 8006004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006008:	4b43      	ldr	r3, [pc, #268]	; (8006118 <CTRL_refTarget+0x5d0>)
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006012:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <CTRL_refTarget+0x5c8>)
 8006014:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006018:	e33a      	b.n	8006690 <CTRL_refTarget+0xb48>

		/* acc(スラローム) */
		case CTRL_ACC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 800601a:	4b3b      	ldr	r3, [pc, #236]	; (8006108 <CTRL_refTarget+0x5c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <CTRL_refTarget+0x5c4>)
 8006020:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006022:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <CTRL_refTarget+0x5a0>)
 8006024:	edd3 7a00 	vldr	s15, [r3]
 8006028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006030:	dd74      	ble.n	800611c <CTRL_refTarget+0x5d4>
				if( f_TrgtAngleS < (f_LastAngleS +(f_AccAngleS * 0.001))){
 8006032:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <CTRL_refTarget+0x5a4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa faae 	bl	8000598 <__aeabi_f2d>
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <CTRL_refTarget+0x5a8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7fa faa7 	bl	8000598 <__aeabi_f2d>
 800604a:	4680      	mov	r8, r0
 800604c:	4689      	mov	r9, r1
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa faa0 	bl	8000598 <__aeabi_f2d>
 8006058:	a321      	add	r3, pc, #132	; (adr r3, 80060e0 <CTRL_refTarget+0x598>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa faf3 	bl	8000648 <__aeabi_dmul>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4640      	mov	r0, r8
 8006068:	4649      	mov	r1, r9
 800606a:	f7fa f937 	bl	80002dc <__adddf3>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fd59 	bl	8000b2c <__aeabi_dcmplt>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d029      	beq.n	80060d4 <CTRL_refTarget+0x58c>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006080:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <CTRL_refTarget+0x5ac>)
 8006082:	ed93 7a00 	vldr	s14, [r3]
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <CTRL_refTarget+0x5b4>)
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006090:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <CTRL_refTarget+0x5b0>)
 8006092:	edd3 7a00 	vldr	s15, [r3]
 8006096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <CTRL_refTarget+0x5a4>)
 800609c:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <CTRL_refTarget+0x5b0>)
 80060a2:	ed93 7a00 	vldr	s14, [r3]
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <CTRL_refTarget+0x5a4>)
 80060a8:	edd3 7a00 	vldr	s15, [r3]
 80060ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060b0:	4b12      	ldr	r3, [pc, #72]	; (80060fc <CTRL_refTarget+0x5b4>)
 80060b2:	edd3 7a00 	vldr	s15, [r3]
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80060be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <CTRL_refTarget+0x5b8>)
 80060c4:	edd3 7a00 	vldr	s15, [r3]
 80060c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060cc:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <CTRL_refTarget+0x5bc>)
 80060ce:	edc3 7a00 	vstr	s15, [r3]
 80060d2:	e078      	b.n	80061c6 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <CTRL_refTarget+0x5a0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <CTRL_refTarget+0x5bc>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e073      	b.n	80061c6 <CTRL_refTarget+0x67e>
 80060de:	bf00      	nop
 80060e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80060e4:	3f50624d 	.word	0x3f50624d
 80060e8:	2000027c 	.word	0x2000027c
 80060ec:	2000026c 	.word	0x2000026c
 80060f0:	20000268 	.word	0x20000268
 80060f4:	20000260 	.word	0x20000260
 80060f8:	20000264 	.word	0x20000264
 80060fc:	2000021c 	.word	0x2000021c
 8006100:	20000278 	.word	0x20000278
 8006104:	20000284 	.word	0x20000284
 8006108:	20000224 	.word	0x20000224
 800610c:	20000230 	.word	0x20000230
 8006110:	2000024c 	.word	0x2000024c
 8006114:	20000248 	.word	0x20000248
 8006118:	20000244 	.word	0x20000244
				}
			}
			/* CW */
			else{
				if( f_TrgtAngleS > (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 800611c:	4bae      	ldr	r3, [pc, #696]	; (80063d8 <CTRL_refTarget+0x890>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fa fa39 	bl	8000598 <__aeabi_f2d>
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	4bac      	ldr	r3, [pc, #688]	; (80063dc <CTRL_refTarget+0x894>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa fa32 	bl	8000598 <__aeabi_f2d>
 8006134:	4680      	mov	r8, r0
 8006136:	4689      	mov	r9, r1
 8006138:	4ba9      	ldr	r3, [pc, #676]	; (80063e0 <CTRL_refTarget+0x898>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fa fa2b 	bl	8000598 <__aeabi_f2d>
 8006142:	a3a3      	add	r3, pc, #652	; (adr r3, 80063d0 <CTRL_refTarget+0x888>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa7e 	bl	8000648 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa f8c0 	bl	80002d8 <__aeabi_dsub>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa fd02 	bl	8000b68 <__aeabi_dcmpgt>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d029      	beq.n	80061be <CTRL_refTarget+0x676>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 800616a:	4b9d      	ldr	r3, [pc, #628]	; (80063e0 <CTRL_refTarget+0x898>)
 800616c:	ed93 7a00 	vldr	s14, [r3]
 8006170:	4b9c      	ldr	r3, [pc, #624]	; (80063e4 <CTRL_refTarget+0x89c>)
 8006172:	edd3 7a00 	vldr	s15, [r3]
 8006176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617a:	4b9b      	ldr	r3, [pc, #620]	; (80063e8 <CTRL_refTarget+0x8a0>)
 800617c:	edd3 7a00 	vldr	s15, [r3]
 8006180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006184:	4b94      	ldr	r3, [pc, #592]	; (80063d8 <CTRL_refTarget+0x890>)
 8006186:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 800618a:	4b97      	ldr	r3, [pc, #604]	; (80063e8 <CTRL_refTarget+0x8a0>)
 800618c:	ed93 7a00 	vldr	s14, [r3]
 8006190:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <CTRL_refTarget+0x890>)
 8006192:	edd3 7a00 	vldr	s15, [r3]
 8006196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800619a:	4b92      	ldr	r3, [pc, #584]	; (80063e4 <CTRL_refTarget+0x89c>)
 800619c:	edd3 7a00 	vldr	s15, [r3]
 80061a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061ac:	4b8f      	ldr	r3, [pc, #572]	; (80063ec <CTRL_refTarget+0x8a4>)
 80061ae:	edd3 7a00 	vldr	s15, [r3]
 80061b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b6:	4b8e      	ldr	r3, [pc, #568]	; (80063f0 <CTRL_refTarget+0x8a8>)
 80061b8:	edc3 7a00 	vstr	s15, [r3]
 80061bc:	e003      	b.n	80061c6 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80061be:	4b8d      	ldr	r3, [pc, #564]	; (80063f4 <CTRL_refTarget+0x8ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a8b      	ldr	r2, [pc, #556]	; (80063f0 <CTRL_refTarget+0x8a8>)
 80061c4:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 80061c6:	4b8c      	ldr	r3, [pc, #560]	; (80063f8 <CTRL_refTarget+0x8b0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fa f9e4 	bl	8000598 <__aeabi_f2d>
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	4b89      	ldr	r3, [pc, #548]	; (80063fc <CTRL_refTarget+0x8b4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa f9dd 	bl	8000598 <__aeabi_f2d>
 80061de:	4680      	mov	r8, r0
 80061e0:	4689      	mov	r9, r1
 80061e2:	4b87      	ldr	r3, [pc, #540]	; (8006400 <CTRL_refTarget+0x8b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa f9d6 	bl	8000598 <__aeabi_f2d>
 80061ec:	a378      	add	r3, pc, #480	; (adr r3, 80063d0 <CTRL_refTarget+0x888>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7fa fa29 	bl	8000648 <__aeabi_dmul>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4640      	mov	r0, r8
 80061fc:	4649      	mov	r1, r9
 80061fe:	f7fa f86b 	bl	80002d8 <__aeabi_dsub>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa fcad 	bl	8000b68 <__aeabi_dcmpgt>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <CTRL_refTarget+0x6ee>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 8006214:	4b7a      	ldr	r3, [pc, #488]	; (8006400 <CTRL_refTarget+0x8b8>)
 8006216:	ed93 7a00 	vldr	s14, [r3]
 800621a:	4b72      	ldr	r3, [pc, #456]	; (80063e4 <CTRL_refTarget+0x89c>)
 800621c:	edd3 7a00 	vldr	s15, [r3]
 8006220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006224:	4b77      	ldr	r3, [pc, #476]	; (8006404 <CTRL_refTarget+0x8bc>)
 8006226:	edd3 7a00 	vldr	s15, [r3]
 800622a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622e:	4b73      	ldr	r3, [pc, #460]	; (80063fc <CTRL_refTarget+0x8b4>)
 8006230:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006234:	e22c      	b.n	8006690 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006236:	4b70      	ldr	r3, [pc, #448]	; (80063f8 <CTRL_refTarget+0x8b0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a70      	ldr	r2, [pc, #448]	; (80063fc <CTRL_refTarget+0x8b4>)
 800623c:	6013      	str	r3, [r2, #0]
			break;
 800623e:	e227      	b.n	8006690 <CTRL_refTarget+0xb48>

		/* const(sura) */
		case CTRL_CONST_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8006240:	4b71      	ldr	r3, [pc, #452]	; (8006408 <CTRL_refTarget+0x8c0>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a6e      	ldr	r2, [pc, #440]	; (8006400 <CTRL_refTarget+0x8b8>)
 8006246:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = f_BaseAngleS;							// 目標角速度
 8006248:	4b67      	ldr	r3, [pc, #412]	; (80063e8 <CTRL_refTarget+0x8a0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a62      	ldr	r2, [pc, #392]	; (80063d8 <CTRL_refTarget+0x890>)
 800624e:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006250:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <CTRL_refTarget+0x8ac>)
 8006252:	edd3 7a00 	vldr	s15, [r3]
 8006256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800625a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625e:	dd3c      	ble.n	80062da <CTRL_refTarget+0x792>
				if( f_TrgtAngle < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 8006260:	4b63      	ldr	r3, [pc, #396]	; (80063f0 <CTRL_refTarget+0x8a8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f7fa f997 	bl	8000598 <__aeabi_f2d>
 800626a:	4604      	mov	r4, r0
 800626c:	460d      	mov	r5, r1
 800626e:	4b61      	ldr	r3, [pc, #388]	; (80063f4 <CTRL_refTarget+0x8ac>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fa f990 	bl	8000598 <__aeabi_f2d>
 8006278:	4680      	mov	r8, r0
 800627a:	4689      	mov	r9, r1
 800627c:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <CTRL_refTarget+0x898>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f989 	bl	8000598 <__aeabi_f2d>
 8006286:	a352      	add	r3, pc, #328	; (adr r3, 80063d0 <CTRL_refTarget+0x888>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7fa f9dc 	bl	8000648 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4640      	mov	r0, r8
 8006296:	4649      	mov	r1, r9
 8006298:	f7fa f820 	bl	80002dc <__adddf3>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4620      	mov	r0, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	f7fa fc42 	bl	8000b2c <__aeabi_dcmplt>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <CTRL_refTarget+0x788>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 80062ae:	4b4a      	ldr	r3, [pc, #296]	; (80063d8 <CTRL_refTarget+0x890>)
 80062b0:	ed93 7a00 	vldr	s14, [r3]
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <CTRL_refTarget+0x89c>)
 80062b6:	edd3 7a00 	vldr	s15, [r3]
 80062ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062be:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <CTRL_refTarget+0x8a4>)
 80062c0:	edd3 7a00 	vldr	s15, [r3]
 80062c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c8:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <CTRL_refTarget+0x8a8>)
 80062ca:	edc3 7a00 	vstr	s15, [r3]
 80062ce:	e040      	b.n	8006352 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 80062d0:	4b48      	ldr	r3, [pc, #288]	; (80063f4 <CTRL_refTarget+0x8ac>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a46      	ldr	r2, [pc, #280]	; (80063f0 <CTRL_refTarget+0x8a8>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e03b      	b.n	8006352 <CTRL_refTarget+0x80a>
				}
			}
			/* CW */
			else{
				if( f_TrgtAngle > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 80062da:	4b45      	ldr	r3, [pc, #276]	; (80063f0 <CTRL_refTarget+0x8a8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa f95a 	bl	8000598 <__aeabi_f2d>
 80062e4:	4604      	mov	r4, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <CTRL_refTarget+0x8ac>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fa f953 	bl	8000598 <__aeabi_f2d>
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	4b3a      	ldr	r3, [pc, #232]	; (80063e0 <CTRL_refTarget+0x898>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f94c 	bl	8000598 <__aeabi_f2d>
 8006300:	a333      	add	r3, pc, #204	; (adr r3, 80063d0 <CTRL_refTarget+0x888>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fa f99f 	bl	8000648 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7f9 ffe1 	bl	80002d8 <__aeabi_dsub>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fc23 	bl	8000b68 <__aeabi_dcmpgt>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <CTRL_refTarget+0x802>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <CTRL_refTarget+0x890>)
 800632a:	ed93 7a00 	vldr	s14, [r3]
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <CTRL_refTarget+0x89c>)
 8006330:	edd3 7a00 	vldr	s15, [r3]
 8006334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006338:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <CTRL_refTarget+0x8a4>)
 800633a:	edd3 7a00 	vldr	s15, [r3]
 800633e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <CTRL_refTarget+0x8a8>)
 8006344:	edc3 7a00 	vstr	s15, [r3]
 8006348:	e003      	b.n	8006352 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <CTRL_refTarget+0x8ac>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <CTRL_refTarget+0x8a8>)
 8006350:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <CTRL_refTarget+0x8b0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fa f91e 	bl	8000598 <__aeabi_f2d>
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	4b26      	ldr	r3, [pc, #152]	; (80063fc <CTRL_refTarget+0x8b4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fa f917 	bl	8000598 <__aeabi_f2d>
 800636a:	4680      	mov	r8, r0
 800636c:	4689      	mov	r9, r1
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <CTRL_refTarget+0x8b8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fa f910 	bl	8000598 <__aeabi_f2d>
 8006378:	a315      	add	r3, pc, #84	; (adr r3, 80063d0 <CTRL_refTarget+0x888>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7fa f963 	bl	8000648 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7f9 ffa5 	bl	80002d8 <__aeabi_dsub>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7fa fbe7 	bl	8000b68 <__aeabi_dcmpgt>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <CTRL_refTarget+0x87a>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 80063a0:	4b17      	ldr	r3, [pc, #92]	; (8006400 <CTRL_refTarget+0x8b8>)
 80063a2:	ed93 7a00 	vldr	s14, [r3]
 80063a6:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <CTRL_refTarget+0x89c>)
 80063a8:	edd3 7a00 	vldr	s15, [r3]
 80063ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <CTRL_refTarget+0x8bc>)
 80063b2:	edd3 7a00 	vldr	s15, [r3]
 80063b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <CTRL_refTarget+0x8b4>)
 80063bc:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80063c0:	e166      	b.n	8006690 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <CTRL_refTarget+0x8b0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0d      	ldr	r2, [pc, #52]	; (80063fc <CTRL_refTarget+0x8b4>)
 80063c8:	6013      	str	r3, [r2, #0]
			break;
 80063ca:	e161      	b.n	8006690 <CTRL_refTarget+0xb48>
 80063cc:	f3af 8000 	nop.w
 80063d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063d4:	3f50624d 	.word	0x3f50624d
 80063d8:	2000026c 	.word	0x2000026c
 80063dc:	20000268 	.word	0x20000268
 80063e0:	20000260 	.word	0x20000260
 80063e4:	2000021c 	.word	0x2000021c
 80063e8:	20000264 	.word	0x20000264
 80063ec:	20000278 	.word	0x20000278
 80063f0:	20000284 	.word	0x20000284
 80063f4:	2000027c 	.word	0x2000027c
 80063f8:	20000248 	.word	0x20000248
 80063fc:	2000024c 	.word	0x2000024c
 8006400:	20000230 	.word	0x20000230
 8006404:	20000244 	.word	0x20000244
 8006408:	20000224 	.word	0x20000224

		/* dec(sura) */
		case CTRL_DEC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 800640c:	4ba4      	ldr	r3, [pc, #656]	; (80066a0 <CTRL_refTarget+0xb58>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4aa4      	ldr	r2, [pc, #656]	; (80066a4 <CTRL_refTarget+0xb5c>)
 8006412:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006414:	4ba4      	ldr	r3, [pc, #656]	; (80066a8 <CTRL_refTarget+0xb60>)
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006422:	dd59      	ble.n	80064d8 <CTRL_refTarget+0x990>
				if( f_TrgtAngleS > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 8006424:	4ba1      	ldr	r3, [pc, #644]	; (80066ac <CTRL_refTarget+0xb64>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7fa f8b5 	bl	8000598 <__aeabi_f2d>
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	4b9d      	ldr	r3, [pc, #628]	; (80066a8 <CTRL_refTarget+0xb60>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fa f8ae 	bl	8000598 <__aeabi_f2d>
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <CTRL_refTarget+0xb68>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7fa f8a7 	bl	8000598 <__aeabi_f2d>
 800644a:	a393      	add	r3, pc, #588	; (adr r3, 8006698 <CTRL_refTarget+0xb50>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fa f8fa 	bl	8000648 <__aeabi_dmul>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7f9 ff3c 	bl	80002d8 <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4620      	mov	r0, r4
 8006466:	4629      	mov	r1, r5
 8006468:	f7fa fb7e 	bl	8000b68 <__aeabi_dcmpgt>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d029      	beq.n	80064c6 <CTRL_refTarget+0x97e>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006472:	4b8f      	ldr	r3, [pc, #572]	; (80066b0 <CTRL_refTarget+0xb68>)
 8006474:	ed93 7a00 	vldr	s14, [r3]
 8006478:	4b8e      	ldr	r3, [pc, #568]	; (80066b4 <CTRL_refTarget+0xb6c>)
 800647a:	edd3 7a00 	vldr	s15, [r3]
 800647e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006482:	4b8d      	ldr	r3, [pc, #564]	; (80066b8 <CTRL_refTarget+0xb70>)
 8006484:	edd3 7a00 	vldr	s15, [r3]
 8006488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800648c:	4b87      	ldr	r3, [pc, #540]	; (80066ac <CTRL_refTarget+0xb64>)
 800648e:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006492:	4b89      	ldr	r3, [pc, #548]	; (80066b8 <CTRL_refTarget+0xb70>)
 8006494:	ed93 7a00 	vldr	s14, [r3]
 8006498:	4b84      	ldr	r3, [pc, #528]	; (80066ac <CTRL_refTarget+0xb64>)
 800649a:	edd3 7a00 	vldr	s15, [r3]
 800649e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064a2:	4b84      	ldr	r3, [pc, #528]	; (80066b4 <CTRL_refTarget+0xb6c>)
 80064a4:	edd3 7a00 	vldr	s15, [r3]
 80064a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80064b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064b4:	4b81      	ldr	r3, [pc, #516]	; (80066bc <CTRL_refTarget+0xb74>)
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064be:	4b80      	ldr	r3, [pc, #512]	; (80066c0 <CTRL_refTarget+0xb78>)
 80064c0:	edc3 7a00 	vstr	s15, [r3]
 80064c4:	e061      	b.n	800658a <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 80064c6:	4b79      	ldr	r3, [pc, #484]	; (80066ac <CTRL_refTarget+0xb64>)
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80064ce:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <CTRL_refTarget+0xb60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a7b      	ldr	r2, [pc, #492]	; (80066c0 <CTRL_refTarget+0xb78>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	e058      	b.n	800658a <CTRL_refTarget+0xa42>
				}
			}
			/*CW*/
			else{
				if( f_TrgtAngleS < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 80064d8:	4b74      	ldr	r3, [pc, #464]	; (80066ac <CTRL_refTarget+0xb64>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa f85b 	bl	8000598 <__aeabi_f2d>
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	4b70      	ldr	r3, [pc, #448]	; (80066a8 <CTRL_refTarget+0xb60>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fa f854 	bl	8000598 <__aeabi_f2d>
 80064f0:	4680      	mov	r8, r0
 80064f2:	4689      	mov	r9, r1
 80064f4:	4b6e      	ldr	r3, [pc, #440]	; (80066b0 <CTRL_refTarget+0xb68>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fa f84d 	bl	8000598 <__aeabi_f2d>
 80064fe:	a366      	add	r3, pc, #408	; (adr r3, 8006698 <CTRL_refTarget+0xb50>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7fa f8a0 	bl	8000648 <__aeabi_dmul>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4640      	mov	r0, r8
 800650e:	4649      	mov	r1, r9
 8006510:	f7f9 fee4 	bl	80002dc <__adddf3>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4620      	mov	r0, r4
 800651a:	4629      	mov	r1, r5
 800651c:	f7fa fb06 	bl	8000b2c <__aeabi_dcmplt>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d029      	beq.n	800657a <CTRL_refTarget+0xa32>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006526:	4b62      	ldr	r3, [pc, #392]	; (80066b0 <CTRL_refTarget+0xb68>)
 8006528:	ed93 7a00 	vldr	s14, [r3]
 800652c:	4b61      	ldr	r3, [pc, #388]	; (80066b4 <CTRL_refTarget+0xb6c>)
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006536:	4b60      	ldr	r3, [pc, #384]	; (80066b8 <CTRL_refTarget+0xb70>)
 8006538:	edd3 7a00 	vldr	s15, [r3]
 800653c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006540:	4b5a      	ldr	r3, [pc, #360]	; (80066ac <CTRL_refTarget+0xb64>)
 8006542:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006546:	4b5c      	ldr	r3, [pc, #368]	; (80066b8 <CTRL_refTarget+0xb70>)
 8006548:	ed93 7a00 	vldr	s14, [r3]
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <CTRL_refTarget+0xb64>)
 800654e:	edd3 7a00 	vldr	s15, [r3]
 8006552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006556:	4b57      	ldr	r3, [pc, #348]	; (80066b4 <CTRL_refTarget+0xb6c>)
 8006558:	edd3 7a00 	vldr	s15, [r3]
 800655c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006560:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006564:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006568:	4b54      	ldr	r3, [pc, #336]	; (80066bc <CTRL_refTarget+0xb74>)
 800656a:	edd3 7a00 	vldr	s15, [r3]
 800656e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006572:	4b53      	ldr	r3, [pc, #332]	; (80066c0 <CTRL_refTarget+0xb78>)
 8006574:	edc3 7a00 	vstr	s15, [r3]
 8006578:	e007      	b.n	800658a <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 800657a:	4b4c      	ldr	r3, [pc, #304]	; (80066ac <CTRL_refTarget+0xb64>)
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8006582:	4b49      	ldr	r3, [pc, #292]	; (80066a8 <CTRL_refTarget+0xb60>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4e      	ldr	r2, [pc, #312]	; (80066c0 <CTRL_refTarget+0xb78>)
 8006588:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 800658a:	4b4e      	ldr	r3, [pc, #312]	; (80066c4 <CTRL_refTarget+0xb7c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fa f802 	bl	8000598 <__aeabi_f2d>
 8006594:	4604      	mov	r4, r0
 8006596:	460d      	mov	r5, r1
 8006598:	4b4b      	ldr	r3, [pc, #300]	; (80066c8 <CTRL_refTarget+0xb80>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f7f9 fffb 	bl	8000598 <__aeabi_f2d>
 80065a2:	4680      	mov	r8, r0
 80065a4:	4689      	mov	r9, r1
 80065a6:	4b3f      	ldr	r3, [pc, #252]	; (80066a4 <CTRL_refTarget+0xb5c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7f9 fff4 	bl	8000598 <__aeabi_f2d>
 80065b0:	a339      	add	r3, pc, #228	; (adr r3, 8006698 <CTRL_refTarget+0xb50>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f847 	bl	8000648 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4640      	mov	r0, r8
 80065c0:	4649      	mov	r1, r9
 80065c2:	f7f9 fe89 	bl	80002d8 <__aeabi_dsub>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7fa facb 	bl	8000b68 <__aeabi_dcmpgt>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <CTRL_refTarget+0xab2>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 80065d8:	4b32      	ldr	r3, [pc, #200]	; (80066a4 <CTRL_refTarget+0xb5c>)
 80065da:	ed93 7a00 	vldr	s14, [r3]
 80065de:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <CTRL_refTarget+0xb6c>)
 80065e0:	edd3 7a00 	vldr	s15, [r3]
 80065e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065e8:	4b38      	ldr	r3, [pc, #224]	; (80066cc <CTRL_refTarget+0xb84>)
 80065ea:	edd3 7a00 	vldr	s15, [r3]
 80065ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f2:	4b35      	ldr	r3, [pc, #212]	; (80066c8 <CTRL_refTarget+0xb80>)
 80065f4:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 80065f8:	e04a      	b.n	8006690 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 80065fa:	4b32      	ldr	r3, [pc, #200]	; (80066c4 <CTRL_refTarget+0xb7c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <CTRL_refTarget+0xb80>)
 8006600:	6013      	str	r3, [r2, #0]
			break;
 8006602:	e045      	b.n	8006690 <CTRL_refTarget+0xb48>

		/* escape(sura) */
		case CTRL_EXIT_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8006604:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <CTRL_refTarget+0xb58>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a26      	ldr	r2, [pc, #152]	; (80066a4 <CTRL_refTarget+0xb5c>)
 800660a:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = 0;
 800660c:	4b27      	ldr	r3, [pc, #156]	; (80066ac <CTRL_refTarget+0xb64>)
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
			if( f_TrgtDist <= (f_LastDist -f_TrgtSpeed * 0.001)){
 8006614:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <CTRL_refTarget+0xb80>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7f9 ffbd 	bl	8000598 <__aeabi_f2d>
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
 8006622:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <CTRL_refTarget+0xb7c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7f9 ffb6 	bl	8000598 <__aeabi_f2d>
 800662c:	4680      	mov	r8, r0
 800662e:	4689      	mov	r9, r1
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <CTRL_refTarget+0xb5c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 ffaf 	bl	8000598 <__aeabi_f2d>
 800663a:	a317      	add	r3, pc, #92	; (adr r3, 8006698 <CTRL_refTarget+0xb50>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7fa f802 	bl	8000648 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7f9 fe44 	bl	80002d8 <__aeabi_dsub>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4620      	mov	r0, r4
 8006656:	4629      	mov	r1, r5
 8006658:	f7fa fa72 	bl	8000b40 <__aeabi_dcmple>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d010      	beq.n	8006684 <CTRL_refTarget+0xb3c>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <CTRL_refTarget+0xb5c>)
 8006664:	ed93 7a00 	vldr	s14, [r3]
 8006668:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <CTRL_refTarget+0xb6c>)
 800666a:	edd3 7a00 	vldr	s15, [r3]
 800666e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <CTRL_refTarget+0xb84>)
 8006674:	edd3 7a00 	vldr	s15, [r3]
 8006678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <CTRL_refTarget+0xb80>)
 800667e:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;														// 目標距離
			}
			break;
 8006682:	e005      	b.n	8006690 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;														// 目標距離
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <CTRL_refTarget+0xb7c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <CTRL_refTarget+0xb80>)
 800668a:	6013      	str	r3, [r2, #0]
			break;
 800668c:	e000      	b.n	8006690 <CTRL_refTarget+0xb48>

		/* etc */
		default:
			break;
 800668e:	bf00      	nop
	}
}
 8006690:	bf00      	nop
 8006692:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006696:	bf00      	nop
 8006698:	d2f1a9fc 	.word	0xd2f1a9fc
 800669c:	3f50624d 	.word	0x3f50624d
 80066a0:	20000224 	.word	0x20000224
 80066a4:	20000230 	.word	0x20000230
 80066a8:	2000027c 	.word	0x2000027c
 80066ac:	2000026c 	.word	0x2000026c
 80066b0:	20000260 	.word	0x20000260
 80066b4:	2000021c 	.word	0x2000021c
 80066b8:	20000264 	.word	0x20000264
 80066bc:	20000278 	.word	0x20000278
 80066c0:	20000284 	.word	0x20000284
 80066c4:	20000248 	.word	0x20000248
 80066c8:	2000024c 	.word	0x2000024c
 80066cc:	20000244 	.word	0x20000244

080066d0 <CTRL_getFF_speed>:
		default:			return PARAM_NC;
	}
}

void CTRL_getFF_speed( float* p_err )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 80066d8:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <CTRL_getFF_speed+0x88>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b0e      	cmp	r3, #14
 80066de:	d82f      	bhi.n	8006740 <CTRL_getFF_speed+0x70>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <CTRL_getFF_speed+0x18>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	08006725 	.word	0x08006725
 80066ec:	0800674b 	.word	0x0800674b
 80066f0:	0800672f 	.word	0x0800672f
 80066f4:	08006725 	.word	0x08006725
 80066f8:	0800674b 	.word	0x0800674b
 80066fc:	0800672f 	.word	0x0800672f
 8006700:	0800672f 	.word	0x0800672f
 8006704:	08006725 	.word	0x08006725
 8006708:	0800674b 	.word	0x0800674b
 800670c:	0800672f 	.word	0x0800672f
 8006710:	0800674b 	.word	0x0800674b
 8006714:	08006725 	.word	0x08006725
 8006718:	0800674b 	.word	0x0800674b
 800671c:	0800672f 	.word	0x0800672f
 8006720:	0800674b 	.word	0x0800674b
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err = f_Acc;
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <CTRL_getFF_speed+0x8c>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
			break;
 800672c:	e00e      	b.n	800674c <CTRL_getFF_speed+0x7c>
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
		case CTRL_HIT_WALL:
			*p_err = f_Acc * (-1);
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <CTRL_getFF_speed+0x8c>)
 8006730:	edd3 7a00 	vldr	s15, [r3]
 8006734:	eef1 7a67 	vneg.f32	s15, s15
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800673e:	e005      	b.n	800674c <CTRL_getFF_speed+0x7c>

		// 加速以外 
		default:
			*p_err = 0;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006748:	e000      	b.n	800674c <CTRL_getFF_speed+0x7c>
			break;
 800674a:	bf00      	nop
	}

}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	200006ee 	.word	0x200006ee
 800675c:	20000220 	.word	0x20000220

08006760 <CTRL_getFF_angle>:

void CTRL_getFF_angle( float* p_err )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <CTRL_getFF_angle+0xc0>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b0e      	cmp	r3, #14
 800676e:	d84b      	bhi.n	8006808 <CTRL_getFF_angle+0xa8>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <CTRL_getFF_angle+0x18>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	080067b5 	.word	0x080067b5
 800677c:	08006813 	.word	0x08006813
 8006780:	080067df 	.word	0x080067df
 8006784:	080067b5 	.word	0x080067b5
 8006788:	08006813 	.word	0x08006813
 800678c:	080067df 	.word	0x080067df
 8006790:	08006809 	.word	0x08006809
 8006794:	080067b5 	.word	0x080067b5
 8006798:	08006813 	.word	0x08006813
 800679c:	080067df 	.word	0x080067df
 80067a0:	08006813 	.word	0x08006813
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	08006813 	.word	0x08006813
 80067ac:	080067df 	.word	0x080067df
 80067b0:	08006813 	.word	0x08006813
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err =FABS(f_AccAngleS);
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067b6:	edd3 7a00 	vldr	s15, [r3]
 80067ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c2:	db03      	blt.n	80067cc <CTRL_getFF_angle+0x6c>
 80067c4:	4b17      	ldr	r3, [pc, #92]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	e004      	b.n	80067d6 <CTRL_getFF_angle+0x76>
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067ce:	edd3 7a00 	vldr	s15, [r3]
 80067d2:	eef1 7a67 	vneg.f32	s15, s15
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80067dc:	e01a      	b.n	8006814 <CTRL_getFF_angle+0xb4>

		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
			*p_err = FABS(f_AccAngleS) *(-1);
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067e0:	edd3 7a00 	vldr	s15, [r3]
 80067e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	db05      	blt.n	80067fa <CTRL_getFF_angle+0x9a>
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067f0:	edd3 7a00 	vldr	s15, [r3]
 80067f4:	eef1 7a67 	vneg.f32	s15, s15
 80067f8:	e002      	b.n	8006800 <CTRL_getFF_angle+0xa0>
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <CTRL_getFF_angle+0xc4>)
 80067fc:	edd3 7a00 	vldr	s15, [r3]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006806:	e005      	b.n	8006814 <CTRL_getFF_angle+0xb4>

		// 加速以外 
		default:
			*p_err = 0;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006810:	e000      	b.n	8006814 <CTRL_getFF_angle+0xb4>
			break;
 8006812:	bf00      	nop
	}

}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	200006ee 	.word	0x200006ee
 8006824:	20000260 	.word	0x20000260

08006828 <CTRL_getSpeedFB>:

void CTRL_getSpeedFB( float* p_err )
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	float		f_speedErr;					// [速度制御] 速度偏差
	float		f_kp = 0.0f;
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
	float		f_ki = 0.0f;
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
	float		f_kd = 0.0f;
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
	/* 速度制御 */
	f_speedErr  = f_TrgtSpeed - f_NowSpeed;					// 速度偏差[mm/s]
 8006842:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <CTRL_getSpeedFB+0xbc>)
 8006844:	ed93 7a00 	vldr	s14, [r3]
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <CTRL_getSpeedFB+0xc0>)
 800684a:	edd3 7a00 	vldr	s15, [r3]
 800684e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006852:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_speed_kp;
 8006856:	4b25      	ldr	r3, [pc, #148]	; (80068ec <CTRL_getSpeedFB+0xc4>)
 8006858:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_speed_ki;
 800685a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800685e:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_speed_kd;
 8006860:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <CTRL_getSpeedFB+0xc8>)
 8006862:	60fb      	str	r3, [r7, #12]

	/* I成分演算 */
	f_SpeedErrSum += f_speedErr;// * f_ki;			// I成分更新
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <CTRL_getSpeedFB+0xcc>)
 8006866:	ed93 7a00 	vldr	s14, [r3]
 800686a:	edd7 7a02 	vldr	s15, [r7, #8]
 800686e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <CTRL_getSpeedFB+0xcc>)
 8006874:	edc3 7a00 	vstr	s15, [r3]
	if( f_SpeedErrSum > 10000.0 ){
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <CTRL_getSpeedFB+0xcc>)
 800687a:	edd3 7a00 	vldr	s15, [r3]
 800687e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80068f8 <CTRL_getSpeedFB+0xd0>
 8006882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688a:	dd02      	ble.n	8006892 <CTRL_getSpeedFB+0x6a>
		f_SpeedErrSum = 10000.0;			// 上限リミッター
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <CTRL_getSpeedFB+0xcc>)
 800688e:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <CTRL_getSpeedFB+0xd4>)
 8006890:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_speedErr * f_kp + f_SpeedErrSum* f_ki + ( f_speedErr - f_ErrSpeedBuf ) * f_kd;				// PI制御量算出
 8006892:	ed97 7a02 	vldr	s14, [r7, #8]
 8006896:	edd7 7a05 	vldr	s15, [r7, #20]
 800689a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <CTRL_getSpeedFB+0xcc>)
 80068a0:	edd3 6a00 	vldr	s13, [r3]
 80068a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80068a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b0:	4b13      	ldr	r3, [pc, #76]	; (8006900 <CTRL_getSpeedFB+0xd8>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80068ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068be:	edd7 7a03 	vldr	s15, [r7, #12]
 80068c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	edc3 7a00 	vstr	s15, [r3]

	f_ErrSpeedBuf = f_speedErr;		// 偏差をバッファリング	
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <CTRL_getSpeedFB+0xd8>)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6013      	str	r3, [r2, #0]
/*	if((f_speedErr>1.5)||(f_speedErr<-1.5)){
		Failsafe_flag();
	}
*/
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000230 	.word	0x20000230
 80068e8:	2000022c 	.word	0x2000022c
 80068ec:	420c0000 	.word	0x420c0000
 80068f0:	3e99999a 	.word	0x3e99999a
 80068f4:	20000238 	.word	0x20000238
 80068f8:	461c4000 	.word	0x461c4000
 80068fc:	461c4000 	.word	0x461c4000
 8006900:	20000234 	.word	0x20000234

08006904 <CTRL_getAngleSpeedFB>:

void CTRL_getAngleSpeedFB( float* p_err )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	ed2d 8b02 	vpush	{d8}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	float f_err;					// [入力] ジャイロセンサーエラー値､
	float f_kp = 0.0f;				// 比例ゲイン
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
	float f_ki = 0.0f;
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
	float f_kd = 0.0f;
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]


	f_err = f_TrgtAngleS - GYRO_getSpeedErr();			// 目標角度 - ジャイロセンサ[deg/s]
 8006922:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <CTRL_getAngleSpeedFB+0x10c>)
 8006924:	ed93 8a00 	vldr	s16, [r3]
 8006928:	f001 ff96 	bl	8008858 <GYRO_getSpeedErr>
 800692c:	eef0 7a40 	vmov.f32	s15, s0
 8006930:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006934:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_angleS_kp;
 8006938:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <CTRL_getAngleSpeedFB+0x110>)
 800693a:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_angleS_ki;
 800693c:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <CTRL_getAngleSpeedFB+0x114>)
 800693e:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_angleS_kd;
 8006940:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <CTRL_getAngleSpeedFB+0x118>)
 8006942:	60fb      	str	r3, [r7, #12]

	f_AngleSErrSum += f_err;//*f_ki;
 8006944:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 8006946:	ed93 7a00 	vldr	s14, [r3]
 800694a:	edd7 7a02 	vldr	s15, [r7, #8]
 800694e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006952:	4b33      	ldr	r3, [pc, #204]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 8006954:	edc3 7a00 	vstr	s15, [r3]

	if(f_AngleSErrSum > 1000.0){
 8006958:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006a24 <CTRL_getAngleSpeedFB+0x120>
 8006962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	dd03      	ble.n	8006974 <CTRL_getAngleSpeedFB+0x70>
		f_AngleSErrSum = 1000.0;			//上限リミッター
 800696c:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 800696e:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <CTRL_getAngleSpeedFB+0x124>)
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e00c      	b.n	800698e <CTRL_getAngleSpeedFB+0x8a>
	}
	else if(f_AngleSErrSum <-1000.0){
 8006974:	4b2a      	ldr	r3, [pc, #168]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006a2c <CTRL_getAngleSpeedFB+0x128>
 800697e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006986:	d502      	bpl.n	800698e <CTRL_getAngleSpeedFB+0x8a>
		f_AngleSErrSum = -1000.0;
 8006988:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 800698a:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <CTRL_getAngleSpeedFB+0x12c>)
 800698c:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_err * f_kp + f_AngleSErrSum*f_ki + ( f_err - f_ErrAngleSBuf ) * f_kd;		// PID制御
 800698e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006992:	edd7 7a05 	vldr	s15, [r7, #20]
 8006996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800699a:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <CTRL_getAngleSpeedFB+0x11c>)
 800699c:	edd3 6a00 	vldr	s13, [r3]
 80069a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80069a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069ac:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <CTRL_getAngleSpeedFB+0x130>)
 80069ae:	edd3 7a00 	vldr	s15, [r3]
 80069b2:	edd7 6a02 	vldr	s13, [r7, #8]
 80069b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80069ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80069be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	edc3 7a00 	vstr	s15, [r3]

	f_ErrAngleSBuf = f_err;		// 偏差をバッファリング	
 80069cc:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <CTRL_getAngleSpeedFB+0x130>)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6013      	str	r3, [r2, #0]
	if((f_err>30.0)||(f_err<-30.0)){
 80069d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80069d6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80069da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e2:	dc09      	bgt.n	80069f8 <CTRL_getAngleSpeedFB+0xf4>
 80069e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80069e8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80069ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f4:	d400      	bmi.n	80069f8 <CTRL_getAngleSpeedFB+0xf4>
		if(!(en_Type == CTRL_HIT_WALL)){
			Failsafe_flag();
		}
	}
}
 80069f6:	e005      	b.n	8006a04 <CTRL_getAngleSpeedFB+0x100>
		if(!(en_Type == CTRL_HIT_WALL)){
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <CTRL_getAngleSpeedFB+0x134>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b06      	cmp	r3, #6
 80069fe:	d001      	beq.n	8006a04 <CTRL_getAngleSpeedFB+0x100>
			Failsafe_flag();
 8006a00:	f001 fc64 	bl	80082cc <Failsafe_flag>
}
 8006a04:	bf00      	nop
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	ecbd 8b02 	vpop	{d8}
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	2000026c 	.word	0x2000026c
 8006a14:	42be0000 	.word	0x42be0000
 8006a18:	40c00000 	.word	0x40c00000
 8006a1c:	3e4ccccd 	.word	0x3e4ccccd
 8006a20:	20000274 	.word	0x20000274
 8006a24:	447a0000 	.word	0x447a0000
 8006a28:	447a0000 	.word	0x447a0000
 8006a2c:	c47a0000 	.word	0xc47a0000
 8006a30:	c47a0000 	.word	0xc47a0000
 8006a34:	20000270 	.word	0x20000270
 8006a38:	200006ee 	.word	0x200006ee

08006a3c <CTRL_getAngleFB>:

void CTRL_getAngleFB( float* p_err )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	ed2d 8b02 	vpush	{d8}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
    float f_err;                    // [入力] 角度偏差[deg]
    float f_kp = 0.0f;              // 比例ゲイン
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
    float f_ki = 0.0f;
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]

    f_err = f_TrgtAngle - GYRO_getNowAngle();          // 現在角度[deg]
 8006a54:	4b26      	ldr	r3, [pc, #152]	; (8006af0 <CTRL_getAngleFB+0xb4>)
 8006a56:	ed93 8a00 	vldr	s16, [r3]
 8006a5a:	f001 ff4b 	bl	80088f4 <GYRO_getNowAngle>
 8006a5e:	eef0 7a40 	vmov.f32	s15, s0
 8006a62:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006a66:	edc7 7a03 	vstr	s15, [r7, #12]
    f_kp = f_FB_angle_kp;
 8006a6a:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <CTRL_getAngleFB+0xb8>)
 8006a6c:	617b      	str	r3, [r7, #20]
    f_ki = f_FB_angle_ki;
 8006a6e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8006a72:	613b      	str	r3, [r7, #16]
    f_AngleErrSum += f_err;//*f_ki;
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006a76:	ed93 7a00 	vldr	s14, [r3]
 8006a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a82:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006a84:	edc3 7a00 	vstr	s15, [r3]
    if(f_AngleErrSum > 100.0){
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006a8a:	edd3 7a00 	vldr	s15, [r3]
 8006a8e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006afc <CTRL_getAngleFB+0xc0>
 8006a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	dd03      	ble.n	8006aa4 <CTRL_getAngleFB+0x68>
        f_AngleErrSum = 100.0;           //上限リミッター
 8006a9c:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <CTRL_getAngleFB+0xc4>)
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e00c      	b.n	8006abe <CTRL_getAngleFB+0x82>
    }
    else if(f_AngleErrSum <-100.0){
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006aa6:	edd3 7a00 	vldr	s15, [r3]
 8006aaa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006b04 <CTRL_getAngleFB+0xc8>
 8006aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	d502      	bpl.n	8006abe <CTRL_getAngleFB+0x82>
        f_AngleErrSum = -100.0;
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006aba:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <CTRL_getAngleFB+0xcc>)
 8006abc:	601a      	str	r2, [r3, #0]
    }
    *p_err = f_err * f_kp + f_AngleErrSum*f_ki;        // PID制御｡
 8006abe:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <CTRL_getAngleFB+0xbc>)
 8006acc:	edd3 6a00 	vldr	s13, [r3]
 8006ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	edc3 7a00 	vstr	s15, [r3]

}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	ecbd 8b02 	vpop	{d8}
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000284 	.word	0x20000284
 8006af4:	3ee66666 	.word	0x3ee66666
 8006af8:	20000288 	.word	0x20000288
 8006afc:	42c80000 	.word	0x42c80000
 8006b00:	42c80000 	.word	0x42c80000
 8006b04:	c2c80000 	.word	0xc2c80000
 8006b08:	c2c80000 	.word	0xc2c80000

08006b0c <CTRL_getSenFB>:


void CTRL_getSenFB( float* p_err )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	float f_err 	= 0;
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
	float f_kp 		= 0.0f;				// 比例ゲイン
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
	float f_kd 		= 0.0f;				// 微分ゲイン
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	60bb      	str	r3, [r7, #8]

	/* 直進時 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006b2c:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00f      	beq.n	8006b54 <CTRL_getSenFB+0x48>
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d00b      	beq.n	8006b54 <CTRL_getSenFB+0x48>
 8006b3c:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d007      	beq.n	8006b54 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006b44:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006b48:	2b0a      	cmp	r3, #10
 8006b4a:	d003      	beq.n	8006b54 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b0e      	cmp	r3, #14
 8006b52:	d128      	bne.n	8006ba6 <CTRL_getSenFB+0x9a>

		f_kp = f_FB_wall_kp;
 8006b54:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <CTRL_getSenFB+0xdc>)
 8006b56:	613b      	str	r3, [r7, #16]
		f_kd = f_FB_wall_kd;
 8006b58:	4b24      	ldr	r3, [pc, #144]	; (8006bec <CTRL_getSenFB+0xe0>)
 8006b5a:	60fb      	str	r3, [r7, #12]

		/* 偏差取得 */
		DIST_getErr( &l_WallErr );
 8006b5c:	4824      	ldr	r0, [pc, #144]	; (8006bf0 <CTRL_getSenFB+0xe4>)
 8006b5e:	f006 fa23 	bl	800cfa8 <DIST_getErr>
		f_err = (float)l_WallErr;
 8006b62:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <CTRL_getSenFB+0xe4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b6e:	edc7 7a05 	vstr	s15, [r7, #20]
//		templog2 = f_err;
		/* PD制御 */

		f_ErrDistBuf = f_err;		// 偏差をバッファリング
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <CTRL_getSenFB+0xe8>)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6013      	str	r3, [r2, #0]

		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
 8006b78:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <CTRL_getSenFB+0xe8>)
 8006b86:	edd3 7a00 	vldr	s15, [r3]
 8006b8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8006b8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	edc3 7a00 	vstr	s15, [r3]

//		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
		*p_err = f_err;
	}

}
 8006ba4:	e019      	b.n	8006bda <CTRL_getSenFB+0xce>
	else if( ( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC ) ){
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d007      	beq.n	8006bbe <CTRL_getSenFB+0xb2>
 8006bae:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d003      	beq.n	8006bbe <CTRL_getSenFB+0xb2>
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <CTRL_getSenFB+0xd8>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d10d      	bne.n	8006bda <CTRL_getSenFB+0xce>
		DIST_getErrSkew( &l_WallErr );
 8006bbe:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <CTRL_getSenFB+0xe4>)
 8006bc0:	f006 fb88 	bl	800d2d4 <DIST_getErrSkew>
		f_err = (float)l_WallErr;
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <CTRL_getSenFB+0xe4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bd0:	edc7 7a05 	vstr	s15, [r7, #20]
		*p_err = f_err;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	601a      	str	r2, [r3, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	200006ee 	.word	0x200006ee
 8006be8:	3f266666 	.word	0x3f266666
 8006bec:	3e4ccccd 	.word	0x3e4ccccd
 8006bf0:	2000028c 	.word	0x2000028c
 8006bf4:	20000290 	.word	0x20000290

08006bf8 <CTRL_get_frontwall_v_FB>:

void CTRL_get_frontwall_v_FB( float* p_err)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b089      	sub	sp, #36	; 0x24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	float f_v_err 	= 0;
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	61fb      	str	r3, [r7, #28]
	float f_omega_err 	= 0;
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
	float f_v_kp 		= 0.0f;				// 比例ゲイン
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
	float f_v_ki 		= 0.0f;				// 比例ゲイン
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
	float f_v_kd 		= 0.0f;				// 微分ゲイン
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	60bb      	str	r3, [r7, #8]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 8006c24:	4b31      	ldr	r3, [pc, #196]	; (8006cec <CTRL_get_frontwall_v_FB+0xf4>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	d15a      	bne.n	8006ce2 <CTRL_get_frontwall_v_FB+0xea>

		f_v_kp = f_FB_front_wall_v_kp;
 8006c2c:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <CTRL_get_frontwall_v_FB+0xf8>)
 8006c2e:	617b      	str	r3, [r7, #20]
		f_v_ki = f_FB_front_wall_v_ki;
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
		f_v_kd = f_FB_front_wall_v_kd;
 8006c36:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <CTRL_get_frontwall_v_FB+0xfc>)
 8006c38:	60fb      	str	r3, [r7, #12]

		if( en_Type == CTRL_FRONT_WALL){
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <CTRL_get_frontwall_v_FB+0xf4>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b0f      	cmp	r3, #15
 8006c40:	d14f      	bne.n	8006ce2 <CTRL_get_frontwall_v_FB+0xea>
			l_frontSen_vErr = ((L_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_L_FRONT )) + ((R_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 8006c42:	2001      	movs	r0, #1
 8006c44:	f006 f998 	bl	800cf78 <DIST_getNowVal>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f5c3 7408 	rsb	r4, r3, #544	; 0x220
 8006c4e:	3401      	adds	r4, #1
 8006c50:	2000      	movs	r0, #0
 8006c52:	f006 f991 	bl	800cf78 <DIST_getNowVal>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 8006c5c:	3303      	adds	r3, #3
 8006c5e:	4423      	add	r3, r4
 8006c60:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <CTRL_get_frontwall_v_FB+0x100>)
 8006c62:	6013      	str	r3, [r2, #0]
			f_v_err = (float)l_frontSen_vErr;
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <CTRL_get_frontwall_v_FB+0x100>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c70:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_vBuf = f_v_err;		// 偏差をバッファリング
 8006c74:	4a21      	ldr	r2, [pc, #132]	; (8006cfc <CTRL_get_frontwall_v_FB+0x104>)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	6013      	str	r3, [r2, #0]

			*p_err = f_v_err * f_v_kp + ( f_v_err - f_ErrFrontSen_vBuf ) * f_v_kd;		// PD制御
 8006c7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <CTRL_get_frontwall_v_FB+0x104>)
 8006c88:	edd3 7a00 	vldr	s15, [r3]
 8006c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	edc3 7a00 	vstr	s15, [r3]
			if(*p_err < - 0.5)*p_err = -0.5;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	edd3 7a00 	vldr	s15, [r3]
 8006cac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8006cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	d504      	bpl.n	8006cc4 <CTRL_get_frontwall_v_FB+0xcc>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8006cc0:	601a      	str	r2, [r3, #0]
			else if(*p_err > 0.5)*p_err = 0.5;
		}
	}

}
 8006cc2:	e00e      	b.n	8006ce2 <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	edd3 7a00 	vldr	s15, [r3]
 8006cca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd6:	dc00      	bgt.n	8006cda <CTRL_get_frontwall_v_FB+0xe2>
}
 8006cd8:	e003      	b.n	8006ce2 <CTRL_get_frontwall_v_FB+0xea>
			else if(*p_err > 0.5)*p_err = 0.5;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3724      	adds	r7, #36	; 0x24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200006ee 	.word	0x200006ee
 8006cf0:	3a83126f 	.word	0x3a83126f
 8006cf4:	38d1b717 	.word	0x38d1b717
 8006cf8:	20000294 	.word	0x20000294
 8006cfc:	2000029c 	.word	0x2000029c

08006d00 <CTRL_get_frontwall_omega_FB>:

void CTRL_get_frontwall_omega_FB( float* p_err)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	float f_omega_err 	= 0;
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	61fb      	str	r3, [r7, #28]
	
	float f_omega_kp 		= 0.0f;				// 比例ゲイン
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
	float f_omega_ki 		= 0.0f;				// 比例ゲイン
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
	float f_omega_kd 		= 0.0f;				// 微分ゲイン
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]
	float gyro		= 0.0f;
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]

	/* 前壁制御 */
	if( en_Type == CTRL_FRONT_WALL ){
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <CTRL_get_frontwall_omega_FB+0xd0>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	d14c      	bne.n	8006dc8 <CTRL_get_frontwall_omega_FB+0xc8>
		f_omega_kp = f_FB_front_wall_omega_kp;
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <CTRL_get_frontwall_omega_FB+0xd4>)
 8006d30:	61bb      	str	r3, [r7, #24]
		f_omega_ki = f_FB_front_wall_omega_ki;
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
		f_omega_kd = f_FB_front_wall_omega_kd;
 8006d38:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <CTRL_get_frontwall_omega_FB+0xd8>)
 8006d3a:	613b      	str	r3, [r7, #16]

		if( en_Type == CTRL_FRONT_WALL){	
 8006d3c:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <CTRL_get_frontwall_omega_FB+0xd0>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d141      	bne.n	8006dc8 <CTRL_get_frontwall_omega_FB+0xc8>
			l_frontSen_omegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_minus)) + 
 8006d44:	2001      	movs	r0, #1
 8006d46:	f006 f917 	bl	800cf78 <DIST_getNowVal>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f2a3 2421 	subw	r4, r3, #545	; 0x221
									((R_FRONT_REF+FRONT_WALL_minus) - DIST_getNowVal( DIST_SEN_R_FRONT ));
 8006d50:	2000      	movs	r0, #0
 8006d52:	f006 f911 	bl	800cf78 <DIST_getNowVal>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 8006d5c:	3303      	adds	r3, #3
			l_frontSen_omegaErr = (DIST_getNowVal( DIST_SEN_L_FRONT )- (L_FRONT_REF+FRONT_WALL_minus)) + 
 8006d5e:	4423      	add	r3, r4
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d62:	6013      	str	r3, [r2, #0]
			if(l_frontSen_omegaErr > 500)l_frontSen_omegaErr = 500;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d6c:	dd03      	ble.n	8006d76 <CTRL_get_frontwall_omega_FB+0x76>
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006d74:	601a      	str	r2, [r3, #0]
			if(l_frontSen_omegaErr < -500)l_frontSen_omegaErr = -500;
 8006d76:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006d7e:	da02      	bge.n	8006d86 <CTRL_get_frontwall_omega_FB+0x86>
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <CTRL_get_frontwall_omega_FB+0xe0>)
 8006d84:	601a      	str	r2, [r3, #0]
			f_omega_err = (float)l_frontSen_omegaErr;
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <CTRL_get_frontwall_omega_FB+0xdc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d92:	edc7 7a07 	vstr	s15, [r7, #28]
	
			/* PD制御 */
			f_ErrFrontSen_omegaBuf = f_omega_err;		// 偏差をバッファリング
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <CTRL_get_frontwall_omega_FB+0xe4>)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	6013      	str	r3, [r2, #0]

			*p_err =f_omega_err * f_omega_kp + ( f_omega_err - f_ErrFrontSen_omegaBuf ) * f_omega_kd;		// PD制御
 8006d9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006da0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <CTRL_get_frontwall_omega_FB+0xe4>)
 8006daa:	edd3 7a00 	vldr	s15, [r3]
 8006dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006db6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	edc3 7a00 	vstr	s15, [r3]
		}
	}

}
 8006dc8:	bf00      	nop
 8006dca:	3724      	adds	r7, #36	; 0x24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd90      	pop	{r4, r7, pc}
 8006dd0:	200006ee 	.word	0x200006ee
 8006dd4:	3f666666 	.word	0x3f666666
 8006dd8:	3e99999a 	.word	0x3e99999a
 8006ddc:	20000298 	.word	0x20000298
 8006de0:	fffffe0c 	.word	0xfffffe0c
 8006de4:	200002a0 	.word	0x200002a0

08006de8 <CTRL_getFloorFriction>:

void CTRL_getFloorFriction(float* p_err){
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	float tread;
	if(( en_Type == CTRL_ACC_TRUN) || (en_Type == CTRL_CONST_TRUN)||( en_Type == CTRL_DEC_TRUN )){
 8006df0:	4bb3      	ldr	r3, [pc, #716]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b07      	cmp	r3, #7
 8006df6:	d007      	beq.n	8006e08 <CTRL_getFloorFriction+0x20>
 8006df8:	4bb1      	ldr	r3, [pc, #708]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d003      	beq.n	8006e08 <CTRL_getFloorFriction+0x20>
 8006e00:	4baf      	ldr	r3, [pc, #700]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b09      	cmp	r3, #9
 8006e06:	d102      	bne.n	8006e0e <CTRL_getFloorFriction+0x26>
		tread = TREAD_imagin;
 8006e08:	4bae      	ldr	r3, [pc, #696]	; (80070c4 <CTRL_getFloorFriction+0x2dc>)
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e001      	b.n	8006e12 <CTRL_getFloorFriction+0x2a>
	}else{
		tread = TREAD;
 8006e0e:	4bae      	ldr	r3, [pc, #696]	; (80070c8 <CTRL_getFloorFriction+0x2e0>)
 8006e10:	60fb      	str	r3, [r7, #12]
	}
//	*p_err = 0;
	if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8006e12:	4bab      	ldr	r3, [pc, #684]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b0b      	cmp	r3, #11
 8006e18:	d008      	beq.n	8006e2c <CTRL_getFloorFriction+0x44>
 8006e1a:	4ba9      	ldr	r3, [pc, #676]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d004      	beq.n	8006e2c <CTRL_getFloorFriction+0x44>
 8006e22:	4ba7      	ldr	r3, [pc, #668]	; (80070c0 <CTRL_getFloorFriction+0x2d8>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b0d      	cmp	r3, #13
 8006e28:	f040 80b7 	bne.w	8006f9a <CTRL_getFloorFriction+0x1b2>
		if(f_TrgtAngleS<0){
 8006e2c:	4ba7      	ldr	r3, [pc, #668]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006e2e:	edd3 7a00 	vldr	s15, [r3]
 8006e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3a:	d550      	bpl.n	8006ede <CTRL_getFloorFriction+0xf6>
			if(Get_NowAngle() > -0.002)
 8006e3c:	f7fe fc2e 	bl	800569c <Get_NowAngle>
 8006e40:	ee10 3a10 	vmov	r3, s0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fba7 	bl	8000598 <__aeabi_f2d>
 8006e4a:	a393      	add	r3, pc, #588	; (adr r3, 8007098 <CTRL_getFloorFriction+0x2b0>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fe8a 	bl	8000b68 <__aeabi_dcmpgt>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03d      	beq.n	8006ed6 <CTRL_getFloorFriction+0xee>
				*p_err = (-1)*0.38/1000.0 + (-1)*0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/2300.0;
 8006e5a:	4b9c      	ldr	r3, [pc, #624]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006e5c:	edd3 7a00 	vldr	s15, [r3]
 8006e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e68:	db03      	blt.n	8006e72 <CTRL_getFloorFriction+0x8a>
 8006e6a:	4b98      	ldr	r3, [pc, #608]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006e6c:	edd3 7a00 	vldr	s15, [r3]
 8006e70:	e004      	b.n	8006e7c <CTRL_getFloorFriction+0x94>
 8006e72:	4b96      	ldr	r3, [pc, #600]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006e74:	edd3 7a00 	vldr	s15, [r3]
 8006e78:	eef1 7a67 	vneg.f32	s15, s15
 8006e7c:	4b93      	ldr	r3, [pc, #588]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006e7e:	ed93 7a00 	vldr	s14, [r3]
 8006e82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e86:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e96:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80070d0 <CTRL_getFloorFriction+0x2e8>
 8006e9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e9e:	ee16 0a90 	vmov	r0, s13
 8006ea2:	f7f9 fb79 	bl	8000598 <__aeabi_f2d>
 8006ea6:	a37e      	add	r3, pc, #504	; (adr r3, 80070a0 <CTRL_getFloorFriction+0x2b8>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 fcf6 	bl	800089c <__aeabi_ddiv>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	a37b      	add	r3, pc, #492	; (adr r3, 80070a8 <CTRL_getFloorFriction+0x2c0>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fa0b 	bl	80002d8 <__aeabi_dsub>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7f9 feb5 	bl	8000c38 <__aeabi_d2f>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006ed4:	e13f      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
	//			*p_err = (-1)*0.35/1000.0 + (-1)*0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = (-1)*0.37/1000.0;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a7e      	ldr	r2, [pc, #504]	; (80070d4 <CTRL_getFloorFriction+0x2ec>)
 8006eda:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006edc:	e13b      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
			}
		else if(f_TrgtAngleS>0){
 8006ede:	4b7b      	ldr	r3, [pc, #492]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006ee0:	edd3 7a00 	vldr	s15, [r3]
 8006ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eec:	dd50      	ble.n	8006f90 <CTRL_getFloorFriction+0x1a8>
			if(Get_NowAngle() < 0.002)
 8006eee:	f7fe fbd5 	bl	800569c <Get_NowAngle>
 8006ef2:	ee10 3a10 	vmov	r3, s0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 fb4e 	bl	8000598 <__aeabi_f2d>
 8006efc:	a36c      	add	r3, pc, #432	; (adr r3, 80070b0 <CTRL_getFloorFriction+0x2c8>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f7f9 fe13 	bl	8000b2c <__aeabi_dcmplt>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d03d      	beq.n	8006f88 <CTRL_getFloorFriction+0x1a0>
				*p_err = 0.38/1000.0 + 0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/2300.0;
 8006f0c:	4b6f      	ldr	r3, [pc, #444]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006f0e:	edd3 7a00 	vldr	s15, [r3]
 8006f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	db03      	blt.n	8006f24 <CTRL_getFloorFriction+0x13c>
 8006f1c:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006f1e:	edd3 7a00 	vldr	s15, [r3]
 8006f22:	e004      	b.n	8006f2e <CTRL_getFloorFriction+0x146>
 8006f24:	4b69      	ldr	r3, [pc, #420]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006f26:	edd3 7a00 	vldr	s15, [r3]
 8006f2a:	eef1 7a67 	vneg.f32	s15, s15
 8006f2e:	4b67      	ldr	r3, [pc, #412]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006f30:	ed93 7a00 	vldr	s14, [r3]
 8006f34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f48:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80070d0 <CTRL_getFloorFriction+0x2e8>
 8006f4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f50:	ee16 0a90 	vmov	r0, s13
 8006f54:	f7f9 fb20 	bl	8000598 <__aeabi_f2d>
 8006f58:	a351      	add	r3, pc, #324	; (adr r3, 80070a0 <CTRL_getFloorFriction+0x2b8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fc9d 	bl	800089c <__aeabi_ddiv>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	a34f      	add	r3, pc, #316	; (adr r3, 80070a8 <CTRL_getFloorFriction+0x2c0>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f9b4 	bl	80002dc <__adddf3>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f7f9 fe5c 	bl	8000c38 <__aeabi_d2f>
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006f86:	e0e6      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
	//			*p_err = 0.35/1000.0 + 0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = 0.37/1000.0;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a53      	ldr	r2, [pc, #332]	; (80070d8 <CTRL_getFloorFriction+0x2f0>)
 8006f8c:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006f8e:	e0e2      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
		}else{
			*p_err = 0;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006f98:	e0dd      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
		}
	}
	else{
		if(f_TrgtAngleS<0){
 8006f9a:	4b4c      	ldr	r3, [pc, #304]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006f9c:	edd3 7a00 	vldr	s15, [r3]
 8006fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	d550      	bpl.n	800704c <CTRL_getFloorFriction+0x264>
			if(Get_NowAngle() > -0.002)
 8006faa:	f7fe fb77 	bl	800569c <Get_NowAngle>
 8006fae:	ee10 3a10 	vmov	r3, s0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7f9 faf0 	bl	8000598 <__aeabi_f2d>
 8006fb8:	a337      	add	r3, pc, #220	; (adr r3, 8007098 <CTRL_getFloorFriction+0x2b0>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f7f9 fdd3 	bl	8000b68 <__aeabi_dcmpgt>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03d      	beq.n	8007044 <CTRL_getFloorFriction+0x25c>
				*p_err = (-1)*0.43/1000.0 + (-1)*0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/740.0;
 8006fc8:	4b40      	ldr	r3, [pc, #256]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006fca:	edd3 7a00 	vldr	s15, [r3]
 8006fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	db03      	blt.n	8006fe0 <CTRL_getFloorFriction+0x1f8>
 8006fd8:	4b3c      	ldr	r3, [pc, #240]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006fda:	edd3 7a00 	vldr	s15, [r3]
 8006fde:	e004      	b.n	8006fea <CTRL_getFloorFriction+0x202>
 8006fe0:	4b3a      	ldr	r3, [pc, #232]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006fe2:	edd3 7a00 	vldr	s15, [r3]
 8006fe6:	eef1 7a67 	vneg.f32	s15, s15
 8006fea:	4b38      	ldr	r3, [pc, #224]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 8006fec:	ed93 7a00 	vldr	s14, [r3]
 8006ff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ffc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007004:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80070d0 <CTRL_getFloorFriction+0x2e8>
 8007008:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800700c:	ee16 0a90 	vmov	r0, s13
 8007010:	f7f9 fac2 	bl	8000598 <__aeabi_f2d>
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	4b30      	ldr	r3, [pc, #192]	; (80070dc <CTRL_getFloorFriction+0x2f4>)
 800701a:	f7f9 fc3f 	bl	800089c <__aeabi_ddiv>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4610      	mov	r0, r2
 8007024:	4619      	mov	r1, r3
 8007026:	a324      	add	r3, pc, #144	; (adr r3, 80070b8 <CTRL_getFloorFriction+0x2d0>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	f7f9 f954 	bl	80002d8 <__aeabi_dsub>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4610      	mov	r0, r2
 8007036:	4619      	mov	r1, r3
 8007038:	f7f9 fdfe 	bl	8000c38 <__aeabi_d2f>
 800703c:	4602      	mov	r2, r0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
/*	if(*p_err>0.0014)
		*p_err = 0.0014;
	if(*p_err<-0.0014)
		*p_err = -0.0014;
*/
}
 8007042:	e088      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
				*p_err = (-1)*0.37/1000.0;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a23      	ldr	r2, [pc, #140]	; (80070d4 <CTRL_getFloorFriction+0x2ec>)
 8007048:	601a      	str	r2, [r3, #0]
}
 800704a:	e084      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
		else if(f_TrgtAngleS>0){
 800704c:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 800704e:	edd3 7a00 	vldr	s15, [r3]
 8007052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	dd77      	ble.n	800714c <CTRL_getFloorFriction+0x364>
			if(Get_NowAngle() < 0.002)
 800705c:	f7fe fb1e 	bl	800569c <Get_NowAngle>
 8007060:	ee10 3a10 	vmov	r3, s0
 8007064:	4618      	mov	r0, r3
 8007066:	f7f9 fa97 	bl	8000598 <__aeabi_f2d>
 800706a:	a311      	add	r3, pc, #68	; (adr r3, 80070b0 <CTRL_getFloorFriction+0x2c8>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 fd5c 	bl	8000b2c <__aeabi_dcmplt>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d064      	beq.n	8007144 <CTRL_getFloorFriction+0x35c>
				*p_err = 0.43/1000.0 + 0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/740.0;
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 800707c:	edd3 7a00 	vldr	s15, [r3]
 8007080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	db2a      	blt.n	80070e0 <CTRL_getFloorFriction+0x2f8>
 800708a:	4b10      	ldr	r3, [pc, #64]	; (80070cc <CTRL_getFloorFriction+0x2e4>)
 800708c:	edd3 7a00 	vldr	s15, [r3]
 8007090:	e02b      	b.n	80070ea <CTRL_getFloorFriction+0x302>
 8007092:	bf00      	nop
 8007094:	f3af 8000 	nop.w
 8007098:	d2f1a9fc 	.word	0xd2f1a9fc
 800709c:	bf60624d 	.word	0xbf60624d
 80070a0:	00000000 	.word	0x00000000
 80070a4:	40a1f800 	.word	0x40a1f800
 80070a8:	c13fd0d0 	.word	0xc13fd0d0
 80070ac:	3f4a8ac5 	.word	0x3f4a8ac5
 80070b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80070b4:	3f60624d 	.word	0x3f60624d
 80070b8:	725c3dee 	.word	0x725c3dee
 80070bc:	3f4d29dc 	.word	0x3f4d29dc
 80070c0:	200006ee 	.word	0x200006ee
 80070c4:	3d1e1b09 	.word	0x3d1e1b09
 80070c8:	3d09374c 	.word	0x3d09374c
 80070cc:	2000026c 	.word	0x2000026c
 80070d0:	40490fd0 	.word	0x40490fd0
 80070d4:	b9c1fc8f 	.word	0xb9c1fc8f
 80070d8:	39c1fc8f 	.word	0x39c1fc8f
 80070dc:	40872000 	.word	0x40872000
 80070e0:	4b21      	ldr	r3, [pc, #132]	; (8007168 <CTRL_getFloorFriction+0x380>)
 80070e2:	edd3 7a00 	vldr	s15, [r3]
 80070e6:	eef1 7a67 	vneg.f32	s15, s15
 80070ea:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <CTRL_getFloorFriction+0x380>)
 80070ec:	ed93 7a00 	vldr	s14, [r3]
 80070f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80070f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007104:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800716c <CTRL_getFloorFriction+0x384>
 8007108:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800710c:	ee16 0a90 	vmov	r0, s13
 8007110:	f7f9 fa42 	bl	8000598 <__aeabi_f2d>
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	4b15      	ldr	r3, [pc, #84]	; (8007170 <CTRL_getFloorFriction+0x388>)
 800711a:	f7f9 fbbf 	bl	800089c <__aeabi_ddiv>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	a30e      	add	r3, pc, #56	; (adr r3, 8007160 <CTRL_getFloorFriction+0x378>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f7f9 f8d6 	bl	80002dc <__adddf3>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4610      	mov	r0, r2
 8007136:	4619      	mov	r1, r3
 8007138:	f7f9 fd7e 	bl	8000c38 <__aeabi_d2f>
 800713c:	4602      	mov	r2, r0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	e008      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
				*p_err = 0.37/1000.0;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0b      	ldr	r2, [pc, #44]	; (8007174 <CTRL_getFloorFriction+0x38c>)
 8007148:	601a      	str	r2, [r3, #0]
}
 800714a:	e004      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
			*p_err = 0;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	e7ff      	b.n	8007156 <CTRL_getFloorFriction+0x36e>
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	725c3dee 	.word	0x725c3dee
 8007164:	3f4d29dc 	.word	0x3f4d29dc
 8007168:	2000026c 	.word	0x2000026c
 800716c:	40490fd0 	.word	0x40490fd0
 8007170:	40872000 	.word	0x40872000
 8007174:	39c1fc8f 	.word	0x39c1fc8f

08007178 <CTRL_outMot>:

void CTRL_outMot( float f_duty10_R, float f_duty10_L )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007182:	edc7 0a00 	vstr	s1, [r7]
	float	f_temp;			// 計算用

	/* 電圧に応じてPWM出力を変更する */
	f_duty10_R = f_duty10_R*1000;
 8007186:	edd7 7a01 	vldr	s15, [r7, #4]
 800718a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007294 <CTRL_outMot+0x11c>
 800718e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007192:	edc7 7a01 	vstr	s15, [r7, #4]
	f_duty10_L = f_duty10_L*1000;
 8007196:	edd7 7a00 	vldr	s15, [r7]
 800719a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8007294 <CTRL_outMot+0x11c>
 800719e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071a2:	edc7 7a00 	vstr	s15, [r7]

	/* 右モータ */
	if( 60 < f_duty10_R ){									// 前進
 80071a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80071aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007298 <CTRL_outMot+0x120>
 80071ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b6:	dd0e      	ble.n	80071d6 <CTRL_outMot+0x5e>
		DCM_setDirCw( DCM_R );
 80071b8:	2000      	movs	r0, #0
 80071ba:	f001 f8ab 	bl	8008314 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_duty10_R );
 80071be:	edd7 7a01 	vldr	s15, [r7, #4]
 80071c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c6:	ee17 3a90 	vmov	r3, s15
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	2000      	movs	r0, #0
 80071d0:	f001 f8f4 	bl	80083bc <DCM_setPwmDuty>
 80071d4:	e020      	b.n	8007218 <CTRL_outMot+0xa0>
	}
	else if( f_duty10_R < -60 ){							// 後退
 80071d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80071da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800729c <CTRL_outMot+0x124>
 80071de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	d514      	bpl.n	8007212 <CTRL_outMot+0x9a>
		f_temp = f_duty10_R * -1;
 80071e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80071ec:	eef1 7a67 	vneg.f32	s15, s15
 80071f0:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_R );
 80071f4:	2000      	movs	r0, #0
 80071f6:	f001 f8a0 	bl	800833a <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_temp );
 80071fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80071fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007202:	ee17 3a90 	vmov	r3, s15
 8007206:	b29b      	uxth	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	2000      	movs	r0, #0
 800720c:	f001 f8d6 	bl	80083bc <DCM_setPwmDuty>
 8007210:	e002      	b.n	8007218 <CTRL_outMot+0xa0>
	}
	else{
		DCM_brakeMot( DCM_R );								// ブレーキ
 8007212:	2000      	movs	r0, #0
 8007214:	f001 f8a4 	bl	8008360 <DCM_brakeMot>
	}

	/* 左モータ */
	if( 60 < f_duty10_L ){									// 前進
 8007218:	edd7 7a00 	vldr	s15, [r7]
 800721c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007298 <CTRL_outMot+0x120>
 8007220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	dd0e      	ble.n	8007248 <CTRL_outMot+0xd0>
		DCM_setDirCw( DCM_L );
 800722a:	2001      	movs	r0, #1
 800722c:	f001 f872 	bl	8008314 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_duty10_L );
 8007230:	edd7 7a00 	vldr	s15, [r7]
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 3a90 	vmov	r3, s15
 800723c:	b29b      	uxth	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	2001      	movs	r0, #1
 8007242:	f001 f8bb 	bl	80083bc <DCM_setPwmDuty>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
	}
	else{
		DCM_brakeMot( DCM_L );								// ブレーキ
	}
}
 8007246:	e020      	b.n	800728a <CTRL_outMot+0x112>
	else if( f_duty10_L < -60 ){							// 後退
 8007248:	edd7 7a00 	vldr	s15, [r7]
 800724c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800729c <CTRL_outMot+0x124>
 8007250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	d514      	bpl.n	8007284 <CTRL_outMot+0x10c>
		f_temp = f_duty10_L * -1;
 800725a:	edd7 7a00 	vldr	s15, [r7]
 800725e:	eef1 7a67 	vneg.f32	s15, s15
 8007262:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_L );
 8007266:	2001      	movs	r0, #1
 8007268:	f001 f867 	bl	800833a <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
 800726c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007274:	ee17 3a90 	vmov	r3, s15
 8007278:	b29b      	uxth	r3, r3
 800727a:	4619      	mov	r1, r3
 800727c:	2001      	movs	r0, #1
 800727e:	f001 f89d 	bl	80083bc <DCM_setPwmDuty>
}
 8007282:	e002      	b.n	800728a <CTRL_outMot+0x112>
		DCM_brakeMot( DCM_L );								// ブレーキ
 8007284:	2001      	movs	r0, #1
 8007286:	f001 f86b 	bl	8008360 <DCM_brakeMot>
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	447a0000 	.word	0x447a0000
 8007298:	42700000 	.word	0x42700000
 800729c:	c2700000 	.word	0xc2700000

080072a0 <CTRL_pol>:

void CTRL_pol( void )
{
 80072a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80072a4:	b090      	sub	sp, #64	; 0x40
 80072a6:	af00      	add	r7, sp, #0
	float f_feedFoard_speed		= 0;		// [制御] フィードフォワード速度制御
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
	float f_feedFoard_angle		= 0;		// [制御] フィードフォワード角度制御
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	623b      	str	r3, [r7, #32]
	float f_speedCtrl			= 0;		// [制御] 速度制御量
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
	float f_angleSpeedCtrl			= 0;	// [制御] 角速度制御量
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
	float f_angleCtrl			= 0;		// [制御] 角度制御量
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
	float f_distSenCtrl			= 0;		// [制御] 距離センサー制御量
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
	float f_frontwall_v_Ctrl		= 0;
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
	float f_frontwall_omega_Ctrl	= 0;
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	60bb      	str	r3, [r7, #8]
	float f_floorfriction		= 0;
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
	float f_duty10_R;						// [出力] 右モータPWM-DUTY比[0.1%]
	float f_duty10_L;						// [出力] 左モータPWM-DUTY比[0.1%]

	float TR = 0.0;
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
	float TL = 0.0;
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30
	float Ir = 0.0;
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	float Il = 0.0;
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38

	/* 制御を行うかのチェック */
	if( uc_CtrlFlag != TRUE ){
 80072f6:	4bb8      	ldr	r3, [pc, #736]	; (80075d8 <CTRL_pol+0x338>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	f040 87e1 	bne.w	80082c2 <CTRL_pol+0x1022>
		 return;		// 制御無効状態
	}
	if(SW_ON == SW_IsOn_0()){
 8007300:	f7fa fed4 	bl	80020ac <SW_IsOn_0>
 8007304:	4603      	mov	r3, r0
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <CTRL_pol+0x6e>
		Failsafe_flag();
 800730a:	f000 ffdf 	bl	80082cc <Failsafe_flag>
	}

	/* 制御不能 */
	if (SYS_isOutOfCtrl() == TRUE ){
 800730e:	f000 fff5 	bl	80082fc <SYS_isOutOfCtrl>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d019      	beq.n	800734c <CTRL_pol+0xac>

		f_DistErrSum = 0;				// 累積偏差クリア
 8007318:	4bb0      	ldr	r3, [pc, #704]	; (80075dc <CTRL_pol+0x33c>)
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
		f_NowDist = f_LastDist;			// 強制的に最終目標位置に変更
 8007320:	4baf      	ldr	r3, [pc, #700]	; (80075e0 <CTRL_pol+0x340>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4aaf      	ldr	r2, [pc, #700]	; (80075e4 <CTRL_pol+0x344>)
 8007326:	6013      	str	r3, [r2, #0]
		f_NowAngle = f_LastAngle;		// 強制的に最終目標時間に変更
 8007328:	4baf      	ldr	r3, [pc, #700]	; (80075e8 <CTRL_pol+0x348>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4aaf      	ldr	r2, [pc, #700]	; (80075ec <CTRL_pol+0x34c>)
 800732e:	6013      	str	r3, [r2, #0]
		f_Time = f_TrgtTime;			// 強制的に最終目標時間に変更
 8007330:	4baf      	ldr	r3, [pc, #700]	; (80075f0 <CTRL_pol+0x350>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4aaf      	ldr	r2, [pc, #700]	; (80075f4 <CTRL_pol+0x354>)
 8007336:	6013      	str	r3, [r2, #0]

	 	CTRL_stop();				// 制御停止
 8007338:	f7fe fa18 	bl	800576c <CTRL_stop>
		CTRL_clrData();					// データクリア
 800733c:	f7fe fa26 	bl	800578c <CTRL_clrData>
		DCM_brakeMot( DCM_R );			// ブレーキ
 8007340:	2000      	movs	r0, #0
 8007342:	f001 f80d 	bl	8008360 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );			// ブレーキ
 8007346:	2001      	movs	r0, #1
 8007348:	f001 f80a 	bl	8008360 <DCM_brakeMot>
	}

	/* 各種センサ入力 */
	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
 800734c:	49aa      	ldr	r1, [pc, #680]	; (80075f8 <CTRL_pol+0x358>)
 800734e:	48ab      	ldr	r0, [pc, #684]	; (80075fc <CTRL_pol+0x35c>)
 8007350:	f001 f928 	bl	80085a4 <ENC_GetDiv>
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
 8007354:	f7fe fb5e 	bl	8005a14 <CTRL_refNow>
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
 8007358:	f7fe fbf6 	bl	8005b48 <CTRL_refTarget>

	f_NowAngle = GYRO_getNowAngle();					// 現在角度[deg]
 800735c:	f001 faca 	bl	80088f4 <GYRO_getNowAngle>
 8007360:	eef0 7a40 	vmov.f32	s15, s0
 8007364:	4ba1      	ldr	r3, [pc, #644]	; (80075ec <CTRL_pol+0x34c>)
 8007366:	edc3 7a00 	vstr	s15, [r3]

	/* 制御値取得 */
	CTRL_getFF_speed( &f_feedFoard_speed );					// [制御] フィードフォワード
 800736a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff f9ae 	bl	80066d0 <CTRL_getFF_speed>
	CTRL_getFF_angle( &f_feedFoard_angle );					// [制御] フィードフォワード
 8007374:	f107 0320 	add.w	r3, r7, #32
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff f9f1 	bl	8006760 <CTRL_getFF_angle>
	CTRL_getSpeedFB( &f_speedCtrl );				// [制御] 速度
 800737e:	f107 031c 	add.w	r3, r7, #28
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fa50 	bl	8006828 <CTRL_getSpeedFB>
	CTRL_getAngleSpeedFB( &f_angleSpeedCtrl );		// [制御] 角速度
 8007388:	f107 0318 	add.w	r3, r7, #24
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fab9 	bl	8006904 <CTRL_getAngleSpeedFB>
	CTRL_getAngleFB( &f_angleCtrl );		//angle ctrl
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fb50 	bl	8006a3c <CTRL_getAngleFB>
	CTRL_getSenFB( &f_distSenCtrl );				// [制御] 壁
 800739c:	f107 0310 	add.w	r3, r7, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fbb3 	bl	8006b0c <CTRL_getSenFB>
	CTRL_getFloorFriction( &f_floorfriction );
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fd1d 	bl	8006de8 <CTRL_getFloorFriction>
	CTRL_get_frontwall_v_FB( &f_frontwall_v_Ctrl);
 80073ae:	f107 030c 	add.w	r3, r7, #12
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fc20 	bl	8006bf8 <CTRL_get_frontwall_v_FB>
	CTRL_get_frontwall_omega_FB( &f_frontwall_omega_Ctrl);
 80073b8:	f107 0308 	add.w	r3, r7, #8
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fc9f 	bl	8006d00 <CTRL_get_frontwall_omega_FB>

	/* 直進制御 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 80073c2:	4b8f      	ldr	r3, [pc, #572]	; (8007600 <CTRL_pol+0x360>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01c      	beq.n	8007404 <CTRL_pol+0x164>
 80073ca:	4b8d      	ldr	r3, [pc, #564]	; (8007600 <CTRL_pol+0x360>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d018      	beq.n	8007404 <CTRL_pol+0x164>
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <CTRL_pol+0x360>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d014      	beq.n	8007404 <CTRL_pol+0x164>
 80073da:	4b89      	ldr	r3, [pc, #548]	; (8007600 <CTRL_pol+0x360>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b0a      	cmp	r3, #10
 80073e0:	d010      	beq.n	8007404 <CTRL_pol+0x164>
 80073e2:	4b87      	ldr	r3, [pc, #540]	; (8007600 <CTRL_pol+0x360>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b0e      	cmp	r3, #14
 80073e8:	d00c      	beq.n	8007404 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 80073ea:	4b85      	ldr	r3, [pc, #532]	; (8007600 <CTRL_pol+0x360>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d008      	beq.n	8007404 <CTRL_pol+0x164>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 80073f2:	4b83      	ldr	r3, [pc, #524]	; (8007600 <CTRL_pol+0x360>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d004      	beq.n	8007404 <CTRL_pol+0x164>
 80073fa:	4b81      	ldr	r3, [pc, #516]	; (8007600 <CTRL_pol+0x360>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b05      	cmp	r3, #5
 8007400:	f040 8104 	bne.w	800760c <CTRL_pol+0x36c>
	){
		TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 8007404:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007408:	edd7 7a07 	vldr	s15, [r7, #28]
 800740c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007410:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8007604 <CTRL_pol+0x364>
 8007414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007418:	ee17 0a90 	vmov	r0, s15
 800741c:	f7f9 f8bc 	bl	8000598 <__aeabi_f2d>
 8007420:	a361      	add	r3, pc, #388	; (adr r3, 80075a8 <CTRL_pol+0x308>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f8 ff59 	bl	80002dc <__adddf3>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	a35f      	add	r3, pc, #380	; (adr r3, 80075b0 <CTRL_pol+0x310>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 f906 	bl	8000648 <__aeabi_dmul>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	ed97 7a08 	vldr	s14, [r7, #32]
 8007448:	edd7 7a06 	vldr	s15, [r7, #24]
 800744c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007450:	edd7 7a04 	vldr	s15, [r7, #16]
 8007454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007458:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007608 <CTRL_pol+0x368>
 800745c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007460:	ee17 0a90 	vmov	r0, s15
 8007464:	f7f9 f898 	bl	8000598 <__aeabi_f2d>
 8007468:	a353      	add	r3, pc, #332	; (adr r3, 80075b8 <CTRL_pol+0x318>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	f7f9 f8eb 	bl	8000648 <__aeabi_dmul>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4620      	mov	r0, r4
 8007478:	4629      	mov	r1, r5
 800747a:	f7f8 ff2f 	bl	80002dc <__adddf3>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	a34e      	add	r3, pc, #312	; (adr r3, 80075c0 <CTRL_pol+0x320>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f7f9 fa06 	bl	800089c <__aeabi_ddiv>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	f7f9 fbce 	bl	8000c38 <__aeabi_d2f>
 800749c:	4603      	mov	r3, r0
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
		TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 80074a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80074a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80074a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ac:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007604 <CTRL_pol+0x364>
 80074b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074b4:	ee17 0a90 	vmov	r0, s15
 80074b8:	f7f9 f86e 	bl	8000598 <__aeabi_f2d>
 80074bc:	a33a      	add	r3, pc, #232	; (adr r3, 80075a8 <CTRL_pol+0x308>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f8 ff0b 	bl	80002dc <__adddf3>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	a338      	add	r3, pc, #224	; (adr r3, 80075b0 <CTRL_pol+0x310>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f9 f8b8 	bl	8000648 <__aeabi_dmul>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4614      	mov	r4, r2
 80074de:	461d      	mov	r5, r3
 80074e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80074e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80074e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80074f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074f4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007608 <CTRL_pol+0x368>
 80074f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074fc:	ee17 0a90 	vmov	r0, s15
 8007500:	f7f9 f84a 	bl	8000598 <__aeabi_f2d>
 8007504:	a32c      	add	r3, pc, #176	; (adr r3, 80075b8 <CTRL_pol+0x318>)
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f9 f89d 	bl	8000648 <__aeabi_dmul>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4620      	mov	r0, r4
 8007514:	4629      	mov	r1, r5
 8007516:	f7f8 fedf 	bl	80002d8 <__aeabi_dsub>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	a327      	add	r3, pc, #156	; (adr r3, 80075c0 <CTRL_pol+0x320>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f9 f9b8 	bl	800089c <__aeabi_ddiv>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	f7f9 fb80 	bl	8000c38 <__aeabi_d2f>
 8007538:	4603      	mov	r3, r0
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
		Ir = (TR+0.0255/1000.0)/Torque_constant;
 800753c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800753e:	f7f9 f82b 	bl	8000598 <__aeabi_f2d>
 8007542:	a321      	add	r3, pc, #132	; (adr r3, 80075c8 <CTRL_pol+0x328>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f8 fec8 	bl	80002dc <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	a31e      	add	r3, pc, #120	; (adr r3, 80075d0 <CTRL_pol+0x330>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f9 f99f 	bl	800089c <__aeabi_ddiv>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	f7f9 fb67 	bl	8000c38 <__aeabi_d2f>
 800756a:	4603      	mov	r3, r0
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
		Il = (TL+0.0255/1000.0)/Torque_constant;
 800756e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007570:	f7f9 f812 	bl	8000598 <__aeabi_f2d>
 8007574:	a314      	add	r3, pc, #80	; (adr r3, 80075c8 <CTRL_pol+0x328>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f7f8 feaf 	bl	80002dc <__adddf3>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	a312      	add	r3, pc, #72	; (adr r3, 80075d0 <CTRL_pol+0x330>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f7f9 f986 	bl	800089c <__aeabi_ddiv>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	f7f9 fb4e 	bl	8000c38 <__aeabi_d2f>
 800759c:	4603      	mov	r3, r0
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a0:	f000 bd5e 	b.w	8008060 <CTRL_pol+0xdc0>
 80075a4:	f3af 8000 	nop.w
 80075a8:	47ae147b 	.word	0x47ae147b
 80075ac:	3f847ae1 	.word	0x3f847ae1
 80075b0:	a0000000 	.word	0xa0000000
 80075b4:	3f699999 	.word	0x3f699999
 80075b8:	ca518cec 	.word	0xca518cec
 80075bc:	3fc7e16e 	.word	0x3fc7e16e
 80075c0:	c0000000 	.word	0xc0000000
 80075c4:	400ccccc 	.word	0x400ccccc
 80075c8:	a821f299 	.word	0xa821f299
 80075cc:	3efabd1a 	.word	0x3efabd1a
 80075d0:	40000000 	.word	0x40000000
 80075d4:	3f4376d5 	.word	0x3f4376d5
 80075d8:	20000218 	.word	0x20000218
 80075dc:	2000025c 	.word	0x2000025c
 80075e0:	20000248 	.word	0x20000248
 80075e4:	20000250 	.word	0x20000250
 80075e8:	2000027c 	.word	0x2000027c
 80075ec:	20000280 	.word	0x20000280
 80075f0:	20000008 	.word	0x20000008
 80075f4:	2000021c 	.word	0x2000021c
 80075f8:	200013d0 	.word	0x200013d0
 80075fc:	200013d4 	.word	0x200013d4
 8007600:	200006ee 	.word	0x200006ee
 8007604:	3c9374bc 	.word	0x3c9374bc
 8007608:	369a59b3 	.word	0x369a59b3
	}

	/* 壁あて制御 */
	else if( en_Type == CTRL_HIT_WALL ){
 800760c:	4bd6      	ldr	r3, [pc, #856]	; (8007968 <CTRL_pol+0x6c8>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b06      	cmp	r3, #6
 8007612:	d179      	bne.n	8007708 <CTRL_pol+0x468>
		TR = (TIRE_D/2.0/2.0)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/3500.0 ));		
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	4618      	mov	r0, r3
 8007618:	f7f8 ffbe 	bl	8000598 <__aeabi_f2d>
 800761c:	a3c0      	add	r3, pc, #768	; (adr r3, 8007920 <CTRL_pol+0x680>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f9 f93b 	bl	800089c <__aeabi_ddiv>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	a3be      	add	r3, pc, #760	; (adr r3, 8007928 <CTRL_pol+0x688>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f7f9 f808 	bl	8000648 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	a3bb      	add	r3, pc, #748	; (adr r3, 8007930 <CTRL_pol+0x690>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 ffff 	bl	8000648 <__aeabi_dmul>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	f7f9 faf1 	bl	8000c38 <__aeabi_d2f>
 8007656:	4603      	mov	r3, r0
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
		TL = (TIRE_D/2.0/2.0)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/3500.0 ));
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	4618      	mov	r0, r3
 800765e:	f7f8 ff9b 	bl	8000598 <__aeabi_f2d>
 8007662:	a3af      	add	r3, pc, #700	; (adr r3, 8007920 <CTRL_pol+0x680>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f9 f918 	bl	800089c <__aeabi_ddiv>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4610      	mov	r0, r2
 8007672:	4619      	mov	r1, r3
 8007674:	a3ac      	add	r3, pc, #688	; (adr r3, 8007928 <CTRL_pol+0x688>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 ffe5 	bl	8000648 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	a3aa      	add	r3, pc, #680	; (adr r3, 8007930 <CTRL_pol+0x690>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 ffdc 	bl	8000648 <__aeabi_dmul>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	f7f9 face 	bl	8000c38 <__aeabi_d2f>
 800769c:	4603      	mov	r3, r0
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
		Ir = (TR-0.0255/1000.0)/Torque_constant;
 80076a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076a2:	f7f8 ff79 	bl	8000598 <__aeabi_f2d>
 80076a6:	a3a4      	add	r3, pc, #656	; (adr r3, 8007938 <CTRL_pol+0x698>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 fe14 	bl	80002d8 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	a3a1      	add	r3, pc, #644	; (adr r3, 8007940 <CTRL_pol+0x6a0>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f7f9 f8ed 	bl	800089c <__aeabi_ddiv>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4610      	mov	r0, r2
 80076c8:	4619      	mov	r1, r3
 80076ca:	f7f9 fab5 	bl	8000c38 <__aeabi_d2f>
 80076ce:	4603      	mov	r3, r0
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		Il = (TL-0.0255/1000.0)/Torque_constant;
 80076d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d4:	f7f8 ff60 	bl	8000598 <__aeabi_f2d>
 80076d8:	a397      	add	r3, pc, #604	; (adr r3, 8007938 <CTRL_pol+0x698>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 fdfb 	bl	80002d8 <__aeabi_dsub>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	a395      	add	r3, pc, #596	; (adr r3, 8007940 <CTRL_pol+0x6a0>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f7f9 f8d4 	bl	800089c <__aeabi_ddiv>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4610      	mov	r0, r2
 80076fa:	4619      	mov	r1, r3
 80076fc:	f7f9 fa9c 	bl	8000c38 <__aeabi_d2f>
 8007700:	4603      	mov	r3, r0
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
 8007704:	f000 bcac 	b.w	8008060 <CTRL_pol+0xdc0>
	}

	/* スラローム制御 */
	else if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8007708:	4b97      	ldr	r3, [pc, #604]	; (8007968 <CTRL_pol+0x6c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b0b      	cmp	r3, #11
 800770e:	d008      	beq.n	8007722 <CTRL_pol+0x482>
 8007710:	4b95      	ldr	r3, [pc, #596]	; (8007968 <CTRL_pol+0x6c8>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b0c      	cmp	r3, #12
 8007716:	d004      	beq.n	8007722 <CTRL_pol+0x482>
 8007718:	4b93      	ldr	r3, [pc, #588]	; (8007968 <CTRL_pol+0x6c8>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b0d      	cmp	r3, #13
 800771e:	f040 821e 	bne.w	8007b5e <CTRL_pol+0x8be>
		/* 左旋回 */
		if( f_LastAngle > 0 ){
 8007722:	4b92      	ldr	r3, [pc, #584]	; (800796c <CTRL_pol+0x6cc>)
 8007724:	edd3 7a00 	vldr	s15, [r3]
 8007728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	f340 8120 	ble.w	8007974 <CTRL_pol+0x6d4>
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007734:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007738:	edd7 7a07 	vldr	s15, [r7, #28]
 800773c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007740:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007970 <CTRL_pol+0x6d0>
 8007744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007748:	ee17 0a90 	vmov	r0, s15
 800774c:	f7f8 ff24 	bl	8000598 <__aeabi_f2d>
 8007750:	a37d      	add	r3, pc, #500	; (adr r3, 8007948 <CTRL_pol+0x6a8>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f8 fdc1 	bl	80002dc <__adddf3>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4610      	mov	r0, r2
 8007760:	4619      	mov	r1, r3
 8007762:	a373      	add	r3, pc, #460	; (adr r3, 8007930 <CTRL_pol+0x690>)
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	f7f8 ff6e 	bl	8000648 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4614      	mov	r4, r2
 8007772:	461d      	mov	r5, r3
 8007774:	ed97 7a08 	vldr	s14, [r7, #32]
 8007778:	edd7 7a06 	vldr	s15, [r7, #24]
 800777c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007780:	edd7 7a05 	vldr	s15, [r7, #20]
 8007784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007788:	ee17 0a90 	vmov	r0, s15
 800778c:	f7f8 ff04 	bl	8000598 <__aeabi_f2d>
 8007790:	a36f      	add	r3, pc, #444	; (adr r3, 8007950 <CTRL_pol+0x6b0>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 ff57 	bl	8000648 <__aeabi_dmul>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4690      	mov	r8, r2
 80077a0:	4699      	mov	r9, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f8 fef7 	bl	8000598 <__aeabi_f2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4640      	mov	r0, r8
 80077b0:	4649      	mov	r1, r9
 80077b2:	f7f8 fd93 	bl	80002dc <__adddf3>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4610      	mov	r0, r2
 80077bc:	4619      	mov	r1, r3
 80077be:	a366      	add	r3, pc, #408	; (adr r3, 8007958 <CTRL_pol+0x6b8>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f7f8 ff40 	bl	8000648 <__aeabi_dmul>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 fd84 	bl	80002dc <__adddf3>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	a360      	add	r3, pc, #384	; (adr r3, 8007960 <CTRL_pol+0x6c0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f9 f85b 	bl	800089c <__aeabi_ddiv>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	f7f9 fa23 	bl	8000c38 <__aeabi_d2f>
 80077f2:	4603      	mov	r3, r0
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80077f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80077fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80077fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007802:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8007970 <CTRL_pol+0x6d0>
 8007806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800780a:	ee17 0a90 	vmov	r0, s15
 800780e:	f7f8 fec3 	bl	8000598 <__aeabi_f2d>
 8007812:	a34d      	add	r3, pc, #308	; (adr r3, 8007948 <CTRL_pol+0x6a8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fd60 	bl	80002dc <__adddf3>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	a342      	add	r3, pc, #264	; (adr r3, 8007930 <CTRL_pol+0x690>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 ff0d 	bl	8000648 <__aeabi_dmul>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4614      	mov	r4, r2
 8007834:	461d      	mov	r5, r3
 8007836:	ed97 7a08 	vldr	s14, [r7, #32]
 800783a:	edd7 7a06 	vldr	s15, [r7, #24]
 800783e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007842:	edd7 7a05 	vldr	s15, [r7, #20]
 8007846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800784a:	ee17 0a90 	vmov	r0, s15
 800784e:	f7f8 fea3 	bl	8000598 <__aeabi_f2d>
 8007852:	a33f      	add	r3, pc, #252	; (adr r3, 8007950 <CTRL_pol+0x6b0>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fef6 	bl	8000648 <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4690      	mov	r8, r2
 8007862:	4699      	mov	r9, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4618      	mov	r0, r3
 8007868:	f7f8 fe96 	bl	8000598 <__aeabi_f2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4640      	mov	r0, r8
 8007872:	4649      	mov	r1, r9
 8007874:	f7f8 fd32 	bl	80002dc <__adddf3>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4610      	mov	r0, r2
 800787e:	4619      	mov	r1, r3
 8007880:	a335      	add	r3, pc, #212	; (adr r3, 8007958 <CTRL_pol+0x6b8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fedf 	bl	8000648 <__aeabi_dmul>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f8 fd21 	bl	80002d8 <__aeabi_dsub>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4610      	mov	r0, r2
 800789c:	4619      	mov	r1, r3
 800789e:	a330      	add	r3, pc, #192	; (adr r3, 8007960 <CTRL_pol+0x6c0>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fffa 	bl	800089c <__aeabi_ddiv>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	f7f9 f9c2 	bl	8000c38 <__aeabi_d2f>
 80078b4:	4603      	mov	r3, r0
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 80078b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078ba:	f7f8 fe6d 	bl	8000598 <__aeabi_f2d>
 80078be:	a31e      	add	r3, pc, #120	; (adr r3, 8007938 <CTRL_pol+0x698>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f7f8 fd0a 	bl	80002dc <__adddf3>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	a31b      	add	r3, pc, #108	; (adr r3, 8007940 <CTRL_pol+0x6a0>)
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 ffe1 	bl	800089c <__aeabi_ddiv>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4610      	mov	r0, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7f9 f9a9 	bl	8000c38 <__aeabi_d2f>
 80078e6:	4603      	mov	r3, r0
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			Il = (TL+0.0255/1000.0)/Torque_constant;
 80078ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ec:	f7f8 fe54 	bl	8000598 <__aeabi_f2d>
 80078f0:	a311      	add	r3, pc, #68	; (adr r3, 8007938 <CTRL_pol+0x698>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fcf1 	bl	80002dc <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4610      	mov	r0, r2
 8007900:	4619      	mov	r1, r3
 8007902:	a30f      	add	r3, pc, #60	; (adr r3, 8007940 <CTRL_pol+0x6a0>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 ffc8 	bl	800089c <__aeabi_ddiv>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4610      	mov	r0, r2
 8007912:	4619      	mov	r1, r3
 8007914:	f7f9 f990 	bl	8000c38 <__aeabi_d2f>
 8007918:	4603      	mov	r3, r0
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
		if( f_LastAngle > 0 ){
 800791c:	e3a0      	b.n	8008060 <CTRL_pol+0xdc0>
 800791e:	bf00      	nop
 8007920:	00000000 	.word	0x00000000
 8007924:	40ab5800 	.word	0x40ab5800
 8007928:	80000000 	.word	0x80000000
 800792c:	3f926e97 	.word	0x3f926e97
 8007930:	a0000000 	.word	0xa0000000
 8007934:	3f699999 	.word	0x3f699999
 8007938:	a821f299 	.word	0xa821f299
 800793c:	3efabd1a 	.word	0x3efabd1a
 8007940:	40000000 	.word	0x40000000
 8007944:	3f4376d5 	.word	0x3f4376d5
 8007948:	47ae147b 	.word	0x47ae147b
 800794c:	3f847ae1 	.word	0x3f847ae1
 8007950:	5f379dfc 	.word	0x5f379dfc
 8007954:	3ed34b36 	.word	0x3ed34b36
 8007958:	ca518cec 	.word	0xca518cec
 800795c:	3fc7e16e 	.word	0x3fc7e16e
 8007960:	c0000000 	.word	0xc0000000
 8007964:	400ccccc 	.word	0x400ccccc
 8007968:	200006ee 	.word	0x200006ee
 800796c:	2000027c 	.word	0x2000027c
 8007970:	3c9374bc 	.word	0x3c9374bc
		}
		/*右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007974:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007978:	edd7 7a07 	vldr	s15, [r7, #28]
 800797c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007980:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8007970 <CTRL_pol+0x6d0>
 8007984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007988:	ee17 0a90 	vmov	r0, s15
 800798c:	f7f8 fe04 	bl	8000598 <__aeabi_f2d>
 8007990:	a3b7      	add	r3, pc, #732	; (adr r3, 8007c70 <CTRL_pol+0x9d0>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fca1 	bl	80002dc <__adddf3>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	a3b5      	add	r3, pc, #724	; (adr r3, 8007c78 <CTRL_pol+0x9d8>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fe4e 	bl	8000648 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	461d      	mov	r5, r3
 80079b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80079b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80079bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80079c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079c8:	ee17 0a90 	vmov	r0, s15
 80079cc:	f7f8 fde4 	bl	8000598 <__aeabi_f2d>
 80079d0:	a3ab      	add	r3, pc, #684	; (adr r3, 8007c80 <CTRL_pol+0x9e0>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fe37 	bl	8000648 <__aeabi_dmul>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4690      	mov	r8, r2
 80079e0:	4699      	mov	r9, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7f8 fdd7 	bl	8000598 <__aeabi_f2d>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f8 fc73 	bl	80002dc <__adddf3>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4610      	mov	r0, r2
 80079fc:	4619      	mov	r1, r3
 80079fe:	a3a2      	add	r3, pc, #648	; (adr r3, 8007c88 <CTRL_pol+0x9e8>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fe20 	bl	8000648 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fc64 	bl	80002dc <__adddf3>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	a39c      	add	r3, pc, #624	; (adr r3, 8007c90 <CTRL_pol+0x9f0>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f7f8 ff3b 	bl	800089c <__aeabi_ddiv>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f7f9 f903 	bl	8000c38 <__aeabi_d2f>
 8007a32:	4603      	mov	r3, r0
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007a36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007a3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a42:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8007ca8 <CTRL_pol+0xa08>
 8007a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a4a:	ee17 0a90 	vmov	r0, s15
 8007a4e:	f7f8 fda3 	bl	8000598 <__aeabi_f2d>
 8007a52:	a387      	add	r3, pc, #540	; (adr r3, 8007c70 <CTRL_pol+0x9d0>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fc40 	bl	80002dc <__adddf3>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4610      	mov	r0, r2
 8007a62:	4619      	mov	r1, r3
 8007a64:	a384      	add	r3, pc, #528	; (adr r3, 8007c78 <CTRL_pol+0x9d8>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f7f8 fded 	bl	8000648 <__aeabi_dmul>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4614      	mov	r4, r2
 8007a74:	461d      	mov	r5, r3
 8007a76:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a8a:	ee17 0a90 	vmov	r0, s15
 8007a8e:	f7f8 fd83 	bl	8000598 <__aeabi_f2d>
 8007a92:	a37b      	add	r3, pc, #492	; (adr r3, 8007c80 <CTRL_pol+0x9e0>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f7f8 fdd6 	bl	8000648 <__aeabi_dmul>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f8 fd76 	bl	8000598 <__aeabi_f2d>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f8 fc12 	bl	80002dc <__adddf3>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	a371      	add	r3, pc, #452	; (adr r3, 8007c88 <CTRL_pol+0x9e8>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f7f8 fdbf 	bl	8000648 <__aeabi_dmul>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 fc01 	bl	80002d8 <__aeabi_dsub>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	a36c      	add	r3, pc, #432	; (adr r3, 8007c90 <CTRL_pol+0x9f0>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 feda 	bl	800089c <__aeabi_ddiv>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4610      	mov	r0, r2
 8007aee:	4619      	mov	r1, r3
 8007af0:	f7f9 f8a2 	bl	8000c38 <__aeabi_d2f>
 8007af4:	4603      	mov	r3, r0
 8007af6:	633b      	str	r3, [r7, #48]	; 0x30
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 8007af8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007afa:	f7f8 fd4d 	bl	8000598 <__aeabi_f2d>
 8007afe:	a366      	add	r3, pc, #408	; (adr r3, 8007c98 <CTRL_pol+0x9f8>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fbea 	bl	80002dc <__adddf3>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	a363      	add	r3, pc, #396	; (adr r3, 8007ca0 <CTRL_pol+0xa00>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fec1 	bl	800089c <__aeabi_ddiv>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7f9 f889 	bl	8000c38 <__aeabi_d2f>
 8007b26:	4603      	mov	r3, r0
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
			Il = (TL+0.0255/1000.0)/Torque_constant;
 8007b2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2c:	f7f8 fd34 	bl	8000598 <__aeabi_f2d>
 8007b30:	a359      	add	r3, pc, #356	; (adr r3, 8007c98 <CTRL_pol+0x9f8>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fbd1 	bl	80002dc <__adddf3>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4619      	mov	r1, r3
 8007b42:	a357      	add	r3, pc, #348	; (adr r3, 8007ca0 <CTRL_pol+0xa00>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fea8 	bl	800089c <__aeabi_ddiv>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4610      	mov	r0, r2
 8007b52:	4619      	mov	r1, r3
 8007b54:	f7f9 f870 	bl	8000c38 <__aeabi_d2f>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	63bb      	str	r3, [r7, #56]	; 0x38
		if( f_LastAngle > 0 ){
 8007b5c:	e280      	b.n	8008060 <CTRL_pol+0xdc0>
		}
	}

	else if( en_Type == CTRL_FRONT_WALL){
 8007b5e:	4b53      	ldr	r3, [pc, #332]	; (8007cac <CTRL_pol+0xa0c>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	f040 80a8 	bne.w	8007cb8 <CTRL_pol+0xa18>
		TR = ((TIRE_D/2.0/2.0)*(Weight*f_frontwall_v_Ctrl)+(TIRE_D/2.0/TREAD)*(Inertia*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8007b68:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b6c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8007ca8 <CTRL_pol+0xa08>
 8007b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b74:	ee17 0a90 	vmov	r0, s15
 8007b78:	f7f8 fd0e 	bl	8000598 <__aeabi_f2d>
 8007b7c:	a33e      	add	r3, pc, #248	; (adr r3, 8007c78 <CTRL_pol+0x9d8>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fd61 	bl	8000648 <__aeabi_dmul>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	461d      	mov	r5, r3
 8007b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b92:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007cb0 <CTRL_pol+0xa10>
 8007b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b9a:	ee17 0a90 	vmov	r0, s15
 8007b9e:	f7f8 fcfb 	bl	8000598 <__aeabi_f2d>
 8007ba2:	a339      	add	r3, pc, #228	; (adr r3, 8007c88 <CTRL_pol+0x9e8>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fd4e 	bl	8000648 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fb92 	bl	80002dc <__adddf3>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	a333      	add	r3, pc, #204	; (adr r3, 8007c90 <CTRL_pol+0x9f0>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fe69 	bl	800089c <__aeabi_ddiv>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f7f9 f831 	bl	8000c38 <__aeabi_d2f>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
		TL = ((TIRE_D/2.0/2.0)*(Weight*f_frontwall_v_Ctrl)-(TIRE_D/2.0/TREAD)*(Inertia*f_frontwall_omega_Ctrl))/GEAR_RATIO;
 8007bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bde:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007ca8 <CTRL_pol+0xa08>
 8007be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007be6:	ee17 0a90 	vmov	r0, s15
 8007bea:	f7f8 fcd5 	bl	8000598 <__aeabi_f2d>
 8007bee:	a322      	add	r3, pc, #136	; (adr r3, 8007c78 <CTRL_pol+0x9d8>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fd28 	bl	8000648 <__aeabi_dmul>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	461d      	mov	r5, r3
 8007c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c04:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007cb0 <CTRL_pol+0xa10>
 8007c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c0c:	ee17 0a90 	vmov	r0, s15
 8007c10:	f7f8 fcc2 	bl	8000598 <__aeabi_f2d>
 8007c14:	a31c      	add	r3, pc, #112	; (adr r3, 8007c88 <CTRL_pol+0x9e8>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f7f8 fd15 	bl	8000648 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7f8 fb57 	bl	80002d8 <__aeabi_dsub>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	a317      	add	r3, pc, #92	; (adr r3, 8007c90 <CTRL_pol+0x9f0>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fe30 	bl	800089c <__aeabi_ddiv>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4610      	mov	r0, r2
 8007c42:	4619      	mov	r1, r3
 8007c44:	f7f8 fff8 	bl	8000c38 <__aeabi_d2f>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30
		Ir = (TR)/Torque_constant;
 8007c4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007c50:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007cb4 <CTRL_pol+0xa14>
 8007c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		Il = (TL)/Torque_constant;
 8007c5c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007c60:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007cb4 <CTRL_pol+0xa14>
 8007c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8007c6c:	e1f8      	b.n	8008060 <CTRL_pol+0xdc0>
 8007c6e:	bf00      	nop
 8007c70:	47ae147b 	.word	0x47ae147b
 8007c74:	3f847ae1 	.word	0x3f847ae1
 8007c78:	a0000000 	.word	0xa0000000
 8007c7c:	3f699999 	.word	0x3f699999
 8007c80:	5f379dfc 	.word	0x5f379dfc
 8007c84:	3ed34b36 	.word	0x3ed34b36
 8007c88:	ca518cec 	.word	0xca518cec
 8007c8c:	3fc7e16e 	.word	0x3fc7e16e
 8007c90:	c0000000 	.word	0xc0000000
 8007c94:	400ccccc 	.word	0x400ccccc
 8007c98:	a821f299 	.word	0xa821f299
 8007c9c:	3efabd1a 	.word	0x3efabd1a
 8007ca0:	40000000 	.word	0x40000000
 8007ca4:	3f4376d5 	.word	0x3f4376d5
 8007ca8:	3c9374bc 	.word	0x3c9374bc
 8007cac:	200006ee 	.word	0x200006ee
 8007cb0:	369a59b3 	.word	0x369a59b3
 8007cb4:	3a1bb6aa 	.word	0x3a1bb6aa
	}

	/* 超信地旋回 */
	else{
		/* 左旋回 */
		if( f_LastAngle > 0 ){			
 8007cb8:	4b7b      	ldr	r3, [pc, #492]	; (8007ea8 <CTRL_pol+0xc08>)
 8007cba:	edd3 7a00 	vldr	s15, [r3]
 8007cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc6:	f340 80f5 	ble.w	8007eb4 <CTRL_pol+0xc14>
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007cca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007cce:	edd7 7a07 	vldr	s15, [r7, #28]
 8007cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cd6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007eb0 <CTRL_pol+0xc10>
 8007cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cde:	ee17 0a90 	vmov	r0, s15
 8007ce2:	f7f8 fc59 	bl	8000598 <__aeabi_f2d>
 8007ce6:	a364      	add	r3, pc, #400	; (adr r3, 8007e78 <CTRL_pol+0xbd8>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 faf6 	bl	80002dc <__adddf3>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	a361      	add	r3, pc, #388	; (adr r3, 8007e80 <CTRL_pol+0xbe0>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fca3 	bl	8000648 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	ed97 7a08 	vldr	s14, [r7, #32]
 8007d0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d1e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8007eac <CTRL_pol+0xc0c>
 8007d22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2e:	ee17 0a90 	vmov	r0, s15
 8007d32:	f7f8 fc31 	bl	8000598 <__aeabi_f2d>
 8007d36:	a354      	add	r3, pc, #336	; (adr r3, 8007e88 <CTRL_pol+0xbe8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fc84 	bl	8000648 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fac8 	bl	80002dc <__adddf3>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	a34e      	add	r3, pc, #312	; (adr r3, 8007e90 <CTRL_pol+0xbf0>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fd9f 	bl	800089c <__aeabi_ddiv>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	f7f8 ff67 	bl	8000c38 <__aeabi_d2f>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007d6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007eb0 <CTRL_pol+0xc10>
 8007d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d82:	ee17 0a90 	vmov	r0, s15
 8007d86:	f7f8 fc07 	bl	8000598 <__aeabi_f2d>
 8007d8a:	a33b      	add	r3, pc, #236	; (adr r3, 8007e78 <CTRL_pol+0xbd8>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 faa4 	bl	80002dc <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	a338      	add	r3, pc, #224	; (adr r3, 8007e80 <CTRL_pol+0xbe0>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 fc51 	bl	8000648 <__aeabi_dmul>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4614      	mov	r4, r2
 8007dac:	461d      	mov	r5, r3
 8007dae:	ed97 7a08 	vldr	s14, [r7, #32]
 8007db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8007db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8007dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007eac <CTRL_pol+0xc0c>
 8007dc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd2:	ee17 0a90 	vmov	r0, s15
 8007dd6:	f7f8 fbdf 	bl	8000598 <__aeabi_f2d>
 8007dda:	a32b      	add	r3, pc, #172	; (adr r3, 8007e88 <CTRL_pol+0xbe8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fc32 	bl	8000648 <__aeabi_dmul>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4620      	mov	r0, r4
 8007dea:	4629      	mov	r1, r5
 8007dec:	f7f8 fa74 	bl	80002d8 <__aeabi_dsub>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4610      	mov	r0, r2
 8007df6:	4619      	mov	r1, r3
 8007df8:	a325      	add	r3, pc, #148	; (adr r3, 8007e90 <CTRL_pol+0xbf0>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fd4d 	bl	800089c <__aeabi_ddiv>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7f8 ff15 	bl	8000c38 <__aeabi_d2f>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	633b      	str	r3, [r7, #48]	; 0x30
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 8007e12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e14:	f7f8 fbc0 	bl	8000598 <__aeabi_f2d>
 8007e18:	a31f      	add	r3, pc, #124	; (adr r3, 8007e98 <CTRL_pol+0xbf8>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fa5d 	bl	80002dc <__adddf3>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	a31d      	add	r3, pc, #116	; (adr r3, 8007ea0 <CTRL_pol+0xc00>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f7f8 fd34 	bl	800089c <__aeabi_ddiv>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f7f8 fefc 	bl	8000c38 <__aeabi_d2f>
 8007e40:	4603      	mov	r3, r0
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
			Il = (TL-0.0255/1000.0)/Torque_constant;
 8007e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e46:	f7f8 fba7 	bl	8000598 <__aeabi_f2d>
 8007e4a:	a313      	add	r3, pc, #76	; (adr r3, 8007e98 <CTRL_pol+0xbf8>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 fa42 	bl	80002d8 <__aeabi_dsub>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	a310      	add	r3, pc, #64	; (adr r3, 8007ea0 <CTRL_pol+0xc00>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fd1b 	bl	800089c <__aeabi_ddiv>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f7f8 fee3 	bl	8000c38 <__aeabi_d2f>
 8007e72:	4603      	mov	r3, r0
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e76:	e0f3      	b.n	8008060 <CTRL_pol+0xdc0>
 8007e78:	47ae147b 	.word	0x47ae147b
 8007e7c:	3f847ae1 	.word	0x3f847ae1
 8007e80:	a0000000 	.word	0xa0000000
 8007e84:	3f699999 	.word	0x3f699999
 8007e88:	090e2dab 	.word	0x090e2dab
 8007e8c:	3fc4b9b3 	.word	0x3fc4b9b3
 8007e90:	c0000000 	.word	0xc0000000
 8007e94:	400ccccc 	.word	0x400ccccc
 8007e98:	a821f299 	.word	0xa821f299
 8007e9c:	3efabd1a 	.word	0x3efabd1a
 8007ea0:	40000000 	.word	0x40000000
 8007ea4:	3f4376d5 	.word	0x3f4376d5
 8007ea8:	2000027c 	.word	0x2000027c
 8007eac:	369a59b3 	.word	0x369a59b3
 8007eb0:	3c9374bc 	.word	0x3c9374bc
		}
		/* 右旋回 */
		else{			
			TR = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)+(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007eb4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007eb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8007ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ec0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8007eb0 <CTRL_pol+0xc10>
 8007ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ec8:	ee17 0a90 	vmov	r0, s15
 8007ecc:	f7f8 fb64 	bl	8000598 <__aeabi_f2d>
 8007ed0:	a3db      	add	r3, pc, #876	; (adr r3, 8008240 <CTRL_pol+0xfa0>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fa01 	bl	80002dc <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	a3d9      	add	r3, pc, #868	; (adr r3, 8008248 <CTRL_pol+0xfa8>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 fbae 	bl	8000648 <__aeabi_dmul>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	461d      	mov	r5, r3
 8007ef4:	ed97 7a06 	vldr	s14, [r7, #24]
 8007ef8:	edd7 7a08 	vldr	s15, [r7, #32]
 8007efc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f00:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f08:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8008278 <CTRL_pol+0xfd8>
 8007f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f18:	ee17 0a90 	vmov	r0, s15
 8007f1c:	f7f8 fb3c 	bl	8000598 <__aeabi_f2d>
 8007f20:	a3c3      	add	r3, pc, #780	; (adr r3, 8008230 <CTRL_pol+0xf90>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fb8f 	bl	8000648 <__aeabi_dmul>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 f9d3 	bl	80002dc <__adddf3>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	a3be      	add	r3, pc, #760	; (adr r3, 8008238 <CTRL_pol+0xf98>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fcaa 	bl	800089c <__aeabi_ddiv>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f7f8 fe72 	bl	8000c38 <__aeabi_d2f>
 8007f54:	4603      	mov	r3, r0
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
			TL = ((TIRE_D/2.0/2.0)*((Weight*(f_feedFoard_speed + f_speedCtrl))+0.01)-(TIRE_D/2.0/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007f58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f64:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800827c <CTRL_pol+0xfdc>
 8007f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f6c:	ee17 0a90 	vmov	r0, s15
 8007f70:	f7f8 fb12 	bl	8000598 <__aeabi_f2d>
 8007f74:	a3b2      	add	r3, pc, #712	; (adr r3, 8008240 <CTRL_pol+0xfa0>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 f9af 	bl	80002dc <__adddf3>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	a3b0      	add	r3, pc, #704	; (adr r3, 8008248 <CTRL_pol+0xfa8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fb5c 	bl	8000648 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4614      	mov	r4, r2
 8007f96:	461d      	mov	r5, r3
 8007f98:	ed97 7a06 	vldr	s14, [r7, #24]
 8007f9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8007fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fac:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008278 <CTRL_pol+0xfd8>
 8007fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fbc:	ee17 0a90 	vmov	r0, s15
 8007fc0:	f7f8 faea 	bl	8000598 <__aeabi_f2d>
 8007fc4:	a39a      	add	r3, pc, #616	; (adr r3, 8008230 <CTRL_pol+0xf90>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 fb3d 	bl	8000648 <__aeabi_dmul>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 f97f 	bl	80002d8 <__aeabi_dsub>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	a395      	add	r3, pc, #596	; (adr r3, 8008238 <CTRL_pol+0xf98>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fc58 	bl	800089c <__aeabi_ddiv>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 fe20 	bl	8000c38 <__aeabi_d2f>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	633b      	str	r3, [r7, #48]	; 0x30
			Ir = (TR-0.0255/1000.0)/Torque_constant;
 8007ffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ffe:	f7f8 facb 	bl	8000598 <__aeabi_f2d>
 8008002:	a393      	add	r3, pc, #588	; (adr r3, 8008250 <CTRL_pol+0xfb0>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 f966 	bl	80002d8 <__aeabi_dsub>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	a390      	add	r3, pc, #576	; (adr r3, 8008258 <CTRL_pol+0xfb8>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 fc3f 	bl	800089c <__aeabi_ddiv>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	f7f8 fe07 	bl	8000c38 <__aeabi_d2f>
 800802a:	4603      	mov	r3, r0
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
			Il = (TL+0.0255/1000.0)/Torque_constant;
 800802e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008030:	f7f8 fab2 	bl	8000598 <__aeabi_f2d>
 8008034:	a386      	add	r3, pc, #536	; (adr r3, 8008250 <CTRL_pol+0xfb0>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f94f 	bl	80002dc <__adddf3>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4610      	mov	r0, r2
 8008044:	4619      	mov	r1, r3
 8008046:	a384      	add	r3, pc, #528	; (adr r3, 8008258 <CTRL_pol+0xfb8>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 fc26 	bl	800089c <__aeabi_ddiv>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	f7f8 fdee 	bl	8000c38 <__aeabi_d2f>
 800805c:	4603      	mov	r3, r0
 800805e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
	f_duty10_R = FF_BALANCE_R*(Motor_Register*Ir+f_MotorR_AngleS*0.001033/1000.0/2.0/PI)/get_battLv();	
 8008060:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008064:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8008280 <CTRL_pol+0xfe0>
 8008068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800806c:	ee17 0a90 	vmov	r0, s15
 8008070:	f7f8 fa92 	bl	8000598 <__aeabi_f2d>
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	4b82      	ldr	r3, [pc, #520]	; (8008284 <CTRL_pol+0xfe4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f7f8 fa8b 	bl	8000598 <__aeabi_f2d>
 8008082:	a377      	add	r3, pc, #476	; (adr r3, 8008260 <CTRL_pol+0xfc0>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 fade 	bl	8000648 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <CTRL_pol+0xfe8>)
 800809a:	f7f8 fbff 	bl	800089c <__aeabi_ddiv>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080ae:	f7f8 fbf5 	bl	800089c <__aeabi_ddiv>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	a36b      	add	r3, pc, #428	; (adr r3, 8008268 <CTRL_pol+0xfc8>)
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 fbec 	bl	800089c <__aeabi_ddiv>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4620      	mov	r0, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	f7f8 f906 	bl	80002dc <__adddf3>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	f004 feba 	bl	800ce50 <get_battLv>
 80080dc:	ee10 3a10 	vmov	r3, s0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7f8 fa59 	bl	8000598 <__aeabi_f2d>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 fbd5 	bl	800089c <__aeabi_ddiv>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4610      	mov	r0, r2
 80080f8:	4619      	mov	r1, r3
 80080fa:	f7f8 fd9d 	bl	8000c38 <__aeabi_d2f>
 80080fe:	4603      	mov	r3, r0
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
	f_duty10_L = FF_BALANCE_L*(Motor_Register*Il+f_MotorL_AngleS*0.001033/1000.0/2.0/PI)/get_battLv();	
 8008102:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008106:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008280 <CTRL_pol+0xfe0>
 800810a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800810e:	ee17 0a90 	vmov	r0, s15
 8008112:	f7f8 fa41 	bl	8000598 <__aeabi_f2d>
 8008116:	4604      	mov	r4, r0
 8008118:	460d      	mov	r5, r1
 800811a:	4b5c      	ldr	r3, [pc, #368]	; (800828c <CTRL_pol+0xfec>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 fa3a 	bl	8000598 <__aeabi_f2d>
 8008124:	a34e      	add	r3, pc, #312	; (adr r3, 8008260 <CTRL_pol+0xfc0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 fa8d 	bl	8000648 <__aeabi_dmul>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	4b53      	ldr	r3, [pc, #332]	; (8008288 <CTRL_pol+0xfe8>)
 800813c:	f7f8 fbae 	bl	800089c <__aeabi_ddiv>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4610      	mov	r0, r2
 8008146:	4619      	mov	r1, r3
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008150:	f7f8 fba4 	bl	800089c <__aeabi_ddiv>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	a342      	add	r3, pc, #264	; (adr r3, 8008268 <CTRL_pol+0xfc8>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 fb9b 	bl	800089c <__aeabi_ddiv>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 f8b5 	bl	80002dc <__adddf3>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4614      	mov	r4, r2
 8008178:	461d      	mov	r5, r3
 800817a:	f004 fe69 	bl	800ce50 <get_battLv>
 800817e:	ee10 3a10 	vmov	r3, s0
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 fa08 	bl	8000598 <__aeabi_f2d>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4620      	mov	r0, r4
 800818e:	4629      	mov	r1, r5
 8008190:	f7f8 fb84 	bl	800089c <__aeabi_ddiv>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	f7f8 fd4c 	bl	8000c38 <__aeabi_d2f>
 80081a0:	4603      	mov	r3, r0
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28

	templog1 = f_floorfriction;//f_duty10_R;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3a      	ldr	r2, [pc, #232]	; (8008290 <CTRL_pol+0xff0>)
 80081a8:	6013      	str	r3, [r2, #0]
	templog2 = f_angleSpeedCtrl;//f_duty10_L;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	4a39      	ldr	r2, [pc, #228]	; (8008294 <CTRL_pol+0xff4>)
 80081ae:	6013      	str	r3, [r2, #0]
//	templog1 = DIST_getNowVal(DIST_SEN_L_SIDE);
//	templog2 = DIST_getNowVal(DIST_SEN_R_SIDE);

	escape_wait = escape_wait+0.001;
 80081b0:	4b39      	ldr	r3, [pc, #228]	; (8008298 <CTRL_pol+0xff8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7f8 f9ef 	bl	8000598 <__aeabi_f2d>
 80081ba:	a32d      	add	r3, pc, #180	; (adr r3, 8008270 <CTRL_pol+0xfd0>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 f88c 	bl	80002dc <__adddf3>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4610      	mov	r0, r2
 80081ca:	4619      	mov	r1, r3
 80081cc:	f7f8 fd34 	bl	8000c38 <__aeabi_d2f>
 80081d0:	4603      	mov	r3, r0
 80081d2:	4a31      	ldr	r2, [pc, #196]	; (8008298 <CTRL_pol+0xff8>)
 80081d4:	6013      	str	r3, [r2, #0]
	CTRL_outMot( f_duty10_R, f_duty10_L );				// モータへ出力
 80081d6:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80081da:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80081de:	f7fe ffcb 	bl	8007178 <CTRL_outMot>

	f_Time += 0.001;
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <CTRL_pol+0xffc>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7f8 f9d6 	bl	8000598 <__aeabi_f2d>
 80081ec:	a320      	add	r3, pc, #128	; (adr r3, 8008270 <CTRL_pol+0xfd0>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 f873 	bl	80002dc <__adddf3>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	f7f8 fd1b 	bl	8000c38 <__aeabi_d2f>
 8008202:	4603      	mov	r3, r0
 8008204:	4a25      	ldr	r2, [pc, #148]	; (800829c <CTRL_pol+0xffc>)
 8008206:	6013      	str	r3, [r2, #0]

	/* 壁切れチェック */
	if( MOT_getWallEdgeType() == MOT_WALL_EDGE_RIGHT ){
 8008208:	f004 fcb6 	bl	800cb78 <MOT_getWallEdgeType>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d146      	bne.n	80082a0 <CTRL_pol+0x1000>

		/* 壁抜け */
		if( DIST_isWall_R_SIDE() == FALSE ){
 8008212:	f005 f9bf 	bl	800d594 <DIST_isWall_R_SIDE>
 8008216:	4603      	mov	r3, r0
 8008218:	f083 0301 	eor.w	r3, r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d050      	beq.n	80082c4 <CTRL_pol+0x1024>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8008222:	2001      	movs	r0, #1
 8008224:	f004 fcb4 	bl	800cb90 <MOT_setWallEdge>
 8008228:	e04c      	b.n	80082c4 <CTRL_pol+0x1024>
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w
 8008230:	090e2dab 	.word	0x090e2dab
 8008234:	3fc4b9b3 	.word	0x3fc4b9b3
 8008238:	c0000000 	.word	0xc0000000
 800823c:	400ccccc 	.word	0x400ccccc
 8008240:	47ae147b 	.word	0x47ae147b
 8008244:	3f847ae1 	.word	0x3f847ae1
 8008248:	a0000000 	.word	0xa0000000
 800824c:	3f699999 	.word	0x3f699999
 8008250:	a821f299 	.word	0xa821f299
 8008254:	3efabd1a 	.word	0x3efabd1a
 8008258:	40000000 	.word	0x40000000
 800825c:	3f4376d5 	.word	0x3f4376d5
 8008260:	4ddf86e4 	.word	0x4ddf86e4
 8008264:	3f50ecb7 	.word	0x3f50ecb7
 8008268:	00000000 	.word	0x00000000
 800826c:	400921fa 	.word	0x400921fa
 8008270:	d2f1a9fc 	.word	0xd2f1a9fc
 8008274:	3f50624d 	.word	0x3f50624d
 8008278:	369a59b3 	.word	0x369a59b3
 800827c:	3c9374bc 	.word	0x3c9374bc
 8008280:	4099999a 	.word	0x4099999a
 8008284:	2000023c 	.word	0x2000023c
 8008288:	408f4000 	.word	0x408f4000
 800828c:	20000240 	.word	0x20000240
 8008290:	20000b20 	.word	0x20000b20
 8008294:	200006e8 	.word	0x200006e8
 8008298:	20000b08 	.word	0x20000b08
 800829c:	2000021c 	.word	0x2000021c
		}
	}
	else if( MOT_getWallEdgeType() == MOT_WALL_EDGE_LEFT ){
 80082a0:	f004 fc6a 	bl	800cb78 <MOT_getWallEdgeType>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d10c      	bne.n	80082c4 <CTRL_pol+0x1024>

		/* 壁抜け */
		if( DIST_isWall_L_SIDE() == FALSE ){
 80082aa:	f005 f989 	bl	800d5c0 <DIST_isWall_L_SIDE>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f083 0301 	eor.w	r3, r3, #1
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <CTRL_pol+0x1024>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 80082ba:	2001      	movs	r0, #1
 80082bc:	f004 fc68 	bl	800cb90 <MOT_setWallEdge>
 80082c0:	e000      	b.n	80082c4 <CTRL_pol+0x1024>
		 return;		// 制御無効状態
 80082c2:	bf00      	nop
			SetLED(0x10);
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
		}
	}
*/
}
 80082c4:	3740      	adds	r7, #64	; 0x40
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080082cc <Failsafe_flag>:

void Failsafe_flag(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
	bl_failsafe = TRUE;
 80082d0:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <Failsafe_flag+0x14>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	701a      	strb	r2, [r3, #0]
	SetLED(0x1F);
 80082d6:	201f      	movs	r0, #31
 80082d8:	f7f9 fe76 	bl	8001fc8 <SetLED>
}
 80082dc:	bf00      	nop
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200002a4 	.word	0x200002a4

080082e4 <Failsafe_flag_off>:

void Failsafe_flag_off(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
	bl_failsafe = FALSE;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <Failsafe_flag_off+0x14>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	200002a4 	.word	0x200002a4

080082fc <SYS_isOutOfCtrl>:

bool SYS_isOutOfCtrl( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
	return bl_failsafe;
 8008300:	4b03      	ldr	r3, [pc, #12]	; (8008310 <SYS_isOutOfCtrl+0x14>)
 8008302:	781b      	ldrb	r3, [r3, #0]
}
 8008304:	4618      	mov	r0, r3
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200002a4 	.word	0x200002a4

08008314 <DCM_setDirCw>:
 */

#include "hal/DCM.h"

void DCM_setDirCw( enDCM_ID en_id )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <DCM_setDirCw+0x18>
		Set_MOT0(1);	//tmp
 8008324:	2001      	movs	r0, #1
 8008326:	f7f9 ff3b 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(0);	//tmp

	}
}
 800832a:	e002      	b.n	8008332 <DCM_setDirCw+0x1e>
		Set_MOT1(0);	//tmp
 800832c:	2000      	movs	r0, #0
 800832e:	f7f9 ff51 	bl	80021d4 <Set_MOT1>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <DCM_setDirCcw>:

void DCM_setDirCcw( enDCM_ID en_id )
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	4603      	mov	r3, r0
 8008342:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <DCM_setDirCcw+0x18>
		Set_MOT0(0);	//tmp
 800834a:	2000      	movs	r0, #0
 800834c:	f7f9 ff28 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(1);	//tmp
	}
}
 8008350:	e002      	b.n	8008358 <DCM_setDirCcw+0x1e>
		Set_MOT1(1);	//tmp
 8008352:	2001      	movs	r0, #1
 8008354:	f7f9 ff3e 	bl	80021d4 <Set_MOT1>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <DCM_brakeMot>:

void DCM_brakeMot( enDCM_ID en_id )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
	/* 停止設定 */
	if( en_id == DCM_R ){			// 右
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d103      	bne.n	8008378 <DCM_brakeMot+0x18>
		Set_DutyTIM2(0);
 8008370:	2000      	movs	r0, #0
 8008372:	f7fc fd89 	bl	8004e88 <Set_DutyTIM2>
	}
	else{							// 左
		Set_DutyTIM3(0);
	}
}
 8008376:	e002      	b.n	800837e <DCM_brakeMot+0x1e>
		Set_DutyTIM3(0);
 8008378:	2000      	movs	r0, #0
 800837a:	f7fc fdc5 	bl	8004f08 <Set_DutyTIM3>
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <DCM_staMot>:

void DCM_staMot( enDCM_ID en_id )
{	
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	71fb      	strb	r3, [r7, #7]
	/* タイマスタート */
	if( en_id == DCM_R ){			// 右
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <DCM_staMot+0x16>
		Enable_TIM2();
 8008396:	f7fc fd63 	bl	8004e60 <Enable_TIM2>
	}
	else{							// 左
	   Enable_TIM3();
	}
}
 800839a:	e001      	b.n	80083a0 <DCM_staMot+0x1a>
	   Enable_TIM3();
 800839c:	f7fc fd68 	bl	8004e70 <Enable_TIM3>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <DCM_staMotAll>:

void DCM_staMotAll( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
	DCM_staMot(DCM_R);									// 右モータON
 80083ac:	2000      	movs	r0, #0
 80083ae:	f7ff ffea 	bl	8008386 <DCM_staMot>
	DCM_staMot(DCM_L);									// 左モータON
 80083b2:	2001      	movs	r0, #1
 80083b4:	f7ff ffe7 	bl	8008386 <DCM_staMot>
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}

080083bc <DCM_setPwmDuty>:

void DCM_setPwmDuty( enDCM_ID en_id, uint16_t us_duty10 )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	460a      	mov	r2, r1
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	4613      	mov	r3, r2
 80083ca:	80bb      	strh	r3, [r7, #4]
	/* PWM設定 */
	if( en_id == DCM_R ){				// 右
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d115      	bne.n	80083fe <DCM_setPwmDuty+0x42>

		if( 0 == us_duty10 ){			// Duty0%設定
 80083d2:	88bb      	ldrh	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <DCM_setPwmDuty+0x26>
			DCM_brakeMot( en_id );
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff ffc0 	bl	8008360 <DCM_brakeMot>
			}
			Set_DutyTIM3(us_duty10);
			DCM_staMot( en_id );		// 回転開始
		}
	}
}
 80083e0:	e022      	b.n	8008428 <DCM_setPwmDuty+0x6c>
			if(us_duty10<50){
 80083e2:	88bb      	ldrh	r3, [r7, #4]
 80083e4:	2b31      	cmp	r3, #49	; 0x31
 80083e6:	d801      	bhi.n	80083ec <DCM_setPwmDuty+0x30>
				us_duty10 = 50;
 80083e8:	2332      	movs	r3, #50	; 0x32
 80083ea:	80bb      	strh	r3, [r7, #4]
			Set_DutyTIM2(us_duty10);
 80083ec:	88bb      	ldrh	r3, [r7, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fc fd4a 	bl	8004e88 <Set_DutyTIM2>
			DCM_staMot( en_id );		// 回転開始
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff ffc5 	bl	8008386 <DCM_staMot>
}
 80083fc:	e014      	b.n	8008428 <DCM_setPwmDuty+0x6c>
		if( 0 == us_duty10 ){			// Duty0%
 80083fe:	88bb      	ldrh	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <DCM_setPwmDuty+0x52>
			DCM_brakeMot( en_id );
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff ffaa 	bl	8008360 <DCM_brakeMot>
}
 800840c:	e00c      	b.n	8008428 <DCM_setPwmDuty+0x6c>
			if(us_duty10<50){
 800840e:	88bb      	ldrh	r3, [r7, #4]
 8008410:	2b31      	cmp	r3, #49	; 0x31
 8008412:	d801      	bhi.n	8008418 <DCM_setPwmDuty+0x5c>
				us_duty10 = 50;
 8008414:	2332      	movs	r3, #50	; 0x32
 8008416:	80bb      	strh	r3, [r7, #4]
			Set_DutyTIM3(us_duty10);
 8008418:	88bb      	ldrh	r3, [r7, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fc fd74 	bl	8004f08 <Set_DutyTIM3>
			DCM_staMot( en_id );		// 回転開始
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff ffaf 	bl	8008386 <DCM_staMot>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <Get_encoder_value>:
uint16_t ENC_R_CNT;
uint16_t ENC_L_CNT_old;
uint16_t ENC_R_CNT_old;

uint16_t Get_encoder_value(en_endir dir)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) return ENC_L_CNT;
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <Get_encoder_value+0x16>
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <Get_encoder_value+0x28>)
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	e001      	b.n	800844a <Get_encoder_value+0x1a>
	else return ENC_R_CNT;
 8008446:	4b05      	ldr	r3, [pc, #20]	; (800845c <Get_encoder_value+0x2c>)
 8008448:	881b      	ldrh	r3, [r3, #0]
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	200013d8 	.word	0x200013d8
 800845c:	200013dc 	.word	0x200013dc

08008460 <MA702_ReadByte>:

void MA702_ReadByte(en_endir dir)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
	encoderdir = dir;
 800846a:	4a0a      	ldr	r2, [pc, #40]	; (8008494 <MA702_ReadByte+0x34>)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	7013      	strb	r3, [r2, #0]
	SetSPI2TransmitData(0,0x00);
 8008470:	2100      	movs	r1, #0
 8008472:	2000      	movs	r0, #0
 8008474:	f7fb fd14 	bl	8003ea0 <SetSPI2TransmitData>
	SetSPI2TransmitData(1,0x00);
 8008478:	2100      	movs	r1, #0
 800847a:	2001      	movs	r0, #1
 800847c:	f7fb fd10 	bl	8003ea0 <SetSPI2TransmitData>

	SPI2_DMA_Communication(2,encoderdir);
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <MA702_ReadByte+0x34>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	2002      	movs	r0, #2
 8008488:	f7fb fc72 	bl	8003d70 <SPI2_DMA_Communication>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000b1a 	.word	0x20000b1a

08008498 <recv_spi_encoder>:

void recv_spi_encoder(en_endir dir)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
	MA702_ReadByte(dir);
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff ffdb 	bl	8008460 <MA702_ReadByte>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <Set_encoder_data>:

void Set_encoder_data(en_endir dir)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) ENC_L_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d112      	bne.n	80084ea <Set_encoder_data+0x36>
 80084c4:	2000      	movs	r0, #0
 80084c6:	f7fb fcdb 	bl	8003e80 <Get_SPI2ReciveData>
 80084ca:	4603      	mov	r3, r0
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	b21c      	sxth	r4, r3
 80084d0:	2001      	movs	r0, #1
 80084d2:	f7fb fcd5 	bl	8003e80 <Get_SPI2ReciveData>
 80084d6:	4603      	mov	r3, r0
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	b21b      	sxth	r3, r3
 80084de:	4323      	orrs	r3, r4
 80084e0:	b21b      	sxth	r3, r3
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <Set_encoder_data+0x64>)
 80084e6:	801a      	strh	r2, [r3, #0]
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
}
 80084e8:	e011      	b.n	800850e <Set_encoder_data+0x5a>
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 80084ea:	2000      	movs	r0, #0
 80084ec:	f7fb fcc8 	bl	8003e80 <Get_SPI2ReciveData>
 80084f0:	4603      	mov	r3, r0
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	b21c      	sxth	r4, r3
 80084f6:	2001      	movs	r0, #1
 80084f8:	f7fb fcc2 	bl	8003e80 <Get_SPI2ReciveData>
 80084fc:	4603      	mov	r3, r0
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	b2db      	uxtb	r3, r3
 8008502:	b21b      	sxth	r3, r3
 8008504:	4323      	orrs	r3, r4
 8008506:	b21b      	sxth	r3, r3
 8008508:	b29a      	uxth	r2, r3
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <Set_encoder_data+0x68>)
 800850c:	801a      	strh	r2, [r3, #0]
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	200013d8 	.word	0x200013d8
 800851c:	200013dc 	.word	0x200013dc

08008520 <Runmode_check>:


uint8_t Runmode_check( enDCM_ID en_id )
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
	if(en_id == DCM_R){
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d117      	bne.n	8008560 <Runmode_check+0x40>
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Right)) ){
 8008530:	4b1a      	ldr	r3, [pc, #104]	; (800859c <Runmode_check+0x7c>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b06      	cmp	r3, #6
 8008536:	d00f      	beq.n	8008558 <Runmode_check+0x38>
 8008538:	4b18      	ldr	r3, [pc, #96]	; (800859c <Runmode_check+0x7c>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b07      	cmp	r3, #7
 800853e:	d007      	beq.n	8008550 <Runmode_check+0x30>
 8008540:	4b16      	ldr	r3, [pc, #88]	; (800859c <Runmode_check+0x7c>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b08      	cmp	r3, #8
 8008546:	d003      	beq.n	8008550 <Runmode_check+0x30>
 8008548:	4b14      	ldr	r3, [pc, #80]	; (800859c <Runmode_check+0x7c>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b09      	cmp	r3, #9
 800854e:	d105      	bne.n	800855c <Runmode_check+0x3c>
 8008550:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <Runmode_check+0x80>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <Runmode_check+0x3c>
			return(0);
 8008558:	2300      	movs	r3, #0
 800855a:	e018      	b.n	800858e <Runmode_check+0x6e>
		}
		else{
			return(1);
 800855c:	2301      	movs	r3, #1
 800855e:	e016      	b.n	800858e <Runmode_check+0x6e>
		}
	}
	else{
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Left)) ){
 8008560:	4b0e      	ldr	r3, [pc, #56]	; (800859c <Runmode_check+0x7c>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b06      	cmp	r3, #6
 8008566:	d00f      	beq.n	8008588 <Runmode_check+0x68>
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <Runmode_check+0x7c>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b07      	cmp	r3, #7
 800856e:	d007      	beq.n	8008580 <Runmode_check+0x60>
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <Runmode_check+0x7c>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d003      	beq.n	8008580 <Runmode_check+0x60>
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <Runmode_check+0x7c>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b09      	cmp	r3, #9
 800857e:	d105      	bne.n	800858c <Runmode_check+0x6c>
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <Runmode_check+0x80>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <Runmode_check+0x6c>
			return(0);
 8008588:	2300      	movs	r3, #0
 800858a:	e000      	b.n	800858e <Runmode_check+0x6e>
		}
		else{
			return(1);
 800858c:	2301      	movs	r3, #1
		}
	}
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	200006ee 	.word	0x200006ee
 80085a0:	20000700 	.word	0x20000700

080085a4 <ENC_GetDiv>:

void ENC_GetDiv( int32_t* p_r, int32_t* p_l )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	int32_t cntR;
	int32_t cntL;
	int32_t cntR_dif;
	int32_t cntL_dif;
//	recv_spi_encoder();
	cntR_dif = ENC_R_CNT - ENC_R_CNT_old;
 80085ae:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <ENC_GetDiv+0x108>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <ENC_GetDiv+0x10c>)
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	60fb      	str	r3, [r7, #12]
	cntL_dif = ENC_L_CNT_old - ENC_L_CNT;
 80085bc:	4b3d      	ldr	r3, [pc, #244]	; (80086b4 <ENC_GetDiv+0x110>)
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	4b3d      	ldr	r3, [pc, #244]	; (80086b8 <ENC_GetDiv+0x114>)
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	60bb      	str	r3, [r7, #8]

	//モードを使って正逆をチェックして加算方法を決める
	if(Runmode_check(DCM_R) == 1){	//正方向カウント
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7ff ffa8 	bl	8008520 <Runmode_check>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d114      	bne.n	8008600 <ENC_GetDiv+0x5c>
		//右
		if(cntR_dif<(-32768>>4)){
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80085dc:	da04      	bge.n	80085e8 <ENC_GetDiv+0x44>
			cntR = cntR_dif + (65536>>4);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e01f      	b.n	8008628 <ENC_GetDiv+0x84>
		}
		else if (cntR_dif>(32768>>4)){
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ee:	dd04      	ble.n	80085fa <ENC_GetDiv+0x56>
			cntR = cntR_dif - (65536>>4);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e016      	b.n	8008628 <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e013      	b.n	8008628 <ENC_GetDiv+0x84>
		}
	}
	else{
		if(cntR_dif>(32768>>4)){
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008606:	dd04      	ble.n	8008612 <ENC_GetDiv+0x6e>
			cntR = cntR_dif - (65536>>4);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e00a      	b.n	8008628 <ENC_GetDiv+0x84>
		}
		else if(cntR_dif<(-32768>>4)){
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8008618:	da04      	bge.n	8008624 <ENC_GetDiv+0x80>
			cntR = cntR_dif + (65536>>4);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	e001      	b.n	8008628 <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	617b      	str	r3, [r7, #20]
		}
	}

	if(Runmode_check(DCM_L) == 1){
 8008628:	2001      	movs	r0, #1
 800862a:	f7ff ff79 	bl	8008520 <Runmode_check>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d114      	bne.n	800865e <ENC_GetDiv+0xba>
		//左
		if(cntL_dif<(-32768>>4)){
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 800863a:	da04      	bge.n	8008646 <ENC_GetDiv+0xa2>
			cntL = cntL_dif + (65536>>4);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	613b      	str	r3, [r7, #16]
 8008644:	e01f      	b.n	8008686 <ENC_GetDiv+0xe2>
		}
		else if (cntL_dif >(32768>>4)){
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864c:	dd04      	ble.n	8008658 <ENC_GetDiv+0xb4>
			cntL = cntL_dif -(65536>>4);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e016      	b.n	8008686 <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	e013      	b.n	8008686 <ENC_GetDiv+0xe2>
		}
	}
	else{
		if(cntL_dif>(32768>>4)){
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008664:	dd04      	ble.n	8008670 <ENC_GetDiv+0xcc>
			cntL = cntL_dif - (65536>>4);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	e00a      	b.n	8008686 <ENC_GetDiv+0xe2>
		}
		else if(cntL_dif<(-32768>>4)){
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8008676:	da04      	bge.n	8008682 <ENC_GetDiv+0xde>
			cntL = cntL_dif + (65536>>4);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	e001      	b.n	8008686 <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	613b      	str	r3, [r7, #16]
		}
	}

	*p_r = cntR;		//2^12(4096) LSB/1回転
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	601a      	str	r2, [r3, #0]
	*p_l = cntL;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	601a      	str	r2, [r3, #0]

	ENC_R_CNT_old = ENC_R_CNT;
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <ENC_GetDiv+0x108>)
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <ENC_GetDiv+0x10c>)
 8008698:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <ENC_GetDiv+0x114>)
 800869c:	881a      	ldrh	r2, [r3, #0]
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <ENC_GetDiv+0x110>)
 80086a0:	801a      	strh	r2, [r3, #0]
}
 80086a2:	bf00      	nop
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200013dc 	.word	0x200013dc
 80086b0:	200013de 	.word	0x200013de
 80086b4:	200013da 	.word	0x200013da
 80086b8:	200013d8 	.word	0x200013d8

080086bc <ENC_setref>:

void ENC_setref(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
	ENC_R_CNT_old = ENC_R_CNT;
 80086c0:	4b06      	ldr	r3, [pc, #24]	; (80086dc <ENC_setref+0x20>)
 80086c2:	881a      	ldrh	r2, [r3, #0]
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <ENC_setref+0x24>)
 80086c6:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 80086c8:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <ENC_setref+0x28>)
 80086ca:	881a      	ldrh	r2, [r3, #0]
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <ENC_setref+0x2c>)
 80086ce:	801a      	strh	r2, [r3, #0]
}
 80086d0:	bf00      	nop
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	200013dc 	.word	0x200013dc
 80086e0:	200013de 	.word	0x200013de
 80086e4:	200013d8 	.word	0x200013d8
 80086e8:	200013da 	.word	0x200013da

080086ec <ICM_42688_whoami>:
uint16_t Get_s_gyro(void)
{
	return s_GyroVal;
}
void ICM_42688_whoami(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
	SetSPI1TransmitData(0,(0x75 | 0x80));
 80086f0:	21f5      	movs	r1, #245	; 0xf5
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7fb fb10 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, 0x00);
 80086f8:	2100      	movs	r1, #0
 80086fa:	2001      	movs	r0, #1
 80086fc:	f7fb fb0c 	bl	8003d18 <SetSPI1TransmitData>
	SPI1_DMA_Communication(2);
 8008700:	2002      	movs	r0, #2
 8008702:	f7fb fa89 	bl	8003c18 <SPI1_DMA_Communication>
	printf("who am i = %x\r\n",Get_SPI1ReciveData(1));
 8008706:	2001      	movs	r0, #1
 8008708:	f7fb faf6 	bl	8003cf8 <Get_SPI1ReciveData>
 800870c:	4603      	mov	r3, r0
 800870e:	4619      	mov	r1, r3
 8008710:	4802      	ldr	r0, [pc, #8]	; (800871c <ICM_42688_whoami+0x30>)
 8008712:	f00e f80f 	bl	8016734 <iprintf>

}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	0801bad8 	.word	0x0801bad8

08008720 <ICM_42688_WriteByte>:

void ICM_42688_WriteByte(uint8_t reg,uint8_t data)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	460a      	mov	r2, r1
 800872a:	71fb      	strb	r3, [r7, #7]
 800872c:	4613      	mov	r3, r2
 800872e:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0, reg);
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	4619      	mov	r1, r3
 8008734:	2000      	movs	r0, #0
 8008736:	f7fb faef 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, data);
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	4619      	mov	r1, r3
 800873e:	2001      	movs	r0, #1
 8008740:	f7fb faea 	bl	8003d18 <SetSPI1TransmitData>

	SPI1_DMA_Communication(2);
 8008744:	2002      	movs	r0, #2
 8008746:	f7fb fa67 	bl	8003c18 <SPI1_DMA_Communication>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <ICM_42688_ReadByte>:

void ICM_42688_ReadByte(uint8_t reg,uint8_t length)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	4603      	mov	r3, r0
 800875a:	460a      	mov	r2, r1
 800875c:	71fb      	strb	r3, [r7, #7]
 800875e:	4613      	mov	r3, r2
 8008760:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0,(reg | 0x80));
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008768:	b2db      	uxtb	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	2000      	movs	r0, #0
 800876e:	f7fb fad3 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1,0x00);
 8008772:	2100      	movs	r1, #0
 8008774:	2001      	movs	r0, #1
 8008776:	f7fb facf 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(2,0x00);
 800877a:	2100      	movs	r1, #0
 800877c:	2002      	movs	r0, #2
 800877e:	f7fb facb 	bl	8003d18 <SetSPI1TransmitData>

	SPI1_DMA_Communication(3);
 8008782:	2003      	movs	r0, #3
 8008784:	f7fb fa48 	bl	8003c18 <SPI1_DMA_Communication>
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <ICM_42688_init>:


void ICM_42688_init(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
	uint8_t reg78 = 0x4E;	//pwr_mgmt0
 8008796:	234e      	movs	r3, #78	; 0x4e
 8008798:	71fb      	strb	r3, [r7, #7]
	uint16_t reg107 = 0x6B;
	uint16_t reg106 = 0x6A;
	uint16_t reg27 = 0x1B;
	uint16_t reg28 = 0x1C;
*/
	ICM_42688_WriteByte(reg78,0x0F);
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	210f      	movs	r1, #15
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff ffbe 	bl	8008720 <ICM_42688_WriteByte>
	LL_mDelay(1);
 80087a4:	2001      	movs	r0, #1
 80087a6:	f00d f8d3 	bl	8015950 <LL_mDelay>
	ICM_42688_WriteByte(reg27,0x18);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg28,0x18);
	LL_mDelay(1);
*/
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <ICM_42688_GyroRead_DMA>:

void ICM_42688_GyroRead_DMA(uint8_t reg) //reg 29 2A
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	4603      	mov	r3, r0
 80087ba:	71fb      	strb	r3, [r7, #7]
	ICM_42688_ReadByte(reg,3);
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2103      	movs	r1, #3
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff ffc6 	bl	8008752 <ICM_42688_ReadByte>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <ICM_42688_GyroData>:

void ICM_42688_GyroData(void)
{
 80087d0:	b598      	push	{r3, r4, r7, lr}
 80087d2:	af00      	add	r7, sp, #0
	s_GyroVal=((uint16_t)Get_SPI1ReciveData(1)<<8|Get_SPI1ReciveData(2));
 80087d4:	2001      	movs	r0, #1
 80087d6:	f7fb fa8f 	bl	8003cf8 <Get_SPI1ReciveData>
 80087da:	4603      	mov	r3, r0
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	b21c      	sxth	r4, r3
 80087e0:	2002      	movs	r0, #2
 80087e2:	f7fb fa89 	bl	8003cf8 <Get_SPI1ReciveData>
 80087e6:	4603      	mov	r3, r0
 80087e8:	b21b      	sxth	r3, r3
 80087ea:	4323      	orrs	r3, r4
 80087ec:	b21a      	sxth	r2, r3
 80087ee:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <ICM_42688_GyroData+0x28>)
 80087f0:	801a      	strh	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	bd98      	pop	{r3, r4, r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000702 	.word	0x20000702

080087fc <GYRO_SetRef>:

void GYRO_SetRef( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
	uint16_t i;
	uint32_t ul_ref = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	603b      	str	r3, [r7, #0]

	/* データサンプリング */
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8008806:	2300      	movs	r3, #0
 8008808:	80fb      	strh	r3, [r7, #6]
 800880a:	e00c      	b.n	8008826 <GYRO_SetRef+0x2a>
		ul_ref += (uint32_t)s_GyroVal;
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <GYRO_SetRef+0x50>)
 800880e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008812:	461a      	mov	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	4413      	add	r3, r2
 8008818:	603b      	str	r3, [r7, #0]
		LL_mDelay(1);
 800881a:	2001      	movs	r0, #1
 800881c:	f00d f898 	bl	8015950 <LL_mDelay>
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	3301      	adds	r3, #1
 8008824:	80fb      	strh	r3, [r7, #6]
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	2bc7      	cmp	r3, #199	; 0xc7
 800882a:	d9ef      	bls.n	800880c <GYRO_SetRef+0x10>
	}

	/* 基準値算出（平均値） */
	l_GyroRef = (ul_ref * 100) / GYRO_REF_NUM ;		// 精度を100倍にする
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2264      	movs	r2, #100	; 0x64
 8008830:	fb02 f303 	mul.w	r3, r2, r3
 8008834:	4a06      	ldr	r2, [pc, #24]	; (8008850 <GYRO_SetRef+0x54>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	099b      	lsrs	r3, r3, #6
 800883c:	461a      	mov	r2, r3
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <GYRO_SetRef+0x58>)
 8008840:	601a      	str	r2, [r3, #0]
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000702 	.word	0x20000702
 8008850:	51eb851f 	.word	0x51eb851f
 8008854:	20000b1c 	.word	0x20000b1c

08008858 <GYRO_getSpeedErr>:

float GYRO_getSpeedErr( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
	int32_t  l_val = (int32_t)s_GyroVal * 100 ;				// 精度を100倍にする
 800885e:	4b22      	ldr	r3, [pc, #136]	; (80088e8 <GYRO_getSpeedErr+0x90>)
 8008860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008864:	461a      	mov	r2, r3
 8008866:	2364      	movs	r3, #100	; 0x64
 8008868:	fb02 f303 	mul.w	r3, r2, r3
 800886c:	60fb      	str	r3, [r7, #12]
	int32_t  l_err = l_val - l_GyroRef ;
 800886e:	4b1f      	ldr	r3, [pc, #124]	; (80088ec <GYRO_getSpeedErr+0x94>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	60bb      	str	r3, [r7, #8]
	float f_res;

	/* 角速度の偏差算出 */
//	if( ( l_err < -0.01 * 100 ) || ( 0.01 * 100 < l_err ) ){
		f_res = (float)l_err /16.4 / 100.0 * DEG_TO_RAD;		
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008882:	ee17 0a90 	vmov	r0, s15
 8008886:	f7f7 fe87 	bl	8000598 <__aeabi_f2d>
 800888a:	a313      	add	r3, pc, #76	; (adr r3, 80088d8 <GYRO_getSpeedErr+0x80>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f8 f804 	bl	800089c <__aeabi_ddiv>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4610      	mov	r0, r2
 800889a:	4619      	mov	r1, r3
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <GYRO_getSpeedErr+0x98>)
 80088a2:	f7f7 fffb 	bl	800089c <__aeabi_ddiv>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4610      	mov	r0, r2
 80088ac:	4619      	mov	r1, r3
 80088ae:	a30c      	add	r3, pc, #48	; (adr r3, 80088e0 <GYRO_getSpeedErr+0x88>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fec8 	bl	8000648 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4610      	mov	r0, r2
 80088be:	4619      	mov	r1, r3
 80088c0:	f7f8 f9ba 	bl	8000c38 <__aeabi_d2f>
 80088c4:	4603      	mov	r3, r0
 80088c6:	607b      	str	r3, [r7, #4]
//	}
/*	else{
		f_res = 0;									// [deg/s]
	}
*/
	return f_res;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	ee07 3a90 	vmov	s15, r3
}
 80088ce:	eeb0 0a67 	vmov.f32	s0, s15
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	66666666 	.word	0x66666666
 80088dc:	40306666 	.word	0x40306666
 80088e0:	60000000 	.word	0x60000000
 80088e4:	3f91df49 	.word	0x3f91df49
 80088e8:	20000702 	.word	0x20000702
 80088ec:	20000b1c 	.word	0x20000b1c
 80088f0:	40590000 	.word	0x40590000

080088f4 <GYRO_getNowAngle>:

float GYRO_getNowAngle( void )
{
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
	return f_GyroNowAngle;
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <GYRO_getNowAngle+0x18>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	ee07 3a90 	vmov	s15, r3
}
 8008900:	eeb0 0a67 	vmov.f32	s0, s15
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	200002dc 	.word	0x200002dc

08008910 <GYRO_getRef>:

float GYRO_getRef( void )
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
	return l_GyroRef;
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <GYRO_getRef+0x1c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008920:	eeb0 0a67 	vmov.f32	s0, s15
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	20000b1c 	.word	0x20000b1c

08008930 <GYRO_Pol>:

void GYRO_Pol( void )
{
 8008930:	b5b0      	push	{r4, r5, r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
	float f_speed;

	/* 現在の角度を更新する */
	f_speed = GYRO_getSpeedErr();			// 角速度取得 (0.001sec毎の角速度)
 8008936:	f7ff ff8f 	bl	8008858 <GYRO_getSpeedErr>
 800893a:	ed87 0a01 	vstr	s0, [r7, #4]
	f_GyroNowAngle += f_speed / 1000.0;		// 角度設定   (0.001sec毎に加算するため)
 800893e:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <GYRO_Pol+0x98>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f7f7 fe28 	bl	8000598 <__aeabi_f2d>
 8008948:	4604      	mov	r4, r0
 800894a:	460d      	mov	r5, r1
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7f7 fe23 	bl	8000598 <__aeabi_f2d>
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <GYRO_Pol+0x9c>)
 8008958:	f7f7 ffa0 	bl	800089c <__aeabi_ddiv>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	f7f7 fcba 	bl	80002dc <__adddf3>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4610      	mov	r0, r2
 800896e:	4619      	mov	r1, r3
 8008970:	f7f8 f962 	bl	8000c38 <__aeabi_d2f>
 8008974:	4603      	mov	r3, r0
 8008976:	4a14      	ldr	r2, [pc, #80]	; (80089c8 <GYRO_Pol+0x98>)
 8008978:	6013      	str	r3, [r2, #0]

	/* エラーチェック */
	if( bl_ErrChk == TRUE ){
 800897a:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <GYRO_Pol+0xa0>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01d      	beq.n	80089be <GYRO_Pol+0x8e>

		f_ErrChkAngle += f_speed/1000.0;		// 角度設定   (0.001sec毎に加算するため)
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <GYRO_Pol+0xa4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fe06 	bl	8000598 <__aeabi_f2d>
 800898c:	4604      	mov	r4, r0
 800898e:	460d      	mov	r5, r1
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7f7 fe01 	bl	8000598 <__aeabi_f2d>
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <GYRO_Pol+0x9c>)
 800899c:	f7f7 ff7e 	bl	800089c <__aeabi_ddiv>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fc98 	bl	80002dc <__adddf3>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4610      	mov	r0, r2
 80089b2:	4619      	mov	r1, r3
 80089b4:	f7f8 f940 	bl	8000c38 <__aeabi_d2f>
 80089b8:	4603      	mov	r3, r0
 80089ba:	4a06      	ldr	r2, [pc, #24]	; (80089d4 <GYRO_Pol+0xa4>)
 80089bc:	6013      	str	r3, [r2, #0]

			Failsafe_flag();
		}
*/
	}
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bdb0      	pop	{r4, r5, r7, pc}
 80089c6:	bf00      	nop
 80089c8:	200002dc 	.word	0x200002dc
 80089cc:	408f4000 	.word	0x408f4000
 80089d0:	200006ef 	.word	0x200006ef
 80089d4:	20000b0c 	.word	0x20000b0c

080089d8 <GYRO_staErrChkAngle>:
//	f_NowAccel = Accel_getSpeedErr();			// 加速度取得 (0.001sec毎の加速度)

}

void GYRO_staErrChkAngle( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <GYRO_staErrChkAngle+0x1c>)
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
	bl_ErrChk = TRUE;
 80089e4:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <GYRO_staErrChkAngle+0x20>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	701a      	strb	r2, [r3, #0]

}
 80089ea:	bf00      	nop
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20000b0c 	.word	0x20000b0c
 80089f8:	200006ef 	.word	0x200006ef

080089fc <GYRO_endErrChkAngle>:

void GYRO_endErrChkAngle( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8008a00:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <GYRO_endErrChkAngle+0x1c>)
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <GYRO_endErrChkAngle+0x20>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]

}
 8008a0e:	bf00      	nop
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000b0c 	.word	0x20000b0c
 8008a1c:	200006ef 	.word	0x200006ef

08008a20 <HAL_init>:
#include "hal/init.h"



void HAL_init( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
	TIME_init();
 8008a24:	f000 f834 	bl	8008a90 <TIME_init>
	/* ジャイロセンサ */
	f_GyroNowAngle = 0;			// ジャイロセンサの現在角度(0にしても探索他は動くが、宴会とかtestrunとかは動かない)修正済みと思われる
 8008a28:	4b15      	ldr	r3, [pc, #84]	; (8008a80 <HAL_init+0x60>)
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
	l_GyroRef  = 0;				// ジャイロセンサの基準値
 8008a30:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <HAL_init+0x64>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]

	f_ErrChkAngle = 0;
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <HAL_init+0x68>)
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <HAL_init+0x6c>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
	DIST_init();
 8008a44:	f004 fa4e 	bl	800cee4 <DIST_init>
	MAP_Goal_init();
 8008a48:	f008 f980 	bl	8010d4c <MAP_Goal_init>
	ADC4_Start();
 8008a4c:	f7f8 fe5e 	bl	800170c <ADC4_Start>
  	ADC3_Start();
 8008a50:	f7f8 fe68 	bl	8001724 <ADC3_Start>
  	ADC2_Start();
 8008a54:	f7f8 fe72 	bl	800173c <ADC2_Start>
  	ADC1_Start();
 8008a58:	f7f8 fe7c 	bl	8001754 <ADC1_Start>

  	SPI1_Start();
 8008a5c:	f7fb f8c4 	bl	8003be8 <SPI1_Start>
  	SPI2_Start();
 8008a60:	f7fb f96e 	bl	8003d40 <SPI2_Start>
  	ICM_42688_init();
 8008a64:	f7ff fe94 	bl	8008790 <ICM_42688_init>
  	ICM_42688_whoami();
 8008a68:	f7ff fe40 	bl	80086ec <ICM_42688_whoami>
	TIMER_init();
 8008a6c:	f7fc f9b4 	bl	8004dd8 <TIMER_init>
	SYS_start();
 8008a70:	f000 f9ce 	bl	8008e10 <SYS_start>
	MAP_init();
 8008a74:	f008 f94a 	bl	8010d0c <MAP_init>
	GYRO_SetRef();
 8008a78:	f7ff fec0 	bl	80087fc <GYRO_SetRef>
}
 8008a7c:	bf00      	nop
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	200002dc 	.word	0x200002dc
 8008a84:	20000b1c 	.word	0x20000b1c
 8008a88:	20000b0c 	.word	0x20000b0c
 8008a8c:	200006ef 	.word	0x200006ef

08008a90 <TIME_init>:

void TIME_init( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
	/* 初期化 */
	Msec_in = 0;		// 内部時計[msec]
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <TIME_init+0x20>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	801a      	strh	r2, [r3, #0]
	Sec_in  = 0;		// 内部時計[sec]
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <TIME_init+0x24>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	701a      	strb	r2, [r3, #0]
	Min_in  = 0;		// 内部時計[min]
 8008aa0:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <TIME_init+0x28>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	701a      	strb	r2, [r3, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	20000b18 	.word	0x20000b18
 8008ab4:	200006ec 	.word	0x200006ec
 8008ab8:	200002e0 	.word	0x200002e0

08008abc <log_in2>:
			float log5,float log6,
			float log7,float log8,
			float log9,float log10)/*,
			float log11,float log12)
*/
{
 8008abc:	b480      	push	{r7}
 8008abe:	b08b      	sub	sp, #44	; 0x2c
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8008ac6:	edc7 0a08 	vstr	s1, [r7, #32]
 8008aca:	ed87 1a07 	vstr	s2, [r7, #28]
 8008ace:	edc7 1a06 	vstr	s3, [r7, #24]
 8008ad2:	ed87 2a05 	vstr	s4, [r7, #20]
 8008ad6:	edc7 2a04 	vstr	s5, [r7, #16]
 8008ada:	ed87 3a03 	vstr	s6, [r7, #12]
 8008ade:	edc7 3a02 	vstr	s7, [r7, #8]
 8008ae2:	ed87 4a01 	vstr	s8, [r7, #4]
 8008ae6:	edc7 4a00 	vstr	s9, [r7]
	if((b_logflag == TRUE)&&(log_count < log_num)){
 8008aea:	4b2d      	ldr	r3, [pc, #180]	; (8008ba0 <log_in2+0xe4>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d050      	beq.n	8008b94 <log_in2+0xd8>
 8008af2:	4b2c      	ldr	r3, [pc, #176]	; (8008ba4 <log_in2+0xe8>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008afa:	d24b      	bcs.n	8008b94 <log_in2+0xd8>
		Log_1[log_count] = log1;
 8008afc:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <log_in2+0xe8>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	4a29      	ldr	r2, [pc, #164]	; (8008ba8 <log_in2+0xec>)
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b08:	601a      	str	r2, [r3, #0]
		Log_2[log_count] = log2;
 8008b0a:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <log_in2+0xe8>)
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	4a27      	ldr	r2, [pc, #156]	; (8008bac <log_in2+0xf0>)
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	601a      	str	r2, [r3, #0]
		Log_3[log_count] = log3;
 8008b18:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <log_in2+0xe8>)
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	4a24      	ldr	r2, [pc, #144]	; (8008bb0 <log_in2+0xf4>)
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	601a      	str	r2, [r3, #0]
		Log_4[log_count] = log4;
 8008b26:	4b1f      	ldr	r3, [pc, #124]	; (8008ba4 <log_in2+0xe8>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	4a22      	ldr	r2, [pc, #136]	; (8008bb4 <log_in2+0xf8>)
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	601a      	str	r2, [r3, #0]
		Log_5[log_count] = log5;
 8008b34:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <log_in2+0xe8>)
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <log_in2+0xfc>)
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	601a      	str	r2, [r3, #0]
		Log_6[log_count] = log6;
 8008b42:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <log_in2+0xe8>)
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	4a1d      	ldr	r2, [pc, #116]	; (8008bbc <log_in2+0x100>)
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	601a      	str	r2, [r3, #0]
		Log_7[log_count] = log7;
 8008b50:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <log_in2+0xe8>)
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <log_in2+0x104>)
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	601a      	str	r2, [r3, #0]
		Log_8[log_count] = log8;
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <log_in2+0xe8>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <log_in2+0x108>)
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	601a      	str	r2, [r3, #0]
		Log_9[log_count] = log9;
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <log_in2+0xe8>)
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <log_in2+0x10c>)
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
		Log_10[log_count] = log10;
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <log_in2+0xe8>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	4a13      	ldr	r2, [pc, #76]	; (8008bcc <log_in2+0x110>)
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	601a      	str	r2, [r3, #0]
/*		Log_11[log_count] = log11;
		Log_12[log_count] = log12;
*/
		log_count++;
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <log_in2+0xe8>)
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <log_in2+0xe8>)
 8008b92:	801a      	strh	r2, [r3, #0]
	}
}
 8008b94:	bf00      	nop
 8008b96:	372c      	adds	r7, #44	; 0x2c
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	200002a8 	.word	0x200002a8
 8008ba4:	200002a6 	.word	0x200002a6
 8008ba8:	200090e0 	.word	0x200090e0
 8008bac:	20006200 	.word	0x20006200
 8008bb0:	20005260 	.word	0x20005260
 8008bb4:	20002380 	.word	0x20002380
 8008bb8:	200071a0 	.word	0x200071a0
 8008bbc:	20008140 	.word	0x20008140
 8008bc0:	200042c0 	.word	0x200042c0
 8008bc4:	2000a080 	.word	0x2000a080
 8008bc8:	200013e0 	.word	0x200013e0
 8008bcc:	20003320 	.word	0x20003320

08008bd0 <log_interrupt>:

void log_interrupt ( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	ed2d 8b08 	vpush	{d8-d11}
 8008bd6:	af00      	add	r7, sp, #0
//			Get_NowDist(), Get_TrgtDist(),templog2);
/*
	log_in2(DIST_getNowVal( DIST_SEN_R_FRONT ), DIST_getNowVal( DIST_SEN_L_FRONT ),
		DIST_getNowVal( DIST_SEN_R_SIDE ), DIST_getNowVal( DIST_SEN_L_SIDE ));
*/
	log_in2(GYRO_getSpeedErr(), Get_TrgtAngleS(),
 8008bd8:	f7ff fe3e 	bl	8008858 <GYRO_getSpeedErr>
 8008bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8008be0:	f7fc fd78 	bl	80056d4 <Get_TrgtAngleS>
 8008be4:	eef0 8a40 	vmov.f32	s17, s0
 8008be8:	f7fc fd58 	bl	800569c <Get_NowAngle>
 8008bec:	eeb0 9a40 	vmov.f32	s18, s0
 8008bf0:	f7fc fd62 	bl	80056b8 <Get_TrgtAngle>
 8008bf4:	eef0 9a40 	vmov.f32	s19, s0
 8008bf8:	f7fc fd08 	bl	800560c <Get_NowSpeed>
 8008bfc:	eeb0 aa40 	vmov.f32	s20, s0
 8008c00:	f7fc fd2e 	bl	8005660 <Get_TrgtSpeed>
 8008c04:	eef0 aa40 	vmov.f32	s21, s0
 8008c08:	f7fc fd0e 	bl	8005628 <Get_NowDist>
 8008c0c:	eeb0 ba40 	vmov.f32	s22, s0
 8008c10:	f7fc fd18 	bl	8005644 <Get_TrgtDist>
 8008c14:	eef0 6a40 	vmov.f32	s13, s0
 8008c18:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <log_interrupt+0x8c>)
 8008c1a:	edd3 7a00 	vldr	s15, [r3]
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <log_interrupt+0x90>)
 8008c20:	ed93 7a00 	vldr	s14, [r3]
 8008c24:	eef0 4a47 	vmov.f32	s9, s14
 8008c28:	eeb0 4a67 	vmov.f32	s8, s15
 8008c2c:	eef0 3a66 	vmov.f32	s7, s13
 8008c30:	eeb0 3a4b 	vmov.f32	s6, s22
 8008c34:	eef0 2a6a 	vmov.f32	s5, s21
 8008c38:	eeb0 2a4a 	vmov.f32	s4, s20
 8008c3c:	eef0 1a69 	vmov.f32	s3, s19
 8008c40:	eeb0 1a49 	vmov.f32	s2, s18
 8008c44:	eef0 0a68 	vmov.f32	s1, s17
 8008c48:	eeb0 0a48 	vmov.f32	s0, s16
 8008c4c:	f7ff ff36 	bl	8008abc <log_in2>
			Get_NowAngle(),Get_TrgtAngle(),
			Get_NowSpeed(), Get_TrgtSpeed(),
			Get_NowDist(), Get_TrgtDist(),templog1,templog2);
}
 8008c50:	bf00      	nop
 8008c52:	46bd      	mov	sp, r7
 8008c54:	ecbd 8b08 	vpop	{d8-d11}
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000b20 	.word	0x20000b20
 8008c60:	200006e8 	.word	0x200006e8

08008c64 <log_flag_on>:

void log_flag_on(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
	b_logflag = TRUE;
 8008c68:	4b03      	ldr	r3, [pc, #12]	; (8008c78 <log_flag_on+0x14>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	200002a8 	.word	0x200002a8

08008c7c <log_flag_off>:

void log_flag_off(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
	b_logflag = FALSE;
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <log_flag_off+0x14>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
}
 8008c86:	bf00      	nop
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	200002a8 	.word	0x200002a8

08008c94 <log_read2>:

void log_read2(void)
{
 8008c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c98:	b0a0      	sub	sp, #128	; 0x80
 8008c9a:	af12      	add	r7, sp, #72	; 0x48
	int16_t i=0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	86fb      	strh	r3, [r7, #54]	; 0x36
		printf("%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i]);
		i++;
	}
*/
	while(i<log_num){
 8008ca0:	e094      	b.n	8008dcc <log_read2+0x138>
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008ca2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008ca6:	4a4f      	ldr	r2, [pc, #316]	; (8008de4 <log_read2+0x150>)
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7f7 fc72 	bl	8000598 <__aeabi_f2d>
 8008cb4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008cb8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008cbc:	4a4a      	ldr	r2, [pc, #296]	; (8008de8 <log_read2+0x154>)
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f7 fc67 	bl	8000598 <__aeabi_f2d>
 8008cca:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008cce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008cd2:	4a46      	ldr	r2, [pc, #280]	; (8008dec <log_read2+0x158>)
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f7 fc5c 	bl	8000598 <__aeabi_f2d>
 8008ce0:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008ce4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008ce8:	4a41      	ldr	r2, [pc, #260]	; (8008df0 <log_read2+0x15c>)
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f7 fc51 	bl	8000598 <__aeabi_f2d>
 8008cf6:	e9c7 0104 	strd	r0, r1, [r7, #16]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008cfa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008cfe:	4a3d      	ldr	r2, [pc, #244]	; (8008df4 <log_read2+0x160>)
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7f7 fc46 	bl	8000598 <__aeabi_f2d>
 8008d0c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d14:	4a38      	ldr	r2, [pc, #224]	; (8008df8 <log_read2+0x164>)
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7f7 fc3b 	bl	8000598 <__aeabi_f2d>
 8008d22:	e9c7 0100 	strd	r0, r1, [r7]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d2a:	4a34      	ldr	r2, [pc, #208]	; (8008dfc <log_read2+0x168>)
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f7 fc30 	bl	8000598 <__aeabi_f2d>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d3c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d40:	4a2f      	ldr	r2, [pc, #188]	; (8008e00 <log_read2+0x16c>)
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7f7 fc25 	bl	8000598 <__aeabi_f2d>
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4689      	mov	r9, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d56:	4a2b      	ldr	r2, [pc, #172]	; (8008e04 <log_read2+0x170>)
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f7 fc1a 	bl	8000598 <__aeabi_f2d>
 8008d64:	4604      	mov	r4, r0
 8008d66:	460d      	mov	r5, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008d68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008d6c:	4a26      	ldr	r2, [pc, #152]	; (8008e08 <log_read2+0x174>)
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f7 fc0f 	bl	8000598 <__aeabi_f2d>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008d82:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8008d86:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008d8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008d8e:	ed97 7b00 	vldr	d7, [r7]
 8008d92:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008d96:	ed97 7b02 	vldr	d7, [r7, #8]
 8008d9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8008da2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008da6:	ed97 7b06 	vldr	d7, [r7, #24]
 8008daa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dae:	ed97 7b08 	vldr	d7, [r7, #32]
 8008db2:	ed8d 7b00 	vstr	d7, [sp]
 8008db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dba:	4814      	ldr	r0, [pc, #80]	; (8008e0c <log_read2+0x178>)
 8008dbc:	f00d fcba 	bl	8016734 <iprintf>
		i++;
 8008dc0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(i<log_num){
 8008dcc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd4:	f6ff af65 	blt.w	8008ca2 <log_read2+0xe>
	}

}
 8008dd8:	bf00      	nop
 8008dda:	bf00      	nop
 8008ddc:	3738      	adds	r7, #56	; 0x38
 8008dde:	46bd      	mov	sp, r7
 8008de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008de4:	200090e0 	.word	0x200090e0
 8008de8:	20006200 	.word	0x20006200
 8008dec:	20005260 	.word	0x20005260
 8008df0:	20002380 	.word	0x20002380
 8008df4:	200071a0 	.word	0x200071a0
 8008df8:	20008140 	.word	0x20008140
 8008dfc:	200042c0 	.word	0x200042c0
 8008e00:	2000a080 	.word	0x2000a080
 8008e04:	200013e0 	.word	0x200013e0
 8008e08:	20003320 	.word	0x20003320
 8008e0c:	0801bae8 	.word	0x0801bae8

08008e10 <SYS_start>:
uint8_t		wall_hit_flag = 0; //0 = not wall_hit

extern uint8_t			SLA_count;

void SYS_start( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
	/* タイトル表示 */
	printf(" ------------------------------\r\n");
 8008e14:	4821      	ldr	r0, [pc, #132]	; (8008e9c <SYS_start+0x8c>)
 8008e16:	f00d fd29 	bl	801686c <puts>
	printf(" | Robo Name  : hankyo2       |\r\n");
 8008e1a:	4821      	ldr	r0, [pc, #132]	; (8008ea0 <SYS_start+0x90>)
 8008e1c:	f00d fd26 	bl	801686c <puts>
	printf(" | Developer  : sho sato      |\r\n");
 8008e20:	4820      	ldr	r0, [pc, #128]	; (8008ea4 <SYS_start+0x94>)
 8008e22:	f00d fd23 	bl	801686c <puts>
	printf(" | Version    : ver1          |\r\n");
 8008e26:	4820      	ldr	r0, [pc, #128]	; (8008ea8 <SYS_start+0x98>)
 8008e28:	f00d fd20 	bl	801686c <puts>
	printf(" | Project By : RT Corporation|\r\n");
 8008e2c:	481f      	ldr	r0, [pc, #124]	; (8008eac <SYS_start+0x9c>)
 8008e2e:	f00d fd1d 	bl	801686c <puts>
	printf(" ------------------------------\r\n");
 8008e32:	481a      	ldr	r0, [pc, #104]	; (8008e9c <SYS_start+0x8c>)
 8008e34:	f00d fd1a 	bl	801686c <puts>

	printf("\r\n turn 45 \r\r");
 8008e38:	481d      	ldr	r0, [pc, #116]	; (8008eb0 <SYS_start+0xa0>)
 8008e3a:	f00d fc7b 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 8008e3e:	2001      	movs	r0, #1
 8008e40:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 8008e44:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008eb4 <SYS_start+0xa4>
 8008e48:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8008eb8 <SYS_start+0xa8>
 8008e4c:	f7f9 fd20 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 8008e50:	481a      	ldr	r0, [pc, #104]	; (8008ebc <SYS_start+0xac>)
 8008e52:	f00d fc6f 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 8008e56:	2000      	movs	r0, #0
 8008e58:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 8008e5c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008ec0 <SYS_start+0xb0>
 8008e60:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008eb8 <SYS_start+0xa8>
 8008e64:	f7f9 fd14 	bl	8002890 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 8008e68:	4816      	ldr	r0, [pc, #88]	; (8008ec4 <SYS_start+0xb4>)
 8008e6a:	f00d fc63 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 8008e6e:	2002      	movs	r0, #2
 8008e70:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8008e74:	eddf 0a12 	vldr	s1, [pc, #72]	; 8008ec0 <SYS_start+0xb0>
 8008e78:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008eb8 <SYS_start+0xa8>
 8008e7c:	f7f9 fd08 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 8008e80:	4811      	ldr	r0, [pc, #68]	; (8008ec8 <SYS_start+0xb8>)
 8008e82:	f00d fc57 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );		
 8008e86:	2003      	movs	r0, #3
 8008e88:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8008e8c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8008ecc <SYS_start+0xbc>
 8008e90:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8008eb8 <SYS_start+0xa8>
 8008e94:	f7f9 fcfc 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
	PARAM_makeSra( 0.6, 1350.0f, 13.00f, SLA_135 );	
	printf("\r\n turn N90 \r\r");	
	PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
*/
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	0801bb28 	.word	0x0801bb28
 8008ea0:	0801bb4c 	.word	0x0801bb4c
 8008ea4:	0801bb70 	.word	0x0801bb70
 8008ea8:	0801bb94 	.word	0x0801bb94
 8008eac:	0801bbb8 	.word	0x0801bbb8
 8008eb0:	0801bbdc 	.word	0x0801bbdc
 8008eb4:	42c80000 	.word	0x42c80000
 8008eb8:	3e99999a 	.word	0x3e99999a
 8008ebc:	0801bbec 	.word	0x0801bbec
 8008ec0:	43480000 	.word	0x43480000
 8008ec4:	0801bbfc 	.word	0x0801bbfc
 8008ec8:	0801bc0c 	.word	0x0801bc0c
 8008ecc:	43960000 	.word	0x43960000

08008ed0 <MODE_inc>:

void MODE_inc( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
	en_Mode++;		// モードを�?�?
 8008ed4:	4b35      	ldr	r3, [pc, #212]	; (8008fac <MODE_inc+0xdc>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	4b33      	ldr	r3, [pc, #204]	; (8008fac <MODE_inc+0xdc>)
 8008ede:	701a      	strb	r2, [r3, #0]

	/* 最大値チェ�?ク */
	if( MODE_MAX == en_Mode ){
 8008ee0:	4b32      	ldr	r3, [pc, #200]	; (8008fac <MODE_inc+0xdc>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d102      	bne.n	8008eee <MODE_inc+0x1e>
		en_Mode = MODE_0;
 8008ee8:	4b30      	ldr	r3, [pc, #192]	; (8008fac <MODE_inc+0xdc>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	701a      	strb	r2, [r3, #0]
	}

	/* モード表示 */
	switch( en_Mode ){
 8008eee:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <MODE_inc+0xdc>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b07      	cmp	r3, #7
 8008ef4:	d857      	bhi.n	8008fa6 <MODE_inc+0xd6>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <MODE_inc+0x2c>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f1d 	.word	0x08008f1d
 8008f00:	08008f29 	.word	0x08008f29
 8008f04:	08008f3b 	.word	0x08008f3b
 8008f08:	08008f4d 	.word	0x08008f4d
 8008f0c:	08008f5f 	.word	0x08008f5f
 8008f10:	08008f71 	.word	0x08008f71
 8008f14:	08008f83 	.word	0x08008f83
 8008f18:	08008f95 	.word	0x08008f95

		case MODE_0:
			SetLED(0x00 | now_mode);
 8008f1c:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <MODE_inc+0xe0>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f9 f851 	bl	8001fc8 <SetLED>
			break;
 8008f26:	e03f      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_1:
			SetLED((0x01<<1) | now_mode);
 8008f28:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <MODE_inc+0xe0>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f9 f848 	bl	8001fc8 <SetLED>
			break;
 8008f38:	e036      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_2:
			SetLED((0x02<<1) | now_mode);
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <MODE_inc+0xe0>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f043 0304 	orr.w	r3, r3, #4
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f9 f83f 	bl	8001fc8 <SetLED>
			break;
 8008f4a:	e02d      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_3:
			SetLED((0x03<<1) | now_mode);
 8008f4c:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <MODE_inc+0xe0>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f043 0306 	orr.w	r3, r3, #6
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7f9 f836 	bl	8001fc8 <SetLED>
			break;
 8008f5c:	e024      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_4:
			SetLED((0x04<<1) | now_mode);
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <MODE_inc+0xe0>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f043 0308 	orr.w	r3, r3, #8
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f9 f82d 	bl	8001fc8 <SetLED>
			break;
 8008f6e:	e01b      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_5:
			SetLED((0x05<<1) | now_mode);
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <MODE_inc+0xe0>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	f043 030a 	orr.w	r3, r3, #10
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7f9 f824 	bl	8001fc8 <SetLED>
			break;
 8008f80:	e012      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_6:
			SetLED((0x06<<1) | now_mode);
 8008f82:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <MODE_inc+0xe0>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	f043 030c 	orr.w	r3, r3, #12
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f9 f81b 	bl	8001fc8 <SetLED>
			break;
 8008f92:	e009      	b.n	8008fa8 <MODE_inc+0xd8>

		case MODE_7:
			SetLED((0x07<<1) | now_mode);
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <MODE_inc+0xe0>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f043 030e 	orr.w	r3, r3, #14
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f9 f812 	bl	8001fc8 <SetLED>
			break;
 8008fa4:	e000      	b.n	8008fa8 <MODE_inc+0xd8>

		default:
			break;
 8008fa6:	bf00      	nop
	}
}
 8008fa8:	bf00      	nop
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	2000b020 	.word	0x2000b020
 8008fb0:	2000000c 	.word	0x2000000c

08008fb4 <MODE_exe_m0>:

void MODE_exe_m0( void )
{
 8008fb4:	b5b0      	push	{r4, r5, r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;
	GYRO_SetRef();
 8008fba:	f7ff fc1f 	bl	80087fc <GYRO_SetRef>
	/* モード表示 */
	switch( en_Mode ){
 8008fbe:	4bea      	ldr	r3, [pc, #936]	; (8009368 <MODE_exe_m0+0x3b4>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b07      	cmp	r3, #7
 8008fc4:	f200 81cc 	bhi.w	8009360 <MODE_exe_m0+0x3ac>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <MODE_exe_m0+0x1c>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008ff1 	.word	0x08008ff1
 8008fd4:	0800904d 	.word	0x0800904d
 8008fd8:	0800908d 	.word	0x0800908d
 8008fdc:	08009099 	.word	0x08009099
 8008fe0:	08009101 	.word	0x08009101
 8008fe4:	08009193 	.word	0x08009193
 8008fe8:	080092d3 	.word	0x080092d3
 8008fec:	08009359 	.word	0x08009359

		case MODE_0:
			SetLED(0x0e);
 8008ff0:	200e      	movs	r0, #14
 8008ff2:	f7f8 ffe9 	bl	8001fc8 <SetLED>
			CTRL_clrNowData();
 8008ff6:	f7fc fc31 	bl	800585c <CTRL_clrNowData>
			CTRL_clrData();
 8008ffa:	f7fc fbc7 	bl	800578c <CTRL_clrData>
//			LL_TIM_EnableIT_UPDATE(TIM4);
//			LL_TIM_EnableCounter(TIM4);
			printf("\n");
 8008ffe:	200a      	movs	r0, #10
 8009000:	f00d fbb0 	bl	8016764 <putchar>
			LL_mDelay(1000);
 8009004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009008:	f00c fca2 	bl	8015950 <LL_mDelay>
			GYRO_SetRef();
 800900c:	f7ff fbf6 	bl	80087fc <GYRO_SetRef>
			while(1){
				printf("  gyro%5.2f ref%5.2f \r", 
					GYRO_getNowAngle(),GYRO_getRef()
 8009010:	f7ff fc70 	bl	80088f4 <GYRO_getNowAngle>
 8009014:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 8009018:	4618      	mov	r0, r3
 800901a:	f7f7 fabd 	bl	8000598 <__aeabi_f2d>
 800901e:	4604      	mov	r4, r0
 8009020:	460d      	mov	r5, r1
					GYRO_getNowAngle(),GYRO_getRef()
 8009022:	f7ff fc75 	bl	8008910 <GYRO_getRef>
 8009026:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 800902a:	4618      	mov	r0, r3
 800902c:	f7f7 fab4 	bl	8000598 <__aeabi_f2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	e9cd 2300 	strd	r2, r3, [sp]
 8009038:	4622      	mov	r2, r4
 800903a:	462b      	mov	r3, r5
 800903c:	48cb      	ldr	r0, [pc, #812]	; (800936c <MODE_exe_m0+0x3b8>)
 800903e:	f00d fb79 	bl	8016734 <iprintf>
				);
				LL_mDelay( 500 );
 8009042:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009046:	f00c fc83 	bl	8015950 <LL_mDelay>
				printf("  gyro%5.2f ref%5.2f \r", 
 800904a:	e7e1      	b.n	8009010 <MODE_exe_m0+0x5c>
			}
			break;

		case MODE_1:
			SetLED(0x0e);
 800904c:	200e      	movs	r0, #14
 800904e:	f7f8 ffbb 	bl	8001fc8 <SetLED>
			printf("\n");
 8009052:	200a      	movs	r0, #10
 8009054:	f00d fb86 	bl	8016764 <putchar>
			LL_mDelay(1000);
 8009058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800905c:	f00c fc78 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 8009060:	2000      	movs	r0, #0
 8009062:	f7f8 ffb1 	bl	8001fc8 <SetLED>
			while(1){
				printf("  ENC_R%5d ENC_L%5d \r", 
					Get_encoder_value(enR),Get_encoder_value(enL)
 8009066:	2001      	movs	r0, #1
 8009068:	f7ff f9e2 	bl	8008430 <Get_encoder_value>
 800906c:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 800906e:	461c      	mov	r4, r3
					Get_encoder_value(enR),Get_encoder_value(enL)
 8009070:	2000      	movs	r0, #0
 8009072:	f7ff f9dd 	bl	8008430 <Get_encoder_value>
 8009076:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 8009078:	461a      	mov	r2, r3
 800907a:	4621      	mov	r1, r4
 800907c:	48bc      	ldr	r0, [pc, #752]	; (8009370 <MODE_exe_m0+0x3bc>)
 800907e:	f00d fb59 	bl	8016734 <iprintf>
				);
				LL_mDelay( 500 );
 8009082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009086:	f00c fc63 	bl	8015950 <LL_mDelay>
				printf("  ENC_R%5d ENC_L%5d \r", 
 800908a:	e7ec      	b.n	8009066 <MODE_exe_m0+0xb2>
			}
			break;

		case MODE_2:
			SetLED(0x0e);
 800908c:	200e      	movs	r0, #14
 800908e:	f7f8 ff9b 	bl	8001fc8 <SetLED>
			log_read2();
 8009092:	f7ff fdff 	bl	8008c94 <log_read2>
			break;
 8009096:	e164      	b.n	8009362 <MODE_exe_m0+0x3ae>

		case MODE_3:
			SetLED(0x0e);
 8009098:	200e      	movs	r0, #14
 800909a:	f7f8 ff95 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 800909e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8009374 <MODE_exe_m0+0x3c0>
 80090a2:	f003 f8cd 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラロー�?開始速度設�?
 80090a6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8009374 <MODE_exe_m0+0x3c0>
 80090aa:	f003 f8ab 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普�?
 80090ae:	2100      	movs	r1, #0
 80090b0:	2015      	movs	r0, #21
 80090b2:	f7f9 fb51 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
 80090b6:	2100      	movs	r1, #0
 80090b8:	2016      	movs	r0, #22
 80090ba:	f7f9 fb4d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
 80090be:	2100      	movs	r1, #0
 80090c0:	2017      	movs	r0, #23
 80090c2:	f7f9 fb49 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7f8 ff7e 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 80090cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d0:	f00c fc3e 	bl	8015950 <LL_mDelay>
			CTRL_clrNowData();
 80090d4:	f7fc fbc2 	bl	800585c <CTRL_clrNowData>
			CTRL_clrData();
 80090d8:	f7fc fb58 	bl	800578c <CTRL_clrData>
			log_flag_on();
 80090dc:	f7ff fdc2 	bl	8008c64 <log_flag_on>
			DIST_Front_Wall_correction();
 80090e0:	f003 fdc6 	bl	800cc70 <DIST_Front_Wall_correction>
			log_flag_off();
 80090e4:	f7ff fdca 	bl	8008c7c <log_flag_off>
			CTRL_stop();
 80090e8:	f7fc fb40 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// �u���[�L
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7ff f937 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// �u���[�L
 80090f2:	2001      	movs	r0, #1
 80090f4:	f7ff f934 	bl	8008360 <DCM_brakeMot>
			SetLED(0x0e);
 80090f8:	200e      	movs	r0, #14
 80090fa:	f7f8 ff65 	bl	8001fc8 <SetLED>
			break;
 80090fe:	e130      	b.n	8009362 <MODE_exe_m0+0x3ae>

		case MODE_4:
			SetLED(0x0e);
 8009100:	200e      	movs	r0, #14
 8009102:	f7f8 ff61 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009106:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8009374 <MODE_exe_m0+0x3c0>
 800910a:	f003 f899 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラロー�?開始速度設�?
 800910e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8009374 <MODE_exe_m0+0x3c0>
 8009112:	f003 f877 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普�?
 8009116:	2100      	movs	r1, #0
 8009118:	2015      	movs	r0, #21
 800911a:	f7f9 fb1d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普�?
 800911e:	2100      	movs	r1, #0
 8009120:	2016      	movs	r0, #22
 8009122:	f7f9 fb19 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普�?
 8009126:	2100      	movs	r1, #0
 8009128:	2017      	movs	r0, #23
 800912a:	f7f9 fb15 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800912e:	2000      	movs	r0, #0
 8009130:	f7f8 ff4a 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8009134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009138:	f00c fc0a 	bl	8015950 <LL_mDelay>
			CTRL_clrNowData();
 800913c:	f7fc fb8e 	bl	800585c <CTRL_clrNowData>
			CTRL_clrData();
 8009140:	f7fc fb24 	bl	800578c <CTRL_clrData>
			log_flag_on();
 8009144:	f7ff fd8e 	bl	8008c64 <log_flag_on>
/*			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goBlock_Const(1);
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_90 ));
			MOT_goBlock_FinSpeed(0.5, 0);
*/
			MOT_goBlock_FinSpeed(0.5,SEARCH_SPEED);
 8009148:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8009374 <MODE_exe_m0+0x3c0>
 800914c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009150:	f002 fbfa 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_L45S_S2N,PARAM_getSra( SLA_45 ));
 8009154:	2001      	movs	r0, #1
 8009156:	f7f9 ff55 	bl	8003004 <PARAM_getSra>
 800915a:	4603      	mov	r3, r0
 800915c:	4619      	mov	r1, r3
 800915e:	2003      	movs	r0, #3
 8009160:	f003 f8e6 	bl	800c330 <MOT_goSla>
			MOT_goSkewBlock_FinSpeed(0.5,SEARCH_SPEED);
 8009164:	eddf 0a83 	vldr	s1, [pc, #524]	; 8009374 <MODE_exe_m0+0x3c0>
 8009168:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800916c:	f002 fbfe 	bl	800b96c <MOT_goSkewBlock_FinSpeed>
			MOT_goSla(MOT_R135S_N2S,PARAM_getSra( SLA_135 ));
 8009170:	2002      	movs	r0, #2
 8009172:	f7f9 ff47 	bl	8003004 <PARAM_getSra>
 8009176:	4603      	mov	r3, r0
 8009178:	4619      	mov	r1, r3
 800917a:	200a      	movs	r0, #10
 800917c:	f003 f8d8 	bl	800c330 <MOT_goSla>
			MOT_goBlock_FinSpeed(0.5, 0);
 8009180:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8009378 <MODE_exe_m0+0x3c4>
 8009184:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009188:	f002 fbde 	bl	800b948 <MOT_goBlock_FinSpeed>
			log_flag_off();
 800918c:	f7ff fd76 	bl	8008c7c <log_flag_off>
			break;
 8009190:	e0e7      	b.n	8009362 <MODE_exe_m0+0x3ae>

		case MODE_5:
			SetLED(0x0e);
 8009192:	200e      	movs	r0, #14
 8009194:	f7f8 ff18 	bl	8001fc8 <SetLED>

			printf("\r\n turn 45 \r\r");
 8009198:	4878      	ldr	r0, [pc, #480]	; (800937c <MODE_exe_m0+0x3c8>)
 800919a:	f00d facb 	bl	8016734 <iprintf>
			PARAM_makeSra( 0.6, 550.0f, 7.50f, SLA_45 );
 800919e:	2001      	movs	r0, #1
 80091a0:	eeb1 1a0e 	vmov.f32	s2, #30	; 0x40f00000  7.5
 80091a4:	eddf 0a76 	vldr	s1, [pc, #472]	; 8009380 <MODE_exe_m0+0x3cc>
 80091a8:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8009384 <MODE_exe_m0+0x3d0>
 80091ac:	f7f9 fb70 	bl	8002890 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 80091b0:	4875      	ldr	r0, [pc, #468]	; (8009388 <MODE_exe_m0+0x3d4>)
 80091b2:	f00d fabf 	bl	8016734 <iprintf>
			PARAM_makeSra( 0.6, 900.0f, 10.00f, SLA_90 );	
 80091b6:	2000      	movs	r0, #0
 80091b8:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80091bc:	eddf 0a73 	vldr	s1, [pc, #460]	; 800938c <MODE_exe_m0+0x3d8>
 80091c0:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8009384 <MODE_exe_m0+0x3d0>
 80091c4:	f7f9 fb64 	bl	8002890 <PARAM_makeSra>
			printf("\r\n turn 135 \r\r");	
 80091c8:	4871      	ldr	r0, [pc, #452]	; (8009390 <MODE_exe_m0+0x3dc>)
 80091ca:	f00d fab3 	bl	8016734 <iprintf>
			PARAM_makeSra( 0.6, 1350.0f, 13.00f, SLA_135 );	
 80091ce:	2002      	movs	r0, #2
 80091d0:	eeb2 1a0a 	vmov.f32	s2, #42	; 0x41500000  13.0
 80091d4:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8009394 <MODE_exe_m0+0x3e0>
 80091d8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8009384 <MODE_exe_m0+0x3d0>
 80091dc:	f7f9 fb58 	bl	8002890 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 80091e0:	486d      	ldr	r0, [pc, #436]	; (8009398 <MODE_exe_m0+0x3e4>)
 80091e2:	f00d faa7 	bl	8016734 <iprintf>
			PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
 80091e6:	2003      	movs	r0, #3
 80091e8:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 80091ec:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800939c <MODE_exe_m0+0x3e8>
 80091f0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8009384 <MODE_exe_m0+0x3d0>
 80091f4:	f7f9 fb4c 	bl	8002890 <PARAM_makeSra>

			MOT_setTrgtSpeed(SEARCH_SPEED*2.0);
 80091f8:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8009384 <MODE_exe_m0+0x3d0>
 80091fc:	f003 f820 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED*2.0 );							// スラロー�?開始速度設�?
 8009200:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8009384 <MODE_exe_m0+0x3d0>
 8009204:	f002 fffe 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
 8009208:	2104      	movs	r1, #4
 800920a:	2015      	movs	r0, #21
 800920c:	f7f9 faa4 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							// [旋回] 速度普�?
 8009210:	2104      	movs	r1, #4
 8009212:	2016      	movs	r0, #22
 8009214:	f7f9 faa0 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							// [スラ] 速度普�?
 8009218:	2104      	movs	r1, #4
 800921a:	2017      	movs	r0, #23
 800921c:	f7f9 fa9c 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009220:	2000      	movs	r0, #0
 8009222:	f7f8 fed1 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8009226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800922a:	f00c fb91 	bl	8015950 <LL_mDelay>
			CTRL_clrNowData();
 800922e:	f7fc fb15 	bl	800585c <CTRL_clrNowData>
			CTRL_clrData();
 8009232:	f7fc faab 	bl	800578c <CTRL_clrData>
			log_flag_on();
 8009236:	f7ff fd15 	bl	8008c64 <log_flag_on>

			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED*2.0);
 800923a:	eddf 0a52 	vldr	s1, [pc, #328]	; 8009384 <MODE_exe_m0+0x3d0>
 800923e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009242:	f002 fb81 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_90 ));
 8009246:	2000      	movs	r0, #0
 8009248:	f7f9 fedc 	bl	8003004 <PARAM_getSra>
 800924c:	4603      	mov	r3, r0
 800924e:	4619      	mov	r1, r3
 8009250:	2000      	movs	r0, #0
 8009252:	f003 f86d 	bl	800c330 <MOT_goSla>
			MOT_goBlock_FinSpeed(0.5, 0);
 8009256:	eddf 0a48 	vldr	s1, [pc, #288]	; 8009378 <MODE_exe_m0+0x3c4>
 800925a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800925e:	f002 fb73 	bl	800b948 <MOT_goBlock_FinSpeed>
/*
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R135S_S2N, PARAM_getSra( SLA_135 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/
			log_flag_off();
 8009262:	f7ff fd0b 	bl	8008c7c <log_flag_off>

			PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 8009266:	2001      	movs	r0, #1
 8009268:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 800926c:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80093a0 <MODE_exe_m0+0x3ec>
 8009270:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8009374 <MODE_exe_m0+0x3c0>
 8009274:	f7f9 fb0c 	bl	8002890 <PARAM_makeSra>
			printf("\r\n turn 90 \r\r");		
 8009278:	4843      	ldr	r0, [pc, #268]	; (8009388 <MODE_exe_m0+0x3d4>)
 800927a:	f00d fa5b 	bl	8016734 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 800927e:	2000      	movs	r0, #0
 8009280:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 8009284:	eddf 0a47 	vldr	s1, [pc, #284]	; 80093a4 <MODE_exe_m0+0x3f0>
 8009288:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8009374 <MODE_exe_m0+0x3c0>
 800928c:	f7f9 fb00 	bl	8002890 <PARAM_makeSra>
		//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			printf("\r\n turn 135 \r\r");	
 8009290:	483f      	ldr	r0, [pc, #252]	; (8009390 <MODE_exe_m0+0x3dc>)
 8009292:	f00d fa4f 	bl	8016734 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 8009296:	2002      	movs	r0, #2
 8009298:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800929c:	eddf 0a41 	vldr	s1, [pc, #260]	; 80093a4 <MODE_exe_m0+0x3f0>
 80092a0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8009374 <MODE_exe_m0+0x3c0>
 80092a4:	f7f9 faf4 	bl	8002890 <PARAM_makeSra>
			printf("\r\n turn N90 \r\r");	
 80092a8:	483b      	ldr	r0, [pc, #236]	; (8009398 <MODE_exe_m0+0x3e4>)
 80092aa:	f00d fa43 	bl	8016734 <iprintf>
			PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );		
 80092ae:	2003      	movs	r0, #3
 80092b0:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80092b4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80093a8 <MODE_exe_m0+0x3f4>
 80092b8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8009374 <MODE_exe_m0+0x3c0>
 80092bc:	f7f9 fae8 	bl	8002890 <PARAM_makeSra>

			MOT_setTrgtSpeed(SEARCH_SPEED);
 80092c0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009374 <MODE_exe_m0+0x3c0>
 80092c4:	f002 ffbc 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラロー�?開始速度設�?
 80092c8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8009374 <MODE_exe_m0+0x3c0>
 80092cc:	f002 ff9a 	bl	800c204 <MOT_setSuraStaSpeed>
			break;
 80092d0:	e047      	b.n	8009362 <MODE_exe_m0+0x3ae>

		case MODE_6:
			SetLED(0x0e);
 80092d2:	200e      	movs	r0, #14
 80092d4:	f7f8 fe78 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 80092d8:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8009374 <MODE_exe_m0+0x3c0>
 80092dc:	f002 ffb0 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラロー�?開始速度設�?
 80092e0:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8009374 <MODE_exe_m0+0x3c0>
 80092e4:	f002 ff8e 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							// [直進] 速度普�?
 80092e8:	2104      	movs	r1, #4
 80092ea:	2015      	movs	r0, #21
 80092ec:	f7f9 fa34 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							// [旋回] 速度普�?
 80092f0:	2104      	movs	r1, #4
 80092f2:	2016      	movs	r0, #22
 80092f4:	f7f9 fa30 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							// [スラ] 速度普�?
 80092f8:	2104      	movs	r1, #4
 80092fa:	2017      	movs	r0, #23
 80092fc:	f7f9 fa2c 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009300:	2000      	movs	r0, #0
 8009302:	f7f8 fe61 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8009306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800930a:	f00c fb21 	bl	8015950 <LL_mDelay>
			CTRL_clrNowData();
 800930e:	f7fc faa5 	bl	800585c <CTRL_clrNowData>
			CTRL_clrData();
 8009312:	f7fc fa3b 	bl	800578c <CTRL_clrData>
			log_flag_on();
 8009316:	f7ff fca5 	bl	8008c64 <log_flag_on>
			MOT_goBlock_FinSpeed(3.0, 0);
			MOT_setTrgtSpeed( SEARCH_SPEED );
*/
//			MOT_turn(MOT_R90);
			
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
 800931a:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009374 <MODE_exe_m0+0x3c0>
 800931e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009322:	f002 fb11 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_90 ));
 8009326:	2000      	movs	r0, #0
 8009328:	f7f9 fe6c 	bl	8003004 <PARAM_getSra>
 800932c:	4603      	mov	r3, r0
 800932e:	4619      	mov	r1, r3
 8009330:	2000      	movs	r0, #0
 8009332:	f002 fffd 	bl	800c330 <MOT_goSla>
			MOT_goSla(MOT_L90S, PARAM_getSra( SLA_90 ));
 8009336:	2000      	movs	r0, #0
 8009338:	f7f9 fe64 	bl	8003004 <PARAM_getSra>
 800933c:	4603      	mov	r3, r0
 800933e:	4619      	mov	r1, r3
 8009340:	2001      	movs	r0, #1
 8009342:	f002 fff5 	bl	800c330 <MOT_goSla>
			MOT_goBlock_FinSpeed(0.5, 0);
 8009346:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009378 <MODE_exe_m0+0x3c4>
 800934a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800934e:	f002 fafb 	bl	800b948 <MOT_goBlock_FinSpeed>
/*
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_135 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/
			log_flag_off();
 8009352:	f7ff fc93 	bl	8008c7c <log_flag_off>
			break;
 8009356:	e004      	b.n	8009362 <MODE_exe_m0+0x3ae>

		case MODE_7:
			SetLED(0x0e);
 8009358:	200e      	movs	r0, #14
 800935a:	f7f8 fe35 	bl	8001fc8 <SetLED>
			//cant use
			break;
 800935e:	e000      	b.n	8009362 <MODE_exe_m0+0x3ae>

		default:
			break;
 8009360:	bf00      	nop
	}
}
 8009362:	bf00      	nop
 8009364:	46bd      	mov	sp, r7
 8009366:	bdb0      	pop	{r4, r5, r7, pc}
 8009368:	2000b020 	.word	0x2000b020
 800936c:	0801bc1c 	.word	0x0801bc1c
 8009370:	0801bc34 	.word	0x0801bc34
 8009374:	3e99999a 	.word	0x3e99999a
 8009378:	00000000 	.word	0x00000000
 800937c:	0801bbdc 	.word	0x0801bbdc
 8009380:	44098000 	.word	0x44098000
 8009384:	3f19999a 	.word	0x3f19999a
 8009388:	0801bbec 	.word	0x0801bbec
 800938c:	44610000 	.word	0x44610000
 8009390:	0801bbfc 	.word	0x0801bbfc
 8009394:	44a8c000 	.word	0x44a8c000
 8009398:	0801bc0c 	.word	0x0801bc0c
 800939c:	44bb8000 	.word	0x44bb8000
 80093a0:	42c80000 	.word	0x42c80000
 80093a4:	43480000 	.word	0x43480000
 80093a8:	43960000 	.word	0x43960000

080093ac <MODE_exe_m1>:

void MODE_exe_m1( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 80093be:	f7ff fa1d 	bl	80087fc <GYRO_SetRef>

	switch( en_Mode ){
 80093c2:	4b30      	ldr	r3, [pc, #192]	; (8009484 <MODE_exe_m1+0xd8>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b07      	cmp	r3, #7
 80093c8:	d857      	bhi.n	800947a <MODE_exe_m1+0xce>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <MODE_exe_m1+0x24>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	080093f1 	.word	0x080093f1
 80093d4:	080093f9 	.word	0x080093f9
 80093d8:	08009405 	.word	0x08009405
 80093dc:	08009411 	.word	0x08009411
 80093e0:	0800941d 	.word	0x0800941d
 80093e4:	08009429 	.word	0x08009429
 80093e8:	0800946b 	.word	0x0800946b
 80093ec:	08009473 	.word	0x08009473

		case MODE_0:
			SetLED(0x0e);
 80093f0:	200e      	movs	r0, #14
 80093f2:	f7f8 fde9 	bl	8001fc8 <SetLED>
			break;
 80093f6:	e041      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_1:
			SetLED(0x0e);
 80093f8:	200e      	movs	r0, #14
 80093fa:	f7f8 fde5 	bl	8001fc8 <SetLED>
			map_erase();
 80093fe:	f007 fc79 	bl	8010cf4 <map_erase>
			break;
 8009402:	e03b      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_2:
			SetLED(0x0e);
 8009404:	200e      	movs	r0, #14
 8009406:	f7f8 fddf 	bl	8001fc8 <SetLED>
			MAP_showLog();
 800940a:	f007 fcd3 	bl	8010db4 <MAP_showLog>
			break;
 800940e:	e035      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_3:
			SetLED(0x0e);
 8009410:	200e      	movs	r0, #14
 8009412:	f7f8 fdd9 	bl	8001fc8 <SetLED>
			map_copy();
 8009416:	f007 fc47 	bl	8010ca8 <map_copy>
			break;
 800941a:	e02f      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_4:
			SetLED(0x0e);
 800941c:	200e      	movs	r0, #14
 800941e:	f7f8 fdd3 	bl	8001fc8 <SetLED>
			map_write();
 8009422:	f007 fc2d 	bl	8010c80 <map_write>
			break;
 8009426:	e029      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_5:
			SetLED(0x0e);
 8009428:	200e      	movs	r0, #14
 800942a:	f7f8 fdcd 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	2000      	movs	r0, #0
 8009434:	f007 fc9c 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 8009438:	2001      	movs	r0, #1
 800943a:	f008 ffef 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800943e:	2201      	movs	r2, #1
 8009440:	2109      	movs	r1, #9
 8009442:	2006      	movs	r0, #6
 8009444:	f008 f934 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009448:	1dfb      	adds	r3, r7, #7
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	2309      	movs	r3, #9
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2306      	movs	r3, #6
 8009452:	2200      	movs	r2, #0
 8009454:	2100      	movs	r1, #0
 8009456:	2000      	movs	r0, #0
 8009458:	f005 f8ba 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800945c:	f005 fb10 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009460:	f005 fc8a 	bl	800ed78 <MAP_makeSkewCmdList>
			MAP_showCmdLog();
 8009464:	f005 f864 	bl	800e530 <MAP_showCmdLog>
			break;
 8009468:	e008      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_6:
			SetLED(0x0e);
 800946a:	200e      	movs	r0, #14
 800946c:	f7f8 fdac 	bl	8001fc8 <SetLED>
			break;
 8009470:	e004      	b.n	800947c <MODE_exe_m1+0xd0>

		case MODE_7:
			SetLED(0x0e);
 8009472:	200e      	movs	r0, #14
 8009474:	f7f8 fda8 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8009478:	e000      	b.n	800947c <MODE_exe_m1+0xd0>

		default:
			break;
 800947a:	bf00      	nop
	}
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	2000b020 	.word	0x2000b020

08009488 <MODE_exe_m2>:

void MODE_exe_m2( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	f04f 0300 	mov.w	r3, #0
 8009496:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 800949a:	4bca      	ldr	r3, [pc, #808]	; (80097c4 <MODE_exe_m2+0x33c>)
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 80094a0:	4bc9      	ldr	r3, [pc, #804]	; (80097c8 <MODE_exe_m2+0x340>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 80094a6:	4bc9      	ldr	r3, [pc, #804]	; (80097cc <MODE_exe_m2+0x344>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 80094ac:	f7ff f9a6 	bl	80087fc <GYRO_SetRef>

	switch( en_Mode ){
 80094b0:	4bc7      	ldr	r3, [pc, #796]	; (80097d0 <MODE_exe_m2+0x348>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b07      	cmp	r3, #7
 80094b6:	f200 8179 	bhi.w	80097ac <MODE_exe_m2+0x324>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <MODE_exe_m2+0x38>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080095c1 	.word	0x080095c1
 80094c8:	080096a9 	.word	0x080096a9
 80094cc:	08009785 	.word	0x08009785
 80094d0:	0800978d 	.word	0x0800978d
 80094d4:	08009795 	.word	0x08009795
 80094d8:	0800979d 	.word	0x0800979d
 80094dc:	080097a5 	.word	0x080097a5

		case MODE_0:
			SetLED(0x0e);
 80094e0:	200e      	movs	r0, #14
 80094e2:	f7f8 fd71 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 80094e6:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80097d4 <MODE_exe_m2+0x34c>
 80094ea:	f002 fea9 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 80094ee:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80097d4 <MODE_exe_m2+0x34c>
 80094f2:	f002 fe87 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 80094f6:	2101      	movs	r1, #1
 80094f8:	2015      	movs	r0, #21
 80094fa:	f7f9 f92d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 80094fe:	2101      	movs	r1, #1
 8009500:	2016      	movs	r0, #22
 8009502:	f7f9 f929 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009506:	2101      	movs	r1, #1
 8009508:	2017      	movs	r0, #23
 800950a:	f7f9 f925 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800950e:	2000      	movs	r0, #0
 8009510:	f7f8 fd5a 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8009514:	2064      	movs	r0, #100	; 0x64
 8009516:	f00c fa1b 	bl	8015950 <LL_mDelay>
			MAP_Goalsize(1);
 800951a:	2001      	movs	r0, #1
 800951c:	f008 ff7e 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	2000      	movs	r0, #0
 8009526:	f007 fc23 	bl	8010d70 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800952a:	2301      	movs	r3, #1
 800952c:	2200      	movs	r2, #0
 800952e:	2109      	movs	r1, #9
 8009530:	2006      	movs	r0, #6
 8009532:	f009 ffc1 	bl	80134b8 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009536:	f7f8 fdc5 	bl	80020c4 <SW_IsOn_1>
 800953a:	4603      	mov	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	d006      	beq.n	800954e <MODE_exe_m2+0xc6>
 8009540:	f7fe fedc 	bl	80082fc <SYS_isOutOfCtrl>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <MODE_exe_m2+0xc6>
			else{
				map_write();
 800954a:	f007 fb99 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 800954e:	200e      	movs	r0, #14
 8009550:	f7f8 fd3a 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8009554:	2001      	movs	r0, #1
 8009556:	f008 ff61 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 800955a:	2000      	movs	r0, #0
 800955c:	f7f8 fd34 	bl	8001fc8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
 8009560:	2301      	movs	r3, #1
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	2000      	movs	r0, #0
 8009568:	f009 ffa6 	bl	80134b8 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 800956c:	f7f8 fdaa 	bl	80020c4 <SW_IsOn_1>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	f000 811c 	beq.w	80097b0 <MODE_exe_m2+0x328>
 8009578:	f7fe fec0 	bl	80082fc <SYS_isOutOfCtrl>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 8116 	bne.w	80097b0 <MODE_exe_m2+0x328>
			else{
				map_write();
 8009584:	f007 fb7c 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	2000      	movs	r0, #0
 800958e:	f007 fbef 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009592:	2201      	movs	r2, #1
 8009594:	2109      	movs	r1, #9
 8009596:	2006      	movs	r0, #6
 8009598:	f008 f88a 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800959c:	1dfb      	adds	r3, r7, #7
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	2309      	movs	r3, #9
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2306      	movs	r3, #6
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	2000      	movs	r0, #0
 80095ac:	f005 f810 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 80095b0:	f005 fa66 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 80095b4:	f005 fbe0 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 80095b8:	2000      	movs	r0, #0
 80095ba:	f7f8 fd05 	bl	8001fc8 <SetLED>
			}
			break;
 80095be:	e0f7      	b.n	80097b0 <MODE_exe_m2+0x328>

		case MODE_1:
			SetLED(0x0e);
 80095c0:	200e      	movs	r0, #14
 80095c2:	f7f8 fd01 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 80095c6:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80097d4 <MODE_exe_m2+0x34c>
 80095ca:	f002 fe39 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 80095ce:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80097d4 <MODE_exe_m2+0x34c>
 80095d2:	f002 fe17 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 80095d6:	2101      	movs	r1, #1
 80095d8:	2015      	movs	r0, #21
 80095da:	f7f9 f8bd 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 80095de:	2101      	movs	r1, #1
 80095e0:	2016      	movs	r0, #22
 80095e2:	f7f9 f8b9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 80095e6:	2101      	movs	r1, #1
 80095e8:	2017      	movs	r0, #23
 80095ea:	f7f9 f8b5 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7f8 fcea 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 80095f4:	2064      	movs	r0, #100	; 0x64
 80095f6:	f00c f9ab 	bl	8015950 <LL_mDelay>
			MAP_Goalsize(1);
 80095fa:	2001      	movs	r0, #1
 80095fc:	f008 ff0e 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	2000      	movs	r0, #0
 8009606:	f007 fbb3 	bl	8010d70 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 800960a:	2301      	movs	r3, #1
 800960c:	2200      	movs	r2, #0
 800960e:	2109      	movs	r1, #9
 8009610:	2006      	movs	r0, #6
 8009612:	f00a f8a9 	bl	8013768 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009616:	f7f8 fd55 	bl	80020c4 <SW_IsOn_1>
 800961a:	4603      	mov	r3, r0
 800961c:	2b01      	cmp	r3, #1
 800961e:	d006      	beq.n	800962e <MODE_exe_m2+0x1a6>
 8009620:	f7fe fe6c 	bl	80082fc <SYS_isOutOfCtrl>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <MODE_exe_m2+0x1a6>
			else{
				map_write();
 800962a:	f007 fb29 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 800962e:	200e      	movs	r0, #14
 8009630:	f7f8 fcca 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8009634:	2001      	movs	r0, #1
 8009636:	f008 fef1 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 800963a:	2000      	movs	r0, #0
 800963c:	f7f8 fcc4 	bl	8001fc8 <SetLED>
			log_flag_on();
 8009640:	f7ff fb10 	bl	8008c64 <log_flag_on>
			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 8009644:	2301      	movs	r3, #1
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	2000      	movs	r0, #0
 800964c:	f00a f88c 	bl	8013768 <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );
			log_flag_off();
 8009650:	f7ff fb14 	bl	8008c7c <log_flag_off>
			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009654:	f7f8 fd36 	bl	80020c4 <SW_IsOn_1>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	f000 80aa 	beq.w	80097b4 <MODE_exe_m2+0x32c>
 8009660:	f7fe fe4c 	bl	80082fc <SYS_isOutOfCtrl>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 80a4 	bne.w	80097b4 <MODE_exe_m2+0x32c>
			else{
				map_write();
 800966c:	f007 fb08 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8009670:	2200      	movs	r2, #0
 8009672:	2100      	movs	r1, #0
 8009674:	2000      	movs	r0, #0
 8009676:	f007 fb7b 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800967a:	2201      	movs	r2, #1
 800967c:	2109      	movs	r1, #9
 800967e:	2006      	movs	r0, #6
 8009680:	f008 f816 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009684:	1dfb      	adds	r3, r7, #7
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	2309      	movs	r3, #9
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2306      	movs	r3, #6
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	2000      	movs	r0, #0
 8009694:	f004 ff9c 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009698:	f005 f9f2 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 800969c:	f005 fb6c 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 80096a0:	2000      	movs	r0, #0
 80096a2:	f7f8 fc91 	bl	8001fc8 <SetLED>
			}
			break;
 80096a6:	e085      	b.n	80097b4 <MODE_exe_m2+0x32c>

		case MODE_2:
			SetLED(0x0e);
 80096a8:	200e      	movs	r0, #14
 80096aa:	f7f8 fc8d 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 80096ae:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80097d4 <MODE_exe_m2+0x34c>
 80096b2:	f002 fdc5 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 80096b6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80097d4 <MODE_exe_m2+0x34c>
 80096ba:	f002 fda3 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 80096be:	2101      	movs	r1, #1
 80096c0:	2015      	movs	r0, #21
 80096c2:	f7f9 f849 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 80096c6:	2101      	movs	r1, #1
 80096c8:	2016      	movs	r0, #22
 80096ca:	f7f9 f845 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 80096ce:	2101      	movs	r1, #1
 80096d0:	2017      	movs	r0, #23
 80096d2:	f7f9 f841 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80096d6:	2000      	movs	r0, #0
 80096d8:	f7f8 fc76 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 80096dc:	2064      	movs	r0, #100	; 0x64
 80096de:	f00c f937 	bl	8015950 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			MAP_Goalsize(1);
 80096e2:	2001      	movs	r0, #1
 80096e4:	f008 fe9a 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 80096e8:	2200      	movs	r2, #0
 80096ea:	2100      	movs	r1, #0
 80096ec:	2000      	movs	r0, #0
 80096ee:	f007 fb3f 	bl	8010d70 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 80096f2:	2301      	movs	r3, #1
 80096f4:	2200      	movs	r2, #0
 80096f6:	2109      	movs	r1, #9
 80096f8:	2006      	movs	r0, #6
 80096fa:	f00a f835 	bl	8013768 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 80096fe:	f7f8 fce1 	bl	80020c4 <SW_IsOn_1>
 8009702:	4603      	mov	r3, r0
 8009704:	2b01      	cmp	r3, #1
 8009706:	d006      	beq.n	8009716 <MODE_exe_m2+0x28e>
 8009708:	f7fe fdf8 	bl	80082fc <SYS_isOutOfCtrl>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <MODE_exe_m2+0x28e>
			else{
				map_write();
 8009712:	f007 fab5 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 8009716:	200e      	movs	r0, #14
 8009718:	f7f8 fc56 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 800971c:	2001      	movs	r0, #1
 800971e:	f008 fe7d 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 8009722:	2000      	movs	r0, #0
 8009724:	f7f8 fc50 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 8009728:	2301      	movs	r3, #1
 800972a:	2200      	movs	r2, #0
 800972c:	2100      	movs	r1, #0
 800972e:	2000      	movs	r0, #0
 8009730:	f00a f81a 	bl	8013768 <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009734:	f7f8 fcc6 	bl	80020c4 <SW_IsOn_1>
 8009738:	4603      	mov	r3, r0
 800973a:	2b01      	cmp	r3, #1
 800973c:	d03c      	beq.n	80097b8 <MODE_exe_m2+0x330>
 800973e:	f7fe fddd 	bl	80082fc <SYS_isOutOfCtrl>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d137      	bne.n	80097b8 <MODE_exe_m2+0x330>
			else{
				map_write();
 8009748:	f007 fa9a 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 800974c:	2200      	movs	r2, #0
 800974e:	2100      	movs	r1, #0
 8009750:	2000      	movs	r0, #0
 8009752:	f007 fb0d 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009756:	2201      	movs	r2, #1
 8009758:	2109      	movs	r1, #9
 800975a:	2006      	movs	r0, #6
 800975c:	f007 ffa8 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009760:	1dfb      	adds	r3, r7, #7
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	2309      	movs	r3, #9
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2306      	movs	r3, #6
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	2000      	movs	r0, #0
 8009770:	f004 ff2e 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009774:	f005 f984 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009778:	f005 fafe 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 800977c:	2000      	movs	r0, #0
 800977e:	f7f8 fc23 	bl	8001fc8 <SetLED>
			}
			break;
 8009782:	e019      	b.n	80097b8 <MODE_exe_m2+0x330>

		case MODE_3:
			SetLED(0x0e);
 8009784:	200e      	movs	r0, #14
 8009786:	f7f8 fc1f 	bl	8001fc8 <SetLED>
			
			break;
 800978a:	e016      	b.n	80097ba <MODE_exe_m2+0x332>

		case MODE_4:
			SetLED(0x0e);
 800978c:	200e      	movs	r0, #14
 800978e:	f7f8 fc1b 	bl	8001fc8 <SetLED>
			break;
 8009792:	e012      	b.n	80097ba <MODE_exe_m2+0x332>

		case MODE_5:
			SetLED(0x0e);
 8009794:	200e      	movs	r0, #14
 8009796:	f7f8 fc17 	bl	8001fc8 <SetLED>
			break;
 800979a:	e00e      	b.n	80097ba <MODE_exe_m2+0x332>

		case MODE_6:
			SetLED(0x0e);
 800979c:	200e      	movs	r0, #14
 800979e:	f7f8 fc13 	bl	8001fc8 <SetLED>
			break;
 80097a2:	e00a      	b.n	80097ba <MODE_exe_m2+0x332>

		case MODE_7:
			SetLED(0x0e);
 80097a4:	200e      	movs	r0, #14
 80097a6:	f7f8 fc0f 	bl	8001fc8 <SetLED>
			//cant use
			break;
 80097aa:	e006      	b.n	80097ba <MODE_exe_m2+0x332>

		default:
			break;
 80097ac:	bf00      	nop
 80097ae:	e004      	b.n	80097ba <MODE_exe_m2+0x332>
			break;
 80097b0:	bf00      	nop
 80097b2:	e002      	b.n	80097ba <MODE_exe_m2+0x332>
			break;
 80097b4:	bf00      	nop
 80097b6:	e000      	b.n	80097ba <MODE_exe_m2+0x332>
			break;
 80097b8:	bf00      	nop
	}
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	200002e0 	.word	0x200002e0
 80097c8:	200006ec 	.word	0x200006ec
 80097cc:	20000b18 	.word	0x20000b18
 80097d0:	2000b020 	.word	0x2000b020
 80097d4:	3e99999a 	.word	0x3e99999a

080097d8 <MODE_exe_m3>:

void MODE_exe_m3( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	map_copy();
 80097ea:	f007 fa5d 	bl	8010ca8 <map_copy>

	GYRO_SetRef();
 80097ee:	f7ff f805 	bl	80087fc <GYRO_SetRef>

	switch( en_Mode ){
 80097f2:	4be3      	ldr	r3, [pc, #908]	; (8009b80 <MODE_exe_m3+0x3a8>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	f200 827c 	bhi.w	8009cf4 <MODE_exe_m3+0x51c>
 80097fc:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <MODE_exe_m3+0x2c>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009825 	.word	0x08009825
 8009808:	080098d1 	.word	0x080098d1
 800980c:	0800997d 	.word	0x0800997d
 8009810:	08009a29 	.word	0x08009a29
 8009814:	08009ad5 	.word	0x08009ad5
 8009818:	08009b91 	.word	0x08009b91
 800981c:	08009c3d 	.word	0x08009c3d
 8009820:	08009ced 	.word	0x08009ced

		case MODE_0:
			SetLED(0x0e);
 8009824:	200e      	movs	r0, #14
 8009826:	f7f8 fbcf 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 800982a:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8009b84 <MODE_exe_m3+0x3ac>
 800982e:	f002 fd07 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009832:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8009b8c <MODE_exe_m3+0x3b4>
 8009836:	f002 fce5 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800983a:	2101      	movs	r1, #1
 800983c:	2015      	movs	r0, #21
 800983e:	f7f8 ff8b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009842:	2101      	movs	r1, #1
 8009844:	2016      	movs	r0, #22
 8009846:	f7f8 ff87 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800984a:	2101      	movs	r1, #1
 800984c:	2017      	movs	r0, #23
 800984e:	f7f8 ff83 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009852:	2000      	movs	r0, #0
 8009854:	f7f8 fbb8 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	2000      	movs	r0, #0
 800985e:	f007 fa87 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 8009862:	2001      	movs	r0, #1
 8009864:	f008 fdda 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009868:	2201      	movs	r2, #1
 800986a:	2109      	movs	r1, #9
 800986c:	2006      	movs	r0, #6
 800986e:	f007 ff1f 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009872:	1dfb      	adds	r3, r7, #7
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	2309      	movs	r3, #9
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	2306      	movs	r3, #6
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	2000      	movs	r0, #0
 8009882:	f004 fea5 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009886:	f005 f8fb 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800988a:	f005 fa75 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800988e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009892:	f00c f85d 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009896:	f44f 7016 	mov.w	r0, #600	; 0x258
 800989a:	f7fb fb75 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);
 800989e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80098a2:	f00c f855 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );													
 80098a6:	2001      	movs	r0, #1
 80098a8:	f006 fa1c 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 80098ac:	2000      	movs	r0, #0
 80098ae:	f7fb fb6b 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 80098b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098b6:	f00c f84b 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 80098ba:	2002      	movs	r0, #2
 80098bc:	f002 f9ac 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 80098c0:	f008 fd76 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 80098c4:	2000      	movs	r0, #0
 80098c6:	f7fb fb5f 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 80098ca:	f7fe fd0b 	bl	80082e4 <Failsafe_flag_off>
			break;
 80098ce:	e212      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_1:
			SetLED(0x0e);
 80098d0:	200e      	movs	r0, #14
 80098d2:	f7f8 fb79 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 80098d6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80098da:	f002 fcb1 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 80098de:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8009b8c <MODE_exe_m3+0x3b4>
 80098e2:	f002 fc8f 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 80098e6:	2102      	movs	r1, #2
 80098e8:	2015      	movs	r0, #21
 80098ea:	f7f8 ff35 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 80098ee:	2102      	movs	r1, #2
 80098f0:	2016      	movs	r0, #22
 80098f2:	f7f8 ff31 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 80098f6:	2102      	movs	r1, #2
 80098f8:	2017      	movs	r0, #23
 80098fa:	f7f8 ff2d 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80098fe:	2000      	movs	r0, #0
 8009900:	f7f8 fb62 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009904:	2200      	movs	r2, #0
 8009906:	2100      	movs	r1, #0
 8009908:	2000      	movs	r0, #0
 800990a:	f007 fa31 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800990e:	2001      	movs	r0, #1
 8009910:	f008 fd84 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009914:	2201      	movs	r2, #1
 8009916:	2109      	movs	r1, #9
 8009918:	2006      	movs	r0, #6
 800991a:	f007 fec9 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800991e:	1dfb      	adds	r3, r7, #7
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	2309      	movs	r3, #9
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	2306      	movs	r3, #6
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	2000      	movs	r0, #0
 800992e:	f004 fe4f 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009932:	f005 f8a5 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009936:	f005 fa1f 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800993a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800993e:	f00c f807 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009942:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009946:	f7fb fb1f 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800994a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800994e:	f00b ffff 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 8009952:	2001      	movs	r0, #1
 8009954:	f006 f9c6 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009958:	2000      	movs	r0, #0
 800995a:	f7fb fb15 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800995e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009962:	f00b fff5 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009966:	2002      	movs	r0, #2
 8009968:	f002 f956 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800996c:	f008 fd20 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009970:	2000      	movs	r0, #0
 8009972:	f7fb fb09 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009976:	f7fe fcb5 	bl	80082e4 <Failsafe_flag_off>
			break;
 800997a:	e1bc      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_2:
			SetLED(0x0e);
 800997c:	200e      	movs	r0, #14
 800997e:	f7f8 fb23 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 8009982:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8009b88 <MODE_exe_m3+0x3b0>
 8009986:	f002 fc5b 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 800998a:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8009b8c <MODE_exe_m3+0x3b4>
 800998e:	f002 fc39 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 8009992:	2104      	movs	r1, #4
 8009994:	2015      	movs	r0, #21
 8009996:	f7f8 fedf 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800999a:	2104      	movs	r1, #4
 800999c:	2016      	movs	r0, #22
 800999e:	f7f8 fedb 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 80099a2:	2104      	movs	r1, #4
 80099a4:	2017      	movs	r0, #23
 80099a6:	f7f8 fed7 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80099aa:	2000      	movs	r0, #0
 80099ac:	f7f8 fb0c 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 80099b0:	2200      	movs	r2, #0
 80099b2:	2100      	movs	r1, #0
 80099b4:	2000      	movs	r0, #0
 80099b6:	f007 f9db 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 80099ba:	2001      	movs	r0, #1
 80099bc:	f008 fd2e 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 80099c0:	2201      	movs	r2, #1
 80099c2:	2109      	movs	r1, #9
 80099c4:	2006      	movs	r0, #6
 80099c6:	f007 fe73 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 80099ca:	1dfb      	adds	r3, r7, #7
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	2309      	movs	r3, #9
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	2306      	movs	r3, #6
 80099d4:	2200      	movs	r2, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	2000      	movs	r0, #0
 80099da:	f004 fdf9 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 80099de:	f005 f84f 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 80099e2:	f005 f9c9 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 80099e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80099ea:	f00b ffb1 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 80099ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80099f2:	f7fb fac9 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);												
 80099f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099fa:	f00b ffa9 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 80099fe:	2001      	movs	r0, #1
 8009a00:	f006 f970 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009a04:	2000      	movs	r0, #0
 8009a06:	f7fb fabf 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009a0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a0e:	f00b ff9f 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009a12:	2002      	movs	r0, #2
 8009a14:	f002 f900 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 8009a18:	f008 fcca 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7fb fab3 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009a22:	f7fe fc5f 	bl	80082e4 <Failsafe_flag_off>
			break;
 8009a26:	e166      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_3:
			SetLED(0x0e);
 8009a28:	200e      	movs	r0, #14
 8009a2a:	f7f8 facd 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 8009a2e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8009b84 <MODE_exe_m3+0x3ac>
 8009a32:	f002 fc05 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009a36:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8009b8c <MODE_exe_m3+0x3b4>
 8009a3a:	f002 fbe3 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009a3e:	2101      	movs	r1, #1
 8009a40:	2015      	movs	r0, #21
 8009a42:	f7f8 fe89 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009a46:	2101      	movs	r1, #1
 8009a48:	2016      	movs	r0, #22
 8009a4a:	f7f8 fe85 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009a4e:	2101      	movs	r1, #1
 8009a50:	2017      	movs	r0, #23
 8009a52:	f7f8 fe81 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7f8 fab6 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2100      	movs	r1, #0
 8009a60:	2000      	movs	r0, #0
 8009a62:	f007 f985 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 8009a66:	2001      	movs	r0, #1
 8009a68:	f008 fcd8 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	2109      	movs	r1, #9
 8009a70:	2006      	movs	r0, #6
 8009a72:	f007 fe1d 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009a76:	1dfb      	adds	r3, r7, #7
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	2309      	movs	r3, #9
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	2306      	movs	r3, #6
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	2000      	movs	r0, #0
 8009a86:	f004 fda3 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009a8a:	f004 fff9 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009a8e:	f005 f973 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a96:	f00b ff5b 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009a9a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009a9e:	f7fb fa73 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009aa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009aa6:	f00b ff53 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009aaa:	2002      	movs	r0, #2
 8009aac:	f006 f91a 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	f7fb fa69 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009aba:	f00b ff49 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009abe:	2002      	movs	r0, #2
 8009ac0:	f002 f8aa 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 8009ac4:	f008 fc74 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f7fb fa5d 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009ace:	f7fe fc09 	bl	80082e4 <Failsafe_flag_off>
			break;
 8009ad2:	e110      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_4:
			SetLED(0x0e);
 8009ad4:	200e      	movs	r0, #14
 8009ad6:	f7f8 fa77 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009ada:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009ade:	f002 fbaf 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009ae2:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8009b8c <MODE_exe_m3+0x3b4>
 8009ae6:	f002 fb8d 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009aea:	2102      	movs	r1, #2
 8009aec:	2015      	movs	r0, #21
 8009aee:	f7f8 fe33 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009af2:	2102      	movs	r1, #2
 8009af4:	2016      	movs	r0, #22
 8009af6:	f7f8 fe2f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009afa:	2102      	movs	r1, #2
 8009afc:	2017      	movs	r0, #23
 8009afe:	f7f8 fe2b 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009b02:	2000      	movs	r0, #0
 8009b04:	f7f8 fa60 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f007 f92f 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 8009b12:	2001      	movs	r0, #1
 8009b14:	f008 fc82 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009b18:	2201      	movs	r2, #1
 8009b1a:	2109      	movs	r1, #9
 8009b1c:	2006      	movs	r0, #6
 8009b1e:	f007 fdc7 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009b22:	1dfb      	adds	r3, r7, #7
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	2309      	movs	r3, #9
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2306      	movs	r3, #6
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	2000      	movs	r0, #0
 8009b32:	f004 fd4d 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009b36:	f004 ffa3 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009b3a:	f005 f91d 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009b3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b42:	f00b ff05 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009b46:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009b4a:	f7fb fa1d 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009b4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b52:	f00b fefd 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009b56:	2002      	movs	r0, #2
 8009b58:	f006 f8c4 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f7fb fa13 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b66:	f00b fef3 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009b6a:	2002      	movs	r0, #2
 8009b6c:	f002 f854 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 8009b70:	f008 fc1e 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009b74:	2000      	movs	r0, #0
 8009b76:	f7fb fa07 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009b7a:	f7fe fbb3 	bl	80082e4 <Failsafe_flag_off>
			break;
 8009b7e:	e0ba      	b.n	8009cf6 <MODE_exe_m3+0x51e>
 8009b80:	2000b020 	.word	0x2000b020
 8009b84:	3f99999a 	.word	0x3f99999a
 8009b88:	3fe66666 	.word	0x3fe66666
 8009b8c:	3e99999a 	.word	0x3e99999a

		case MODE_5:
			SetLED(0x0e);
 8009b90:	200e      	movs	r0, #14
 8009b92:	f7f8 fa19 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 8009b96:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8009b88 <MODE_exe_m3+0x3b0>
 8009b9a:	f002 fb51 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009b9e:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 8009b8c <MODE_exe_m3+0x3b4>
 8009ba2:	f002 fb2f 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	2015      	movs	r0, #21
 8009baa:	f7f8 fdd5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 8009bae:	2104      	movs	r1, #4
 8009bb0:	2016      	movs	r0, #22
 8009bb2:	f7f8 fdd1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 8009bb6:	2104      	movs	r1, #4
 8009bb8:	2017      	movs	r0, #23
 8009bba:	f7f8 fdcd 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f7f8 fa02 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f007 f8d1 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 8009bce:	2001      	movs	r0, #1
 8009bd0:	f008 fc24 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	2109      	movs	r1, #9
 8009bd8:	2006      	movs	r0, #6
 8009bda:	f007 fd69 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009bde:	1dfb      	adds	r3, r7, #7
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2309      	movs	r3, #9
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2306      	movs	r3, #6
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	2000      	movs	r0, #0
 8009bee:	f004 fcef 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009bf2:	f004 ff45 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009bf6:	f005 f8bf 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bfe:	f00b fea7 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009c02:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009c06:	f7fb f9bf 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009c0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c0e:	f00b fe9f 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009c12:	2002      	movs	r0, #2
 8009c14:	f006 f866 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7fb f9b5 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c22:	f00b fe95 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009c26:	2002      	movs	r0, #2
 8009c28:	f001 fff6 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 8009c2c:	f008 fbc0 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009c30:	2000      	movs	r0, #0
 8009c32:	f7fb f9a9 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009c36:	f7fe fb55 	bl	80082e4 <Failsafe_flag_off>
			break;
 8009c3a:	e05c      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_6:
			SetLED(0x0e);
 8009c3c:	200e      	movs	r0, #14
 8009c3e:	f7f8 f9c3 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009c42:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009c46:	f002 fafb 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009c4a:	ed1f 0a30 	vldr	s0, [pc, #-192]	; 8009b8c <MODE_exe_m3+0x3b4>
 8009c4e:	f002 fad9 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009c52:	2102      	movs	r1, #2
 8009c54:	2015      	movs	r0, #21
 8009c56:	f7f8 fd7f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009c5a:	2102      	movs	r1, #2
 8009c5c:	2016      	movs	r0, #22
 8009c5e:	f7f8 fd7b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009c62:	2102      	movs	r1, #2
 8009c64:	2017      	movs	r0, #23
 8009c66:	f7f8 fd77 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f7f8 f9ac 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009c70:	2200      	movs	r2, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	2000      	movs	r0, #0
 8009c76:	f007 f87b 	bl	8010d70 <MAP_setPos>

			MAP_Goal_init();
 8009c7a:	f007 f867 	bl	8010d4c <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_def,GOAL_MAP_Y_def, BEST_WAY);
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2109      	movs	r1, #9
 8009c82:	2006      	movs	r0, #6
 8009c84:	f009 ff2e 	bl	8013ae4 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f008 fbc7 	bl	801241c <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_def,GOAL_MAP_Y_def, &en_endDir2);		// ドライブコマンド作成
 8009c8e:	1dfb      	adds	r3, r7, #7
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	2309      	movs	r3, #9
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2306      	movs	r3, #6
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	f006 fd73 	bl	8010788 <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8009ca2:	f004 feed 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();
 8009ca6:	f005 f867 	bl	800ed78 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 8009caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cae:	f00b fe4f 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 8009cb2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009cb6:	f7fb f967 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cbe:	f00b fe47 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009cc2:	2002      	movs	r0, #2
 8009cc4:	f006 f80e 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 8009cc8:	2000      	movs	r0, #0
 8009cca:	f7fb f95d 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cd2:	f00b fe3d 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009cd6:	2002      	movs	r0, #2
 8009cd8:	f001 ff9e 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 8009cdc:	f008 fb68 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f7fb f951 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009ce6:	f7fe fafd 	bl	80082e4 <Failsafe_flag_off>

			break;
 8009cea:	e004      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		case MODE_7:
			SetLED(0x0e);
 8009cec:	200e      	movs	r0, #14
 8009cee:	f7f8 f96b 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8009cf2:	e000      	b.n	8009cf6 <MODE_exe_m3+0x51e>

		default:
			break;
 8009cf4:	bf00      	nop
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop

08009d00 <MODE_exe_m4>:

void MODE_exe_m4( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8009d06:	f04f 0200 	mov.w	r2, #0
 8009d0a:	f04f 0300 	mov.w	r3, #0
 8009d0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Min_in = 0;
 8009d12:	4bc8      	ldr	r3, [pc, #800]	; (800a034 <MODE_exe_m4+0x334>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
	Sec_in = 0;
 8009d18:	4bc7      	ldr	r3, [pc, #796]	; (800a038 <MODE_exe_m4+0x338>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
	Msec_in = 0;
 8009d1e:	4bc7      	ldr	r3, [pc, #796]	; (800a03c <MODE_exe_m4+0x33c>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	801a      	strh	r2, [r3, #0]

	GYRO_SetRef();
 8009d24:	f7fe fd6a 	bl	80087fc <GYRO_SetRef>

	switch( en_Mode ){
 8009d28:	4bc5      	ldr	r3, [pc, #788]	; (800a040 <MODE_exe_m4+0x340>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b07      	cmp	r3, #7
 8009d2e:	f200 8175 	bhi.w	800a01c <MODE_exe_m4+0x31c>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <MODE_exe_m4+0x38>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d59 	.word	0x08009d59
 8009d3c:	08009e39 	.word	0x08009e39
 8009d40:	08009f19 	.word	0x08009f19
 8009d44:	08009ff5 	.word	0x08009ff5
 8009d48:	08009ffd 	.word	0x08009ffd
 8009d4c:	0800a005 	.word	0x0800a005
 8009d50:	0800a00d 	.word	0x0800a00d
 8009d54:	0800a015 	.word	0x0800a015

		case MODE_0:
			SetLED(0x0e);
 8009d58:	200e      	movs	r0, #14
 8009d5a:	f7f8 f935 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009d5e:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a044 <MODE_exe_m4+0x344>
 8009d62:	f002 fa6d 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009d66:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800a044 <MODE_exe_m4+0x344>
 8009d6a:	f002 fa4b 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009d6e:	2101      	movs	r1, #1
 8009d70:	2015      	movs	r0, #21
 8009d72:	f7f8 fcf1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009d76:	2101      	movs	r1, #1
 8009d78:	2016      	movs	r0, #22
 8009d7a:	f7f8 fced 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009d7e:	2101      	movs	r1, #1
 8009d80:	2017      	movs	r0, #23
 8009d82:	f7f8 fce9 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009d86:	2000      	movs	r0, #0
 8009d88:	f7f8 f91e 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8009d8c:	2064      	movs	r0, #100	; 0x64
 8009d8e:	f00b fddf 	bl	8015950 <LL_mDelay>
			MAP_Goalsize(1);
 8009d92:	2001      	movs	r0, #1
 8009d94:	f008 fb42 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f006 ffe7 	bl	8010d70 <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8009da2:	2301      	movs	r3, #1
 8009da4:	2200      	movs	r2, #0
 8009da6:	2109      	movs	r1, #9
 8009da8:	2006      	movs	r0, #6
 8009daa:	f009 fb85 	bl	80134b8 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009dae:	f7f8 f989 	bl	80020c4 <SW_IsOn_1>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d006      	beq.n	8009dc6 <MODE_exe_m4+0xc6>
 8009db8:	f7fe faa0 	bl	80082fc <SYS_isOutOfCtrl>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <MODE_exe_m4+0xc6>
			else{
				map_write();
 8009dc2:	f006 ff5d 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 8009dc6:	200e      	movs	r0, #14
 8009dc8:	f7f8 f8fe 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8009dcc:	2001      	movs	r0, #1
 8009dce:	f008 fb25 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	f7f8 f8f8 	bl	8001fc8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
 8009dd8:	2301      	movs	r3, #1
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2100      	movs	r1, #0
 8009dde:	2000      	movs	r0, #0
 8009de0:	f009 fb6a 	bl	80134b8 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009de4:	f7f8 f96e 	bl	80020c4 <SW_IsOn_1>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	f000 8118 	beq.w	800a020 <MODE_exe_m4+0x320>
 8009df0:	f7fe fa84 	bl	80082fc <SYS_isOutOfCtrl>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 8112 	bne.w	800a020 <MODE_exe_m4+0x320>
			else{
				map_write();
 8009dfc:	f006 ff40 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8009e00:	2200      	movs	r2, #0
 8009e02:	2100      	movs	r1, #0
 8009e04:	2000      	movs	r0, #0
 8009e06:	f006 ffb3 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	2109      	movs	r1, #9
 8009e0e:	2006      	movs	r0, #6
 8009e10:	f007 fc4e 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009e14:	1dfb      	adds	r3, r7, #7
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	2309      	movs	r3, #9
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	2306      	movs	r3, #6
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	2000      	movs	r0, #0
 8009e24:	f004 fbd4 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009e28:	f004 fe2a 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009e2c:	f004 ffa4 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009e30:	2000      	movs	r0, #0
 8009e32:	f7f8 f8c9 	bl	8001fc8 <SetLED>
			}
			break;
 8009e36:	e0f3      	b.n	800a020 <MODE_exe_m4+0x320>

		case MODE_1:
			SetLED(0x0e);
 8009e38:	200e      	movs	r0, #14
 8009e3a:	f7f8 f8c5 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009e3e:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800a044 <MODE_exe_m4+0x344>
 8009e42:	f002 f9fd 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009e46:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800a044 <MODE_exe_m4+0x344>
 8009e4a:	f002 f9db 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009e4e:	2101      	movs	r1, #1
 8009e50:	2015      	movs	r0, #21
 8009e52:	f7f8 fc81 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009e56:	2101      	movs	r1, #1
 8009e58:	2016      	movs	r0, #22
 8009e5a:	f7f8 fc7d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009e5e:	2101      	movs	r1, #1
 8009e60:	2017      	movs	r0, #23
 8009e62:	f7f8 fc79 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009e66:	2000      	movs	r0, #0
 8009e68:	f7f8 f8ae 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8009e6c:	2064      	movs	r0, #100	; 0x64
 8009e6e:	f00b fd6f 	bl	8015950 <LL_mDelay>
			MAP_Goalsize(1);
 8009e72:	2001      	movs	r0, #1
 8009e74:	f008 fad2 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f006 ff77 	bl	8010d70 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8009e82:	2301      	movs	r3, #1
 8009e84:	2200      	movs	r2, #0
 8009e86:	2109      	movs	r1, #9
 8009e88:	2006      	movs	r0, #6
 8009e8a:	f009 fc6d 	bl	8013768 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009e8e:	f7f8 f919 	bl	80020c4 <SW_IsOn_1>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d006      	beq.n	8009ea6 <MODE_exe_m4+0x1a6>
 8009e98:	f7fe fa30 	bl	80082fc <SYS_isOutOfCtrl>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <MODE_exe_m4+0x1a6>
			else{
				map_write();
 8009ea2:	f006 feed 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 8009ea6:	200e      	movs	r0, #14
 8009ea8:	f7f8 f88e 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8009eac:	2001      	movs	r0, #1
 8009eae:	f008 fab5 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	f7f8 f888 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 8009eb8:	2301      	movs	r3, #1
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	f009 fc52 	bl	8013768 <MAP_searchGoalKnown>
//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009ec4:	f7f8 f8fe 	bl	80020c4 <SW_IsOn_1>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	f000 80aa 	beq.w	800a024 <MODE_exe_m4+0x324>
 8009ed0:	f7fe fa14 	bl	80082fc <SYS_isOutOfCtrl>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 80a4 	bne.w	800a024 <MODE_exe_m4+0x324>
			else{
				map_write();
 8009edc:	f006 fed0 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f006 ff43 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009eea:	2201      	movs	r2, #1
 8009eec:	2109      	movs	r1, #9
 8009eee:	2006      	movs	r0, #6
 8009ef0:	f007 fbde 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009ef4:	1dfb      	adds	r3, r7, #7
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	2309      	movs	r3, #9
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	2306      	movs	r3, #6
 8009efe:	2200      	movs	r2, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	2000      	movs	r0, #0
 8009f04:	f004 fb64 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009f08:	f004 fdba 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009f0c:	f004 ff34 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7f8 f859 	bl	8001fc8 <SetLED>
			}
			break;
 8009f16:	e085      	b.n	800a024 <MODE_exe_m4+0x324>

		case MODE_2:
			SetLED(0x0e);
 8009f18:	200e      	movs	r0, #14
 8009f1a:	f7f8 f855 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8009f1e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800a044 <MODE_exe_m4+0x344>
 8009f22:	f002 f98d 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009f26:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800a044 <MODE_exe_m4+0x344>
 8009f2a:	f002 f96b 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8009f2e:	2101      	movs	r1, #1
 8009f30:	2015      	movs	r0, #21
 8009f32:	f7f8 fc11 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8009f36:	2101      	movs	r1, #1
 8009f38:	2016      	movs	r0, #22
 8009f3a:	f7f8 fc0d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8009f3e:	2101      	movs	r1, #1
 8009f40:	2017      	movs	r0, #23
 8009f42:	f7f8 fc09 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009f46:	2000      	movs	r0, #0
 8009f48:	f7f8 f83e 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8009f4c:	2064      	movs	r0, #100	; 0x64
 8009f4e:	f00b fcff 	bl	8015950 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			MAP_Goalsize(1);
 8009f52:	2001      	movs	r0, #1
 8009f54:	f008 fa62 	bl	801241c <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f006 ff07 	bl	8010d70 <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8009f62:	2301      	movs	r3, #1
 8009f64:	2200      	movs	r2, #0
 8009f66:	2109      	movs	r1, #9
 8009f68:	2006      	movs	r0, #6
 8009f6a:	f009 fbfd 	bl	8013768 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009f6e:	f7f8 f8a9 	bl	80020c4 <SW_IsOn_1>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d006      	beq.n	8009f86 <MODE_exe_m4+0x286>
 8009f78:	f7fe f9c0 	bl	80082fc <SYS_isOutOfCtrl>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <MODE_exe_m4+0x286>
			else{
				map_write();
 8009f82:	f006 fe7d 	bl	8010c80 <map_write>
			}
			
			SetLED(0x0e);
 8009f86:	200e      	movs	r0, #14
 8009f88:	f7f8 f81e 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f008 fa45 	bl	801241c <MAP_Goalsize>
			SetLED(0x00);
 8009f92:	2000      	movs	r0, #0
 8009f94:	f7f8 f818 	bl	8001fc8 <SetLED>

			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_SURA );
 8009f98:	2301      	movs	r3, #1
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f009 fbe2 	bl	8013768 <MAP_searchGoalKnown>
//			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8009fa4:	f7f8 f88e 	bl	80020c4 <SW_IsOn_1>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d03c      	beq.n	800a028 <MODE_exe_m4+0x328>
 8009fae:	f7fe f9a5 	bl	80082fc <SYS_isOutOfCtrl>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d137      	bne.n	800a028 <MODE_exe_m4+0x328>
			else{
				map_write();
 8009fb8:	f006 fe62 	bl	8010c80 <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f006 fed5 	bl	8010d70 <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2109      	movs	r1, #9
 8009fca:	2006      	movs	r0, #6
 8009fcc:	f007 fb70 	bl	80116b0 <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 8009fd0:	1dfb      	adds	r3, r7, #7
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	2309      	movs	r3, #9
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2306      	movs	r3, #6
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2100      	movs	r1, #0
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f004 faf6 	bl	800e5d0 <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 8009fe4:	f004 fd4c 	bl	800ea80 <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8009fe8:	f004 fec6 	bl	800ed78 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8009fec:	2000      	movs	r0, #0
 8009fee:	f7f7 ffeb 	bl	8001fc8 <SetLED>
			}
			break;
 8009ff2:	e019      	b.n	800a028 <MODE_exe_m4+0x328>

		case MODE_3:
			SetLED(0x0e);
 8009ff4:	200e      	movs	r0, #14
 8009ff6:	f7f7 ffe7 	bl	8001fc8 <SetLED>
			
			break;
 8009ffa:	e016      	b.n	800a02a <MODE_exe_m4+0x32a>

		case MODE_4:
			SetLED(0x0e);
 8009ffc:	200e      	movs	r0, #14
 8009ffe:	f7f7 ffe3 	bl	8001fc8 <SetLED>
			break;
 800a002:	e012      	b.n	800a02a <MODE_exe_m4+0x32a>

		case MODE_5:
			SetLED(0x0e);
 800a004:	200e      	movs	r0, #14
 800a006:	f7f7 ffdf 	bl	8001fc8 <SetLED>
			break;
 800a00a:	e00e      	b.n	800a02a <MODE_exe_m4+0x32a>

		case MODE_6:
			SetLED(0x0e);
 800a00c:	200e      	movs	r0, #14
 800a00e:	f7f7 ffdb 	bl	8001fc8 <SetLED>
			break;
 800a012:	e00a      	b.n	800a02a <MODE_exe_m4+0x32a>

		case MODE_7:
			SetLED(0x0e);
 800a014:	200e      	movs	r0, #14
 800a016:	f7f7 ffd7 	bl	8001fc8 <SetLED>
			//cant use
			break;
 800a01a:	e006      	b.n	800a02a <MODE_exe_m4+0x32a>

		default:
			break;
 800a01c:	bf00      	nop
 800a01e:	e004      	b.n	800a02a <MODE_exe_m4+0x32a>
			break;
 800a020:	bf00      	nop
 800a022:	e002      	b.n	800a02a <MODE_exe_m4+0x32a>
			break;
 800a024:	bf00      	nop
 800a026:	e000      	b.n	800a02a <MODE_exe_m4+0x32a>
			break;
 800a028:	bf00      	nop
	}
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200002e0 	.word	0x200002e0
 800a038:	200006ec 	.word	0x200006ec
 800a03c:	20000b18 	.word	0x20000b18
 800a040:	2000b020 	.word	0x2000b020
 800a044:	3e99999a 	.word	0x3e99999a

0800a048 <MODE_exe_m5>:

void MODE_exe_m5( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	e9c7 2302 	strd	r2, r3, [r7, #8]

	printf("\r\n turn 45 \r\r");
 800a05a:	48d2      	ldr	r0, [pc, #840]	; (800a3a4 <MODE_exe_m5+0x35c>)
 800a05c:	f00c fb6a 	bl	8016734 <iprintf>
	PARAM_makeSra( 0.6, 550.0f, 7.50f, SLA_45 );
 800a060:	2001      	movs	r0, #1
 800a062:	eeb1 1a0e 	vmov.f32	s2, #30	; 0x40f00000  7.5
 800a066:	eddf 0ad0 	vldr	s1, [pc, #832]	; 800a3a8 <MODE_exe_m5+0x360>
 800a06a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800a3d0 <MODE_exe_m5+0x388>
 800a06e:	f7f8 fc0f 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a072:	48ce      	ldr	r0, [pc, #824]	; (800a3ac <MODE_exe_m5+0x364>)
 800a074:	f00c fb5e 	bl	8016734 <iprintf>
	PARAM_makeSra( 0.6, 900.0f, 10.00f, SLA_90 );	
 800a078:	2000      	movs	r0, #0
 800a07a:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800a07e:	eddf 0acc 	vldr	s1, [pc, #816]	; 800a3b0 <MODE_exe_m5+0x368>
 800a082:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 800a3d0 <MODE_exe_m5+0x388>
 800a086:	f7f8 fc03 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 135 \r\r");	
 800a08a:	48ca      	ldr	r0, [pc, #808]	; (800a3b4 <MODE_exe_m5+0x36c>)
 800a08c:	f00c fb52 	bl	8016734 <iprintf>
	PARAM_makeSra( 0.6, 1350.0f, 13.00f, SLA_135 );	
 800a090:	2002      	movs	r0, #2
 800a092:	eeb2 1a0a 	vmov.f32	s2, #42	; 0x41500000  13.0
 800a096:	eddf 0ac8 	vldr	s1, [pc, #800]	; 800a3b8 <MODE_exe_m5+0x370>
 800a09a:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800a3d0 <MODE_exe_m5+0x388>
 800a09e:	f7f8 fbf7 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800a0a2:	48c6      	ldr	r0, [pc, #792]	; (800a3bc <MODE_exe_m5+0x374>)
 800a0a4:	f00c fb46 	bl	8016734 <iprintf>
	PARAM_makeSra( 0.6, 1500.0f, 14.00f, SLA_N90 );	
 800a0a8:	2003      	movs	r0, #3
 800a0aa:	eeb2 1a0c 	vmov.f32	s2, #44	; 0x41600000  14.0
 800a0ae:	eddf 0ac4 	vldr	s1, [pc, #784]	; 800a3c0 <MODE_exe_m5+0x378>
 800a0b2:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 800a3d0 <MODE_exe_m5+0x388>
 800a0b6:	f7f8 fbeb 	bl	8002890 <PARAM_makeSra>

	map_copy();
 800a0ba:	f006 fdf5 	bl	8010ca8 <map_copy>

	GYRO_SetRef();
 800a0be:	f7fe fb9d 	bl	80087fc <GYRO_SetRef>

	switch( en_Mode ){
 800a0c2:	4bc0      	ldr	r3, [pc, #768]	; (800a3c4 <MODE_exe_m5+0x37c>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b07      	cmp	r3, #7
 800a0c8:	f200 828c 	bhi.w	800a5e4 <MODE_exe_m5+0x59c>
 800a0cc:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <MODE_exe_m5+0x8c>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a0f5 	.word	0x0800a0f5
 800a0d8:	0800a1a1 	.word	0x0800a1a1
 800a0dc:	0800a24d 	.word	0x0800a24d
 800a0e0:	0800a2f9 	.word	0x0800a2f9
 800a0e4:	0800a3d5 	.word	0x0800a3d5
 800a0e8:	0800a481 	.word	0x0800a481
 800a0ec:	0800a52d 	.word	0x0800a52d
 800a0f0:	0800a5dd 	.word	0x0800a5dd

		case MODE_0:
			SetLED(0x0e);
 800a0f4:	200e      	movs	r0, #14
 800a0f6:	f7f7 ff67 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 800a0fa:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800a3c8 <MODE_exe_m5+0x380>
 800a0fe:	f002 f89f 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a102:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800a3d0 <MODE_exe_m5+0x388>
 800a106:	f002 f87d 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a10a:	2101      	movs	r1, #1
 800a10c:	2015      	movs	r0, #21
 800a10e:	f7f8 fb23 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a112:	2101      	movs	r1, #1
 800a114:	2016      	movs	r0, #22
 800a116:	f7f8 fb1f 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a11a:	2101      	movs	r1, #1
 800a11c:	2017      	movs	r0, #23
 800a11e:	f7f8 fb1b 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);	
 800a122:	2000      	movs	r0, #0
 800a124:	f7f7 ff50 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a128:	2200      	movs	r2, #0
 800a12a:	2100      	movs	r1, #0
 800a12c:	2000      	movs	r0, #0
 800a12e:	f006 fe1f 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a132:	2001      	movs	r0, #1
 800a134:	f008 f972 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a138:	2201      	movs	r2, #1
 800a13a:	2109      	movs	r1, #9
 800a13c:	2006      	movs	r0, #6
 800a13e:	f007 fab7 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a142:	1dfb      	adds	r3, r7, #7
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	2309      	movs	r3, #9
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2306      	movs	r3, #6
 800a14c:	2200      	movs	r2, #0
 800a14e:	2100      	movs	r1, #0
 800a150:	2000      	movs	r0, #0
 800a152:	f004 fa3d 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a156:	f004 fc93 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a15a:	f004 fe0d 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a15e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a162:	f00b fbf5 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a166:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a16a:	f7fa ff0d 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);	
 800a16e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a172:	f00b fbed 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );												
 800a176:	2001      	movs	r0, #1
 800a178:	f005 fdb4 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a17c:	2000      	movs	r0, #0
 800a17e:	f7fa ff03 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a186:	f00b fbe3 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a18a:	2002      	movs	r0, #2
 800a18c:	f001 fd44 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a190:	f008 f90e 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a194:	2000      	movs	r0, #0
 800a196:	f7fa fef7 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a19a:	f7fe f8a3 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a19e:	e222      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_1:
			SetLED(0x0e);
 800a1a0:	200e      	movs	r0, #14
 800a1a2:	f7f7 ff11 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 800a1a6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800a1aa:	f002 f849 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a1ae:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800a3d0 <MODE_exe_m5+0x388>
 800a1b2:	f002 f827 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 800a1b6:	2102      	movs	r1, #2
 800a1b8:	2015      	movs	r0, #21
 800a1ba:	f7f8 facd 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 800a1be:	2102      	movs	r1, #2
 800a1c0:	2016      	movs	r0, #22
 800a1c2:	f7f8 fac9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	2017      	movs	r0, #23
 800a1ca:	f7f8 fac5 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	f7f7 fefa 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f006 fdc9 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a1de:	2001      	movs	r0, #1
 800a1e0:	f008 f91c 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	2109      	movs	r1, #9
 800a1e8:	2006      	movs	r0, #6
 800a1ea:	f007 fa61 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a1ee:	1dfb      	adds	r3, r7, #7
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	2309      	movs	r3, #9
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	2306      	movs	r3, #6
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	f004 f9e7 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a202:	f004 fc3d 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a206:	f004 fdb7 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a20a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a20e:	f00b fb9f 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a212:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a216:	f7fa feb7 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a21a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a21e:	f00b fb97 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 800a222:	2001      	movs	r0, #1
 800a224:	f005 fd5e 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a228:	2000      	movs	r0, #0
 800a22a:	f7fa fead 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a22e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a232:	f00b fb8d 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a236:	2002      	movs	r0, #2
 800a238:	f001 fcee 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a23c:	f008 f8b8 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a240:	2000      	movs	r0, #0
 800a242:	f7fa fea1 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a246:	f7fe f84d 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a24a:	e1cc      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_2:
			SetLED(0x0e);
 800a24c:	200e      	movs	r0, #14
 800a24e:	f7f7 febb 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a252:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800a3cc <MODE_exe_m5+0x384>
 800a256:	f001 fff3 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a25a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800a3d0 <MODE_exe_m5+0x388>
 800a25e:	f001 ffd1 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a262:	2104      	movs	r1, #4
 800a264:	2015      	movs	r0, #21
 800a266:	f7f8 fa77 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a26a:	2104      	movs	r1, #4
 800a26c:	2016      	movs	r0, #22
 800a26e:	f7f8 fa73 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a272:	2104      	movs	r1, #4
 800a274:	2017      	movs	r0, #23
 800a276:	f7f8 fa6f 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a27a:	2000      	movs	r0, #0
 800a27c:	f7f7 fea4 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a280:	2200      	movs	r2, #0
 800a282:	2100      	movs	r1, #0
 800a284:	2000      	movs	r0, #0
 800a286:	f006 fd73 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a28a:	2001      	movs	r0, #1
 800a28c:	f008 f8c6 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a290:	2201      	movs	r2, #1
 800a292:	2109      	movs	r1, #9
 800a294:	2006      	movs	r0, #6
 800a296:	f007 fa0b 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a29a:	1dfb      	adds	r3, r7, #7
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	2309      	movs	r3, #9
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	2306      	movs	r3, #6
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f004 f991 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a2ae:	f004 fbe7 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a2b2:	f004 fd61 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a2b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2ba:	f00b fb49 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a2be:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a2c2:	f7fa fe61 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800a2c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2ca:	f00b fb41 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f005 fd08 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f7fa fe57 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a2da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2de:	f00b fb37 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a2e2:	2002      	movs	r0, #2
 800a2e4:	f001 fc98 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a2e8:	f008 f862 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f7fa fe4b 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a2f2:	f7fd fff7 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a2f6:	e176      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_3:
			SetLED(0x0e);
 800a2f8:	200e      	movs	r0, #14
 800a2fa:	f7f7 fe65 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 800a2fe:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800a3c8 <MODE_exe_m5+0x380>
 800a302:	f001 ff9d 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a306:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800a3d0 <MODE_exe_m5+0x388>
 800a30a:	f001 ff7b 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 800a30e:	2101      	movs	r1, #1
 800a310:	2015      	movs	r0, #21
 800a312:	f7f8 fa21 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 800a316:	2101      	movs	r1, #1
 800a318:	2016      	movs	r0, #22
 800a31a:	f7f8 fa1d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 800a31e:	2101      	movs	r1, #1
 800a320:	2017      	movs	r0, #23
 800a322:	f7f8 fa19 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a326:	2000      	movs	r0, #0
 800a328:	f7f7 fe4e 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a32c:	2200      	movs	r2, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	2000      	movs	r0, #0
 800a332:	f006 fd1d 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a336:	2001      	movs	r0, #1
 800a338:	f008 f870 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a33c:	2201      	movs	r2, #1
 800a33e:	2109      	movs	r1, #9
 800a340:	2006      	movs	r0, #6
 800a342:	f007 f9b5 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a346:	1dfb      	adds	r3, r7, #7
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	2309      	movs	r3, #9
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	2306      	movs	r3, #6
 800a350:	2200      	movs	r2, #0
 800a352:	2100      	movs	r1, #0
 800a354:	2000      	movs	r0, #0
 800a356:	f004 f93b 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a35a:	f004 fb91 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a35e:	f004 fd0b 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a366:	f00b faf3 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a36a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a36e:	f7fa fe0b 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a372:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a376:	f00b faeb 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a37a:	2002      	movs	r0, #2
 800a37c:	f005 fcb2 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a380:	2000      	movs	r0, #0
 800a382:	f7fa fe01 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a38a:	f00b fae1 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a38e:	2002      	movs	r0, #2
 800a390:	f001 fc42 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a394:	f008 f80c 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a398:	2000      	movs	r0, #0
 800a39a:	f7fa fdf5 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a39e:	f7fd ffa1 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a3a2:	e120      	b.n	800a5e6 <MODE_exe_m5+0x59e>
 800a3a4:	0801bbdc 	.word	0x0801bbdc
 800a3a8:	44098000 	.word	0x44098000
 800a3ac:	0801bbec 	.word	0x0801bbec
 800a3b0:	44610000 	.word	0x44610000
 800a3b4:	0801bbfc 	.word	0x0801bbfc
 800a3b8:	44a8c000 	.word	0x44a8c000
 800a3bc:	0801bc0c 	.word	0x0801bc0c
 800a3c0:	44bb8000 	.word	0x44bb8000
 800a3c4:	2000b020 	.word	0x2000b020
 800a3c8:	3f99999a 	.word	0x3f99999a
 800a3cc:	3fe66666 	.word	0x3fe66666
 800a3d0:	3f19999a 	.word	0x3f19999a

		case MODE_4:
			SetLED(0x0e);
 800a3d4:	200e      	movs	r0, #14
 800a3d6:	f7f7 fdf7 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 800a3da:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800a3de:	f001 ff2f 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a3e2:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 800a3d0 <MODE_exe_m5+0x388>
 800a3e6:	f001 ff0d 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 800a3ea:	2102      	movs	r1, #2
 800a3ec:	2015      	movs	r0, #21
 800a3ee:	f7f8 f9b3 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 800a3f2:	2102      	movs	r1, #2
 800a3f4:	2016      	movs	r0, #22
 800a3f6:	f7f8 f9af 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 800a3fa:	2102      	movs	r1, #2
 800a3fc:	2017      	movs	r0, #23
 800a3fe:	f7f8 f9ab 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a402:	2000      	movs	r0, #0
 800a404:	f7f7 fde0 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a408:	2200      	movs	r2, #0
 800a40a:	2100      	movs	r1, #0
 800a40c:	2000      	movs	r0, #0
 800a40e:	f006 fcaf 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a412:	2001      	movs	r0, #1
 800a414:	f008 f802 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a418:	2201      	movs	r2, #1
 800a41a:	2109      	movs	r1, #9
 800a41c:	2006      	movs	r0, #6
 800a41e:	f007 f947 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a422:	1dfb      	adds	r3, r7, #7
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	2309      	movs	r3, #9
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	2306      	movs	r3, #6
 800a42c:	2200      	movs	r2, #0
 800a42e:	2100      	movs	r1, #0
 800a430:	2000      	movs	r0, #0
 800a432:	f004 f8cd 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a436:	f004 fb23 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a43a:	f004 fc9d 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a43e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a442:	f00b fa85 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a446:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a44a:	f7fa fd9d 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a44e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a452:	f00b fa7d 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a456:	2002      	movs	r0, #2
 800a458:	f005 fc44 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a45c:	2000      	movs	r0, #0
 800a45e:	f7fa fd93 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a466:	f00b fa73 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a46a:	2002      	movs	r0, #2
 800a46c:	f001 fbd4 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a470:	f007 ff9e 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a474:	2000      	movs	r0, #0
 800a476:	f7fa fd87 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a47a:	f7fd ff33 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a47e:	e0b2      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_5:
			SetLED(0x0e);
 800a480:	200e      	movs	r0, #14
 800a482:	f7f7 fda1 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a486:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 800a3cc <MODE_exe_m5+0x384>
 800a48a:	f001 fed9 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a48e:	ed1f 0a30 	vldr	s0, [pc, #-192]	; 800a3d0 <MODE_exe_m5+0x388>
 800a492:	f001 feb7 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a496:	2104      	movs	r1, #4
 800a498:	2015      	movs	r0, #21
 800a49a:	f7f8 f95d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a49e:	2104      	movs	r1, #4
 800a4a0:	2016      	movs	r0, #22
 800a4a2:	f7f8 f959 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	2017      	movs	r0, #23
 800a4aa:	f7f8 f955 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f7f7 fd8a 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f006 fc59 	bl	8010d70 <MAP_setPos>
			MAP_Goalsize(1);
 800a4be:	2001      	movs	r0, #1
 800a4c0:	f007 ffac 	bl	801241c <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線�?�ップを作る
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	2109      	movs	r1, #9
 800a4c8:	2006      	movs	r0, #6
 800a4ca:	f007 f8f1 	bl	80116b0 <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作�??
 800a4ce:	1dfb      	adds	r3, r7, #7
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	2309      	movs	r3, #9
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	2306      	movs	r3, #6
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2100      	movs	r1, #0
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f004 f877 	bl	800e5d0 <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロー�?コマンド作�??
 800a4e2:	f004 facd 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800a4e6:	f004 fc47 	bl	800ed78 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800a4ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4ee:	f00b fa2f 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a4f2:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a4f6:	f7fa fd47 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a4fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4fe:	f00b fa27 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a502:	2002      	movs	r0, #2
 800a504:	f005 fbee 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a508:	2000      	movs	r0, #0
 800a50a:	f7fa fd3d 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a50e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a512:	f00b fa1d 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a516:	2002      	movs	r0, #2
 800a518:	f001 fb7e 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a51c:	f007 ff48 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a520:	2000      	movs	r0, #0
 800a522:	f7fa fd31 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a526:	f7fd fedd 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a52a:	e05c      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_6:
			SetLED(0x0e);
 800a52c:	200e      	movs	r0, #14
 800a52e:	f7f7 fd4b 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 800a532:	ed1f 0a5a 	vldr	s0, [pc, #-360]	; 800a3cc <MODE_exe_m5+0x384>
 800a536:	f001 fe83 	bl	800c240 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( 0.6 );							
 800a53a:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 800a3d0 <MODE_exe_m5+0x388>
 800a53e:	f001 fe61 	bl	800c204 <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800a542:	2104      	movs	r1, #4
 800a544:	2015      	movs	r0, #21
 800a546:	f7f8 f907 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 800a54a:	2104      	movs	r1, #4
 800a54c:	2016      	movs	r0, #22
 800a54e:	f7f8 f903 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800a552:	2104      	movs	r1, #4
 800a554:	2017      	movs	r0, #23
 800a556:	f7f8 f8ff 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 800a55a:	2000      	movs	r0, #0
 800a55c:	f7f7 fd34 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800a560:	2200      	movs	r2, #0
 800a562:	2100      	movs	r1, #0
 800a564:	2000      	movs	r0, #0
 800a566:	f006 fc03 	bl	8010d70 <MAP_setPos>

			MAP_Goal_init();
 800a56a:	f006 fbef 	bl	8010d4c <MAP_Goal_init>
			MAP_makeContourMap_dijkstra_modoki(GOAL_MAP_X_def,GOAL_MAP_Y_def, BEST_WAY);
 800a56e:	2201      	movs	r2, #1
 800a570:	2109      	movs	r1, #9
 800a572:	2006      	movs	r0, #6
 800a574:	f009 fab6 	bl	8013ae4 <MAP_makeContourMap_dijkstra_modoki>
			MAP_Goalsize(1);
 800a578:	2001      	movs	r0, #1
 800a57a:	f007 ff4f 	bl	801241c <MAP_Goalsize>
	
			MAP_makeCmdList_dijkstra_modoki(0, 0, NORTH, GOAL_MAP_X_def,GOAL_MAP_Y_def, &en_endDir2);		// ドライブコマンド作成
 800a57e:	1dfb      	adds	r3, r7, #7
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	2309      	movs	r3, #9
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	2306      	movs	r3, #6
 800a588:	2200      	movs	r2, #0
 800a58a:	2100      	movs	r1, #0
 800a58c:	2000      	movs	r0, #0
 800a58e:	f006 f8fb 	bl	8010788 <MAP_makeCmdList_dijkstra_modoki>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 800a592:	f004 fa75 	bl	800ea80 <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();
 800a596:	f004 fbef 	bl	800ed78 <MAP_makeSkewCmdList>

			LL_mDelay(500);
 800a59a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a59e:	f00b f9d7 	bl	8015950 <LL_mDelay>
			Set_DutyTIM8(600);
 800a5a2:	f44f 7016 	mov.w	r0, #600	; 0x258
 800a5a6:	f7fa fcef 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800a5aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a5ae:	f00b f9cf 	bl	8015950 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800a5b2:	2002      	movs	r0, #2
 800a5b4:	f005 fb96 	bl	800fce4 <MAP_drive>
			Set_DutyTIM8(0);
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f7fa fce5 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800a5be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a5c2:	f00b f9c5 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);
 800a5c6:	2002      	movs	r0, #2
 800a5c8:	f001 fb26 	bl	800bc18 <MOT_turn>
			MAP_actGoalLED();
 800a5cc:	f007 fef0 	bl	80123b0 <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f7fa fcd9 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800a5d6:	f7fd fe85 	bl	80082e4 <Failsafe_flag_off>
			break;
 800a5da:	e004      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		case MODE_7:
			SetLED(0x0e);
 800a5dc:	200e      	movs	r0, #14
 800a5de:	f7f7 fcf3 	bl	8001fc8 <SetLED>
			//cant use
			break;
 800a5e2:	e000      	b.n	800a5e6 <MODE_exe_m5+0x59e>

		default:
			break;
 800a5e4:	bf00      	nop
	}
	printf("\r\n turn 45 \r\r");
 800a5e6:	481a      	ldr	r0, [pc, #104]	; (800a650 <MODE_exe_m5+0x608>)
 800a5e8:	f00c f8a4 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 800a5f2:	eddf 0a18 	vldr	s1, [pc, #96]	; 800a654 <MODE_exe_m5+0x60c>
 800a5f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a658 <MODE_exe_m5+0x610>
 800a5fa:	f7f8 f949 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 800a5fe:	4817      	ldr	r0, [pc, #92]	; (800a65c <MODE_exe_m5+0x614>)
 800a600:	f00c f898 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 800a604:	2000      	movs	r0, #0
 800a606:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 800a60a:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a660 <MODE_exe_m5+0x618>
 800a60e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a658 <MODE_exe_m5+0x610>
 800a612:	f7f8 f93d 	bl	8002890 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 800a616:	4813      	ldr	r0, [pc, #76]	; (800a664 <MODE_exe_m5+0x61c>)
 800a618:	f00c f88c 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 800a61c:	2002      	movs	r0, #2
 800a61e:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800a622:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800a660 <MODE_exe_m5+0x618>
 800a626:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a658 <MODE_exe_m5+0x610>
 800a62a:	f7f8 f931 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 800a62e:	480e      	ldr	r0, [pc, #56]	; (800a668 <MODE_exe_m5+0x620>)
 800a630:	f00c f880 	bl	8016734 <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );	
 800a634:	2003      	movs	r0, #3
 800a636:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 800a63a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800a66c <MODE_exe_m5+0x624>
 800a63e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800a658 <MODE_exe_m5+0x610>
 800a642:	f7f8 f925 	bl	8002890 <PARAM_makeSra>
}
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	0801bbdc 	.word	0x0801bbdc
 800a654:	42c80000 	.word	0x42c80000
 800a658:	3e99999a 	.word	0x3e99999a
 800a65c:	0801bbec 	.word	0x0801bbec
 800a660:	43480000 	.word	0x43480000
 800a664:	0801bbfc 	.word	0x0801bbfc
 800a668:	0801bc0c 	.word	0x0801bc0c
 800a66c:	43960000 	.word	0x43960000

0800a670 <MODE_exe>:


void MODE_exe( void )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
//	uint16_t *read;
	enMAP_HEAD_DIR		en_endDir;

	now_mode = mode_1;
 800a674:	4bc3      	ldr	r3, [pc, #780]	; (800a984 <MODE_exe+0x314>)
 800a676:	2201      	movs	r2, #1
 800a678:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	LL_mDelay(300);
 800a67a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a67e:	f00b f967 	bl	8015950 <LL_mDelay>
	GYRO_SetRef();
 800a682:	f7fe f8bb 	bl	80087fc <GYRO_SetRef>
	ENC_setref();
 800a686:	f7fe f819 	bl	80086bc <ENC_setref>
	Failsafe_flag_off();
 800a68a:	f7fd fe2b 	bl	80082e4 <Failsafe_flag_off>
//	log_flag_on();	

	switch( en_Mode ){
 800a68e:	4bbe      	ldr	r3, [pc, #760]	; (800a988 <MODE_exe+0x318>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b07      	cmp	r3, #7
 800a694:	f200 8172 	bhi.w	800a97c <MODE_exe+0x30c>
 800a698:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <MODE_exe+0x30>)
 800a69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69e:	bf00      	nop
 800a6a0:	0800a6c1 	.word	0x0800a6c1
 800a6a4:	0800a731 	.word	0x0800a731
 800a6a8:	0800a7a1 	.word	0x0800a7a1
 800a6ac:	0800a811 	.word	0x0800a811
 800a6b0:	0800a881 	.word	0x0800a881
 800a6b4:	0800a8fd 	.word	0x0800a8fd
 800a6b8:	0800a96d 	.word	0x0800a96d
 800a6bc:	0800a975 	.word	0x0800a975

		case MODE_0://tune	
			SetLED(0x0e);
 800a6c0:	200e      	movs	r0, #14
 800a6c2:	f7f7 fc81 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a6c6:	4bb0      	ldr	r3, [pc, #704]	; (800a988 <MODE_exe+0x318>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a6cc:	2064      	movs	r0, #100	; 0x64
 800a6ce:	f00b f93f 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	f7f7 fc78 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a6d8:	4baa      	ldr	r3, [pc, #680]	; (800a984 <MODE_exe+0x314>)
 800a6da:	2210      	movs	r2, #16
 800a6dc:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a6de:	f7f7 fcf1 	bl	80020c4 <SW_IsOn_1>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d108      	bne.n	800a6fa <MODE_exe+0x8a>
					MODE_inc();								
 800a6e8:	f7fe fbf2 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a6ec:	20c8      	movs	r0, #200	; 0xc8
 800a6ee:	f00b f92f 	bl	8015950 <LL_mDelay>
					printf("mode selecting_0\r\n");
 800a6f2:	48a6      	ldr	r0, [pc, #664]	; (800a98c <MODE_exe+0x31c>)
 800a6f4:	f00c f8ba 	bl	801686c <puts>
 800a6f8:	e7f1      	b.n	800a6de <MODE_exe+0x6e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a6fa:	f7f7 fcd7 	bl	80020ac <SW_IsOn_0>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b01      	cmp	r3, #1
 800a702:	d004      	beq.n	800a70e <MODE_exe+0x9e>
 800a704:	f000 f99f 	bl	800aa46 <MODE_CheckExe>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0e7      	beq.n	800a6de <MODE_exe+0x6e>
					MODE_exe_m0();								
 800a70e:	f7fe fc51 	bl	8008fb4 <MODE_exe_m0>
					LL_mDelay(200);				
 800a712:	20c8      	movs	r0, #200	; 0xc8
 800a714:	f00b f91c 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a718:	4b9b      	ldr	r3, [pc, #620]	; (800a988 <MODE_exe+0x318>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b07      	cmp	r3, #7
 800a71e:	d1de      	bne.n	800a6de <MODE_exe+0x6e>
						now_mode = mode_1;
 800a720:	4b98      	ldr	r3, [pc, #608]	; (800a984 <MODE_exe+0x314>)
 800a722:	2201      	movs	r2, #1
 800a724:	701a      	strb	r2, [r3, #0]
						break;
 800a726:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_0;
 800a728:	4b97      	ldr	r3, [pc, #604]	; (800a988 <MODE_exe+0x318>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
			break;
 800a72e:	e126      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_1://flash
			SetLED(0x0e);
 800a730:	200e      	movs	r0, #14
 800a732:	f7f7 fc49 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a736:	4b94      	ldr	r3, [pc, #592]	; (800a988 <MODE_exe+0x318>)
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a73c:	2064      	movs	r0, #100	; 0x64
 800a73e:	f00b f907 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a742:	2000      	movs	r0, #0
 800a744:	f7f7 fc40 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a748:	4b8e      	ldr	r3, [pc, #568]	; (800a984 <MODE_exe+0x314>)
 800a74a:	2210      	movs	r2, #16
 800a74c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a74e:	f7f7 fcb9 	bl	80020c4 <SW_IsOn_1>
 800a752:	4603      	mov	r3, r0
 800a754:	2b01      	cmp	r3, #1
 800a756:	d108      	bne.n	800a76a <MODE_exe+0xfa>
					MODE_inc();								
 800a758:	f7fe fbba 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a75c:	20c8      	movs	r0, #200	; 0xc8
 800a75e:	f00b f8f7 	bl	8015950 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800a762:	488b      	ldr	r0, [pc, #556]	; (800a990 <MODE_exe+0x320>)
 800a764:	f00c f882 	bl	801686c <puts>
 800a768:	e7f1      	b.n	800a74e <MODE_exe+0xde>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a76a:	f7f7 fc9f 	bl	80020ac <SW_IsOn_0>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b01      	cmp	r3, #1
 800a772:	d004      	beq.n	800a77e <MODE_exe+0x10e>
 800a774:	f000 f967 	bl	800aa46 <MODE_CheckExe>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0e7      	beq.n	800a74e <MODE_exe+0xde>
					MODE_exe_m1();								
 800a77e:	f7fe fe15 	bl	80093ac <MODE_exe_m1>
					LL_mDelay(200);				
 800a782:	20c8      	movs	r0, #200	; 0xc8
 800a784:	f00b f8e4 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a788:	4b7f      	ldr	r3, [pc, #508]	; (800a988 <MODE_exe+0x318>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b07      	cmp	r3, #7
 800a78e:	d1de      	bne.n	800a74e <MODE_exe+0xde>
						now_mode = mode_1;
 800a790:	4b7c      	ldr	r3, [pc, #496]	; (800a984 <MODE_exe+0x314>)
 800a792:	2201      	movs	r2, #1
 800a794:	701a      	strb	r2, [r3, #0]
						break;
 800a796:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_1;
 800a798:	4b7b      	ldr	r3, [pc, #492]	; (800a988 <MODE_exe+0x318>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	701a      	strb	r2, [r3, #0]
			break;
 800a79e:	e0ee      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_2://search wall hit
			SetLED(0x0e);
 800a7a0:	200e      	movs	r0, #14
 800a7a2:	f7f7 fc11 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a7a6:	4b78      	ldr	r3, [pc, #480]	; (800a988 <MODE_exe+0x318>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a7ac:	2064      	movs	r0, #100	; 0x64
 800a7ae:	f00b f8cf 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	f7f7 fc08 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a7b8:	4b72      	ldr	r3, [pc, #456]	; (800a984 <MODE_exe+0x314>)
 800a7ba:	2210      	movs	r2, #16
 800a7bc:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a7be:	f7f7 fc81 	bl	80020c4 <SW_IsOn_1>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d108      	bne.n	800a7da <MODE_exe+0x16a>
					MODE_inc();								
 800a7c8:	f7fe fb82 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a7cc:	20c8      	movs	r0, #200	; 0xc8
 800a7ce:	f00b f8bf 	bl	8015950 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800a7d2:	486f      	ldr	r0, [pc, #444]	; (800a990 <MODE_exe+0x320>)
 800a7d4:	f00c f84a 	bl	801686c <puts>
 800a7d8:	e7f1      	b.n	800a7be <MODE_exe+0x14e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a7da:	f7f7 fc67 	bl	80020ac <SW_IsOn_0>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d004      	beq.n	800a7ee <MODE_exe+0x17e>
 800a7e4:	f000 f92f 	bl	800aa46 <MODE_CheckExe>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0e7      	beq.n	800a7be <MODE_exe+0x14e>
					MODE_exe_m2();								
 800a7ee:	f7fe fe4b 	bl	8009488 <MODE_exe_m2>
					LL_mDelay(200);				
 800a7f2:	20c8      	movs	r0, #200	; 0xc8
 800a7f4:	f00b f8ac 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a7f8:	4b63      	ldr	r3, [pc, #396]	; (800a988 <MODE_exe+0x318>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b07      	cmp	r3, #7
 800a7fe:	d1de      	bne.n	800a7be <MODE_exe+0x14e>
						now_mode = mode_1;
 800a800:	4b60      	ldr	r3, [pc, #384]	; (800a984 <MODE_exe+0x314>)
 800a802:	2201      	movs	r2, #1
 800a804:	701a      	strb	r2, [r3, #0]
						break;
 800a806:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_2;
 800a808:	4b5f      	ldr	r3, [pc, #380]	; (800a988 <MODE_exe+0x318>)
 800a80a:	2202      	movs	r2, #2
 800a80c:	701a      	strb	r2, [r3, #0]
			break;
 800a80e:	e0b6      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_3://drive
			SetLED(0x0e);
 800a810:	200e      	movs	r0, #14
 800a812:	f7f7 fbd9 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a816:	4b5c      	ldr	r3, [pc, #368]	; (800a988 <MODE_exe+0x318>)
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a81c:	2064      	movs	r0, #100	; 0x64
 800a81e:	f00b f897 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a822:	2000      	movs	r0, #0
 800a824:	f7f7 fbd0 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a828:	4b56      	ldr	r3, [pc, #344]	; (800a984 <MODE_exe+0x314>)
 800a82a:	2210      	movs	r2, #16
 800a82c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a82e:	f7f7 fc49 	bl	80020c4 <SW_IsOn_1>
 800a832:	4603      	mov	r3, r0
 800a834:	2b01      	cmp	r3, #1
 800a836:	d108      	bne.n	800a84a <MODE_exe+0x1da>
					MODE_inc();								
 800a838:	f7fe fb4a 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a83c:	20c8      	movs	r0, #200	; 0xc8
 800a83e:	f00b f887 	bl	8015950 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800a842:	4853      	ldr	r0, [pc, #332]	; (800a990 <MODE_exe+0x320>)
 800a844:	f00c f812 	bl	801686c <puts>
 800a848:	e7f1      	b.n	800a82e <MODE_exe+0x1be>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a84a:	f7f7 fc2f 	bl	80020ac <SW_IsOn_0>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b01      	cmp	r3, #1
 800a852:	d004      	beq.n	800a85e <MODE_exe+0x1ee>
 800a854:	f000 f8f7 	bl	800aa46 <MODE_CheckExe>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0e7      	beq.n	800a82e <MODE_exe+0x1be>
					MODE_exe_m3();								
 800a85e:	f7fe ffbb 	bl	80097d8 <MODE_exe_m3>
					LL_mDelay(200);				
 800a862:	20c8      	movs	r0, #200	; 0xc8
 800a864:	f00b f874 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a868:	4b47      	ldr	r3, [pc, #284]	; (800a988 <MODE_exe+0x318>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b07      	cmp	r3, #7
 800a86e:	d1de      	bne.n	800a82e <MODE_exe+0x1be>
						now_mode = mode_1;
 800a870:	4b44      	ldr	r3, [pc, #272]	; (800a984 <MODE_exe+0x314>)
 800a872:	2201      	movs	r2, #1
 800a874:	701a      	strb	r2, [r3, #0]
						break;
 800a876:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_3;
 800a878:	4b43      	ldr	r3, [pc, #268]	; (800a988 <MODE_exe+0x318>)
 800a87a:	2203      	movs	r2, #3
 800a87c:	701a      	strb	r2, [r3, #0]
			break;
 800a87e:	e07e      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_4: // wall hit search
			SetLED(0x0e);
 800a880:	200e      	movs	r0, #14
 800a882:	f7f7 fba1 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a886:	4b40      	ldr	r3, [pc, #256]	; (800a988 <MODE_exe+0x318>)
 800a888:	2200      	movs	r2, #0
 800a88a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a88c:	2064      	movs	r0, #100	; 0x64
 800a88e:	f00b f85f 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a892:	2000      	movs	r0, #0
 800a894:	f7f7 fb98 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a898:	4b3a      	ldr	r3, [pc, #232]	; (800a984 <MODE_exe+0x314>)
 800a89a:	2210      	movs	r2, #16
 800a89c:	701a      	strb	r2, [r3, #0]
			wall_hit_flag = 1;
 800a89e:	4b3d      	ldr	r3, [pc, #244]	; (800a994 <MODE_exe+0x324>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a8a4:	f7f7 fc0e 	bl	80020c4 <SW_IsOn_1>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d108      	bne.n	800a8c0 <MODE_exe+0x250>
					MODE_inc();								
 800a8ae:	f7fe fb0f 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a8b2:	20c8      	movs	r0, #200	; 0xc8
 800a8b4:	f00b f84c 	bl	8015950 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800a8b8:	4835      	ldr	r0, [pc, #212]	; (800a990 <MODE_exe+0x320>)
 800a8ba:	f00b ffd7 	bl	801686c <puts>
 800a8be:	e7f1      	b.n	800a8a4 <MODE_exe+0x234>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a8c0:	f7f7 fbf4 	bl	80020ac <SW_IsOn_0>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d004      	beq.n	800a8d4 <MODE_exe+0x264>
 800a8ca:	f000 f8bc 	bl	800aa46 <MODE_CheckExe>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0e7      	beq.n	800a8a4 <MODE_exe+0x234>
					MODE_exe_m4();								
 800a8d4:	f7ff fa14 	bl	8009d00 <MODE_exe_m4>
					LL_mDelay(200);				
 800a8d8:	20c8      	movs	r0, #200	; 0xc8
 800a8da:	f00b f839 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a8de:	4b2a      	ldr	r3, [pc, #168]	; (800a988 <MODE_exe+0x318>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	2b07      	cmp	r3, #7
 800a8e4:	d1de      	bne.n	800a8a4 <MODE_exe+0x234>
						now_mode = mode_1;
 800a8e6:	4b27      	ldr	r3, [pc, #156]	; (800a984 <MODE_exe+0x314>)
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	701a      	strb	r2, [r3, #0]
						wall_hit_flag = 0;
 800a8ec:	4b29      	ldr	r3, [pc, #164]	; (800a994 <MODE_exe+0x324>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	701a      	strb	r2, [r3, #0]
						break;
 800a8f2:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_4;
 800a8f4:	4b24      	ldr	r3, [pc, #144]	; (800a988 <MODE_exe+0x318>)
 800a8f6:	2204      	movs	r2, #4
 800a8f8:	701a      	strb	r2, [r3, #0]
			break;
 800a8fa:	e040      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_5:
			SetLED(0x0e);
 800a8fc:	200e      	movs	r0, #14
 800a8fe:	f7f7 fb63 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 800a902:	4b21      	ldr	r3, [pc, #132]	; (800a988 <MODE_exe+0x318>)
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800a908:	2064      	movs	r0, #100	; 0x64
 800a90a:	f00b f821 	bl	8015950 <LL_mDelay>
			SetLED(0x00);
 800a90e:	2000      	movs	r0, #0
 800a910:	f7f7 fb5a 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 800a914:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <MODE_exe+0x314>)
 800a916:	2210      	movs	r2, #16
 800a918:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800a91a:	f7f7 fbd3 	bl	80020c4 <SW_IsOn_1>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b01      	cmp	r3, #1
 800a922:	d108      	bne.n	800a936 <MODE_exe+0x2c6>
					MODE_inc();								
 800a924:	f7fe fad4 	bl	8008ed0 <MODE_inc>
					LL_mDelay(200);			
 800a928:	20c8      	movs	r0, #200	; 0xc8
 800a92a:	f00b f811 	bl	8015950 <LL_mDelay>
					printf("mode selecting_1\r\n");
 800a92e:	4818      	ldr	r0, [pc, #96]	; (800a990 <MODE_exe+0x320>)
 800a930:	f00b ff9c 	bl	801686c <puts>
 800a934:	e7f1      	b.n	800a91a <MODE_exe+0x2aa>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800a936:	f7f7 fbb9 	bl	80020ac <SW_IsOn_0>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d004      	beq.n	800a94a <MODE_exe+0x2da>
 800a940:	f000 f881 	bl	800aa46 <MODE_CheckExe>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0e7      	beq.n	800a91a <MODE_exe+0x2aa>
					MODE_exe_m5();								
 800a94a:	f7ff fb7d 	bl	800a048 <MODE_exe_m5>
					LL_mDelay(200);				
 800a94e:	20c8      	movs	r0, #200	; 0xc8
 800a950:	f00a fffe 	bl	8015950 <LL_mDelay>
					if (en_Mode == MODE_7){
 800a954:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <MODE_exe+0x318>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b07      	cmp	r3, #7
 800a95a:	d1de      	bne.n	800a91a <MODE_exe+0x2aa>
						now_mode = mode_1;
 800a95c:	4b09      	ldr	r3, [pc, #36]	; (800a984 <MODE_exe+0x314>)
 800a95e:	2201      	movs	r2, #1
 800a960:	701a      	strb	r2, [r3, #0]
						break;
 800a962:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_5;
 800a964:	4b08      	ldr	r3, [pc, #32]	; (800a988 <MODE_exe+0x318>)
 800a966:	2205      	movs	r2, #5
 800a968:	701a      	strb	r2, [r3, #0]
			break;
 800a96a:	e008      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_6:
			SetLED(0x0e);
 800a96c:	200e      	movs	r0, #14
 800a96e:	f7f7 fb2b 	bl	8001fc8 <SetLED>

			break;
 800a972:	e004      	b.n	800a97e <MODE_exe+0x30e>

		case MODE_7:
			SetLED(0x0e);
 800a974:	200e      	movs	r0, #14
 800a976:	f7f7 fb27 	bl	8001fc8 <SetLED>
			
			break;
 800a97a:	e000      	b.n	800a97e <MODE_exe+0x30e>


		default:
			break;
 800a97c:	bf00      	nop
	}
}
 800a97e:	bf00      	nop
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	2000000c 	.word	0x2000000c
 800a988:	2000b020 	.word	0x2000b020
 800a98c:	0801bc4c 	.word	0x0801bc4c
 800a990:	0801bc60 	.word	0x0801bc60
 800a994:	200002a9 	.word	0x200002a9

0800a998 <MODE_DistRightCheck>:

bool MODE_DistRightCheck(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	int16_t s_rightval;
	bool bl_check;

	s_rightval = DIST_getNowVal(DIST_SEN_R_FRONT);
 800a99e:	2000      	movs	r0, #0
 800a9a0:	f002 faea 	bl	800cf78 <DIST_getNowVal>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	80bb      	strh	r3, [r7, #4]

	if( s_rightval >= 300 ){
 800a9a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a9b0:	db02      	blt.n	800a9b8 <MODE_DistRightCheck+0x20>
		bl_check=TRUE;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	71fb      	strb	r3, [r7, #7]
 800a9b6:	e001      	b.n	800a9bc <MODE_DistRightCheck+0x24>
	}
	else{
		bl_check=FALSE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <MODE_DistLeftCheck>:

bool MODE_DistLeftCheck(void){
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0

	int16_t 	s_leftval;
	bool	bl_check;

	s_leftval 	= DIST_getNowVal(DIST_SEN_L_FRONT);
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f002 fad3 	bl	800cf78 <DIST_getNowVal>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	80bb      	strh	r3, [r7, #4]

	if( s_leftval >= 200 ){
 800a9d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a9da:	2bc7      	cmp	r3, #199	; 0xc7
 800a9dc:	dd02      	ble.n	800a9e4 <MODE_DistLeftCheck+0x1e>
		bl_check = TRUE;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	71fb      	strb	r3, [r7, #7]
 800a9e2:	e001      	b.n	800a9e8 <MODE_DistLeftCheck+0x22>

	}else{
		bl_check = FALSE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	71fb      	strb	r3, [r7, #7]

	}

	return bl_check;
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <MODE_setWaitCheck>:

bool MODE_setWaitCheck(void){
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_DistRightCheck() ){	// 右�?け検知
 800a9f8:	f7ff ffce 	bl	800a998 <MODE_DistRightCheck>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <MODE_setWaitCheck+0x16>
		SetLED(0x08);
 800aa02:	2008      	movs	r0, #8
 800aa04:	f7f7 fae0 	bl	8001fc8 <SetLED>
	}
	if( TRUE == MODE_DistLeftCheck() ){		// 左�?け検知
 800aa08:	f7ff ffdd 	bl	800a9c6 <MODE_DistLeftCheck>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <MODE_setWaitCheck+0x26>
		SetLED(0x02);
 800aa12:	2002      	movs	r0, #2
 800aa14:	f7f7 fad8 	bl	8001fc8 <SetLED>
	}

	if( ( TRUE == MODE_DistRightCheck() ) && ( TRUE == MODE_DistLeftCheck() ) ){
 800aa18:	f7ff ffbe 	bl	800a998 <MODE_DistRightCheck>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <MODE_setWaitCheck+0x46>
 800aa22:	f7ff ffd0 	bl	800a9c6 <MODE_DistLeftCheck>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <MODE_setWaitCheck+0x46>
		SetLED(0x0e);
 800aa2c:	200e      	movs	r0, #14
 800aa2e:	f7f7 facb 	bl	8001fc8 <SetLED>
		bl_check = TRUE;
 800aa32:	2301      	movs	r3, #1
 800aa34:	71fb      	strb	r3, [r7, #7]
 800aa36:	e001      	b.n	800aa3c <MODE_setWaitCheck+0x4a>

	}else{
		bl_check = FALSE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	71fb      	strb	r3, [r7, #7]
	}
	return bl_check;
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <MODE_CheckExe>:

bool MODE_CheckExe(void){
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_setWaitCheck() ){
 800aa4c:	f7ff ffd1 	bl	800a9f2 <MODE_setWaitCheck>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d018      	beq.n	800aa88 <MODE_CheckExe+0x42>
		LL_mDelay(500);
 800aa56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa5a:	f00a ff79 	bl	8015950 <LL_mDelay>

		if( FALSE == MODE_setWaitCheck() ){
 800aa5e:	f7ff ffc8 	bl	800a9f2 <MODE_setWaitCheck>
 800aa62:	4603      	mov	r3, r0
 800aa64:	f083 0301 	eor.w	r3, r3, #1
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <MODE_CheckExe+0x3c>
			SetLED(0x00);
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f7f7 faaa 	bl	8001fc8 <SetLED>
			LL_mDelay(1000);
 800aa74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aa78:	f00a ff6a 	bl	8015950 <LL_mDelay>
			bl_check = TRUE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	71fb      	strb	r3, [r7, #7]
 800aa80:	e004      	b.n	800aa8c <MODE_CheckExe+0x46>

		}else{
			bl_check = FALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	71fb      	strb	r3, [r7, #7]
 800aa86:	e001      	b.n	800aa8c <MODE_CheckExe+0x46>

		}

	}else{

		bl_check = FALSE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <MOT_getAcc1>:
float			f_WallEdgeAddDist =0.0;				// 壁切れ補正の移動距離



float MOT_getAcc1( void )
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_acc;
 800aa9a:	2015      	movs	r0, #21
 800aa9c:	f7f7 fe8a 	bl	80027b4 <PARAM_getSpeed>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	ee07 3a90 	vmov	s15, r3
}
 800aaa8:	eeb0 0a67 	vmov.f32	s0, s15
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <MOT_getAcc3>:

float MOT_getAcc3( void )
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_dec;
 800aab2:	2015      	movs	r0, #21
 800aab4:	f7f7 fe7e 	bl	80027b4 <PARAM_getSpeed>
 800aab8:	4603      	mov	r3, r0
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	ee07 3a90 	vmov	s15, r3
}
 800aac0:	eeb0 0a67 	vmov.f32	s0, s15
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <MOT_goBlock_AccConstDec>:

void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08e      	sub	sp, #56	; 0x38
 800aacc:	af00      	add	r7, sp, #0
 800aace:	ed87 0a01 	vstr	s0, [r7, #4]
 800aad2:	4603      	mov	r3, r0
 800aad4:	460a      	mov	r2, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
 800aad8:	4613      	mov	r3, r2
 800aada:	70bb      	strb	r3, [r7, #2]

	stCTRL_DATA		st_data;					// CTRLdata
	GYRO_staErrChkAngle();
 800aadc:	f7fd ff7c 	bl	80089d8 <GYRO_staErrChkAngle>
	/*      motion      */
	/* ================ */
	/* ------ */
	/*  acc   */
	/* ------ */
	if( ( en_type != MOT_CONST_DEC ) && ( en_type != MOT_CONST_DEC_CUSTOM ) ){
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	d051      	beq.n	800ab8a <MOT_goBlock_AccConstDec+0xc2>
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	2b06      	cmp	r3, #6
 800aaea:	d04e      	beq.n	800ab8a <MOT_goBlock_AccConstDec+0xc2>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800aaec:	78bb      	ldrb	r3, [r7, #2]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <MOT_goBlock_AccConstDec+0x30>
			st_data.en_type		= CTRL_ACC;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	723b      	strb	r3, [r7, #8]
 800aaf6:	e001      	b.n	800aafc <MOT_goBlock_AccConstDec+0x34>
		}
		else{
			st_data.en_type		= CTRL_SKEW_ACC;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc1;		// 加速度指定
 800aafc:	4bad      	ldr	r3, [pc, #692]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_now;		// 現在速度
 800ab02:	4bac      	ldr	r3, [pc, #688]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_trgt;		// 目標速度
 800ab08:	4baa      	ldr	r3, [pc, #680]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;				// 進んでいない
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_l1;			// 加速距離
 800ab14:	4ba7      	ldr	r3, [pc, #668]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;				// 角加速度
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;				// 現在角速度
 800ab20:	f04f 0300 	mov.w	r3, #0
 800ab24:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;				// 目標角度
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;				// 現在角度
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;				// 目標角度
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;				// 目標時間 [sec] ← 指定しない
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();								// 設定データをクリア
 800ab3e:	f7fa fe25 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );						// データセット
 800ab42:	f107 0308 	add.w	r3, r7, #8
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fa ff06 	bl	8005958 <CTRL_setData>
		DCM_staMotAll();							// モータON
 800ab4c:	f7fd fc2c 	bl	80083a8 <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 800ab50:	e00f      	b.n	800ab72 <MOT_goBlock_AccConstDec+0xaa>
			if( SYS_isOutOfCtrl() == TRUE ){
 800ab52:	f7fd fbd3 	bl	80082fc <SYS_isOutOfCtrl>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d008      	beq.n	800ab6e <MOT_goBlock_AccConstDec+0xa6>
				CTRL_stop();
 800ab5c:	f7fa fe06 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800ab60:	2000      	movs	r0, #0
 800ab62:	f7fd fbfd 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800ab66:	2001      	movs	r0, #1
 800ab68:	f7fd fbfa 	bl	8008360 <DCM_brakeMot>
				break;
 800ab6c:	e00d      	b.n	800ab8a <MOT_goBlock_AccConstDec+0xc2>
			}				
			MOT_setWallEdgeDist();
 800ab6e:	f002 f81f 	bl	800cbb0 <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 800ab72:	f7fa fd59 	bl	8005628 <Get_NowDist>
 800ab76:	eeb0 7a40 	vmov.f32	s14, s0
 800ab7a:	4b8e      	ldr	r3, [pc, #568]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ab7c:	edd3 7a07 	vldr	s15, [r3, #28]
 800ab80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab88:	d4e3      	bmi.n	800ab52 <MOT_goBlock_AccConstDec+0x8a>
	}

	/* ------ */
	/*  const */
	/* ------ */
	if( MOT_GO_ST_NORMAL == en_goType ){
 800ab8a:	78bb      	ldrb	r3, [r7, #2]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <MOT_goBlock_AccConstDec+0xce>
		st_data.en_type		= CTRL_CONST;
 800ab90:	2301      	movs	r3, #1
 800ab92:	723b      	strb	r3, [r7, #8]
 800ab94:	e001      	b.n	800ab9a <MOT_goBlock_AccConstDec+0xd2>
	}
	else{
		st_data.en_type		= CTRL_SKEW_CONST;
 800ab96:	2304      	movs	r3, #4
 800ab98:	723b      	strb	r3, [r7, #8]
	}
	st_data.f_acc			= 0;					// 加速度指定
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	613b      	str	r3, [r7, #16]
	st_data.f_now			= st_Info.f_trgt;			// 現在速度
 800aba0:	4b84      	ldr	r3, [pc, #528]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= st_Info.f_trgt;			// 目標速度
 800aba6:	4b83      	ldr	r3, [pc, #524]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= st_Info.f_l1;				// 現在位置
 800abac:	4b81      	ldr	r3, [pc, #516]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= st_Info.f_l1_2;			// 等速完了位置
 800abb2:	4b80      	ldr	r3, [pc, #512]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;					// 角加速度
 800abb8:	f04f 0300 	mov.w	r3, #0
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;					// 目標角度
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;					// 現在角度
 800abca:	f04f 0300 	mov.w	r3, #0
 800abce:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= 0;					// 目標角度
 800abd0:	f04f 0300 	mov.w	r3, #0
 800abd4:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
	if( ( en_type == MOT_CONST_DEC ) || ( en_type == MOT_CONST_DEC_CUSTOM ) ){
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d002      	beq.n	800abe8 <MOT_goBlock_AccConstDec+0x120>
 800abe2:	78fb      	ldrb	r3, [r7, #3]
 800abe4:	2b06      	cmp	r3, #6
 800abe6:	d101      	bne.n	800abec <MOT_goBlock_AccConstDec+0x124>
		CTRL_clrData();										// 設定データをクリア
 800abe8:	f7fa fdd0 	bl	800578c <CTRL_clrData>
	}
	CTRL_setData( &st_data );						// データセット
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fa feb1 	bl	8005958 <CTRL_setData>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 800abf6:	e00f      	b.n	800ac18 <MOT_goBlock_AccConstDec+0x150>
		if( SYS_isOutOfCtrl() == TRUE ){
 800abf8:	f7fd fb80 	bl	80082fc <SYS_isOutOfCtrl>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d008      	beq.n	800ac14 <MOT_goBlock_AccConstDec+0x14c>
			CTRL_stop();
 800ac02:	f7fa fdb3 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		
 800ac06:	2000      	movs	r0, #0
 800ac08:	f7fd fbaa 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	f7fd fba7 	bl	8008360 <DCM_brakeMot>
			break;
 800ac12:	e00d      	b.n	800ac30 <MOT_goBlock_AccConstDec+0x168>
		}				
		MOT_setWallEdgeDist();
 800ac14:	f001 ffcc 	bl	800cbb0 <MOT_setWallEdgeDist>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 800ac18:	f7fa fd06 	bl	8005628 <Get_NowDist>
 800ac1c:	eeb0 7a40 	vmov.f32	s14, s0
 800ac20:	4b64      	ldr	r3, [pc, #400]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac22:	edd3 7a08 	vldr	s15, [r3, #32]
 800ac26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2e:	d4e3      	bmi.n	800abf8 <MOT_goBlock_AccConstDec+0x130>
	}

	/* ------ */
	/*  dec   */
	/* ------ */
	if( ( en_type != MOT_ACC_CONST ) && ( en_type != MOT_ACC_CONST_CUSTOM ) ){
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d05e      	beq.n	800acf4 <MOT_goBlock_AccConstDec+0x22c>
 800ac36:	78fb      	ldrb	r3, [r7, #3]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d05b      	beq.n	800acf4 <MOT_goBlock_AccConstDec+0x22c>

		if( MOT_GO_ST_NORMAL == en_goType ){
 800ac3c:	78bb      	ldrb	r3, [r7, #2]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <MOT_goBlock_AccConstDec+0x180>
			st_data.en_type		= CTRL_DEC;
 800ac42:	2302      	movs	r3, #2
 800ac44:	723b      	strb	r3, [r7, #8]
 800ac46:	e001      	b.n	800ac4c <MOT_goBlock_AccConstDec+0x184>
		}
		else{
			st_data.en_type		= CTRL_SKEW_DEC;
 800ac48:	2305      	movs	r3, #5
 800ac4a:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc3;			// 減速
 800ac4c:	4b59      	ldr	r3, [pc, #356]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_trgt;			// 現在速度
 800ac52:	4b58      	ldr	r3, [pc, #352]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 最終速度
 800ac58:	4b56      	ldr	r3, [pc, #344]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= st_Info.f_l1_2;			// 等速完了位置
 800ac5e:	4b55      	ldr	r3, [pc, #340]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_dist;			// 全移動完了位置
 800ac64:	4b53      	ldr	r3, [pc, #332]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800ac70:	f04f 0300 	mov.w	r3, #0
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;						// 目標角度
 800ac76:	f04f 0300 	mov.w	r3, #0
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800ac7c:	f04f 0300 	mov.w	r3, #0
 800ac80:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800ac82:	f04f 0300 	mov.w	r3, #0
 800ac86:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800ac8e:	f107 0308 	add.w	r3, r7, #8
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fa fe60 	bl	8005958 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 800ac98:	e01e      	b.n	800acd8 <MOT_goBlock_AccConstDec+0x210>
			if( SYS_isOutOfCtrl() == TRUE ){
 800ac9a:	f7fd fb2f 	bl	80082fc <SYS_isOutOfCtrl>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d008      	beq.n	800acb6 <MOT_goBlock_AccConstDec+0x1ee>
				CTRL_stop();
 800aca4:	f7fa fd62 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800aca8:	2000      	movs	r0, #0
 800acaa:	f7fd fb59 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800acae:	2001      	movs	r0, #1
 800acb0:	f7fd fb56 	bl	8008360 <DCM_brakeMot>
				break;
 800acb4:	e01e      	b.n	800acf4 <MOT_goBlock_AccConstDec+0x22c>
			}				
			MOT_setWallEdgeDist();
 800acb6:	f001 ff7b 	bl	800cbb0 <MOT_setWallEdgeDist>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 800acba:	4b3f      	ldr	r3, [pc, #252]	; (800adb8 <MOT_goBlock_AccConstDec+0x2f0>)
 800acbc:	edd3 7a00 	vldr	s15, [r3]
 800acc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800acc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	dc00      	bgt.n	800acd0 <MOT_goBlock_AccConstDec+0x208>
 800acce:	e003      	b.n	800acd8 <MOT_goBlock_AccConstDec+0x210>
 800acd0:	4b3a      	ldr	r3, [pc, #232]	; (800adbc <MOT_goBlock_AccConstDec+0x2f4>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10c      	bne.n	800acf2 <MOT_goBlock_AccConstDec+0x22a>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 800acd8:	f7fa fca6 	bl	8005628 <Get_NowDist>
 800acdc:	eeb0 7a40 	vmov.f32	s14, s0
 800ace0:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ace2:	edd3 7a06 	vldr	s15, [r3, #24]
 800ace6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acee:	d4d4      	bmi.n	800ac9a <MOT_goBlock_AccConstDec+0x1d2>
 800acf0:	e000      	b.n	800acf4 <MOT_goBlock_AccConstDec+0x22c>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 800acf2:	bf00      	nop

	/* -------------------- */
	/*  const walledge      */
	/* -------------------- */
	/* not found edge */
	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800acf4:	4b32      	ldr	r3, [pc, #200]	; (800adc0 <MOT_goBlock_AccConstDec+0x2f8>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d068      	beq.n	800adce <MOT_goBlock_AccConstDec+0x306>
 800acfc:	4b31      	ldr	r3, [pc, #196]	; (800adc4 <MOT_goBlock_AccConstDec+0x2fc>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f083 0301 	eor.w	r3, r3, #1
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d061      	beq.n	800adce <MOT_goBlock_AccConstDec+0x306>
		st_data.en_type			= CTRL_CONST;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800ad14:	4b27      	ldr	r3, [pc, #156]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800ad1a:	4b26      	ldr	r3, [pc, #152]	; (800adb4 <MOT_goBlock_AccConstDec+0x2ec>)
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= Get_NowDist();				// 現在位置
 800ad20:	f7fa fc82 	bl	8005628 <Get_NowDist>
 800ad24:	eef0 7a40 	vmov.f32	s15, s0
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800ad2c:	f7fa fc7c 	bl	8005628 <Get_NowDist>
 800ad30:	eef0 7a40 	vmov.f32	s15, s0
 800ad34:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800adc8 <MOT_goBlock_AccConstDec+0x300>
 800ad38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad3c:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800ad40:	f04f 0300 	mov.w	r3, #0
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800ad58:	f04f 0300 	mov.w	r3, #0
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800ad64:	f7fa fd12 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fa fdf3 	bl	8005958 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800ad72:	e012      	b.n	800ad9a <MOT_goBlock_AccConstDec+0x2d2>
			if( SYS_isOutOfCtrl() == TRUE ){
 800ad74:	f7fd fac2 	bl	80082fc <SYS_isOutOfCtrl>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d008      	beq.n	800ad90 <MOT_goBlock_AccConstDec+0x2c8>
				CTRL_stop();
 800ad7e:	f7fa fcf5 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800ad82:	2000      	movs	r0, #0
 800ad84:	f7fd faec 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800ad88:	2001      	movs	r0, #1
 800ad8a:	f7fd fae9 	bl	8008360 <DCM_brakeMot>
				break;
 800ad8e:	e01e      	b.n	800adce <MOT_goBlock_AccConstDec+0x306>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800ad90:	f001 ff52 	bl	800cc38 <MOT_setWallEdgeDist_LoopWait>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d118      	bne.n	800adcc <MOT_goBlock_AccConstDec+0x304>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800ad9a:	f7fa fc45 	bl	8005628 <Get_NowDist>
 800ad9e:	eeb0 7a40 	vmov.f32	s14, s0
 800ada2:	edd7 7a08 	vldr	s15, [r7, #32]
 800ada6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adae:	d4e1      	bmi.n	800ad74 <MOT_goBlock_AccConstDec+0x2ac>
 800adb0:	e00d      	b.n	800adce <MOT_goBlock_AccConstDec+0x306>
 800adb2:	bf00      	nop
 800adb4:	2000b024 	.word	0x2000b024
 800adb8:	20000b08 	.word	0x20000b08
 800adbc:	20000704 	.word	0x20000704
 800adc0:	200002b8 	.word	0x200002b8
 800adc4:	200002b9 	.word	0x200002b9
 800adc8:	3d3851ec 	.word	0x3d3851ec
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800adcc:	bf00      	nop
		}
	}
	/* straight for edge */
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800adce:	78bb      	ldrb	r3, [r7, #2]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d152      	bne.n	800ae7a <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 800add4:	4b39      	ldr	r3, [pc, #228]	; (800aebc <MOT_goBlock_AccConstDec+0x3f4>)
 800add6:	edd3 7a00 	vldr	s15, [r3]
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 800adda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade2:	d04a      	beq.n	800ae7a <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 800ade4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ade8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	d043      	beq.n	800ae7a <MOT_goBlock_AccConstDec+0x3b2>
		( f_fin != 0.0f )
	){
		st_data.en_type			= CTRL_CONST;
 800adf2:	2301      	movs	r3, #1
 800adf4:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 800adf6:	f04f 0300 	mov.w	r3, #0
 800adfa:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800adfc:	4b30      	ldr	r3, [pc, #192]	; (800aec0 <MOT_goBlock_AccConstDec+0x3f8>)
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800ae02:	4b2f      	ldr	r3, [pc, #188]	; (800aec0 <MOT_goBlock_AccConstDec+0x3f8>)
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;						// 現在位置
 800ae08:	f04f 0300 	mov.w	r3, #0
 800ae0c:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800ae0e:	4b2b      	ldr	r3, [pc, #172]	; (800aebc <MOT_goBlock_AccConstDec+0x3f4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 800ae14:	f04f 0300 	mov.w	r3, #0
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800ae1a:	f04f 0300 	mov.w	r3, #0
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 800ae26:	f04f 0300 	mov.w	r3, #0
 800ae2a:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800ae32:	f04f 0300 	mov.w	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800ae38:	f7fa fca8 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fa fd89 	bl	8005958 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800ae46:	e00d      	b.n	800ae64 <MOT_goBlock_AccConstDec+0x39c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800ae48:	f7fd fa58 	bl	80082fc <SYS_isOutOfCtrl>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <MOT_goBlock_AccConstDec+0x39c>
				CTRL_stop();
 800ae52:	f7fa fc8b 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7fd fa82 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	f7fd fa7f 	bl	8008360 <DCM_brakeMot>
				break;
 800ae62:	e00a      	b.n	800ae7a <MOT_goBlock_AccConstDec+0x3b2>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800ae64:	f7fa fbe0 	bl	8005628 <Get_NowDist>
 800ae68:	eeb0 7a40 	vmov.f32	s14, s0
 800ae6c:	edd7 7a08 	vldr	s15, [r7, #32]
 800ae70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae78:	d4e6      	bmi.n	800ae48 <MOT_goBlock_AccConstDec+0x380>
			}				
		}
	}

	/* stop */
	if( 0.0f == f_fin ){
 800ae7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae86:	d10a      	bne.n	800ae9e <MOT_goBlock_AccConstDec+0x3d6>
		LL_mDelay(100);			
 800ae88:	2064      	movs	r0, #100	; 0x64
 800ae8a:	f00a fd61 	bl	8015950 <LL_mDelay>
	 	CTRL_stop();				
 800ae8e:	f7fa fc6d 	bl	800576c <CTRL_stop>
		DCM_brakeMot( DCM_R );	
 800ae92:	2000      	movs	r0, #0
 800ae94:	f7fd fa64 	bl	8008360 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );	
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f7fd fa61 	bl	8008360 <DCM_brakeMot>
	}

	f_MotNowSpeed = f_fin;		
 800ae9e:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <MOT_goBlock_AccConstDec+0x3fc>)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6013      	str	r3, [r2, #0]
	GYRO_endErrChkAngle();
 800aea4:	f7fd fdaa 	bl	80089fc <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800aea8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aeac:	eeb0 0a67 	vmov.f32	s0, s15
 800aeb0:	f7fa fd0e 	bl	80058d0 <CTRL_setNowData_Err>
}
 800aeb4:	bf00      	nop
 800aeb6:	3738      	adds	r7, #56	; 0x38
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	200002bc 	.word	0x200002bc
 800aec0:	2000b024 	.word	0x2000b024
 800aec4:	200002ac 	.word	0x200002ac

0800aec8 <MOT_setData_ACC_CONST_DEC>:

void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	ed87 0a03 	vstr	s0, [r7, #12]
 800aed2:	edc7 0a02 	vstr	s1, [r7, #8]
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <MOT_setData_ACC_CONST_DEC+0x1e>
		f_1blockDist = BLOCK;
 800aee0:	4b34      	ldr	r3, [pc, #208]	; (800afb4 <MOT_setData_ACC_CONST_DEC+0xec>)
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e001      	b.n	800aeea <MOT_setData_ACC_CONST_DEC+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800aee6:	4b34      	ldr	r3, [pc, #208]	; (800afb8 <MOT_setData_ACC_CONST_DEC+0xf0>)
 800aee8:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800aeea:	f7ff fdd4 	bl	800aa96 <MOT_getAcc1>
 800aeee:	eef0 7a40 	vmov.f32	s15, s0
 800aef2:	4b32      	ldr	r3, [pc, #200]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800aef4:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800aef8:	f7ff fdd9 	bl	800aaae <MOT_getAcc3>
 800aefc:	eef0 7a40 	vmov.f32	s15, s0
 800af00:	4b2e      	ldr	r3, [pc, #184]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af02:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;								// 現在速度
 800af06:	4b2e      	ldr	r3, [pc, #184]	; (800afc0 <MOT_setData_ACC_CONST_DEC+0xf8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a2c      	ldr	r2, [pc, #176]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af0c:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotTrgtSpeed;								// 目標速度
 800af0e:	4b2d      	ldr	r3, [pc, #180]	; (800afc4 <MOT_setData_ACC_CONST_DEC+0xfc>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a2a      	ldr	r2, [pc, #168]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af14:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;									// 最終速度
 800af16:	4a29      	ldr	r2, [pc, #164]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800af1c:	ed97 7a03 	vldr	s14, [r7, #12]
 800af20:	edd7 7a05 	vldr	s15, [r7, #20]
 800af24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af28:	4b24      	ldr	r3, [pc, #144]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af2a:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 800af2e:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <MOT_setData_ACC_CONST_DEC+0xfc>)
 800af30:	ed93 7a00 	vldr	s14, [r3]
 800af34:	4b23      	ldr	r3, [pc, #140]	; (800afc4 <MOT_setData_ACC_CONST_DEC+0xfc>)
 800af36:	edd3 7a00 	vldr	s15, [r3]
 800af3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af3e:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <MOT_setData_ACC_CONST_DEC+0xf8>)
 800af40:	edd3 6a00 	vldr	s13, [r3]
 800af44:	4b1e      	ldr	r3, [pc, #120]	; (800afc0 <MOT_setData_ACC_CONST_DEC+0xf8>)
 800af46:	edd3 7a00 	vldr	s15, [r3]
 800af4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af54:	edd3 7a01 	vldr	s15, [r3, #4]
 800af58:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800af5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af60:	4b16      	ldr	r3, [pc, #88]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af62:	edc3 7a07 	vstr	s15, [r3, #28]
	f_l3			= ( f_fin * f_fin - f_MotTrgtSpeed * f_MotTrgtSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第3移動距離[m]
 800af66:	edd7 7a02 	vldr	s15, [r7, #8]
 800af6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800af6e:	4b15      	ldr	r3, [pc, #84]	; (800afc4 <MOT_setData_ACC_CONST_DEC+0xfc>)
 800af70:	edd3 6a00 	vldr	s13, [r3]
 800af74:	4b13      	ldr	r3, [pc, #76]	; (800afc4 <MOT_setData_ACC_CONST_DEC+0xfc>)
 800af76:	edd3 7a00 	vldr	s15, [r3]
 800af7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800af82:	4b0e      	ldr	r3, [pc, #56]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af84:	edd3 7a02 	vldr	s15, [r3, #8]
 800af88:	eef1 7a67 	vneg.f32	s15, s15
 800af8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800af90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af94:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 800af98:	4b08      	ldr	r3, [pc, #32]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800af9a:	ed93 7a06 	vldr	s14, [r3, #24]
 800af9e:	edd7 7a04 	vldr	s15, [r7, #16]
 800afa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afa6:	4b05      	ldr	r3, [pc, #20]	; (800afbc <MOT_setData_ACC_CONST_DEC+0xf4>)
 800afa8:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("1 %f,%f\r",st_Info.f_trgt,st_Info.f_l1);
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	3db851ec 	.word	0x3db851ec
 800afb8:	3e0255b0 	.word	0x3e0255b0
 800afbc:	2000b024 	.word	0x2000b024
 800afc0:	200002ac 	.word	0x200002ac
 800afc4:	200002b0 	.word	0x200002b0

0800afc8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800afc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afcc:	b086      	sub	sp, #24
 800afce:	af00      	add	r7, sp, #0
 800afd0:	ed87 0a03 	vstr	s0, [r7, #12]
 800afd4:	edc7 0a02 	vstr	s1, [r7, #8]
 800afd8:	4603      	mov	r3, r0
 800afda:	71fb      	strb	r3, [r7, #7]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20>
		f_1blockDist = BLOCK;
 800afe2:	4b79      	ldr	r3, [pc, #484]	; (800b1c8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x200>)
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	e001      	b.n	800afec <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800afe8:	4b78      	ldr	r3, [pc, #480]	; (800b1cc <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x204>)
 800afea:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 800afec:	f7ff fd53 	bl	800aa96 <MOT_getAcc1>
 800aff0:	eef0 7a40 	vmov.f32	s15, s0
 800aff4:	4b76      	ldr	r3, [pc, #472]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800aff6:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 800affa:	f7ff fd58 	bl	800aaae <MOT_getAcc3>
 800affe:	eef0 7a40 	vmov.f32	s15, s0
 800b002:	4b73      	ldr	r3, [pc, #460]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b004:	edc3 7a02 	vstr	s15, [r3, #8]


	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b008:	ed97 7a03 	vldr	s14, [r7, #12]
 800b00c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b014:	4b6e      	ldr	r3, [pc, #440]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b016:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;												// 現在速度
 800b01a:	4b6e      	ldr	r3, [pc, #440]	; (800b1d4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a6c      	ldr	r2, [pc, #432]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b020:	60d3      	str	r3, [r2, #12]
	st_Info.f_last		= f_fin;													// 最終速度
 800b022:	4a6b      	ldr	r2, [pc, #428]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	6153      	str	r3, [r2, #20]
	st_Info.f_trgt		= sqrt( 1 / ( ( st_Info.f_acc3 * -1 ) - st_Info.f_acc1 ) *
 800b028:	4b69      	ldr	r3, [pc, #420]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b02a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b02e:	eeb1 7a67 	vneg.f32	s14, s15
 800b032:	4b67      	ldr	r3, [pc, #412]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b034:	edd3 7a01 	vldr	s15, [r3, #4]
 800b038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b044:	ee16 0a90 	vmov	r0, s13
 800b048:	f7f5 faa6 	bl	8000598 <__aeabi_f2d>
 800b04c:	4604      	mov	r4, r0
 800b04e:	460d      	mov	r5, r1
					( 2 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 800b050:	4b5f      	ldr	r3, [pc, #380]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b052:	edd3 7a01 	vldr	s15, [r3, #4]
 800b056:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b05a:	4b5d      	ldr	r3, [pc, #372]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b05c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b060:	eef1 7a67 	vneg.f32	s15, s15
 800b064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b068:	ee17 0a90 	vmov	r0, s15
 800b06c:	f7f5 fa94 	bl	8000598 <__aeabi_f2d>
 800b070:	4680      	mov	r8, r0
 800b072:	4689      	mov	r9, r1
 800b074:	4b56      	ldr	r3, [pc, #344]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f5 fa8d 	bl	8000598 <__aeabi_f2d>
 800b07e:	a350      	add	r3, pc, #320	; (adr r3, 800b1c0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x1f8>)
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f7f5 f928 	bl	80002d8 <__aeabi_dsub>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4640      	mov	r0, r8
 800b08e:	4649      	mov	r1, r9
 800b090:	f7f5 fada 	bl	8000648 <__aeabi_dmul>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4690      	mov	r8, r2
 800b09a:	4699      	mov	r9, r3
					( st_Info.f_acc3 * -1 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 800b09c:	4b4c      	ldr	r3, [pc, #304]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b09e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b0a2:	eeb1 7a67 	vneg.f32	s14, s15
 800b0a6:	4b4b      	ldr	r3, [pc, #300]	; (800b1d4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 800b0a8:	edd3 7a00 	vldr	s15, [r3]
 800b0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b0:	4b48      	ldr	r3, [pc, #288]	; (800b1d4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 800b0b2:	edd3 7a00 	vldr	s15, [r3]
 800b0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ba:	ee17 0a90 	vmov	r0, s15
 800b0be:	f7f5 fa6b 	bl	8000598 <__aeabi_f2d>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
					( 2 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 f907 	bl	80002dc <__adddf3>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4690      	mov	r8, r2
 800b0d4:	4699      	mov	r9, r3
					( st_Info.f_acc3 * -1 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 800b0d6:	4b3e      	ldr	r3, [pc, #248]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b0d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800b0dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ec:	ee17 0a90 	vmov	r0, s15
 800b0f0:	f7f5 fa52 	bl	8000598 <__aeabi_f2d>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 f8ec 	bl	80002d8 <__aeabi_dsub>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
	st_Info.f_trgt		= sqrt( 1 / ( ( st_Info.f_acc3 * -1 ) - st_Info.f_acc1 ) *
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f7f5 fa9e 	bl	8000648 <__aeabi_dmul>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	ec43 2b17 	vmov	d7, r2, r3
 800b114:	eeb0 0a47 	vmov.f32	s0, s14
 800b118:	eef0 0a67 	vmov.f32	s1, s15
 800b11c:	f00f fb58 	bl	801a7d0 <sqrt>
 800b120:	ec53 2b10 	vmov	r2, r3, d0
 800b124:	4610      	mov	r0, r2
 800b126:	4619      	mov	r1, r3
 800b128:	f7f5 fd86 	bl	8000c38 <__aeabi_d2f>
 800b12c:	4603      	mov	r3, r0
 800b12e:	4a28      	ldr	r2, [pc, #160]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b130:	6113      	str	r3, [r2, #16]

	st_Info.f_l1		= ( st_Info.f_trgt * st_Info.f_trgt - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 800b132:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b134:	ed93 7a04 	vldr	s14, [r3, #16]
 800b138:	4b25      	ldr	r3, [pc, #148]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b13a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b13e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 800b144:	edd3 6a00 	vldr	s13, [r3]
 800b148:	4b22      	ldr	r3, [pc, #136]	; (800b1d4 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 800b14a:	edd3 7a00 	vldr	s15, [r3]
 800b14e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b152:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b156:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b158:	edd3 7a01 	vldr	s15, [r3, #4]
 800b15c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b166:	edc3 7a07 	vstr	s15, [r3, #28]
	f_l3			= ( f_fin * f_fin - st_Info.f_trgt * st_Info.f_trgt ) / ( ( st_Info.f_acc3  * -1 ) * 2 );			// 第3移動距離[m]
 800b16a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b16e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b172:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b174:	edd3 6a04 	vldr	s13, [r3, #16]
 800b178:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b17a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b17e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b182:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b186:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b188:	edd3 7a02 	vldr	s15, [r3, #8]
 800b18c:	eef1 7a67 	vneg.f32	s15, s15
 800b190:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b198:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b19e:	ed93 7a06 	vldr	s14, [r3, #24]
 800b1a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b1a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 800b1ac:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("2 %f,%f,%f,%f\r",st_Info.f_trgt,st_Info.f_l1,f_fin,f_MotNowSpeed);
}
 800b1b0:	bf00      	nop
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1ba:	bf00      	nop
 800b1bc:	f3af 8000 	nop.w
 800b1c0:	47ae147b 	.word	0x47ae147b
 800b1c4:	3f847ae1 	.word	0x3f847ae1
 800b1c8:	3db851ec 	.word	0x3db851ec
 800b1cc:	3e0255b0 	.word	0x3e0255b0
 800b1d0:	2000b024 	.word	0x2000b024
 800b1d4:	200002ac 	.word	0x200002ac

0800b1d8 <MOT_setData_MOT_ACC_CONST>:

void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	ed87 0a03 	vstr	s0, [r7, #12]
 800b1e2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <MOT_setData_MOT_ACC_CONST+0x1e>
		f_1blockDist = BLOCK;
 800b1f0:	4b21      	ldr	r3, [pc, #132]	; (800b278 <MOT_setData_MOT_ACC_CONST+0xa0>)
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e001      	b.n	800b1fa <MOT_setData_MOT_ACC_CONST+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b1f6:	4b21      	ldr	r3, [pc, #132]	; (800b27c <MOT_setData_MOT_ACC_CONST+0xa4>)
 800b1f8:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();													// 加速度1[mm/s^2]
 800b1fa:	f7ff fc4c 	bl	800aa96 <MOT_getAcc1>
 800b1fe:	eef0 7a40 	vmov.f32	s15, s0
 800b202:	4b1f      	ldr	r3, [pc, #124]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b204:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[mm/s^2](未使用)
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b20a:	f04f 0200 	mov.w	r2, #0
 800b20e:	609a      	str	r2, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b210:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <MOT_setData_MOT_ACC_CONST+0xac>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1a      	ldr	r2, [pc, #104]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b216:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 800b218:	4a19      	ldr	r2, [pc, #100]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 800b21e:	4b18      	ldr	r3, [pc, #96]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b226:	ed97 7a03 	vldr	s14, [r7, #12]
 800b22a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b232:	4b13      	ldr	r3, [pc, #76]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b234:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 800b238:	edd7 7a02 	vldr	s15, [r7, #8]
 800b23c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b240:	4b10      	ldr	r3, [pc, #64]	; (800b284 <MOT_setData_MOT_ACC_CONST+0xac>)
 800b242:	edd3 6a00 	vldr	s13, [r3]
 800b246:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <MOT_setData_MOT_ACC_CONST+0xac>)
 800b248:	edd3 7a00 	vldr	s15, [r3]
 800b24c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b250:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b254:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b256:	edd3 7a01 	vldr	s15, [r3, #4]
 800b25a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b262:	4b07      	ldr	r3, [pc, #28]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b264:	edc3 7a07 	vstr	s15, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	4a04      	ldr	r2, [pc, #16]	; (800b280 <MOT_setData_MOT_ACC_CONST+0xa8>)
 800b26e:	6213      	str	r3, [r2, #32]
}
 800b270:	bf00      	nop
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	3db851ec 	.word	0x3db851ec
 800b27c:	3e0255b0 	.word	0x3e0255b0
 800b280:	2000b024 	.word	0x2000b024
 800b284:	200002ac 	.word	0x200002ac

0800b288 <MOT_setData_MOT_ACC_CONST_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b288:	b5b0      	push	{r4, r5, r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b292:	edc7 0a02 	vstr	s1, [r7, #8]
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d102      	bne.n	800b2a6 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x1e>
		f_1blockDist = BLOCK;
 800b2a0:	4b3b      	ldr	r3, [pc, #236]	; (800b390 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x108>)
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e001      	b.n	800b2aa <MOT_setData_MOT_ACC_CONST_CUSTOM+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b2a6:	4b3b      	ldr	r3, [pc, #236]	; (800b394 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x10c>)
 800b2a8:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b2aa:	4b3b      	ldr	r3, [pc, #236]	; (800b398 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a3b      	ldr	r2, [pc, #236]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b2b0:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 800b2b2:	4a3a      	ldr	r2, [pc, #232]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 800b2b8:	4b38      	ldr	r3, [pc, #224]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b2c0:	ed97 7a03 	vldr	s14, [r7, #12]
 800b2c4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2cc:	4b33      	ldr	r3, [pc, #204]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b2ce:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0f );	// 加速度1[mm/s^2]（強制的に書き換え）
 800b2d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b2d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b2da:	4b2f      	ldr	r3, [pc, #188]	; (800b398 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 800b2dc:	edd3 6a00 	vldr	s13, [r3]
 800b2e0:	4b2d      	ldr	r3, [pc, #180]	; (800b398 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 800b2e2:	edd3 7a00 	vldr	s15, [r3]
 800b2e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2ee:	ee17 0a90 	vmov	r0, s15
 800b2f2:	f7f5 f951 	bl	8000598 <__aeabi_f2d>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	4b28      	ldr	r3, [pc, #160]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f5 f94a 	bl	8000598 <__aeabi_f2d>
 800b304:	a320      	add	r3, pc, #128	; (adr r3, 800b388 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x100>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f4 ffe5 	bl	80002d8 <__aeabi_dsub>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4610      	mov	r0, r2
 800b314:	4619      	mov	r1, r3
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	f7f4 ffdf 	bl	80002dc <__adddf3>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	f7f5 fab9 	bl	800089c <__aeabi_ddiv>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4610      	mov	r0, r2
 800b330:	4619      	mov	r1, r3
 800b332:	f7f5 fc81 	bl	8000c38 <__aeabi_d2f>
 800b336:	4603      	mov	r3, r0
 800b338:	4a18      	ldr	r2, [pc, #96]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b33a:	6053      	str	r3, [r2, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[m/s^2](未使用)
 800b33c:	4b17      	ldr	r3, [pc, #92]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	609a      	str	r2, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 800b344:	edd7 7a02 	vldr	s15, [r7, #8]
 800b348:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b34c:	4b12      	ldr	r3, [pc, #72]	; (800b398 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 800b34e:	edd3 6a00 	vldr	s13, [r3]
 800b352:	4b11      	ldr	r3, [pc, #68]	; (800b398 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 800b354:	edd3 7a00 	vldr	s15, [r3]
 800b358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b35c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b360:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b362:	edd3 7a01 	vldr	s15, [r3, #4]
 800b366:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b36a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b36e:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b370:	edc3 7a07 	vstr	s15, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 800b374:	4b09      	ldr	r3, [pc, #36]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	4a08      	ldr	r2, [pc, #32]	; (800b39c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800b37a:	6213      	str	r3, [r2, #32]
}
 800b37c:	bf00      	nop
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bdb0      	pop	{r4, r5, r7, pc}
 800b384:	f3af 8000 	nop.w
 800b388:	47ae147b 	.word	0x47ae147b
 800b38c:	3f847ae1 	.word	0x3f847ae1
 800b390:	3db851ec 	.word	0x3db851ec
 800b394:	3e0255b0 	.word	0x3e0255b0
 800b398:	200002ac 	.word	0x200002ac
 800b39c:	2000b024 	.word	0x2000b024

0800b3a0 <MOT_setData_MOT_CONST_DEC>:

void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b3aa:	edc7 0a02 	vstr	s1, [r7, #8]
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[mm]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <MOT_setData_MOT_CONST_DEC+0x1e>
		f_1blockDist = BLOCK;
 800b3b8:	4b24      	ldr	r3, [pc, #144]	; (800b44c <MOT_setData_MOT_CONST_DEC+0xac>)
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e001      	b.n	800b3c2 <MOT_setData_MOT_CONST_DEC+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b3be:	4b24      	ldr	r3, [pc, #144]	; (800b450 <MOT_setData_MOT_CONST_DEC+0xb0>)
 800b3c0:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800b3c2:	4b24      	ldr	r3, [pc, #144]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();													// 加速度3[mm/s^2]
 800b3ca:	f7ff fb70 	bl	800aaae <MOT_getAcc3>
 800b3ce:	eef0 7a40 	vmov.f32	s15, s0
 800b3d2:	4b20      	ldr	r3, [pc, #128]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3d4:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800b3d8:	4b1f      	ldr	r3, [pc, #124]	; (800b458 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3de:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;													// 目標速度
 800b3e0:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a1b      	ldr	r2, [pc, #108]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3e6:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度(未使用)
 800b3e8:	4a1a      	ldr	r2, [pc, #104]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800b3ee:	ed97 7a03 	vldr	s14, [r7, #12]
 800b3f2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fa:	4b16      	ldr	r3, [pc, #88]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b3fc:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800b400:	4b14      	ldr	r3, [pc, #80]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b402:	f04f 0200 	mov.w	r2, #0
 800b406:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第1-2移動距離[m]
 800b408:	4b12      	ldr	r3, [pc, #72]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b40a:	ed93 7a06 	vldr	s14, [r3, #24]
 800b40e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b412:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b416:	4b10      	ldr	r3, [pc, #64]	; (800b458 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800b418:	ed93 6a00 	vldr	s12, [r3]
 800b41c:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800b41e:	edd3 7a00 	vldr	s15, [r3]
 800b422:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b426:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800b42a:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b42c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b430:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b434:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <MOT_setData_MOT_CONST_DEC+0xb4>)
 800b43e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800b442:	bf00      	nop
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	3db851ec 	.word	0x3db851ec
 800b450:	3e0255b0 	.word	0x3e0255b0
 800b454:	2000b024 	.word	0x2000b024
 800b458:	200002ac 	.word	0x200002ac
 800b45c:	00000000 	.word	0x00000000

0800b460 <MOT_setData_MOT_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b460:	b5b0      	push	{r4, r5, r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	ed87 0a03 	vstr	s0, [r7, #12]
 800b46a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b46e:	4603      	mov	r3, r0
 800b470:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <MOT_setData_MOT_CONST_DEC_CUSTOM+0x1e>
		f_1blockDist = BLOCK;
 800b478:	4b3f      	ldr	r3, [pc, #252]	; (800b578 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x118>)
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e001      	b.n	800b482 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800b47e:	4b3f      	ldr	r3, [pc, #252]	; (800b57c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x11c>)
 800b480:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;									// 現在速度
 800b482:	4b3f      	ldr	r3, [pc, #252]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a3f      	ldr	r2, [pc, #252]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b488:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;									// 目標速度
 800b48a:	4b3d      	ldr	r3, [pc, #244]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a3d      	ldr	r2, [pc, #244]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b490:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度
 800b492:	4a3c      	ldr	r2, [pc, #240]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;									// 移動距離[mm]
 800b498:	ed97 7a03 	vldr	s14, [r7, #12]
 800b49c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a4:	4b37      	ldr	r3, [pc, #220]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b4a6:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800b4aa:	4b36      	ldr	r3, [pc, #216]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b4ac:	f04f 0200 	mov.w	r2, #0
 800b4b0:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0f ) * -1;	// 加速度3[mm/s^2]（強制的に書き換え）
 800b4b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b4ba:	4b31      	ldr	r3, [pc, #196]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b4bc:	edd3 6a00 	vldr	s13, [r3]
 800b4c0:	4b2f      	ldr	r3, [pc, #188]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b4c2:	edd3 7a00 	vldr	s15, [r3]
 800b4c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ce:	ee17 0a90 	vmov	r0, s15
 800b4d2:	f7f5 f861 	bl	8000598 <__aeabi_f2d>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f5 f85a 	bl	8000598 <__aeabi_f2d>
 800b4e4:	a322      	add	r3, pc, #136	; (adr r3, 800b570 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x110>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f4 fef5 	bl	80002d8 <__aeabi_dsub>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	f7f4 feef 	bl	80002dc <__adddf3>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4620      	mov	r0, r4
 800b504:	4629      	mov	r1, r5
 800b506:	f7f5 f9c9 	bl	800089c <__aeabi_ddiv>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	4610      	mov	r0, r2
 800b510:	4619      	mov	r1, r3
 800b512:	f7f5 fb91 	bl	8000c38 <__aeabi_d2f>
 800b516:	4603      	mov	r3, r0
 800b518:	ee07 3a90 	vmov	s15, r3
 800b51c:	eef1 7a67 	vneg.f32	s15, s15
 800b520:	4b18      	ldr	r3, [pc, #96]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b522:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800b526:	4b17      	ldr	r3, [pc, #92]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第1-2移動距離[m]
 800b52e:	4b15      	ldr	r3, [pc, #84]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b530:	ed93 7a06 	vldr	s14, [r3, #24]
 800b534:	edd7 7a02 	vldr	s15, [r7, #8]
 800b538:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b53c:	4b10      	ldr	r3, [pc, #64]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b53e:	ed93 6a00 	vldr	s12, [r3]
 800b542:	4b0f      	ldr	r3, [pc, #60]	; (800b580 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800b544:	edd3 7a00 	vldr	s15, [r3]
 800b548:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b54c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800b550:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b552:	edd3 7a02 	vldr	s15, [r3, #8]
 800b556:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800b55a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b55e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b562:	4b08      	ldr	r3, [pc, #32]	; (800b584 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800b564:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800b568:	bf00      	nop
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bdb0      	pop	{r4, r5, r7, pc}
 800b570:	47ae147b 	.word	0x47ae147b
 800b574:	3f847ae1 	.word	0x3f847ae1
 800b578:	3db851ec 	.word	0x3db851ec
 800b57c:	3e0255b0 	.word	0x3e0255b0
 800b580:	200002ac 	.word	0x200002ac
 800b584:	2000b024 	.word	0x2000b024

0800b588 <MOT_getStType>:

enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800b588:	b5b0      	push	{r4, r5, r7, lr}
 800b58a:	b08e      	sub	sp, #56	; 0x38
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b592:	edc7 0a02 	vstr	s1, [r7, #8]
 800b596:	4603      	mov	r3, r0
 800b598:	71fb      	strb	r3, [r7, #7]
	float f_l1;							//加速距離
	float f_l3;							//減速距離
	float f_total;							// 移動距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d108      	bne.n	800b5b2 <MOT_getStType+0x2a>
		f_total	= f_num * BLOCK;
 800b5a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5a4:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800b818 <MOT_getStType+0x290>
 800b5a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800b5b0:	e007      	b.n	800b5c2 <MOT_getStType+0x3a>
	}
	else{									// 斜めの直進
		f_total	= f_num * BLOCK_SKEW;
 800b5b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5b6:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800b81c <MOT_getStType+0x294>
 800b5ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34


	/* ================ */
	/*   加速＋等速動作  */
	/* ================ */
	f_v1Div		= f_fin - f_MotNowSpeed;
 800b5c2:	4b97      	ldr	r3, [pc, #604]	; (800b820 <MOT_getStType+0x298>)
 800b5c4:	edd3 7a00 	vldr	s15, [r3]
 800b5c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b5cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_acc1		= MOT_getAcc1();				// 加速度1[mm/s^2]
 800b5d4:	f7ff fa5f 	bl	800aa96 <MOT_getAcc1>
 800b5d8:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	f_t1		= f_v1Div / f_acc1;
 800b5dc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800b5e0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b5e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	f_l1 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t1;
 800b5ec:	4b8c      	ldr	r3, [pc, #560]	; (800b820 <MOT_getStType+0x298>)
 800b5ee:	ed93 7a00 	vldr	s14, [r3]
 800b5f2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b602:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b60a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	/*  加速＋等速動作 */
	if( f_total <= ( f_l1 + MOT_MOVE_ST_THRESHOLD ) ){
 800b60e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b610:	f7f4 ffc2 	bl	8000598 <__aeabi_f2d>
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b61a:	f7f4 ffbd 	bl	8000598 <__aeabi_f2d>
 800b61e:	a37a      	add	r3, pc, #488	; (adr r3, 800b808 <MOT_getStType+0x280>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f4 fe5a 	bl	80002dc <__adddf3>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f7f5 fa86 	bl	8000b40 <__aeabi_dcmple>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d019      	beq.n	800b66e <MOT_getStType+0xe6>

		/* 加速が最終速度に対して完了しない */
		if( f_total < ( f_l1 + MOT_MOVE_ST_MIN ) ){
 800b63a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b63c:	f7f4 ffac 	bl	8000598 <__aeabi_f2d>
 800b640:	4604      	mov	r4, r0
 800b642:	460d      	mov	r5, r1
 800b644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b646:	f7f4 ffa7 	bl	8000598 <__aeabi_f2d>
 800b64a:	a371      	add	r3, pc, #452	; (adr r3, 800b810 <MOT_getStType+0x288>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fe44 	bl	80002dc <__adddf3>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4620      	mov	r0, r4
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f5 fa66 	bl	8000b2c <__aeabi_dcmplt>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <MOT_getStType+0xe2>
//			printf("パターン4\n\r");
			return MOT_ACC_CONST_CUSTOM;		// パターン4（強制的に加速度を変更する）
 800b666:	2304      	movs	r3, #4
 800b668:	e0c8      	b.n	800b7fc <MOT_getStType+0x274>
		}
		else{
//			printf("パターン3\n\r");
			return MOT_ACC_CONST;				// パターン3（加速＋等速）
 800b66a:	2303      	movs	r3, #3
 800b66c:	e0c6      	b.n	800b7fc <MOT_getStType+0x274>
	}

	/* ================ */
	/*  等速＋減速動作   */
	/* ================ */
	f_v3Div		= f_fin - f_MotNowSpeed;
 800b66e:	4b6c      	ldr	r3, [pc, #432]	; (800b820 <MOT_getStType+0x298>)
 800b670:	edd3 7a00 	vldr	s15, [r3]
 800b674:	ed97 7a02 	vldr	s14, [r7, #8]
 800b678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b67c:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();				// 加速度3[mm/s^2]
 800b680:	f7ff fa15 	bl	800aaae <MOT_getAcc3>
 800b684:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= f_v3Div / ( f_acc3 * -1 );
 800b688:	edd7 7a08 	vldr	s15, [r7, #32]
 800b68c:	eef1 6a67 	vneg.f32	s13, s15
 800b690:	ed97 7a07 	vldr	s14, [r7, #28]
 800b694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b698:	edc7 7a06 	vstr	s15, [r7, #24]

	f_l3 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t3;
 800b69c:	4b60      	ldr	r3, [pc, #384]	; (800b820 <MOT_getStType+0x298>)
 800b69e:	ed93 7a00 	vldr	s14, [r3]
 800b6a2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6b2:	ed97 7a06 	vldr	s14, [r7, #24]
 800b6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ba:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 等速＋減速動作 */
	if( f_total <= ( f_l3 + MOT_MOVE_ST_THRESHOLD ) ){
 800b6be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6c0:	f7f4 ff6a 	bl	8000598 <__aeabi_f2d>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	6978      	ldr	r0, [r7, #20]
 800b6ca:	f7f4 ff65 	bl	8000598 <__aeabi_f2d>
 800b6ce:	a34e      	add	r3, pc, #312	; (adr r3, 800b808 <MOT_getStType+0x280>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 fe02 	bl	80002dc <__adddf3>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f5 fa2e 	bl	8000b40 <__aeabi_dcmple>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d019      	beq.n	800b71e <MOT_getStType+0x196>

		/* 減速が最終速度に対して完了しない */
		if( f_total < ( f_l3 + MOT_MOVE_ST_MIN ) ){
 800b6ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6ec:	f7f4 ff54 	bl	8000598 <__aeabi_f2d>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	6978      	ldr	r0, [r7, #20]
 800b6f6:	f7f4 ff4f 	bl	8000598 <__aeabi_f2d>
 800b6fa:	a345      	add	r3, pc, #276	; (adr r3, 800b810 <MOT_getStType+0x288>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 fdec 	bl	80002dc <__adddf3>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f5 fa0e 	bl	8000b2c <__aeabi_dcmplt>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <MOT_getStType+0x192>
//			printf("パターン6\n\r");
			return MOT_CONST_DEC_CUSTOM;		// パターン6（強制的に加速度を変更する）
 800b716:	2306      	movs	r3, #6
 800b718:	e070      	b.n	800b7fc <MOT_getStType+0x274>
		}
		else{
//			printf("パターン5\n\r");
			return MOT_CONST_DEC;				// パターン5（等速＋減速）
 800b71a:	2305      	movs	r3, #5
 800b71c:	e06e      	b.n	800b7fc <MOT_getStType+0x274>
	}

	/* ========== */
	/*  台形動作  */
	/* ========== */
	f_v1Div		= f_MotTrgtSpeed - f_MotNowSpeed;					// 台形時の速度差
 800b71e:	4b41      	ldr	r3, [pc, #260]	; (800b824 <MOT_getStType+0x29c>)
 800b720:	ed93 7a00 	vldr	s14, [r3]
 800b724:	4b3e      	ldr	r3, [pc, #248]	; (800b820 <MOT_getStType+0x298>)
 800b726:	edd3 7a00 	vldr	s15, [r3]
 800b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_t1		= f_v1Div / f_acc1;
 800b732:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800b736:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b73e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_l1		= ( f_MotNowSpeed + f_MotTrgtSpeed ) * 0.5f * f_t1;
 800b742:	4b37      	ldr	r3, [pc, #220]	; (800b820 <MOT_getStType+0x298>)
 800b744:	ed93 7a00 	vldr	s14, [r3]
 800b748:	4b36      	ldr	r3, [pc, #216]	; (800b824 <MOT_getStType+0x29c>)
 800b74a:	edd3 7a00 	vldr	s15, [r3]
 800b74e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b752:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b75a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	f_v3Div		= f_fin - f_MotTrgtSpeed;							// 台形時の速度差
 800b766:	4b2f      	ldr	r3, [pc, #188]	; (800b824 <MOT_getStType+0x29c>)
 800b768:	edd3 7a00 	vldr	s15, [r3]
 800b76c:	ed97 7a02 	vldr	s14, [r7, #8]
 800b770:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b774:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();									// 加速度3[mm/s^2]
 800b778:	f7ff f999 	bl	800aaae <MOT_getAcc3>
 800b77c:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= -1.0f * f_v3Div / f_acc3;							// 減速時の所要時間
 800b780:	edd7 7a08 	vldr	s15, [r7, #32]
 800b784:	eef1 6a67 	vneg.f32	s13, s15
 800b788:	ed97 7a07 	vldr	s14, [r7, #28]
 800b78c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b790:	edc7 7a06 	vstr	s15, [r7, #24]
	f_l3		= ( f_MotTrgtSpeed + f_fin ) * 0.5f * f_t3;
 800b794:	4b23      	ldr	r3, [pc, #140]	; (800b824 <MOT_getStType+0x29c>)
 800b796:	ed93 7a00 	vldr	s14, [r3]
 800b79a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b7a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7aa:	ed97 7a06 	vldr	s14, [r7, #24]
 800b7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b2:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 通常の台形動作 */
	if( ( f_total - f_l1 - f_l3 - MOT_MOVE_ST_MIN) >= 0 ){
 800b7b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b7be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b7c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ca:	ee17 0a90 	vmov	r0, s15
 800b7ce:	f7f4 fee3 	bl	8000598 <__aeabi_f2d>
 800b7d2:	a30f      	add	r3, pc, #60	; (adr r3, 800b810 <MOT_getStType+0x288>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 fd7e 	bl	80002d8 <__aeabi_dsub>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	f04f 0300 	mov.w	r3, #0
 800b7ec:	f7f5 f9b2 	bl	8000b54 <__aeabi_dcmpge>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <MOT_getStType+0x272>
//		printf("パターン1\n\r");
		return MOT_ACC_CONST_DEC;				// パターン1（通常）
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e000      	b.n	800b7fc <MOT_getStType+0x274>
	}
	/* 等速値を変更する */
	else{
//		printf("パターン2\n\r");
		return MOT_ACC_CONST_DEC_CUSTOM;		// パターン2（目標速度を変更）
 800b7fa:	2302      	movs	r3, #2
	}
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3738      	adds	r7, #56	; 0x38
 800b800:	46bd      	mov	sp, r7
 800b802:	bdb0      	pop	{r4, r5, r7, pc}
 800b804:	f3af 8000 	nop.w
 800b808:	76c8b439 	.word	0x76c8b439
 800b80c:	3f8a9fbe 	.word	0x3f8a9fbe
 800b810:	47ae147b 	.word	0x47ae147b
 800b814:	3f847ae1 	.word	0x3f847ae1
 800b818:	3db851ec 	.word	0x3db851ec
 800b81c:	3e0255b0 	.word	0x3e0255b0
 800b820:	200002ac 	.word	0x200002ac
 800b824:	200002b0 	.word	0x200002b0

0800b828 <MOT_go_FinSpeed>:

void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b832:	edc7 0a02 	vstr	s1, [r7, #8]
 800b836:	4603      	mov	r3, r0
 800b838:	71fb      	strb	r3, [r7, #7]
	enMOT_ST_TYPE 		en_type 		= MOT_getStType( f_num, f_fin, en_goStType);			// 動作パターン取得
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	4618      	mov	r0, r3
 800b83e:	edd7 0a02 	vldr	s1, [r7, #8]
 800b842:	ed97 0a03 	vldr	s0, [r7, #12]
 800b846:	f7ff fe9f 	bl	800b588 <MOT_getStType>
 800b84a:	4603      	mov	r3, r0
 800b84c:	75fb      	strb	r3, [r7, #23]

	/* 移動距離と指定値に応じで動作を変える */
	switch( en_type ){
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	3b01      	subs	r3, #1
 800b852:	2b05      	cmp	r3, #5
 800b854:	d873      	bhi.n	800b93e <MOT_go_FinSpeed+0x116>
 800b856:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <MOT_go_FinSpeed+0x34>)
 800b858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85c:	0800b875 	.word	0x0800b875
 800b860:	0800b897 	.word	0x0800b897
 800b864:	0800b8b9 	.word	0x0800b8b9
 800b868:	0800b8db 	.word	0x0800b8db
 800b86c:	0800b8fb 	.word	0x0800b8fb
 800b870:	0800b91d 	.word	0x0800b91d

		case MOT_ACC_CONST_DEC:				// [01] 台形加速
			MOT_setData_ACC_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	4618      	mov	r0, r3
 800b878:	edd7 0a02 	vldr	s1, [r7, #8]
 800b87c:	ed97 0a03 	vldr	s0, [r7, #12]
 800b880:	f7ff fb22 	bl	800aec8 <MOT_setData_ACC_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800b884:	79fa      	ldrb	r2, [r7, #7]
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	ed97 0a02 	vldr	s0, [r7, #8]
 800b890:	f7ff f91a 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b894:	e054      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_DEC_CUSTOM:		// [02] 台形加速（等速）
			MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );		// 動作データ作成
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	4618      	mov	r0, r3
 800b89a:	edd7 0a02 	vldr	s1, [r7, #8]
 800b89e:	ed97 0a03 	vldr	s0, [r7, #12]
 800b8a2:	f7ff fb91 	bl	800afc8 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800b8a6:	79fa      	ldrb	r2, [r7, #7]
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	ed97 0a02 	vldr	s0, [r7, #8]
 800b8b2:	f7ff f909 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b8b6:	e043      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST:				// [03] 加速＋等速
			MOT_setData_MOT_ACC_CONST( f_num, f_fin, en_goStType );					// 動作データ作成
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	edd7 0a02 	vldr	s1, [r7, #8]
 800b8c0:	ed97 0a03 	vldr	s0, [r7, #12]
 800b8c4:	f7ff fc88 	bl	800b1d8 <MOT_setData_MOT_ACC_CONST>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800b8c8:	79fa      	ldrb	r2, [r7, #7]
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	ed97 0a02 	vldr	s0, [r7, #8]
 800b8d4:	f7ff f8f8 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b8d8:	e032      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_CUSTOM:		// [04] 加速＋等速（等速）
			MOT_setData_MOT_ACC_CONST_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800b8da:	79fb      	ldrb	r3, [r7, #7]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	edd7 0a02 	vldr	s1, [r7, #8]
 800b8e2:	ed97 0a03 	vldr	s0, [r7, #12]
 800b8e6:	f7ff fccf 	bl	800b288 <MOT_setData_MOT_ACC_CONST_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, MOT_GO_ST_NORMAL );			// 動作
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	ed97 0a02 	vldr	s0, [r7, #8]
 800b8f4:	f7ff f8e8 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b8f8:	e022      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC:				// [05] 等速＋減速
			MOT_setData_MOT_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	edd7 0a02 	vldr	s1, [r7, #8]
 800b902:	ed97 0a03 	vldr	s0, [r7, #12]
 800b906:	f7ff fd4b 	bl	800b3a0 <MOT_setData_MOT_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800b90a:	79fa      	ldrb	r2, [r7, #7]
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	ed97 0a02 	vldr	s0, [r7, #8]
 800b916:	f7ff f8d7 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b91a:	e011      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC_CUSTOM:		// [06] 等速＋減速（減速値変更）
			MOT_setData_MOT_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	4618      	mov	r0, r3
 800b920:	edd7 0a02 	vldr	s1, [r7, #8]
 800b924:	ed97 0a03 	vldr	s0, [r7, #12]
 800b928:	f7ff fd9a 	bl	800b460 <MOT_setData_MOT_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800b92c:	79fa      	ldrb	r2, [r7, #7]
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	4611      	mov	r1, r2
 800b932:	4618      	mov	r0, r3
 800b934:	ed97 0a02 	vldr	s0, [r7, #8]
 800b938:	f7ff f8c6 	bl	800aac8 <MOT_goBlock_AccConstDec>
			break;
 800b93c:	e000      	b.n	800b940 <MOT_go_FinSpeed+0x118>

		default:
			break;
 800b93e:	bf00      	nop
	}

}
 800b940:	bf00      	nop
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <MOT_goBlock_FinSpeed>:

void MOT_goBlock_FinSpeed( float f_num, float f_fin )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	ed87 0a01 	vstr	s0, [r7, #4]
 800b952:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_NORMAL );		// 通常の直進
 800b956:	2000      	movs	r0, #0
 800b958:	edd7 0a00 	vldr	s1, [r7]
 800b95c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b960:	f7ff ff62 	bl	800b828 <MOT_go_FinSpeed>
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <MOT_goSkewBlock_FinSpeed>:

void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	ed87 0a01 	vstr	s0, [r7, #4]
 800b976:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_SKEW );		// 通常の直進
 800b97a:	2001      	movs	r0, #1
 800b97c:	edd7 0a00 	vldr	s1, [r7]
 800b980:	ed97 0a01 	vldr	s0, [r7, #4]
 800b984:	f7ff ff50 	bl	800b828 <MOT_go_FinSpeed>
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <MOT_goBlock_Const>:

void MOT_goBlock_Const(float f_num)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b0a0      	sub	sp, #128	; 0x80
 800b994:	af00      	add	r7, sp, #0
 800b996:	ed87 0a01 	vstr	s0, [r7, #4]
	stCTRL_DATA		st_data;
	stMOT_DATA		st_info;

	GYRO_staErrChkAngle();
 800b99a:	f7fd f81d 	bl	80089d8 <GYRO_staErrChkAngle>

	/* ---------------- */
	/*  動作データ計算   */
	/* ---------------- */
	/* 距離 */
	st_info.f_dist		= f_num * BLOCK;													// 移動距離[m]
 800b99e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b9a2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800bbcc <MOT_goBlock_Const+0x23c>
 800b9a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	/* ------ */
	/*  等速  */
	/* ------ */
	st_data.en_type			= CTRL_CONST;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	st_data.f_acc			= 0;					// 加速度指定
 800b9b4:	f04f 0300 	mov.w	r3, #0
 800b9b8:	65bb      	str	r3, [r7, #88]	; 0x58
	st_data.f_now			= f_MotNowSpeed;			// 現在速度
 800b9ba:	4b85      	ldr	r3, [pc, #532]	; (800bbd0 <MOT_goBlock_Const+0x240>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	65fb      	str	r3, [r7, #92]	; 0x5c
	st_data.f_trgt			= f_MotNowSpeed;			// 目標速度
 800b9c0:	4b83      	ldr	r3, [pc, #524]	; (800bbd0 <MOT_goBlock_Const+0x240>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	663b      	str	r3, [r7, #96]	; 0x60
	st_data.f_nowDist		= 0;				// 現在位置
 800b9c6:	f04f 0300 	mov.w	r3, #0
 800b9ca:	667b      	str	r3, [r7, #100]	; 0x64
	st_data.f_dist			= st_info.f_dist;			// 等速完了位置
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	66bb      	str	r3, [r7, #104]	; 0x68
	st_data.f_accAngleS		= 0;					// 角加速度
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800b9d6:	f04f 0300 	mov.w	r3, #0
 800b9da:	673b      	str	r3, [r7, #112]	; 0x70
	st_data.f_trgtAngleS		= 0;					// 目標角度
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	677b      	str	r3, [r7, #116]	; 0x74
	st_data.f_nowAngle		= 0;					// 現在角度
 800b9e2:	f04f 0300 	mov.w	r3, #0
 800b9e6:	67bb      	str	r3, [r7, #120]	; 0x78
	st_data.f_angle			= 0;					// 目標角度
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	67fb      	str	r3, [r7, #124]	; 0x7c
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	657b      	str	r3, [r7, #84]	; 0x54
	CTRL_clrData();										// 設定データをクリア
 800b9f4:	f7f9 feca 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );						// データセット
 800b9f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f9 ffab 	bl	8005958 <CTRL_setData>
	Set_TrgtSpeed(f_MotNowSpeed);
 800ba02:	4b73      	ldr	r3, [pc, #460]	; (800bbd0 <MOT_goBlock_Const+0x240>)
 800ba04:	edd3 7a00 	vldr	s15, [r3]
 800ba08:	eeb0 0a67 	vmov.f32	s0, s15
 800ba0c:	f7f9 fe36 	bl	800567c <Set_TrgtSpeed>
//	printf("目標速度 %f 目標位置 %f \r\n",st_data.f_trgt,st_data.f_dist);
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800ba10:	e012      	b.n	800ba38 <MOT_goBlock_Const+0xa8>
		if( SYS_isOutOfCtrl() == TRUE ){
 800ba12:	f7fc fc73 	bl	80082fc <SYS_isOutOfCtrl>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d008      	beq.n	800ba2e <MOT_goBlock_Const+0x9e>
			CTRL_stop();
 800ba1c:	f7f9 fea6 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800ba20:	2000      	movs	r0, #0
 800ba22:	f7fc fc9d 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800ba26:	2001      	movs	r0, #1
 800ba28:	f7fc fc9a 	bl	8008360 <DCM_brakeMot>
			break;
 800ba2c:	e011      	b.n	800ba52 <MOT_goBlock_Const+0xc2>
		}				// 途中で制御不能になった
		if(MOT_setWallEdgeDist()==TRUE) break;
 800ba2e:	f001 f8bf 	bl	800cbb0 <MOT_setWallEdgeDist>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10b      	bne.n	800ba50 <MOT_goBlock_Const+0xc0>
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800ba38:	f7f9 fdf6 	bl	8005628 <Get_NowDist>
 800ba3c:	eeb0 7a40 	vmov.f32	s14, s0
 800ba40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ba44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	d4e1      	bmi.n	800ba12 <MOT_goBlock_Const+0x82>
 800ba4e:	e000      	b.n	800ba52 <MOT_goBlock_Const+0xc2>
		if(MOT_setWallEdgeDist()==TRUE) break;
 800ba50:	bf00      	nop
	}

	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 800ba52:	4b60      	ldr	r3, [pc, #384]	; (800bbd4 <MOT_goBlock_Const+0x244>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d05c      	beq.n	800bb14 <MOT_goBlock_Const+0x184>
 800ba5a:	4b5f      	ldr	r3, [pc, #380]	; (800bbd8 <MOT_goBlock_Const+0x248>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	f083 0301 	eor.w	r3, r3, #1
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d055      	beq.n	800bb14 <MOT_goBlock_Const+0x184>
		st_data.en_type			= CTRL_CONST;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		st_data.f_acc			= 0;						// 加速度指定
 800ba6e:	f04f 0300 	mov.w	r3, #0
 800ba72:	65bb      	str	r3, [r7, #88]	; 0x58
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800ba74:	4b59      	ldr	r3, [pc, #356]	; (800bbdc <MOT_goBlock_Const+0x24c>)
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	65fb      	str	r3, [r7, #92]	; 0x5c
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800ba7a:	4b58      	ldr	r3, [pc, #352]	; (800bbdc <MOT_goBlock_Const+0x24c>)
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	663b      	str	r3, [r7, #96]	; 0x60
		st_data.f_nowDist		= Get_NowDist();				// 現在位置
 800ba80:	f7f9 fdd2 	bl	8005628 <Get_NowDist>
 800ba84:	eef0 7a40 	vmov.f32	s15, s0
 800ba88:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		st_data.f_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 800ba8c:	f7f9 fdcc 	bl	8005628 <Get_NowDist>
 800ba90:	eef0 7a40 	vmov.f32	s15, s0
 800ba94:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800bbe0 <MOT_goBlock_Const+0x250>
 800ba98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba9c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		st_data.f_accAngleS		= 0;						// 角加速度
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	66fb      	str	r3, [r7, #108]	; 0x6c
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800baa6:	f04f 0300 	mov.w	r3, #0
 800baaa:	673b      	str	r3, [r7, #112]	; 0x70
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800baac:	f04f 0300 	mov.w	r3, #0
 800bab0:	677b      	str	r3, [r7, #116]	; 0x74
		st_data.f_nowAngle		= 0;						// 現在角度
 800bab2:	f04f 0300 	mov.w	r3, #0
 800bab6:	67bb      	str	r3, [r7, #120]	; 0x78
		st_data.f_angle			= 0;						// 目標角度
 800bab8:	f04f 0300 	mov.w	r3, #0
 800babc:	67fb      	str	r3, [r7, #124]	; 0x7c
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800babe:	f04f 0300 	mov.w	r3, #0
 800bac2:	657b      	str	r3, [r7, #84]	; 0x54
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800bac4:	f7f9 fe62 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800bac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f9 ff43 	bl	8005958 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800bad2:	e012      	b.n	800bafa <MOT_goBlock_Const+0x16a>
			if( SYS_isOutOfCtrl() == TRUE ){
 800bad4:	f7fc fc12 	bl	80082fc <SYS_isOutOfCtrl>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <MOT_goBlock_Const+0x160>
				CTRL_stop();
 800bade:	f7f9 fe45 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800bae2:	2000      	movs	r0, #0
 800bae4:	f7fc fc3c 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800bae8:	2001      	movs	r0, #1
 800baea:	f7fc fc39 	bl	8008360 <DCM_brakeMot>
				break;
 800baee:	e011      	b.n	800bb14 <MOT_goBlock_Const+0x184>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800baf0:	f001 f8a2 	bl	800cc38 <MOT_setWallEdgeDist_LoopWait>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10b      	bne.n	800bb12 <MOT_goBlock_Const+0x182>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 800bafa:	f7f9 fd95 	bl	8005628 <Get_NowDist>
 800bafe:	eeb0 7a40 	vmov.f32	s14, s0
 800bb02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bb06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0e:	d4e1      	bmi.n	800bad4 <MOT_goBlock_Const+0x144>
 800bb10:	e000      	b.n	800bb14 <MOT_goBlock_Const+0x184>
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 800bb12:	bf00      	nop
		}
	}
	/* straight for edge */
	if( f_WallEdgeAddDist != 0.0f)
 800bb14:	4b33      	ldr	r3, [pc, #204]	; (800bbe4 <MOT_goBlock_Const+0x254>)
 800bb16:	edd3 7a00 	vldr	s15, [r3]
 800bb1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	d044      	beq.n	800bbae <MOT_goBlock_Const+0x21e>
	{
		st_data.en_type			= CTRL_CONST;
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		st_data.f_acc			= 0;						// 加速度指定
 800bb2a:	f04f 0300 	mov.w	r3, #0
 800bb2e:	65bb      	str	r3, [r7, #88]	; 0x58
		st_data.f_now			= st_Info.f_last;			// 現在速度
 800bb30:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <MOT_goBlock_Const+0x24c>)
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	65fb      	str	r3, [r7, #92]	; 0x5c
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 800bb36:	4b29      	ldr	r3, [pc, #164]	; (800bbdc <MOT_goBlock_Const+0x24c>)
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	663b      	str	r3, [r7, #96]	; 0x60
		st_data.f_nowDist		= 0;						// 現在位置
 800bb3c:	f04f 0300 	mov.w	r3, #0
 800bb40:	667b      	str	r3, [r7, #100]	; 0x64
		st_data.f_dist			= f_WallEdgeAddDist;		// 等速完了位置
 800bb42:	4b28      	ldr	r3, [pc, #160]	; (800bbe4 <MOT_goBlock_Const+0x254>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	66bb      	str	r3, [r7, #104]	; 0x68
		st_data.f_accAngleS		= 0;						// 角加速度
 800bb48:	f04f 0300 	mov.w	r3, #0
 800bb4c:	66fb      	str	r3, [r7, #108]	; 0x6c
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	673b      	str	r3, [r7, #112]	; 0x70
		st_data.f_trgtAngleS	= 0;						// 目標角度
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	677b      	str	r3, [r7, #116]	; 0x74
		st_data.f_nowAngle		= 0;						// 現在角度
 800bb5a:	f04f 0300 	mov.w	r3, #0
 800bb5e:	67bb      	str	r3, [r7, #120]	; 0x78
		st_data.f_angle			= 0;						// 目標角度
 800bb60:	f04f 0300 	mov.w	r3, #0
 800bb64:	67fb      	str	r3, [r7, #124]	; 0x7c
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800bb66:	f04f 0300 	mov.w	r3, #0
 800bb6a:	657b      	str	r3, [r7, #84]	; 0x54
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 800bb6c:	f7f9 fe0e 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 800bb70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f9 feef 	bl	8005958 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800bb7a:	e00d      	b.n	800bb98 <MOT_goBlock_Const+0x208>
			if( SYS_isOutOfCtrl() == TRUE ){
 800bb7c:	f7fc fbbe 	bl	80082fc <SYS_isOutOfCtrl>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d008      	beq.n	800bb98 <MOT_goBlock_Const+0x208>
				CTRL_stop();
 800bb86:	f7f9 fdf1 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f7fc fbe8 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800bb90:	2001      	movs	r0, #1
 800bb92:	f7fc fbe5 	bl	8008360 <DCM_brakeMot>
				break;
 800bb96:	e00a      	b.n	800bbae <MOT_goBlock_Const+0x21e>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 800bb98:	f7f9 fd46 	bl	8005628 <Get_NowDist>
 800bb9c:	eeb0 7a40 	vmov.f32	s14, s0
 800bba0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbac:	d4e6      	bmi.n	800bb7c <MOT_goBlock_Const+0x1ec>
			}				
		}
	}

	MOT_setWallEdgeType( MOT_WALL_EDGE_NONE );		// 壁切れ補正終了
 800bbae:	2000      	movs	r0, #0
 800bbb0:	f000 ffcc 	bl	800cb4c <MOT_setWallEdgeType>
	GYRO_endErrChkAngle();
 800bbb4:	f7fc ff22 	bl	80089fc <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800bbb8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bbbc:	eeb0 0a67 	vmov.f32	s0, s15
 800bbc0:	f7f9 fe86 	bl	80058d0 <CTRL_setNowData_Err>
}
 800bbc4:	bf00      	nop
 800bbc6:	3780      	adds	r7, #128	; 0x80
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	3db851ec 	.word	0x3db851ec
 800bbd0:	200002ac 	.word	0x200002ac
 800bbd4:	200002b8 	.word	0x200002b8
 800bbd8:	200002b9 	.word	0x200002b9
 800bbdc:	2000b024 	.word	0x2000b024
 800bbe0:	3d3851ec 	.word	0x3d3851ec
 800bbe4:	200002bc 	.word	0x200002bc

0800bbe8 <MOT_getAccAngle1>:
	CTRL_clrData();
	CTRL_setData(&test);
}

float MOT_getAccAngle1( void )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_accAngle;
 800bbec:	2016      	movs	r0, #22
 800bbee:	f7f6 fde1 	bl	80027b4 <PARAM_getSpeed>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	ee07 3a90 	vmov	s15, r3
}
 800bbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <MOT_getAccAngle3>:

float MOT_getAccAngle3( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_decAngle;
 800bc04:	2016      	movs	r0, #22
 800bc06:	f7f6 fdd5 	bl	80027b4 <PARAM_getSpeed>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	ee07 3a90 	vmov	s15, r3
}
 800bc12:	eeb0 0a67 	vmov.f32	s0, s15
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <MOT_turn>:

void MOT_turn( enMOT_TURN_CMD en_type )
{
 800bc18:	b5b0      	push	{r4, r5, r7, lr}
 800bc1a:	ed2d 8b02 	vpush	{d8}
 800bc1e:	b0a2      	sub	sp, #136	; 0x88
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]
//	float		f_angle2 = A2_MIN;	//最低第2移動角度[rad]
	float		f_angle1;	//第1移動角度[rad]
	float		f_angle3;	//第3移動角度[rad]
	float		us_trgtAngleS;	//目標角度[rad/s]

	us_trgtAngleS = 2.8*PI;//500;
 800bc26:	4bb3      	ldr	r3, [pc, #716]	; (800bef4 <MOT_turn+0x2dc>)
 800bc28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	/* ---------------- */
	/*  動作データ計計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_accAngleS1= MOT_getAccAngle1();												// 角加速度1[rad/s^2]
 800bc2c:	f7ff ffdc 	bl	800bbe8 <MOT_getAccAngle1>
 800bc30:	eef0 7a40 	vmov.f32	s15, s0
 800bc34:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	st_info.f_accAngleS3= MOT_getAccAngle3();												// 角加速度3[rad/s^2]
 800bc38:	f7ff ffe2 	bl	800bc00 <MOT_getAccAngle3>
 800bc3c:	eef0 7a40 	vmov.f32	s15, s0
 800bc40:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	667b      	str	r3, [r7, #100]	; 0x64
	st_info.f_trgtAngleS= (float)us_trgtAngleS;												// 目標角速度
 800bc4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc4e:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_lastAngleS= 0;																// 最終角速度
 800bc50:	f04f 0300 	mov.w	r3, #0
 800bc54:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* 角度 */
	switch( en_type ){
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	2b05      	cmp	r3, #5
 800bc5a:	d821      	bhi.n	800bca0 <MOT_turn+0x88>
 800bc5c:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <MOT_turn+0x4c>)
 800bc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc62:	bf00      	nop
 800bc64:	0800bc7d 	.word	0x0800bc7d
 800bc68:	0800bc83 	.word	0x0800bc83
 800bc6c:	0800bc89 	.word	0x0800bc89
 800bc70:	0800bc8f 	.word	0x0800bc8f
 800bc74:	0800bc95 	.word	0x0800bc95
 800bc78:	0800bc9b 	.word	0x0800bc9b
		case MOT_R90:	st_info.f_angle =  -PI/2 - ANGLE_OFFSET1_R;	break;					// 回転角度[rad]
 800bc7c:	4b9e      	ldr	r3, [pc, #632]	; (800bef8 <MOT_turn+0x2e0>)
 800bc7e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc80:	e012      	b.n	800bca8 <MOT_turn+0x90>
		case MOT_L90:	st_info.f_angle =   PI/2 + ANGLE_OFFSET1;		break;					// 回転角度[rad]
 800bc82:	4b9e      	ldr	r3, [pc, #632]	; (800befc <MOT_turn+0x2e4>)
 800bc84:	673b      	str	r3, [r7, #112]	; 0x70
 800bc86:	e00f      	b.n	800bca8 <MOT_turn+0x90>
		case MOT_R180:	st_info.f_angle = -PI - ANGLE_OFFSET2_R;	break;					// 回転角度[rad]
 800bc88:	4b9d      	ldr	r3, [pc, #628]	; (800bf00 <MOT_turn+0x2e8>)
 800bc8a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc8c:	e00c      	b.n	800bca8 <MOT_turn+0x90>
		case MOT_L180:	st_info.f_angle =  PI + ANGLE_OFFSET2;		break;					// 回転角度[rad]
 800bc8e:	4b9d      	ldr	r3, [pc, #628]	; (800bf04 <MOT_turn+0x2ec>)
 800bc90:	673b      	str	r3, [r7, #112]	; 0x70
 800bc92:	e009      	b.n	800bca8 <MOT_turn+0x90>
		case MOT_R360:	st_info.f_angle = -2*PI - ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800bc94:	4b9c      	ldr	r3, [pc, #624]	; (800bf08 <MOT_turn+0x2f0>)
 800bc96:	673b      	str	r3, [r7, #112]	; 0x70
 800bc98:	e006      	b.n	800bca8 <MOT_turn+0x90>
		case MOT_L360:	st_info.f_angle =  2*PI + ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800bc9a:	4b9c      	ldr	r3, [pc, #624]	; (800bf0c <MOT_turn+0x2f4>)
 800bc9c:	673b      	str	r3, [r7, #112]	; 0x70
 800bc9e:	e003      	b.n	800bca8 <MOT_turn+0x90>
		default:
			printf("error\r\n");
 800bca0:	489b      	ldr	r0, [pc, #620]	; (800bf10 <MOT_turn+0x2f8>)
 800bca2:	f00a fde3 	bl	801686c <puts>
			break;
 800bca6:	bf00      	nop
	}
	f_angle3 = ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / 2 * ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / st_info.f_accAngleS3;						// 第3移動角度[rad]
 800bca8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800bcac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bcb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bcb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bcbc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800bcc0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bcc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bcc8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bccc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800bcd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	f_angle1 = ( 0 - st_info.f_trgtAngleS) / 2 * ( 0 - st_info.f_trgtAngleS ) / st_info.f_accAngleS1;
 800bcd8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bcdc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800bf14 <MOT_turn+0x2fc>
 800bce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bce8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bcec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bcf0:	eddf 6a88 	vldr	s13, [pc, #544]	; 800bf14 <MOT_turn+0x2fc>
 800bcf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bcf8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800bcfc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd04:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c


	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d005      	beq.n	800bd1a <MOT_turn+0x102>
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d002      	beq.n	800bd1a <MOT_turn+0x102>
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	d12a      	bne.n	800bd70 <MOT_turn+0x158>
		st_info.f_trgtAngleS*= -1;															// 回転方向を逆にする
 800bd1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bd1e:	eef1 7a67 	vneg.f32	s15, s15
 800bd22:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		f_angle1			*= -1;
 800bd26:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bd2a:	eef1 7a67 	vneg.f32	s15, s15
 800bd2e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
//		f_angle2 			*= -1;															// 回転方向を逆にする
		f_angle3 			*= -1;															// 回転方向を逆にする
 800bd32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd36:	eef1 7a67 	vneg.f32	s15, s15
 800bd3a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800bd3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd40:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800bd42:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800bd46:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd4e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Right;
 800bd52:	4b71      	ldr	r3, [pc, #452]	; (800bf18 <MOT_turn+0x300>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 > ( A1_MIN * -1 ) ){
 800bd58:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bd5c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800bf1c <MOT_turn+0x304>
 800bd60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd68:	dd1a      	ble.n	800bda0 <MOT_turn+0x188>
			st_info.f_angle1 = A1_MIN * -1;
 800bd6a:	4b6d      	ldr	r3, [pc, #436]	; (800bf20 <MOT_turn+0x308>)
 800bd6c:	677b      	str	r3, [r7, #116]	; 0x74
		if( st_info.f_angle1 > ( A1_MIN * -1 ) ){
 800bd6e:	e017      	b.n	800bda0 <MOT_turn+0x188>
		}
	}
	else{
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800bd70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd72:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800bd74:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800bd78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd80:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Left;
 800bd84:	4b64      	ldr	r3, [pc, #400]	; (800bf18 <MOT_turn+0x300>)
 800bd86:	2201      	movs	r2, #1
 800bd88:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 < A1_MIN ){
 800bd8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bd8e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800bf24 <MOT_turn+0x30c>
 800bd92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd9a:	d501      	bpl.n	800bda0 <MOT_turn+0x188>
			st_info.f_angle1 = A1_MIN;
 800bd9c:	4b62      	ldr	r3, [pc, #392]	; (800bf28 <MOT_turn+0x310>)
 800bd9e:	677b      	str	r3, [r7, #116]	; 0x74
		}
	}


	GYRO_staErrChkAngle();			// エラー検出開始
 800bda0:	f7fc fe1a 	bl	80089d8 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_TRUN;
 800bda4:	2307      	movs	r3, #7
 800bda6:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800bda8:	f04f 0300 	mov.w	r3, #0
 800bdac:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800bdb4:	f04f 0300 	mov.w	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800bdba:	f04f 0300 	mov.w	r3, #0
 800bdbe:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 加速距離
 800bdc0:	f04f 0300 	mov.w	r3, #0
 800bdc4:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800bdc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角度
 800bdd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;						// 現在角度
 800bdd4:	f04f 0300 	mov.w	r3, #0
 800bdd8:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800bdda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800bdde:	f04f 0300 	mov.w	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800bde4:	f7f9 fcd2 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800bde8:	f107 0308 	add.w	r3, r7, #8
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7f9 fdb3 	bl	8005958 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800bdf2:	f7fc fad9 	bl	80083a8 <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d015      	beq.n	800be28 <MOT_turn+0x210>
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d012      	beq.n	800be28 <MOT_turn+0x210>
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	2b04      	cmp	r3, #4
 800be06:	d129      	bne.n	800be5c <MOT_turn+0x244>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800be08:	e00e      	b.n	800be28 <MOT_turn+0x210>
			if( SYS_isOutOfCtrl() == TRUE ){
 800be0a:	f7fc fa77 	bl	80082fc <SYS_isOutOfCtrl>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d009      	beq.n	800be28 <MOT_turn+0x210>
				CTRL_stop();
 800be14:	f7f9 fcaa 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800be18:	2000      	movs	r0, #0
 800be1a:	f7fc faa1 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800be1e:	2001      	movs	r0, #1
 800be20:	f7fc fa9e 	bl	8008360 <DCM_brakeMot>
				break;
 800be24:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800be26:	e024      	b.n	800be72 <MOT_turn+0x25a>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800be28:	f7f9 fc38 	bl	800569c <Get_NowAngle>
 800be2c:	eeb0 7a40 	vmov.f32	s14, s0
 800be30:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800be34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	dce5      	bgt.n	800be0a <MOT_turn+0x1f2>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800be3e:	e018      	b.n	800be72 <MOT_turn+0x25a>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800be40:	f7fc fa5c 	bl	80082fc <SYS_isOutOfCtrl>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <MOT_turn+0x244>
				CTRL_stop();
 800be4a:	f7f9 fc8f 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800be4e:	2000      	movs	r0, #0
 800be50:	f7fc fa86 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800be54:	2001      	movs	r0, #1
 800be56:	f7fc fa83 	bl	8008360 <DCM_brakeMot>
				break;
 800be5a:	e00a      	b.n	800be72 <MOT_turn+0x25a>
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
 800be5c:	f7f9 fc1e 	bl	800569c <Get_NowAngle>
 800be60:	eeb0 7a40 	vmov.f32	s14, s0
 800be64:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800be68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be70:	d4e6      	bmi.n	800be40 <MOT_turn+0x228>
//	printf("finish\n");

	/* ------ */
	/*  等速  */
	/* ------ */
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d005      	beq.n	800be84 <MOT_turn+0x26c>
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d002      	beq.n	800be84 <MOT_turn+0x26c>
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	2b04      	cmp	r3, #4
 800be82:	d159      	bne.n	800bf38 <MOT_turn+0x320>
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800be84:	f7f9 fc26 	bl	80056d4 <Get_TrgtAngleS>
 800be88:	eeb0 7a40 	vmov.f32	s14, s0
 800be8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800be90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800be98:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800be9c:	f7f9 fc1a 	bl	80056d4 <Get_TrgtAngleS>
 800bea0:	eeb0 7a40 	vmov.f32	s14, s0
 800bea4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beac:	ee68 6a27 	vmul.f32	s13, s16, s15
 800beb0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800beb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		f_angle3			= -1 * f_angle3;
 800bebc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bec0:	eef1 7a67 	vneg.f32	s15, s15
 800bec4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		if( f_angle3 > A3_MIN*-1 ) f_angle3 = A3_MIN * -1;																	// 減速最低角度に書き換え
 800bec8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800becc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bf2c <MOT_turn+0x314>
 800bed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed8:	dd02      	ble.n	800bee0 <MOT_turn+0x2c8>
 800beda:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <MOT_turn+0x318>)
 800bedc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;// 第1+2移動角度[rad]
 800bee0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800bee4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 800bef0:	e052      	b.n	800bf98 <MOT_turn+0x380>
 800bef2:	bf00      	nop
 800bef4:	410cbe45 	.word	0x410cbe45
 800bef8:	bfc90fd0 	.word	0xbfc90fd0
 800befc:	3fc90fd0 	.word	0x3fc90fd0
 800bf00:	c0490fd0 	.word	0xc0490fd0
 800bf04:	40490fd0 	.word	0x40490fd0
 800bf08:	c0c90fd0 	.word	0xc0c90fd0
 800bf0c:	40c90fd0 	.word	0x40c90fd0
 800bf10:	0801bc74 	.word	0x0801bc74
 800bf14:	00000000 	.word	0x00000000
 800bf18:	20000700 	.word	0x20000700
 800bf1c:	bedf66e8 	.word	0xbedf66e8
 800bf20:	bedf66e8 	.word	0xbedf66e8
 800bf24:	3edf66e8 	.word	0x3edf66e8
 800bf28:	3edf66e8 	.word	0x3edf66e8
 800bf2c:	beb2b8b9 	.word	0xbeb2b8b9
 800bf30:	beb2b8b9 	.word	0xbeb2b8b9
 800bf34:	3eb2b8b9 	.word	0x3eb2b8b9

	}
	else{
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800bf38:	f7f9 fbcc 	bl	80056d4 <Get_TrgtAngleS>
 800bf3c:	eeb0 7a40 	vmov.f32	s14, s0
 800bf40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bf44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bf4c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800bf50:	f7f9 fbc0 	bl	80056d4 <Get_TrgtAngleS>
 800bf54:	eeb0 7a40 	vmov.f32	s14, s0
 800bf58:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bf5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf60:	ee68 6a27 	vmul.f32	s13, s16, s15
 800bf64:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800bf68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf6c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		if( f_angle3 < A3_MIN ) f_angle3 = A3_MIN;																			// 減速最低角度に書き換え
 800bf70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bf74:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800bf34 <MOT_turn+0x31c>
 800bf78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	d502      	bpl.n	800bf88 <MOT_turn+0x370>
 800bf82:	4b9d      	ldr	r3, [pc, #628]	; (800c1f8 <MOT_turn+0x5e0>)
 800bf84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;																// 第1+2移動角度[rad]
 800bf88:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800bf8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bf90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf94:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//		printf("   [f_angle3]%d [f_angle1_2]%d\n\r", (int32_t)f_angle3, (int32_t)	st_info.f_angle1_2 );
	}
//	printf("[f_TrgtAngleS] %5.2f,st_info.f_angle1_2%5.2f,f_angle2%5.2f\n\r",f_TrgtAngleS,st_info.f_angle1_2,f_angle3);
	st_data.en_type			= CTRL_CONST_TRUN;
 800bf98:	2308      	movs	r3, #8
 800bf9a:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800bfa2:	f04f 0300 	mov.w	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 等速完了位置
 800bfb4:	f04f 0300 	mov.w	r3, #0
 800bfb8:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;						// 角加速度
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800bfc0:	f7f9 fb88 	bl	80056d4 <Get_TrgtAngleS>
 800bfc4:	eef0 7a40 	vmov.f32	s15, s0
 800bfc8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= Get_TrgtAngleS();				// 目標角度
 800bfcc:	f7f9 fb82 	bl	80056d4 <Get_TrgtAngleS>
 800bfd0:	eef0 7a40 	vmov.f32	s15, s0
 800bfd4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800bfd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfda:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1_2;			// 目標角度
 800bfdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800bfe0:	f04f 0300 	mov.w	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800bfe6:	f107 0308 	add.w	r3, r7, #8
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f9 fcb4 	bl	8005958 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d015      	beq.n	800c022 <MOT_turn+0x40a>
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d012      	beq.n	800c022 <MOT_turn+0x40a>
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d129      	bne.n	800c056 <MOT_turn+0x43e>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c002:	e00e      	b.n	800c022 <MOT_turn+0x40a>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c004:	f7fc f97a 	bl	80082fc <SYS_isOutOfCtrl>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d009      	beq.n	800c022 <MOT_turn+0x40a>
				CTRL_stop();
 800c00e:	f7f9 fbad 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c012:	2000      	movs	r0, #0
 800c014:	f7fc f9a4 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c018:	2001      	movs	r0, #1
 800c01a:	f7fc f9a1 	bl	8008360 <DCM_brakeMot>
				break;
 800c01e:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c020:	e024      	b.n	800c06c <MOT_turn+0x454>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c022:	f7f9 fb3b 	bl	800569c <Get_NowAngle>
 800c026:	eeb0 7a40 	vmov.f32	s14, s0
 800c02a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c02e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c036:	dce5      	bgt.n	800c004 <MOT_turn+0x3ec>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c038:	e018      	b.n	800c06c <MOT_turn+0x454>
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c03a:	f7fc f95f 	bl	80082fc <SYS_isOutOfCtrl>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d008      	beq.n	800c056 <MOT_turn+0x43e>
				CTRL_stop();
 800c044:	f7f9 fb92 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c048:	2000      	movs	r0, #0
 800c04a:	f7fc f989 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c04e:	2001      	movs	r0, #1
 800c050:	f7fc f986 	bl	8008360 <DCM_brakeMot>
				break;
 800c054:	e00a      	b.n	800c06c <MOT_turn+0x454>
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
 800c056:	f7f9 fb21 	bl	800569c <Get_NowAngle>
 800c05a:	eeb0 7a40 	vmov.f32	s14, s0
 800c05e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06a:	d4e6      	bmi.n	800c03a <MOT_turn+0x422>
//	printf("finish2\n");

	/* ------ */
	/*  // 減速  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_TRUN;
 800c06c:	2309      	movs	r3, #9
 800c06e:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 減速
 800c070:	f04f 0300 	mov.w	r3, #0
 800c074:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800c076:	f04f 0300 	mov.w	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 最終速度
 800c07c:	f04f 0300 	mov.w	r3, #0
 800c080:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 等速完了位置
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 全移動完了位置
 800c088:	f04f 0300 	mov.w	r3, #0
 800c08c:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800c08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c090:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800c092:	f7f9 fb1f 	bl	80056d4 <Get_TrgtAngleS>
 800c096:	eef0 7a40 	vmov.f32	s15, s0
 800c09a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800c09e:	f04f 0300 	mov.w	r3, #0
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800c0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a6:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800c0a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0aa:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c0ac:	f04f 0300 	mov.w	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f9 fc4e 	bl	8005958 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d023      	beq.n	800c10a <MOT_turn+0x4f2>
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d020      	beq.n	800c10a <MOT_turn+0x4f2>
 800c0c8:	79fb      	ldrb	r3, [r7, #7]
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d158      	bne.n	800c180 <MOT_turn+0x568>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800c0ce:	e01c      	b.n	800c10a <MOT_turn+0x4f2>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS );
			if( SYS_isOutOfCtrl() == TRUE ){
 800c0d0:	f7fc f914 	bl	80082fc <SYS_isOutOfCtrl>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d008      	beq.n	800c0ec <MOT_turn+0x4d4>
				CTRL_stop();
 800c0da:	f7f9 fb47 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7fc f93e 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	f7fc f93b 	bl	8008360 <DCM_brakeMot>
				break;
 800c0ea:	e02b      	b.n	800c144 <MOT_turn+0x52c>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c0ec:	4b43      	ldr	r3, [pc, #268]	; (800c1fc <MOT_turn+0x5e4>)
 800c0ee:	edd3 7a00 	vldr	s15, [r3]
 800c0f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fe:	dc00      	bgt.n	800c102 <MOT_turn+0x4ea>
 800c100:	e003      	b.n	800c10a <MOT_turn+0x4f2>
 800c102:	4b3f      	ldr	r3, [pc, #252]	; (800c200 <MOT_turn+0x5e8>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d11b      	bne.n	800c142 <MOT_turn+0x52a>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800c10a:	f7f9 fac7 	bl	800569c <Get_NowAngle>
 800c10e:	ee10 3a10 	vmov	r3, s0
 800c112:	4618      	mov	r0, r3
 800c114:	f7f4 fa40 	bl	8000598 <__aeabi_f2d>
 800c118:	4604      	mov	r4, r0
 800c11a:	460d      	mov	r5, r1
 800c11c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c11e:	4618      	mov	r0, r3
 800c120:	f7f4 fa3a 	bl	8000598 <__aeabi_f2d>
 800c124:	a332      	add	r3, pc, #200	; (adr r3, 800c1f0 <MOT_turn+0x5d8>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8d5 	bl	80002d8 <__aeabi_dsub>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4620      	mov	r0, r4
 800c134:	4629      	mov	r1, r5
 800c136:	f7f4 fd17 	bl	8000b68 <__aeabi_dcmpgt>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1c7      	bne.n	800c0d0 <MOT_turn+0x4b8>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c140:	e03b      	b.n	800c1ba <MOT_turn+0x5a2>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c142:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800c144:	e039      	b.n	800c1ba <MOT_turn+0x5a2>
	}
	else{
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800c146:	f7fc f8d9 	bl	80082fc <SYS_isOutOfCtrl>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d008      	beq.n	800c162 <MOT_turn+0x54a>
				CTRL_stop();
 800c150:	f7f9 fb0c 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c154:	2000      	movs	r0, #0
 800c156:	f7fc f903 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c15a:	2001      	movs	r0, #1
 800c15c:	f7fc f900 	bl	8008360 <DCM_brakeMot>
				break;
 800c160:	e02b      	b.n	800c1ba <MOT_turn+0x5a2>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c162:	4b26      	ldr	r3, [pc, #152]	; (800c1fc <MOT_turn+0x5e4>)
 800c164:	edd3 7a00 	vldr	s15, [r3]
 800c168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c16c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	dc00      	bgt.n	800c178 <MOT_turn+0x560>
 800c176:	e003      	b.n	800c180 <MOT_turn+0x568>
 800c178:	4b21      	ldr	r3, [pc, #132]	; (800c200 <MOT_turn+0x5e8>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d11b      	bne.n	800c1b8 <MOT_turn+0x5a0>
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
 800c180:	f7f9 fa8c 	bl	800569c <Get_NowAngle>
 800c184:	ee10 3a10 	vmov	r3, s0
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f4 fa05 	bl	8000598 <__aeabi_f2d>
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c194:	4618      	mov	r0, r3
 800c196:	f7f4 f9ff 	bl	8000598 <__aeabi_f2d>
 800c19a:	a315      	add	r3, pc, #84	; (adr r3, 800c1f0 <MOT_turn+0x5d8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 f89c 	bl	80002dc <__adddf3>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f7f4 fcbe 	bl	8000b2c <__aeabi_dcmplt>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1c7      	bne.n	800c146 <MOT_turn+0x52e>
 800c1b6:	e000      	b.n	800c1ba <MOT_turn+0x5a2>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800c1b8:	bf00      	nop
//			log_in(f_TrgtAngle);
		}
	}
//	printf("finish3\n");
	/* 停止 */
	LL_mDelay(200);				// 安定待ち
 800c1ba:	20c8      	movs	r0, #200	; 0xc8
 800c1bc:	f009 fbc8 	bl	8015950 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800c1c0:	f7f9 fad4 	bl	800576c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	f7fc f8cb 	bl	8008360 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	f7fc f8c8 	bl	8008360 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 800c1d0:	f7fc fc14 	bl	80089fc <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist,*/st_data.f_angle);
 800c1d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c1d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c1dc:	f7f9 fb78 	bl	80058d0 <CTRL_setNowData_Err>
}
 800c1e0:	bf00      	nop
 800c1e2:	3788      	adds	r7, #136	; 0x88
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	ecbd 8b02 	vpop	{d8}
 800c1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ec:	f3af 8000 	nop.w
 800c1f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800c1f4:	3f70624d 	.word	0x3f70624d
 800c1f8:	3eb2b8b9 	.word	0x3eb2b8b9
 800c1fc:	20000b08 	.word	0x20000b08
 800c200:	20000704 	.word	0x20000704

0800c204 <MOT_setSuraStaSpeed>:

void MOT_setSuraStaSpeed( float f_speed )
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotSuraStaSpeed = f_speed;
 800c20e:	4a04      	ldr	r2, [pc, #16]	; (800c220 <MOT_setSuraStaSpeed+0x1c>)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6013      	str	r3, [r2, #0]

}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	200002b4 	.word	0x200002b4

0800c224 <MOT_getSuraStaSpeed>:

float MOT_getSuraStaSpeed( void )
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
	return f_MotSuraStaSpeed;
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <MOT_getSuraStaSpeed+0x18>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	ee07 3a90 	vmov	s15, r3
}
 800c230:	eeb0 0a67 	vmov.f32	s0, s15
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	200002b4 	.word	0x200002b4

0800c240 <MOT_setTrgtSpeed>:

float MOT_setTrgtSpeed(float f_speed)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotTrgtSpeed = f_speed;
 800c24a:	4a07      	ldr	r2, [pc, #28]	; (800c268 <MOT_setTrgtSpeed+0x28>)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6013      	str	r3, [r2, #0]
	return f_MotTrgtSpeed;
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <MOT_setTrgtSpeed+0x28>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	ee07 3a90 	vmov	s15, r3
}
 800c258:	eeb0 0a67 	vmov.f32	s0, s15
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	200002b0 	.word	0x200002b0

0800c26c <MOT_setNowSpeed>:

void MOT_setNowSpeed(float f_speed)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotNowSpeed = f_speed;
 800c276:	4a04      	ldr	r2, [pc, #16]	; (800c288 <MOT_setNowSpeed+0x1c>)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6013      	str	r3, [r2, #0]
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	200002ac 	.word	0x200002ac

0800c28c <MOT_goHitBackWall>:

void MOT_goHitBackWall(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b09e      	sub	sp, #120	; 0x78
 800c290:	af00      	add	r7, sp, #0

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1= 1200;												// 角加速度1[rad/s^2]												// 角加速度3[rad/s^2]
 800c292:	4b25      	ldr	r3, [pc, #148]	; (800c328 <MOT_goHitBackWall+0x9c>)
 800c294:	63bb      	str	r3, [r7, #56]	; 0x38

	GYRO_staErrChkAngle();			// エラー検出開始
 800c296:	f7fc fb9f 	bl	80089d8 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_HIT_WALL;
 800c29a:	2306      	movs	r3, #6
 800c29c:	713b      	strb	r3, [r7, #4]
	st_data.f_acc			= st_info.f_acc1;						// 加速度指定
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	60fb      	str	r3, [r7, #12]
	st_data.f_now			= 0;						// 現在速度
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	613b      	str	r3, [r7, #16]
	st_data.f_trgt			= 0;						// 目標速度
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	617b      	str	r3, [r7, #20]
	st_data.f_nowDist		= 0;						// 進んでいない
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	61bb      	str	r3, [r7, #24]
	st_data.f_dist			= 0;						// 加速距離
 800c2b4:	f04f 0300 	mov.w	r3, #0
 800c2b8:	61fb      	str	r3, [r7, #28]
	st_data.f_accAngleS		= 0;		// 角加速度
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800c2c0:	f04f 0300 	mov.w	r3, #0
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_trgtAngleS		= 0;		// 目標角度
 800c2c6:	f04f 0300 	mov.w	r3, #0
 800c2ca:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngle		= 0;						// 現在角度
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_angle			= 0;			// 目標角度
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c2d8:	f04f 0300 	mov.w	r3, #0
 800c2dc:	60bb      	str	r3, [r7, #8]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c2de:	f7f9 fa55 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800c2e2:	1d3b      	adds	r3, r7, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7f9 fb37 	bl	8005958 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800c2ea:	f7fc f85d 	bl	80083a8 <DCM_staMotAll>
//	printf("目標速度 %f 目標位置 %f\r\n",st_data.f_trgt,st_data.f_dist);

	/*停止*/
	LL_mDelay(400);				// 安定待ち
 800c2ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c2f2:	f009 fb2d 	bl	8015950 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800c2f6:	f7f9 fa39 	bl	800576c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	f7fc f830 	bl	8008360 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800c300:	2001      	movs	r0, #1
 800c302:	f7fc f82d 	bl	8008360 <DCM_brakeMot>

	LL_mDelay(100);
 800c306:	2064      	movs	r0, #100	; 0x64
 800c308:	f009 fb22 	bl	8015950 <LL_mDelay>

	f_MotNowSpeed = 0.0f;		//現在速度更新
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <MOT_goHitBackWall+0xa0>)
 800c30e:	f04f 0200 	mov.w	r2, #0
 800c312:	601a      	str	r2, [r3, #0]

	CTRL_clrAngleErrSum();
 800c314:	f7f9 fa8e 	bl	8005834 <CTRL_clrAngleErrSum>

	GYRO_endErrChkAngle();					// エラー検出終了
 800c318:	f7fc fb70 	bl	80089fc <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800c31c:	f7f9 fa9e 	bl	800585c <CTRL_clrNowData>

}
 800c320:	bf00      	nop
 800c322:	3778      	adds	r7, #120	; 0x78
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	44960000 	.word	0x44960000
 800c32c:	200002ac 	.word	0x200002ac

0800c330 <MOT_goSla>:

void MOT_goSla( enMOT_SURA_CMD en_type, stSLA* p_sla )
{
 800c330:	b5b0      	push	{r4, r5, r7, lr}
 800c332:	b0a2      	sub	sp, #136	; 0x88
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	71fb      	strb	r3, [r7, #7]

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1 		= 0;																// 加速度1[mm/s^2]
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	643b      	str	r3, [r7, #64]	; 0x40
	st_info.f_acc3 		= 0;																// 加速度3[mm/s^2]
 800c342:	f04f 0300 	mov.w	r3, #0
 800c346:	647b      	str	r3, [r7, #68]	; 0x44

	/* 速度 */
	st_info.f_now		= p_sla->f_speed;													// 現在速度
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	64bb      	str	r3, [r7, #72]	; 0x48
	st_info.f_trgt		= p_sla->f_speed;													// 目標速度
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	64fb      	str	r3, [r7, #76]	; 0x4c
	st_info.f_last		= p_sla->f_speed;													// 最終速度
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	653b      	str	r3, [r7, #80]	; 0x50

	/* 距離 */
	st_info.f_dist		= 0;																// 移動距離
 800c35a:	f04f 0300 	mov.w	r3, #0
 800c35e:	657b      	str	r3, [r7, #84]	; 0x54
	st_info.f_l1		= 0;																// 第1移動距離[mm]
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	65bb      	str	r3, [r7, #88]	; 0x58
	st_info.f_l1_2		= 0;																// 第1+2移動距離[mm]
 800c366:	f04f 0300 	mov.w	r3, #0
 800c36a:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* 角加速度 */
	st_info.f_accAngleS1= p_sla->f_angAcc;													// 角加速度1[deg/s^2]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	663b      	str	r3, [r7, #96]	; 0x60
	st_info.f_accAngleS3= p_sla->f_angAcc;													// 角加速度3[deg/s^2]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	667b      	str	r3, [r7, #100]	; 0x64

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度[deg/s]
 800c378:	f04f 0300 	mov.w	r3, #0
 800c37c:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_trgtAngleS= p_sla->f_angvel;													// 目標角速度
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_info.f_lastAngleS= 0;																// 最終角速度
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	673b      	str	r3, [r7, #112]	; 0x70

	/* 角度 */
	st_info.f_angle		= p_sla->f_ang_Total;												// 旋回角度[deg]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	677b      	str	r3, [r7, #116]	; 0x74
	st_info.f_angle1	= p_sla->f_ang_AccEnd;												// 第1移動角度[deg]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	67bb      	str	r3, [r7, #120]	; 0x78
	st_info.f_angle1_2	= p_sla->f_ang_ConstEnd;											// 第1+2移動角度[deg]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* 方向に応じて符号を変更 */
	if( ( en_type == MOT_R90S ) ||
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00e      	beq.n	800c3c0 <MOT_goSla+0x90>
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d00b      	beq.n	800c3c0 <MOT_goSla+0x90>
		( en_type == MOT_R45S_S2N ) || ( en_type == MOT_R45S_N2S ) ||
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	d008      	beq.n	800c3c0 <MOT_goSla+0x90>
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	2b06      	cmp	r3, #6
 800c3b2:	d005      	beq.n	800c3c0 <MOT_goSla+0x90>
		( en_type == MOT_R90S_N ) ||
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	2b08      	cmp	r3, #8
 800c3b8:	d002      	beq.n	800c3c0 <MOT_goSla+0x90>
		( en_type == MOT_R135S_S2N ) || ( en_type == MOT_R135S_N2S )
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	2b0a      	cmp	r3, #10
 800c3be:	d11e      	bne.n	800c3fe <MOT_goSla+0xce>
	){
		st_info.f_accAngleS1 *= -1;
 800c3c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c3c4:	eef1 7a67 	vneg.f32	s15, s15
 800c3c8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		st_info.f_trgtAngleS *= -1;
 800c3cc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c3d0:	eef1 7a67 	vneg.f32	s15, s15
 800c3d4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		st_info.f_angle      *= -1;
 800c3d8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800c3dc:	eef1 7a67 	vneg.f32	s15, s15
 800c3e0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		st_info.f_angle1     *= -1;
 800c3e4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c3e8:	eef1 7a67 	vneg.f32	s15, s15
 800c3ec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		st_info.f_angle1_2   *= -1;
 800c3f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c3f4:	eef1 7a67 	vneg.f32	s15, s15
 800c3f8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 800c3fc:	e005      	b.n	800c40a <MOT_goSla+0xda>
	}
	else{
		st_info.f_accAngleS3 *= -1;
 800c3fe:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800c402:	eef1 7a67 	vneg.f32	s15, s15
 800c406:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	}

	/* 斜め走行のタイプに応じて、スラローム前の距離とスラローム後の退避距離を入れ替える */
	if( ( en_type == MOT_R45S_N2S ) || ( en_type == MOT_L45S_N2S ) || ( en_type == MOT_R135S_N2S ) || ( en_type == MOT_L135S_N2S ) ){ 		// 逆にするもの
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d008      	beq.n	800c422 <MOT_goSla+0xf2>
 800c410:	79fb      	ldrb	r3, [r7, #7]
 800c412:	2b05      	cmp	r3, #5
 800c414:	d005      	beq.n	800c422 <MOT_goSla+0xf2>
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	2b0a      	cmp	r3, #10
 800c41a:	d002      	beq.n	800c422 <MOT_goSla+0xf2>
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	2b0b      	cmp	r3, #11
 800c420:	d108      	bne.n	800c434 <MOT_goSla+0x104>
		f_entryLen  = p_sla->f_escapeLen;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_entryLen;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c432:	e007      	b.n	800c444 <MOT_goSla+0x114>
	}
	else{		// 通常
		f_entryLen  = p_sla->f_entryLen;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_escapeLen;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	}

	GYRO_staErrChkAngle();			// エラー検出開始
 800c444:	f7fc fac8 	bl	80089d8 <GYRO_staErrChkAngle>
	/*      entry      */
	/* ================ */
	/* ------------------------ */
	/*  スラローム前の前進動作  */
	/* ------------------------ */
	st_data.en_type			= CTRL_ENTRY_SURA;
 800c448:	230a      	movs	r3, #10
 800c44a:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800c452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c454:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800c456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c458:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= 0;						// 進んでいない
 800c45a:	f04f 0300 	mov.w	r3, #0
 800c45e:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen;				// スラローム前の前進距離
 800c460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800c466:	f04f 0300 	mov.w	r3, #0
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= 0;						// 目標角度
 800c472:	f04f 0300 	mov.w	r3, #0
 800c476:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800c478:	f04f 0300 	mov.w	r3, #0
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800c484:	f04f 0300 	mov.w	r3, #0
 800c488:	613b      	str	r3, [r7, #16]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800c48a:	f7f9 f97f 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800c48e:	f107 030c 	add.w	r3, r7, #12
 800c492:	4618      	mov	r0, r3
 800c494:	f7f9 fa60 	bl	8005958 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800c498:	f7fb ff86 	bl	80083a8 <DCM_staMotAll>

	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800c49c:	e025      	b.n	800c4ea <MOT_goSla+0x1ba>
		if(( en_type == MOT_R90S ) ||( en_type == MOT_L90S ) ){
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <MOT_goSla+0x17a>
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d10c      	bne.n	800c4c4 <MOT_goSla+0x194>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	f000 fd64 	bl	800cf78 <DIST_getNowVal>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2bb4      	cmp	r3, #180	; 0xb4
 800c4b4:	dd0a      	ble.n	800c4cc <MOT_goSla+0x19c>
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	f000 fd5e 	bl	800cf78 <DIST_getNowVal>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2bb4      	cmp	r3, #180	; 0xb4
 800c4c0:	dd04      	ble.n	800c4cc <MOT_goSla+0x19c>
 800c4c2:	e025      	b.n	800c510 <MOT_goSla+0x1e0>
		}
		else{
			uc_dist_control = 0.0;
 800c4c4:	4bc4      	ldr	r3, [pc, #784]	; (800c7d8 <MOT_goSla+0x4a8>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
 800c4ca:	e000      	b.n	800c4ce <MOT_goSla+0x19e>
			if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800c4cc:	bf00      	nop
		}
		if( SYS_isOutOfCtrl() == TRUE ){
 800c4ce:	f7fb ff15 	bl	80082fc <SYS_isOutOfCtrl>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d008      	beq.n	800c4ea <MOT_goSla+0x1ba>
			CTRL_stop();
 800c4d8:	f7f9 f948 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800c4dc:	2000      	movs	r0, #0
 800c4de:	f7fb ff3f 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	f7fb ff3c 	bl	8008360 <DCM_brakeMot>
			break;
 800c4e8:	e012      	b.n	800c510 <MOT_goSla+0x1e0>
	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800c4ea:	f7f9 f89d 	bl	8005628 <Get_NowDist>
 800c4ee:	eef0 6a40 	vmov.f32	s13, s0
 800c4f2:	4bb9      	ldr	r3, [pc, #740]	; (800c7d8 <MOT_goSla+0x4a8>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4fe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c506:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50e:	d4c6      	bmi.n	800c49e <MOT_goSla+0x16e>
//	LED_off(LED1);
//	log_in(0);
	/* ------ */
	/*  acc  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_SURA;
 800c510:	230b      	movs	r3, #11
 800c512:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800c51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51c:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800c51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c520:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen;				//
 800c522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c526:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;		// 加速距離
 800c528:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c52c:	f7f4 f834 	bl	8000598 <__aeabi_f2d>
 800c530:	4604      	mov	r4, r0
 800c532:	460d      	mov	r5, r1
 800c534:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	8a9b      	ldrh	r3, [r3, #20]
 800c53c:	ee07 3a90 	vmov	s15, r3
 800c540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c548:	ee17 0a90 	vmov	r0, s15
 800c54c:	f7f4 f824 	bl	8000598 <__aeabi_f2d>
 800c550:	a39f      	add	r3, pc, #636	; (adr r3, 800c7d0 <MOT_goSla+0x4a0>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f4 f877 	bl	8000648 <__aeabi_dmul>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f3 febb 	bl	80002dc <__adddf3>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	4610      	mov	r0, r2
 800c56c:	4619      	mov	r1, r3
 800c56e:	f7f4 fb63 	bl	8000c38 <__aeabi_d2f>
 800c572:	4603      	mov	r3, r0
 800c574:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800c576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800c57a:	f04f 0300 	mov.w	r3, #0
 800c57e:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角速度
 800c580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c582:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800c58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c58c:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	8a9b      	ldrh	r3, [r3, #20]
 800c592:	4618      	mov	r0, r3
 800c594:	f7f3 ffee 	bl	8000574 <__aeabi_i2d>
 800c598:	a38d      	add	r3, pc, #564	; (adr r3, 800c7d0 <MOT_goSla+0x4a0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f4 f853 	bl	8000648 <__aeabi_dmul>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	f7f4 fb45 	bl	8000c38 <__aeabi_d2f>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800c5b2:	f107 030c 	add.w	r3, r7, #12
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f9 f9ce 	bl	8005958 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d133      	bne.n	800c630 <MOT_goSla+0x300>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c5c8:	e00d      	b.n	800c5e6 <MOT_goSla+0x2b6>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c5ca:	f7fb fe97 	bl	80082fc <SYS_isOutOfCtrl>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d008      	beq.n	800c5e6 <MOT_goSla+0x2b6>
				CTRL_stop();
 800c5d4:	f7f9 f8ca 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f7fb fec1 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c5de:	2001      	movs	r0, #1
 800c5e0:	f7fb febe 	bl	8008360 <DCM_brakeMot>
				break;
 800c5e4:	e03a      	b.n	800c65c <MOT_goSla+0x32c>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c5e6:	f7f9 f859 	bl	800569c <Get_NowAngle>
 800c5ea:	eeb0 7a40 	vmov.f32	s14, s0
 800c5ee:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c5f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fa:	dd2f      	ble.n	800c65c <MOT_goSla+0x32c>
 800c5fc:	f7f9 f814 	bl	8005628 <Get_NowDist>
 800c600:	eeb0 7a40 	vmov.f32	s14, s0
 800c604:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c610:	d4db      	bmi.n	800c5ca <MOT_goSla+0x29a>
 800c612:	e023      	b.n	800c65c <MOT_goSla+0x32c>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800c614:	f7fb fe72 	bl	80082fc <SYS_isOutOfCtrl>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d008      	beq.n	800c630 <MOT_goSla+0x300>
				CTRL_stop();
 800c61e:	f7f9 f8a5 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c622:	2000      	movs	r0, #0
 800c624:	f7fb fe9c 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c628:	2001      	movs	r0, #1
 800c62a:	f7fb fe99 	bl	8008360 <DCM_brakeMot>
				break;
 800c62e:	e015      	b.n	800c65c <MOT_goSla+0x32c>
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c630:	f7f9 f834 	bl	800569c <Get_NowAngle>
 800c634:	eeb0 7a40 	vmov.f32	s14, s0
 800c638:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800c63c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c644:	d50a      	bpl.n	800c65c <MOT_goSla+0x32c>
 800c646:	f7f8 ffef 	bl	8005628 <Get_NowDist>
 800c64a:	eeb0 7a40 	vmov.f32	s14, s0
 800c64e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65a:	d4db      	bmi.n	800c614 <MOT_goSla+0x2e4>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  const  */
	/* ------ */
	st_data.en_type			= CTRL_CONST_SURA;
 800c65c:	230c      	movs	r3, #12
 800c65e:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800c660:	f04f 0300 	mov.w	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800c666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c668:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800c66a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c66c:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;
 800c66e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c672:	f7f3 ff91 	bl	8000598 <__aeabi_f2d>
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	8a9b      	ldrh	r3, [r3, #20]
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c68e:	ee17 0a90 	vmov	r0, s15
 800c692:	f7f3 ff81 	bl	8000598 <__aeabi_f2d>
 800c696:	a34e      	add	r3, pc, #312	; (adr r3, 800c7d0 <MOT_goSla+0x4a0>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f7f3 ffd4 	bl	8000648 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 fe18 	bl	80002dc <__adddf3>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f7f4 fac0 	bl	8000c38 <__aeabi_d2f>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;		// 等速距離
 800c6bc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c6c0:	f7f3 ff6a 	bl	8000598 <__aeabi_f2d>
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	460d      	mov	r5, r1
 800c6c8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	8adb      	ldrh	r3, [r3, #22]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	8a9b      	ldrh	r3, [r3, #20]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	ee07 3a90 	vmov	s15, r3
 800c6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e4:	ee17 0a90 	vmov	r0, s15
 800c6e8:	f7f3 ff56 	bl	8000598 <__aeabi_f2d>
 800c6ec:	a338      	add	r3, pc, #224	; (adr r3, 800c7d0 <MOT_goSla+0x4a0>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 ffa9 	bl	8000648 <__aeabi_dmul>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	f7f3 fded 	bl	80002dc <__adddf3>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4610      	mov	r0, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	f7f4 fa95 	bl	8000c38 <__aeabi_d2f>
 800c70e:	4603      	mov	r3, r0
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800c712:	f04f 0300 	mov.w	r3, #0
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800c718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c71a:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= st_info.f_trgtAngleS;		// 目標角速度
 800c71c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c71e:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800c720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1_2;		// 目標角度
 800c724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c726:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_constAngvelTime * 0.001;		// [msec] → [sec]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	8adb      	ldrh	r3, [r3, #22]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7f3 ff21 	bl	8000574 <__aeabi_i2d>
 800c732:	a327      	add	r3, pc, #156	; (adr r3, 800c7d0 <MOT_goSla+0x4a0>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 ff86 	bl	8000648 <__aeabi_dmul>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4610      	mov	r0, r2
 800c742:	4619      	mov	r1, r3
 800c744:	f7f4 fa78 	bl	8000c38 <__aeabi_d2f>
 800c748:	4603      	mov	r3, r0
 800c74a:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800c74c:	f107 030c 	add.w	r3, r7, #12
 800c750:	4618      	mov	r0, r3
 800c752:	f7f9 f901 	bl	8005958 <CTRL_setData>

	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d13c      	bne.n	800c7dc <MOT_goSla+0x4ac>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800c762:	e00d      	b.n	800c780 <MOT_goSla+0x450>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c764:	f7fb fdca 	bl	80082fc <SYS_isOutOfCtrl>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d008      	beq.n	800c780 <MOT_goSla+0x450>
				CTRL_stop();
 800c76e:	f7f8 fffd 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c772:	2000      	movs	r0, #0
 800c774:	f7fb fdf4 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c778:	2001      	movs	r0, #1
 800c77a:	f7fb fdf1 	bl	8008360 <DCM_brakeMot>
				break;
 800c77e:	e043      	b.n	800c808 <MOT_goSla+0x4d8>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800c780:	f7f8 ff8c 	bl	800569c <Get_NowAngle>
 800c784:	eeb0 7a40 	vmov.f32	s14, s0
 800c788:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c78c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c794:	dd38      	ble.n	800c808 <MOT_goSla+0x4d8>
 800c796:	f7f8 ff47 	bl	8005628 <Get_NowDist>
 800c79a:	eeb0 7a40 	vmov.f32	s14, s0
 800c79e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c7a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7aa:	d4db      	bmi.n	800c764 <MOT_goSla+0x434>
 800c7ac:	e02c      	b.n	800c808 <MOT_goSla+0x4d8>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800c7ae:	f7fb fda5 	bl	80082fc <SYS_isOutOfCtrl>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d011      	beq.n	800c7dc <MOT_goSla+0x4ac>
				CTRL_stop();
 800c7b8:	f7f8 ffd8 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7fb fdcf 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c7c2:	2001      	movs	r0, #1
 800c7c4:	f7fb fdcc 	bl	8008360 <DCM_brakeMot>
				break;
 800c7c8:	e01e      	b.n	800c808 <MOT_goSla+0x4d8>
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	d2f1a9fc 	.word	0xd2f1a9fc
 800c7d4:	3f50624d 	.word	0x3f50624d
 800c7d8:	2000132c 	.word	0x2000132c
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800c7dc:	f7f8 ff5e 	bl	800569c <Get_NowAngle>
 800c7e0:	eeb0 7a40 	vmov.f32	s14, s0
 800c7e4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800c7e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f0:	d50a      	bpl.n	800c808 <MOT_goSla+0x4d8>
 800c7f2:	f7f8 ff19 	bl	8005628 <Get_NowDist>
 800c7f6:	eeb0 7a40 	vmov.f32	s14, s0
 800c7fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c7fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c806:	d4d2      	bmi.n	800c7ae <MOT_goSla+0x47e>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  dec  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_SURA;
 800c808:	230d      	movs	r3, #13
 800c80a:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800c80c:	f04f 0300 	mov.w	r3, #0
 800c810:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800c812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c814:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800c816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c818:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;
 800c81a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c81e:	f7f3 febb 	bl	8000598 <__aeabi_f2d>
 800c822:	4604      	mov	r4, r0
 800c824:	460d      	mov	r5, r1
 800c826:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	8adb      	ldrh	r3, [r3, #22]
 800c82e:	461a      	mov	r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	8a9b      	ldrh	r3, [r3, #20]
 800c834:	4413      	add	r3, r2
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c842:	ee17 0a90 	vmov	r0, s15
 800c846:	f7f3 fea7 	bl	8000598 <__aeabi_f2d>
 800c84a:	a3be      	add	r3, pc, #760	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fefa 	bl	8000648 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7f3 fd3e 	bl	80002dc <__adddf3>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4610      	mov	r0, r2
 800c866:	4619      	mov	r1, r3
 800c868:	f7f4 f9e6 	bl	8000c38 <__aeabi_d2f>
 800c86c:	4603      	mov	r3, r0
 800c86e:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2 ) * 0.001;		// 減速距離
 800c870:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c874:	f7f3 fe90 	bl	8000598 <__aeabi_f2d>
 800c878:	4604      	mov	r4, r0
 800c87a:	460d      	mov	r5, r1
 800c87c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	8adb      	ldrh	r3, [r3, #22]
 800c884:	461a      	mov	r2, r3
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	8a9b      	ldrh	r3, [r3, #20]
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	4413      	add	r3, r2
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89a:	ee17 0a90 	vmov	r0, s15
 800c89e:	f7f3 fe7b 	bl	8000598 <__aeabi_f2d>
 800c8a2:	a3a8      	add	r3, pc, #672	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	f7f3 fece 	bl	8000648 <__aeabi_dmul>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fd12 	bl	80002dc <__adddf3>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4610      	mov	r0, r2
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f7f4 f9ba 	bl	8000c38 <__aeabi_d2f>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800c8c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800c8cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;				// 目標角速度
 800c8d0:	f04f 0300 	mov.w	r3, #0
 800c8d4:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800c8d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8d8:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800c8da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8dc:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	8a9b      	ldrh	r3, [r3, #20]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7f3 fe46 	bl	8000574 <__aeabi_i2d>
 800c8e8:	a396      	add	r3, pc, #600	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 feab 	bl	8000648 <__aeabi_dmul>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f7f4 f99d 	bl	8000c38 <__aeabi_d2f>
 800c8fe:	4603      	mov	r3, r0
 800c900:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800c902:	f107 030c 	add.w	r3, r7, #12
 800c906:	4618      	mov	r0, r3
 800c908:	f7f9 f826 	bl	8005958 <CTRL_setData>
//	LED = LED_ALL_ON;
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800c90c:	79fb      	ldrb	r3, [r7, #7]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d143      	bne.n	800c9a0 <MOT_goSla+0x670>
		while( ( Get_NowAngle() > st_info.f_angle -0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c918:	e00d      	b.n	800c936 <MOT_goSla+0x606>
			if( SYS_isOutOfCtrl() == TRUE ){
 800c91a:	f7fb fcef 	bl	80082fc <SYS_isOutOfCtrl>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <MOT_goSla+0x606>
				CTRL_stop();
 800c924:	f7f8 ff22 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c928:	2000      	movs	r0, #0
 800c92a:	f7fb fd19 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c92e:	2001      	movs	r0, #1
 800c930:	f7fb fd16 	bl	8008360 <DCM_brakeMot>
				break;
 800c934:	e05a      	b.n	800c9ec <MOT_goSla+0x6bc>
		while( ( Get_NowAngle() > st_info.f_angle -0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c936:	f7f8 feb1 	bl	800569c <Get_NowAngle>
 800c93a:	ee10 3a10 	vmov	r3, s0
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f3 fe2a 	bl	8000598 <__aeabi_f2d>
 800c944:	4604      	mov	r4, r0
 800c946:	460d      	mov	r5, r1
 800c948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f3 fe24 	bl	8000598 <__aeabi_f2d>
 800c950:	a37c      	add	r3, pc, #496	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f7f3 fcbf 	bl	80002d8 <__aeabi_dsub>
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	4620      	mov	r0, r4
 800c960:	4629      	mov	r1, r5
 800c962:	f7f4 f901 	bl	8000b68 <__aeabi_dcmpgt>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d03f      	beq.n	800c9ec <MOT_goSla+0x6bc>
 800c96c:	f7f8 fe5c 	bl	8005628 <Get_NowDist>
 800c970:	eeb0 7a40 	vmov.f32	s14, s0
 800c974:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c980:	d4cb      	bmi.n	800c91a <MOT_goSla+0x5ea>
 800c982:	e033      	b.n	800c9ec <MOT_goSla+0x6bc>

		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle+0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800c984:	f7fb fcba 	bl	80082fc <SYS_isOutOfCtrl>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d008      	beq.n	800c9a0 <MOT_goSla+0x670>
				CTRL_stop();
 800c98e:	f7f8 feed 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800c992:	2000      	movs	r0, #0
 800c994:	f7fb fce4 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800c998:	2001      	movs	r0, #1
 800c99a:	f7fb fce1 	bl	8008360 <DCM_brakeMot>
				break;
 800c99e:	e025      	b.n	800c9ec <MOT_goSla+0x6bc>
		while( ( Get_NowAngle() < st_info.f_angle+0.001 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800c9a0:	f7f8 fe7c 	bl	800569c <Get_NowAngle>
 800c9a4:	ee10 3a10 	vmov	r3, s0
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7f3 fdf5 	bl	8000598 <__aeabi_f2d>
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f3 fdef 	bl	8000598 <__aeabi_f2d>
 800c9ba:	a362      	add	r3, pc, #392	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	f7f3 fc8c 	bl	80002dc <__adddf3>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	f7f4 f8ae 	bl	8000b2c <__aeabi_dcmplt>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00a      	beq.n	800c9ec <MOT_goSla+0x6bc>
 800c9d6:	f7f8 fe27 	bl	8005628 <Get_NowDist>
 800c9da:	eeb0 7a40 	vmov.f32	s14, s0
 800c9de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c9e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ea:	d4cb      	bmi.n	800c984 <MOT_goSla+0x654>

//	LED_on(LED1);
	/* ------------------------ */
	/*  escape  */
	/* ------------------------ */
	st_data.en_type			= CTRL_EXIT_SURA;
 800c9ec:	230e      	movs	r3, #14
 800c9ee:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800c9f0:	f04f 0300 	mov.w	r3, #0
 800c9f4:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800c9f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f8:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800c9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fc:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2  ) * 0.001;
 800c9fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ca02:	f7f3 fdc9 	bl	8000598 <__aeabi_f2d>
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	8adb      	ldrh	r3, [r3, #22]
 800ca12:	461a      	mov	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	8a9b      	ldrh	r3, [r3, #20]
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	ee07 3a90 	vmov	s15, r3
 800ca20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca28:	ee17 0a90 	vmov	r0, s15
 800ca2c:	f7f3 fdb4 	bl	8000598 <__aeabi_f2d>
 800ca30:	a344      	add	r3, pc, #272	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fe07 	bl	8000648 <__aeabi_dmul>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4620      	mov	r0, r4
 800ca40:	4629      	mov	r1, r5
 800ca42:	f7f3 fc4b 	bl	80002dc <__adddf3>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f7f4 f8f3 	bl	8000c38 <__aeabi_d2f>
 800ca52:	4603      	mov	r3, r0
 800ca54:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_escapeLen + f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2 ) * 0.001;	// スラローム後の前進距離
 800ca56:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ca5a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ca5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca62:	ee17 0a90 	vmov	r0, s15
 800ca66:	f7f3 fd97 	bl	8000598 <__aeabi_f2d>
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	8adb      	ldrh	r3, [r3, #22]
 800ca76:	461a      	mov	r2, r3
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	8a9b      	ldrh	r3, [r3, #20]
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	4413      	add	r3, r2
 800ca80:	ee07 3a90 	vmov	s15, r3
 800ca84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8c:	ee17 0a90 	vmov	r0, s15
 800ca90:	f7f3 fd82 	bl	8000598 <__aeabi_f2d>
 800ca94:	a32b      	add	r3, pc, #172	; (adr r3, 800cb44 <MOT_goSla+0x814>)
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	f7f3 fdd5 	bl	8000648 <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4620      	mov	r0, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7f3 fc19 	bl	80002dc <__adddf3>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4610      	mov	r0, r2
 800cab0:	4619      	mov	r1, r3
 800cab2:	f7f4 f8c1 	bl	8000c38 <__aeabi_d2f>
 800cab6:	4603      	mov	r3, r0
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800caba:	f04f 0300 	mov.w	r3, #0
 800cabe:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800cac0:	f04f 0300 	mov.w	r3, #0
 800cac4:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800cac6:	f04f 0300 	mov.w	r3, #0
 800caca:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800cad2:	f04f 0300 	mov.w	r3, #0
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800cad8:	f04f 0300 	mov.w	r3, #0
 800cadc:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800cade:	f107 030c 	add.w	r3, r7, #12
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f8 ff38 	bl	8005958 <CTRL_setData>
//	LED =LED_ALL_OFF;
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800cae8:	e00d      	b.n	800cb06 <MOT_goSla+0x7d6>
		if( SYS_isOutOfCtrl() == TRUE ){
 800caea:	f7fb fc07 	bl	80082fc <SYS_isOutOfCtrl>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d008      	beq.n	800cb06 <MOT_goSla+0x7d6>
			CTRL_stop();
 800caf4:	f7f8 fe3a 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800caf8:	2000      	movs	r0, #0
 800cafa:	f7fb fc31 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800cafe:	2001      	movs	r0, #1
 800cb00:	f7fb fc2e 	bl	8008360 <DCM_brakeMot>
			break;
 800cb04:	e00a      	b.n	800cb1c <MOT_goSla+0x7ec>
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800cb06:	f7f8 fd8f 	bl	8005628 <Get_NowDist>
 800cb0a:	eeb0 7a40 	vmov.f32	s14, s0
 800cb0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cb12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1a:	d4e6      	bmi.n	800caea <MOT_goSla+0x7ba>
		}				// 途中で制御不能になった
	}
//	LED_off(LED1);
//	log_in(f_NowAngle);
	f_MotNowSpeed = st_info.f_now;			// 現在速度更新
 800cb1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb1e:	4a08      	ldr	r2, [pc, #32]	; (800cb40 <MOT_goSla+0x810>)
 800cb20:	6013      	str	r3, [r2, #0]
//	LED =LED_ALL_OFF;
	GYRO_endErrChkAngle();					// エラー検出終了
 800cb22:	f7fb ff6b 	bl	80089fc <GYRO_endErrChkAngle>
//	CTRL_clrNowData();
	CTRL_setNowData_Err(/*st_data.f_dist ,*/st_data.f_angle);
 800cb26:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800cb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb2e:	f7f8 fecf 	bl	80058d0 <CTRL_setNowData_Err>

}
 800cb32:	bf00      	nop
 800cb34:	3788      	adds	r7, #136	; 0x88
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bdb0      	pop	{r4, r5, r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	f3af 8000 	nop.w
 800cb40:	200002ac 	.word	0x200002ac
 800cb44:	d2f1a9fc 	.word	0xd2f1a9fc
 800cb48:	3f50624d 	.word	0x3f50624d

0800cb4c <MOT_setWallEdgeType>:
		}
	}
}

void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	71fb      	strb	r3, [r7, #7]
	en_WallEdge = en_type;
 800cb56:	4a06      	ldr	r2, [pc, #24]	; (800cb70 <MOT_setWallEdgeType+0x24>)
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	7013      	strb	r3, [r2, #0]
	bl_IsWallEdge = FALSE;			// 非検知
 800cb5c:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <MOT_setWallEdgeType+0x28>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	701a      	strb	r2, [r3, #0]

}
 800cb62:	bf00      	nop
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	200002b8 	.word	0x200002b8
 800cb74:	200002b9 	.word	0x200002b9

0800cb78 <MOT_getWallEdgeType>:

enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	af00      	add	r7, sp, #0
	return en_WallEdge;
 800cb7c:	4b03      	ldr	r3, [pc, #12]	; (800cb8c <MOT_getWallEdgeType+0x14>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	200002b8 	.word	0x200002b8

0800cb90 <MOT_setWallEdge>:

void MOT_setWallEdge( bool bl_val )
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	71fb      	strb	r3, [r7, #7]
	bl_IsWallEdge = bl_val;
 800cb9a:	4a04      	ldr	r2, [pc, #16]	; (800cbac <MOT_setWallEdge+0x1c>)
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	7013      	strb	r3, [r2, #0]

}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	200002b9 	.word	0x200002b9

0800cbb0 <MOT_setWallEdgeDist>:

bool MOT_setWallEdgeDist( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
	float f_addDist;

	/* 壁の切れ目を検知していない */
	if( ( bl_IsWallEdge == FALSE ) || ( en_WallEdge == MOT_WALL_EDGE_NONE ) ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800cbb6:	4b1b      	ldr	r3, [pc, #108]	; (800cc24 <MOT_setWallEdgeDist+0x74>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	f083 0301 	eor.w	r3, r3, #1
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d103      	bne.n	800cbcc <MOT_setWallEdgeDist+0x1c>
 800cbc4:	4b18      	ldr	r3, [pc, #96]	; (800cc28 <MOT_setWallEdgeDist+0x78>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <MOT_setWallEdgeDist+0x20>
		return FALSE;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	e024      	b.n	800cc1a <MOT_setWallEdgeDist+0x6a>
	}

	f_addDist = Get_NowDist() + MOT_WALL_EDGE_DIST;		// 旋回開始位置
 800cbd0:	f7f8 fd2a 	bl	8005628 <Get_NowDist>
 800cbd4:	eef0 7a40 	vmov.f32	s15, s0
 800cbd8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800cc2c <MOT_setWallEdgeDist+0x7c>
 800cbdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbe0:	edc7 7a01 	vstr	s15, [r7, #4]

	/* 多く走る必要がある */
	if( f_addDist > st_Info.f_dist ){
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <MOT_setWallEdgeDist+0x80>)
 800cbe6:	edd3 7a06 	vldr	s15, [r3, #24]
 800cbea:	ed97 7a01 	vldr	s14, [r7, #4]
 800cbee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf6:	dd09      	ble.n	800cc0c <MOT_setWallEdgeDist+0x5c>

		f_WallEdgeAddDist = f_addDist - st_Info.f_dist;	//壁切れの距離＋現在距離が本来の距離を超えた分をwall_adddistとして設定してるんだなぁだから設定だけすればいいのか
 800cbf8:	4b0d      	ldr	r3, [pc, #52]	; (800cc30 <MOT_setWallEdgeDist+0x80>)
 800cbfa:	edd3 7a06 	vldr	s15, [r3, #24]
 800cbfe:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc06:	4b0b      	ldr	r3, [pc, #44]	; (800cc34 <MOT_setWallEdgeDist+0x84>)
 800cc08:	edc3 7a00 	vstr	s15, [r3]
/*	if( f_addDist < st_Info.f_dist){
		st_Info.f_dist = f_addDist;
	}
*/
	/* 壁の切れ目補正の変数を初期化 */
	en_WallEdge   = MOT_WALL_EDGE_NONE;		// 壁の切れ目タイプ
 800cc0c:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <MOT_setWallEdgeDist+0x78>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	701a      	strb	r2, [r3, #0]
	bl_IsWallEdge = FALSE;					// 壁の切れ目検知
 800cc12:	4b04      	ldr	r3, [pc, #16]	; (800cc24 <MOT_setWallEdgeDist+0x74>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800cc18:	2301      	movs	r3, #1
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200002b9 	.word	0x200002b9
 800cc28:	200002b8 	.word	0x200002b8
 800cc2c:	3cf9db23 	.word	0x3cf9db23
 800cc30:	2000b024 	.word	0x2000b024
 800cc34:	200002bc 	.word	0x200002bc

0800cc38 <MOT_setWallEdgeDist_LoopWait>:
bool MOT_setWallEdgeDist_LoopWait( void )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
//	SetLED(0x11);
	/* 壁の切れ目を検知していない */
	if( bl_IsWallEdge == FALSE ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800cc3c:	4b08      	ldr	r3, [pc, #32]	; (800cc60 <MOT_setWallEdgeDist_LoopWait+0x28>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f083 0301 	eor.w	r3, r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <MOT_setWallEdgeDist_LoopWait+0x16>

		return FALSE;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e003      	b.n	800cc56 <MOT_setWallEdgeDist_LoopWait+0x1e>
	}

	f_WallEdgeAddDist = MOT_WALL_EDGE_DIST;		// 旋回開始位置
 800cc4e:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <MOT_setWallEdgeDist_LoopWait+0x2c>)
 800cc50:	4a05      	ldr	r2, [pc, #20]	; (800cc68 <MOT_setWallEdgeDist_LoopWait+0x30>)
 800cc52:	601a      	str	r2, [r3, #0]

	return TRUE;
 800cc54:	2301      	movs	r3, #1
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	200002b9 	.word	0x200002b9
 800cc64:	200002bc 	.word	0x200002bc
 800cc68:	3cf9db23 	.word	0x3cf9db23
 800cc6c:	00000000 	.word	0x00000000

0800cc70 <DIST_Front_Wall_correction>:

void DIST_Front_Wall_correction(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b09e      	sub	sp, #120	; 0x78
 800cc74:	af00      	add	r7, sp, #0
	stMOT_DATA	st_info;	//シーケンスデータ
	stCTRL_DATA	st_data;	//制御データ

	GYRO_staErrChkAngle();			// エラー検出開始
 800cc76:	f7fb feaf 	bl	80089d8 <GYRO_staErrChkAngle>
	
	st_data.en_type			= CTRL_FRONT_WALL;
 800cc7a:	230f      	movs	r3, #15
 800cc7c:	713b      	strb	r3, [r7, #4]
	st_data.f_acc			= 0;						// 加速度指定
 800cc7e:	f04f 0300 	mov.w	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]
	st_data.f_now			= 0;						// 現在速度
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	613b      	str	r3, [r7, #16]
	st_data.f_trgt			= 0;						// 目標速度
 800cc8a:	f04f 0300 	mov.w	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]
	st_data.f_nowDist		= 0;						// 進んでいない
 800cc90:	f04f 0300 	mov.w	r3, #0
 800cc94:	61bb      	str	r3, [r7, #24]
	st_data.f_dist			= 0;						// 加速距離
 800cc96:	f04f 0300 	mov.w	r3, #0
 800cc9a:	61fb      	str	r3, [r7, #28]
	st_data.f_accAngleS		= 0;		// 角加速度
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	623b      	str	r3, [r7, #32]
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800cca2:	f04f 0300 	mov.w	r3, #0
 800cca6:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_trgtAngleS		= 0;		// 目標角度
 800cca8:	f04f 0300 	mov.w	r3, #0
 800ccac:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngle		= 0;						// 現在角度
 800ccae:	f04f 0300 	mov.w	r3, #0
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_angle			= 0;			// 目標角度
 800ccb4:	f04f 0300 	mov.w	r3, #0
 800ccb8:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800ccba:	f04f 0300 	mov.w	r3, #0
 800ccbe:	60bb      	str	r3, [r7, #8]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800ccc0:	f7f8 fd64 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800ccc4:	1d3b      	adds	r3, r7, #4
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f8 fe46 	bl	8005958 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800cccc:	f7fb fb6c 	bl	80083a8 <DCM_staMotAll>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_minus-30))
 800ccd0:	e00f      	b.n	800ccf2 <DIST_Front_Wall_correction+0x82>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_minus-30))){
			if(escape_wait > 0.8)break;
 800ccd2:	4b29      	ldr	r3, [pc, #164]	; (800cd78 <DIST_Front_Wall_correction+0x108>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f3 fc5e 	bl	8000598 <__aeabi_f2d>
 800ccdc:	a324      	add	r3, pc, #144	; (adr r3, 800cd70 <DIST_Front_Wall_correction+0x100>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 ff41 	bl	8000b68 <__aeabi_dcmpgt>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d123      	bne.n	800cd34 <DIST_Front_Wall_correction+0xc4>
			LL_mDelay(10);//volatile入れてないから回避用に入れてみる
 800ccec:	200a      	movs	r0, #10
 800ccee:	f008 fe2f 	bl	8015950 <LL_mDelay>
	while((DIST_getNowVal( DIST_SEN_R_FRONT )>(R_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_R_FRONT )<(R_FRONT_REF+FRONT_WALL_minus-30))
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	f000 f940 	bl	800cf78 <DIST_getNowVal>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f240 23d5 	movw	r3, #725	; 0x2d5
 800cd00:	429a      	cmp	r2, r3
 800cd02:	dce6      	bgt.n	800ccd2 <DIST_Front_Wall_correction+0x62>
 800cd04:	2000      	movs	r0, #0
 800cd06:	f000 f937 	bl	800cf78 <DIST_getNowVal>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800cd10:	dddf      	ble.n	800ccd2 <DIST_Front_Wall_correction+0x62>
		||(DIST_getNowVal( DIST_SEN_L_FRONT )>(L_FRONT_REF+FRONT_WALL_minus+30))||(DIST_getNowVal( DIST_SEN_L_FRONT )<(L_FRONT_REF+FRONT_WALL_minus-30))){
 800cd12:	2001      	movs	r0, #1
 800cd14:	f000 f930 	bl	800cf78 <DIST_getNowVal>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800cd1e:	dad8      	bge.n	800ccd2 <DIST_Front_Wall_correction+0x62>
 800cd20:	2001      	movs	r0, #1
 800cd22:	f000 f929 	bl	800cf78 <DIST_getNowVal>
 800cd26:	4603      	mov	r3, r0
 800cd28:	461a      	mov	r2, r3
 800cd2a:	f240 2302 	movw	r3, #514	; 0x202
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	ddcf      	ble.n	800ccd2 <DIST_Front_Wall_correction+0x62>
 800cd32:	e000      	b.n	800cd36 <DIST_Front_Wall_correction+0xc6>
			if(escape_wait > 0.8)break;
 800cd34:	bf00      	nop
	}
	LL_mDelay(50);
 800cd36:	2032      	movs	r0, #50	; 0x32
 800cd38:	f008 fe0a 	bl	8015950 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800cd3c:	f7f8 fd16 	bl	800576c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800cd40:	2000      	movs	r0, #0
 800cd42:	f7fb fb0d 	bl	8008360 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800cd46:	2001      	movs	r0, #1
 800cd48:	f7fb fb0a 	bl	8008360 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 800cd4c:	f7fb fe56 	bl	80089fc <GYRO_endErrChkAngle>
	LL_mDelay(100);
 800cd50:	2064      	movs	r0, #100	; 0x64
 800cd52:	f008 fdfd 	bl	8015950 <LL_mDelay>
	f_MotNowSpeed = 0.0f;		//現在速度更新
 800cd56:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <DIST_Front_Wall_correction+0x10c>)
 800cd58:	f04f 0200 	mov.w	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]

	CTRL_clrNowData();
 800cd5e:	f7f8 fd7d 	bl	800585c <CTRL_clrNowData>
}
 800cd62:	bf00      	nop
 800cd64:	3778      	adds	r7, #120	; 0x78
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w
 800cd70:	9999999a 	.word	0x9999999a
 800cd74:	3fe99999 	.word	0x3fe99999
 800cd78:	20000b08 	.word	0x20000b08
 800cd7c:	200002ac 	.word	0x200002ac

0800cd80 <BAT_Pol>:

uint16_t	us_BatLvAve = 4095;							// バッテリ平均値（AD変換の最大値で初期化）


void BAT_Pol( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
	static uint16_t 	us_batLv[5] = { 4095, 4095, 4095, 4095, 4095 };
	static uint8_t		i = 0;

	us_batLv[4] = us_batLv[3];
 800cd84:	4b2d      	ldr	r3, [pc, #180]	; (800ce3c <BAT_Pol+0xbc>)
 800cd86:	88da      	ldrh	r2, [r3, #6]
 800cd88:	4b2c      	ldr	r3, [pc, #176]	; (800ce3c <BAT_Pol+0xbc>)
 800cd8a:	811a      	strh	r2, [r3, #8]
	us_batLv[3] = us_batLv[2];
 800cd8c:	4b2b      	ldr	r3, [pc, #172]	; (800ce3c <BAT_Pol+0xbc>)
 800cd8e:	889a      	ldrh	r2, [r3, #4]
 800cd90:	4b2a      	ldr	r3, [pc, #168]	; (800ce3c <BAT_Pol+0xbc>)
 800cd92:	80da      	strh	r2, [r3, #6]
	us_batLv[2] = us_batLv[1];
 800cd94:	4b29      	ldr	r3, [pc, #164]	; (800ce3c <BAT_Pol+0xbc>)
 800cd96:	885a      	ldrh	r2, [r3, #2]
 800cd98:	4b28      	ldr	r3, [pc, #160]	; (800ce3c <BAT_Pol+0xbc>)
 800cd9a:	809a      	strh	r2, [r3, #4]
	us_batLv[1] = us_batLv[0];
 800cd9c:	4b27      	ldr	r3, [pc, #156]	; (800ce3c <BAT_Pol+0xbc>)
 800cd9e:	881a      	ldrh	r2, [r3, #0]
 800cda0:	4b26      	ldr	r3, [pc, #152]	; (800ce3c <BAT_Pol+0xbc>)
 800cda2:	805a      	strh	r2, [r3, #2]

	us_batLv[0] = GetBatVal();
 800cda4:	f7f4 fd60 	bl	8001868 <GetBatVal>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4b23      	ldr	r3, [pc, #140]	; (800ce3c <BAT_Pol+0xbc>)
 800cdae:	801a      	strh	r2, [r3, #0]

	us_BatLvAve = ( us_batLv[0] + us_batLv[1] + us_batLv[2] + us_batLv[3] + us_batLv[4] ) / 5;
 800cdb0:	4b22      	ldr	r3, [pc, #136]	; (800ce3c <BAT_Pol+0xbc>)
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	4b21      	ldr	r3, [pc, #132]	; (800ce3c <BAT_Pol+0xbc>)
 800cdb8:	885b      	ldrh	r3, [r3, #2]
 800cdba:	4413      	add	r3, r2
 800cdbc:	4a1f      	ldr	r2, [pc, #124]	; (800ce3c <BAT_Pol+0xbc>)
 800cdbe:	8892      	ldrh	r2, [r2, #4]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <BAT_Pol+0xbc>)
 800cdc4:	88d2      	ldrh	r2, [r2, #6]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	4a1c      	ldr	r2, [pc, #112]	; (800ce3c <BAT_Pol+0xbc>)
 800cdca:	8912      	ldrh	r2, [r2, #8]
 800cdcc:	4413      	add	r3, r2
 800cdce:	4a1c      	ldr	r2, [pc, #112]	; (800ce40 <BAT_Pol+0xc0>)
 800cdd0:	fb82 1203 	smull	r1, r2, r2, r3
 800cdd4:	1052      	asrs	r2, r2, #1
 800cdd6:	17db      	asrs	r3, r3, #31
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <BAT_Pol+0xc4>)
 800cdde:	801a      	strh	r2, [r3, #0]


	if( us_BatLvAve < BAT_LOW ) {
 800cde0:	4b18      	ldr	r3, [pc, #96]	; (800ce44 <BAT_Pol+0xc4>)
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d803      	bhi.n	800cdf4 <BAT_Pol+0x74>
		SetBatLED(0);
 800cdec:	2000      	movs	r0, #0
 800cdee:	f7f5 f943 	bl	8002078 <SetBatLED>
		i++;
	}
	else{
		SetBatLED(1);
	}
}
 800cdf2:	e021      	b.n	800ce38 <BAT_Pol+0xb8>
	else if( us_BatLvAve < BAT_GOOD ) {
 800cdf4:	4b13      	ldr	r3, [pc, #76]	; (800ce44 <BAT_Pol+0xc4>)
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	f640 32f3 	movw	r2, #3059	; 0xbf3
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d818      	bhi.n	800ce32 <BAT_Pol+0xb2>
		if( i>=100){
 800ce00:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <BAT_Pol+0xc8>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b63      	cmp	r3, #99	; 0x63
 800ce06:	d906      	bls.n	800ce16 <BAT_Pol+0x96>
			SetBatLED(1);
 800ce08:	2001      	movs	r0, #1
 800ce0a:	f7f5 f935 	bl	8002078 <SetBatLED>
			i=0;
 800ce0e:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <BAT_Pol+0xc8>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	e006      	b.n	800ce24 <BAT_Pol+0xa4>
		else if(i>=50){
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <BAT_Pol+0xc8>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b31      	cmp	r3, #49	; 0x31
 800ce1c:	d902      	bls.n	800ce24 <BAT_Pol+0xa4>
			SetBatLED(0);
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f7f5 f92a 	bl	8002078 <SetBatLED>
		i++;
 800ce24:	4b08      	ldr	r3, [pc, #32]	; (800ce48 <BAT_Pol+0xc8>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <BAT_Pol+0xc8>)
 800ce2e:	701a      	strb	r2, [r3, #0]
}
 800ce30:	e002      	b.n	800ce38 <BAT_Pol+0xb8>
		SetBatLED(1);
 800ce32:	2001      	movs	r0, #1
 800ce34:	f7f5 f920 	bl	8002078 <SetBatLED>
}
 800ce38:	bf00      	nop
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	20000010 	.word	0x20000010
 800ce40:	66666667 	.word	0x66666667
 800ce44:	2000000e 	.word	0x2000000e
 800ce48:	200002c0 	.word	0x200002c0
 800ce4c:	00000000 	.word	0x00000000

0800ce50 <get_battLv>:

float get_battLv(void){
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
	return (float)us_BatLvAve*(1.990+1.005)/1.990/4095.000*3.300;
 800ce54:	4b22      	ldr	r3, [pc, #136]	; (800cee0 <get_battLv+0x90>)
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce60:	ee17 0a90 	vmov	r0, s15
 800ce64:	f7f3 fb98 	bl	8000598 <__aeabi_f2d>
 800ce68:	a315      	add	r3, pc, #84	; (adr r3, 800cec0 <get_battLv+0x70>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fbeb 	bl	8000648 <__aeabi_dmul>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4610      	mov	r0, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	a313      	add	r3, pc, #76	; (adr r3, 800cec8 <get_battLv+0x78>)
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	f7f3 fd0c 	bl	800089c <__aeabi_ddiv>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	a310      	add	r3, pc, #64	; (adr r3, 800ced0 <get_battLv+0x80>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f7f3 fd03 	bl	800089c <__aeabi_ddiv>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	a30e      	add	r3, pc, #56	; (adr r3, 800ced8 <get_battLv+0x88>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f7f3 fbd0 	bl	8000648 <__aeabi_dmul>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4610      	mov	r0, r2
 800ceae:	4619      	mov	r1, r3
 800ceb0:	f7f3 fec2 	bl	8000c38 <__aeabi_d2f>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	ee07 3a90 	vmov	s15, r3
}
 800ceba:	eeb0 0a67 	vmov.f32	s0, s15
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	8f5c28f6 	.word	0x8f5c28f6
 800cec4:	4007f5c2 	.word	0x4007f5c2
 800cec8:	3d70a3d7 	.word	0x3d70a3d7
 800cecc:	3fffd70a 	.word	0x3fffd70a
 800ced0:	00000000 	.word	0x00000000
 800ced4:	40affe00 	.word	0x40affe00
 800ced8:	66666666 	.word	0x66666666
 800cedc:	400a6666 	.word	0x400a6666
 800cee0:	2000000e 	.word	0x2000000e

0800cee4 <DIST_init>:
stDIST_SEN		st_sen[DIST_SEN_NUM];					// 距離センサ
stDIST_FRONT_SEN		st_senF[DIST_SEN_NUM];


void DIST_init( void )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
	memset( st_sen, 0, sizeof(st_sen) );				// 距離センサ(全センサ共通)
 800cee8:	2238      	movs	r2, #56	; 0x38
 800ceea:	2100      	movs	r1, #0
 800ceec:	4820      	ldr	r0, [pc, #128]	; (800cf70 <DIST_init+0x8c>)
 800ceee:	f008 fd9f 	bl	8015a30 <memset>
	st_sen[DIST_SEN_R_FRONT].s_ref       = R_FRONT_REF;
 800cef2:	4b1f      	ldr	r3, [pc, #124]	; (800cf70 <DIST_init+0x8c>)
 800cef4:	f240 228a 	movw	r2, #650	; 0x28a
 800cef8:	80da      	strh	r2, [r3, #6]
	st_sen[DIST_SEN_L_FRONT].s_ref       = L_FRONT_REF;
 800cefa:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <DIST_init+0x8c>)
 800cefc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cf00:	829a      	strh	r2, [r3, #20]
	st_sen[DIST_SEN_R_SIDE].s_ref        = R_SIDE_REF;
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <DIST_init+0x8c>)
 800cf04:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cf08:	845a      	strh	r2, [r3, #34]	; 0x22
	st_sen[DIST_SEN_L_SIDE].s_ref        = L_SIDE_REF;
 800cf0a:	4b19      	ldr	r3, [pc, #100]	; (800cf70 <DIST_init+0x8c>)
 800cf0c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800cf10:	861a      	strh	r2, [r3, #48]	; 0x30
	st_sen[DIST_SEN_R_FRONT].s_limit     = R_FRONT_WALL;
 800cf12:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <DIST_init+0x8c>)
 800cf14:	226e      	movs	r2, #110	; 0x6e
 800cf16:	809a      	strh	r2, [r3, #4]
	st_sen[DIST_SEN_L_FRONT].s_limit     = L_FRONT_WALL;
 800cf18:	4b15      	ldr	r3, [pc, #84]	; (800cf70 <DIST_init+0x8c>)
 800cf1a:	2278      	movs	r2, #120	; 0x78
 800cf1c:	825a      	strh	r2, [r3, #18]
	st_sen[DIST_SEN_R_SIDE].s_limit      = R_SIDE_WALL;
 800cf1e:	4b14      	ldr	r3, [pc, #80]	; (800cf70 <DIST_init+0x8c>)
 800cf20:	2278      	movs	r2, #120	; 0x78
 800cf22:	841a      	strh	r2, [r3, #32]
	st_sen[DIST_SEN_L_SIDE].s_limit      = L_SIDE_WALL;
 800cf24:	4b12      	ldr	r3, [pc, #72]	; (800cf70 <DIST_init+0x8c>)
 800cf26:	2278      	movs	r2, #120	; 0x78
 800cf28:	85da      	strh	r2, [r3, #46]	; 0x2e
	st_senF[DIST_SEN_R_FRONT].s_skewErr1	= R_FRONT_SKEW_ERR1;
 800cf2a:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <DIST_init+0x90>)
 800cf2c:	2250      	movs	r2, #80	; 0x50
 800cf2e:	805a      	strh	r2, [r3, #2]
	st_senF[DIST_SEN_L_FRONT].s_skewErr1	= L_FRONT_SKEW_ERR1;
 800cf30:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <DIST_init+0x90>)
 800cf32:	2246      	movs	r2, #70	; 0x46
 800cf34:	815a      	strh	r2, [r3, #10]
	st_senF[DIST_SEN_R_FRONT].s_skewErr2	= R_FRONT_SKEW_ERR2;
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <DIST_init+0x90>)
 800cf38:	22c0      	movs	r2, #192	; 0xc0
 800cf3a:	809a      	strh	r2, [r3, #4]
	st_senF[DIST_SEN_L_FRONT].s_skewErr2	= L_FRONT_SKEW_ERR2;
 800cf3c:	4b0d      	ldr	r3, [pc, #52]	; (800cf74 <DIST_init+0x90>)
 800cf3e:	22a0      	movs	r2, #160	; 0xa0
 800cf40:	819a      	strh	r2, [r3, #12]
	st_senF[DIST_SEN_R_FRONT].s_skewErr3	= R_FRONT_SKEW_ERR3;
 800cf42:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <DIST_init+0x90>)
 800cf44:	22fa      	movs	r2, #250	; 0xfa
 800cf46:	80da      	strh	r2, [r3, #6]
	st_senF[DIST_SEN_L_FRONT].s_skewErr3	= L_FRONT_SKEW_ERR3;
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <DIST_init+0x90>)
 800cf4a:	22fa      	movs	r2, #250	; 0xfa
 800cf4c:	81da      	strh	r2, [r3, #14]
	st_sen[DIST_SEN_R_FRONT].s_noCtrl = R_FRONT_NOCTRL;
 800cf4e:	4b08      	ldr	r3, [pc, #32]	; (800cf70 <DIST_init+0x8c>)
 800cf50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf54:	819a      	strh	r2, [r3, #12]
	st_sen[DIST_SEN_L_FRONT].s_noCtrl = L_FRONT_NOCTRL;
 800cf56:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <DIST_init+0x8c>)
 800cf58:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800cf5c:	835a      	strh	r2, [r3, #26]
	st_sen[DIST_SEN_R_FRONT].s_ctrl = R_FRONT_CTRL;
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <DIST_init+0x8c>)
 800cf60:	22b4      	movs	r2, #180	; 0xb4
 800cf62:	815a      	strh	r2, [r3, #10]
	st_sen[DIST_SEN_L_FRONT].s_ctrl = L_FRONT_CTRL;
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <DIST_init+0x8c>)
 800cf66:	22b4      	movs	r2, #180	; 0xb4
 800cf68:	831a      	strh	r2, [r3, #24]

}
 800cf6a:	bf00      	nop
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	2000b088 	.word	0x2000b088
 800cf74:	2000b068 	.word	0x2000b068

0800cf78 <DIST_getNowVal>:

int16_t DIST_getNowVal( enDIST_SEN_ID en_id )
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	71fb      	strb	r3, [r7, #7]
	return st_sen[en_id].s_now;
 800cf82:	79fa      	ldrb	r2, [r7, #7]
 800cf84:	4906      	ldr	r1, [pc, #24]	; (800cfa0 <DIST_getNowVal+0x28>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	1a9b      	subs	r3, r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	440b      	add	r3, r1
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	b21b      	sxth	r3, r3
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	2000b088 	.word	0x2000b088
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <DIST_getErr>:


void DIST_getErr( int32_t* p_err )
{
 800cfa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
	volatile int16_t	s_threshold_R = 0;		// 右センサの閾値
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	81bb      	strh	r3, [r7, #12]
	volatile int16_t	s_threshold_L = 0;		// 左センサの閾値
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	817b      	strh	r3, [r7, #10]
	/* ---------- */
	/*  右壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_old;
 800cfba:	4ba5      	ldr	r3, [pc, #660]	; (800d250 <DIST_getErr+0x2a8>)
 800cfbc:	8b9a      	ldrh	r2, [r3, #28]
 800cfbe:	4ba4      	ldr	r3, [pc, #656]	; (800d250 <DIST_getErr+0x2a8>)
 800cfc0:	8bdb      	ldrh	r3, [r3, #30]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800cfc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cfcc:	f113 0f19 	cmn.w	r3, #25
 800cfd0:	db03      	blt.n	800cfda <DIST_getErr+0x32>
 800cfd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cfd6:	2b19      	cmp	r3, #25
 800cfd8:	dd06      	ble.n	800cfe8 <DIST_getErr+0x40>
	){
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800cfda:	4b9d      	ldr	r3, [pc, #628]	; (800d250 <DIST_getErr+0x2a8>)
 800cfdc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cfde:	3323      	adds	r3, #35	; 0x23
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	b21b      	sxth	r3, r3
 800cfe4:	81bb      	strh	r3, [r7, #12]
 800cfe6:	e003      	b.n	800cff0 <DIST_getErr+0x48>
	}
	else{
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_limit;		// 通常通り
 800cfe8:	4b99      	ldr	r3, [pc, #612]	; (800d250 <DIST_getErr+0x2a8>)
 800cfea:	8c1b      	ldrh	r3, [r3, #32]
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	81bb      	strh	r3, [r7, #12]
	/* ---------- */
	/*  左壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_L_SIDE].s_now - st_sen[DIST_SEN_L_SIDE].s_old;
 800cff0:	4b97      	ldr	r3, [pc, #604]	; (800d250 <DIST_getErr+0x2a8>)
 800cff2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cff4:	4b96      	ldr	r3, [pc, #600]	; (800d250 <DIST_getErr+0x2a8>)
 800cff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800cffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d002:	f113 0f19 	cmn.w	r3, #25
 800d006:	db03      	blt.n	800d010 <DIST_getErr+0x68>
 800d008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d00c:	2b19      	cmp	r3, #25
 800d00e:	dd06      	ble.n	800d01e <DIST_getErr+0x76>
	){
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800d010:	4b8f      	ldr	r3, [pc, #572]	; (800d250 <DIST_getErr+0x2a8>)
 800d012:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d014:	3323      	adds	r3, #35	; 0x23
 800d016:	b29b      	uxth	r3, r3
 800d018:	b21b      	sxth	r3, r3
 800d01a:	817b      	strh	r3, [r7, #10]
 800d01c:	e003      	b.n	800d026 <DIST_getErr+0x7e>
	}
	else{
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_limit;		// 通常通り
 800d01e:	4b8c      	ldr	r3, [pc, #560]	; (800d250 <DIST_getErr+0x2a8>)
 800d020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d022:	b21b      	sxth	r3, r3
 800d024:	817b      	strh	r3, [r7, #10]
	}

	/* ------------ */
	/*  制御値算出  */
	/* ------------ */
	*p_err = 0;		// クリア
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]

	/* 前壁がものすごく近い時 */
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800d02c:	4b88      	ldr	r3, [pc, #544]	; (800d250 <DIST_getErr+0x2a8>)
 800d02e:	881a      	ldrh	r2, [r3, #0]
 800d030:	4b87      	ldr	r3, [pc, #540]	; (800d250 <DIST_getErr+0x2a8>)
 800d032:	899b      	ldrh	r3, [r3, #12]
 800d034:	429a      	cmp	r2, r3
 800d036:	d909      	bls.n	800d04c <DIST_getErr+0xa4>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_noCtrl )
 800d038:	4b85      	ldr	r3, [pc, #532]	; (800d250 <DIST_getErr+0x2a8>)
 800d03a:	89da      	ldrh	r2, [r3, #14]
 800d03c:	4b84      	ldr	r3, [pc, #528]	; (800d250 <DIST_getErr+0x2a8>)
 800d03e:	8b5b      	ldrh	r3, [r3, #26]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800d040:	429a      	cmp	r2, r3
 800d042:	d903      	bls.n	800d04c <DIST_getErr+0xa4>
	){
//		printf("[Val]%6d 前壁がものすごい近い 	\n\r", *p_err);
		*p_err = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	e05a      	b.n	800d102 <DIST_getErr+0x15a>
	}
	/* 前壁 */
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800d04c:	4b80      	ldr	r3, [pc, #512]	; (800d250 <DIST_getErr+0x2a8>)
 800d04e:	881a      	ldrh	r2, [r3, #0]
 800d050:	4b7f      	ldr	r3, [pc, #508]	; (800d250 <DIST_getErr+0x2a8>)
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	429a      	cmp	r2, r3
 800d056:	d915      	bls.n	800d084 <DIST_getErr+0xdc>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_ctrl )
 800d058:	4b7d      	ldr	r3, [pc, #500]	; (800d250 <DIST_getErr+0x2a8>)
 800d05a:	89da      	ldrh	r2, [r3, #14]
 800d05c:	4b7c      	ldr	r3, [pc, #496]	; (800d250 <DIST_getErr+0x2a8>)
 800d05e:	8b1b      	ldrh	r3, [r3, #24]
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800d060:	429a      	cmp	r2, r3
 800d062:	d90f      	bls.n	800d084 <DIST_getErr+0xdc>
	){
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800d064:	4b7a      	ldr	r3, [pc, #488]	; (800d250 <DIST_getErr+0x2a8>)
 800d066:	89db      	ldrh	r3, [r3, #14]
 800d068:	461a      	mov	r2, r3
 800d06a:	4b79      	ldr	r3, [pc, #484]	; (800d250 <DIST_getErr+0x2a8>)
 800d06c:	8a9b      	ldrh	r3, [r3, #20]
 800d06e:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_R_FRONT].s_now - st_sen[DIST_SEN_R_FRONT].s_ref );
 800d070:	4b77      	ldr	r3, [pc, #476]	; (800d250 <DIST_getErr+0x2a8>)
 800d072:	881b      	ldrh	r3, [r3, #0]
 800d074:	4619      	mov	r1, r3
 800d076:	4b76      	ldr	r3, [pc, #472]	; (800d250 <DIST_getErr+0x2a8>)
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800d07c:	1ad2      	subs	r2, r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	601a      	str	r2, [r3, #0]
 800d082:	e03e      	b.n	800d102 <DIST_getErr+0x15a>
//		printf("[Val]%6d 前壁制御 	\n\r", *p_err);
	}
	/* 右壁と左壁あり */
	else if( ( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ) && ( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now )
 800d084:	89bb      	ldrh	r3, [r7, #12]
 800d086:	b21b      	sxth	r3, r3
 800d088:	461a      	mov	r2, r3
 800d08a:	4b71      	ldr	r3, [pc, #452]	; (800d250 <DIST_getErr+0x2a8>)
 800d08c:	8b9b      	ldrh	r3, [r3, #28]
 800d08e:	429a      	cmp	r2, r3
 800d090:	da16      	bge.n	800d0c0 <DIST_getErr+0x118>
 800d092:	897b      	ldrh	r3, [r7, #10]
 800d094:	b21b      	sxth	r3, r3
 800d096:	461a      	mov	r2, r3
 800d098:	4b6d      	ldr	r3, [pc, #436]	; (800d250 <DIST_getErr+0x2a8>)
 800d09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d09c:	429a      	cmp	r2, r3
 800d09e:	da0f      	bge.n	800d0c0 <DIST_getErr+0x118>
	){
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800d0a0:	4b6b      	ldr	r3, [pc, #428]	; (800d250 <DIST_getErr+0x2a8>)
 800d0a2:	8b9b      	ldrh	r3, [r3, #28]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	4b6a      	ldr	r3, [pc, #424]	; (800d250 <DIST_getErr+0x2a8>)
 800d0a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d0aa:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now );
 800d0ac:	4b68      	ldr	r3, [pc, #416]	; (800d250 <DIST_getErr+0x2a8>)
 800d0ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4b67      	ldr	r3, [pc, #412]	; (800d250 <DIST_getErr+0x2a8>)
 800d0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0b6:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800d0b8:	441a      	add	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
 800d0be:	e020      	b.n	800d102 <DIST_getErr+0x15a>
//		printf("[Val]%6d 両壁制御 	\n\r", *p_err);
	}
	/* 右壁あり */
	else if( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ){
 800d0c0:	89bb      	ldrh	r3, [r7, #12]
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4b62      	ldr	r3, [pc, #392]	; (800d250 <DIST_getErr+0x2a8>)
 800d0c8:	8b9b      	ldrh	r3, [r3, #28]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	da09      	bge.n	800d0e2 <DIST_getErr+0x13a>
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) * 2;
 800d0ce:	4b60      	ldr	r3, [pc, #384]	; (800d250 <DIST_getErr+0x2a8>)
 800d0d0:	8b9b      	ldrh	r3, [r3, #28]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	4b5e      	ldr	r3, [pc, #376]	; (800d250 <DIST_getErr+0x2a8>)
 800d0d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	005a      	lsls	r2, r3, #1
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	e00f      	b.n	800d102 <DIST_getErr+0x15a>
//		printf("[Val]%6d 右壁制御 	\n\r", *p_err);
	}
	/* 左壁あり */
	else if( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now ){
 800d0e2:	897b      	ldrh	r3, [r7, #10]
 800d0e4:	b21b      	sxth	r3, r3
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	4b59      	ldr	r3, [pc, #356]	; (800d250 <DIST_getErr+0x2a8>)
 800d0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	da08      	bge.n	800d102 <DIST_getErr+0x15a>
		*p_err = ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now ) * 2;
 800d0f0:	4b57      	ldr	r3, [pc, #348]	; (800d250 <DIST_getErr+0x2a8>)
 800d0f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	4b56      	ldr	r3, [pc, #344]	; (800d250 <DIST_getErr+0x2a8>)
 800d0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	005a      	lsls	r2, r3, #1
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
//		printf("[Val]%6d 左壁制御 	\n\r", *p_err);
	}

	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800d102:	4b53      	ldr	r3, [pc, #332]	; (800d250 <DIST_getErr+0x2a8>)
 800d104:	89db      	ldrh	r3, [r3, #14]
 800d106:	4618      	mov	r0, r3
 800d108:	f7f3 fa34 	bl	8000574 <__aeabi_i2d>
 800d10c:	4604      	mov	r4, r0
 800d10e:	460d      	mov	r5, r1
 800d110:	4b4f      	ldr	r3, [pc, #316]	; (800d250 <DIST_getErr+0x2a8>)
 800d112:	8a5b      	ldrh	r3, [r3, #18]
 800d114:	4618      	mov	r0, r3
 800d116:	f7f3 fa2d 	bl	8000574 <__aeabi_i2d>
 800d11a:	a34b      	add	r3, pc, #300	; (adr r3, 800d248 <DIST_getErr+0x2a0>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 fbbc 	bl	800089c <__aeabi_ddiv>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4620      	mov	r0, r4
 800d12a:	4629      	mov	r1, r5
 800d12c:	f7f3 fd1c 	bl	8000b68 <__aeabi_dcmpgt>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d051      	beq.n	800d1da <DIST_getErr+0x232>
		(st_sen[DIST_SEN_R_FRONT].s_now <st_sen[DIST_SEN_R_FRONT].s_limit/0.7)){
 800d136:	4b46      	ldr	r3, [pc, #280]	; (800d250 <DIST_getErr+0x2a8>)
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f3 fa1a 	bl	8000574 <__aeabi_i2d>
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	4b42      	ldr	r3, [pc, #264]	; (800d250 <DIST_getErr+0x2a8>)
 800d146:	889b      	ldrh	r3, [r3, #4]
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f3 fa13 	bl	8000574 <__aeabi_i2d>
 800d14e:	a33e      	add	r3, pc, #248	; (adr r3, 800d248 <DIST_getErr+0x2a0>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 fba2 	bl	800089c <__aeabi_ddiv>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fce4 	bl	8000b2c <__aeabi_dcmplt>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d037      	beq.n	800d1da <DIST_getErr+0x232>
			*p_err += 2*(st_sen[DIST_SEN_L_FRONT].s_limit/0.7-st_sen[DIST_SEN_L_FRONT].s_now);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 fa00 	bl	8000574 <__aeabi_i2d>
 800d174:	4604      	mov	r4, r0
 800d176:	460d      	mov	r5, r1
 800d178:	4b35      	ldr	r3, [pc, #212]	; (800d250 <DIST_getErr+0x2a8>)
 800d17a:	8a5b      	ldrh	r3, [r3, #18]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7f3 f9f9 	bl	8000574 <__aeabi_i2d>
 800d182:	a331      	add	r3, pc, #196	; (adr r3, 800d248 <DIST_getErr+0x2a0>)
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 fb88 	bl	800089c <__aeabi_ddiv>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4690      	mov	r8, r2
 800d192:	4699      	mov	r9, r3
 800d194:	4b2e      	ldr	r3, [pc, #184]	; (800d250 <DIST_getErr+0x2a8>)
 800d196:	89db      	ldrh	r3, [r3, #14]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f3 f9eb 	bl	8000574 <__aeabi_i2d>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	4649      	mov	r1, r9
 800d1a6:	f7f3 f897 	bl	80002d8 <__aeabi_dsub>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	f7f3 f891 	bl	80002dc <__adddf3>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 f88b 	bl	80002dc <__adddf3>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	f7f3 fceb 	bl	8000ba8 <__aeabi_d2iz>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
	}

}
 800d1d8:	e071      	b.n	800d2be <DIST_getErr+0x316>
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800d1da:	4b1d      	ldr	r3, [pc, #116]	; (800d250 <DIST_getErr+0x2a8>)
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f3 f9c8 	bl	8000574 <__aeabi_i2d>
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	460d      	mov	r5, r1
 800d1e8:	4b19      	ldr	r3, [pc, #100]	; (800d250 <DIST_getErr+0x2a8>)
 800d1ea:	889b      	ldrh	r3, [r3, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f3 f9c1 	bl	8000574 <__aeabi_i2d>
 800d1f2:	a315      	add	r3, pc, #84	; (adr r3, 800d248 <DIST_getErr+0x2a0>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	f7f3 fb50 	bl	800089c <__aeabi_ddiv>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4620      	mov	r0, r4
 800d202:	4629      	mov	r1, r5
 800d204:	f7f3 fcb0 	bl	8000b68 <__aeabi_dcmpgt>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d100      	bne.n	800d210 <DIST_getErr+0x268>
}
 800d20e:	e056      	b.n	800d2be <DIST_getErr+0x316>
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
 800d210:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <DIST_getErr+0x2a8>)
 800d212:	89db      	ldrh	r3, [r3, #14]
 800d214:	4618      	mov	r0, r3
 800d216:	f7f3 f9ad 	bl	8000574 <__aeabi_i2d>
 800d21a:	4604      	mov	r4, r0
 800d21c:	460d      	mov	r5, r1
 800d21e:	4b0c      	ldr	r3, [pc, #48]	; (800d250 <DIST_getErr+0x2a8>)
 800d220:	8a5b      	ldrh	r3, [r3, #18]
 800d222:	4618      	mov	r0, r3
 800d224:	f7f3 f9a6 	bl	8000574 <__aeabi_i2d>
 800d228:	a307      	add	r3, pc, #28	; (adr r3, 800d248 <DIST_getErr+0x2a0>)
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	f7f3 fb35 	bl	800089c <__aeabi_ddiv>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800d236:	4620      	mov	r0, r4
 800d238:	4629      	mov	r1, r5
 800d23a:	f7f3 fc77 	bl	8000b2c <__aeabi_dcmplt>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d107      	bne.n	800d254 <DIST_getErr+0x2ac>
}
 800d244:	e03b      	b.n	800d2be <DIST_getErr+0x316>
 800d246:	bf00      	nop
 800d248:	66666666 	.word	0x66666666
 800d24c:	3fe66666 	.word	0x3fe66666
 800d250:	2000b088 	.word	0x2000b088
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f3 f98b 	bl	8000574 <__aeabi_i2d>
 800d25e:	4604      	mov	r4, r0
 800d260:	460d      	mov	r5, r1
 800d262:	4b1b      	ldr	r3, [pc, #108]	; (800d2d0 <DIST_getErr+0x328>)
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	4618      	mov	r0, r3
 800d268:	f7f3 f984 	bl	8000574 <__aeabi_i2d>
 800d26c:	4680      	mov	r8, r0
 800d26e:	4689      	mov	r9, r1
 800d270:	4b17      	ldr	r3, [pc, #92]	; (800d2d0 <DIST_getErr+0x328>)
 800d272:	889b      	ldrh	r3, [r3, #4]
 800d274:	4618      	mov	r0, r3
 800d276:	f7f3 f97d 	bl	8000574 <__aeabi_i2d>
 800d27a:	a313      	add	r3, pc, #76	; (adr r3, 800d2c8 <DIST_getErr+0x320>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f7f3 fb0c 	bl	800089c <__aeabi_ddiv>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4640      	mov	r0, r8
 800d28a:	4649      	mov	r1, r9
 800d28c:	f7f3 f824 	bl	80002d8 <__aeabi_dsub>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	4610      	mov	r0, r2
 800d296:	4619      	mov	r1, r3
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	f7f3 f81e 	bl	80002dc <__adddf3>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7f3 f818 	bl	80002dc <__adddf3>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	f7f3 fc78 	bl	8000ba8 <__aeabi_d2iz>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
}
 800d2be:	bf00      	nop
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d2c8:	66666666 	.word	0x66666666
 800d2cc:	3fe66666 	.word	0x3fe66666
 800d2d0:	2000b088 	.word	0x2000b088

0800d2d4 <DIST_getErrSkew>:

void DIST_getErrSkew( int32_t* p_err )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
	*p_err =0;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	601a      	str	r2, [r3, #0]

	/* 進行方向に壁が存在する場合によける動作を行う */
	if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr3 ){
 800d2e2:	4b20      	ldr	r3, [pc, #128]	; (800d364 <DIST_getErrSkew+0x90>)
 800d2e4:	881a      	ldrh	r2, [r3, #0]
 800d2e6:	4b20      	ldr	r3, [pc, #128]	; (800d368 <DIST_getErrSkew+0x94>)
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d903      	bls.n	800d2f6 <DIST_getErrSkew+0x22>
		*p_err = 0;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
//		printf("左前が近い  [NOW]%d > [ERR1]%d", st_sen[DIST_SEN_L_FRONT].s_now, st_senF[DIST_SEN_L_FRONT].s_skewErr1 );
	}
	else{
	}

}
 800d2f4:	e030      	b.n	800d358 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr3 ){
 800d2f6:	4b1b      	ldr	r3, [pc, #108]	; (800d364 <DIST_getErrSkew+0x90>)
 800d2f8:	89da      	ldrh	r2, [r3, #14]
 800d2fa:	4b1b      	ldr	r3, [pc, #108]	; (800d368 <DIST_getErrSkew+0x94>)
 800d2fc:	89db      	ldrh	r3, [r3, #14]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d903      	bls.n	800d30a <DIST_getErrSkew+0x36>
		*p_err = 0;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
}
 800d308:	e026      	b.n	800d358 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr2 ){
 800d30a:	4b16      	ldr	r3, [pc, #88]	; (800d364 <DIST_getErrSkew+0x90>)
 800d30c:	881a      	ldrh	r2, [r3, #0]
 800d30e:	4b16      	ldr	r3, [pc, #88]	; (800d368 <DIST_getErrSkew+0x94>)
 800d310:	889b      	ldrh	r3, [r3, #4]
 800d312:	429a      	cmp	r2, r3
 800d314:	d903      	bls.n	800d31e <DIST_getErrSkew+0x4a>
		*p_err = 0;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
}
 800d31c:	e01c      	b.n	800d358 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr2 ){
 800d31e:	4b11      	ldr	r3, [pc, #68]	; (800d364 <DIST_getErrSkew+0x90>)
 800d320:	89da      	ldrh	r2, [r3, #14]
 800d322:	4b11      	ldr	r3, [pc, #68]	; (800d368 <DIST_getErrSkew+0x94>)
 800d324:	899b      	ldrh	r3, [r3, #12]
 800d326:	429a      	cmp	r2, r3
 800d328:	d903      	bls.n	800d332 <DIST_getErrSkew+0x5e>
		*p_err = 0;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]
}
 800d330:	e012      	b.n	800d358 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr1 ){
 800d332:	4b0c      	ldr	r3, [pc, #48]	; (800d364 <DIST_getErrSkew+0x90>)
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <DIST_getErrSkew+0x94>)
 800d338:	885b      	ldrh	r3, [r3, #2]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d903      	bls.n	800d346 <DIST_getErrSkew+0x72>
		*p_err = 0;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
}
 800d344:	e008      	b.n	800d358 <DIST_getErrSkew+0x84>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr1 ){
 800d346:	4b07      	ldr	r3, [pc, #28]	; (800d364 <DIST_getErrSkew+0x90>)
 800d348:	89da      	ldrh	r2, [r3, #14]
 800d34a:	4b07      	ldr	r3, [pc, #28]	; (800d368 <DIST_getErrSkew+0x94>)
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d902      	bls.n	800d358 <DIST_getErrSkew+0x84>
		*p_err = 0;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	2000b088 	.word	0x2000b088
 800d368:	2000b068 	.word	0x2000b068

0800d36c <DIST_Pol_FL>:

void DIST_Pol_FL( void )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
	st_sen[DIST_SEN_L_FRONT].s_offset = GetSensor_FL();
 800d372:	f7f4 f9f9 	bl	8001768 <GetSensor_FL>
 800d376:	4603      	mov	r3, r0
 800d378:	461a      	mov	r2, r3
 800d37a:	4b17      	ldr	r3, [pc, #92]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d37c:	82da      	strh	r2, [r3, #22]

	Set_SenFL(1);
 800d37e:	2001      	movs	r0, #1
 800d380:	f7f4 feac 	bl	80020dc <Set_SenFL>

	for(uint16_t i=0;i<1000;i++);
 800d384:	2300      	movs	r3, #0
 800d386:	80fb      	strh	r3, [r7, #6]
 800d388:	e002      	b.n	800d390 <DIST_Pol_FL+0x24>
 800d38a:	88fb      	ldrh	r3, [r7, #6]
 800d38c:	3301      	adds	r3, #1
 800d38e:	80fb      	strh	r3, [r7, #6]
 800d390:	88fb      	ldrh	r3, [r7, #6]
 800d392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d396:	d3f8      	bcc.n	800d38a <DIST_Pol_FL+0x1e>

	st_sen[DIST_SEN_L_FRONT].s_old = st_sen[DIST_SEN_L_FRONT].s_now;
 800d398:	4b0f      	ldr	r3, [pc, #60]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d39a:	89da      	ldrh	r2, [r3, #14]
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d39e:	821a      	strh	r2, [r3, #16]
	st_sen[DIST_SEN_L_FRONT].s_now = GetSensor_FL()- st_sen[DIST_SEN_L_FRONT].s_offset;
 800d3a0:	f7f4 f9e2 	bl	8001768 <GetSensor_FL>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	4b0b      	ldr	r3, [pc, #44]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d3aa:	8adb      	ldrh	r3, [r3, #22]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	4b09      	ldr	r3, [pc, #36]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d3b2:	81da      	strh	r2, [r3, #14]
	if(st_sen[DIST_SEN_L_FRONT].s_now>(65535/2))st_sen[DIST_SEN_L_FRONT].s_now =0;
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d3b6:	89db      	ldrh	r3, [r3, #14]
 800d3b8:	b21b      	sxth	r3, r3
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	da02      	bge.n	800d3c4 <DIST_Pol_FL+0x58>
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <DIST_Pol_FL+0x6c>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	81da      	strh	r2, [r3, #14]
	ADC3_clearEOS();
 800d3c4:	f7f4 f9e8 	bl	8001798 <ADC3_clearEOS>

	Set_SenFL(0);
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f7f4 fe87 	bl	80020dc <Set_SenFL>
}
 800d3ce:	bf00      	nop
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	2000b088 	.word	0x2000b088

0800d3dc <DIST_Pol_FR>:

void DIST_Pol_FR( void )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_FRONT].s_offset = GetSensor_FR();
 800d3e2:	f7f4 fa27 	bl	8001834 <GetSensor_FR>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b17      	ldr	r3, [pc, #92]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d3ec:	811a      	strh	r2, [r3, #8]

	Set_SenFR(1);
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	f7f4 febc 	bl	800216c <Set_SenFR>

	for(uint16_t i=0;i<1000;i++);
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	80fb      	strh	r3, [r7, #6]
 800d3f8:	e002      	b.n	800d400 <DIST_Pol_FR+0x24>
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	80fb      	strh	r3, [r7, #6]
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d406:	d3f8      	bcc.n	800d3fa <DIST_Pol_FR+0x1e>

	st_sen[DIST_SEN_R_FRONT].s_old = st_sen[DIST_SEN_R_FRONT].s_now;
 800d408:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d40a:	881a      	ldrh	r2, [r3, #0]
 800d40c:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d40e:	805a      	strh	r2, [r3, #2]
	st_sen[DIST_SEN_R_FRONT].s_now = GetSensor_FR()- st_sen[DIST_SEN_R_FRONT].s_offset;
 800d410:	f7f4 fa10 	bl	8001834 <GetSensor_FR>
 800d414:	4603      	mov	r3, r0
 800d416:	461a      	mov	r2, r3
 800d418:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d41a:	891b      	ldrh	r3, [r3, #8]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	b29a      	uxth	r2, r3
 800d420:	4b09      	ldr	r3, [pc, #36]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d422:	801a      	strh	r2, [r3, #0]
	if(st_sen[DIST_SEN_R_FRONT].s_now>(65535/2))st_sen[DIST_SEN_R_FRONT].s_now =0;
 800d424:	4b08      	ldr	r3, [pc, #32]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	b21b      	sxth	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	da02      	bge.n	800d434 <DIST_Pol_FR+0x58>
 800d42e:	4b06      	ldr	r3, [pc, #24]	; (800d448 <DIST_Pol_FR+0x6c>)
 800d430:	2200      	movs	r2, #0
 800d432:	801a      	strh	r2, [r3, #0]
	ADC2_clearEOS();
 800d434:	f7f4 f9ba 	bl	80017ac <ADC2_clearEOS>

	Set_SenFR(0);
 800d438:	2000      	movs	r0, #0
 800d43a:	f7f4 fe97 	bl	800216c <Set_SenFR>

}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	2000b088 	.word	0x2000b088

0800d44c <DIST_Pol_SL>:


void DIST_Pol_SL( void )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_L_SIDE].s_offset = GetSensor_SL();
 800d452:	f7f4 f9bd 	bl	80017d0 <GetSensor_SL>
 800d456:	4603      	mov	r3, r0
 800d458:	461a      	mov	r2, r3
 800d45a:	4b17      	ldr	r3, [pc, #92]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d45c:	865a      	strh	r2, [r3, #50]	; 0x32

	Set_SenSL(1);
 800d45e:	2001      	movs	r0, #1
 800d460:	f7f4 fe53 	bl	800210a <Set_SenSL>

	for(uint16_t i=0;i<1000;i++);
 800d464:	2300      	movs	r3, #0
 800d466:	80fb      	strh	r3, [r7, #6]
 800d468:	e002      	b.n	800d470 <DIST_Pol_SL+0x24>
 800d46a:	88fb      	ldrh	r3, [r7, #6]
 800d46c:	3301      	adds	r3, #1
 800d46e:	80fb      	strh	r3, [r7, #6]
 800d470:	88fb      	ldrh	r3, [r7, #6]
 800d472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d476:	d3f8      	bcc.n	800d46a <DIST_Pol_SL+0x1e>

	st_sen[DIST_SEN_L_SIDE].s_old = st_sen[DIST_SEN_L_SIDE].s_now;
 800d478:	4b0f      	ldr	r3, [pc, #60]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d47a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d47c:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d47e:	859a      	strh	r2, [r3, #44]	; 0x2c
	st_sen[DIST_SEN_L_SIDE].s_now = GetSensor_SL()- st_sen[DIST_SEN_L_SIDE].s_offset;
 800d480:	f7f4 f9a6 	bl	80017d0 <GetSensor_SL>
 800d484:	4603      	mov	r3, r0
 800d486:	461a      	mov	r2, r3
 800d488:	4b0b      	ldr	r3, [pc, #44]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d48a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	b29a      	uxth	r2, r3
 800d490:	4b09      	ldr	r3, [pc, #36]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d492:	855a      	strh	r2, [r3, #42]	; 0x2a
	if(st_sen[DIST_SEN_L_SIDE].s_now>(65535/2))st_sen[DIST_SEN_L_SIDE].s_now =0;
 800d494:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d498:	b21b      	sxth	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	da02      	bge.n	800d4a4 <DIST_Pol_SL+0x58>
 800d49e:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <DIST_Pol_SL+0x6c>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	855a      	strh	r2, [r3, #42]	; 0x2a
	ADC1_clearEOS();
 800d4a4:	f7f4 f98c 	bl	80017c0 <ADC1_clearEOS>

	Set_SenSL(0);
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	f7f4 fe2e 	bl	800210a <Set_SenSL>

}
 800d4ae:	bf00      	nop
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	2000b088 	.word	0x2000b088

0800d4bc <DIST_Pol_SR>:

void DIST_Pol_SR( void )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_SIDE].s_offset = GetSensor_SR();
 800d4c2:	f7f4 f99e 	bl	8001802 <GetSensor_SR>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b16      	ldr	r3, [pc, #88]	; (800d524 <DIST_Pol_SR+0x68>)
 800d4cc:	849a      	strh	r2, [r3, #36]	; 0x24

	Set_SenSR(1);
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	f7f4 fe32 	bl	8002138 <Set_SenSR>

	for(uint16_t i=0;i<1000;i++);
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	80fb      	strh	r3, [r7, #6]
 800d4d8:	e002      	b.n	800d4e0 <DIST_Pol_SR+0x24>
 800d4da:	88fb      	ldrh	r3, [r7, #6]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	80fb      	strh	r3, [r7, #6]
 800d4e0:	88fb      	ldrh	r3, [r7, #6]
 800d4e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4e6:	d3f8      	bcc.n	800d4da <DIST_Pol_SR+0x1e>

	st_sen[DIST_SEN_R_SIDE].s_old = st_sen[DIST_SEN_R_SIDE].s_now;
 800d4e8:	4b0e      	ldr	r3, [pc, #56]	; (800d524 <DIST_Pol_SR+0x68>)
 800d4ea:	8b9a      	ldrh	r2, [r3, #28]
 800d4ec:	4b0d      	ldr	r3, [pc, #52]	; (800d524 <DIST_Pol_SR+0x68>)
 800d4ee:	83da      	strh	r2, [r3, #30]
	st_sen[DIST_SEN_R_SIDE].s_now = GetSensor_SR()- st_sen[DIST_SEN_R_SIDE].s_offset;
 800d4f0:	f7f4 f987 	bl	8001802 <GetSensor_SR>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <DIST_Pol_SR+0x68>)
 800d4fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	4b08      	ldr	r3, [pc, #32]	; (800d524 <DIST_Pol_SR+0x68>)
 800d502:	839a      	strh	r2, [r3, #28]
	if(st_sen[DIST_SEN_R_SIDE].s_now>(65535/2))st_sen[DIST_SEN_R_SIDE].s_now =0;
 800d504:	4b07      	ldr	r3, [pc, #28]	; (800d524 <DIST_Pol_SR+0x68>)
 800d506:	8b9b      	ldrh	r3, [r3, #28]
 800d508:	b21b      	sxth	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	da02      	bge.n	800d514 <DIST_Pol_SR+0x58>
 800d50e:	4b05      	ldr	r3, [pc, #20]	; (800d524 <DIST_Pol_SR+0x68>)
 800d510:	2200      	movs	r2, #0
 800d512:	839a      	strh	r2, [r3, #28]

	Set_SenSR(0);
 800d514:	2000      	movs	r0, #0
 800d516:	f7f4 fe0f 	bl	8002138 <Set_SenSR>

}
 800d51a:	bf00      	nop
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	2000b088 	.word	0x2000b088

0800d528 <Get_Sen_Nowdata>:

void Get_Sen_Nowdata(void){
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af02      	add	r7, sp, #8
	printf("FL %4d SL %4d SR %4d FR %4d\r",
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800d52e:	4b09      	ldr	r3, [pc, #36]	; (800d554 <Get_Sen_Nowdata+0x2c>)
 800d530:	89db      	ldrh	r3, [r3, #14]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800d532:	4619      	mov	r1, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <Get_Sen_Nowdata+0x2c>)
 800d536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800d538:	461a      	mov	r2, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800d53a:	4b06      	ldr	r3, [pc, #24]	; (800d554 <Get_Sen_Nowdata+0x2c>)
 800d53c:	8b9b      	ldrh	r3, [r3, #28]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800d53e:	4618      	mov	r0, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800d540:	4b04      	ldr	r3, [pc, #16]	; (800d554 <Get_Sen_Nowdata+0x2c>)
 800d542:	881b      	ldrh	r3, [r3, #0]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	4603      	mov	r3, r0
 800d548:	4803      	ldr	r0, [pc, #12]	; (800d558 <Get_Sen_Nowdata+0x30>)
 800d54a:	f009 f8f3 	bl	8016734 <iprintf>
}
 800d54e:	bf00      	nop
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	2000b088 	.word	0x2000b088
 800d558:	0801bc7c 	.word	0x0801bc7c

0800d55c <DIST_isWall_FRONT>:

bool DIST_isWall_FRONT( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800d562:	2300      	movs	r3, #0
 800d564:	71fb      	strb	r3, [r7, #7]
//	printf("DIST_SEN_R_FRONT %5d \r\n",st_sen[DIST_SEN_R_FRONT].s_limit);
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800d566:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <DIST_isWall_FRONT+0x34>)
 800d568:	881a      	ldrh	r2, [r3, #0]
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <DIST_isWall_FRONT+0x34>)
 800d56c:	889b      	ldrh	r3, [r3, #4]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d805      	bhi.n	800d57e <DIST_isWall_FRONT+0x22>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_limit )
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <DIST_isWall_FRONT+0x34>)
 800d574:	89da      	ldrh	r2, [r3, #14]
 800d576:	4b06      	ldr	r3, [pc, #24]	; (800d590 <DIST_isWall_FRONT+0x34>)
 800d578:	8a5b      	ldrh	r3, [r3, #18]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d901      	bls.n	800d582 <DIST_isWall_FRONT+0x26>
	){
		bl_res = true;
 800d57e:	2301      	movs	r3, #1
 800d580:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800d582:	79fb      	ldrb	r3, [r7, #7]
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	2000b088 	.word	0x2000b088

0800d594 <DIST_isWall_R_SIDE>:

bool DIST_isWall_R_SIDE( void )
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800d59a:	2300      	movs	r3, #0
 800d59c:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_R_SIDE].s_now > st_sen[DIST_SEN_R_SIDE].s_limit ){
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <DIST_isWall_R_SIDE+0x28>)
 800d5a0:	8b9a      	ldrh	r2, [r3, #28]
 800d5a2:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <DIST_isWall_R_SIDE+0x28>)
 800d5a4:	8c1b      	ldrh	r3, [r3, #32]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d901      	bls.n	800d5ae <DIST_isWall_R_SIDE+0x1a>
		bl_res = true;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	2000b088 	.word	0x2000b088

0800d5c0 <DIST_isWall_L_SIDE>:

bool DIST_isWall_L_SIDE( void )
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_L_SIDE].s_now > st_sen[DIST_SEN_L_SIDE].s_limit ){
 800d5ca:	4b07      	ldr	r3, [pc, #28]	; (800d5e8 <DIST_isWall_L_SIDE+0x28>)
 800d5cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d5ce:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <DIST_isWall_L_SIDE+0x28>)
 800d5d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d901      	bls.n	800d5da <DIST_isWall_L_SIDE+0x1a>
		bl_res = true;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800d5da:	79fb      	ldrb	r3, [r7, #7]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	2000b088 	.word	0x2000b088

0800d5ec <MAP_refPos>:
uint16_t us_LogIndex = 0;
uint16_t us_LogWallCut[30];
uint16_t us_LogIndexWallCut = 0;

void MAP_refPos( uint8_t uc_cmd )
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_index = 0;			// テーブルのインデックス番号
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73fb      	strb	r3, [r7, #15]
	
	/* ------------------------------------------ */
	/*  コマンドからテーブルのインデックスを取得  */
	/* ------------------------------------------ */
	/* 直進 */
	if( ( uc_cmd <=  GO71 ) && ( uc_cmd >=  GO1) ){
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	2b47      	cmp	r3, #71	; 0x47
 800d5fe:	d805      	bhi.n	800d60c <MAP_refPos+0x20>
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <MAP_refPos+0x20>
		
		uc_index = 14;		// st_PosDataテーブルの直進のインデックス番号
 800d606:	230e      	movs	r3, #14
 800d608:	73fb      	strb	r3, [r7, #15]
 800d60a:	e023      	b.n	800d654 <MAP_refPos+0x68>
	}
	/* 斜め直進 */
	else if( ( uc_cmd <=  NGO71 ) && ( uc_cmd >=  NGO1) ){
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	2b98      	cmp	r3, #152	; 0x98
 800d610:	d805      	bhi.n	800d61e <MAP_refPos+0x32>
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	2b51      	cmp	r3, #81	; 0x51
 800d616:	d902      	bls.n	800d61e <MAP_refPos+0x32>
		
		uc_index = 15;		// st_PosDataテーブルの斜め直進のインデックス番号
 800d618:	230f      	movs	r3, #15
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	e01a      	b.n	800d654 <MAP_refPos+0x68>
	}
	/* その他のコマンド */
	else{
		while(1){
			
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800d61e:	7bfa      	ldrb	r2, [r7, #15]
 800d620:	49c7      	ldr	r1, [pc, #796]	; (800d940 <MAP_refPos+0x354>)
 800d622:	4613      	mov	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	00db      	lsls	r3, r3, #3
 800d62a:	440b      	add	r3, r1
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	79fa      	ldrb	r2, [r7, #7]
 800d630:	429a      	cmp	r2, r3
 800d632:	d00e      	beq.n	800d652 <MAP_refPos+0x66>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800d634:	7bfa      	ldrb	r2, [r7, #15]
 800d636:	49c2      	ldr	r1, [pc, #776]	; (800d940 <MAP_refPos+0x354>)
 800d638:	4613      	mov	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	440b      	add	r3, r1
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2bfb      	cmp	r3, #251	; 0xfb
 800d646:	f000 82cb 	beq.w	800dbe0 <MAP_refPos+0x5f4>
			uc_index++;
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	3301      	adds	r3, #1
 800d64e:	73fb      	strb	r3, [r7, #15]
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800d650:	e7e5      	b.n	800d61e <MAP_refPos+0x32>
 800d652:	bf00      	nop
		}
	}
	
		/* 位置更新 */
	switch( s_PosDir ){
 800d654:	4bbb      	ldr	r3, [pc, #748]	; (800d944 <MAP_refPos+0x358>)
 800d656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d65a:	2b07      	cmp	r3, #7
 800d65c:	f200 8268 	bhi.w	800db30 <MAP_refPos+0x544>
 800d660:	a201      	add	r2, pc, #4	; (adr r2, 800d668 <MAP_refPos+0x7c>)
 800d662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d666:	bf00      	nop
 800d668:	0800d689 	.word	0x0800d689
 800d66c:	0800d689 	.word	0x0800d689
 800d670:	0800d7af 	.word	0x0800d7af
 800d674:	0800d7af 	.word	0x0800d7af
 800d678:	0800d8d5 	.word	0x0800d8d5
 800d67c:	0800d8d5 	.word	0x0800d8d5
 800d680:	0800da0b 	.word	0x0800da0b
 800d684:	0800da0b 	.word	0x0800da0b
		/* [0]北 [1]北東 */
		case 0:
		case 1:
		
			/* 直進 */
			if( uc_index == 14 ){
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	2b0e      	cmp	r3, #14
 800d68c:	d132      	bne.n	800d6f4 <MAP_refPos+0x108>
				
				f_PosX += st_PosData[uc_index].f_x0_x1 * uc_cmd;
 800d68e:	7bfa      	ldrb	r2, [r7, #15]
 800d690:	49ab      	ldr	r1, [pc, #684]	; (800d940 <MAP_refPos+0x354>)
 800d692:	4613      	mov	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	4413      	add	r3, r2
 800d698:	00db      	lsls	r3, r3, #3
 800d69a:	440b      	add	r3, r1
 800d69c:	3304      	adds	r3, #4
 800d69e:	ed93 7a00 	vldr	s14, [r3]
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	ee07 3a90 	vmov	s15, r3
 800d6a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6b0:	4ba5      	ldr	r3, [pc, #660]	; (800d948 <MAP_refPos+0x35c>)
 800d6b2:	edd3 7a00 	vldr	s15, [r3]
 800d6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6ba:	4ba3      	ldr	r3, [pc, #652]	; (800d948 <MAP_refPos+0x35c>)
 800d6bc:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * uc_cmd;
 800d6c0:	7bfa      	ldrb	r2, [r7, #15]
 800d6c2:	499f      	ldr	r1, [pc, #636]	; (800d940 <MAP_refPos+0x354>)
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	440b      	add	r3, r1
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	ed93 7a00 	vldr	s14, [r3]
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6e2:	4b9a      	ldr	r3, [pc, #616]	; (800d94c <MAP_refPos+0x360>)
 800d6e4:	edd3 7a00 	vldr	s15, [r3]
 800d6e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6ec:	4b97      	ldr	r3, [pc, #604]	; (800d94c <MAP_refPos+0x360>)
 800d6ee:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x0_x1;
				f_PosY += st_PosData[uc_index].f_y0_y1;
			}
			break;
 800d6f2:	e21d      	b.n	800db30 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	2b0f      	cmp	r3, #15
 800d6f8:	d134      	bne.n	800d764 <MAP_refPos+0x178>
				f_PosX += st_PosData[uc_index].f_x0_x1 * ( uc_cmd - 81 );
 800d6fa:	7bfa      	ldrb	r2, [r7, #15]
 800d6fc:	4990      	ldr	r1, [pc, #576]	; (800d940 <MAP_refPos+0x354>)
 800d6fe:	4613      	mov	r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	440b      	add	r3, r1
 800d708:	3304      	adds	r3, #4
 800d70a:	ed93 7a00 	vldr	s14, [r3]
 800d70e:	79fb      	ldrb	r3, [r7, #7]
 800d710:	3b51      	subs	r3, #81	; 0x51
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d71e:	4b8a      	ldr	r3, [pc, #552]	; (800d948 <MAP_refPos+0x35c>)
 800d720:	edd3 7a00 	vldr	s15, [r3]
 800d724:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d728:	4b87      	ldr	r3, [pc, #540]	; (800d948 <MAP_refPos+0x35c>)
 800d72a:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * ( uc_cmd - 81 );
 800d72e:	7bfa      	ldrb	r2, [r7, #15]
 800d730:	4983      	ldr	r1, [pc, #524]	; (800d940 <MAP_refPos+0x354>)
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	00db      	lsls	r3, r3, #3
 800d73a:	440b      	add	r3, r1
 800d73c:	3308      	adds	r3, #8
 800d73e:	ed93 7a00 	vldr	s14, [r3]
 800d742:	79fb      	ldrb	r3, [r7, #7]
 800d744:	3b51      	subs	r3, #81	; 0x51
 800d746:	ee07 3a90 	vmov	s15, r3
 800d74a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d74e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d752:	4b7e      	ldr	r3, [pc, #504]	; (800d94c <MAP_refPos+0x360>)
 800d754:	edd3 7a00 	vldr	s15, [r3]
 800d758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d75c:	4b7b      	ldr	r3, [pc, #492]	; (800d94c <MAP_refPos+0x360>)
 800d75e:	edc3 7a00 	vstr	s15, [r3]
			break;
 800d762:	e1e5      	b.n	800db30 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x0_x1;
 800d764:	7bfa      	ldrb	r2, [r7, #15]
 800d766:	4976      	ldr	r1, [pc, #472]	; (800d940 <MAP_refPos+0x354>)
 800d768:	4613      	mov	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	440b      	add	r3, r1
 800d772:	3304      	adds	r3, #4
 800d774:	ed93 7a00 	vldr	s14, [r3]
 800d778:	4b73      	ldr	r3, [pc, #460]	; (800d948 <MAP_refPos+0x35c>)
 800d77a:	edd3 7a00 	vldr	s15, [r3]
 800d77e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d782:	4b71      	ldr	r3, [pc, #452]	; (800d948 <MAP_refPos+0x35c>)
 800d784:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1;
 800d788:	7bfa      	ldrb	r2, [r7, #15]
 800d78a:	496d      	ldr	r1, [pc, #436]	; (800d940 <MAP_refPos+0x354>)
 800d78c:	4613      	mov	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4413      	add	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	440b      	add	r3, r1
 800d796:	3308      	adds	r3, #8
 800d798:	ed93 7a00 	vldr	s14, [r3]
 800d79c:	4b6b      	ldr	r3, [pc, #428]	; (800d94c <MAP_refPos+0x360>)
 800d79e:	edd3 7a00 	vldr	s15, [r3]
 800d7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7a6:	4b69      	ldr	r3, [pc, #420]	; (800d94c <MAP_refPos+0x360>)
 800d7a8:	edc3 7a00 	vstr	s15, [r3]
			break;
 800d7ac:	e1c0      	b.n	800db30 <MAP_refPos+0x544>
		/* [2]東 [3]南東 */
		case 2:
		case 3:

			/* 直進 */
			if( uc_index == 14 ){
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
 800d7b0:	2b0e      	cmp	r3, #14
 800d7b2:	d132      	bne.n	800d81a <MAP_refPos+0x22e>
				
				f_PosX += st_PosData[uc_index].f_x2_x3 * uc_cmd;
 800d7b4:	7bfa      	ldrb	r2, [r7, #15]
 800d7b6:	4962      	ldr	r1, [pc, #392]	; (800d940 <MAP_refPos+0x354>)
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	440b      	add	r3, r1
 800d7c2:	330c      	adds	r3, #12
 800d7c4:	ed93 7a00 	vldr	s14, [r3]
 800d7c8:	79fb      	ldrb	r3, [r7, #7]
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7d6:	4b5c      	ldr	r3, [pc, #368]	; (800d948 <MAP_refPos+0x35c>)
 800d7d8:	edd3 7a00 	vldr	s15, [r3]
 800d7dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e0:	4b59      	ldr	r3, [pc, #356]	; (800d948 <MAP_refPos+0x35c>)
 800d7e2:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * uc_cmd;
 800d7e6:	7bfa      	ldrb	r2, [r7, #15]
 800d7e8:	4955      	ldr	r1, [pc, #340]	; (800d940 <MAP_refPos+0x354>)
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	00db      	lsls	r3, r3, #3
 800d7f2:	440b      	add	r3, r1
 800d7f4:	3310      	adds	r3, #16
 800d7f6:	ed93 7a00 	vldr	s14, [r3]
 800d7fa:	79fb      	ldrb	r3, [r7, #7]
 800d7fc:	ee07 3a90 	vmov	s15, r3
 800d800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d804:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d808:	4b50      	ldr	r3, [pc, #320]	; (800d94c <MAP_refPos+0x360>)
 800d80a:	edd3 7a00 	vldr	s15, [r3]
 800d80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d812:	4b4e      	ldr	r3, [pc, #312]	; (800d94c <MAP_refPos+0x360>)
 800d814:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x2_x3;
				f_PosY += st_PosData[uc_index].f_y2_y3;
			}
			break;
 800d818:	e18a      	b.n	800db30 <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	2b0f      	cmp	r3, #15
 800d81e:	d134      	bne.n	800d88a <MAP_refPos+0x29e>
				f_PosX += st_PosData[uc_index].f_x2_x3 * ( uc_cmd - 81 );
 800d820:	7bfa      	ldrb	r2, [r7, #15]
 800d822:	4947      	ldr	r1, [pc, #284]	; (800d940 <MAP_refPos+0x354>)
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	440b      	add	r3, r1
 800d82e:	330c      	adds	r3, #12
 800d830:	ed93 7a00 	vldr	s14, [r3]
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	3b51      	subs	r3, #81	; 0x51
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d840:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d844:	4b40      	ldr	r3, [pc, #256]	; (800d948 <MAP_refPos+0x35c>)
 800d846:	edd3 7a00 	vldr	s15, [r3]
 800d84a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d84e:	4b3e      	ldr	r3, [pc, #248]	; (800d948 <MAP_refPos+0x35c>)
 800d850:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * ( uc_cmd - 81 );
 800d854:	7bfa      	ldrb	r2, [r7, #15]
 800d856:	493a      	ldr	r1, [pc, #232]	; (800d940 <MAP_refPos+0x354>)
 800d858:	4613      	mov	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	00db      	lsls	r3, r3, #3
 800d860:	440b      	add	r3, r1
 800d862:	3310      	adds	r3, #16
 800d864:	ed93 7a00 	vldr	s14, [r3]
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	3b51      	subs	r3, #81	; 0x51
 800d86c:	ee07 3a90 	vmov	s15, r3
 800d870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d878:	4b34      	ldr	r3, [pc, #208]	; (800d94c <MAP_refPos+0x360>)
 800d87a:	edd3 7a00 	vldr	s15, [r3]
 800d87e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d882:	4b32      	ldr	r3, [pc, #200]	; (800d94c <MAP_refPos+0x360>)
 800d884:	edc3 7a00 	vstr	s15, [r3]
			break;
 800d888:	e152      	b.n	800db30 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x2_x3;
 800d88a:	7bfa      	ldrb	r2, [r7, #15]
 800d88c:	492c      	ldr	r1, [pc, #176]	; (800d940 <MAP_refPos+0x354>)
 800d88e:	4613      	mov	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	440b      	add	r3, r1
 800d898:	330c      	adds	r3, #12
 800d89a:	ed93 7a00 	vldr	s14, [r3]
 800d89e:	4b2a      	ldr	r3, [pc, #168]	; (800d948 <MAP_refPos+0x35c>)
 800d8a0:	edd3 7a00 	vldr	s15, [r3]
 800d8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a8:	4b27      	ldr	r3, [pc, #156]	; (800d948 <MAP_refPos+0x35c>)
 800d8aa:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3;
 800d8ae:	7bfa      	ldrb	r2, [r7, #15]
 800d8b0:	4923      	ldr	r1, [pc, #140]	; (800d940 <MAP_refPos+0x354>)
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3310      	adds	r3, #16
 800d8be:	ed93 7a00 	vldr	s14, [r3]
 800d8c2:	4b22      	ldr	r3, [pc, #136]	; (800d94c <MAP_refPos+0x360>)
 800d8c4:	edd3 7a00 	vldr	s15, [r3]
 800d8c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8cc:	4b1f      	ldr	r3, [pc, #124]	; (800d94c <MAP_refPos+0x360>)
 800d8ce:	edc3 7a00 	vstr	s15, [r3]
			break;
 800d8d2:	e12d      	b.n	800db30 <MAP_refPos+0x544>
		/* [4]南 [5]南西 */
		case 4:
		case 5:

			/* 直進 */
			if( uc_index == 14 ){
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b0e      	cmp	r3, #14
 800d8d8:	d13a      	bne.n	800d950 <MAP_refPos+0x364>
				
				f_PosX += st_PosData[uc_index].f_x4_x5 * uc_cmd;
 800d8da:	7bfa      	ldrb	r2, [r7, #15]
 800d8dc:	4918      	ldr	r1, [pc, #96]	; (800d940 <MAP_refPos+0x354>)
 800d8de:	4613      	mov	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	4413      	add	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	440b      	add	r3, r1
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	ed93 7a00 	vldr	s14, [r3]
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8fc:	4b12      	ldr	r3, [pc, #72]	; (800d948 <MAP_refPos+0x35c>)
 800d8fe:	edd3 7a00 	vldr	s15, [r3]
 800d902:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d906:	4b10      	ldr	r3, [pc, #64]	; (800d948 <MAP_refPos+0x35c>)
 800d908:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * uc_cmd;
 800d90c:	7bfa      	ldrb	r2, [r7, #15]
 800d90e:	490c      	ldr	r1, [pc, #48]	; (800d940 <MAP_refPos+0x354>)
 800d910:	4613      	mov	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	440b      	add	r3, r1
 800d91a:	3318      	adds	r3, #24
 800d91c:	ed93 7a00 	vldr	s14, [r3]
 800d920:	79fb      	ldrb	r3, [r7, #7]
 800d922:	ee07 3a90 	vmov	s15, r3
 800d926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d92a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d92e:	4b07      	ldr	r3, [pc, #28]	; (800d94c <MAP_refPos+0x360>)
 800d930:	edd3 7a00 	vldr	s15, [r3]
 800d934:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d938:	4b04      	ldr	r3, [pc, #16]	; (800d94c <MAP_refPos+0x360>)
 800d93a:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x4_x5;
				f_PosY += st_PosData[uc_index].f_y4_y5;
			}
			break;
 800d93e:	e0f7      	b.n	800db30 <MAP_refPos+0x544>
 800d940:	0801bef4 	.word	0x0801bef4
 800d944:	2000c138 	.word	0x2000c138
 800d948:	2000c13c 	.word	0x2000c13c
 800d94c:	2000e1f8 	.word	0x2000e1f8
			else if( uc_index == 15 ){
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	2b0f      	cmp	r3, #15
 800d954:	d134      	bne.n	800d9c0 <MAP_refPos+0x3d4>
				f_PosX += st_PosData[uc_index].f_x4_x5 * ( uc_cmd - 81 );
 800d956:	7bfa      	ldrb	r2, [r7, #15]
 800d958:	49a4      	ldr	r1, [pc, #656]	; (800dbec <MAP_refPos+0x600>)
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	440b      	add	r3, r1
 800d964:	3314      	adds	r3, #20
 800d966:	ed93 7a00 	vldr	s14, [r3]
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	3b51      	subs	r3, #81	; 0x51
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d97a:	4b9d      	ldr	r3, [pc, #628]	; (800dbf0 <MAP_refPos+0x604>)
 800d97c:	edd3 7a00 	vldr	s15, [r3]
 800d980:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d984:	4b9a      	ldr	r3, [pc, #616]	; (800dbf0 <MAP_refPos+0x604>)
 800d986:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * ( uc_cmd - 81 );
 800d98a:	7bfa      	ldrb	r2, [r7, #15]
 800d98c:	4997      	ldr	r1, [pc, #604]	; (800dbec <MAP_refPos+0x600>)
 800d98e:	4613      	mov	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	440b      	add	r3, r1
 800d998:	3318      	adds	r3, #24
 800d99a:	ed93 7a00 	vldr	s14, [r3]
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	3b51      	subs	r3, #81	; 0x51
 800d9a2:	ee07 3a90 	vmov	s15, r3
 800d9a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ae:	4b91      	ldr	r3, [pc, #580]	; (800dbf4 <MAP_refPos+0x608>)
 800d9b0:	edd3 7a00 	vldr	s15, [r3]
 800d9b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9b8:	4b8e      	ldr	r3, [pc, #568]	; (800dbf4 <MAP_refPos+0x608>)
 800d9ba:	edc3 7a00 	vstr	s15, [r3]
			break;
 800d9be:	e0b7      	b.n	800db30 <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x4_x5;
 800d9c0:	7bfa      	ldrb	r2, [r7, #15]
 800d9c2:	498a      	ldr	r1, [pc, #552]	; (800dbec <MAP_refPos+0x600>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	440b      	add	r3, r1
 800d9ce:	3314      	adds	r3, #20
 800d9d0:	ed93 7a00 	vldr	s14, [r3]
 800d9d4:	4b86      	ldr	r3, [pc, #536]	; (800dbf0 <MAP_refPos+0x604>)
 800d9d6:	edd3 7a00 	vldr	s15, [r3]
 800d9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9de:	4b84      	ldr	r3, [pc, #528]	; (800dbf0 <MAP_refPos+0x604>)
 800d9e0:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5;
 800d9e4:	7bfa      	ldrb	r2, [r7, #15]
 800d9e6:	4981      	ldr	r1, [pc, #516]	; (800dbec <MAP_refPos+0x600>)
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	440b      	add	r3, r1
 800d9f2:	3318      	adds	r3, #24
 800d9f4:	ed93 7a00 	vldr	s14, [r3]
 800d9f8:	4b7e      	ldr	r3, [pc, #504]	; (800dbf4 <MAP_refPos+0x608>)
 800d9fa:	edd3 7a00 	vldr	s15, [r3]
 800d9fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da02:	4b7c      	ldr	r3, [pc, #496]	; (800dbf4 <MAP_refPos+0x608>)
 800da04:	edc3 7a00 	vstr	s15, [r3]
			break;
 800da08:	e092      	b.n	800db30 <MAP_refPos+0x544>
		/* [6]西 [7]北西 */
		case 6:
		case 7:

			/* 直進 */
			if( uc_index == 14 ){
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
 800da0c:	2b0e      	cmp	r3, #14
 800da0e:	d132      	bne.n	800da76 <MAP_refPos+0x48a>
				
				f_PosX += st_PosData[uc_index].f_x6_x7 * uc_cmd;
 800da10:	7bfa      	ldrb	r2, [r7, #15]
 800da12:	4976      	ldr	r1, [pc, #472]	; (800dbec <MAP_refPos+0x600>)
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	440b      	add	r3, r1
 800da1e:	331c      	adds	r3, #28
 800da20:	ed93 7a00 	vldr	s14, [r3]
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	ee07 3a90 	vmov	s15, r3
 800da2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da32:	4b6f      	ldr	r3, [pc, #444]	; (800dbf0 <MAP_refPos+0x604>)
 800da34:	edd3 7a00 	vldr	s15, [r3]
 800da38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da3c:	4b6c      	ldr	r3, [pc, #432]	; (800dbf0 <MAP_refPos+0x604>)
 800da3e:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * uc_cmd;
 800da42:	7bfa      	ldrb	r2, [r7, #15]
 800da44:	4969      	ldr	r1, [pc, #420]	; (800dbec <MAP_refPos+0x600>)
 800da46:	4613      	mov	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	440b      	add	r3, r1
 800da50:	3320      	adds	r3, #32
 800da52:	ed93 7a00 	vldr	s14, [r3]
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	ee07 3a90 	vmov	s15, r3
 800da5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da64:	4b63      	ldr	r3, [pc, #396]	; (800dbf4 <MAP_refPos+0x608>)
 800da66:	edd3 7a00 	vldr	s15, [r3]
 800da6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da6e:	4b61      	ldr	r3, [pc, #388]	; (800dbf4 <MAP_refPos+0x608>)
 800da70:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x6_x7;
				f_PosY += st_PosData[uc_index].f_y6_y7;
			}
			break;
 800da74:	e05b      	b.n	800db2e <MAP_refPos+0x542>
			else if( uc_index == 15 ){
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	2b0f      	cmp	r3, #15
 800da7a:	d134      	bne.n	800dae6 <MAP_refPos+0x4fa>
				f_PosX += st_PosData[uc_index].f_x6_x7 * ( uc_cmd - 81 );
 800da7c:	7bfa      	ldrb	r2, [r7, #15]
 800da7e:	495b      	ldr	r1, [pc, #364]	; (800dbec <MAP_refPos+0x600>)
 800da80:	4613      	mov	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	440b      	add	r3, r1
 800da8a:	331c      	adds	r3, #28
 800da8c:	ed93 7a00 	vldr	s14, [r3]
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	3b51      	subs	r3, #81	; 0x51
 800da94:	ee07 3a90 	vmov	s15, r3
 800da98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daa0:	4b53      	ldr	r3, [pc, #332]	; (800dbf0 <MAP_refPos+0x604>)
 800daa2:	edd3 7a00 	vldr	s15, [r3]
 800daa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daaa:	4b51      	ldr	r3, [pc, #324]	; (800dbf0 <MAP_refPos+0x604>)
 800daac:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * ( uc_cmd - 81 );
 800dab0:	7bfa      	ldrb	r2, [r7, #15]
 800dab2:	494e      	ldr	r1, [pc, #312]	; (800dbec <MAP_refPos+0x600>)
 800dab4:	4613      	mov	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	4413      	add	r3, r2
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	440b      	add	r3, r1
 800dabe:	3320      	adds	r3, #32
 800dac0:	ed93 7a00 	vldr	s14, [r3]
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	3b51      	subs	r3, #81	; 0x51
 800dac8:	ee07 3a90 	vmov	s15, r3
 800dacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dad4:	4b47      	ldr	r3, [pc, #284]	; (800dbf4 <MAP_refPos+0x608>)
 800dad6:	edd3 7a00 	vldr	s15, [r3]
 800dada:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dade:	4b45      	ldr	r3, [pc, #276]	; (800dbf4 <MAP_refPos+0x608>)
 800dae0:	edc3 7a00 	vstr	s15, [r3]
			break;
 800dae4:	e023      	b.n	800db2e <MAP_refPos+0x542>
				f_PosX += st_PosData[uc_index].f_x6_x7;
 800dae6:	7bfa      	ldrb	r2, [r7, #15]
 800dae8:	4940      	ldr	r1, [pc, #256]	; (800dbec <MAP_refPos+0x600>)
 800daea:	4613      	mov	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	4413      	add	r3, r2
 800daf0:	00db      	lsls	r3, r3, #3
 800daf2:	440b      	add	r3, r1
 800daf4:	331c      	adds	r3, #28
 800daf6:	ed93 7a00 	vldr	s14, [r3]
 800dafa:	4b3d      	ldr	r3, [pc, #244]	; (800dbf0 <MAP_refPos+0x604>)
 800dafc:	edd3 7a00 	vldr	s15, [r3]
 800db00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db04:	4b3a      	ldr	r3, [pc, #232]	; (800dbf0 <MAP_refPos+0x604>)
 800db06:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7;
 800db0a:	7bfa      	ldrb	r2, [r7, #15]
 800db0c:	4937      	ldr	r1, [pc, #220]	; (800dbec <MAP_refPos+0x600>)
 800db0e:	4613      	mov	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	440b      	add	r3, r1
 800db18:	3320      	adds	r3, #32
 800db1a:	ed93 7a00 	vldr	s14, [r3]
 800db1e:	4b35      	ldr	r3, [pc, #212]	; (800dbf4 <MAP_refPos+0x608>)
 800db20:	edd3 7a00 	vldr	s15, [r3]
 800db24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db28:	4b32      	ldr	r3, [pc, #200]	; (800dbf4 <MAP_refPos+0x608>)
 800db2a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800db2e:	bf00      	nop
	}
	
	/* 進行方向更新 */
	s_PosDir += st_PosData[uc_index].s_dir;
 800db30:	7bfa      	ldrb	r2, [r7, #15]
 800db32:	492e      	ldr	r1, [pc, #184]	; (800dbec <MAP_refPos+0x600>)
 800db34:	4613      	mov	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	00db      	lsls	r3, r3, #3
 800db3c:	440b      	add	r3, r1
 800db3e:	3324      	adds	r3, #36	; 0x24
 800db40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db44:	b29a      	uxth	r2, r3
 800db46:	4b2c      	ldr	r3, [pc, #176]	; (800dbf8 <MAP_refPos+0x60c>)
 800db48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	4413      	add	r3, r2
 800db50:	b29b      	uxth	r3, r3
 800db52:	b21a      	sxth	r2, r3
 800db54:	4b28      	ldr	r3, [pc, #160]	; (800dbf8 <MAP_refPos+0x60c>)
 800db56:	801a      	strh	r2, [r3, #0]
	if( s_PosDir < 0 ) s_PosDir += 8;				// [0]～[7]にしたい
 800db58:	4b27      	ldr	r3, [pc, #156]	; (800dbf8 <MAP_refPos+0x60c>)
 800db5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da09      	bge.n	800db76 <MAP_refPos+0x58a>
 800db62:	4b25      	ldr	r3, [pc, #148]	; (800dbf8 <MAP_refPos+0x60c>)
 800db64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	3308      	adds	r3, #8
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	b21a      	sxth	r2, r3
 800db70:	4b21      	ldr	r3, [pc, #132]	; (800dbf8 <MAP_refPos+0x60c>)
 800db72:	801a      	strh	r2, [r3, #0]
 800db74:	e00d      	b.n	800db92 <MAP_refPos+0x5a6>
	else if( s_PosDir > 7 ) s_PosDir -= 8;
 800db76:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <MAP_refPos+0x60c>)
 800db78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db7c:	2b07      	cmp	r3, #7
 800db7e:	dd08      	ble.n	800db92 <MAP_refPos+0x5a6>
 800db80:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <MAP_refPos+0x60c>)
 800db82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db86:	b29b      	uxth	r3, r3
 800db88:	3b08      	subs	r3, #8
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	b21a      	sxth	r2, r3
 800db8e:	4b1a      	ldr	r3, [pc, #104]	; (800dbf8 <MAP_refPos+0x60c>)
 800db90:	801a      	strh	r2, [r3, #0]
	
	f_LogPosX[us_LogIndex] = f_PosX;
 800db92:	4b1a      	ldr	r3, [pc, #104]	; (800dbfc <MAP_refPos+0x610>)
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	4618      	mov	r0, r3
 800db98:	4b15      	ldr	r3, [pc, #84]	; (800dbf0 <MAP_refPos+0x604>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4918      	ldr	r1, [pc, #96]	; (800dc00 <MAP_refPos+0x614>)
 800db9e:	0083      	lsls	r3, r0, #2
 800dba0:	440b      	add	r3, r1
 800dba2:	601a      	str	r2, [r3, #0]
	f_LogPosY[us_LogIndex] = f_PosY;
 800dba4:	4b15      	ldr	r3, [pc, #84]	; (800dbfc <MAP_refPos+0x610>)
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <MAP_refPos+0x608>)
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	4915      	ldr	r1, [pc, #84]	; (800dc04 <MAP_refPos+0x618>)
 800dbb0:	0083      	lsls	r3, r0, #2
 800dbb2:	440b      	add	r3, r1
 800dbb4:	601a      	str	r2, [r3, #0]
	
	us_LogIndex++;
 800dbb6:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <MAP_refPos+0x610>)
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	4b0f      	ldr	r3, [pc, #60]	; (800dbfc <MAP_refPos+0x610>)
 800dbc0:	801a      	strh	r2, [r3, #0]
	us_LogIndex %= 30;
 800dbc2:	4b0e      	ldr	r3, [pc, #56]	; (800dbfc <MAP_refPos+0x610>)
 800dbc4:	881a      	ldrh	r2, [r3, #0]
 800dbc6:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <MAP_refPos+0x61c>)
 800dbc8:	fba3 1302 	umull	r1, r3, r3, r2
 800dbcc:	0919      	lsrs	r1, r3, #4
 800dbce:	460b      	mov	r3, r1
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	1a5b      	subs	r3, r3, r1
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	4b08      	ldr	r3, [pc, #32]	; (800dbfc <MAP_refPos+0x610>)
 800dbdc:	801a      	strh	r2, [r3, #0]
 800dbde:	e000      	b.n	800dbe2 <MAP_refPos+0x5f6>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800dbe0:	bf00      	nop
}
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	0801bef4 	.word	0x0801bef4
 800dbf0:	2000c13c 	.word	0x2000c13c
 800dbf4:	2000e1f8 	.word	0x2000e1f8
 800dbf8:	2000c138 	.word	0x2000c138
 800dbfc:	200002c2 	.word	0x200002c2
 800dc00:	2000e17c 	.word	0x2000e17c
 800dc04:	2000b0c0 	.word	0x2000b0c0
 800dc08:	88888889 	.word	0x88888889

0800dc0c <MAP_setWallCut>:

bool MAP_setWallCut( uint8_t uc_cmd )
{
 800dc0c:	b590      	push	{r4, r7, lr}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_val = 0;			// 1区画前のコーナー側の壁があるか（0以外なら壁あり）
 800dc16:	2300      	movs	r3, #0
 800dc18:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_valPrev = 0;		// 2区画前のコーナー側の壁があるか（0以外なら壁あり）
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73bb      	strb	r3, [r7, #14]
	bool bl_wallCut = FALSE;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	737b      	strb	r3, [r7, #13]
	
	/* 位置更新 */
	switch( uc_cmd ){
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	2b9c      	cmp	r3, #156	; 0x9c
 800dc26:	f000 822a 	beq.w	800e07e <MAP_setWallCut+0x472>
 800dc2a:	2b9c      	cmp	r3, #156	; 0x9c
 800dc2c:	f300 843f 	bgt.w	800e4ae <MAP_setWallCut+0x8a2>
 800dc30:	2b9b      	cmp	r3, #155	; 0x9b
 800dc32:	d009      	beq.n	800dc48 <MAP_setWallCut+0x3c>
 800dc34:	2b9b      	cmp	r3, #155	; 0x9b
 800dc36:	f300 843a 	bgt.w	800e4ae <MAP_setWallCut+0x8a2>
 800dc3a:	2b4c      	cmp	r3, #76	; 0x4c
 800dc3c:	d004      	beq.n	800dc48 <MAP_setWallCut+0x3c>
 800dc3e:	2b4d      	cmp	r3, #77	; 0x4d
 800dc40:	f000 821d 	beq.w	800e07e <MAP_setWallCut+0x472>
				bl_wallCut = TRUE;
			}
			break;
			
		default:
			break;
 800dc44:	f000 bc33 	b.w	800e4ae <MAP_setWallCut+0x8a2>
			switch( s_PosDir ){
 800dc48:	4bc1      	ldr	r3, [pc, #772]	; (800df50 <MAP_setWallCut+0x344>)
 800dc4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc4e:	2b06      	cmp	r3, #6
 800dc50:	f200 8204 	bhi.w	800e05c <MAP_setWallCut+0x450>
 800dc54:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <MAP_setWallCut+0x50>)
 800dc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5a:	bf00      	nop
 800dc5c:	0800dc79 	.word	0x0800dc79
 800dc60:	0800e05d 	.word	0x0800e05d
 800dc64:	0800dd6d 	.word	0x0800dd6d
 800dc68:	0800e05d 	.word	0x0800e05d
 800dc6c:	0800de61 	.word	0x0800de61
 800dc70:	0800e05d 	.word	0x0800e05d
 800dc74:	0800df6d 	.word	0x0800df6d
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800dc78:	4bb6      	ldr	r3, [pc, #728]	; (800df54 <MAP_setWallCut+0x348>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7f2 fc8b 	bl	8000598 <__aeabi_f2d>
 800dc82:	f04f 0200 	mov.w	r2, #0
 800dc86:	4bb4      	ldr	r3, [pc, #720]	; (800df58 <MAP_setWallCut+0x34c>)
 800dc88:	f7f2 fb26 	bl	80002d8 <__aeabi_dsub>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4610      	mov	r0, r2
 800dc92:	4619      	mov	r1, r3
 800dc94:	f04f 0200 	mov.w	r2, #0
 800dc98:	f04f 0300 	mov.w	r3, #0
 800dc9c:	f7f2 ff64 	bl	8000b68 <__aeabi_dcmpgt>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d024      	beq.n	800dcf0 <MAP_setWallCut+0xe4>
 800dca6:	4bab      	ldr	r3, [pc, #684]	; (800df54 <MAP_setWallCut+0x348>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f2 fc74 	bl	8000598 <__aeabi_f2d>
 800dcb0:	f04f 0200 	mov.w	r2, #0
 800dcb4:	4ba8      	ldr	r3, [pc, #672]	; (800df58 <MAP_setWallCut+0x34c>)
 800dcb6:	f7f2 fb0f 	bl	80002d8 <__aeabi_dsub>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7f2 ff99 	bl	8000bf8 <__aeabi_d2uiz>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	4618      	mov	r0, r3
 800dccc:	4ba3      	ldr	r3, [pc, #652]	; (800df5c <MAP_setWallCut+0x350>)
 800dcce:	edd3 7a00 	vldr	s15, [r3]
 800dcd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd6:	edc7 7a00 	vstr	s15, [r7]
 800dcda:	783b      	ldrb	r3, [r7, #0]
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	4619      	mov	r1, r3
 800dce0:	4a9f      	ldr	r2, [pc, #636]	; (800df60 <MAP_setWallCut+0x354>)
 800dce2:	0143      	lsls	r3, r0, #5
 800dce4:	4413      	add	r3, r2
 800dce6:	440b      	add	r3, r1
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800dcf0:	4b98      	ldr	r3, [pc, #608]	; (800df54 <MAP_setWallCut+0x348>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7f2 fc4f 	bl	8000598 <__aeabi_f2d>
 800dcfa:	f04f 0200 	mov.w	r2, #0
 800dcfe:	4b99      	ldr	r3, [pc, #612]	; (800df64 <MAP_setWallCut+0x358>)
 800dd00:	f7f2 faea 	bl	80002d8 <__aeabi_dsub>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4610      	mov	r0, r2
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f04f 0200 	mov.w	r2, #0
 800dd10:	f04f 0300 	mov.w	r3, #0
 800dd14:	f7f2 ff28 	bl	8000b68 <__aeabi_dcmpgt>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d100      	bne.n	800dd20 <MAP_setWallCut+0x114>
					break;	
 800dd1e:	e19d      	b.n	800e05c <MAP_setWallCut+0x450>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800dd20:	4b8c      	ldr	r3, [pc, #560]	; (800df54 <MAP_setWallCut+0x348>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7f2 fc37 	bl	8000598 <__aeabi_f2d>
 800dd2a:	f04f 0200 	mov.w	r2, #0
 800dd2e:	4b8d      	ldr	r3, [pc, #564]	; (800df64 <MAP_setWallCut+0x358>)
 800dd30:	f7f2 fad2 	bl	80002d8 <__aeabi_dsub>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4610      	mov	r0, r2
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	f7f2 ff5c 	bl	8000bf8 <__aeabi_d2uiz>
 800dd40:	4603      	mov	r3, r0
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	4618      	mov	r0, r3
 800dd46:	4b85      	ldr	r3, [pc, #532]	; (800df5c <MAP_setWallCut+0x350>)
 800dd48:	edd3 7a00 	vldr	s15, [r3]
 800dd4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd50:	edc7 7a00 	vstr	s15, [r7]
 800dd54:	783b      	ldrb	r3, [r7, #0]
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4a81      	ldr	r2, [pc, #516]	; (800df60 <MAP_setWallCut+0x354>)
 800dd5c:	0143      	lsls	r3, r0, #5
 800dd5e:	4413      	add	r3, r2
 800dd60:	440b      	add	r3, r1
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	f003 0302 	and.w	r3, r3, #2
 800dd68:	73bb      	strb	r3, [r7, #14]
					break;	
 800dd6a:	e177      	b.n	800e05c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800dd6c:	4b7b      	ldr	r3, [pc, #492]	; (800df5c <MAP_setWallCut+0x350>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f2 fc11 	bl	8000598 <__aeabi_f2d>
 800dd76:	f04f 0200 	mov.w	r2, #0
 800dd7a:	4b77      	ldr	r3, [pc, #476]	; (800df58 <MAP_setWallCut+0x34c>)
 800dd7c:	f7f2 faac 	bl	80002d8 <__aeabi_dsub>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4610      	mov	r0, r2
 800dd86:	4619      	mov	r1, r3
 800dd88:	f04f 0200 	mov.w	r2, #0
 800dd8c:	f04f 0300 	mov.w	r3, #0
 800dd90:	f7f2 feea 	bl	8000b68 <__aeabi_dcmpgt>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d024      	beq.n	800dde4 <MAP_setWallCut+0x1d8>
 800dd9a:	4b6e      	ldr	r3, [pc, #440]	; (800df54 <MAP_setWallCut+0x348>)
 800dd9c:	edd3 7a00 	vldr	s15, [r3]
 800dda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dda4:	edc7 7a00 	vstr	s15, [r7]
 800dda8:	783b      	ldrb	r3, [r7, #0]
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	461c      	mov	r4, r3
 800ddae:	4b6b      	ldr	r3, [pc, #428]	; (800df5c <MAP_setWallCut+0x350>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7f2 fbf0 	bl	8000598 <__aeabi_f2d>
 800ddb8:	f04f 0200 	mov.w	r2, #0
 800ddbc:	4b66      	ldr	r3, [pc, #408]	; (800df58 <MAP_setWallCut+0x34c>)
 800ddbe:	f7f2 fa8b 	bl	80002d8 <__aeabi_dsub>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	4619      	mov	r1, r3
 800ddca:	f7f2 ff15 	bl	8000bf8 <__aeabi_d2uiz>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4a62      	ldr	r2, [pc, #392]	; (800df60 <MAP_setWallCut+0x354>)
 800ddd6:	0163      	lsls	r3, r4, #5
 800ddd8:	4413      	add	r3, r2
 800ddda:	440b      	add	r3, r1
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	f003 0304 	and.w	r3, r3, #4
 800dde2:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800dde4:	4b5d      	ldr	r3, [pc, #372]	; (800df5c <MAP_setWallCut+0x350>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7f2 fbd5 	bl	8000598 <__aeabi_f2d>
 800ddee:	f04f 0200 	mov.w	r2, #0
 800ddf2:	4b5c      	ldr	r3, [pc, #368]	; (800df64 <MAP_setWallCut+0x358>)
 800ddf4:	f7f2 fa70 	bl	80002d8 <__aeabi_dsub>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4610      	mov	r0, r2
 800ddfe:	4619      	mov	r1, r3
 800de00:	f04f 0200 	mov.w	r2, #0
 800de04:	f04f 0300 	mov.w	r3, #0
 800de08:	f7f2 feae 	bl	8000b68 <__aeabi_dcmpgt>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d100      	bne.n	800de14 <MAP_setWallCut+0x208>
					break;
 800de12:	e123      	b.n	800e05c <MAP_setWallCut+0x450>
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800de14:	4b4f      	ldr	r3, [pc, #316]	; (800df54 <MAP_setWallCut+0x348>)
 800de16:	edd3 7a00 	vldr	s15, [r3]
 800de1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de1e:	edc7 7a00 	vstr	s15, [r7]
 800de22:	783b      	ldrb	r3, [r7, #0]
 800de24:	b2db      	uxtb	r3, r3
 800de26:	461c      	mov	r4, r3
 800de28:	4b4c      	ldr	r3, [pc, #304]	; (800df5c <MAP_setWallCut+0x350>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7f2 fbb3 	bl	8000598 <__aeabi_f2d>
 800de32:	f04f 0200 	mov.w	r2, #0
 800de36:	4b4b      	ldr	r3, [pc, #300]	; (800df64 <MAP_setWallCut+0x358>)
 800de38:	f7f2 fa4e 	bl	80002d8 <__aeabi_dsub>
 800de3c:	4602      	mov	r2, r0
 800de3e:	460b      	mov	r3, r1
 800de40:	4610      	mov	r0, r2
 800de42:	4619      	mov	r1, r3
 800de44:	f7f2 fed8 	bl	8000bf8 <__aeabi_d2uiz>
 800de48:	4603      	mov	r3, r0
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	4619      	mov	r1, r3
 800de4e:	4a44      	ldr	r2, [pc, #272]	; (800df60 <MAP_setWallCut+0x354>)
 800de50:	0163      	lsls	r3, r4, #5
 800de52:	4413      	add	r3, r2
 800de54:	440b      	add	r3, r1
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	f003 0304 	and.w	r3, r3, #4
 800de5c:	73bb      	strb	r3, [r7, #14]
					break;
 800de5e:	e0fd      	b.n	800e05c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800de60:	4b3c      	ldr	r3, [pc, #240]	; (800df54 <MAP_setWallCut+0x348>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	f7f2 fb97 	bl	8000598 <__aeabi_f2d>
 800de6a:	f04f 0200 	mov.w	r2, #0
 800de6e:	4b3a      	ldr	r3, [pc, #232]	; (800df58 <MAP_setWallCut+0x34c>)
 800de70:	f7f2 fa34 	bl	80002dc <__adddf3>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4610      	mov	r0, r2
 800de7a:	4619      	mov	r1, r3
 800de7c:	f04f 0200 	mov.w	r2, #0
 800de80:	4b39      	ldr	r3, [pc, #228]	; (800df68 <MAP_setWallCut+0x35c>)
 800de82:	f7f2 fe53 	bl	8000b2c <__aeabi_dcmplt>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d024      	beq.n	800ded6 <MAP_setWallCut+0x2ca>
 800de8c:	4b31      	ldr	r3, [pc, #196]	; (800df54 <MAP_setWallCut+0x348>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4618      	mov	r0, r3
 800de92:	f7f2 fb81 	bl	8000598 <__aeabi_f2d>
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	4b2f      	ldr	r3, [pc, #188]	; (800df58 <MAP_setWallCut+0x34c>)
 800de9c:	f7f2 fa1e 	bl	80002dc <__adddf3>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	4610      	mov	r0, r2
 800dea6:	4619      	mov	r1, r3
 800dea8:	f7f2 fea6 	bl	8000bf8 <__aeabi_d2uiz>
 800deac:	4603      	mov	r3, r0
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	4b2a      	ldr	r3, [pc, #168]	; (800df5c <MAP_setWallCut+0x350>)
 800deb4:	edd3 7a00 	vldr	s15, [r3]
 800deb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800debc:	edc7 7a00 	vstr	s15, [r7]
 800dec0:	783b      	ldrb	r3, [r7, #0]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	4619      	mov	r1, r3
 800dec6:	4a26      	ldr	r2, [pc, #152]	; (800df60 <MAP_setWallCut+0x354>)
 800dec8:	0143      	lsls	r3, r0, #5
 800deca:	4413      	add	r3, r2
 800decc:	440b      	add	r3, r1
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 0308 	and.w	r3, r3, #8
 800ded4:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800ded6:	4b1f      	ldr	r3, [pc, #124]	; (800df54 <MAP_setWallCut+0x348>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f2 fb5c 	bl	8000598 <__aeabi_f2d>
 800dee0:	f04f 0200 	mov.w	r2, #0
 800dee4:	4b1f      	ldr	r3, [pc, #124]	; (800df64 <MAP_setWallCut+0x358>)
 800dee6:	f7f2 f9f9 	bl	80002dc <__adddf3>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4610      	mov	r0, r2
 800def0:	4619      	mov	r1, r3
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	4b1c      	ldr	r3, [pc, #112]	; (800df68 <MAP_setWallCut+0x35c>)
 800def8:	f7f2 fe18 	bl	8000b2c <__aeabi_dcmplt>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d100      	bne.n	800df04 <MAP_setWallCut+0x2f8>
					break;
 800df02:	e0ab      	b.n	800e05c <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800df04:	4b13      	ldr	r3, [pc, #76]	; (800df54 <MAP_setWallCut+0x348>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7f2 fb45 	bl	8000598 <__aeabi_f2d>
 800df0e:	f04f 0200 	mov.w	r2, #0
 800df12:	4b14      	ldr	r3, [pc, #80]	; (800df64 <MAP_setWallCut+0x358>)
 800df14:	f7f2 f9e2 	bl	80002dc <__adddf3>
 800df18:	4602      	mov	r2, r0
 800df1a:	460b      	mov	r3, r1
 800df1c:	4610      	mov	r0, r2
 800df1e:	4619      	mov	r1, r3
 800df20:	f7f2 fe6a 	bl	8000bf8 <__aeabi_d2uiz>
 800df24:	4603      	mov	r3, r0
 800df26:	b2db      	uxtb	r3, r3
 800df28:	4618      	mov	r0, r3
 800df2a:	4b0c      	ldr	r3, [pc, #48]	; (800df5c <MAP_setWallCut+0x350>)
 800df2c:	edd3 7a00 	vldr	s15, [r3]
 800df30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df34:	edc7 7a00 	vstr	s15, [r7]
 800df38:	783b      	ldrb	r3, [r7, #0]
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	4619      	mov	r1, r3
 800df3e:	4a08      	ldr	r2, [pc, #32]	; (800df60 <MAP_setWallCut+0x354>)
 800df40:	0143      	lsls	r3, r0, #5
 800df42:	4413      	add	r3, r2
 800df44:	440b      	add	r3, r1
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 0308 	and.w	r3, r3, #8
 800df4c:	73bb      	strb	r3, [r7, #14]
					break;
 800df4e:	e085      	b.n	800e05c <MAP_setWallCut+0x450>
 800df50:	2000c138 	.word	0x2000c138
 800df54:	2000e1f8 	.word	0x2000e1f8
 800df58:	3fe00000 	.word	0x3fe00000
 800df5c:	2000c13c 	.word	0x2000c13c
 800df60:	20000708 	.word	0x20000708
 800df64:	3ff80000 	.word	0x3ff80000
 800df68:	40400000 	.word	0x40400000
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800df6c:	4bb6      	ldr	r3, [pc, #728]	; (800e248 <MAP_setWallCut+0x63c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f7f2 fb11 	bl	8000598 <__aeabi_f2d>
 800df76:	f04f 0200 	mov.w	r2, #0
 800df7a:	4bb4      	ldr	r3, [pc, #720]	; (800e24c <MAP_setWallCut+0x640>)
 800df7c:	f7f2 f9ae 	bl	80002dc <__adddf3>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4610      	mov	r0, r2
 800df86:	4619      	mov	r1, r3
 800df88:	f04f 0200 	mov.w	r2, #0
 800df8c:	4bb0      	ldr	r3, [pc, #704]	; (800e250 <MAP_setWallCut+0x644>)
 800df8e:	f7f2 fdcd 	bl	8000b2c <__aeabi_dcmplt>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d024      	beq.n	800dfe2 <MAP_setWallCut+0x3d6>
 800df98:	4bae      	ldr	r3, [pc, #696]	; (800e254 <MAP_setWallCut+0x648>)
 800df9a:	edd3 7a00 	vldr	s15, [r3]
 800df9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfa2:	edc7 7a00 	vstr	s15, [r7]
 800dfa6:	783b      	ldrb	r3, [r7, #0]
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	461c      	mov	r4, r3
 800dfac:	4ba6      	ldr	r3, [pc, #664]	; (800e248 <MAP_setWallCut+0x63c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f2 faf1 	bl	8000598 <__aeabi_f2d>
 800dfb6:	f04f 0200 	mov.w	r2, #0
 800dfba:	4ba4      	ldr	r3, [pc, #656]	; (800e24c <MAP_setWallCut+0x640>)
 800dfbc:	f7f2 f98e 	bl	80002dc <__adddf3>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	f7f2 fe16 	bl	8000bf8 <__aeabi_d2uiz>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4aa1      	ldr	r2, [pc, #644]	; (800e258 <MAP_setWallCut+0x64c>)
 800dfd4:	0163      	lsls	r3, r4, #5
 800dfd6:	4413      	add	r3, r2
 800dfd8:	440b      	add	r3, r1
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0301 	and.w	r3, r3, #1
 800dfe0:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800dfe2:	4b99      	ldr	r3, [pc, #612]	; (800e248 <MAP_setWallCut+0x63c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f2 fad6 	bl	8000598 <__aeabi_f2d>
 800dfec:	f04f 0200 	mov.w	r2, #0
 800dff0:	4b9a      	ldr	r3, [pc, #616]	; (800e25c <MAP_setWallCut+0x650>)
 800dff2:	f7f2 f973 	bl	80002dc <__adddf3>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4610      	mov	r0, r2
 800dffc:	4619      	mov	r1, r3
 800dffe:	f04f 0200 	mov.w	r2, #0
 800e002:	4b93      	ldr	r3, [pc, #588]	; (800e250 <MAP_setWallCut+0x644>)
 800e004:	f7f2 fd92 	bl	8000b2c <__aeabi_dcmplt>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d100      	bne.n	800e010 <MAP_setWallCut+0x404>
					break;
 800e00e:	e024      	b.n	800e05a <MAP_setWallCut+0x44e>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800e010:	4b90      	ldr	r3, [pc, #576]	; (800e254 <MAP_setWallCut+0x648>)
 800e012:	edd3 7a00 	vldr	s15, [r3]
 800e016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e01a:	edc7 7a00 	vstr	s15, [r7]
 800e01e:	783b      	ldrb	r3, [r7, #0]
 800e020:	b2db      	uxtb	r3, r3
 800e022:	461c      	mov	r4, r3
 800e024:	4b88      	ldr	r3, [pc, #544]	; (800e248 <MAP_setWallCut+0x63c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f2 fab5 	bl	8000598 <__aeabi_f2d>
 800e02e:	f04f 0200 	mov.w	r2, #0
 800e032:	4b8a      	ldr	r3, [pc, #552]	; (800e25c <MAP_setWallCut+0x650>)
 800e034:	f7f2 f952 	bl	80002dc <__adddf3>
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	4610      	mov	r0, r2
 800e03e:	4619      	mov	r1, r3
 800e040:	f7f2 fdda 	bl	8000bf8 <__aeabi_d2uiz>
 800e044:	4603      	mov	r3, r0
 800e046:	b2db      	uxtb	r3, r3
 800e048:	4619      	mov	r1, r3
 800e04a:	4a83      	ldr	r2, [pc, #524]	; (800e258 <MAP_setWallCut+0x64c>)
 800e04c:	0163      	lsls	r3, r4, #5
 800e04e:	4413      	add	r3, r2
 800e050:	440b      	add	r3, r1
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	73bb      	strb	r3, [r7, #14]
					break;
 800e05a:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d107      	bne.n	800e072 <MAP_setWallCut+0x466>
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 8224 	beq.w	800e4b2 <MAP_setWallCut+0x8a6>
 800e06a:	7bbb      	ldrb	r3, [r7, #14]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 8220 	beq.w	800e4b2 <MAP_setWallCut+0x8a6>
				MOT_setWallEdgeType( MOT_WALL_EDGE_RIGHT );		// 壁切れ補正を実施する
 800e072:	2001      	movs	r0, #1
 800e074:	f7fe fd6a 	bl	800cb4c <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	737b      	strb	r3, [r7, #13]
			break;
 800e07c:	e219      	b.n	800e4b2 <MAP_setWallCut+0x8a6>
			switch( s_PosDir ){
 800e07e:	4b78      	ldr	r3, [pc, #480]	; (800e260 <MAP_setWallCut+0x654>)
 800e080:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e084:	2b06      	cmp	r3, #6
 800e086:	f200 8203 	bhi.w	800e490 <MAP_setWallCut+0x884>
 800e08a:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <MAP_setWallCut+0x484>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0ad 	.word	0x0800e0ad
 800e094:	0800e491 	.word	0x0800e491
 800e098:	0800e1a1 	.word	0x0800e1a1
 800e09c:	0800e491 	.word	0x0800e491
 800e0a0:	0800e2b1 	.word	0x0800e2b1
 800e0a4:	0800e491 	.word	0x0800e491
 800e0a8:	0800e3a1 	.word	0x0800e3a1
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800e0ac:	4b69      	ldr	r3, [pc, #420]	; (800e254 <MAP_setWallCut+0x648>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f2 fa71 	bl	8000598 <__aeabi_f2d>
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	4b64      	ldr	r3, [pc, #400]	; (800e24c <MAP_setWallCut+0x640>)
 800e0bc:	f7f2 f90c 	bl	80002d8 <__aeabi_dsub>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	f04f 0200 	mov.w	r2, #0
 800e0cc:	f04f 0300 	mov.w	r3, #0
 800e0d0:	f7f2 fd4a 	bl	8000b68 <__aeabi_dcmpgt>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d024      	beq.n	800e124 <MAP_setWallCut+0x518>
 800e0da:	4b5e      	ldr	r3, [pc, #376]	; (800e254 <MAP_setWallCut+0x648>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7f2 fa5a 	bl	8000598 <__aeabi_f2d>
 800e0e4:	f04f 0200 	mov.w	r2, #0
 800e0e8:	4b58      	ldr	r3, [pc, #352]	; (800e24c <MAP_setWallCut+0x640>)
 800e0ea:	f7f2 f8f5 	bl	80002d8 <__aeabi_dsub>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	f7f2 fd7f 	bl	8000bf8 <__aeabi_d2uiz>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4618      	mov	r0, r3
 800e100:	4b51      	ldr	r3, [pc, #324]	; (800e248 <MAP_setWallCut+0x63c>)
 800e102:	edd3 7a00 	vldr	s15, [r3]
 800e106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e10a:	edc7 7a00 	vstr	s15, [r7]
 800e10e:	783b      	ldrb	r3, [r7, #0]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	4619      	mov	r1, r3
 800e114:	4a50      	ldr	r2, [pc, #320]	; (800e258 <MAP_setWallCut+0x64c>)
 800e116:	0143      	lsls	r3, r0, #5
 800e118:	4413      	add	r3, r2
 800e11a:	440b      	add	r3, r1
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f003 0308 	and.w	r3, r3, #8
 800e122:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800e124:	4b4b      	ldr	r3, [pc, #300]	; (800e254 <MAP_setWallCut+0x648>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f2 fa35 	bl	8000598 <__aeabi_f2d>
 800e12e:	f04f 0200 	mov.w	r2, #0
 800e132:	4b4a      	ldr	r3, [pc, #296]	; (800e25c <MAP_setWallCut+0x650>)
 800e134:	f7f2 f8d0 	bl	80002d8 <__aeabi_dsub>
 800e138:	4602      	mov	r2, r0
 800e13a:	460b      	mov	r3, r1
 800e13c:	4610      	mov	r0, r2
 800e13e:	4619      	mov	r1, r3
 800e140:	f04f 0200 	mov.w	r2, #0
 800e144:	f04f 0300 	mov.w	r3, #0
 800e148:	f7f2 fd0e 	bl	8000b68 <__aeabi_dcmpgt>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d100      	bne.n	800e154 <MAP_setWallCut+0x548>
					break;
 800e152:	e19d      	b.n	800e490 <MAP_setWallCut+0x884>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800e154:	4b3f      	ldr	r3, [pc, #252]	; (800e254 <MAP_setWallCut+0x648>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f2 fa1d 	bl	8000598 <__aeabi_f2d>
 800e15e:	f04f 0200 	mov.w	r2, #0
 800e162:	4b3e      	ldr	r3, [pc, #248]	; (800e25c <MAP_setWallCut+0x650>)
 800e164:	f7f2 f8b8 	bl	80002d8 <__aeabi_dsub>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	4610      	mov	r0, r2
 800e16e:	4619      	mov	r1, r3
 800e170:	f7f2 fd42 	bl	8000bf8 <__aeabi_d2uiz>
 800e174:	4603      	mov	r3, r0
 800e176:	b2db      	uxtb	r3, r3
 800e178:	4618      	mov	r0, r3
 800e17a:	4b33      	ldr	r3, [pc, #204]	; (800e248 <MAP_setWallCut+0x63c>)
 800e17c:	edd3 7a00 	vldr	s15, [r3]
 800e180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e184:	edc7 7a00 	vstr	s15, [r7]
 800e188:	783b      	ldrb	r3, [r7, #0]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	4619      	mov	r1, r3
 800e18e:	4a32      	ldr	r2, [pc, #200]	; (800e258 <MAP_setWallCut+0x64c>)
 800e190:	0143      	lsls	r3, r0, #5
 800e192:	4413      	add	r3, r2
 800e194:	440b      	add	r3, r1
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0308 	and.w	r3, r3, #8
 800e19c:	73bb      	strb	r3, [r7, #14]
					break;
 800e19e:	e177      	b.n	800e490 <MAP_setWallCut+0x884>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800e1a0:	4b29      	ldr	r3, [pc, #164]	; (800e248 <MAP_setWallCut+0x63c>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7f2 f9f7 	bl	8000598 <__aeabi_f2d>
 800e1aa:	f04f 0200 	mov.w	r2, #0
 800e1ae:	4b27      	ldr	r3, [pc, #156]	; (800e24c <MAP_setWallCut+0x640>)
 800e1b0:	f7f2 f892 	bl	80002d8 <__aeabi_dsub>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	f04f 0300 	mov.w	r3, #0
 800e1c4:	f7f2 fcd0 	bl	8000b68 <__aeabi_dcmpgt>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d024      	beq.n	800e218 <MAP_setWallCut+0x60c>
 800e1ce:	4b21      	ldr	r3, [pc, #132]	; (800e254 <MAP_setWallCut+0x648>)
 800e1d0:	edd3 7a00 	vldr	s15, [r3]
 800e1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1d8:	edc7 7a00 	vstr	s15, [r7]
 800e1dc:	783b      	ldrb	r3, [r7, #0]
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	461c      	mov	r4, r3
 800e1e2:	4b19      	ldr	r3, [pc, #100]	; (800e248 <MAP_setWallCut+0x63c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7f2 f9d6 	bl	8000598 <__aeabi_f2d>
 800e1ec:	f04f 0200 	mov.w	r2, #0
 800e1f0:	4b16      	ldr	r3, [pc, #88]	; (800e24c <MAP_setWallCut+0x640>)
 800e1f2:	f7f2 f871 	bl	80002d8 <__aeabi_dsub>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f7f2 fcfb 	bl	8000bf8 <__aeabi_d2uiz>
 800e202:	4603      	mov	r3, r0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	4619      	mov	r1, r3
 800e208:	4a13      	ldr	r2, [pc, #76]	; (800e258 <MAP_setWallCut+0x64c>)
 800e20a:	0163      	lsls	r3, r4, #5
 800e20c:	4413      	add	r3, r2
 800e20e:	440b      	add	r3, r1
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800e218:	4b0b      	ldr	r3, [pc, #44]	; (800e248 <MAP_setWallCut+0x63c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f2 f9bb 	bl	8000598 <__aeabi_f2d>
 800e222:	f04f 0200 	mov.w	r2, #0
 800e226:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <MAP_setWallCut+0x650>)
 800e228:	f7f2 f856 	bl	80002d8 <__aeabi_dsub>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	4610      	mov	r0, r2
 800e232:	4619      	mov	r1, r3
 800e234:	f04f 0200 	mov.w	r2, #0
 800e238:	f04f 0300 	mov.w	r3, #0
 800e23c:	f7f2 fc94 	bl	8000b68 <__aeabi_dcmpgt>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10e      	bne.n	800e264 <MAP_setWallCut+0x658>
					break;
 800e246:	e123      	b.n	800e490 <MAP_setWallCut+0x884>
 800e248:	2000c13c 	.word	0x2000c13c
 800e24c:	3fe00000 	.word	0x3fe00000
 800e250:	40400000 	.word	0x40400000
 800e254:	2000e1f8 	.word	0x2000e1f8
 800e258:	20000708 	.word	0x20000708
 800e25c:	3ff80000 	.word	0x3ff80000
 800e260:	2000c138 	.word	0x2000c138
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800e264:	4b97      	ldr	r3, [pc, #604]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e266:	edd3 7a00 	vldr	s15, [r3]
 800e26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e26e:	edc7 7a00 	vstr	s15, [r7]
 800e272:	783b      	ldrb	r3, [r7, #0]
 800e274:	b2db      	uxtb	r3, r3
 800e276:	461c      	mov	r4, r3
 800e278:	4b93      	ldr	r3, [pc, #588]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f2 f98b 	bl	8000598 <__aeabi_f2d>
 800e282:	f04f 0200 	mov.w	r2, #0
 800e286:	4b91      	ldr	r3, [pc, #580]	; (800e4cc <MAP_setWallCut+0x8c0>)
 800e288:	f7f2 f826 	bl	80002d8 <__aeabi_dsub>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4610      	mov	r0, r2
 800e292:	4619      	mov	r1, r3
 800e294:	f7f2 fcb0 	bl	8000bf8 <__aeabi_d2uiz>
 800e298:	4603      	mov	r3, r0
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	4619      	mov	r1, r3
 800e29e:	4a8c      	ldr	r2, [pc, #560]	; (800e4d0 <MAP_setWallCut+0x8c4>)
 800e2a0:	0163      	lsls	r3, r4, #5
 800e2a2:	4413      	add	r3, r2
 800e2a4:	440b      	add	r3, r1
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	73bb      	strb	r3, [r7, #14]
					break;
 800e2ae:	e0ef      	b.n	800e490 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800e2b0:	4b84      	ldr	r3, [pc, #528]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7f2 f96f 	bl	8000598 <__aeabi_f2d>
 800e2ba:	f04f 0200 	mov.w	r2, #0
 800e2be:	4b85      	ldr	r3, [pc, #532]	; (800e4d4 <MAP_setWallCut+0x8c8>)
 800e2c0:	f7f2 f80c 	bl	80002dc <__adddf3>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f04f 0200 	mov.w	r2, #0
 800e2d0:	4b81      	ldr	r3, [pc, #516]	; (800e4d8 <MAP_setWallCut+0x8cc>)
 800e2d2:	f7f2 fc2b 	bl	8000b2c <__aeabi_dcmplt>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d024      	beq.n	800e326 <MAP_setWallCut+0x71a>
 800e2dc:	4b79      	ldr	r3, [pc, #484]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f2 f959 	bl	8000598 <__aeabi_f2d>
 800e2e6:	f04f 0200 	mov.w	r2, #0
 800e2ea:	4b7a      	ldr	r3, [pc, #488]	; (800e4d4 <MAP_setWallCut+0x8c8>)
 800e2ec:	f7f1 fff6 	bl	80002dc <__adddf3>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f7f2 fc7e 	bl	8000bf8 <__aeabi_d2uiz>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	4618      	mov	r0, r3
 800e302:	4b71      	ldr	r3, [pc, #452]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e304:	edd3 7a00 	vldr	s15, [r3]
 800e308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e30c:	edc7 7a00 	vstr	s15, [r7]
 800e310:	783b      	ldrb	r3, [r7, #0]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	4a6e      	ldr	r2, [pc, #440]	; (800e4d0 <MAP_setWallCut+0x8c4>)
 800e318:	0143      	lsls	r3, r0, #5
 800e31a:	4413      	add	r3, r2
 800e31c:	440b      	add	r3, r1
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	f003 0302 	and.w	r3, r3, #2
 800e324:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800e326:	4b67      	ldr	r3, [pc, #412]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f2 f934 	bl	8000598 <__aeabi_f2d>
 800e330:	f04f 0200 	mov.w	r2, #0
 800e334:	4b65      	ldr	r3, [pc, #404]	; (800e4cc <MAP_setWallCut+0x8c0>)
 800e336:	f7f1 ffd1 	bl	80002dc <__adddf3>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4610      	mov	r0, r2
 800e340:	4619      	mov	r1, r3
 800e342:	f04f 0200 	mov.w	r2, #0
 800e346:	4b64      	ldr	r3, [pc, #400]	; (800e4d8 <MAP_setWallCut+0x8cc>)
 800e348:	f7f2 fbf0 	bl	8000b2c <__aeabi_dcmplt>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d100      	bne.n	800e354 <MAP_setWallCut+0x748>
					break;
 800e352:	e09d      	b.n	800e490 <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800e354:	4b5b      	ldr	r3, [pc, #364]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4618      	mov	r0, r3
 800e35a:	f7f2 f91d 	bl	8000598 <__aeabi_f2d>
 800e35e:	f04f 0200 	mov.w	r2, #0
 800e362:	4b5a      	ldr	r3, [pc, #360]	; (800e4cc <MAP_setWallCut+0x8c0>)
 800e364:	f7f1 ffba 	bl	80002dc <__adddf3>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	4610      	mov	r0, r2
 800e36e:	4619      	mov	r1, r3
 800e370:	f7f2 fc42 	bl	8000bf8 <__aeabi_d2uiz>
 800e374:	4603      	mov	r3, r0
 800e376:	b2db      	uxtb	r3, r3
 800e378:	4618      	mov	r0, r3
 800e37a:	4b53      	ldr	r3, [pc, #332]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e37c:	edd3 7a00 	vldr	s15, [r3]
 800e380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e384:	edc7 7a00 	vstr	s15, [r7]
 800e388:	783b      	ldrb	r3, [r7, #0]
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	4619      	mov	r1, r3
 800e38e:	4a50      	ldr	r2, [pc, #320]	; (800e4d0 <MAP_setWallCut+0x8c4>)
 800e390:	0143      	lsls	r3, r0, #5
 800e392:	4413      	add	r3, r2
 800e394:	440b      	add	r3, r1
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 0302 	and.w	r3, r3, #2
 800e39c:	73bb      	strb	r3, [r7, #14]
					break;
 800e39e:	e077      	b.n	800e490 <MAP_setWallCut+0x884>
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800e3a0:	4b49      	ldr	r3, [pc, #292]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f2 f8f7 	bl	8000598 <__aeabi_f2d>
 800e3aa:	f04f 0200 	mov.w	r2, #0
 800e3ae:	4b49      	ldr	r3, [pc, #292]	; (800e4d4 <MAP_setWallCut+0x8c8>)
 800e3b0:	f7f1 ff94 	bl	80002dc <__adddf3>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	f04f 0200 	mov.w	r2, #0
 800e3c0:	4b45      	ldr	r3, [pc, #276]	; (800e4d8 <MAP_setWallCut+0x8cc>)
 800e3c2:	f7f2 fbb3 	bl	8000b2c <__aeabi_dcmplt>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d024      	beq.n	800e416 <MAP_setWallCut+0x80a>
 800e3cc:	4b3d      	ldr	r3, [pc, #244]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e3ce:	edd3 7a00 	vldr	s15, [r3]
 800e3d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3d6:	edc7 7a00 	vstr	s15, [r7]
 800e3da:	783b      	ldrb	r3, [r7, #0]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	461c      	mov	r4, r3
 800e3e0:	4b39      	ldr	r3, [pc, #228]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7f2 f8d7 	bl	8000598 <__aeabi_f2d>
 800e3ea:	f04f 0200 	mov.w	r2, #0
 800e3ee:	4b39      	ldr	r3, [pc, #228]	; (800e4d4 <MAP_setWallCut+0x8c8>)
 800e3f0:	f7f1 ff74 	bl	80002dc <__adddf3>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	f7f2 fbfc 	bl	8000bf8 <__aeabi_d2uiz>
 800e400:	4603      	mov	r3, r0
 800e402:	b2db      	uxtb	r3, r3
 800e404:	4619      	mov	r1, r3
 800e406:	4a32      	ldr	r2, [pc, #200]	; (800e4d0 <MAP_setWallCut+0x8c4>)
 800e408:	0163      	lsls	r3, r4, #5
 800e40a:	4413      	add	r3, r2
 800e40c:	440b      	add	r3, r1
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800e416:	4b2c      	ldr	r3, [pc, #176]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f2 f8bc 	bl	8000598 <__aeabi_f2d>
 800e420:	f04f 0200 	mov.w	r2, #0
 800e424:	4b29      	ldr	r3, [pc, #164]	; (800e4cc <MAP_setWallCut+0x8c0>)
 800e426:	f7f1 ff59 	bl	80002dc <__adddf3>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4610      	mov	r0, r2
 800e430:	4619      	mov	r1, r3
 800e432:	f04f 0200 	mov.w	r2, #0
 800e436:	4b28      	ldr	r3, [pc, #160]	; (800e4d8 <MAP_setWallCut+0x8cc>)
 800e438:	f7f2 fb78 	bl	8000b2c <__aeabi_dcmplt>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d100      	bne.n	800e444 <MAP_setWallCut+0x838>
					break;
 800e442:	e024      	b.n	800e48e <MAP_setWallCut+0x882>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800e444:	4b1f      	ldr	r3, [pc, #124]	; (800e4c4 <MAP_setWallCut+0x8b8>)
 800e446:	edd3 7a00 	vldr	s15, [r3]
 800e44a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e44e:	edc7 7a00 	vstr	s15, [r7]
 800e452:	783b      	ldrb	r3, [r7, #0]
 800e454:	b2db      	uxtb	r3, r3
 800e456:	461c      	mov	r4, r3
 800e458:	4b1b      	ldr	r3, [pc, #108]	; (800e4c8 <MAP_setWallCut+0x8bc>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f2 f89b 	bl	8000598 <__aeabi_f2d>
 800e462:	f04f 0200 	mov.w	r2, #0
 800e466:	4b19      	ldr	r3, [pc, #100]	; (800e4cc <MAP_setWallCut+0x8c0>)
 800e468:	f7f1 ff38 	bl	80002dc <__adddf3>
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	4610      	mov	r0, r2
 800e472:	4619      	mov	r1, r3
 800e474:	f7f2 fbc0 	bl	8000bf8 <__aeabi_d2uiz>
 800e478:	4603      	mov	r3, r0
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	4619      	mov	r1, r3
 800e47e:	4a14      	ldr	r2, [pc, #80]	; (800e4d0 <MAP_setWallCut+0x8c4>)
 800e480:	0163      	lsls	r3, r4, #5
 800e482:	4413      	add	r3, r2
 800e484:	440b      	add	r3, r1
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	73bb      	strb	r3, [r7, #14]
					break;
 800e48e:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d105      	bne.n	800e4a2 <MAP_setWallCut+0x896>
 800e496:	7bfb      	ldrb	r3, [r7, #15]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00c      	beq.n	800e4b6 <MAP_setWallCut+0x8aa>
 800e49c:	7bbb      	ldrb	r3, [r7, #14]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d009      	beq.n	800e4b6 <MAP_setWallCut+0x8aa>
				MOT_setWallEdgeType( MOT_WALL_EDGE_LEFT );		// 壁切れ補正を実施する
 800e4a2:	2002      	movs	r0, #2
 800e4a4:	f7fe fb52 	bl	800cb4c <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	737b      	strb	r3, [r7, #13]
			break;
 800e4ac:	e003      	b.n	800e4b6 <MAP_setWallCut+0x8aa>
			break;
 800e4ae:	bf00      	nop
 800e4b0:	e002      	b.n	800e4b8 <MAP_setWallCut+0x8ac>
			break;
 800e4b2:	bf00      	nop
 800e4b4:	e000      	b.n	800e4b8 <MAP_setWallCut+0x8ac>
			break;
 800e4b6:	bf00      	nop
	}
	
	return bl_wallCut;
 800e4b8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd90      	pop	{r4, r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	2000e1f8 	.word	0x2000e1f8
 800e4c8:	2000c13c 	.word	0x2000c13c
 800e4cc:	3ff80000 	.word	0x3ff80000
 800e4d0:	20000708 	.word	0x20000708
 800e4d4:	3fe00000 	.word	0x3fe00000
 800e4d8:	40400000 	.word	0x40400000

0800e4dc <MAP_setCmdPos>:

void MAP_setCmdPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	71fb      	strb	r3, [r7, #7]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	71bb      	strb	r3, [r7, #6]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	717b      	strb	r3, [r7, #5]
	f_PosX   = (float)uc_x;
 800e4ee:	79fb      	ldrb	r3, [r7, #7]
 800e4f0:	ee07 3a90 	vmov	s15, r3
 800e4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4f8:	4b0b      	ldr	r3, [pc, #44]	; (800e528 <MAP_setCmdPos+0x4c>)
 800e4fa:	edc3 7a00 	vstr	s15, [r3]
	f_PosX   = (float)uc_y;
 800e4fe:	79bb      	ldrb	r3, [r7, #6]
 800e500:	ee07 3a90 	vmov	s15, r3
 800e504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e508:	4b07      	ldr	r3, [pc, #28]	; (800e528 <MAP_setCmdPos+0x4c>)
 800e50a:	edc3 7a00 	vstr	s15, [r3]
	s_PosDir = (int16_t)(en_dir * 2);	// 進行方向（[0]北 [1]北東 [2]東 [3]南東 [4]南 [5]南西 [6]西 [7]北西 ）、2倍すると丁度値が合致する
 800e50e:	797b      	ldrb	r3, [r7, #5]
 800e510:	b29b      	uxth	r3, r3
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	b29b      	uxth	r3, r3
 800e516:	b21a      	sxth	r2, r3
 800e518:	4b04      	ldr	r3, [pc, #16]	; (800e52c <MAP_setCmdPos+0x50>)
 800e51a:	801a      	strh	r2, [r3, #0]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	2000c13c 	.word	0x2000c13c
 800e52c:	2000c138 	.word	0x2000c138

0800e530 <MAP_showCmdLog>:

void MAP_showCmdLog( void )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800e536:	2300      	movs	r3, #0
 800e538:	80fb      	strh	r3, [r7, #6]
	
	/* 超信地旋回コマンド */
	while(1){
		
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800e53a:	88f9      	ldrh	r1, [r7, #6]
 800e53c:	88fb      	ldrh	r3, [r7, #6]
 800e53e:	4a1e      	ldr	r2, [pc, #120]	; (800e5b8 <MAP_showCmdLog+0x88>)
 800e540:	5cd3      	ldrb	r3, [r2, r3]
 800e542:	461a      	mov	r2, r3
 800e544:	481d      	ldr	r0, [pc, #116]	; (800e5bc <MAP_showCmdLog+0x8c>)
 800e546:	f008 f8f5 	bl	8016734 <iprintf>
		if( dcom[i] == CEND ) break;
 800e54a:	88fb      	ldrh	r3, [r7, #6]
 800e54c:	4a1a      	ldr	r2, [pc, #104]	; (800e5b8 <MAP_showCmdLog+0x88>)
 800e54e:	5cd3      	ldrb	r3, [r2, r3]
 800e550:	2bfa      	cmp	r3, #250	; 0xfa
 800e552:	d003      	beq.n	800e55c <MAP_showCmdLog+0x2c>
		i++;
 800e554:	88fb      	ldrh	r3, [r7, #6]
 800e556:	3301      	adds	r3, #1
 800e558:	80fb      	strh	r3, [r7, #6]
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800e55a:	e7ee      	b.n	800e53a <MAP_showCmdLog+0xa>
		if( dcom[i] == CEND ) break;
 800e55c:	bf00      	nop
	}
	i=0;
 800e55e:	2300      	movs	r3, #0
 800e560:	80fb      	strh	r3, [r7, #6]
	
	/* スラロームコマンド */
	while(1){
		
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800e562:	88f9      	ldrh	r1, [r7, #6]
 800e564:	88fb      	ldrh	r3, [r7, #6]
 800e566:	4a16      	ldr	r2, [pc, #88]	; (800e5c0 <MAP_showCmdLog+0x90>)
 800e568:	5cd3      	ldrb	r3, [r2, r3]
 800e56a:	461a      	mov	r2, r3
 800e56c:	4815      	ldr	r0, [pc, #84]	; (800e5c4 <MAP_showCmdLog+0x94>)
 800e56e:	f008 f8e1 	bl	8016734 <iprintf>
		if( scom[i] == CEND ) break;
 800e572:	88fb      	ldrh	r3, [r7, #6]
 800e574:	4a12      	ldr	r2, [pc, #72]	; (800e5c0 <MAP_showCmdLog+0x90>)
 800e576:	5cd3      	ldrb	r3, [r2, r3]
 800e578:	2bfa      	cmp	r3, #250	; 0xfa
 800e57a:	d003      	beq.n	800e584 <MAP_showCmdLog+0x54>
		i++;
 800e57c:	88fb      	ldrh	r3, [r7, #6]
 800e57e:	3301      	adds	r3, #1
 800e580:	80fb      	strh	r3, [r7, #6]
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800e582:	e7ee      	b.n	800e562 <MAP_showCmdLog+0x32>
		if( scom[i] == CEND ) break;
 800e584:	bf00      	nop
	}
	i=0;
 800e586:	2300      	movs	r3, #0
 800e588:	80fb      	strh	r3, [r7, #6]

	/* 斜め走行コマンド */
	while(1){
		
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800e58a:	88f9      	ldrh	r1, [r7, #6]
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	4a0e      	ldr	r2, [pc, #56]	; (800e5c8 <MAP_showCmdLog+0x98>)
 800e590:	5cd3      	ldrb	r3, [r2, r3]
 800e592:	461a      	mov	r2, r3
 800e594:	480d      	ldr	r0, [pc, #52]	; (800e5cc <MAP_showCmdLog+0x9c>)
 800e596:	f008 f8cd 	bl	8016734 <iprintf>
		if( tcom[i] == CEND ) break;
 800e59a:	88fb      	ldrh	r3, [r7, #6]
 800e59c:	4a0a      	ldr	r2, [pc, #40]	; (800e5c8 <MAP_showCmdLog+0x98>)
 800e59e:	5cd3      	ldrb	r3, [r2, r3]
 800e5a0:	2bfa      	cmp	r3, #250	; 0xfa
 800e5a2:	d003      	beq.n	800e5ac <MAP_showCmdLog+0x7c>
		i++;
 800e5a4:	88fb      	ldrh	r3, [r7, #6]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	80fb      	strh	r3, [r7, #6]
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800e5aa:	e7ee      	b.n	800e58a <MAP_showCmdLog+0x5a>
		if( tcom[i] == CEND ) break;
 800e5ac:	bf00      	nop
	}
}
 800e5ae:	bf00      	nop
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	2000b138 	.word	0x2000b138
 800e5bc:	0801bc9c 	.word	0x0801bc9c
 800e5c0:	2000c140 	.word	0x2000c140
 800e5c4:	0801bcb4 	.word	0x0801bcb4
 800e5c8:	2000d17c 	.word	0x2000d17c
 800e5cc:	0801bccc 	.word	0x0801bccc

0800e5d0 <MAP_makeCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
){
 800e5d0:	b490      	push	{r4, r7}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	4608      	mov	r0, r1
 800e5da:	4611      	mov	r1, r2
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4623      	mov	r3, r4
 800e5e0:	71fb      	strb	r3, [r7, #7]
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	71bb      	strb	r3, [r7, #6]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	717b      	strb	r3, [r7, #5]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop
	
	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while(1){	
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800e5f6:	79ba      	ldrb	r2, [r7, #6]
 800e5f8:	79fb      	ldrb	r3, [r7, #7]
 800e5fa:	499f      	ldr	r1, [pc, #636]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e5fc:	0152      	lsls	r2, r2, #5
 800e5fe:	4413      	add	r3, r2
 800e600:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e604:	3b01      	subs	r3, #1
 800e606:	823b      	strh	r3, [r7, #16]
		if (en_staDir == NORTH){
 800e608:	797b      	ldrb	r3, [r7, #5]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d164      	bne.n	800e6d8 <MAP_makeCmdList+0x108>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800e60e:	79ba      	ldrb	r2, [r7, #6]
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	499a      	ldr	r1, [pc, #616]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e614:	0152      	lsls	r2, r2, #5
 800e616:	440a      	add	r2, r1
 800e618:	4413      	add	r3, r2
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	f003 0311 	and.w	r3, r3, #17
 800e620:	2b10      	cmp	r3, #16
 800e622:	d10d      	bne.n	800e640 <MAP_makeCmdList+0x70>
 800e624:	79bb      	ldrb	r3, [r7, #6]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	4993      	ldr	r1, [pc, #588]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e62c:	0152      	lsls	r2, r2, #5
 800e62e:	4413      	add	r3, r2
 800e630:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e634:	8a3a      	ldrh	r2, [r7, #16]
 800e636:	429a      	cmp	r2, r3
 800e638:	d102      	bne.n	800e640 <MAP_makeCmdList+0x70>
 800e63a:	2300      	movs	r3, #0
 800e63c:	74fb      	strb	r3, [r7, #19]
 800e63e:	e187      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800e640:	79ba      	ldrb	r2, [r7, #6]
 800e642:	79fb      	ldrb	r3, [r7, #7]
 800e644:	498d      	ldr	r1, [pc, #564]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e646:	0152      	lsls	r2, r2, #5
 800e648:	440a      	add	r2, r1
 800e64a:	4413      	add	r3, r2
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e652:	2b20      	cmp	r3, #32
 800e654:	d10d      	bne.n	800e672 <MAP_makeCmdList+0xa2>
 800e656:	79ba      	ldrb	r2, [r7, #6]
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	3301      	adds	r3, #1
 800e65c:	4986      	ldr	r1, [pc, #536]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e65e:	0152      	lsls	r2, r2, #5
 800e660:	4413      	add	r3, r2
 800e662:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e666:	8a3a      	ldrh	r2, [r7, #16]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d102      	bne.n	800e672 <MAP_makeCmdList+0xa2>
 800e66c:	2301      	movs	r3, #1
 800e66e:	74fb      	strb	r3, [r7, #19]
 800e670:	e16e      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800e672:	79ba      	ldrb	r2, [r7, #6]
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	4981      	ldr	r1, [pc, #516]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e678:	0152      	lsls	r2, r2, #5
 800e67a:	440a      	add	r2, r1
 800e67c:	4413      	add	r3, r2
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e684:	2b80      	cmp	r3, #128	; 0x80
 800e686:	d10d      	bne.n	800e6a4 <MAP_makeCmdList+0xd4>
 800e688:	79ba      	ldrb	r2, [r7, #6]
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	497a      	ldr	r1, [pc, #488]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e690:	0152      	lsls	r2, r2, #5
 800e692:	4413      	add	r3, r2
 800e694:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e698:	8a3a      	ldrh	r2, [r7, #16]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d102      	bne.n	800e6a4 <MAP_makeCmdList+0xd4>
 800e69e:	2303      	movs	r3, #3
 800e6a0:	74fb      	strb	r3, [r7, #19]
 800e6a2:	e155      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800e6a4:	79ba      	ldrb	r2, [r7, #6]
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	4974      	ldr	r1, [pc, #464]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e6aa:	0152      	lsls	r2, r2, #5
 800e6ac:	440a      	add	r2, r1
 800e6ae:	4413      	add	r3, r2
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e6b6:	2b40      	cmp	r3, #64	; 0x40
 800e6b8:	d10d      	bne.n	800e6d6 <MAP_makeCmdList+0x106>
 800e6ba:	79bb      	ldrb	r3, [r7, #6]
 800e6bc:	1e5a      	subs	r2, r3, #1
 800e6be:	79fb      	ldrb	r3, [r7, #7]
 800e6c0:	496d      	ldr	r1, [pc, #436]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e6c2:	0152      	lsls	r2, r2, #5
 800e6c4:	4413      	add	r3, r2
 800e6c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6ca:	8a3a      	ldrh	r2, [r7, #16]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d102      	bne.n	800e6d6 <MAP_makeCmdList+0x106>
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	74fb      	strb	r3, [r7, #19]
 800e6d4:	e13c      	b.n	800e950 <MAP_makeCmdList+0x380>
			else   while(1);
 800e6d6:	e7fe      	b.n	800e6d6 <MAP_makeCmdList+0x106>
		}else if (en_staDir == EAST){
 800e6d8:	797b      	ldrb	r3, [r7, #5]
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d164      	bne.n	800e7a8 <MAP_makeCmdList+0x1d8>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800e6de:	79ba      	ldrb	r2, [r7, #6]
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	4966      	ldr	r1, [pc, #408]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e6e4:	0152      	lsls	r2, r2, #5
 800e6e6:	440a      	add	r2, r1
 800e6e8:	4413      	add	r3, r2
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e6f0:	2b20      	cmp	r3, #32
 800e6f2:	d10d      	bne.n	800e710 <MAP_makeCmdList+0x140>
 800e6f4:	79ba      	ldrb	r2, [r7, #6]
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	495f      	ldr	r1, [pc, #380]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e6fc:	0152      	lsls	r2, r2, #5
 800e6fe:	4413      	add	r3, r2
 800e700:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e704:	8a3a      	ldrh	r2, [r7, #16]
 800e706:	429a      	cmp	r2, r3
 800e708:	d102      	bne.n	800e710 <MAP_makeCmdList+0x140>
 800e70a:	2301      	movs	r3, #1
 800e70c:	74fb      	strb	r3, [r7, #19]
 800e70e:	e11f      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800e710:	79ba      	ldrb	r2, [r7, #6]
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	4959      	ldr	r1, [pc, #356]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e716:	0152      	lsls	r2, r2, #5
 800e718:	440a      	add	r2, r1
 800e71a:	4413      	add	r3, r2
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	f003 0311 	and.w	r3, r3, #17
 800e722:	2b10      	cmp	r3, #16
 800e724:	d10d      	bne.n	800e742 <MAP_makeCmdList+0x172>
 800e726:	79bb      	ldrb	r3, [r7, #6]
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	4952      	ldr	r1, [pc, #328]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e72e:	0152      	lsls	r2, r2, #5
 800e730:	4413      	add	r3, r2
 800e732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e736:	8a3a      	ldrh	r2, [r7, #16]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d102      	bne.n	800e742 <MAP_makeCmdList+0x172>
 800e73c:	2300      	movs	r3, #0
 800e73e:	74fb      	strb	r3, [r7, #19]
 800e740:	e106      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800e742:	79ba      	ldrb	r2, [r7, #6]
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	494d      	ldr	r1, [pc, #308]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e748:	0152      	lsls	r2, r2, #5
 800e74a:	440a      	add	r2, r1
 800e74c:	4413      	add	r3, r2
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e754:	2b40      	cmp	r3, #64	; 0x40
 800e756:	d10d      	bne.n	800e774 <MAP_makeCmdList+0x1a4>
 800e758:	79bb      	ldrb	r3, [r7, #6]
 800e75a:	1e5a      	subs	r2, r3, #1
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	4946      	ldr	r1, [pc, #280]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e760:	0152      	lsls	r2, r2, #5
 800e762:	4413      	add	r3, r2
 800e764:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e768:	8a3a      	ldrh	r2, [r7, #16]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d102      	bne.n	800e774 <MAP_makeCmdList+0x1a4>
 800e76e:	2302      	movs	r3, #2
 800e770:	74fb      	strb	r3, [r7, #19]
 800e772:	e0ed      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800e774:	79ba      	ldrb	r2, [r7, #6]
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	4940      	ldr	r1, [pc, #256]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e77a:	0152      	lsls	r2, r2, #5
 800e77c:	440a      	add	r2, r1
 800e77e:	4413      	add	r3, r2
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e786:	2b80      	cmp	r3, #128	; 0x80
 800e788:	d10d      	bne.n	800e7a6 <MAP_makeCmdList+0x1d6>
 800e78a:	79ba      	ldrb	r2, [r7, #6]
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	3b01      	subs	r3, #1
 800e790:	4939      	ldr	r1, [pc, #228]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e792:	0152      	lsls	r2, r2, #5
 800e794:	4413      	add	r3, r2
 800e796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e79a:	8a3a      	ldrh	r2, [r7, #16]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d102      	bne.n	800e7a6 <MAP_makeCmdList+0x1d6>
 800e7a0:	2303      	movs	r3, #3
 800e7a2:	74fb      	strb	r3, [r7, #19]
 800e7a4:	e0d4      	b.n	800e950 <MAP_makeCmdList+0x380>
			else   while(1);
 800e7a6:	e7fe      	b.n	800e7a6 <MAP_makeCmdList+0x1d6>
		}else if (en_staDir == SOUTH){
 800e7a8:	797b      	ldrb	r3, [r7, #5]
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d168      	bne.n	800e880 <MAP_makeCmdList+0x2b0>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800e7ae:	79ba      	ldrb	r2, [r7, #6]
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	4932      	ldr	r1, [pc, #200]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e7b4:	0152      	lsls	r2, r2, #5
 800e7b6:	440a      	add	r2, r1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d10d      	bne.n	800e7e0 <MAP_makeCmdList+0x210>
 800e7c4:	79bb      	ldrb	r3, [r7, #6]
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	492b      	ldr	r1, [pc, #172]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e7cc:	0152      	lsls	r2, r2, #5
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e7d4:	8a3a      	ldrh	r2, [r7, #16]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d102      	bne.n	800e7e0 <MAP_makeCmdList+0x210>
 800e7da:	2302      	movs	r3, #2
 800e7dc:	74fb      	strb	r3, [r7, #19]
 800e7de:	e0b7      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800e7e0:	79ba      	ldrb	r2, [r7, #6]
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	4925      	ldr	r1, [pc, #148]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e7e6:	0152      	lsls	r2, r2, #5
 800e7e8:	440a      	add	r2, r1
 800e7ea:	4413      	add	r3, r2
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e7f2:	2b20      	cmp	r3, #32
 800e7f4:	d10d      	bne.n	800e812 <MAP_makeCmdList+0x242>
 800e7f6:	79ba      	ldrb	r2, [r7, #6]
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	491e      	ldr	r1, [pc, #120]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e7fe:	0152      	lsls	r2, r2, #5
 800e800:	4413      	add	r3, r2
 800e802:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e806:	8a3a      	ldrh	r2, [r7, #16]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d102      	bne.n	800e812 <MAP_makeCmdList+0x242>
 800e80c:	2301      	movs	r3, #1
 800e80e:	74fb      	strb	r3, [r7, #19]
 800e810:	e09e      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800e812:	79ba      	ldrb	r2, [r7, #6]
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	4919      	ldr	r1, [pc, #100]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e818:	0152      	lsls	r2, r2, #5
 800e81a:	440a      	add	r2, r1
 800e81c:	4413      	add	r3, r2
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e824:	2b80      	cmp	r3, #128	; 0x80
 800e826:	d10d      	bne.n	800e844 <MAP_makeCmdList+0x274>
 800e828:	79ba      	ldrb	r2, [r7, #6]
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	4912      	ldr	r1, [pc, #72]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e830:	0152      	lsls	r2, r2, #5
 800e832:	4413      	add	r3, r2
 800e834:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e838:	8a3a      	ldrh	r2, [r7, #16]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d102      	bne.n	800e844 <MAP_makeCmdList+0x274>
 800e83e:	2303      	movs	r3, #3
 800e840:	74fb      	strb	r3, [r7, #19]
 800e842:	e085      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800e844:	79ba      	ldrb	r2, [r7, #6]
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	490c      	ldr	r1, [pc, #48]	; (800e87c <MAP_makeCmdList+0x2ac>)
 800e84a:	0152      	lsls	r2, r2, #5
 800e84c:	440a      	add	r2, r1
 800e84e:	4413      	add	r3, r2
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f003 0311 	and.w	r3, r3, #17
 800e856:	2b10      	cmp	r3, #16
 800e858:	d10d      	bne.n	800e876 <MAP_makeCmdList+0x2a6>
 800e85a:	79bb      	ldrb	r3, [r7, #6]
 800e85c:	1c5a      	adds	r2, r3, #1
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	4905      	ldr	r1, [pc, #20]	; (800e878 <MAP_makeCmdList+0x2a8>)
 800e862:	0152      	lsls	r2, r2, #5
 800e864:	4413      	add	r3, r2
 800e866:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e86a:	8a3a      	ldrh	r2, [r7, #16]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d102      	bne.n	800e876 <MAP_makeCmdList+0x2a6>
 800e870:	2300      	movs	r3, #0
 800e872:	74fb      	strb	r3, [r7, #19]
 800e874:	e06c      	b.n	800e950 <MAP_makeCmdList+0x380>
			else   while(1);
 800e876:	e7fe      	b.n	800e876 <MAP_makeCmdList+0x2a6>
 800e878:	20000b2c 	.word	0x20000b2c
 800e87c:	20000708 	.word	0x20000708
		}else if (en_staDir == WEST){
 800e880:	797b      	ldrb	r3, [r7, #5]
 800e882:	2b03      	cmp	r3, #3
 800e884:	d164      	bne.n	800e950 <MAP_makeCmdList+0x380>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800e886:	79ba      	ldrb	r2, [r7, #6]
 800e888:	79fb      	ldrb	r3, [r7, #7]
 800e88a:	4979      	ldr	r1, [pc, #484]	; (800ea70 <MAP_makeCmdList+0x4a0>)
 800e88c:	0152      	lsls	r2, r2, #5
 800e88e:	440a      	add	r2, r1
 800e890:	4413      	add	r3, r2
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e898:	2b80      	cmp	r3, #128	; 0x80
 800e89a:	d10d      	bne.n	800e8b8 <MAP_makeCmdList+0x2e8>
 800e89c:	79ba      	ldrb	r2, [r7, #6]
 800e89e:	79fb      	ldrb	r3, [r7, #7]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	4974      	ldr	r1, [pc, #464]	; (800ea74 <MAP_makeCmdList+0x4a4>)
 800e8a4:	0152      	lsls	r2, r2, #5
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e8ac:	8a3a      	ldrh	r2, [r7, #16]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d102      	bne.n	800e8b8 <MAP_makeCmdList+0x2e8>
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	74fb      	strb	r3, [r7, #19]
 800e8b6:	e04b      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800e8b8:	79ba      	ldrb	r2, [r7, #6]
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	496c      	ldr	r1, [pc, #432]	; (800ea70 <MAP_makeCmdList+0x4a0>)
 800e8be:	0152      	lsls	r2, r2, #5
 800e8c0:	440a      	add	r2, r1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f003 0311 	and.w	r3, r3, #17
 800e8ca:	2b10      	cmp	r3, #16
 800e8cc:	d10d      	bne.n	800e8ea <MAP_makeCmdList+0x31a>
 800e8ce:	79bb      	ldrb	r3, [r7, #6]
 800e8d0:	1c5a      	adds	r2, r3, #1
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	4967      	ldr	r1, [pc, #412]	; (800ea74 <MAP_makeCmdList+0x4a4>)
 800e8d6:	0152      	lsls	r2, r2, #5
 800e8d8:	4413      	add	r3, r2
 800e8da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e8de:	8a3a      	ldrh	r2, [r7, #16]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d102      	bne.n	800e8ea <MAP_makeCmdList+0x31a>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	74fb      	strb	r3, [r7, #19]
 800e8e8:	e032      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800e8ea:	79ba      	ldrb	r2, [r7, #6]
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	4960      	ldr	r1, [pc, #384]	; (800ea70 <MAP_makeCmdList+0x4a0>)
 800e8f0:	0152      	lsls	r2, r2, #5
 800e8f2:	440a      	add	r2, r1
 800e8f4:	4413      	add	r3, r2
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e8fc:	2b40      	cmp	r3, #64	; 0x40
 800e8fe:	d10d      	bne.n	800e91c <MAP_makeCmdList+0x34c>
 800e900:	79bb      	ldrb	r3, [r7, #6]
 800e902:	1e5a      	subs	r2, r3, #1
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	495b      	ldr	r1, [pc, #364]	; (800ea74 <MAP_makeCmdList+0x4a4>)
 800e908:	0152      	lsls	r2, r2, #5
 800e90a:	4413      	add	r3, r2
 800e90c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e910:	8a3a      	ldrh	r2, [r7, #16]
 800e912:	429a      	cmp	r2, r3
 800e914:	d102      	bne.n	800e91c <MAP_makeCmdList+0x34c>
 800e916:	2302      	movs	r3, #2
 800e918:	74fb      	strb	r3, [r7, #19]
 800e91a:	e019      	b.n	800e950 <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800e91c:	79ba      	ldrb	r2, [r7, #6]
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	4953      	ldr	r1, [pc, #332]	; (800ea70 <MAP_makeCmdList+0x4a0>)
 800e922:	0152      	lsls	r2, r2, #5
 800e924:	440a      	add	r2, r1
 800e926:	4413      	add	r3, r2
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e92e:	2b20      	cmp	r3, #32
 800e930:	d10d      	bne.n	800e94e <MAP_makeCmdList+0x37e>
 800e932:	79ba      	ldrb	r2, [r7, #6]
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	3301      	adds	r3, #1
 800e938:	494e      	ldr	r1, [pc, #312]	; (800ea74 <MAP_makeCmdList+0x4a4>)
 800e93a:	0152      	lsls	r2, r2, #5
 800e93c:	4413      	add	r3, r2
 800e93e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e942:	8a3a      	ldrh	r2, [r7, #16]
 800e944:	429a      	cmp	r2, r3
 800e946:	d102      	bne.n	800e94e <MAP_makeCmdList+0x37e>
 800e948:	2301      	movs	r3, #1
 800e94a:	74fb      	strb	r3, [r7, #19]
 800e94c:	e000      	b.n	800e950 <MAP_makeCmdList+0x380>
			else   while(1);
 800e94e:	e7fe      	b.n	800e94e <MAP_makeCmdList+0x37e>
		}
		
		en_tempDir = (enMAP_HEAD_DIR)( (en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3 );		// 方向更新
 800e950:	7cfa      	ldrb	r2, [r7, #19]
 800e952:	797b      	ldrb	r3, [r7, #5]
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	b2db      	uxtb	r3, r3
 800e958:	f003 0303 	and.w	r3, r3, #3
 800e95c:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 800e95e:	7cfb      	ldrb	r3, [r7, #19]
 800e960:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH){
 800e962:	7bfb      	ldrb	r3, [r7, #15]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d103      	bne.n	800e970 <MAP_makeCmdList+0x3a0>
			uc_goStep = uc_goStep + 2;
 800e968:	7dfb      	ldrb	r3, [r7, #23]
 800e96a:	3302      	adds	r3, #2
 800e96c:	75fb      	strb	r3, [r7, #23]
 800e96e:	e037      	b.n	800e9e0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == EAST){
 800e970:	7bfb      	ldrb	r3, [r7, #15]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d110      	bne.n	800e998 <MAP_makeCmdList+0x3c8>
			dcom[us_pt] = uc_goStep;
 800e976:	8abb      	ldrh	r3, [r7, #20]
 800e978:	493f      	ldr	r1, [pc, #252]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e97a:	7dfa      	ldrb	r2, [r7, #23]
 800e97c:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 800e97e:	8abb      	ldrh	r3, [r7, #20]
 800e980:	3301      	adds	r3, #1
 800e982:	82bb      	strh	r3, [r7, #20]
 800e984:	8abb      	ldrh	r3, [r7, #20]
 800e986:	4a3c      	ldr	r2, [pc, #240]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e988:	2148      	movs	r1, #72	; 0x48
 800e98a:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800e98c:	2302      	movs	r3, #2
 800e98e:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800e990:	8abb      	ldrh	r3, [r7, #20]
 800e992:	3301      	adds	r3, #1
 800e994:	82bb      	strh	r3, [r7, #20]
 800e996:	e023      	b.n	800e9e0 <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == WEST){
 800e998:	7bfb      	ldrb	r3, [r7, #15]
 800e99a:	2b03      	cmp	r3, #3
 800e99c:	d110      	bne.n	800e9c0 <MAP_makeCmdList+0x3f0>
			dcom[us_pt] = uc_goStep;
 800e99e:	8abb      	ldrh	r3, [r7, #20]
 800e9a0:	4935      	ldr	r1, [pc, #212]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e9a2:	7dfa      	ldrb	r2, [r7, #23]
 800e9a4:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 800e9a6:	8abb      	ldrh	r3, [r7, #20]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	82bb      	strh	r3, [r7, #20]
 800e9ac:	8abb      	ldrh	r3, [r7, #20]
 800e9ae:	4a32      	ldr	r2, [pc, #200]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e9b0:	2149      	movs	r1, #73	; 0x49
 800e9b2:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800e9b8:	8abb      	ldrh	r3, [r7, #20]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	82bb      	strh	r3, [r7, #20]
 800e9be:	e00f      	b.n	800e9e0 <MAP_makeCmdList+0x410>
		}
		else{
			dcom[us_pt] = uc_goStep;
 800e9c0:	8abb      	ldrh	r3, [r7, #20]
 800e9c2:	492d      	ldr	r1, [pc, #180]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e9c4:	7dfa      	ldrb	r2, [r7, #23]
 800e9c6:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 800e9c8:	8abb      	ldrh	r3, [r7, #20]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	82bb      	strh	r3, [r7, #20]
 800e9ce:	8abb      	ldrh	r3, [r7, #20]
 800e9d0:	4a29      	ldr	r2, [pc, #164]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800e9d2:	214a      	movs	r1, #74	; 0x4a
 800e9d4:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800e9da:	8abb      	ldrh	r3, [r7, #20]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	82bb      	strh	r3, [r7, #20]
		}

		if      (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 800e9e0:	7cfb      	ldrb	r3, [r7, #19]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d103      	bne.n	800e9ee <MAP_makeCmdList+0x41e>
 800e9e6:	79bb      	ldrb	r3, [r7, #6]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	71bb      	strb	r3, [r7, #6]
 800e9ec:	e013      	b.n	800ea16 <MAP_makeCmdList+0x446>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 800e9ee:	7cfb      	ldrb	r3, [r7, #19]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d103      	bne.n	800e9fc <MAP_makeCmdList+0x42c>
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	71fb      	strb	r3, [r7, #7]
 800e9fa:	e00c      	b.n	800ea16 <MAP_makeCmdList+0x446>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 800e9fc:	7cfb      	ldrb	r3, [r7, #19]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d103      	bne.n	800ea0a <MAP_makeCmdList+0x43a>
 800ea02:	79bb      	ldrb	r3, [r7, #6]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	71bb      	strb	r3, [r7, #6]
 800ea08:	e005      	b.n	800ea16 <MAP_makeCmdList+0x446>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 800ea0a:	7cfb      	ldrb	r3, [r7, #19]
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d102      	bne.n	800ea16 <MAP_makeCmdList+0x446>
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	71fb      	strb	r3, [r7, #7]
		
		en_staDir = en_nowDir;
 800ea16:	7cfb      	ldrb	r3, [r7, #19]
 800ea18:	717b      	strb	r3, [r7, #5]
		
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800ea1a:	79fa      	ldrb	r2, [r7, #7]
 800ea1c:	793b      	ldrb	r3, [r7, #4]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	f47f ade9 	bne.w	800e5f6 <MAP_makeCmdList+0x26>
 800ea24:	79ba      	ldrb	r2, [r7, #6]
 800ea26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d000      	beq.n	800ea30 <MAP_makeCmdList+0x460>
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800ea2e:	e5e2      	b.n	800e5f6 <MAP_makeCmdList+0x26>
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800ea30:	bf00      	nop
	}
	
	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 800ea32:	8abb      	ldrh	r3, [r7, #20]
 800ea34:	4910      	ldr	r1, [pc, #64]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800ea36:	7dfa      	ldrb	r2, [r7, #23]
 800ea38:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 800ea3a:	8abb      	ldrh	r3, [r7, #20]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	82bb      	strh	r3, [r7, #20]
 800ea40:	8abb      	ldrh	r3, [r7, #20]
 800ea42:	4a0d      	ldr	r2, [pc, #52]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800ea44:	2100      	movs	r1, #0
 800ea46:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 800ea48:	8abb      	ldrh	r3, [r7, #20]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	82bb      	strh	r3, [r7, #20]
 800ea4e:	8abb      	ldrh	r3, [r7, #20]
 800ea50:	4a09      	ldr	r2, [pc, #36]	; (800ea78 <MAP_makeCmdList+0x4a8>)
 800ea52:	21fa      	movs	r1, #250	; 0xfa
 800ea54:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt+1;			// コマンド総数
 800ea56:	8abb      	ldrh	r3, [r7, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	b29a      	uxth	r2, r3
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <MAP_makeCmdList+0x4ac>)
 800ea5e:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	797a      	ldrb	r2, [r7, #5]
 800ea64:	701a      	strb	r2, [r3, #0]
}
 800ea66:	bf00      	nop
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bc90      	pop	{r4, r7}
 800ea6e:	4770      	bx	lr
 800ea70:	20000708 	.word	0x20000708
 800ea74:	20000b2c 	.word	0x20000b2c
 800ea78:	2000b138 	.word	0x2000b138
 800ea7c:	2000e1f4 	.word	0x2000e1f4

0800ea80 <MAP_makeSuraCmdList>:

void MAP_makeSuraCmdList( void )
{
 800ea80:	b480      	push	{r7}
 800ea82:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
	uint16_t dcom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t i=0,j=0;					// roop
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ea90:	f102 0206 	add.w	r2, r2, #6
 800ea94:	8013      	strh	r3, [r2, #0]
 800ea96:	2300      	movs	r3, #0
 800ea98:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ea9c:	f102 0204 	add.w	r2, r2, #4
 800eaa0:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ ){
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800eaa8:	f102 0206 	add.w	r2, r2, #6
 800eaac:	8013      	strh	r3, [r2, #0]
 800eaae:	e01d      	b.n	800eaec <MAP_makeSuraCmdList+0x6c>
		dcom_temp[i] = dcom[i];
 800eab0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eab4:	f103 0306 	add.w	r3, r3, #6
 800eab8:	881b      	ldrh	r3, [r3, #0]
 800eaba:	4aac      	ldr	r2, [pc, #688]	; (800ed6c <MAP_makeSuraCmdList+0x2ec>)
 800eabc:	5cd2      	ldrb	r2, [r2, r3]
 800eabe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eac2:	f103 0306 	add.w	r3, r3, #6
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	b292      	uxth	r2, r2
 800eaca:	f107 0108 	add.w	r1, r7, #8
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	440b      	add	r3, r1
 800ead2:	f823 2c04 	strh.w	r2, [r3, #-4]
	for( i=0; i<us_totalCmd; i++ ){
 800ead6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eada:	f103 0306 	add.w	r3, r3, #6
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	3301      	adds	r3, #1
 800eae2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800eae6:	f102 0206 	add.w	r2, r2, #6
 800eaea:	8013      	strh	r3, [r2, #0]
 800eaec:	4ba0      	ldr	r3, [pc, #640]	; (800ed70 <MAP_makeSuraCmdList+0x2f0>)
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800eaf4:	f102 0206 	add.w	r2, r2, #6
 800eaf8:	8812      	ldrh	r2, [r2, #0]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d3d8      	bcc.n	800eab0 <MAP_makeSuraCmdList+0x30>
	}

	i = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800eb04:	f102 0206 	add.w	r2, r2, #6
 800eb08:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		if( dcom_temp[i] == R90 ){		// 右90°
 800eb0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb0e:	f103 0306 	add.w	r3, r3, #6
 800eb12:	881b      	ldrh	r3, [r3, #0]
 800eb14:	f107 0208 	add.w	r2, r7, #8
 800eb18:	005b      	lsls	r3, r3, #1
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800eb20:	2b48      	cmp	r3, #72	; 0x48
 800eb22:	d140      	bne.n	800eba6 <MAP_makeSuraCmdList+0x126>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800eb24:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb28:	f103 0306 	add.w	r3, r3, #6
 800eb2c:	881b      	ldrh	r3, [r3, #0]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	f107 0208 	add.w	r2, r7, #8
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800eb3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb40:	f103 0306 	add.w	r3, r3, #6
 800eb44:	881b      	ldrh	r3, [r3, #0]
 800eb46:	3b01      	subs	r3, #1
 800eb48:	3a01      	subs	r2, #1
 800eb4a:	b292      	uxth	r2, r2
 800eb4c:	f107 0108 	add.w	r1, r7, #8
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	440b      	add	r3, r1
 800eb54:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800eb58:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb5c:	f103 0306 	add.w	r3, r3, #6
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	3301      	adds	r3, #1
 800eb64:	f107 0208 	add.w	r2, r7, #8
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800eb70:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb74:	f103 0306 	add.w	r3, r3, #6
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	3a01      	subs	r2, #1
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	f107 0108 	add.w	r1, r7, #8
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	440b      	add	r3, r1
 800eb88:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = R90S;		// 右スラローム90°
 800eb8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eb90:	f103 0306 	add.w	r3, r3, #6
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	f107 0208 	add.w	r2, r7, #8
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	4413      	add	r3, r2
 800eb9e:	224c      	movs	r2, #76	; 0x4c
 800eba0:	f823 2c04 	strh.w	r2, [r3, #-4]
 800eba4:	e05a      	b.n	800ec5c <MAP_makeSuraCmdList+0x1dc>
		}
		else if( dcom_temp[i] == L90 ){	// 左90°
 800eba6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ebaa:	f103 0306 	add.w	r3, r3, #6
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	f107 0208 	add.w	r2, r7, #8
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800ebbc:	2b49      	cmp	r3, #73	; 0x49
 800ebbe:	d140      	bne.n	800ec42 <MAP_makeSuraCmdList+0x1c2>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800ebc0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ebc4:	f103 0306 	add.w	r3, r3, #6
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	f107 0208 	add.w	r2, r7, #8
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800ebd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ebdc:	f103 0306 	add.w	r3, r3, #6
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	3a01      	subs	r2, #1
 800ebe6:	b292      	uxth	r2, r2
 800ebe8:	f107 0108 	add.w	r1, r7, #8
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	440b      	add	r3, r1
 800ebf0:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800ebf4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ebf8:	f103 0306 	add.w	r3, r3, #6
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	f107 0208 	add.w	r2, r7, #8
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	4413      	add	r3, r2
 800ec08:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800ec0c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec10:	f103 0306 	add.w	r3, r3, #6
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	3301      	adds	r3, #1
 800ec18:	3a01      	subs	r2, #1
 800ec1a:	b292      	uxth	r2, r2
 800ec1c:	f107 0108 	add.w	r1, r7, #8
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	440b      	add	r3, r1
 800ec24:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = L90S;		// 左スラローム90°
 800ec28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec2c:	f103 0306 	add.w	r3, r3, #6
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	f107 0208 	add.w	r2, r7, #8
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	4413      	add	r3, r2
 800ec3a:	224d      	movs	r2, #77	; 0x4d
 800ec3c:	f823 2c04 	strh.w	r2, [r3, #-4]
 800ec40:	e00c      	b.n	800ec5c <MAP_makeSuraCmdList+0x1dc>
		}
		else{
			if( dcom_temp[i] == CEND ){
 800ec42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec46:	f103 0306 	add.w	r3, r3, #6
 800ec4a:	881b      	ldrh	r3, [r3, #0]
 800ec4c:	f107 0208 	add.w	r2, r7, #8
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	4413      	add	r3, r2
 800ec54:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800ec58:	2bfa      	cmp	r3, #250	; 0xfa
 800ec5a:	d00b      	beq.n	800ec74 <MAP_makeSuraCmdList+0x1f4>
				break;
			}
		}
		i++;
 800ec5c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec60:	f103 0306 	add.w	r3, r3, #6
 800ec64:	881b      	ldrh	r3, [r3, #0]
 800ec66:	3301      	adds	r3, #1
 800ec68:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ec6c:	f102 0206 	add.w	r2, r2, #6
 800ec70:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i] == R90 ){		// 右90°
 800ec72:	e74a      	b.n	800eb0a <MAP_makeSuraCmdList+0x8a>
				break;
 800ec74:	bf00      	nop
	}

	i = j = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ec7c:	f102 0204 	add.w	r2, r2, #4
 800ec80:	8013      	strh	r3, [r2, #0]
 800ec82:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec86:	f103 0304 	add.w	r3, r3, #4
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ec90:	f102 0206 	add.w	r2, r2, #6
 800ec94:	8013      	strh	r3, [r2, #0]

	/* スラロームコマンド変換 */
	while(1)
	{
		if( dcom_temp[i+1] == CEND ){
 800ec96:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ec9a:	f103 0306 	add.w	r3, r3, #6
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	3301      	adds	r3, #1
 800eca2:	f107 0208 	add.w	r2, r7, #8
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	4413      	add	r3, r2
 800ecaa:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800ecae:	2bfa      	cmp	r3, #250	; 0xfa
 800ecb0:	d111      	bne.n	800ecd6 <MAP_makeSuraCmdList+0x256>
			scom[j] = STOP;
 800ecb2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ecb6:	f103 0304 	add.w	r3, r3, #4
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	4a2d      	ldr	r2, [pc, #180]	; (800ed74 <MAP_makeSuraCmdList+0x2f4>)
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	54d1      	strb	r1, [r2, r3]
			scom[j+1] = CEND;
 800ecc2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ecc6:	f103 0304 	add.w	r3, r3, #4
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	3301      	adds	r3, #1
 800ecce:	4a29      	ldr	r2, [pc, #164]	; (800ed74 <MAP_makeSuraCmdList+0x2f4>)
 800ecd0:	21fa      	movs	r1, #250	; 0xfa
 800ecd2:	54d1      	strb	r1, [r2, r3]
			break;
 800ecd4:	e041      	b.n	800ed5a <MAP_makeSuraCmdList+0x2da>
		}
		else
		{
			/* データがストップコマンドだったら */
			if( dcom_temp[i] == 0 ){
 800ecd6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ecda:	f103 0306 	add.w	r3, r3, #6
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	f107 0208 	add.w	r2, r7, #8
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4413      	add	r3, r2
 800ece8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10a      	bne.n	800ed06 <MAP_makeSuraCmdList+0x286>
				i++;
 800ecf0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ecf4:	f103 0306 	add.w	r3, r3, #6
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ed00:	f102 0206 	add.w	r2, r2, #6
 800ed04:	8013      	strh	r3, [r2, #0]
			}
			
			scom[j] = dcom_temp[i];
 800ed06:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ed0a:	f103 0306 	add.w	r3, r3, #6
 800ed0e:	881b      	ldrh	r3, [r3, #0]
 800ed10:	f107 0208 	add.w	r2, r7, #8
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	4413      	add	r3, r2
 800ed18:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800ed1c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ed20:	f103 0304 	add.w	r3, r3, #4
 800ed24:	881b      	ldrh	r3, [r3, #0]
 800ed26:	b2d1      	uxtb	r1, r2
 800ed28:	4a12      	ldr	r2, [pc, #72]	; (800ed74 <MAP_makeSuraCmdList+0x2f4>)
 800ed2a:	54d1      	strb	r1, [r2, r3]
			
			i++;
 800ed2c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ed30:	f103 0306 	add.w	r3, r3, #6
 800ed34:	881b      	ldrh	r3, [r3, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ed3c:	f102 0206 	add.w	r2, r2, #6
 800ed40:	8013      	strh	r3, [r2, #0]
			j++;
 800ed42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ed46:	f103 0304 	add.w	r3, r3, #4
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ed52:	f102 0204 	add.w	r2, r2, #4
 800ed56:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i+1] == CEND ){
 800ed58:	e79d      	b.n	800ec96 <MAP_makeSuraCmdList+0x216>
		}
	}
}
 800ed5a:	bf00      	nop
 800ed5c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	2000b138 	.word	0x2000b138
 800ed70:	2000e1f4 	.word	0x2000e1f4
 800ed74:	2000c140 	.word	0x2000c140

0800ed78 <MAP_makeSkewCmdList>:

void MAP_makeSkewCmdList( void )
{
 800ed78:	b480      	push	{r7}
 800ed7a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
	uint16_t	scom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t	i;							// roop
	uint16_t	c1, c2, c3, c4;				// 計算用
	uint16_t	x;
	uint16_t	ct_n=0, ct_st=0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ed88:	f102 0212 	add.w	r2, r2, #18
 800ed8c:	8013      	strh	r3, [r2, #0]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ed94:	f102 0210 	add.w	r2, r2, #16
 800ed98:	8013      	strh	r3, [r2, #0]
	uint16_t	flag = 3;					//	斜め走行用バッファ  0:複合コマンド　1:斜め  2:S135N → N135S  3:直進
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800eda0:	f102 020e 	add.w	r2, r2, #14
 800eda4:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ )
 800eda6:	2300      	movs	r3, #0
 800eda8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800edac:	f102 0216 	add.w	r2, r2, #22
 800edb0:	8013      	strh	r3, [r2, #0]
 800edb2:	e01d      	b.n	800edf0 <MAP_makeSkewCmdList+0x78>
	{
		scom_temp[i] = scom[i];
 800edb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800edb8:	f103 0316 	add.w	r3, r3, #22
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	4acb      	ldr	r2, [pc, #812]	; (800f0ec <MAP_makeSkewCmdList+0x374>)
 800edc0:	5cd2      	ldrb	r2, [r2, r3]
 800edc2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800edc6:	f103 0316 	add.w	r3, r3, #22
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	b292      	uxth	r2, r2
 800edce:	f107 0118 	add.w	r1, r7, #24
 800edd2:	005b      	lsls	r3, r3, #1
 800edd4:	440b      	add	r3, r1
 800edd6:	f823 2c14 	strh.w	r2, [r3, #-20]
	for( i=0; i<us_totalCmd; i++ )
 800edda:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800edde:	f103 0316 	add.w	r3, r3, #22
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800edea:	f102 0216 	add.w	r2, r2, #22
 800edee:	8013      	strh	r3, [r2, #0]
 800edf0:	4bbf      	ldr	r3, [pc, #764]	; (800f0f0 <MAP_makeSkewCmdList+0x378>)
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800edf8:	f102 0216 	add.w	r2, r2, #22
 800edfc:	8812      	ldrh	r2, [r2, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d3d8      	bcc.n	800edb4 <MAP_makeSkewCmdList+0x3c>
	}

	i=0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ee08:	f102 0216 	add.w	r2, r2, #22
 800ee0c:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		c1 = scom_temp[ct_st];
 800ee0e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ee12:	f103 0310 	add.w	r3, r3, #16
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	f107 0218 	add.w	r2, r7, #24
 800ee1c:	005b      	lsls	r3, r3, #1
 800ee1e:	4413      	add	r3, r2
 800ee20:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ee24:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ee28:	f102 020c 	add.w	r2, r2, #12
 800ee2c:	8013      	strh	r3, [r2, #0]
		c2 = scom_temp[ct_st+1];
 800ee2e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ee32:	f103 0310 	add.w	r3, r3, #16
 800ee36:	881b      	ldrh	r3, [r3, #0]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	f107 0218 	add.w	r2, r7, #24
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	4413      	add	r3, r2
 800ee42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ee46:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ee4a:	f102 020a 	add.w	r2, r2, #10
 800ee4e:	8013      	strh	r3, [r2, #0]
		c3 = scom_temp[ct_st+2];
 800ee50:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ee54:	f103 0310 	add.w	r3, r3, #16
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	3302      	adds	r3, #2
 800ee5c:	f107 0218 	add.w	r2, r7, #24
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	4413      	add	r3, r2
 800ee64:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ee68:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ee6c:	f102 0208 	add.w	r2, r2, #8
 800ee70:	8013      	strh	r3, [r2, #0]
		c4 = scom_temp[ct_st+3];
 800ee72:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ee76:	f103 0310 	add.w	r3, r3, #16
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	3303      	adds	r3, #3
 800ee7e:	f107 0218 	add.w	r2, r7, #24
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ee8a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ee8e:	f102 0206 	add.w	r2, r2, #6
 800ee92:	8013      	strh	r3, [r2, #0]

		//	直進 → 右45度 → 斜め
		if( (c1<=GO32) && (c2==R90S) && (c3==L90S) )
 800ee94:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ee98:	f103 030c 	add.w	r3, r3, #12
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	2b20      	cmp	r3, #32
 800eea0:	f200 808d 	bhi.w	800efbe <MAP_makeSkewCmdList+0x246>
 800eea4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eea8:	f103 030a 	add.w	r3, r3, #10
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	2b4c      	cmp	r3, #76	; 0x4c
 800eeb0:	f040 8085 	bne.w	800efbe <MAP_makeSkewCmdList+0x246>
 800eeb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eeb8:	f103 0308 	add.w	r3, r3, #8
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	2b4d      	cmp	r3, #77	; 0x4d
 800eec0:	d17d      	bne.n	800efbe <MAP_makeSkewCmdList+0x246>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800eec2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eec6:	f103 0310 	add.w	r3, r3, #16
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d131      	bne.n	800ef34 <MAP_makeSkewCmdList+0x1bc>
 800eed0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eed4:	f103 030c 	add.w	r3, r3, #12
 800eed8:	881b      	ldrh	r3, [r3, #0]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d12a      	bne.n	800ef34 <MAP_makeSkewCmdList+0x1bc>
				tcom[ ct_n ] = scom_temp[ct_st];
 800eede:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eee2:	f103 0310 	add.w	r3, r3, #16
 800eee6:	881b      	ldrh	r3, [r3, #0]
 800eee8:	f107 0218 	add.w	r2, r7, #24
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800eef4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eef8:	f103 0312 	add.w	r3, r3, #18
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	b2d1      	uxtb	r1, r2
 800ef00:	4a7c      	ldr	r2, [pc, #496]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800ef02:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800ef04:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef08:	f103 0310 	add.w	r3, r3, #16
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ef14:	f102 0210 	add.w	r2, r2, #16
 800ef18:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800ef1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef1e:	f103 0312 	add.w	r3, r3, #18
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ef2a:	f102 0212 	add.w	r2, r2, #18
 800ef2e:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800ef30:	f000 becb 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800ef34:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef38:	f103 030c 	add.w	r3, r3, #12
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d015      	beq.n	800ef6e <MAP_makeSkewCmdList+0x1f6>
 800ef42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef46:	f103 030c 	add.w	r3, r3, #12
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	b2da      	uxtb	r2, r3
 800ef4e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef52:	f103 0312 	add.w	r3, r3, #18
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	1c59      	adds	r1, r3, #1
 800ef5a:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800ef5e:	f100 0012 	add.w	r0, r0, #18
 800ef62:	8001      	strh	r1, [r0, #0]
 800ef64:	4619      	mov	r1, r3
 800ef66:	1e53      	subs	r3, r2, #1
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	4b62      	ldr	r3, [pc, #392]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800ef6c:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = RS45N;
 800ef6e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef72:	f103 0312 	add.w	r3, r3, #18
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800ef7e:	f101 0112 	add.w	r1, r1, #18
 800ef82:	800a      	strh	r2, [r1, #0]
 800ef84:	461a      	mov	r2, r3
 800ef86:	4b5b      	ldr	r3, [pc, #364]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800ef88:	2199      	movs	r1, #153	; 0x99
 800ef8a:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800ef8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ef90:	f103 0310 	add.w	r3, r3, #16
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	3301      	adds	r3, #1
 800ef98:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ef9c:	f102 0210 	add.w	r2, r2, #16
 800efa0:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800efa2:	2351      	movs	r3, #81	; 0x51
 800efa4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800efa8:	f102 0214 	add.w	r2, r2, #20
 800efac:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800efb4:	f102 020e 	add.w	r2, r2, #14
 800efb8:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800efba:	f000 be86 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
			}
		}
		//	直進 → 左45度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==R90S) )
 800efbe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800efc2:	f103 030c 	add.w	r3, r3, #12
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	2b20      	cmp	r3, #32
 800efca:	f200 8095 	bhi.w	800f0f8 <MAP_makeSkewCmdList+0x380>
 800efce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800efd2:	f103 030a 	add.w	r3, r3, #10
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	2b4d      	cmp	r3, #77	; 0x4d
 800efda:	f040 808d 	bne.w	800f0f8 <MAP_makeSkewCmdList+0x380>
 800efde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800efe2:	f103 0308 	add.w	r3, r3, #8
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	2b4c      	cmp	r3, #76	; 0x4c
 800efea:	f040 8085 	bne.w	800f0f8 <MAP_makeSkewCmdList+0x380>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800efee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800eff2:	f103 0310 	add.w	r3, r3, #16
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d131      	bne.n	800f060 <MAP_makeSkewCmdList+0x2e8>
 800effc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f000:	f103 030c 	add.w	r3, r3, #12
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d12a      	bne.n	800f060 <MAP_makeSkewCmdList+0x2e8>
				tcom[ ct_n ] = scom_temp[ct_st];
 800f00a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f00e:	f103 0310 	add.w	r3, r3, #16
 800f012:	881b      	ldrh	r3, [r3, #0]
 800f014:	f107 0218 	add.w	r2, r7, #24
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4413      	add	r3, r2
 800f01c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800f020:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f024:	f103 0312 	add.w	r3, r3, #18
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	b2d1      	uxtb	r1, r2
 800f02c:	4a31      	ldr	r2, [pc, #196]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800f02e:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800f030:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f034:	f103 0310 	add.w	r3, r3, #16
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	3301      	adds	r3, #1
 800f03c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f040:	f102 0210 	add.w	r2, r2, #16
 800f044:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800f046:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f04a:	f103 0312 	add.w	r3, r3, #18
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	3301      	adds	r3, #1
 800f052:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f056:	f102 0212 	add.w	r2, r2, #18
 800f05a:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f05c:	f000 be35 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800f060:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f064:	f103 030c 	add.w	r3, r3, #12
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d015      	beq.n	800f09a <MAP_makeSkewCmdList+0x322>
 800f06e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f072:	f103 030c 	add.w	r3, r3, #12
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f07e:	f103 0312 	add.w	r3, r3, #18
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	1c59      	adds	r1, r3, #1
 800f086:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f08a:	f100 0012 	add.w	r0, r0, #18
 800f08e:	8001      	strh	r1, [r0, #0]
 800f090:	4619      	mov	r1, r3
 800f092:	1e53      	subs	r3, r2, #1
 800f094:	b2da      	uxtb	r2, r3
 800f096:	4b17      	ldr	r3, [pc, #92]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800f098:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = LS45N;
 800f09a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f09e:	f103 0312 	add.w	r3, r3, #18
 800f0a2:	881b      	ldrh	r3, [r3, #0]
 800f0a4:	1c5a      	adds	r2, r3, #1
 800f0a6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f0aa:	f101 0112 	add.w	r1, r1, #18
 800f0ae:	800a      	strh	r2, [r1, #0]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4b10      	ldr	r3, [pc, #64]	; (800f0f4 <MAP_makeSkewCmdList+0x37c>)
 800f0b4:	219a      	movs	r1, #154	; 0x9a
 800f0b6:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800f0b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f0bc:	f103 0310 	add.w	r3, r3, #16
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f0c8:	f102 0210 	add.w	r2, r2, #16
 800f0cc:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f0ce:	2351      	movs	r3, #81	; 0x51
 800f0d0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f0d4:	f102 0214 	add.w	r2, r2, #20
 800f0d8:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f0e0:	f102 020e 	add.w	r2, r2, #14
 800f0e4:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800f0e6:	f000 bdf0 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
 800f0ea:	bf00      	nop
 800f0ec:	2000c140 	.word	0x2000c140
 800f0f0:	2000e1f4 	.word	0x2000e1f4
 800f0f4:	2000d17c 	.word	0x2000d17c
			}
		}

		//	直進 → 右90度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3<=GO32) )
 800f0f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f0fc:	f103 030c 	add.w	r3, r3, #12
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	2b20      	cmp	r3, #32
 800f104:	d843      	bhi.n	800f18e <MAP_makeSkewCmdList+0x416>
 800f106:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f10a:	f103 030a 	add.w	r3, r3, #10
 800f10e:	881b      	ldrh	r3, [r3, #0]
 800f110:	2b4c      	cmp	r3, #76	; 0x4c
 800f112:	d13c      	bne.n	800f18e <MAP_makeSkewCmdList+0x416>
 800f114:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f118:	f103 0308 	add.w	r3, r3, #8
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	2b20      	cmp	r3, #32
 800f120:	d835      	bhi.n	800f18e <MAP_makeSkewCmdList+0x416>
		{
			tcom[ ct_n++ ] = c1;
 800f122:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f126:	f103 0312 	add.w	r3, r3, #18
 800f12a:	881b      	ldrh	r3, [r3, #0]
 800f12c:	1c5a      	adds	r2, r3, #1
 800f12e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f132:	f101 0112 	add.w	r1, r1, #18
 800f136:	800a      	strh	r2, [r1, #0]
 800f138:	461a      	mov	r2, r3
 800f13a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f13e:	f103 030c 	add.w	r3, r3, #12
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	b2d9      	uxtb	r1, r3
 800f146:	4bc0      	ldr	r3, [pc, #768]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f148:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800f14a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f14e:	f103 0312 	add.w	r3, r3, #18
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f15a:	f101 0112 	add.w	r1, r1, #18
 800f15e:	800a      	strh	r2, [r1, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	4bb9      	ldr	r3, [pc, #740]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f164:	214c      	movs	r1, #76	; 0x4c
 800f166:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800f168:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f16c:	f103 0310 	add.w	r3, r3, #16
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	3302      	adds	r3, #2
 800f174:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f178:	f102 0210 	add.w	r2, r2, #16
 800f17c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f17e:	2303      	movs	r3, #3
 800f180:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f184:	f102 020e 	add.w	r2, r2, #14
 800f188:	8013      	strh	r3, [r2, #0]
 800f18a:	f000 bd9e 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左90度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c3<=GO32) )
 800f18e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f192:	f103 030c 	add.w	r3, r3, #12
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	2b20      	cmp	r3, #32
 800f19a:	d843      	bhi.n	800f224 <MAP_makeSkewCmdList+0x4ac>
 800f19c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f1a0:	f103 030a 	add.w	r3, r3, #10
 800f1a4:	881b      	ldrh	r3, [r3, #0]
 800f1a6:	2b4d      	cmp	r3, #77	; 0x4d
 800f1a8:	d13c      	bne.n	800f224 <MAP_makeSkewCmdList+0x4ac>
 800f1aa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f1ae:	f103 0308 	add.w	r3, r3, #8
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	2b20      	cmp	r3, #32
 800f1b6:	d835      	bhi.n	800f224 <MAP_makeSkewCmdList+0x4ac>
		{
			tcom[ ct_n++ ] = c1;
 800f1b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f1bc:	f103 0312 	add.w	r3, r3, #18
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	1c5a      	adds	r2, r3, #1
 800f1c4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f1c8:	f101 0112 	add.w	r1, r1, #18
 800f1cc:	800a      	strh	r2, [r1, #0]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f1d4:	f103 030c 	add.w	r3, r3, #12
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	b2d9      	uxtb	r1, r3
 800f1dc:	4b9a      	ldr	r3, [pc, #616]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f1de:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800f1e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f1e4:	f103 0312 	add.w	r3, r3, #18
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f1f0:	f101 0112 	add.w	r1, r1, #18
 800f1f4:	800a      	strh	r2, [r1, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	4b93      	ldr	r3, [pc, #588]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f1fa:	214d      	movs	r1, #77	; 0x4d
 800f1fc:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800f1fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f202:	f103 0310 	add.w	r3, r3, #16
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	3302      	adds	r3, #2
 800f20a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f20e:	f102 0210 	add.w	r2, r2, #16
 800f212:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f214:	2303      	movs	r3, #3
 800f216:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f21a:	f102 020e 	add.w	r2, r2, #14
 800f21e:	8013      	strh	r3, [r2, #0]
 800f220:	f000 bd53 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 右135度 → 斜め
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4==L90S) )
 800f224:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f228:	f103 030c 	add.w	r3, r3, #12
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	2b20      	cmp	r3, #32
 800f230:	d850      	bhi.n	800f2d4 <MAP_makeSkewCmdList+0x55c>
 800f232:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f236:	f103 030a 	add.w	r3, r3, #10
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	2b4c      	cmp	r3, #76	; 0x4c
 800f23e:	d149      	bne.n	800f2d4 <MAP_makeSkewCmdList+0x55c>
 800f240:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f244:	f103 0308 	add.w	r3, r3, #8
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	2b4c      	cmp	r3, #76	; 0x4c
 800f24c:	d142      	bne.n	800f2d4 <MAP_makeSkewCmdList+0x55c>
 800f24e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f252:	f103 0306 	add.w	r3, r3, #6
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	2b4d      	cmp	r3, #77	; 0x4d
 800f25a:	d13b      	bne.n	800f2d4 <MAP_makeSkewCmdList+0x55c>
		{
			tcom[ ct_n++ ] = c1;
 800f25c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f260:	f103 0312 	add.w	r3, r3, #18
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	1c5a      	adds	r2, r3, #1
 800f268:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f26c:	f101 0112 	add.w	r1, r1, #18
 800f270:	800a      	strh	r2, [r1, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f278:	f103 030c 	add.w	r3, r3, #12
 800f27c:	881b      	ldrh	r3, [r3, #0]
 800f27e:	b2d9      	uxtb	r1, r3
 800f280:	4b71      	ldr	r3, [pc, #452]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f282:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RS135N;
 800f284:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f288:	f103 0312 	add.w	r3, r3, #18
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f294:	f101 0112 	add.w	r1, r1, #18
 800f298:	800a      	strh	r2, [r1, #0]
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b6a      	ldr	r3, [pc, #424]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f29e:	219b      	movs	r1, #155	; 0x9b
 800f2a0:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800f2a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f2a6:	f103 0310 	add.w	r3, r3, #16
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	3302      	adds	r3, #2
 800f2ae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f2b2:	f102 0210 	add.w	r2, r2, #16
 800f2b6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f2b8:	2351      	movs	r3, #81	; 0x51
 800f2ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f2be:	f102 0214 	add.w	r2, r2, #20
 800f2c2:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f2ca:	f102 020e 	add.w	r2, r2, #14
 800f2ce:	8013      	strh	r3, [r2, #0]
 800f2d0:	f000 bcfb 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左135度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==L90S) && (c4==R90S) )
 800f2d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f2d8:	f103 030c 	add.w	r3, r3, #12
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	2b20      	cmp	r3, #32
 800f2e0:	d850      	bhi.n	800f384 <MAP_makeSkewCmdList+0x60c>
 800f2e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f2e6:	f103 030a 	add.w	r3, r3, #10
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	2b4d      	cmp	r3, #77	; 0x4d
 800f2ee:	d149      	bne.n	800f384 <MAP_makeSkewCmdList+0x60c>
 800f2f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f2f4:	f103 0308 	add.w	r3, r3, #8
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	2b4d      	cmp	r3, #77	; 0x4d
 800f2fc:	d142      	bne.n	800f384 <MAP_makeSkewCmdList+0x60c>
 800f2fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f302:	f103 0306 	add.w	r3, r3, #6
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	2b4c      	cmp	r3, #76	; 0x4c
 800f30a:	d13b      	bne.n	800f384 <MAP_makeSkewCmdList+0x60c>
		{
			tcom[ ct_n++ ] = c1;
 800f30c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f310:	f103 0312 	add.w	r3, r3, #18
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f31c:	f101 0112 	add.w	r1, r1, #18
 800f320:	800a      	strh	r2, [r1, #0]
 800f322:	461a      	mov	r2, r3
 800f324:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f328:	f103 030c 	add.w	r3, r3, #12
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	b2d9      	uxtb	r1, r3
 800f330:	4b45      	ldr	r3, [pc, #276]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f332:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LS135N;
 800f334:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f338:	f103 0312 	add.w	r3, r3, #18
 800f33c:	881b      	ldrh	r3, [r3, #0]
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f344:	f101 0112 	add.w	r1, r1, #18
 800f348:	800a      	strh	r2, [r1, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	4b3e      	ldr	r3, [pc, #248]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f34e:	219c      	movs	r1, #156	; 0x9c
 800f350:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800f352:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f356:	f103 0310 	add.w	r3, r3, #16
 800f35a:	881b      	ldrh	r3, [r3, #0]
 800f35c:	3302      	adds	r3, #2
 800f35e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f362:	f102 0210 	add.w	r2, r2, #16
 800f366:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f368:	2351      	movs	r3, #81	; 0x51
 800f36a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f36e:	f102 0214 	add.w	r2, r2, #20
 800f372:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800f374:	2302      	movs	r3, #2
 800f376:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f37a:	f102 020e 	add.w	r2, r2, #14
 800f37e:	8013      	strh	r3, [r2, #0]
 800f380:	f000 bca3 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
		}

		//	直進 → 右180度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4<=GO32) )
 800f384:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f388:	f103 030c 	add.w	r3, r3, #12
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	2b20      	cmp	r3, #32
 800f390:	d85c      	bhi.n	800f44c <MAP_makeSkewCmdList+0x6d4>
 800f392:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f396:	f103 030a 	add.w	r3, r3, #10
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	2b4c      	cmp	r3, #76	; 0x4c
 800f39e:	d155      	bne.n	800f44c <MAP_makeSkewCmdList+0x6d4>
 800f3a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3a4:	f103 0308 	add.w	r3, r3, #8
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	2b4c      	cmp	r3, #76	; 0x4c
 800f3ac:	d14e      	bne.n	800f44c <MAP_makeSkewCmdList+0x6d4>
 800f3ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3b2:	f103 0306 	add.w	r3, r3, #6
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	2b20      	cmp	r3, #32
 800f3ba:	d847      	bhi.n	800f44c <MAP_makeSkewCmdList+0x6d4>
		{
			tcom[ ct_n++ ] = c1;
 800f3bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3c0:	f103 0312 	add.w	r3, r3, #18
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	1c5a      	adds	r2, r3, #1
 800f3c8:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f3cc:	f101 0112 	add.w	r1, r1, #18
 800f3d0:	800a      	strh	r2, [r1, #0]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3d8:	f103 030c 	add.w	r3, r3, #12
 800f3dc:	881b      	ldrh	r3, [r3, #0]
 800f3de:	b2d9      	uxtb	r1, r3
 800f3e0:	4b19      	ldr	r3, [pc, #100]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f3e2:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800f3e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f3e8:	f103 0312 	add.w	r3, r3, #18
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f3f4:	f101 0112 	add.w	r1, r1, #18
 800f3f8:	800a      	strh	r2, [r1, #0]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	4b12      	ldr	r3, [pc, #72]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f3fe:	214c      	movs	r1, #76	; 0x4c
 800f400:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800f402:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f406:	f103 0312 	add.w	r3, r3, #18
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f412:	f101 0112 	add.w	r1, r1, #18
 800f416:	800a      	strh	r2, [r1, #0]
 800f418:	461a      	mov	r2, r3
 800f41a:	4b0b      	ldr	r3, [pc, #44]	; (800f448 <MAP_makeSkewCmdList+0x6d0>)
 800f41c:	214c      	movs	r1, #76	; 0x4c
 800f41e:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800f420:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f424:	f103 0310 	add.w	r3, r3, #16
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	3303      	adds	r3, #3
 800f42c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f430:	f102 0210 	add.w	r2, r2, #16
 800f434:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f436:	2303      	movs	r3, #3
 800f438:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f43c:	f102 020e 	add.w	r2, r2, #14
 800f440:	8013      	strh	r3, [r2, #0]
 800f442:	f000 bc42 	b.w	800fcca <MAP_makeSkewCmdList+0xf52>
 800f446:	bf00      	nop
 800f448:	2000d17c 	.word	0x2000d17c
		}
		//	直進 → 左180度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c2==L90S) && (c4<=GO32) )
 800f44c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f450:	f103 030c 	add.w	r3, r3, #12
 800f454:	881b      	ldrh	r3, [r3, #0]
 800f456:	2b20      	cmp	r3, #32
 800f458:	d858      	bhi.n	800f50c <MAP_makeSkewCmdList+0x794>
 800f45a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f45e:	f103 030a 	add.w	r3, r3, #10
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	2b4d      	cmp	r3, #77	; 0x4d
 800f466:	d151      	bne.n	800f50c <MAP_makeSkewCmdList+0x794>
 800f468:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f46c:	f103 030a 	add.w	r3, r3, #10
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	2b4d      	cmp	r3, #77	; 0x4d
 800f474:	d14a      	bne.n	800f50c <MAP_makeSkewCmdList+0x794>
 800f476:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f47a:	f103 0306 	add.w	r3, r3, #6
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	2b20      	cmp	r3, #32
 800f482:	d843      	bhi.n	800f50c <MAP_makeSkewCmdList+0x794>
		{
			tcom[ ct_n++ ] = c1;
 800f484:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f488:	f103 0312 	add.w	r3, r3, #18
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	1c5a      	adds	r2, r3, #1
 800f490:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f494:	f101 0112 	add.w	r1, r1, #18
 800f498:	800a      	strh	r2, [r1, #0]
 800f49a:	461a      	mov	r2, r3
 800f49c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4a0:	f103 030c 	add.w	r3, r3, #12
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	b2d9      	uxtb	r1, r3
 800f4a8:	4baa      	ldr	r3, [pc, #680]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f4aa:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800f4ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4b0:	f103 0312 	add.w	r3, r3, #18
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f4bc:	f101 0112 	add.w	r1, r1, #18
 800f4c0:	800a      	strh	r2, [r1, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	4ba3      	ldr	r3, [pc, #652]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f4c6:	214d      	movs	r1, #77	; 0x4d
 800f4c8:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800f4ca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4ce:	f103 0312 	add.w	r3, r3, #18
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f4da:	f101 0112 	add.w	r1, r1, #18
 800f4de:	800a      	strh	r2, [r1, #0]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	4b9c      	ldr	r3, [pc, #624]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f4e4:	214d      	movs	r1, #77	; 0x4d
 800f4e6:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800f4e8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f4ec:	f103 0310 	add.w	r3, r3, #16
 800f4f0:	881b      	ldrh	r3, [r3, #0]
 800f4f2:	3303      	adds	r3, #3
 800f4f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f4f8:	f102 0210 	add.w	r2, r2, #16
 800f4fc:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f4fe:	2303      	movs	r3, #3
 800f500:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f504:	f102 020e 	add.w	r2, r2, #14
 800f508:	8013      	strh	r3, [r2, #0]
 800f50a:	e3de      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}

		//	斜め → 右45度 → 直進
		else if( (c1==R90S) && (c2<=GO32)  && (flag != 3 ) )
 800f50c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f510:	f103 030c 	add.w	r3, r3, #12
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	2b4c      	cmp	r3, #76	; 0x4c
 800f518:	d15c      	bne.n	800f5d4 <MAP_makeSkewCmdList+0x85c>
 800f51a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f51e:	f103 030a 	add.w	r3, r3, #10
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	2b20      	cmp	r3, #32
 800f526:	d855      	bhi.n	800f5d4 <MAP_makeSkewCmdList+0x85c>
 800f528:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f52c:	f103 030e 	add.w	r3, r3, #14
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	2b03      	cmp	r3, #3
 800f534:	d04e      	beq.n	800f5d4 <MAP_makeSkewCmdList+0x85c>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800f536:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f53a:	f103 030e 	add.w	r3, r3, #14
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d113      	bne.n	800f56c <MAP_makeSkewCmdList+0x7f4>
 800f544:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f548:	f103 0312 	add.w	r3, r3, #18
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f554:	f101 0112 	add.w	r1, r1, #18
 800f558:	800a      	strh	r2, [r1, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f560:	f103 0314 	add.w	r3, r3, #20
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	b2d9      	uxtb	r1, r3
 800f568:	4b7a      	ldr	r3, [pc, #488]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f56a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN45S;
 800f56c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f570:	f103 0312 	add.w	r3, r3, #18
 800f574:	881b      	ldrh	r3, [r3, #0]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f57c:	f101 0112 	add.w	r1, r1, #18
 800f580:	800a      	strh	r2, [r1, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	4b73      	ldr	r3, [pc, #460]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f586:	219d      	movs	r1, #157	; 0x9d
 800f588:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800f58a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f58e:	f103 0310 	add.w	r3, r3, #16
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	3301      	adds	r3, #1
 800f596:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f59a:	f102 020a 	add.w	r2, r2, #10
 800f59e:	8812      	ldrh	r2, [r2, #0]
 800f5a0:	3a01      	subs	r2, #1
 800f5a2:	b292      	uxth	r2, r2
 800f5a4:	f107 0118 	add.w	r1, r7, #24
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	440b      	add	r3, r1
 800f5ac:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800f5b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5b4:	f103 0310 	add.w	r3, r3, #16
 800f5b8:	881b      	ldrh	r3, [r3, #0]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f5c0:	f102 0210 	add.w	r2, r2, #16
 800f5c4:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f5c6:	2303      	movs	r3, #3
 800f5c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f5cc:	f102 020e 	add.w	r2, r2, #14
 800f5d0:	8013      	strh	r3, [r2, #0]
 800f5d2:	e37a      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左45度 → 直進
		else if( (c1==L90S) && (c2<=GO32)  && (flag != 3 ) )
 800f5d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5d8:	f103 030c 	add.w	r3, r3, #12
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	2b4d      	cmp	r3, #77	; 0x4d
 800f5e0:	d15c      	bne.n	800f69c <MAP_makeSkewCmdList+0x924>
 800f5e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5e6:	f103 030a 	add.w	r3, r3, #10
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	2b20      	cmp	r3, #32
 800f5ee:	d855      	bhi.n	800f69c <MAP_makeSkewCmdList+0x924>
 800f5f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f5f4:	f103 030e 	add.w	r3, r3, #14
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	2b03      	cmp	r3, #3
 800f5fc:	d04e      	beq.n	800f69c <MAP_makeSkewCmdList+0x924>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800f5fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f602:	f103 030e 	add.w	r3, r3, #14
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d113      	bne.n	800f634 <MAP_makeSkewCmdList+0x8bc>
 800f60c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f610:	f103 0312 	add.w	r3, r3, #18
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f61c:	f101 0112 	add.w	r1, r1, #18
 800f620:	800a      	strh	r2, [r1, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f628:	f103 0314 	add.w	r3, r3, #20
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	b2d9      	uxtb	r1, r3
 800f630:	4b48      	ldr	r3, [pc, #288]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f632:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN45S;
 800f634:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f638:	f103 0312 	add.w	r3, r3, #18
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	1c5a      	adds	r2, r3, #1
 800f640:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f644:	f101 0112 	add.w	r1, r1, #18
 800f648:	800a      	strh	r2, [r1, #0]
 800f64a:	461a      	mov	r2, r3
 800f64c:	4b41      	ldr	r3, [pc, #260]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f64e:	219e      	movs	r1, #158	; 0x9e
 800f650:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800f652:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f656:	f103 0310 	add.w	r3, r3, #16
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	3301      	adds	r3, #1
 800f65e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f662:	f102 020a 	add.w	r2, r2, #10
 800f666:	8812      	ldrh	r2, [r2, #0]
 800f668:	3a01      	subs	r2, #1
 800f66a:	b292      	uxth	r2, r2
 800f66c:	f107 0118 	add.w	r1, r7, #24
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	440b      	add	r3, r1
 800f674:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800f678:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f67c:	f103 0310 	add.w	r3, r3, #16
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	3301      	adds	r3, #1
 800f684:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f688:	f102 0210 	add.w	r2, r2, #16
 800f68c:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800f68e:	2303      	movs	r3, #3
 800f690:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f694:	f102 020e 	add.w	r2, r2, #14
 800f698:	8013      	strh	r3, [r2, #0]
 800f69a:	e316      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右90度 → 斜め
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4==L90S)  && (flag != 3 ) )
 800f69c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6a0:	f103 030c 	add.w	r3, r3, #12
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	2b4d      	cmp	r3, #77	; 0x4d
 800f6a8:	f040 8093 	bne.w	800f7d2 <MAP_makeSkewCmdList+0xa5a>
 800f6ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6b0:	f103 030a 	add.w	r3, r3, #10
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	2b4c      	cmp	r3, #76	; 0x4c
 800f6b8:	f040 808b 	bne.w	800f7d2 <MAP_makeSkewCmdList+0xa5a>
 800f6bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6c0:	f103 0308 	add.w	r3, r3, #8
 800f6c4:	881b      	ldrh	r3, [r3, #0]
 800f6c6:	2b4c      	cmp	r3, #76	; 0x4c
 800f6c8:	f040 8083 	bne.w	800f7d2 <MAP_makeSkewCmdList+0xa5a>
 800f6cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6d0:	f103 0306 	add.w	r3, r3, #6
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	2b4d      	cmp	r3, #77	; 0x4d
 800f6d8:	d17b      	bne.n	800f7d2 <MAP_makeSkewCmdList+0xa5a>
 800f6da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6de:	f103 030e 	add.w	r3, r3, #14
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	2b03      	cmp	r3, #3
 800f6e6:	d074      	beq.n	800f7d2 <MAP_makeSkewCmdList+0xa5a>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからRN90N
 800f6e8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6ec:	f103 030e 	add.w	r3, r3, #14
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10f      	bne.n	800f716 <MAP_makeSkewCmdList+0x99e>
 800f6f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f6fa:	f103 0312 	add.w	r3, r3, #18
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f706:	f101 0112 	add.w	r1, r1, #18
 800f70a:	800a      	strh	r2, [r1, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	4b11      	ldr	r3, [pc, #68]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f710:	2152      	movs	r1, #82	; 0x52
 800f712:	5499      	strb	r1, [r3, r2]
 800f714:	e036      	b.n	800f784 <MAP_makeSkewCmdList+0xa0c>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800f716:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f71a:	f103 030e 	add.w	r3, r3, #14
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d119      	bne.n	800f758 <MAP_makeSkewCmdList+0x9e0>
 800f724:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f728:	f103 0314 	add.w	r3, r3, #20
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f734:	f103 0312 	add.w	r3, r3, #18
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	1c59      	adds	r1, r3, #1
 800f73c:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f740:	f100 0012 	add.w	r0, r0, #18
 800f744:	8001      	strh	r1, [r0, #0]
 800f746:	4619      	mov	r1, r3
 800f748:	1c53      	adds	r3, r2, #1
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	4b01      	ldr	r3, [pc, #4]	; (800f754 <MAP_makeSkewCmdList+0x9dc>)
 800f74e:	545a      	strb	r2, [r3, r1]
 800f750:	e018      	b.n	800f784 <MAP_makeSkewCmdList+0xa0c>
 800f752:	bf00      	nop
 800f754:	2000d17c 	.word	0x2000d17c
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800f758:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f75c:	f103 030e 	add.w	r3, r3, #14
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d10e      	bne.n	800f784 <MAP_makeSkewCmdList+0xa0c>
 800f766:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f76a:	f103 0312 	add.w	r3, r3, #18
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f776:	f101 0112 	add.w	r1, r1, #18
 800f77a:	800a      	strh	r2, [r1, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	4ba9      	ldr	r3, [pc, #676]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f780:	2152      	movs	r1, #82	; 0x52
 800f782:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN90N;
 800f784:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f788:	f103 0312 	add.w	r3, r3, #18
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f794:	f101 0112 	add.w	r1, r1, #18
 800f798:	800a      	strh	r2, [r1, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	4ba1      	ldr	r3, [pc, #644]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f79e:	21a1      	movs	r1, #161	; 0xa1
 800f7a0:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 800f7a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7a6:	f103 0310 	add.w	r3, r3, #16
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	3302      	adds	r3, #2
 800f7ae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f7b2:	f102 0210 	add.w	r2, r2, #16
 800f7b6:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f7b8:	2351      	movs	r3, #81	; 0x51
 800f7ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f7be:	f102 0214 	add.w	r2, r2, #20
 800f7c2:	8013      	strh	r3, [r2, #0]
			flag = 1;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f7ca:	f102 020e 	add.w	r2, r2, #14
 800f7ce:	8013      	strh	r3, [r2, #0]
 800f7d0:	e27b      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左90度 → 斜め
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4==R90S)  && (flag != 3 ) )
 800f7d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7d6:	f103 030c 	add.w	r3, r3, #12
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	2b4c      	cmp	r3, #76	; 0x4c
 800f7de:	f040 808f 	bne.w	800f900 <MAP_makeSkewCmdList+0xb88>
 800f7e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7e6:	f103 030a 	add.w	r3, r3, #10
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	2b4d      	cmp	r3, #77	; 0x4d
 800f7ee:	f040 8087 	bne.w	800f900 <MAP_makeSkewCmdList+0xb88>
 800f7f2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f7f6:	f103 0308 	add.w	r3, r3, #8
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	2b4d      	cmp	r3, #77	; 0x4d
 800f7fe:	d17f      	bne.n	800f900 <MAP_makeSkewCmdList+0xb88>
 800f800:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f804:	f103 0306 	add.w	r3, r3, #6
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	2b4c      	cmp	r3, #76	; 0x4c
 800f80c:	d178      	bne.n	800f900 <MAP_makeSkewCmdList+0xb88>
 800f80e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f812:	f103 030e 	add.w	r3, r3, #14
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d071      	beq.n	800f900 <MAP_makeSkewCmdList+0xb88>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800f81c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f820:	f103 030e 	add.w	r3, r3, #14
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10f      	bne.n	800f84a <MAP_makeSkewCmdList+0xad2>
 800f82a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f82e:	f103 0312 	add.w	r3, r3, #18
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f83a:	f101 0112 	add.w	r1, r1, #18
 800f83e:	800a      	strh	r2, [r1, #0]
 800f840:	461a      	mov	r2, r3
 800f842:	4b78      	ldr	r3, [pc, #480]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f844:	2152      	movs	r1, #82	; 0x52
 800f846:	5499      	strb	r1, [r3, r2]
 800f848:	e033      	b.n	800f8b2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800f84a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f84e:	f103 030e 	add.w	r3, r3, #14
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d116      	bne.n	800f886 <MAP_makeSkewCmdList+0xb0e>
 800f858:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f85c:	f103 0314 	add.w	r3, r3, #20
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	b2da      	uxtb	r2, r3
 800f864:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f868:	f103 0312 	add.w	r3, r3, #18
 800f86c:	881b      	ldrh	r3, [r3, #0]
 800f86e:	1c59      	adds	r1, r3, #1
 800f870:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f874:	f100 0012 	add.w	r0, r0, #18
 800f878:	8001      	strh	r1, [r0, #0]
 800f87a:	4619      	mov	r1, r3
 800f87c:	1c53      	adds	r3, r2, #1
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	4b68      	ldr	r3, [pc, #416]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f882:	545a      	strb	r2, [r3, r1]
 800f884:	e015      	b.n	800f8b2 <MAP_makeSkewCmdList+0xb3a>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800f886:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f88a:	f103 030e 	add.w	r3, r3, #14
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	2b02      	cmp	r3, #2
 800f892:	d10e      	bne.n	800f8b2 <MAP_makeSkewCmdList+0xb3a>
 800f894:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f898:	f103 0312 	add.w	r3, r3, #18
 800f89c:	881b      	ldrh	r3, [r3, #0]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f8a4:	f101 0112 	add.w	r1, r1, #18
 800f8a8:	800a      	strh	r2, [r1, #0]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4b5d      	ldr	r3, [pc, #372]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f8ae:	2152      	movs	r1, #82	; 0x52
 800f8b0:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN90N;
 800f8b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8b6:	f103 0312 	add.w	r3, r3, #18
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f8c2:	f101 0112 	add.w	r1, r1, #18
 800f8c6:	800a      	strh	r2, [r1, #0]
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4b56      	ldr	r3, [pc, #344]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f8cc:	21a2      	movs	r1, #162	; 0xa2
 800f8ce:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 800f8d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f8d4:	f103 0310 	add.w	r3, r3, #16
 800f8d8:	881b      	ldrh	r3, [r3, #0]
 800f8da:	3302      	adds	r3, #2
 800f8dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f8e0:	f102 0210 	add.w	r2, r2, #16
 800f8e4:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800f8e6:	2351      	movs	r3, #81	; 0x51
 800f8e8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f8ec:	f102 0214 	add.w	r2, r2, #20
 800f8f0:	8013      	strh	r3, [r2, #0]
			flag = 1;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800f8f8:	f102 020e 	add.w	r2, r2, #14
 800f8fc:	8013      	strh	r3, [r2, #0]
 800f8fe:	e1e4      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右135度 → 直進
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4<=GO32)  && (flag != 3 ) )
 800f900:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f904:	f103 030c 	add.w	r3, r3, #12
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	2b4d      	cmp	r3, #77	; 0x4d
 800f90c:	f040 808c 	bne.w	800fa28 <MAP_makeSkewCmdList+0xcb0>
 800f910:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f914:	f103 030a 	add.w	r3, r3, #10
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	2b4c      	cmp	r3, #76	; 0x4c
 800f91c:	f040 8084 	bne.w	800fa28 <MAP_makeSkewCmdList+0xcb0>
 800f920:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f924:	f103 0308 	add.w	r3, r3, #8
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	2b4c      	cmp	r3, #76	; 0x4c
 800f92c:	d17c      	bne.n	800fa28 <MAP_makeSkewCmdList+0xcb0>
 800f92e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f932:	f103 0306 	add.w	r3, r3, #6
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	2b20      	cmp	r3, #32
 800f93a:	d875      	bhi.n	800fa28 <MAP_makeSkewCmdList+0xcb0>
 800f93c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f940:	f103 030e 	add.w	r3, r3, #14
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	2b03      	cmp	r3, #3
 800f948:	d06e      	beq.n	800fa28 <MAP_makeSkewCmdList+0xcb0>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800f94a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f94e:	f103 030e 	add.w	r3, r3, #14
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10f      	bne.n	800f978 <MAP_makeSkewCmdList+0xc00>
 800f958:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f95c:	f103 0312 	add.w	r3, r3, #18
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f968:	f101 0112 	add.w	r1, r1, #18
 800f96c:	800a      	strh	r2, [r1, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	4b2c      	ldr	r3, [pc, #176]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f972:	2152      	movs	r1, #82	; 0x52
 800f974:	5499      	strb	r1, [r3, r2]
 800f976:	e033      	b.n	800f9e0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800f978:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f97c:	f103 030e 	add.w	r3, r3, #14
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d116      	bne.n	800f9b4 <MAP_makeSkewCmdList+0xc3c>
 800f986:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f98a:	f103 0314 	add.w	r3, r3, #20
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	b2da      	uxtb	r2, r3
 800f992:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f996:	f103 0312 	add.w	r3, r3, #18
 800f99a:	881b      	ldrh	r3, [r3, #0]
 800f99c:	1c59      	adds	r1, r3, #1
 800f99e:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800f9a2:	f100 0012 	add.w	r0, r0, #18
 800f9a6:	8001      	strh	r1, [r0, #0]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	1c53      	adds	r3, r2, #1
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	4b1d      	ldr	r3, [pc, #116]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f9b0:	545a      	strb	r2, [r3, r1]
 800f9b2:	e015      	b.n	800f9e0 <MAP_makeSkewCmdList+0xc68>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800f9b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9b8:	f103 030e 	add.w	r3, r3, #14
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	d10e      	bne.n	800f9e0 <MAP_makeSkewCmdList+0xc68>
 800f9c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9c6:	f103 0312 	add.w	r3, r3, #18
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f9d2:	f101 0112 	add.w	r1, r1, #18
 800f9d6:	800a      	strh	r2, [r1, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4b12      	ldr	r3, [pc, #72]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f9dc:	2152      	movs	r1, #82	; 0x52
 800f9de:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN135S;
 800f9e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800f9e4:	f103 0312 	add.w	r3, r3, #18
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800f9f0:	f101 0112 	add.w	r1, r1, #18
 800f9f4:	800a      	strh	r2, [r1, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	4b0a      	ldr	r3, [pc, #40]	; (800fa24 <MAP_makeSkewCmdList+0xcac>)
 800f9fa:	219f      	movs	r1, #159	; 0x9f
 800f9fc:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800f9fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa02:	f103 0310 	add.w	r3, r3, #16
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	3303      	adds	r3, #3
 800fa0a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fa0e:	f102 0210 	add.w	r2, r2, #16
 800fa12:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800fa14:	2303      	movs	r3, #3
 800fa16:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fa1a:	f102 020e 	add.w	r2, r2, #14
 800fa1e:	8013      	strh	r3, [r2, #0]
 800fa20:	e153      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
 800fa22:	bf00      	nop
 800fa24:	2000d17c 	.word	0x2000d17c
		}
		//	斜め → 左135度 → 直進
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4<=GO32)  && (flag != 3 ) )
 800fa28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa2c:	f103 030c 	add.w	r3, r3, #12
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	2b4c      	cmp	r3, #76	; 0x4c
 800fa34:	f040 8089 	bne.w	800fb4a <MAP_makeSkewCmdList+0xdd2>
 800fa38:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa3c:	f103 030a 	add.w	r3, r3, #10
 800fa40:	881b      	ldrh	r3, [r3, #0]
 800fa42:	2b4d      	cmp	r3, #77	; 0x4d
 800fa44:	f040 8081 	bne.w	800fb4a <MAP_makeSkewCmdList+0xdd2>
 800fa48:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa4c:	f103 0308 	add.w	r3, r3, #8
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	2b4d      	cmp	r3, #77	; 0x4d
 800fa54:	d179      	bne.n	800fb4a <MAP_makeSkewCmdList+0xdd2>
 800fa56:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa5a:	f103 0306 	add.w	r3, r3, #6
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	2b20      	cmp	r3, #32
 800fa62:	d872      	bhi.n	800fb4a <MAP_makeSkewCmdList+0xdd2>
 800fa64:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa68:	f103 030e 	add.w	r3, r3, #14
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	2b03      	cmp	r3, #3
 800fa70:	d06b      	beq.n	800fb4a <MAP_makeSkewCmdList+0xdd2>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800fa72:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa76:	f103 030e 	add.w	r3, r3, #14
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10f      	bne.n	800faa0 <MAP_makeSkewCmdList+0xd28>
 800fa80:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fa84:	f103 0312 	add.w	r3, r3, #18
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fa90:	f101 0112 	add.w	r1, r1, #18
 800fa94:	800a      	strh	r2, [r1, #0]
 800fa96:	461a      	mov	r2, r3
 800fa98:	4b91      	ldr	r3, [pc, #580]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fa9a:	2152      	movs	r1, #82	; 0x52
 800fa9c:	5499      	strb	r1, [r3, r2]
 800fa9e:	e033      	b.n	800fb08 <MAP_makeSkewCmdList+0xd90>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800faa0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800faa4:	f103 030e 	add.w	r3, r3, #14
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d116      	bne.n	800fadc <MAP_makeSkewCmdList+0xd64>
 800faae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fab2:	f103 0314 	add.w	r3, r3, #20
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	b2da      	uxtb	r2, r3
 800faba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fabe:	f103 0312 	add.w	r3, r3, #18
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	1c59      	adds	r1, r3, #1
 800fac6:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800faca:	f100 0012 	add.w	r0, r0, #18
 800face:	8001      	strh	r1, [r0, #0]
 800fad0:	4619      	mov	r1, r3
 800fad2:	1c53      	adds	r3, r2, #1
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	4b82      	ldr	r3, [pc, #520]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fad8:	545a      	strb	r2, [r3, r1]
 800fada:	e015      	b.n	800fb08 <MAP_makeSkewCmdList+0xd90>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800fadc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fae0:	f103 030e 	add.w	r3, r3, #14
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	2b02      	cmp	r3, #2
 800fae8:	d10e      	bne.n	800fb08 <MAP_makeSkewCmdList+0xd90>
 800faea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800faee:	f103 0312 	add.w	r3, r3, #18
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fafa:	f101 0112 	add.w	r1, r1, #18
 800fafe:	800a      	strh	r2, [r1, #0]
 800fb00:	461a      	mov	r2, r3
 800fb02:	4b77      	ldr	r3, [pc, #476]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fb04:	2152      	movs	r1, #82	; 0x52
 800fb06:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN135S;
 800fb08:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb0c:	f103 0312 	add.w	r3, r3, #18
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	1c5a      	adds	r2, r3, #1
 800fb14:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800fb18:	f101 0112 	add.w	r1, r1, #18
 800fb1c:	800a      	strh	r2, [r1, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	4b6f      	ldr	r3, [pc, #444]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fb22:	21a0      	movs	r1, #160	; 0xa0
 800fb24:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800fb26:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb2a:	f103 0310 	add.w	r3, r3, #16
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	3303      	adds	r3, #3
 800fb32:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fb36:	f102 0210 	add.w	r2, r2, #16
 800fb3a:	8013      	strh	r3, [r2, #0]
			flag = 3;		///	直進
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fb42:	f102 020e 	add.w	r2, r2, #14
 800fb46:	8013      	strh	r3, [r2, #0]
 800fb48:	e0bf      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 斜め
		else if( (c1==R90S) && (c2==L90S) && ( (c3==R90S) || (c3==L90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 800fb4a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb4e:	f103 030c 	add.w	r3, r3, #12
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	2b4c      	cmp	r3, #76	; 0x4c
 800fb56:	d13f      	bne.n	800fbd8 <MAP_makeSkewCmdList+0xe60>
 800fb58:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb5c:	f103 030a 	add.w	r3, r3, #10
 800fb60:	881b      	ldrh	r3, [r3, #0]
 800fb62:	2b4d      	cmp	r3, #77	; 0x4d
 800fb64:	d138      	bne.n	800fbd8 <MAP_makeSkewCmdList+0xe60>
 800fb66:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb6a:	f103 0308 	add.w	r3, r3, #8
 800fb6e:	881b      	ldrh	r3, [r3, #0]
 800fb70:	2b4c      	cmp	r3, #76	; 0x4c
 800fb72:	d00d      	beq.n	800fb90 <MAP_makeSkewCmdList+0xe18>
 800fb74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb78:	f103 0308 	add.w	r3, r3, #8
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	2b4d      	cmp	r3, #77	; 0x4d
 800fb80:	d006      	beq.n	800fb90 <MAP_makeSkewCmdList+0xe18>
 800fb82:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb86:	f103 0308 	add.w	r3, r3, #8
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	2b20      	cmp	r3, #32
 800fb8e:	d823      	bhi.n	800fbd8 <MAP_makeSkewCmdList+0xe60>
 800fb90:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fb94:	f103 030e 	add.w	r3, r3, #14
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d01c      	beq.n	800fbd8 <MAP_makeSkewCmdList+0xe60>
		{
			x++;
 800fb9e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fba2:	f103 0314 	add.w	r3, r3, #20
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fbae:	f102 0214 	add.w	r2, r2, #20
 800fbb2:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 800fbb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbb8:	f103 0310 	add.w	r3, r3, #16
 800fbbc:	881b      	ldrh	r3, [r3, #0]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fbc4:	f102 0210 	add.w	r2, r2, #16
 800fbc8:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 800fbca:	2301      	movs	r3, #1
 800fbcc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fbd0:	f102 020e 	add.w	r2, r2, #14
 800fbd4:	8013      	strh	r3, [r2, #0]
 800fbd6:	e078      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		else if( (c1==L90S) && (c2==R90S) && ( (c3==L90S) || (c3==R90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 800fbd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbdc:	f103 030c 	add.w	r3, r3, #12
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	2b4d      	cmp	r3, #77	; 0x4d
 800fbe4:	d13f      	bne.n	800fc66 <MAP_makeSkewCmdList+0xeee>
 800fbe6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbea:	f103 030a 	add.w	r3, r3, #10
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	2b4c      	cmp	r3, #76	; 0x4c
 800fbf2:	d138      	bne.n	800fc66 <MAP_makeSkewCmdList+0xeee>
 800fbf4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fbf8:	f103 0308 	add.w	r3, r3, #8
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	2b4d      	cmp	r3, #77	; 0x4d
 800fc00:	d00d      	beq.n	800fc1e <MAP_makeSkewCmdList+0xea6>
 800fc02:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc06:	f103 0308 	add.w	r3, r3, #8
 800fc0a:	881b      	ldrh	r3, [r3, #0]
 800fc0c:	2b4c      	cmp	r3, #76	; 0x4c
 800fc0e:	d006      	beq.n	800fc1e <MAP_makeSkewCmdList+0xea6>
 800fc10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc14:	f103 0308 	add.w	r3, r3, #8
 800fc18:	881b      	ldrh	r3, [r3, #0]
 800fc1a:	2b20      	cmp	r3, #32
 800fc1c:	d823      	bhi.n	800fc66 <MAP_makeSkewCmdList+0xeee>
 800fc1e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc22:	f103 030e 	add.w	r3, r3, #14
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	d01c      	beq.n	800fc66 <MAP_makeSkewCmdList+0xeee>
		{
			//	コマンド出力
			x++;
 800fc2c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc30:	f103 0314 	add.w	r3, r3, #20
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	3301      	adds	r3, #1
 800fc38:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc3c:	f102 0214 	add.w	r2, r2, #20
 800fc40:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 800fc42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc46:	f103 0310 	add.w	r3, r3, #16
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc52:	f102 0210 	add.w	r2, r2, #16
 800fc56:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 800fc58:	2301      	movs	r3, #1
 800fc5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fc5e:	f102 020e 	add.w	r2, r2, #14
 800fc62:	8013      	strh	r3, [r2, #0]
 800fc64:	e031      	b.n	800fcca <MAP_makeSkewCmdList+0xf52>
		}
		else
		{
			tcom[ ct_n ] = scom_temp[ct_st];
 800fc66:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc6a:	f103 0310 	add.w	r3, r3, #16
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	f107 0218 	add.w	r2, r7, #24
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	4413      	add	r3, r2
 800fc78:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800fc7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc80:	f103 0312 	add.w	r3, r3, #18
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	b2d1      	uxtb	r1, r2
 800fc88:	4a15      	ldr	r2, [pc, #84]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fc8a:	54d1      	strb	r1, [r2, r3]
			if( tcom[ ct_n ] == CEND ) break;
 800fc8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fc90:	f103 0312 	add.w	r3, r3, #18
 800fc94:	881b      	ldrh	r3, [r3, #0]
 800fc96:	4a12      	ldr	r2, [pc, #72]	; (800fce0 <MAP_makeSkewCmdList+0xf68>)
 800fc98:	5cd3      	ldrb	r3, [r2, r3]
 800fc9a:	2bfa      	cmp	r3, #250	; 0xfa
 800fc9c:	d017      	beq.n	800fcce <MAP_makeSkewCmdList+0xf56>
			ct_st ++;
 800fc9e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fca2:	f103 0310 	add.w	r3, r3, #16
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fcae:	f102 0210 	add.w	r2, r2, #16
 800fcb2:	8013      	strh	r3, [r2, #0]
			ct_n ++;
 800fcb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800fcb8:	f103 0312 	add.w	r3, r3, #18
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800fcc4:	f102 0212 	add.w	r2, r2, #18
 800fcc8:	8013      	strh	r3, [r2, #0]
		c1 = scom_temp[ct_st];
 800fcca:	f7ff b8a0 	b.w	800ee0e <MAP_makeSkewCmdList+0x96>
			if( tcom[ ct_n ] == CEND ) break;
 800fcce:	bf00      	nop
		}
	}
}
 800fcd0:	bf00      	nop
 800fcd2:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800fcd6:	371c      	adds	r7, #28
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	2000d17c 	.word	0x2000d17c

0800fce4 <MAP_drive>:

void MAP_drive( enMAP_DRIVE_TYPE en_driveType )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	ed2d 8b02 	vpush	{d8}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
	uint16_t			us_rp = 0;				// 現在の読み込み位置
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	81fb      	strh	r3, [r7, #14]
	enMOT_TURN_CMD 		en_type;
	bool			bl_isWallCut = FALSE;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	733b      	strb	r3, [r7, #12]
	
	/* 超信旋回モード*/
	if( en_driveType == MAP_DRIVE_TURN )
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d15f      	bne.n	800fdc0 <MAP_drive+0xdc>
	{
		while(1)
		{
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 800fd00:	89fb      	ldrh	r3, [r7, #14]
 800fd02:	4aac      	ldr	r2, [pc, #688]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd04:	5cd3      	ldrb	r3, [r2, r3]
 800fd06:	2bfa      	cmp	r3, #250	; 0xfa
 800fd08:	d050      	beq.n	800fdac <MAP_drive+0xc8>
			
			else if ( dcom[us_rp] == STOP  ){
 800fd0a:	89fb      	ldrh	r3, [r7, #14]
 800fd0c:	4aa9      	ldr	r2, [pc, #676]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd0e:	5cd3      	ldrb	r3, [r2, r3]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d108      	bne.n	800fd26 <MAP_drive+0x42>
			 	CTRL_stop();			// 制御停止
 800fd14:	f7f5 fd2a 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800fd18:	2000      	movs	r0, #0
 800fd1a:	f7f8 fb21 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800fd1e:	2001      	movs	r0, #1
 800fd20:	f7f8 fb1e 	bl	8008360 <DCM_brakeMot>
 800fd24:	e031      	b.n	800fd8a <MAP_drive+0xa6>
			}
			else if ( ( dcom[us_rp] <=  GO71 ) && ( dcom[us_rp] >=  GO1) )
 800fd26:	89fb      	ldrh	r3, [r7, #14]
 800fd28:	4aa2      	ldr	r2, [pc, #648]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd2a:	5cd3      	ldrb	r3, [r2, r3]
 800fd2c:	2b47      	cmp	r3, #71	; 0x47
 800fd2e:	d816      	bhi.n	800fd5e <MAP_drive+0x7a>
 800fd30:	89fb      	ldrh	r3, [r7, #14]
 800fd32:	4aa0      	ldr	r2, [pc, #640]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd34:	5cd3      	ldrb	r3, [r2, r3]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d011      	beq.n	800fd5e <MAP_drive+0x7a>
			{
				MOT_goBlock_FinSpeed( (float)dcom[us_rp]*0.5f, 0 );		// 直線走行コマンド、半区間前進後に停止
 800fd3a:	89fb      	ldrh	r3, [r7, #14]
 800fd3c:	4a9d      	ldr	r2, [pc, #628]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd3e:	5cd3      	ldrb	r3, [r2, r3]
 800fd40:	ee07 3a90 	vmov	s15, r3
 800fd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fd4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd50:	eddf 0a99 	vldr	s1, [pc, #612]	; 800ffb8 <MAP_drive+0x2d4>
 800fd54:	eeb0 0a67 	vmov.f32	s0, s15
 800fd58:	f7fb fdf6 	bl	800b948 <MOT_goBlock_FinSpeed>
 800fd5c:	e015      	b.n	800fd8a <MAP_drive+0xa6>
			}
			else{
				
				if( dcom[us_rp] == R90 ) en_type = MOT_R90;
 800fd5e:	89fb      	ldrh	r3, [r7, #14]
 800fd60:	4a94      	ldr	r2, [pc, #592]	; (800ffb4 <MAP_drive+0x2d0>)
 800fd62:	5cd3      	ldrb	r3, [r2, r3]
 800fd64:	2b48      	cmp	r3, #72	; 0x48
 800fd66:	d102      	bne.n	800fd6e <MAP_drive+0x8a>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	737b      	strb	r3, [r7, #13]
 800fd6c:	e001      	b.n	800fd72 <MAP_drive+0x8e>
				else 					 en_type = MOT_L90;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	737b      	strb	r3, [r7, #13]
				
				LL_mDelay(500);
 800fd72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd76:	f005 fdeb 	bl	8015950 <LL_mDelay>
				MOT_turn( en_type );		//	旋回
 800fd7a:	7b7b      	ldrb	r3, [r7, #13]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fb ff4b 	bl	800bc18 <MOT_turn>
				LL_mDelay(500);
 800fd82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd86:	f005 fde3 	bl	8015950 <LL_mDelay>
			}
			us_rp++;
 800fd8a:	89fb      	ldrh	r3, [r7, #14]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	81fb      	strh	r3, [r7, #14]
			
			/* 途中で制御不能になった */
			if( SYS_isOutOfCtrl() == TRUE ){
 800fd90:	f7f8 fab4 	bl	80082fc <SYS_isOutOfCtrl>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d0b2      	beq.n	800fd00 <MAP_drive+0x1c>
				CTRL_stop();
 800fd9a:	f7f5 fce7 	bl	800576c <CTRL_stop>
				DCM_brakeMot(DCM_R);
 800fd9e:	2000      	movs	r0, #0
 800fda0:	f7f8 fade 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot(DCM_L);
 800fda4:	2001      	movs	r0, #1
 800fda6:	f7f8 fadb 	bl	8008360 <DCM_brakeMot>
				break;
 800fdaa:	e000      	b.n	800fdae <MAP_drive+0xca>
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 800fdac:	bf00      	nop
			}
			
		}
	 	CTRL_stop();			// 制御停止
 800fdae:	f7f5 fcdd 	bl	800576c <CTRL_stop>
		DCM_brakeMot( DCM_R );		// ブレーキ
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	f7f8 fad4 	bl	8008360 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );		// ブレーキ
 800fdb8:	2001      	movs	r0, #1
 800fdba:	f7f8 fad1 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
				break;
			}
		}
	}
}
 800fdbe:	e2c0      	b.n	8010342 <MAP_drive+0x65e>
	else if( en_driveType == MAP_DRIVE_SURA )
 800fdc0:	79fb      	ldrb	r3, [r7, #7]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	f040 80b4 	bne.w	800ff30 <MAP_drive+0x24c>
			MAP_refPos( scom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 800fdc8:	89fb      	ldrh	r3, [r7, #14]
 800fdca:	4a7c      	ldr	r2, [pc, #496]	; (800ffbc <MAP_drive+0x2d8>)
 800fdcc:	5cd3      	ldrb	r3, [r2, r3]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fd fc0c 	bl	800d5ec <MAP_refPos>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 800fdd4:	89fb      	ldrh	r3, [r7, #14]
 800fdd6:	4a79      	ldr	r2, [pc, #484]	; (800ffbc <MAP_drive+0x2d8>)
 800fdd8:	5cd3      	ldrb	r3, [r2, r3]
 800fdda:	2bfa      	cmp	r3, #250	; 0xfa
 800fddc:	f000 82ae 	beq.w	801033c <MAP_drive+0x658>
			else if ( scom[us_rp] == STOP  )
 800fde0:	89fb      	ldrh	r3, [r7, #14]
 800fde2:	4a76      	ldr	r2, [pc, #472]	; (800ffbc <MAP_drive+0x2d8>)
 800fde4:	5cd3      	ldrb	r3, [r2, r3]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d108      	bne.n	800fdfc <MAP_drive+0x118>
			 	CTRL_stop();			// 制御停止
 800fdea:	f7f5 fcbf 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800fdee:	2000      	movs	r0, #0
 800fdf0:	f7f8 fab6 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800fdf4:	2001      	movs	r0, #1
 800fdf6:	f7f8 fab3 	bl	8008360 <DCM_brakeMot>
 800fdfa:	e087      	b.n	800ff0c <MAP_drive+0x228>
			else if ( ( scom[us_rp] <=  GO71 ) && ( scom[us_rp] >=  GO1) )
 800fdfc:	89fb      	ldrh	r3, [r7, #14]
 800fdfe:	4a6f      	ldr	r2, [pc, #444]	; (800ffbc <MAP_drive+0x2d8>)
 800fe00:	5cd3      	ldrb	r3, [r2, r3]
 800fe02:	2b47      	cmp	r3, #71	; 0x47
 800fe04:	d867      	bhi.n	800fed6 <MAP_drive+0x1f2>
 800fe06:	89fb      	ldrh	r3, [r7, #14]
 800fe08:	4a6c      	ldr	r2, [pc, #432]	; (800ffbc <MAP_drive+0x2d8>)
 800fe0a:	5cd3      	ldrb	r3, [r2, r3]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d062      	beq.n	800fed6 <MAP_drive+0x1f2>
				if( scom[us_rp+1] == STOP  ){
 800fe10:	89fb      	ldrh	r3, [r7, #14]
 800fe12:	3301      	adds	r3, #1
 800fe14:	4a69      	ldr	r2, [pc, #420]	; (800ffbc <MAP_drive+0x2d8>)
 800fe16:	5cd3      	ldrb	r3, [r2, r3]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d111      	bne.n	800fe40 <MAP_drive+0x15c>
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 800fe1c:	89fb      	ldrh	r3, [r7, #14]
 800fe1e:	4a67      	ldr	r2, [pc, #412]	; (800ffbc <MAP_drive+0x2d8>)
 800fe20:	5cd3      	ldrb	r3, [r2, r3]
 800fe22:	ee07 3a90 	vmov	s15, r3
 800fe26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fe2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe32:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ffb8 <MAP_drive+0x2d4>
 800fe36:	eeb0 0a67 	vmov.f32	s0, s15
 800fe3a:	f7fb fd85 	bl	800b948 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 800fe3e:	e065      	b.n	800ff0c <MAP_drive+0x228>
					if( ( scom[us_rp+1] == R90S )   || ( scom[us_rp+1] == L90S ) ){
 800fe40:	89fb      	ldrh	r3, [r7, #14]
 800fe42:	3301      	adds	r3, #1
 800fe44:	4a5d      	ldr	r2, [pc, #372]	; (800ffbc <MAP_drive+0x2d8>)
 800fe46:	5cd3      	ldrb	r3, [r2, r3]
 800fe48:	2b4c      	cmp	r3, #76	; 0x4c
 800fe4a:	d005      	beq.n	800fe58 <MAP_drive+0x174>
 800fe4c:	89fb      	ldrh	r3, [r7, #14]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	4a5a      	ldr	r2, [pc, #360]	; (800ffbc <MAP_drive+0x2d8>)
 800fe52:	5cd3      	ldrb	r3, [r2, r3]
 800fe54:	2b4d      	cmp	r3, #77	; 0x4d
 800fe56:	d128      	bne.n	800feaa <MAP_drive+0x1c6>
						bl_isWallCut = MAP_setWallCut( scom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 800fe58:	89fb      	ldrh	r3, [r7, #14]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	4a57      	ldr	r2, [pc, #348]	; (800ffbc <MAP_drive+0x2d8>)
 800fe5e:	5cd3      	ldrb	r3, [r2, r3]
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fd fed3 	bl	800dc0c <MAP_setWallCut>
 800fe66:	4603      	mov	r3, r0
 800fe68:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 800fe6a:	7b3b      	ldrb	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d01c      	beq.n	800feaa <MAP_drive+0x1c6>
							bl_isWallCut = FALSE;
 800fe70:	2300      	movs	r3, #0
 800fe72:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 800fe74:	4b52      	ldr	r3, [pc, #328]	; (800ffc0 <MAP_drive+0x2dc>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	4a52      	ldr	r2, [pc, #328]	; (800ffc4 <MAP_drive+0x2e0>)
 800fe7c:	89fb      	ldrh	r3, [r7, #14]
 800fe7e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 800fe82:	4b4f      	ldr	r3, [pc, #316]	; (800ffc0 <MAP_drive+0x2dc>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	4b4d      	ldr	r3, [pc, #308]	; (800ffc0 <MAP_drive+0x2dc>)
 800fe8c:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 800fe8e:	4b4c      	ldr	r3, [pc, #304]	; (800ffc0 <MAP_drive+0x2dc>)
 800fe90:	881a      	ldrh	r2, [r3, #0]
 800fe92:	4b4d      	ldr	r3, [pc, #308]	; (800ffc8 <MAP_drive+0x2e4>)
 800fe94:	fba3 1302 	umull	r1, r3, r3, r2
 800fe98:	0919      	lsrs	r1, r3, #4
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	011b      	lsls	r3, r3, #4
 800fe9e:	1a5b      	subs	r3, r3, r1
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	4b46      	ldr	r3, [pc, #280]	; (800ffc0 <MAP_drive+0x2dc>)
 800fea8:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, MOT_getSuraStaSpeed() );		// 直線走行コマンド、半区間前進（最終速度あり）
 800feaa:	89fb      	ldrh	r3, [r7, #14]
 800feac:	4a43      	ldr	r2, [pc, #268]	; (800ffbc <MAP_drive+0x2d8>)
 800feae:	5cd3      	ldrb	r3, [r2, r3]
 800feb0:	ee07 3a90 	vmov	s15, r3
 800feb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800febc:	ee27 8a87 	vmul.f32	s16, s15, s14
 800fec0:	f7fc f9b0 	bl	800c224 <MOT_getSuraStaSpeed>
 800fec4:	eef0 7a40 	vmov.f32	s15, s0
 800fec8:	eef0 0a67 	vmov.f32	s1, s15
 800fecc:	eeb0 0a48 	vmov.f32	s0, s16
 800fed0:	f7fb fd3a 	bl	800b948 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 800fed4:	e01a      	b.n	800ff0c <MAP_drive+0x228>
			else if( scom[us_rp] == R90S )
 800fed6:	89fb      	ldrh	r3, [r7, #14]
 800fed8:	4a38      	ldr	r2, [pc, #224]	; (800ffbc <MAP_drive+0x2d8>)
 800feda:	5cd3      	ldrb	r3, [r2, r3]
 800fedc:	2b4c      	cmp	r3, #76	; 0x4c
 800fede:	d108      	bne.n	800fef2 <MAP_drive+0x20e>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 800fee0:	2000      	movs	r0, #0
 800fee2:	f7f3 f88f 	bl	8003004 <PARAM_getSra>
 800fee6:	4603      	mov	r3, r0
 800fee8:	4619      	mov	r1, r3
 800feea:	2000      	movs	r0, #0
 800feec:	f7fc fa20 	bl	800c330 <MOT_goSla>
 800fef0:	e00c      	b.n	800ff0c <MAP_drive+0x228>
			else if( scom[us_rp] == L90S )
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	4a31      	ldr	r2, [pc, #196]	; (800ffbc <MAP_drive+0x2d8>)
 800fef6:	5cd3      	ldrb	r3, [r2, r3]
 800fef8:	2b4d      	cmp	r3, #77	; 0x4d
 800fefa:	d107      	bne.n	800ff0c <MAP_drive+0x228>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 800fefc:	2000      	movs	r0, #0
 800fefe:	f7f3 f881 	bl	8003004 <PARAM_getSra>
 800ff02:	4603      	mov	r3, r0
 800ff04:	4619      	mov	r1, r3
 800ff06:	2001      	movs	r0, #1
 800ff08:	f7fc fa12 	bl	800c330 <MOT_goSla>
			us_rp++;
 800ff0c:	89fb      	ldrh	r3, [r7, #14]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE){
 800ff12:	f7f8 f9f3 	bl	80082fc <SYS_isOutOfCtrl>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f43f af55 	beq.w	800fdc8 <MAP_drive+0xe4>
				CTRL_stop();
 800ff1e:	f7f5 fc25 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ff22:	2000      	movs	r0, #0
 800ff24:	f7f8 fa1c 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ff28:	2001      	movs	r0, #1
 800ff2a:	f7f8 fa19 	bl	8008360 <DCM_brakeMot>
				break;
 800ff2e:	e208      	b.n	8010342 <MAP_drive+0x65e>
	else if( en_driveType == MAP_DRIVE_SKEW )
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	f040 8205 	bne.w	8010342 <MAP_drive+0x65e>
			MAP_refPos( tcom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 800ff38:	89fb      	ldrh	r3, [r7, #14]
 800ff3a:	4a24      	ldr	r2, [pc, #144]	; (800ffcc <MAP_drive+0x2e8>)
 800ff3c:	5cd3      	ldrb	r3, [r2, r3]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fd fb54 	bl	800d5ec <MAP_refPos>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 800ff44:	89fb      	ldrh	r3, [r7, #14]
 800ff46:	4a21      	ldr	r2, [pc, #132]	; (800ffcc <MAP_drive+0x2e8>)
 800ff48:	5cd3      	ldrb	r3, [r2, r3]
 800ff4a:	2bfa      	cmp	r3, #250	; 0xfa
 800ff4c:	f000 81f8 	beq.w	8010340 <MAP_drive+0x65c>
			else if ( tcom[us_rp] == STOP  )
 800ff50:	89fb      	ldrh	r3, [r7, #14]
 800ff52:	4a1e      	ldr	r2, [pc, #120]	; (800ffcc <MAP_drive+0x2e8>)
 800ff54:	5cd3      	ldrb	r3, [r2, r3]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d108      	bne.n	800ff6c <MAP_drive+0x288>
			 	CTRL_stop();			// 制御停止
 800ff5a:	f7f5 fc07 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ff5e:	2000      	movs	r0, #0
 800ff60:	f7f8 f9fe 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ff64:	2001      	movs	r0, #1
 800ff66:	f7f8 f9fb 	bl	8008360 <DCM_brakeMot>
 800ff6a:	e1cd      	b.n	8010308 <MAP_drive+0x624>
			else if ( ( tcom[us_rp] <=  GO71 ) && ( tcom[us_rp] >=  GO1) )
 800ff6c:	89fb      	ldrh	r3, [r7, #14]
 800ff6e:	4a17      	ldr	r2, [pc, #92]	; (800ffcc <MAP_drive+0x2e8>)
 800ff70:	5cd3      	ldrb	r3, [r2, r3]
 800ff72:	2b47      	cmp	r3, #71	; 0x47
 800ff74:	f200 8083 	bhi.w	801007e <MAP_drive+0x39a>
 800ff78:	89fb      	ldrh	r3, [r7, #14]
 800ff7a:	4a14      	ldr	r2, [pc, #80]	; (800ffcc <MAP_drive+0x2e8>)
 800ff7c:	5cd3      	ldrb	r3, [r2, r3]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d07d      	beq.n	801007e <MAP_drive+0x39a>
				if( tcom[us_rp+1] == STOP  ){
 800ff82:	89fb      	ldrh	r3, [r7, #14]
 800ff84:	3301      	adds	r3, #1
 800ff86:	4a11      	ldr	r2, [pc, #68]	; (800ffcc <MAP_drive+0x2e8>)
 800ff88:	5cd3      	ldrb	r3, [r2, r3]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d120      	bne.n	800ffd0 <MAP_drive+0x2ec>
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 800ff8e:	89fb      	ldrh	r3, [r7, #14]
 800ff90:	4a0e      	ldr	r2, [pc, #56]	; (800ffcc <MAP_drive+0x2e8>)
 800ff92:	5cd3      	ldrb	r3, [r2, r3]
 800ff94:	ee07 3a90 	vmov	s15, r3
 800ff98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ffa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffa4:	eddf 0a04 	vldr	s1, [pc, #16]	; 800ffb8 <MAP_drive+0x2d4>
 800ffa8:	eeb0 0a67 	vmov.f32	s0, s15
 800ffac:	f7fb fccc 	bl	800b948 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 800ffb0:	e1aa      	b.n	8010308 <MAP_drive+0x624>
 800ffb2:	bf00      	nop
 800ffb4:	2000b138 	.word	0x2000b138
 800ffb8:	00000000 	.word	0x00000000
 800ffbc:	2000c140 	.word	0x2000c140
 800ffc0:	200002c4 	.word	0x200002c4
 800ffc4:	2000d140 	.word	0x2000d140
 800ffc8:	88888889 	.word	0x88888889
 800ffcc:	2000d17c 	.word	0x2000d17c
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 800ffd0:	89fb      	ldrh	r3, [r7, #14]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	4ad5      	ldr	r2, [pc, #852]	; (801032c <MAP_drive+0x648>)
 800ffd6:	5cd3      	ldrb	r3, [r2, r3]
 800ffd8:	2b4c      	cmp	r3, #76	; 0x4c
 800ffda:	d011      	beq.n	8010000 <MAP_drive+0x31c>
 800ffdc:	89fb      	ldrh	r3, [r7, #14]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	4ad2      	ldr	r2, [pc, #840]	; (801032c <MAP_drive+0x648>)
 800ffe2:	5cd3      	ldrb	r3, [r2, r3]
 800ffe4:	2b4d      	cmp	r3, #77	; 0x4d
 800ffe6:	d00b      	beq.n	8010000 <MAP_drive+0x31c>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	3301      	adds	r3, #1
 800ffec:	4acf      	ldr	r2, [pc, #828]	; (801032c <MAP_drive+0x648>)
 800ffee:	5cd3      	ldrb	r3, [r2, r3]
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 800fff0:	2b9b      	cmp	r3, #155	; 0x9b
 800fff2:	d005      	beq.n	8010000 <MAP_drive+0x31c>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 800fff4:	89fb      	ldrh	r3, [r7, #14]
 800fff6:	3301      	adds	r3, #1
 800fff8:	4acc      	ldr	r2, [pc, #816]	; (801032c <MAP_drive+0x648>)
 800fffa:	5cd3      	ldrb	r3, [r2, r3]
 800fffc:	2b9c      	cmp	r3, #156	; 0x9c
 800fffe:	d128      	bne.n	8010052 <MAP_drive+0x36e>
						bl_isWallCut = MAP_setWallCut( tcom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 8010000:	89fb      	ldrh	r3, [r7, #14]
 8010002:	3301      	adds	r3, #1
 8010004:	4ac9      	ldr	r2, [pc, #804]	; (801032c <MAP_drive+0x648>)
 8010006:	5cd3      	ldrb	r3, [r2, r3]
 8010008:	4618      	mov	r0, r3
 801000a:	f7fd fdff 	bl	800dc0c <MAP_setWallCut>
 801000e:	4603      	mov	r3, r0
 8010010:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 8010012:	7b3b      	ldrb	r3, [r7, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d01c      	beq.n	8010052 <MAP_drive+0x36e>
							bl_isWallCut = FALSE;
 8010018:	2300      	movs	r3, #0
 801001a:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 801001c:	4bc4      	ldr	r3, [pc, #784]	; (8010330 <MAP_drive+0x64c>)
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	4619      	mov	r1, r3
 8010022:	4ac4      	ldr	r2, [pc, #784]	; (8010334 <MAP_drive+0x650>)
 8010024:	89fb      	ldrh	r3, [r7, #14]
 8010026:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 801002a:	4bc1      	ldr	r3, [pc, #772]	; (8010330 <MAP_drive+0x64c>)
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	3301      	adds	r3, #1
 8010030:	b29a      	uxth	r2, r3
 8010032:	4bbf      	ldr	r3, [pc, #764]	; (8010330 <MAP_drive+0x64c>)
 8010034:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 8010036:	4bbe      	ldr	r3, [pc, #760]	; (8010330 <MAP_drive+0x64c>)
 8010038:	881a      	ldrh	r2, [r3, #0]
 801003a:	4bbf      	ldr	r3, [pc, #764]	; (8010338 <MAP_drive+0x654>)
 801003c:	fba3 1302 	umull	r1, r3, r3, r2
 8010040:	0919      	lsrs	r1, r3, #4
 8010042:	460b      	mov	r3, r1
 8010044:	011b      	lsls	r3, r3, #4
 8010046:	1a5b      	subs	r3, r3, r1
 8010048:	005b      	lsls	r3, r3, #1
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b29a      	uxth	r2, r3
 801004e:	4bb8      	ldr	r3, [pc, #736]	; (8010330 <MAP_drive+0x64c>)
 8010050:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSuraStaSpeed() );		// 直線走行コマンド、半区間前進（最終速度あり）
 8010052:	89fb      	ldrh	r3, [r7, #14]
 8010054:	4ab5      	ldr	r2, [pc, #724]	; (801032c <MAP_drive+0x648>)
 8010056:	5cd3      	ldrb	r3, [r2, r3]
 8010058:	ee07 3a90 	vmov	s15, r3
 801005c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010060:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010064:	ee27 8a87 	vmul.f32	s16, s15, s14
 8010068:	f7fc f8dc 	bl	800c224 <MOT_getSuraStaSpeed>
 801006c:	eef0 7a40 	vmov.f32	s15, s0
 8010070:	eef0 0a67 	vmov.f32	s1, s15
 8010074:	eeb0 0a48 	vmov.f32	s0, s16
 8010078:	f7fb fc66 	bl	800b948 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 801007c:	e144      	b.n	8010308 <MAP_drive+0x624>
			else if ( ( tcom[us_rp] <=  NGO71 ) && ( tcom[us_rp] >=  NGO1) )
 801007e:	89fb      	ldrh	r3, [r7, #14]
 8010080:	4aaa      	ldr	r2, [pc, #680]	; (801032c <MAP_drive+0x648>)
 8010082:	5cd3      	ldrb	r3, [r2, r3]
 8010084:	2b98      	cmp	r3, #152	; 0x98
 8010086:	d81b      	bhi.n	80100c0 <MAP_drive+0x3dc>
 8010088:	89fb      	ldrh	r3, [r7, #14]
 801008a:	4aa8      	ldr	r2, [pc, #672]	; (801032c <MAP_drive+0x648>)
 801008c:	5cd3      	ldrb	r3, [r2, r3]
 801008e:	2b51      	cmp	r3, #81	; 0x51
 8010090:	d916      	bls.n	80100c0 <MAP_drive+0x3dc>
				MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSuraStaSpeed());	// 斜め直線走行コマンド、半区間前進（最終速度あり）
 8010092:	89fb      	ldrh	r3, [r7, #14]
 8010094:	4aa5      	ldr	r2, [pc, #660]	; (801032c <MAP_drive+0x648>)
 8010096:	5cd3      	ldrb	r3, [r2, r3]
 8010098:	3b51      	subs	r3, #81	; 0x51
 801009a:	ee07 3a90 	vmov	s15, r3
 801009e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80100a6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80100aa:	f7fc f8bb 	bl	800c224 <MOT_getSuraStaSpeed>
 80100ae:	eef0 7a40 	vmov.f32	s15, s0
 80100b2:	eef0 0a67 	vmov.f32	s1, s15
 80100b6:	eeb0 0a48 	vmov.f32	s0, s16
 80100ba:	f7fb fc57 	bl	800b96c <MOT_goSkewBlock_FinSpeed>
 80100be:	e123      	b.n	8010308 <MAP_drive+0x624>
				switch( tcom[us_rp] )
 80100c0:	89fb      	ldrh	r3, [r7, #14]
 80100c2:	4a9a      	ldr	r2, [pc, #616]	; (801032c <MAP_drive+0x648>)
 80100c4:	5cd3      	ldrb	r3, [r2, r3]
 80100c6:	3b4c      	subs	r3, #76	; 0x4c
 80100c8:	2b56      	cmp	r3, #86	; 0x56
 80100ca:	f200 811d 	bhi.w	8010308 <MAP_drive+0x624>
 80100ce:	a201      	add	r2, pc, #4	; (adr r2, 80100d4 <MAP_drive+0x3f0>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	08010231 	.word	0x08010231
 80100d8:	08010243 	.word	0x08010243
 80100dc:	08010309 	.word	0x08010309
 80100e0:	08010309 	.word	0x08010309
 80100e4:	08010309 	.word	0x08010309
 80100e8:	08010309 	.word	0x08010309
 80100ec:	08010309 	.word	0x08010309
 80100f0:	08010309 	.word	0x08010309
 80100f4:	08010309 	.word	0x08010309
 80100f8:	08010309 	.word	0x08010309
 80100fc:	08010309 	.word	0x08010309
 8010100:	08010309 	.word	0x08010309
 8010104:	08010309 	.word	0x08010309
 8010108:	08010309 	.word	0x08010309
 801010c:	08010309 	.word	0x08010309
 8010110:	08010309 	.word	0x08010309
 8010114:	08010309 	.word	0x08010309
 8010118:	08010309 	.word	0x08010309
 801011c:	08010309 	.word	0x08010309
 8010120:	08010309 	.word	0x08010309
 8010124:	08010309 	.word	0x08010309
 8010128:	08010309 	.word	0x08010309
 801012c:	08010309 	.word	0x08010309
 8010130:	08010309 	.word	0x08010309
 8010134:	08010309 	.word	0x08010309
 8010138:	08010309 	.word	0x08010309
 801013c:	08010309 	.word	0x08010309
 8010140:	08010309 	.word	0x08010309
 8010144:	08010309 	.word	0x08010309
 8010148:	08010309 	.word	0x08010309
 801014c:	08010309 	.word	0x08010309
 8010150:	08010309 	.word	0x08010309
 8010154:	08010309 	.word	0x08010309
 8010158:	08010309 	.word	0x08010309
 801015c:	08010309 	.word	0x08010309
 8010160:	08010309 	.word	0x08010309
 8010164:	08010309 	.word	0x08010309
 8010168:	08010309 	.word	0x08010309
 801016c:	08010309 	.word	0x08010309
 8010170:	08010309 	.word	0x08010309
 8010174:	08010309 	.word	0x08010309
 8010178:	08010309 	.word	0x08010309
 801017c:	08010309 	.word	0x08010309
 8010180:	08010309 	.word	0x08010309
 8010184:	08010309 	.word	0x08010309
 8010188:	08010309 	.word	0x08010309
 801018c:	08010309 	.word	0x08010309
 8010190:	08010309 	.word	0x08010309
 8010194:	08010309 	.word	0x08010309
 8010198:	08010309 	.word	0x08010309
 801019c:	08010309 	.word	0x08010309
 80101a0:	08010309 	.word	0x08010309
 80101a4:	08010309 	.word	0x08010309
 80101a8:	08010309 	.word	0x08010309
 80101ac:	08010309 	.word	0x08010309
 80101b0:	08010309 	.word	0x08010309
 80101b4:	08010309 	.word	0x08010309
 80101b8:	08010309 	.word	0x08010309
 80101bc:	08010309 	.word	0x08010309
 80101c0:	08010309 	.word	0x08010309
 80101c4:	08010309 	.word	0x08010309
 80101c8:	08010309 	.word	0x08010309
 80101cc:	08010309 	.word	0x08010309
 80101d0:	08010309 	.word	0x08010309
 80101d4:	08010309 	.word	0x08010309
 80101d8:	08010309 	.word	0x08010309
 80101dc:	08010309 	.word	0x08010309
 80101e0:	08010309 	.word	0x08010309
 80101e4:	08010309 	.word	0x08010309
 80101e8:	08010309 	.word	0x08010309
 80101ec:	08010309 	.word	0x08010309
 80101f0:	08010309 	.word	0x08010309
 80101f4:	08010309 	.word	0x08010309
 80101f8:	08010309 	.word	0x08010309
 80101fc:	08010309 	.word	0x08010309
 8010200:	08010309 	.word	0x08010309
 8010204:	08010309 	.word	0x08010309
 8010208:	08010255 	.word	0x08010255
 801020c:	08010267 	.word	0x08010267
 8010210:	08010279 	.word	0x08010279
 8010214:	0801028b 	.word	0x0801028b
 8010218:	0801029d 	.word	0x0801029d
 801021c:	080102af 	.word	0x080102af
 8010220:	080102c1 	.word	0x080102c1
 8010224:	080102d3 	.word	0x080102d3
 8010228:	080102e5 	.word	0x080102e5
 801022c:	080102f7 	.word	0x080102f7
					case R90S:		MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );			break;
 8010230:	2000      	movs	r0, #0
 8010232:	f7f2 fee7 	bl	8003004 <PARAM_getSra>
 8010236:	4603      	mov	r3, r0
 8010238:	4619      	mov	r1, r3
 801023a:	2000      	movs	r0, #0
 801023c:	f7fc f878 	bl	800c330 <MOT_goSla>
 8010240:	e062      	b.n	8010308 <MAP_drive+0x624>
					case L90S:		MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );			break;
 8010242:	2000      	movs	r0, #0
 8010244:	f7f2 fede 	bl	8003004 <PARAM_getSra>
 8010248:	4603      	mov	r3, r0
 801024a:	4619      	mov	r1, r3
 801024c:	2001      	movs	r0, #1
 801024e:	f7fc f86f 	bl	800c330 <MOT_goSla>
 8010252:	e059      	b.n	8010308 <MAP_drive+0x624>
					case RS45N:		MOT_goSla( MOT_R45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8010254:	2001      	movs	r0, #1
 8010256:	f7f2 fed5 	bl	8003004 <PARAM_getSra>
 801025a:	4603      	mov	r3, r0
 801025c:	4619      	mov	r1, r3
 801025e:	2002      	movs	r0, #2
 8010260:	f7fc f866 	bl	800c330 <MOT_goSla>
 8010264:	e050      	b.n	8010308 <MAP_drive+0x624>
					case LS45N:		MOT_goSla( MOT_L45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 8010266:	2001      	movs	r0, #1
 8010268:	f7f2 fecc 	bl	8003004 <PARAM_getSra>
 801026c:	4603      	mov	r3, r0
 801026e:	4619      	mov	r1, r3
 8010270:	2003      	movs	r0, #3
 8010272:	f7fc f85d 	bl	800c330 <MOT_goSla>
 8010276:	e047      	b.n	8010308 <MAP_drive+0x624>
					case RS135N:	MOT_goSla( MOT_R135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 8010278:	2002      	movs	r0, #2
 801027a:	f7f2 fec3 	bl	8003004 <PARAM_getSra>
 801027e:	4603      	mov	r3, r0
 8010280:	4619      	mov	r1, r3
 8010282:	2008      	movs	r0, #8
 8010284:	f7fc f854 	bl	800c330 <MOT_goSla>
 8010288:	e03e      	b.n	8010308 <MAP_drive+0x624>
					case LS135N:	MOT_goSla( MOT_L135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 801028a:	2002      	movs	r0, #2
 801028c:	f7f2 feba 	bl	8003004 <PARAM_getSra>
 8010290:	4603      	mov	r3, r0
 8010292:	4619      	mov	r1, r3
 8010294:	2009      	movs	r0, #9
 8010296:	f7fc f84b 	bl	800c330 <MOT_goSla>
 801029a:	e035      	b.n	8010308 <MAP_drive+0x624>
					case RN45S:		MOT_goSla( MOT_R45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 801029c:	2001      	movs	r0, #1
 801029e:	f7f2 feb1 	bl	8003004 <PARAM_getSra>
 80102a2:	4603      	mov	r3, r0
 80102a4:	4619      	mov	r1, r3
 80102a6:	2004      	movs	r0, #4
 80102a8:	f7fc f842 	bl	800c330 <MOT_goSla>
 80102ac:	e02c      	b.n	8010308 <MAP_drive+0x624>
					case LN45S:		MOT_goSla( MOT_L45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 80102ae:	2001      	movs	r0, #1
 80102b0:	f7f2 fea8 	bl	8003004 <PARAM_getSra>
 80102b4:	4603      	mov	r3, r0
 80102b6:	4619      	mov	r1, r3
 80102b8:	2005      	movs	r0, #5
 80102ba:	f7fc f839 	bl	800c330 <MOT_goSla>
 80102be:	e023      	b.n	8010308 <MAP_drive+0x624>
					case RN135S:	MOT_goSla( MOT_R135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 80102c0:	2002      	movs	r0, #2
 80102c2:	f7f2 fe9f 	bl	8003004 <PARAM_getSra>
 80102c6:	4603      	mov	r3, r0
 80102c8:	4619      	mov	r1, r3
 80102ca:	200a      	movs	r0, #10
 80102cc:	f7fc f830 	bl	800c330 <MOT_goSla>
 80102d0:	e01a      	b.n	8010308 <MAP_drive+0x624>
					case LN135S:	MOT_goSla( MOT_L135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 80102d2:	2002      	movs	r0, #2
 80102d4:	f7f2 fe96 	bl	8003004 <PARAM_getSra>
 80102d8:	4603      	mov	r3, r0
 80102da:	4619      	mov	r1, r3
 80102dc:	200b      	movs	r0, #11
 80102de:	f7fc f827 	bl	800c330 <MOT_goSla>
 80102e2:	e011      	b.n	8010308 <MAP_drive+0x624>
					case RN90N:		MOT_goSla( MOT_R90S_N, PARAM_getSra( SLA_N90 ) ); 		break;
 80102e4:	2003      	movs	r0, #3
 80102e6:	f7f2 fe8d 	bl	8003004 <PARAM_getSra>
 80102ea:	4603      	mov	r3, r0
 80102ec:	4619      	mov	r1, r3
 80102ee:	2006      	movs	r0, #6
 80102f0:	f7fc f81e 	bl	800c330 <MOT_goSla>
 80102f4:	e008      	b.n	8010308 <MAP_drive+0x624>
					case LN90N:		MOT_goSla( MOT_L90S_N, PARAM_getSra( SLA_N90 ) );		break;
 80102f6:	2003      	movs	r0, #3
 80102f8:	f7f2 fe84 	bl	8003004 <PARAM_getSra>
 80102fc:	4603      	mov	r3, r0
 80102fe:	4619      	mov	r1, r3
 8010300:	2007      	movs	r0, #7
 8010302:	f7fc f815 	bl	800c330 <MOT_goSla>
 8010306:	bf00      	nop
			us_rp++;
 8010308:	89fb      	ldrh	r3, [r7, #14]
 801030a:	3301      	adds	r3, #1
 801030c:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE ){
 801030e:	f7f7 fff5 	bl	80082fc <SYS_isOutOfCtrl>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	f43f ae0f 	beq.w	800ff38 <MAP_drive+0x254>
				CTRL_stop();
 801031a:	f7f5 fa27 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 801031e:	2000      	movs	r0, #0
 8010320:	f7f8 f81e 	bl	8008360 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 8010324:	2001      	movs	r0, #1
 8010326:	f7f8 f81b 	bl	8008360 <DCM_brakeMot>
				break;
 801032a:	e00a      	b.n	8010342 <MAP_drive+0x65e>
 801032c:	2000d17c 	.word	0x2000d17c
 8010330:	200002c4 	.word	0x200002c4
 8010334:	2000d140 	.word	0x2000d140
 8010338:	88888889 	.word	0x88888889
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 801033c:	bf00      	nop
 801033e:	e000      	b.n	8010342 <MAP_drive+0x65e>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 8010340:	bf00      	nop
}
 8010342:	bf00      	nop
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	ecbd 8b02 	vpop	{d8}
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop

08010350 <MAP_searchCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 8010350:	b490      	push	{r4, r7}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	4604      	mov	r4, r0
 8010358:	4608      	mov	r0, r1
 801035a:	4611      	mov	r1, r2
 801035c:	461a      	mov	r2, r3
 801035e:	4623      	mov	r3, r4
 8010360:	71fb      	strb	r3, [r7, #7]
 8010362:	4603      	mov	r3, r0
 8010364:	71bb      	strb	r3, [r7, #6]
 8010366:	460b      	mov	r3, r1
 8010368:	717b      	strb	r3, [r7, #5]
 801036a:	4613      	mov	r3, r2
 801036c:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	73bb      	strb	r3, [r7, #14]
	us_pt = 0;
 8010372:	2300      	movs	r3, #0
 8010374:	81bb      	strh	r3, [r7, #12]
//	printf("mx%d,my%d\n", uc_staX, uc_staY);
	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_cmap[uc_staY][uc_staX] - 1;
 8010376:	79ba      	ldrb	r2, [r7, #6]
 8010378:	79fb      	ldrb	r3, [r7, #7]
 801037a:	499b      	ldr	r1, [pc, #620]	; (80105e8 <MAP_searchCmdList+0x298>)
 801037c:	0152      	lsls	r2, r2, #5
 801037e:	4413      	add	r3, r2
 8010380:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010384:	3b01      	subs	r3, #1
 8010386:	817b      	strh	r3, [r7, #10]
		if ((g_sysMap[uc_staY][uc_staX]&0xf0) != 0xf0){
 8010388:	79ba      	ldrb	r2, [r7, #6]
 801038a:	79fb      	ldrb	r3, [r7, #7]
 801038c:	4997      	ldr	r1, [pc, #604]	; (80105ec <MAP_searchCmdList+0x29c>)
 801038e:	0152      	lsls	r2, r2, #5
 8010390:	440a      	add	r2, r1
 8010392:	4413      	add	r3, r2
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801039a:	2bf0      	cmp	r3, #240	; 0xf0
 801039c:	d006      	beq.n	80103ac <MAP_searchCmdList+0x5c>
			Return_X = uc_staX;
 801039e:	4a94      	ldr	r2, [pc, #592]	; (80105f0 <MAP_searchCmdList+0x2a0>)
 80103a0:	79fb      	ldrb	r3, [r7, #7]
 80103a2:	7013      	strb	r3, [r2, #0]
			Return_Y = uc_staY;
 80103a4:	4a93      	ldr	r2, [pc, #588]	; (80105f4 <MAP_searchCmdList+0x2a4>)
 80103a6:	79bb      	ldrb	r3, [r7, #6]
 80103a8:	7013      	strb	r3, [r2, #0]
			break;
 80103aa:	e1dd      	b.n	8010768 <MAP_searchCmdList+0x418>
		}

		if (en_staDir == NORTH) {
 80103ac:	797b      	ldrb	r3, [r7, #5]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d164      	bne.n	801047c <MAP_searchCmdList+0x12c>
			if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80103b2:	79ba      	ldrb	r2, [r7, #6]
 80103b4:	79fb      	ldrb	r3, [r7, #7]
 80103b6:	498d      	ldr	r1, [pc, #564]	; (80105ec <MAP_searchCmdList+0x29c>)
 80103b8:	0152      	lsls	r2, r2, #5
 80103ba:	440a      	add	r2, r1
 80103bc:	4413      	add	r3, r2
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	f003 0311 	and.w	r3, r3, #17
 80103c4:	2b10      	cmp	r3, #16
 80103c6:	d10d      	bne.n	80103e4 <MAP_searchCmdList+0x94>
 80103c8:	79bb      	ldrb	r3, [r7, #6]
 80103ca:	1c5a      	adds	r2, r3, #1
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	4986      	ldr	r1, [pc, #536]	; (80105e8 <MAP_searchCmdList+0x298>)
 80103d0:	0152      	lsls	r2, r2, #5
 80103d2:	4413      	add	r3, r2
 80103d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80103d8:	897a      	ldrh	r2, [r7, #10]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d102      	bne.n	80103e4 <MAP_searchCmdList+0x94>
 80103de:	2300      	movs	r3, #0
 80103e0:	73fb      	strb	r3, [r7, #15]
 80103e2:	e18b      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80103e4:	79ba      	ldrb	r2, [r7, #6]
 80103e6:	79fb      	ldrb	r3, [r7, #7]
 80103e8:	4980      	ldr	r1, [pc, #512]	; (80105ec <MAP_searchCmdList+0x29c>)
 80103ea:	0152      	lsls	r2, r2, #5
 80103ec:	440a      	add	r2, r1
 80103ee:	4413      	add	r3, r2
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80103f6:	2b20      	cmp	r3, #32
 80103f8:	d10d      	bne.n	8010416 <MAP_searchCmdList+0xc6>
 80103fa:	79ba      	ldrb	r2, [r7, #6]
 80103fc:	79fb      	ldrb	r3, [r7, #7]
 80103fe:	3301      	adds	r3, #1
 8010400:	4979      	ldr	r1, [pc, #484]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010402:	0152      	lsls	r2, r2, #5
 8010404:	4413      	add	r3, r2
 8010406:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801040a:	897a      	ldrh	r2, [r7, #10]
 801040c:	429a      	cmp	r2, r3
 801040e:	d102      	bne.n	8010416 <MAP_searchCmdList+0xc6>
 8010410:	2301      	movs	r3, #1
 8010412:	73fb      	strb	r3, [r7, #15]
 8010414:	e172      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8010416:	79ba      	ldrb	r2, [r7, #6]
 8010418:	79fb      	ldrb	r3, [r7, #7]
 801041a:	4974      	ldr	r1, [pc, #464]	; (80105ec <MAP_searchCmdList+0x29c>)
 801041c:	0152      	lsls	r2, r2, #5
 801041e:	440a      	add	r2, r1
 8010420:	4413      	add	r3, r2
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010428:	2b80      	cmp	r3, #128	; 0x80
 801042a:	d10d      	bne.n	8010448 <MAP_searchCmdList+0xf8>
 801042c:	79ba      	ldrb	r2, [r7, #6]
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	3b01      	subs	r3, #1
 8010432:	496d      	ldr	r1, [pc, #436]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010434:	0152      	lsls	r2, r2, #5
 8010436:	4413      	add	r3, r2
 8010438:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801043c:	897a      	ldrh	r2, [r7, #10]
 801043e:	429a      	cmp	r2, r3
 8010440:	d102      	bne.n	8010448 <MAP_searchCmdList+0xf8>
 8010442:	2303      	movs	r3, #3
 8010444:	73fb      	strb	r3, [r7, #15]
 8010446:	e159      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010448:	79ba      	ldrb	r2, [r7, #6]
 801044a:	79fb      	ldrb	r3, [r7, #7]
 801044c:	4967      	ldr	r1, [pc, #412]	; (80105ec <MAP_searchCmdList+0x29c>)
 801044e:	0152      	lsls	r2, r2, #5
 8010450:	440a      	add	r2, r1
 8010452:	4413      	add	r3, r2
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801045a:	2b40      	cmp	r3, #64	; 0x40
 801045c:	d10d      	bne.n	801047a <MAP_searchCmdList+0x12a>
 801045e:	79bb      	ldrb	r3, [r7, #6]
 8010460:	1e5a      	subs	r2, r3, #1
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	4960      	ldr	r1, [pc, #384]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010466:	0152      	lsls	r2, r2, #5
 8010468:	4413      	add	r3, r2
 801046a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801046e:	897a      	ldrh	r2, [r7, #10]
 8010470:	429a      	cmp	r2, r3
 8010472:	d102      	bne.n	801047a <MAP_searchCmdList+0x12a>
 8010474:	2302      	movs	r3, #2
 8010476:	73fb      	strb	r3, [r7, #15]
 8010478:	e140      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else   while (1);
 801047a:	e7fe      	b.n	801047a <MAP_searchCmdList+0x12a>
		}
		else if (en_staDir == EAST) {
 801047c:	797b      	ldrb	r3, [r7, #5]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d164      	bne.n	801054c <MAP_searchCmdList+0x1fc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8010482:	79ba      	ldrb	r2, [r7, #6]
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	4959      	ldr	r1, [pc, #356]	; (80105ec <MAP_searchCmdList+0x29c>)
 8010488:	0152      	lsls	r2, r2, #5
 801048a:	440a      	add	r2, r1
 801048c:	4413      	add	r3, r2
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010494:	2b20      	cmp	r3, #32
 8010496:	d10d      	bne.n	80104b4 <MAP_searchCmdList+0x164>
 8010498:	79ba      	ldrb	r2, [r7, #6]
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	3301      	adds	r3, #1
 801049e:	4952      	ldr	r1, [pc, #328]	; (80105e8 <MAP_searchCmdList+0x298>)
 80104a0:	0152      	lsls	r2, r2, #5
 80104a2:	4413      	add	r3, r2
 80104a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104a8:	897a      	ldrh	r2, [r7, #10]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d102      	bne.n	80104b4 <MAP_searchCmdList+0x164>
 80104ae:	2301      	movs	r3, #1
 80104b0:	73fb      	strb	r3, [r7, #15]
 80104b2:	e123      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80104b4:	79ba      	ldrb	r2, [r7, #6]
 80104b6:	79fb      	ldrb	r3, [r7, #7]
 80104b8:	494c      	ldr	r1, [pc, #304]	; (80105ec <MAP_searchCmdList+0x29c>)
 80104ba:	0152      	lsls	r2, r2, #5
 80104bc:	440a      	add	r2, r1
 80104be:	4413      	add	r3, r2
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	f003 0311 	and.w	r3, r3, #17
 80104c6:	2b10      	cmp	r3, #16
 80104c8:	d10d      	bne.n	80104e6 <MAP_searchCmdList+0x196>
 80104ca:	79bb      	ldrb	r3, [r7, #6]
 80104cc:	1c5a      	adds	r2, r3, #1
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	4945      	ldr	r1, [pc, #276]	; (80105e8 <MAP_searchCmdList+0x298>)
 80104d2:	0152      	lsls	r2, r2, #5
 80104d4:	4413      	add	r3, r2
 80104d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104da:	897a      	ldrh	r2, [r7, #10]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d102      	bne.n	80104e6 <MAP_searchCmdList+0x196>
 80104e0:	2300      	movs	r3, #0
 80104e2:	73fb      	strb	r3, [r7, #15]
 80104e4:	e10a      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 80104e6:	79ba      	ldrb	r2, [r7, #6]
 80104e8:	79fb      	ldrb	r3, [r7, #7]
 80104ea:	4940      	ldr	r1, [pc, #256]	; (80105ec <MAP_searchCmdList+0x29c>)
 80104ec:	0152      	lsls	r2, r2, #5
 80104ee:	440a      	add	r2, r1
 80104f0:	4413      	add	r3, r2
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80104f8:	2b40      	cmp	r3, #64	; 0x40
 80104fa:	d10d      	bne.n	8010518 <MAP_searchCmdList+0x1c8>
 80104fc:	79bb      	ldrb	r3, [r7, #6]
 80104fe:	1e5a      	subs	r2, r3, #1
 8010500:	79fb      	ldrb	r3, [r7, #7]
 8010502:	4939      	ldr	r1, [pc, #228]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010504:	0152      	lsls	r2, r2, #5
 8010506:	4413      	add	r3, r2
 8010508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801050c:	897a      	ldrh	r2, [r7, #10]
 801050e:	429a      	cmp	r2, r3
 8010510:	d102      	bne.n	8010518 <MAP_searchCmdList+0x1c8>
 8010512:	2302      	movs	r3, #2
 8010514:	73fb      	strb	r3, [r7, #15]
 8010516:	e0f1      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8010518:	79ba      	ldrb	r2, [r7, #6]
 801051a:	79fb      	ldrb	r3, [r7, #7]
 801051c:	4933      	ldr	r1, [pc, #204]	; (80105ec <MAP_searchCmdList+0x29c>)
 801051e:	0152      	lsls	r2, r2, #5
 8010520:	440a      	add	r2, r1
 8010522:	4413      	add	r3, r2
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801052a:	2b80      	cmp	r3, #128	; 0x80
 801052c:	d10d      	bne.n	801054a <MAP_searchCmdList+0x1fa>
 801052e:	79ba      	ldrb	r2, [r7, #6]
 8010530:	79fb      	ldrb	r3, [r7, #7]
 8010532:	3b01      	subs	r3, #1
 8010534:	492c      	ldr	r1, [pc, #176]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010536:	0152      	lsls	r2, r2, #5
 8010538:	4413      	add	r3, r2
 801053a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801053e:	897a      	ldrh	r2, [r7, #10]
 8010540:	429a      	cmp	r2, r3
 8010542:	d102      	bne.n	801054a <MAP_searchCmdList+0x1fa>
 8010544:	2303      	movs	r3, #3
 8010546:	73fb      	strb	r3, [r7, #15]
 8010548:	e0d8      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else   while (1);
 801054a:	e7fe      	b.n	801054a <MAP_searchCmdList+0x1fa>
		}
		else if (en_staDir == SOUTH) {
 801054c:	797b      	ldrb	r3, [r7, #5]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d16c      	bne.n	801062c <MAP_searchCmdList+0x2dc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010552:	79ba      	ldrb	r2, [r7, #6]
 8010554:	79fb      	ldrb	r3, [r7, #7]
 8010556:	4925      	ldr	r1, [pc, #148]	; (80105ec <MAP_searchCmdList+0x29c>)
 8010558:	0152      	lsls	r2, r2, #5
 801055a:	440a      	add	r2, r1
 801055c:	4413      	add	r3, r2
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010564:	2b40      	cmp	r3, #64	; 0x40
 8010566:	d10d      	bne.n	8010584 <MAP_searchCmdList+0x234>
 8010568:	79bb      	ldrb	r3, [r7, #6]
 801056a:	1e5a      	subs	r2, r3, #1
 801056c:	79fb      	ldrb	r3, [r7, #7]
 801056e:	491e      	ldr	r1, [pc, #120]	; (80105e8 <MAP_searchCmdList+0x298>)
 8010570:	0152      	lsls	r2, r2, #5
 8010572:	4413      	add	r3, r2
 8010574:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010578:	897a      	ldrh	r2, [r7, #10]
 801057a:	429a      	cmp	r2, r3
 801057c:	d102      	bne.n	8010584 <MAP_searchCmdList+0x234>
 801057e:	2302      	movs	r3, #2
 8010580:	73fb      	strb	r3, [r7, #15]
 8010582:	e0bb      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 8010584:	79ba      	ldrb	r2, [r7, #6]
 8010586:	79fb      	ldrb	r3, [r7, #7]
 8010588:	4918      	ldr	r1, [pc, #96]	; (80105ec <MAP_searchCmdList+0x29c>)
 801058a:	0152      	lsls	r2, r2, #5
 801058c:	440a      	add	r2, r1
 801058e:	4413      	add	r3, r2
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010596:	2b20      	cmp	r3, #32
 8010598:	d10d      	bne.n	80105b6 <MAP_searchCmdList+0x266>
 801059a:	79ba      	ldrb	r2, [r7, #6]
 801059c:	79fb      	ldrb	r3, [r7, #7]
 801059e:	3301      	adds	r3, #1
 80105a0:	4911      	ldr	r1, [pc, #68]	; (80105e8 <MAP_searchCmdList+0x298>)
 80105a2:	0152      	lsls	r2, r2, #5
 80105a4:	4413      	add	r3, r2
 80105a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105aa:	897a      	ldrh	r2, [r7, #10]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d102      	bne.n	80105b6 <MAP_searchCmdList+0x266>
 80105b0:	2301      	movs	r3, #1
 80105b2:	73fb      	strb	r3, [r7, #15]
 80105b4:	e0a2      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 80105b6:	79ba      	ldrb	r2, [r7, #6]
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	490c      	ldr	r1, [pc, #48]	; (80105ec <MAP_searchCmdList+0x29c>)
 80105bc:	0152      	lsls	r2, r2, #5
 80105be:	440a      	add	r2, r1
 80105c0:	4413      	add	r3, r2
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80105c8:	2b80      	cmp	r3, #128	; 0x80
 80105ca:	d115      	bne.n	80105f8 <MAP_searchCmdList+0x2a8>
 80105cc:	79ba      	ldrb	r2, [r7, #6]
 80105ce:	79fb      	ldrb	r3, [r7, #7]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	4905      	ldr	r1, [pc, #20]	; (80105e8 <MAP_searchCmdList+0x298>)
 80105d4:	0152      	lsls	r2, r2, #5
 80105d6:	4413      	add	r3, r2
 80105d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105dc:	897a      	ldrh	r2, [r7, #10]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d10a      	bne.n	80105f8 <MAP_searchCmdList+0x2a8>
 80105e2:	2303      	movs	r3, #3
 80105e4:	73fb      	strb	r3, [r7, #15]
 80105e6:	e089      	b.n	80106fc <MAP_searchCmdList+0x3ac>
 80105e8:	20000b2c 	.word	0x20000b2c
 80105ec:	20000708 	.word	0x20000708
 80105f0:	200002e1 	.word	0x200002e1
 80105f4:	200006ed 	.word	0x200006ed
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 80105f8:	79ba      	ldrb	r2, [r7, #6]
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	495e      	ldr	r1, [pc, #376]	; (8010778 <MAP_searchCmdList+0x428>)
 80105fe:	0152      	lsls	r2, r2, #5
 8010600:	440a      	add	r2, r1
 8010602:	4413      	add	r3, r2
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	f003 0311 	and.w	r3, r3, #17
 801060a:	2b10      	cmp	r3, #16
 801060c:	d10d      	bne.n	801062a <MAP_searchCmdList+0x2da>
 801060e:	79bb      	ldrb	r3, [r7, #6]
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	79fb      	ldrb	r3, [r7, #7]
 8010614:	4959      	ldr	r1, [pc, #356]	; (801077c <MAP_searchCmdList+0x42c>)
 8010616:	0152      	lsls	r2, r2, #5
 8010618:	4413      	add	r3, r2
 801061a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801061e:	897a      	ldrh	r2, [r7, #10]
 8010620:	429a      	cmp	r2, r3
 8010622:	d102      	bne.n	801062a <MAP_searchCmdList+0x2da>
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]
 8010628:	e068      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else   while (1);
 801062a:	e7fe      	b.n	801062a <MAP_searchCmdList+0x2da>
		}
		else if (en_staDir == WEST) {
 801062c:	797b      	ldrb	r3, [r7, #5]
 801062e:	2b03      	cmp	r3, #3
 8010630:	d164      	bne.n	80106fc <MAP_searchCmdList+0x3ac>
			if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 8010632:	79ba      	ldrb	r2, [r7, #6]
 8010634:	79fb      	ldrb	r3, [r7, #7]
 8010636:	4950      	ldr	r1, [pc, #320]	; (8010778 <MAP_searchCmdList+0x428>)
 8010638:	0152      	lsls	r2, r2, #5
 801063a:	440a      	add	r2, r1
 801063c:	4413      	add	r3, r2
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010644:	2b80      	cmp	r3, #128	; 0x80
 8010646:	d10d      	bne.n	8010664 <MAP_searchCmdList+0x314>
 8010648:	79ba      	ldrb	r2, [r7, #6]
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	3b01      	subs	r3, #1
 801064e:	494b      	ldr	r1, [pc, #300]	; (801077c <MAP_searchCmdList+0x42c>)
 8010650:	0152      	lsls	r2, r2, #5
 8010652:	4413      	add	r3, r2
 8010654:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010658:	897a      	ldrh	r2, [r7, #10]
 801065a:	429a      	cmp	r2, r3
 801065c:	d102      	bne.n	8010664 <MAP_searchCmdList+0x314>
 801065e:	2303      	movs	r3, #3
 8010660:	73fb      	strb	r3, [r7, #15]
 8010662:	e04b      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 8010664:	79ba      	ldrb	r2, [r7, #6]
 8010666:	79fb      	ldrb	r3, [r7, #7]
 8010668:	4943      	ldr	r1, [pc, #268]	; (8010778 <MAP_searchCmdList+0x428>)
 801066a:	0152      	lsls	r2, r2, #5
 801066c:	440a      	add	r2, r1
 801066e:	4413      	add	r3, r2
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	f003 0311 	and.w	r3, r3, #17
 8010676:	2b10      	cmp	r3, #16
 8010678:	d10d      	bne.n	8010696 <MAP_searchCmdList+0x346>
 801067a:	79bb      	ldrb	r3, [r7, #6]
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	79fb      	ldrb	r3, [r7, #7]
 8010680:	493e      	ldr	r1, [pc, #248]	; (801077c <MAP_searchCmdList+0x42c>)
 8010682:	0152      	lsls	r2, r2, #5
 8010684:	4413      	add	r3, r2
 8010686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801068a:	897a      	ldrh	r2, [r7, #10]
 801068c:	429a      	cmp	r2, r3
 801068e:	d102      	bne.n	8010696 <MAP_searchCmdList+0x346>
 8010690:	2300      	movs	r3, #0
 8010692:	73fb      	strb	r3, [r7, #15]
 8010694:	e032      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 8010696:	79ba      	ldrb	r2, [r7, #6]
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	4937      	ldr	r1, [pc, #220]	; (8010778 <MAP_searchCmdList+0x428>)
 801069c:	0152      	lsls	r2, r2, #5
 801069e:	440a      	add	r2, r1
 80106a0:	4413      	add	r3, r2
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80106a8:	2b40      	cmp	r3, #64	; 0x40
 80106aa:	d10d      	bne.n	80106c8 <MAP_searchCmdList+0x378>
 80106ac:	79bb      	ldrb	r3, [r7, #6]
 80106ae:	1e5a      	subs	r2, r3, #1
 80106b0:	79fb      	ldrb	r3, [r7, #7]
 80106b2:	4932      	ldr	r1, [pc, #200]	; (801077c <MAP_searchCmdList+0x42c>)
 80106b4:	0152      	lsls	r2, r2, #5
 80106b6:	4413      	add	r3, r2
 80106b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106bc:	897a      	ldrh	r2, [r7, #10]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d102      	bne.n	80106c8 <MAP_searchCmdList+0x378>
 80106c2:	2302      	movs	r3, #2
 80106c4:	73fb      	strb	r3, [r7, #15]
 80106c6:	e019      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 80106c8:	79ba      	ldrb	r2, [r7, #6]
 80106ca:	79fb      	ldrb	r3, [r7, #7]
 80106cc:	492a      	ldr	r1, [pc, #168]	; (8010778 <MAP_searchCmdList+0x428>)
 80106ce:	0152      	lsls	r2, r2, #5
 80106d0:	440a      	add	r2, r1
 80106d2:	4413      	add	r3, r2
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80106da:	2b20      	cmp	r3, #32
 80106dc:	d10d      	bne.n	80106fa <MAP_searchCmdList+0x3aa>
 80106de:	79ba      	ldrb	r2, [r7, #6]
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	3301      	adds	r3, #1
 80106e4:	4925      	ldr	r1, [pc, #148]	; (801077c <MAP_searchCmdList+0x42c>)
 80106e6:	0152      	lsls	r2, r2, #5
 80106e8:	4413      	add	r3, r2
 80106ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106ee:	897a      	ldrh	r2, [r7, #10]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d102      	bne.n	80106fa <MAP_searchCmdList+0x3aa>
 80106f4:	2301      	movs	r3, #1
 80106f6:	73fb      	strb	r3, [r7, #15]
 80106f8:	e000      	b.n	80106fc <MAP_searchCmdList+0x3ac>
			else   while (1);
 80106fa:	e7fe      	b.n	80106fa <MAP_searchCmdList+0x3aa>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 80106fc:	7bfa      	ldrb	r2, [r7, #15]
 80106fe:	797b      	ldrb	r3, [r7, #5]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	b2db      	uxtb	r3, r3
 8010704:	f003 0303 	and.w	r3, r3, #3
 8010708:	727b      	strb	r3, [r7, #9]
		en_staDir = en_nowDir;
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	717b      	strb	r3, [r7, #5]

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d103      	bne.n	801071c <MAP_searchCmdList+0x3cc>
 8010714:	79bb      	ldrb	r3, [r7, #6]
 8010716:	3301      	adds	r3, #1
 8010718:	71bb      	strb	r3, [r7, #6]
 801071a:	e013      	b.n	8010744 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 801071c:	7bfb      	ldrb	r3, [r7, #15]
 801071e:	2b01      	cmp	r3, #1
 8010720:	d103      	bne.n	801072a <MAP_searchCmdList+0x3da>
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	3301      	adds	r3, #1
 8010726:	71fb      	strb	r3, [r7, #7]
 8010728:	e00c      	b.n	8010744 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	2b02      	cmp	r3, #2
 801072e:	d103      	bne.n	8010738 <MAP_searchCmdList+0x3e8>
 8010730:	79bb      	ldrb	r3, [r7, #6]
 8010732:	3b01      	subs	r3, #1
 8010734:	71bb      	strb	r3, [r7, #6]
 8010736:	e005      	b.n	8010744 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	2b03      	cmp	r3, #3
 801073c:	d102      	bne.n	8010744 <MAP_searchCmdList+0x3f4>
 801073e:	79fb      	ldrb	r3, [r7, #7]
 8010740:	3b01      	subs	r3, #1
 8010742:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8010744:	7bfb      	ldrb	r3, [r7, #15]
 8010746:	717b      	strb	r3, [r7, #5]

//		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) break;
		if (us_cmap[uc_staY][uc_staX] == 0) {
 8010748:	79ba      	ldrb	r2, [r7, #6]
 801074a:	79fb      	ldrb	r3, [r7, #7]
 801074c:	490b      	ldr	r1, [pc, #44]	; (801077c <MAP_searchCmdList+0x42c>)
 801074e:	0152      	lsls	r2, r2, #5
 8010750:	4413      	add	r3, r2
 8010752:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010756:	2b00      	cmp	r3, #0
 8010758:	f47f ae0d 	bne.w	8010376 <MAP_searchCmdList+0x26>
			Return_X = 0;
 801075c:	4b08      	ldr	r3, [pc, #32]	; (8010780 <MAP_searchCmdList+0x430>)
 801075e:	2200      	movs	r2, #0
 8010760:	701a      	strb	r2, [r3, #0]
			Return_Y = 0;
 8010762:	4b08      	ldr	r3, [pc, #32]	; (8010784 <MAP_searchCmdList+0x434>)
 8010764:	2200      	movs	r2, #0
 8010766:	701a      	strb	r2, [r3, #0]
		}
	}


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	797a      	ldrb	r2, [r7, #5]
 801076c:	701a      	strb	r2, [r3, #0]
}
 801076e:	bf00      	nop
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bc90      	pop	{r4, r7}
 8010776:	4770      	bx	lr
 8010778:	20000708 	.word	0x20000708
 801077c:	20000b2c 	.word	0x20000b2c
 8010780:	200002e1 	.word	0x200002e1
 8010784:	200006ed 	.word	0x200006ed

08010788 <MAP_makeCmdList_dijkstra_modoki>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 8010788:	b490      	push	{r4, r7}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	4604      	mov	r4, r0
 8010790:	4608      	mov	r0, r1
 8010792:	4611      	mov	r1, r2
 8010794:	461a      	mov	r2, r3
 8010796:	4623      	mov	r3, r4
 8010798:	71fb      	strb	r3, [r7, #7]
 801079a:	4603      	mov	r3, r0
 801079c:	71bb      	strb	r3, [r7, #6]
 801079e:	460b      	mov	r3, r1
 80107a0:	717b      	strb	r3, [r7, #5]
 80107a2:	4613      	mov	r3, r2
 80107a4:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	USHORT			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_cmap[uc_staY][uc_staX];
 80107ae:	79ba      	ldrb	r2, [r7, #6]
 80107b0:	79fb      	ldrb	r3, [r7, #7]
 80107b2:	49a4      	ldr	r1, [pc, #656]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80107b4:	0152      	lsls	r2, r2, #5
 80107b6:	4413      	add	r3, r2
 80107b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107bc:	823b      	strh	r3, [r7, #16]

		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) {
 80107be:	79fa      	ldrb	r2, [r7, #7]
 80107c0:	793b      	ldrb	r3, [r7, #4]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d105      	bne.n	80107d2 <MAP_makeCmdList_dijkstra_modoki+0x4a>
 80107c6:	79ba      	ldrb	r2, [r7, #6]
 80107c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	f000 820b 	beq.w	8010be8 <MAP_makeCmdList_dijkstra_modoki+0x460>
			break;
		}
		
		if (en_staDir == NORTH) {
 80107d2:	797b      	ldrb	r3, [r7, #5]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d164      	bne.n	80108a2 <MAP_makeCmdList_dijkstra_modoki+0x11a>
			if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 80107d8:	79ba      	ldrb	r2, [r7, #6]
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	499a      	ldr	r1, [pc, #616]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80107de:	0152      	lsls	r2, r2, #5
 80107e0:	440a      	add	r2, r1
 80107e2:	4413      	add	r3, r2
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	f003 0311 	and.w	r3, r3, #17
 80107ea:	2b10      	cmp	r3, #16
 80107ec:	d10d      	bne.n	801080a <MAP_makeCmdList_dijkstra_modoki+0x82>
 80107ee:	79bb      	ldrb	r3, [r7, #6]
 80107f0:	1c5a      	adds	r2, r3, #1
 80107f2:	79fb      	ldrb	r3, [r7, #7]
 80107f4:	4993      	ldr	r1, [pc, #588]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80107f6:	0152      	lsls	r2, r2, #5
 80107f8:	4413      	add	r3, r2
 80107fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107fe:	8a3a      	ldrh	r2, [r7, #16]
 8010800:	429a      	cmp	r2, r3
 8010802:	d902      	bls.n	801080a <MAP_makeCmdList_dijkstra_modoki+0x82>
 8010804:	2300      	movs	r3, #0
 8010806:	74fb      	strb	r3, [r7, #19]
 8010808:	e188      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 801080a:	79ba      	ldrb	r2, [r7, #6]
 801080c:	79fb      	ldrb	r3, [r7, #7]
 801080e:	498e      	ldr	r1, [pc, #568]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010810:	0152      	lsls	r2, r2, #5
 8010812:	440a      	add	r2, r1
 8010814:	4413      	add	r3, r2
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801081c:	2b20      	cmp	r3, #32
 801081e:	d10d      	bne.n	801083c <MAP_makeCmdList_dijkstra_modoki+0xb4>
 8010820:	79ba      	ldrb	r2, [r7, #6]
 8010822:	79fb      	ldrb	r3, [r7, #7]
 8010824:	3301      	adds	r3, #1
 8010826:	4987      	ldr	r1, [pc, #540]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8010828:	0152      	lsls	r2, r2, #5
 801082a:	4413      	add	r3, r2
 801082c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010830:	8a3a      	ldrh	r2, [r7, #16]
 8010832:	429a      	cmp	r2, r3
 8010834:	d902      	bls.n	801083c <MAP_makeCmdList_dijkstra_modoki+0xb4>
 8010836:	2301      	movs	r3, #1
 8010838:	74fb      	strb	r3, [r7, #19]
 801083a:	e16f      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 801083c:	79ba      	ldrb	r2, [r7, #6]
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	4981      	ldr	r1, [pc, #516]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010842:	0152      	lsls	r2, r2, #5
 8010844:	440a      	add	r2, r1
 8010846:	4413      	add	r3, r2
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 801084e:	2b80      	cmp	r3, #128	; 0x80
 8010850:	d10d      	bne.n	801086e <MAP_makeCmdList_dijkstra_modoki+0xe6>
 8010852:	79ba      	ldrb	r2, [r7, #6]
 8010854:	79fb      	ldrb	r3, [r7, #7]
 8010856:	3b01      	subs	r3, #1
 8010858:	497a      	ldr	r1, [pc, #488]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801085a:	0152      	lsls	r2, r2, #5
 801085c:	4413      	add	r3, r2
 801085e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010862:	8a3a      	ldrh	r2, [r7, #16]
 8010864:	429a      	cmp	r2, r3
 8010866:	d902      	bls.n	801086e <MAP_makeCmdList_dijkstra_modoki+0xe6>
 8010868:	2303      	movs	r3, #3
 801086a:	74fb      	strb	r3, [r7, #19]
 801086c:	e156      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 801086e:	79ba      	ldrb	r2, [r7, #6]
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	4975      	ldr	r1, [pc, #468]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010874:	0152      	lsls	r2, r2, #5
 8010876:	440a      	add	r2, r1
 8010878:	4413      	add	r3, r2
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010880:	2b40      	cmp	r3, #64	; 0x40
 8010882:	d10d      	bne.n	80108a0 <MAP_makeCmdList_dijkstra_modoki+0x118>
 8010884:	79bb      	ldrb	r3, [r7, #6]
 8010886:	1e5a      	subs	r2, r3, #1
 8010888:	79fb      	ldrb	r3, [r7, #7]
 801088a:	496e      	ldr	r1, [pc, #440]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801088c:	0152      	lsls	r2, r2, #5
 801088e:	4413      	add	r3, r2
 8010890:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010894:	8a3a      	ldrh	r2, [r7, #16]
 8010896:	429a      	cmp	r2, r3
 8010898:	d902      	bls.n	80108a0 <MAP_makeCmdList_dijkstra_modoki+0x118>
 801089a:	2302      	movs	r3, #2
 801089c:	74fb      	strb	r3, [r7, #19]
 801089e:	e13d      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 80108a0:	e7fe      	b.n	80108a0 <MAP_makeCmdList_dijkstra_modoki+0x118>
		}
		else if (en_staDir == EAST) {
 80108a2:	797b      	ldrb	r3, [r7, #5]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d164      	bne.n	8010972 <MAP_makeCmdList_dijkstra_modoki+0x1ea>
			if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80108a8:	79ba      	ldrb	r2, [r7, #6]
 80108aa:	79fb      	ldrb	r3, [r7, #7]
 80108ac:	4966      	ldr	r1, [pc, #408]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80108ae:	0152      	lsls	r2, r2, #5
 80108b0:	440a      	add	r2, r1
 80108b2:	4413      	add	r3, r2
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80108ba:	2b20      	cmp	r3, #32
 80108bc:	d10d      	bne.n	80108da <MAP_makeCmdList_dijkstra_modoki+0x152>
 80108be:	79ba      	ldrb	r2, [r7, #6]
 80108c0:	79fb      	ldrb	r3, [r7, #7]
 80108c2:	3301      	adds	r3, #1
 80108c4:	495f      	ldr	r1, [pc, #380]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80108c6:	0152      	lsls	r2, r2, #5
 80108c8:	4413      	add	r3, r2
 80108ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108ce:	8a3a      	ldrh	r2, [r7, #16]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d902      	bls.n	80108da <MAP_makeCmdList_dijkstra_modoki+0x152>
 80108d4:	2301      	movs	r3, #1
 80108d6:	74fb      	strb	r3, [r7, #19]
 80108d8:	e120      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 80108da:	79ba      	ldrb	r2, [r7, #6]
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	495a      	ldr	r1, [pc, #360]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80108e0:	0152      	lsls	r2, r2, #5
 80108e2:	440a      	add	r2, r1
 80108e4:	4413      	add	r3, r2
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0311 	and.w	r3, r3, #17
 80108ec:	2b10      	cmp	r3, #16
 80108ee:	d10d      	bne.n	801090c <MAP_makeCmdList_dijkstra_modoki+0x184>
 80108f0:	79bb      	ldrb	r3, [r7, #6]
 80108f2:	1c5a      	adds	r2, r3, #1
 80108f4:	79fb      	ldrb	r3, [r7, #7]
 80108f6:	4953      	ldr	r1, [pc, #332]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80108f8:	0152      	lsls	r2, r2, #5
 80108fa:	4413      	add	r3, r2
 80108fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010900:	8a3a      	ldrh	r2, [r7, #16]
 8010902:	429a      	cmp	r2, r3
 8010904:	d902      	bls.n	801090c <MAP_makeCmdList_dijkstra_modoki+0x184>
 8010906:	2300      	movs	r3, #0
 8010908:	74fb      	strb	r3, [r7, #19]
 801090a:	e107      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 801090c:	79ba      	ldrb	r2, [r7, #6]
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	494d      	ldr	r1, [pc, #308]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010912:	0152      	lsls	r2, r2, #5
 8010914:	440a      	add	r2, r1
 8010916:	4413      	add	r3, r2
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801091e:	2b40      	cmp	r3, #64	; 0x40
 8010920:	d10d      	bne.n	801093e <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 8010922:	79bb      	ldrb	r3, [r7, #6]
 8010924:	1e5a      	subs	r2, r3, #1
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	4946      	ldr	r1, [pc, #280]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801092a:	0152      	lsls	r2, r2, #5
 801092c:	4413      	add	r3, r2
 801092e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010932:	8a3a      	ldrh	r2, [r7, #16]
 8010934:	429a      	cmp	r2, r3
 8010936:	d902      	bls.n	801093e <MAP_makeCmdList_dijkstra_modoki+0x1b6>
 8010938:	2302      	movs	r3, #2
 801093a:	74fb      	strb	r3, [r7, #19]
 801093c:	e0ee      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 801093e:	79ba      	ldrb	r2, [r7, #6]
 8010940:	79fb      	ldrb	r3, [r7, #7]
 8010942:	4941      	ldr	r1, [pc, #260]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010944:	0152      	lsls	r2, r2, #5
 8010946:	440a      	add	r2, r1
 8010948:	4413      	add	r3, r2
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010950:	2b80      	cmp	r3, #128	; 0x80
 8010952:	d10d      	bne.n	8010970 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 8010954:	79ba      	ldrb	r2, [r7, #6]
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	3b01      	subs	r3, #1
 801095a:	493a      	ldr	r1, [pc, #232]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 801095c:	0152      	lsls	r2, r2, #5
 801095e:	4413      	add	r3, r2
 8010960:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010964:	8a3a      	ldrh	r2, [r7, #16]
 8010966:	429a      	cmp	r2, r3
 8010968:	d902      	bls.n	8010970 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
 801096a:	2303      	movs	r3, #3
 801096c:	74fb      	strb	r3, [r7, #19]
 801096e:	e0d5      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8010970:	e7fe      	b.n	8010970 <MAP_makeCmdList_dijkstra_modoki+0x1e8>
		}
		else if (en_staDir == SOUTH) {
 8010972:	797b      	ldrb	r3, [r7, #5]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d169      	bne.n	8010a4c <MAP_makeCmdList_dijkstra_modoki+0x2c4>
			if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 8010978:	79ba      	ldrb	r2, [r7, #6]
 801097a:	79fb      	ldrb	r3, [r7, #7]
 801097c:	4932      	ldr	r1, [pc, #200]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 801097e:	0152      	lsls	r2, r2, #5
 8010980:	440a      	add	r2, r1
 8010982:	4413      	add	r3, r2
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801098a:	2b40      	cmp	r3, #64	; 0x40
 801098c:	d10d      	bne.n	80109aa <MAP_makeCmdList_dijkstra_modoki+0x222>
 801098e:	79bb      	ldrb	r3, [r7, #6]
 8010990:	1e5a      	subs	r2, r3, #1
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	492b      	ldr	r1, [pc, #172]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8010996:	0152      	lsls	r2, r2, #5
 8010998:	4413      	add	r3, r2
 801099a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801099e:	8a3a      	ldrh	r2, [r7, #16]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d902      	bls.n	80109aa <MAP_makeCmdList_dijkstra_modoki+0x222>
 80109a4:	2302      	movs	r3, #2
 80109a6:	74fb      	strb	r3, [r7, #19]
 80109a8:	e0b8      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 80109aa:	79ba      	ldrb	r2, [r7, #6]
 80109ac:	79fb      	ldrb	r3, [r7, #7]
 80109ae:	4926      	ldr	r1, [pc, #152]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80109b0:	0152      	lsls	r2, r2, #5
 80109b2:	440a      	add	r2, r1
 80109b4:	4413      	add	r3, r2
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80109bc:	2b20      	cmp	r3, #32
 80109be:	d10d      	bne.n	80109dc <MAP_makeCmdList_dijkstra_modoki+0x254>
 80109c0:	79ba      	ldrb	r2, [r7, #6]
 80109c2:	79fb      	ldrb	r3, [r7, #7]
 80109c4:	3301      	adds	r3, #1
 80109c6:	491f      	ldr	r1, [pc, #124]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80109c8:	0152      	lsls	r2, r2, #5
 80109ca:	4413      	add	r3, r2
 80109cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109d0:	8a3a      	ldrh	r2, [r7, #16]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d902      	bls.n	80109dc <MAP_makeCmdList_dijkstra_modoki+0x254>
 80109d6:	2301      	movs	r3, #1
 80109d8:	74fb      	strb	r3, [r7, #19]
 80109da:	e09f      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 80109dc:	79ba      	ldrb	r2, [r7, #6]
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	4919      	ldr	r1, [pc, #100]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 80109e2:	0152      	lsls	r2, r2, #5
 80109e4:	440a      	add	r2, r1
 80109e6:	4413      	add	r3, r2
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80109ee:	2b80      	cmp	r3, #128	; 0x80
 80109f0:	d10d      	bne.n	8010a0e <MAP_makeCmdList_dijkstra_modoki+0x286>
 80109f2:	79ba      	ldrb	r2, [r7, #6]
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	4912      	ldr	r1, [pc, #72]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 80109fa:	0152      	lsls	r2, r2, #5
 80109fc:	4413      	add	r3, r2
 80109fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a02:	8a3a      	ldrh	r2, [r7, #16]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d902      	bls.n	8010a0e <MAP_makeCmdList_dijkstra_modoki+0x286>
 8010a08:	2303      	movs	r3, #3
 8010a0a:	74fb      	strb	r3, [r7, #19]
 8010a0c:	e086      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8010a0e:	79ba      	ldrb	r2, [r7, #6]
 8010a10:	79fb      	ldrb	r3, [r7, #7]
 8010a12:	490d      	ldr	r1, [pc, #52]	; (8010a48 <MAP_makeCmdList_dijkstra_modoki+0x2c0>)
 8010a14:	0152      	lsls	r2, r2, #5
 8010a16:	440a      	add	r2, r1
 8010a18:	4413      	add	r3, r2
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f003 0311 	and.w	r3, r3, #17
 8010a20:	2b10      	cmp	r3, #16
 8010a22:	d10d      	bne.n	8010a40 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8010a24:	79bb      	ldrb	r3, [r7, #6]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	79fb      	ldrb	r3, [r7, #7]
 8010a2a:	4906      	ldr	r1, [pc, #24]	; (8010a44 <MAP_makeCmdList_dijkstra_modoki+0x2bc>)
 8010a2c:	0152      	lsls	r2, r2, #5
 8010a2e:	4413      	add	r3, r2
 8010a30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a34:	8a3a      	ldrh	r2, [r7, #16]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d902      	bls.n	8010a40 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	74fb      	strb	r3, [r7, #19]
 8010a3e:	e06d      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8010a40:	e7fe      	b.n	8010a40 <MAP_makeCmdList_dijkstra_modoki+0x2b8>
 8010a42:	bf00      	nop
 8010a44:	20000b2c 	.word	0x20000b2c
 8010a48:	20000708 	.word	0x20000708
		}
		else if (en_staDir == WEST) {
 8010a4c:	797b      	ldrb	r3, [r7, #5]
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	d164      	bne.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] < us_high)) en_nowDir = WEST;
 8010a52:	79ba      	ldrb	r2, [r7, #6]
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	4974      	ldr	r1, [pc, #464]	; (8010c28 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8010a58:	0152      	lsls	r2, r2, #5
 8010a5a:	440a      	add	r2, r1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010a64:	2b80      	cmp	r3, #128	; 0x80
 8010a66:	d10d      	bne.n	8010a84 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 8010a68:	79ba      	ldrb	r2, [r7, #6]
 8010a6a:	79fb      	ldrb	r3, [r7, #7]
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	496f      	ldr	r1, [pc, #444]	; (8010c2c <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8010a70:	0152      	lsls	r2, r2, #5
 8010a72:	4413      	add	r3, r2
 8010a74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a78:	8a3a      	ldrh	r2, [r7, #16]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d902      	bls.n	8010a84 <MAP_makeCmdList_dijkstra_modoki+0x2fc>
 8010a7e:	2303      	movs	r3, #3
 8010a80:	74fb      	strb	r3, [r7, #19]
 8010a82:	e04b      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] < us_high)) en_nowDir = NORTH;
 8010a84:	79ba      	ldrb	r2, [r7, #6]
 8010a86:	79fb      	ldrb	r3, [r7, #7]
 8010a88:	4967      	ldr	r1, [pc, #412]	; (8010c28 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8010a8a:	0152      	lsls	r2, r2, #5
 8010a8c:	440a      	add	r2, r1
 8010a8e:	4413      	add	r3, r2
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 0311 	and.w	r3, r3, #17
 8010a96:	2b10      	cmp	r3, #16
 8010a98:	d10d      	bne.n	8010ab6 <MAP_makeCmdList_dijkstra_modoki+0x32e>
 8010a9a:	79bb      	ldrb	r3, [r7, #6]
 8010a9c:	1c5a      	adds	r2, r3, #1
 8010a9e:	79fb      	ldrb	r3, [r7, #7]
 8010aa0:	4962      	ldr	r1, [pc, #392]	; (8010c2c <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8010aa2:	0152      	lsls	r2, r2, #5
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010aaa:	8a3a      	ldrh	r2, [r7, #16]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d902      	bls.n	8010ab6 <MAP_makeCmdList_dijkstra_modoki+0x32e>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	74fb      	strb	r3, [r7, #19]
 8010ab4:	e032      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] < us_high)) en_nowDir = SOUTH;
 8010ab6:	79ba      	ldrb	r2, [r7, #6]
 8010ab8:	79fb      	ldrb	r3, [r7, #7]
 8010aba:	495b      	ldr	r1, [pc, #364]	; (8010c28 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8010abc:	0152      	lsls	r2, r2, #5
 8010abe:	440a      	add	r2, r1
 8010ac0:	4413      	add	r3, r2
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010ac8:	2b40      	cmp	r3, #64	; 0x40
 8010aca:	d10d      	bne.n	8010ae8 <MAP_makeCmdList_dijkstra_modoki+0x360>
 8010acc:	79bb      	ldrb	r3, [r7, #6]
 8010ace:	1e5a      	subs	r2, r3, #1
 8010ad0:	79fb      	ldrb	r3, [r7, #7]
 8010ad2:	4956      	ldr	r1, [pc, #344]	; (8010c2c <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8010ad4:	0152      	lsls	r2, r2, #5
 8010ad6:	4413      	add	r3, r2
 8010ad8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010adc:	8a3a      	ldrh	r2, [r7, #16]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d902      	bls.n	8010ae8 <MAP_makeCmdList_dijkstra_modoki+0x360>
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	74fb      	strb	r3, [r7, #19]
 8010ae6:	e019      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] < us_high)) en_nowDir = EAST;
 8010ae8:	79ba      	ldrb	r2, [r7, #6]
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	494e      	ldr	r1, [pc, #312]	; (8010c28 <MAP_makeCmdList_dijkstra_modoki+0x4a0>)
 8010aee:	0152      	lsls	r2, r2, #5
 8010af0:	440a      	add	r2, r1
 8010af2:	4413      	add	r3, r2
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010afa:	2b20      	cmp	r3, #32
 8010afc:	d10d      	bne.n	8010b1a <MAP_makeCmdList_dijkstra_modoki+0x392>
 8010afe:	79ba      	ldrb	r2, [r7, #6]
 8010b00:	79fb      	ldrb	r3, [r7, #7]
 8010b02:	3301      	adds	r3, #1
 8010b04:	4949      	ldr	r1, [pc, #292]	; (8010c2c <MAP_makeCmdList_dijkstra_modoki+0x4a4>)
 8010b06:	0152      	lsls	r2, r2, #5
 8010b08:	4413      	add	r3, r2
 8010b0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b0e:	8a3a      	ldrh	r2, [r7, #16]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d902      	bls.n	8010b1a <MAP_makeCmdList_dijkstra_modoki+0x392>
 8010b14:	2301      	movs	r3, #1
 8010b16:	74fb      	strb	r3, [r7, #19]
 8010b18:	e000      	b.n	8010b1c <MAP_makeCmdList_dijkstra_modoki+0x394>
			else   while (1);
 8010b1a:	e7fe      	b.n	8010b1a <MAP_makeCmdList_dijkstra_modoki+0x392>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 8010b1c:	7cfa      	ldrb	r2, [r7, #19]
 8010b1e:	797b      	ldrb	r3, [r7, #5]
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 0303 	and.w	r3, r3, #3
 8010b28:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 8010b2a:	7cfb      	ldrb	r3, [r7, #19]
 8010b2c:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH) {
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d103      	bne.n	8010b3c <MAP_makeCmdList_dijkstra_modoki+0x3b4>
			uc_goStep = uc_goStep + 2;
 8010b34:	7dfb      	ldrb	r3, [r7, #23]
 8010b36:	3302      	adds	r3, #2
 8010b38:	75fb      	strb	r3, [r7, #23]
 8010b3a:	e037      	b.n	8010bac <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == EAST) {
 8010b3c:	7bfb      	ldrb	r3, [r7, #15]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d110      	bne.n	8010b64 <MAP_makeCmdList_dijkstra_modoki+0x3dc>
			dcom[us_pt] = uc_goStep;
 8010b42:	8abb      	ldrh	r3, [r7, #20]
 8010b44:	493a      	ldr	r1, [pc, #232]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b46:	7dfa      	ldrb	r2, [r7, #23]
 8010b48:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 8010b4a:	8abb      	ldrh	r3, [r7, #20]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	82bb      	strh	r3, [r7, #20]
 8010b50:	8abb      	ldrh	r3, [r7, #20]
 8010b52:	4a37      	ldr	r2, [pc, #220]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b54:	2148      	movs	r1, #72	; 0x48
 8010b56:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 8010b58:	2302      	movs	r3, #2
 8010b5a:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8010b5c:	8abb      	ldrh	r3, [r7, #20]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	82bb      	strh	r3, [r7, #20]
 8010b62:	e023      	b.n	8010bac <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else if (en_tempDir == WEST) {
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	d110      	bne.n	8010b8c <MAP_makeCmdList_dijkstra_modoki+0x404>
			dcom[us_pt] = uc_goStep;
 8010b6a:	8abb      	ldrh	r3, [r7, #20]
 8010b6c:	4930      	ldr	r1, [pc, #192]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b6e:	7dfa      	ldrb	r2, [r7, #23]
 8010b70:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 8010b72:	8abb      	ldrh	r3, [r7, #20]
 8010b74:	3301      	adds	r3, #1
 8010b76:	82bb      	strh	r3, [r7, #20]
 8010b78:	8abb      	ldrh	r3, [r7, #20]
 8010b7a:	4a2d      	ldr	r2, [pc, #180]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b7c:	2149      	movs	r1, #73	; 0x49
 8010b7e:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 8010b80:	2302      	movs	r3, #2
 8010b82:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8010b84:	8abb      	ldrh	r3, [r7, #20]
 8010b86:	3301      	adds	r3, #1
 8010b88:	82bb      	strh	r3, [r7, #20]
 8010b8a:	e00f      	b.n	8010bac <MAP_makeCmdList_dijkstra_modoki+0x424>
		}
		else {
			dcom[us_pt] = uc_goStep;
 8010b8c:	8abb      	ldrh	r3, [r7, #20]
 8010b8e:	4928      	ldr	r1, [pc, #160]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b90:	7dfa      	ldrb	r2, [r7, #23]
 8010b92:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 8010b94:	8abb      	ldrh	r3, [r7, #20]
 8010b96:	3301      	adds	r3, #1
 8010b98:	82bb      	strh	r3, [r7, #20]
 8010b9a:	8abb      	ldrh	r3, [r7, #20]
 8010b9c:	4a24      	ldr	r2, [pc, #144]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010b9e:	214a      	movs	r1, #74	; 0x4a
 8010ba0:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 8010ba2:	2302      	movs	r3, #2
 8010ba4:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 8010ba6:	8abb      	ldrh	r3, [r7, #20]
 8010ba8:	3301      	adds	r3, #1
 8010baa:	82bb      	strh	r3, [r7, #20]
		}

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 8010bac:	7cfb      	ldrb	r3, [r7, #19]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d103      	bne.n	8010bba <MAP_makeCmdList_dijkstra_modoki+0x432>
 8010bb2:	79bb      	ldrb	r3, [r7, #6]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	71bb      	strb	r3, [r7, #6]
 8010bb8:	e013      	b.n	8010be2 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 8010bba:	7cfb      	ldrb	r3, [r7, #19]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d103      	bne.n	8010bc8 <MAP_makeCmdList_dijkstra_modoki+0x440>
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	71fb      	strb	r3, [r7, #7]
 8010bc6:	e00c      	b.n	8010be2 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 8010bc8:	7cfb      	ldrb	r3, [r7, #19]
 8010bca:	2b02      	cmp	r3, #2
 8010bcc:	d103      	bne.n	8010bd6 <MAP_makeCmdList_dijkstra_modoki+0x44e>
 8010bce:	79bb      	ldrb	r3, [r7, #6]
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	71bb      	strb	r3, [r7, #6]
 8010bd4:	e005      	b.n	8010be2 <MAP_makeCmdList_dijkstra_modoki+0x45a>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 8010bd6:	7cfb      	ldrb	r3, [r7, #19]
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d102      	bne.n	8010be2 <MAP_makeCmdList_dijkstra_modoki+0x45a>
 8010bdc:	79fb      	ldrb	r3, [r7, #7]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 8010be2:	7cfb      	ldrb	r3, [r7, #19]
 8010be4:	717b      	strb	r3, [r7, #5]
		us_high = us_cmap[uc_staY][uc_staX];
 8010be6:	e5e2      	b.n	80107ae <MAP_makeCmdList_dijkstra_modoki+0x26>
			break;
 8010be8:	bf00      	nop
*/
//		if (us_cmap[uc_staY][uc_staX] == 0) break;
	}

	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 8010bea:	8abb      	ldrh	r3, [r7, #20]
 8010bec:	4910      	ldr	r1, [pc, #64]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010bee:	7dfa      	ldrb	r2, [r7, #23]
 8010bf0:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 8010bf2:	8abb      	ldrh	r3, [r7, #20]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	82bb      	strh	r3, [r7, #20]
 8010bf8:	8abb      	ldrh	r3, [r7, #20]
 8010bfa:	4a0d      	ldr	r2, [pc, #52]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 8010c00:	8abb      	ldrh	r3, [r7, #20]
 8010c02:	3301      	adds	r3, #1
 8010c04:	82bb      	strh	r3, [r7, #20]
 8010c06:	8abb      	ldrh	r3, [r7, #20]
 8010c08:	4a09      	ldr	r2, [pc, #36]	; (8010c30 <MAP_makeCmdList_dijkstra_modoki+0x4a8>)
 8010c0a:	21fa      	movs	r1, #250	; 0xfa
 8010c0c:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt + 1;			// コマンド総数
 8010c0e:	8abb      	ldrh	r3, [r7, #20]
 8010c10:	3301      	adds	r3, #1
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	4b07      	ldr	r3, [pc, #28]	; (8010c34 <MAP_makeCmdList_dijkstra_modoki+0x4ac>)
 8010c16:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	797a      	ldrb	r2, [r7, #5]
 8010c1c:	701a      	strb	r2, [r3, #0]

}
 8010c1e:	bf00      	nop
 8010c20:	3718      	adds	r7, #24
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bc90      	pop	{r4, r7}
 8010c26:	4770      	bx	lr
 8010c28:	20000708 	.word	0x20000708
 8010c2c:	20000b2c 	.word	0x20000b2c
 8010c30:	2000b138 	.word	0x2000b138
 8010c34:	2000e1f4 	.word	0x2000e1f4

08010c38 <FLASH_Lock>:
{
 8010c38:	b480      	push	{r7}
 8010c3a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8010c3c:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <FLASH_Lock+0x1c>)
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	4a04      	ldr	r2, [pc, #16]	; (8010c54 <FLASH_Lock+0x1c>)
 8010c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c46:	6153      	str	r3, [r2, #20]
}
 8010c48:	bf00      	nop
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	40022000 	.word	0x40022000

08010c58 <FLASH_Unlock>:
{
 8010c58:	b480      	push	{r7}
 8010c5a:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8010c5c:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <FLASH_Unlock+0x1c>)
 8010c5e:	4a06      	ldr	r2, [pc, #24]	; (8010c78 <FLASH_Unlock+0x20>)
 8010c60:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8010c62:	4b04      	ldr	r3, [pc, #16]	; (8010c74 <FLASH_Unlock+0x1c>)
 8010c64:	4a05      	ldr	r2, [pc, #20]	; (8010c7c <FLASH_Unlock+0x24>)
 8010c66:	609a      	str	r2, [r3, #8]
}
 8010c68:	bf00      	nop
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	40022000 	.word	0x40022000
 8010c78:	45670123 	.word	0x45670123
 8010c7c:	cdef89ab 	.word	0xcdef89ab

08010c80 <map_write>:


#include "search/map_flash.h"

void map_write(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
	uint64_t *map_add;
	map_add = (uint64_t *)g_sysMap;
 8010c86:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <map_write+0x20>)
 8010c88:	607b      	str	r3, [r7, #4]
	
	//DataFlashイレース
//    FLASH_Erase(0x7F);  //reg127
	//マップデータをDataFlashに書き込む
    FLASH_WriteData(0x7F,(uint32_t)sta_add_127, map_add, 32*32);
 8010c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	4904      	ldr	r1, [pc, #16]	; (8010ca4 <map_write+0x24>)
 8010c92:	207f      	movs	r0, #127	; 0x7f
 8010c94:	f7f0 ffae 	bl	8001bf4 <FLASH_WriteData>
}
 8010c98:	bf00      	nop
 8010c9a:	3708      	adds	r7, #8
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	20000708 	.word	0x20000708
 8010ca4:	0807f800 	.word	0x0807f800

08010ca8 <map_copy>:

void map_copy(void)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
    uint64_t *map_add;
    map_add = (uint64_t *)&g_sysMap;
 8010cae:	4b0f      	ldr	r3, [pc, #60]	; (8010cec <map_copy+0x44>)
 8010cb0:	60fb      	str	r3, [r7, #12]
    uint32_t read_address = sta_add_127;
 8010cb2:	4b0f      	ldr	r3, [pc, #60]	; (8010cf0 <map_copy+0x48>)
 8010cb4:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	80fb      	strh	r3, [r7, #6]
 8010cba:	e00d      	b.n	8010cd8 <map_copy+0x30>
	    FLASH_ReadData(read_address, map_add, 8);
 8010cbc:	2208      	movs	r2, #8
 8010cbe:	68f9      	ldr	r1, [r7, #12]
 8010cc0:	68b8      	ldr	r0, [r7, #8]
 8010cc2:	f7f0 ffbd 	bl	8001c40 <FLASH_ReadData>
	    read_address +=8;
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	3308      	adds	r3, #8
 8010cca:	60bb      	str	r3, [r7, #8]
	    map_add++;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	3308      	adds	r3, #8
 8010cd0:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 8010cd2:	88fb      	ldrh	r3, [r7, #6]
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	80fb      	strh	r3, [r7, #6]
 8010cd8:	88fb      	ldrh	r3, [r7, #6]
 8010cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cde:	d3ed      	bcc.n	8010cbc <map_copy+0x14>
    }
}
 8010ce0:	bf00      	nop
 8010ce2:	bf00      	nop
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20000708 	.word	0x20000708
 8010cf0:	0807f800 	.word	0x0807f800

08010cf4 <map_erase>:

void map_erase(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 8010cf8:	f7ff ffae 	bl	8010c58 <FLASH_Unlock>
	FLASH_Erase(0x7F);
 8010cfc:	207f      	movs	r0, #127	; 0x7f
 8010cfe:	f7f0 ff0d 	bl	8001b1c <FLASH_Erase>
	FLASH_Lock();
 8010d02:	f7ff ff99 	bl	8010c38 <FLASH_Lock>
}
 8010d06:	bf00      	nop
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <MAP_init>:
uint8_t			SLA_count = 30;

uint8_t near_wall = 0;

void MAP_init( void )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	af00      	add	r7, sp, #0
//	uint8_t uc_dummy[ MAP_Y_SIZE ][ MAP_X_SIZE ];			// 迷路データ

	/* 座標、向き、迷路情報を初期化 */
	en_Head		= NORTH;
 8010d10:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <MAP_init+0x2c>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	701a      	strb	r2, [r3, #0]
	mx		= 0;
 8010d16:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <MAP_init+0x30>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]
	my		= 0;
 8010d1c:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <MAP_init+0x34>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	701a      	strb	r2, [r3, #0]
	MAP_clearMap();
 8010d22:	f000 f913 	bl	8010f4c <MAP_clearMap>
	
	/* 走行用のパラメータ */
	f_MoveBackDist = 0;
 8010d26:	4b07      	ldr	r3, [pc, #28]	; (8010d44 <MAP_init+0x38>)
 8010d28:	f04f 0200 	mov.w	r2, #0
 8010d2c:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8010d2e:	4b06      	ldr	r3, [pc, #24]	; (8010d48 <MAP_init+0x3c>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	701a      	strb	r2, [r3, #0]

}
 8010d34:	bf00      	nop
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	2000e604 	.word	0x2000e604
 8010d3c:	2000e607 	.word	0x2000e607
 8010d40:	2000e5fd 	.word	0x2000e5fd
 8010d44:	2000e600 	.word	0x2000e600
 8010d48:	200002c6 	.word	0x200002c6

08010d4c <MAP_Goal_init>:

void MAP_Goal_init( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	af00      	add	r7, sp, #0
	GOAL_MAP_X = GOAL_MAP_X_def;
 8010d50:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <MAP_Goal_init+0x1c>)
 8010d52:	2206      	movs	r2, #6
 8010d54:	701a      	strb	r2, [r3, #0]
	GOAL_MAP_Y = GOAL_MAP_Y_def;
 8010d56:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <MAP_Goal_init+0x20>)
 8010d58:	2209      	movs	r2, #9
 8010d5a:	701a      	strb	r2, [r3, #0]
}
 8010d5c:	bf00      	nop
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	2000e5fc 	.word	0x2000e5fc
 8010d6c:	2000e605 	.word	0x2000e605

08010d70 <MAP_setPos>:

//	Storage_Clear( sizeof(g_sysMap), ADR_MAP );			// データセーブ
}

void MAP_setPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	71fb      	strb	r3, [r7, #7]
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	71bb      	strb	r3, [r7, #6]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	717b      	strb	r3, [r7, #5]
	mx		= uc_x;
 8010d82:	4a09      	ldr	r2, [pc, #36]	; (8010da8 <MAP_setPos+0x38>)
 8010d84:	79fb      	ldrb	r3, [r7, #7]
 8010d86:	7013      	strb	r3, [r2, #0]
	my		= uc_y;
 8010d88:	4a08      	ldr	r2, [pc, #32]	; (8010dac <MAP_setPos+0x3c>)
 8010d8a:	79bb      	ldrb	r3, [r7, #6]
 8010d8c:	7013      	strb	r3, [r2, #0]
	en_Head		= en_dir;
 8010d8e:	4a08      	ldr	r2, [pc, #32]	; (8010db0 <MAP_setPos+0x40>)
 8010d90:	797b      	ldrb	r3, [r7, #5]
 8010d92:	7013      	strb	r3, [r2, #0]
	
	MAP_setCmdPos( uc_x, uc_y, en_dir );
 8010d94:	797a      	ldrb	r2, [r7, #5]
 8010d96:	79b9      	ldrb	r1, [r7, #6]
 8010d98:	79fb      	ldrb	r3, [r7, #7]
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fd fb9e 	bl	800e4dc <MAP_setCmdPos>

}
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	2000e607 	.word	0x2000e607
 8010dac:	2000e5fd 	.word	0x2000e5fd
 8010db0:	2000e604 	.word	0x2000e604

08010db4 <MAP_showLog>:

void MAP_showLog( void )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
	uint8_t	c_data;
	
	/* ---------- */
	/*  通常迷路  */
	/* ---------- */
	printf("\n\r  /* ---------- */   ");
 8010dba:	4857      	ldr	r0, [pc, #348]	; (8010f18 <MAP_showLog+0x164>)
 8010dbc:	f005 fcba 	bl	8016734 <iprintf>
	printf("\n\r  /*  通常迷路  */   ");
 8010dc0:	4856      	ldr	r0, [pc, #344]	; (8010f1c <MAP_showLog+0x168>)
 8010dc2:	f005 fcb7 	bl	8016734 <iprintf>
	printf("\n\r  /* ---------- */   ");
 8010dc6:	4854      	ldr	r0, [pc, #336]	; (8010f18 <MAP_showLog+0x164>)
 8010dc8:	f005 fcb4 	bl	8016734 <iprintf>

	printf("\n\r     ");
 8010dcc:	4854      	ldr	r0, [pc, #336]	; (8010f20 <MAP_showLog+0x16c>)
 8010dce:	f005 fcb1 	bl	8016734 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	80fb      	strh	r3, [r7, #6]
 8010dd6:	e008      	b.n	8010dea <MAP_showLog+0x36>
		printf("._");
 8010dd8:	4852      	ldr	r0, [pc, #328]	; (8010f24 <MAP_showLog+0x170>)
 8010dda:	f005 fcab 	bl	8016734 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8010dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	3301      	adds	r3, #1
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	80fb      	strh	r3, [r7, #6]
 8010dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dee:	2b1f      	cmp	r3, #31
 8010df0:	ddf2      	ble.n	8010dd8 <MAP_showLog+0x24>
	}
	printf(".\n\r");
 8010df2:	484d      	ldr	r0, [pc, #308]	; (8010f28 <MAP_showLog+0x174>)
 8010df4:	f005 fc9e 	bl	8016734 <iprintf>
	
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8010df8:	231f      	movs	r3, #31
 8010dfa:	80bb      	strh	r3, [r7, #4]
 8010dfc:	e05f      	b.n	8010ebe <MAP_showLog+0x10a>
		
		printf("   %2d",y);
 8010dfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010e02:	4619      	mov	r1, r3
 8010e04:	4849      	ldr	r0, [pc, #292]	; (8010f2c <MAP_showLog+0x178>)
 8010e06:	f005 fc95 	bl	8016734 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++){
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	80fb      	strh	r3, [r7, #6]
 8010e0e:	e027      	b.n	8010e60 <MAP_showLog+0xac>
			c_data = (uint8_t)g_sysMap[y][x];
 8010e10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e18:	4945      	ldr	r1, [pc, #276]	; (8010f30 <MAP_showLog+0x17c>)
 8010e1a:	0152      	lsls	r2, r2, #5
 8010e1c:	440a      	add	r2, r1
 8010e1e:	4413      	add	r3, r2
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	70fb      	strb	r3, [r7, #3]
			if ( ( c_data & 0x08 ) == 0 ){
 8010e24:	78fb      	ldrb	r3, [r7, #3]
 8010e26:	f003 0308 	and.w	r3, r3, #8
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d103      	bne.n	8010e36 <MAP_showLog+0x82>
				printf(".");
 8010e2e:	202e      	movs	r0, #46	; 0x2e
 8010e30:	f005 fc98 	bl	8016764 <putchar>
 8010e34:	e002      	b.n	8010e3c <MAP_showLog+0x88>
			}
			else{
				printf("|");
 8010e36:	207c      	movs	r0, #124	; 0x7c
 8010e38:	f005 fc94 	bl	8016764 <putchar>
			}
			if ( ( c_data & 0x04 ) == 0 ){
 8010e3c:	78fb      	ldrb	r3, [r7, #3]
 8010e3e:	f003 0304 	and.w	r3, r3, #4
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <MAP_showLog+0x9a>
				printf(" ");
 8010e46:	2020      	movs	r0, #32
 8010e48:	f005 fc8c 	bl	8016764 <putchar>
 8010e4c:	e002      	b.n	8010e54 <MAP_showLog+0xa0>
			}
			else{
				printf("_");
 8010e4e:	205f      	movs	r0, #95	; 0x5f
 8010e50:	f005 fc88 	bl	8016764 <putchar>
		for( x=0; x<MAP_X_SIZE; x++){
 8010e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	80fb      	strh	r3, [r7, #6]
 8010e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e64:	2b1f      	cmp	r3, #31
 8010e66:	ddd3      	ble.n	8010e10 <MAP_showLog+0x5c>
			}
		}
		printf("|   ");
 8010e68:	4832      	ldr	r0, [pc, #200]	; (8010f34 <MAP_showLog+0x180>)
 8010e6a:	f005 fc63 	bl	8016734 <iprintf>
		
		for( x=0; x<MAP_X_SIZE; x++ ){
 8010e6e:	2300      	movs	r3, #0
 8010e70:	80fb      	strh	r3, [r7, #6]
 8010e72:	e017      	b.n	8010ea4 <MAP_showLog+0xf0>
			c_data = g_sysMap[y][x];
 8010e74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e7c:	492c      	ldr	r1, [pc, #176]	; (8010f30 <MAP_showLog+0x17c>)
 8010e7e:	0152      	lsls	r2, r2, #5
 8010e80:	440a      	add	r2, r1
 8010e82:	4413      	add	r3, r2
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	70fb      	strb	r3, [r7, #3]
			c_data = c_data >> 4;
 8010e88:	78fb      	ldrb	r3, [r7, #3]
 8010e8a:	091b      	lsrs	r3, r3, #4
 8010e8c:	70fb      	strb	r3, [r7, #3]
			printf("%x", c_data);
 8010e8e:	78fb      	ldrb	r3, [r7, #3]
 8010e90:	4619      	mov	r1, r3
 8010e92:	4829      	ldr	r0, [pc, #164]	; (8010f38 <MAP_showLog+0x184>)
 8010e94:	f005 fc4e 	bl	8016734 <iprintf>
		for( x=0; x<MAP_X_SIZE; x++ ){
 8010e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	80fb      	strh	r3, [r7, #6]
 8010ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ea8:	2b1f      	cmp	r3, #31
 8010eaa:	dde3      	ble.n	8010e74 <MAP_showLog+0xc0>
		}
		
		printf("\n\r");
 8010eac:	4823      	ldr	r0, [pc, #140]	; (8010f3c <MAP_showLog+0x188>)
 8010eae:	f005 fc41 	bl	8016734 <iprintf>
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 8010eb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	80bb      	strh	r3, [r7, #4]
 8010ebe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	da9b      	bge.n	8010dfe <MAP_showLog+0x4a>
	}
	
	printf("     ");
 8010ec6:	481e      	ldr	r0, [pc, #120]	; (8010f40 <MAP_showLog+0x18c>)
 8010ec8:	f005 fc34 	bl	8016734 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8010ecc:	2300      	movs	r3, #0
 8010ece:	80fb      	strh	r3, [r7, #6]
 8010ed0:	e017      	b.n	8010f02 <MAP_showLog+0x14e>
		printf("%2d",x%10);
 8010ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ed6:	4b1b      	ldr	r3, [pc, #108]	; (8010f44 <MAP_showLog+0x190>)
 8010ed8:	fb83 1302 	smull	r1, r3, r3, r2
 8010edc:	1099      	asrs	r1, r3, #2
 8010ede:	17d3      	asrs	r3, r2, #31
 8010ee0:	1ac9      	subs	r1, r1, r3
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	009b      	lsls	r3, r3, #2
 8010ee6:	440b      	add	r3, r1
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	b21b      	sxth	r3, r3
 8010eee:	4619      	mov	r1, r3
 8010ef0:	4815      	ldr	r0, [pc, #84]	; (8010f48 <MAP_showLog+0x194>)
 8010ef2:	f005 fc1f 	bl	8016734 <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 8010ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	3301      	adds	r3, #1
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	80fb      	strh	r3, [r7, #6]
 8010f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f06:	2b1f      	cmp	r3, #31
 8010f08:	dde3      	ble.n	8010ed2 <MAP_showLog+0x11e>
	}
	printf("\n\r");
 8010f0a:	480c      	ldr	r0, [pc, #48]	; (8010f3c <MAP_showLog+0x188>)
 8010f0c:	f005 fc12 	bl	8016734 <iprintf>

}
 8010f10:	bf00      	nop
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	0801bcfc 	.word	0x0801bcfc
 8010f1c:	0801bd14 	.word	0x0801bd14
 8010f20:	0801bd30 	.word	0x0801bd30
 8010f24:	0801bd38 	.word	0x0801bd38
 8010f28:	0801bd3c 	.word	0x0801bd3c
 8010f2c:	0801bd40 	.word	0x0801bd40
 8010f30:	20000708 	.word	0x20000708
 8010f34:	0801bd48 	.word	0x0801bd48
 8010f38:	0801bd50 	.word	0x0801bd50
 8010f3c:	0801bd54 	.word	0x0801bd54
 8010f40:	0801bd58 	.word	0x0801bd58
 8010f44:	66666667 	.word	0x66666667
 8010f48:	0801bd60 	.word	0x0801bd60

08010f4c <MAP_clearMap>:
		printf("\n\r");
	}
}

void MAP_clearMap( void )
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8010f52:	2300      	movs	r3, #0
 8010f54:	80bb      	strh	r3, [r7, #4]
 8010f56:	e059      	b.n	801100c <MAP_clearMap+0xc0>
		for( x = 0; x < MAP_X_SIZE; x++){
 8010f58:	2300      	movs	r3, #0
 8010f5a:	80fb      	strh	r3, [r7, #6]
 8010f5c:	e050      	b.n	8011000 <MAP_clearMap+0xb4>
			uc_data = 0x00;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	70fb      	strb	r3, [r7, #3]
			if ( ( x == 0) && ( y == 0 ) ) uc_data = 0xfe;
 8010f62:	88fb      	ldrh	r3, [r7, #6]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d105      	bne.n	8010f74 <MAP_clearMap+0x28>
 8010f68:	88bb      	ldrh	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d102      	bne.n	8010f74 <MAP_clearMap+0x28>
 8010f6e:	23fe      	movs	r3, #254	; 0xfe
 8010f70:	70fb      	strb	r3, [r7, #3]
 8010f72:	e03a      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( ( x == 1 ) && ( y == 0 ) ) uc_data = 0xcc;
 8010f74:	88fb      	ldrh	r3, [r7, #6]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d105      	bne.n	8010f86 <MAP_clearMap+0x3a>
 8010f7a:	88bb      	ldrh	r3, [r7, #4]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d102      	bne.n	8010f86 <MAP_clearMap+0x3a>
 8010f80:	23cc      	movs	r3, #204	; 0xcc
 8010f82:	70fb      	strb	r3, [r7, #3]
 8010f84:	e031      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == 0 ) ) uc_data = 0x66;
 8010f86:	88fb      	ldrh	r3, [r7, #6]
 8010f88:	2b1f      	cmp	r3, #31
 8010f8a:	d105      	bne.n	8010f98 <MAP_clearMap+0x4c>
 8010f8c:	88bb      	ldrh	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d102      	bne.n	8010f98 <MAP_clearMap+0x4c>
 8010f92:	2366      	movs	r3, #102	; 0x66
 8010f94:	70fb      	strb	r3, [r7, #3]
 8010f96:	e028      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( ( x == 0 ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x99;
 8010f98:	88fb      	ldrh	r3, [r7, #6]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d105      	bne.n	8010faa <MAP_clearMap+0x5e>
 8010f9e:	88bb      	ldrh	r3, [r7, #4]
 8010fa0:	2b1f      	cmp	r3, #31
 8010fa2:	d102      	bne.n	8010faa <MAP_clearMap+0x5e>
 8010fa4:	2399      	movs	r3, #153	; 0x99
 8010fa6:	70fb      	strb	r3, [r7, #3]
 8010fa8:	e01f      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x33;
 8010faa:	88fb      	ldrh	r3, [r7, #6]
 8010fac:	2b1f      	cmp	r3, #31
 8010fae:	d105      	bne.n	8010fbc <MAP_clearMap+0x70>
 8010fb0:	88bb      	ldrh	r3, [r7, #4]
 8010fb2:	2b1f      	cmp	r3, #31
 8010fb4:	d102      	bne.n	8010fbc <MAP_clearMap+0x70>
 8010fb6:	2333      	movs	r3, #51	; 0x33
 8010fb8:	70fb      	strb	r3, [r7, #3]
 8010fba:	e016      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( x == 0 ) uc_data = 0x88;
 8010fbc:	88fb      	ldrh	r3, [r7, #6]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d102      	bne.n	8010fc8 <MAP_clearMap+0x7c>
 8010fc2:	2388      	movs	r3, #136	; 0x88
 8010fc4:	70fb      	strb	r3, [r7, #3]
 8010fc6:	e010      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( x == (MAP_X_SIZE-1) ) uc_data = 0x22;
 8010fc8:	88fb      	ldrh	r3, [r7, #6]
 8010fca:	2b1f      	cmp	r3, #31
 8010fcc:	d102      	bne.n	8010fd4 <MAP_clearMap+0x88>
 8010fce:	2322      	movs	r3, #34	; 0x22
 8010fd0:	70fb      	strb	r3, [r7, #3]
 8010fd2:	e00a      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( y == 0 ) uc_data = 0x44;
 8010fd4:	88bb      	ldrh	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d102      	bne.n	8010fe0 <MAP_clearMap+0x94>
 8010fda:	2344      	movs	r3, #68	; 0x44
 8010fdc:	70fb      	strb	r3, [r7, #3]
 8010fde:	e004      	b.n	8010fea <MAP_clearMap+0x9e>
			else if ( y == (MAP_Y_SIZE-1) ) uc_data = 0x11;
 8010fe0:	88bb      	ldrh	r3, [r7, #4]
 8010fe2:	2b1f      	cmp	r3, #31
 8010fe4:	d101      	bne.n	8010fea <MAP_clearMap+0x9e>
 8010fe6:	2311      	movs	r3, #17
 8010fe8:	70fb      	strb	r3, [r7, #3]
			g_sysMap[y][x] = uc_data;
 8010fea:	88ba      	ldrh	r2, [r7, #4]
 8010fec:	88fb      	ldrh	r3, [r7, #6]
 8010fee:	490c      	ldr	r1, [pc, #48]	; (8011020 <MAP_clearMap+0xd4>)
 8010ff0:	0152      	lsls	r2, r2, #5
 8010ff2:	440a      	add	r2, r1
 8010ff4:	4413      	add	r3, r2
 8010ff6:	78fa      	ldrb	r2, [r7, #3]
 8010ff8:	701a      	strb	r2, [r3, #0]
		for( x = 0; x < MAP_X_SIZE; x++){
 8010ffa:	88fb      	ldrh	r3, [r7, #6]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	80fb      	strh	r3, [r7, #6]
 8011000:	88fb      	ldrh	r3, [r7, #6]
 8011002:	2b1f      	cmp	r3, #31
 8011004:	d9ab      	bls.n	8010f5e <MAP_clearMap+0x12>
	for ( y = 0; y < MAP_Y_SIZE; y++){
 8011006:	88bb      	ldrh	r3, [r7, #4]
 8011008:	3301      	adds	r3, #1
 801100a:	80bb      	strh	r3, [r7, #4]
 801100c:	88bb      	ldrh	r3, [r7, #4]
 801100e:	2b1f      	cmp	r3, #31
 8011010:	d9a2      	bls.n	8010f58 <MAP_clearMap+0xc>
		}
	}

}
 8011012:	bf00      	nop
 8011014:	bf00      	nop
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr
 8011020:	20000708 	.word	0x20000708

08011024 <MAP_getWallData>:

uint8_t MAP_getWallData( void )
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

//	LED_offAll();			// debug

	// センサ情報から壁情報作成
	uc_wall = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 801102e:	f7fc fa95 	bl	800d55c <DIST_isWall_FRONT>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d003      	beq.n	8011040 <MAP_getWallData+0x1c>
		uc_wall = uc_wall | 0x11;
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	f043 0311 	orr.w	r3, r3, #17
 801103e:	71fb      	strb	r3, [r7, #7]
//		LED_on(LED3);			// debug
//		LED_on(LED2);			// debug
	}
	if( TRUE == DIST_isWall_L_SIDE() ){
 8011040:	f7fc fabe 	bl	800d5c0 <DIST_isWall_L_SIDE>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d003      	beq.n	8011052 <MAP_getWallData+0x2e>
//		LED_on(LED0);			// debug
		uc_wall = uc_wall | 0x88;
 801104a:	79fb      	ldrb	r3, [r7, #7]
 801104c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8011050:	71fb      	strb	r3, [r7, #7]
	}
	if( TRUE == DIST_isWall_R_SIDE() ){
 8011052:	f7fc fa9f 	bl	800d594 <DIST_isWall_R_SIDE>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d003      	beq.n	8011064 <MAP_getWallData+0x40>
//		LED_on(LED1);			// debug
		uc_wall = uc_wall | 0x22;
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8011062:	71fb      	strb	r3, [r7, #7]
	}
	if(DIST_getNowVal(DIST_SEN_L_SIDE)>L_SIDE_REF){
 8011064:	2003      	movs	r0, #3
 8011066:	f7fb ff87 	bl	800cf78 <DIST_getNowVal>
 801106a:	4603      	mov	r3, r0
 801106c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8011070:	dd02      	ble.n	8011078 <MAP_getWallData+0x54>
		near_wall = 1;
 8011072:	4b16      	ldr	r3, [pc, #88]	; (80110cc <MAP_getWallData+0xa8>)
 8011074:	2201      	movs	r2, #1
 8011076:	701a      	strb	r2, [r3, #0]
	}
	if(DIST_getNowVal(DIST_SEN_R_SIDE)>R_SIDE_REF){
 8011078:	2002      	movs	r0, #2
 801107a:	f7fb ff7d 	bl	800cf78 <DIST_getNowVal>
 801107e:	4603      	mov	r3, r0
 8011080:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8011084:	dd02      	ble.n	801108c <MAP_getWallData+0x68>
		near_wall = 1;
 8011086:	4b11      	ldr	r3, [pc, #68]	; (80110cc <MAP_getWallData+0xa8>)
 8011088:	2201      	movs	r2, #1
 801108a:	701a      	strb	r2, [r3, #0]
	}

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 801108c:	4b10      	ldr	r3, [pc, #64]	; (80110d0 <MAP_getWallData+0xac>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d103      	bne.n	801109c <MAP_getWallData+0x78>
		uc_wall = uc_wall >> 3;
 8011094:	79fb      	ldrb	r3, [r7, #7]
 8011096:	08db      	lsrs	r3, r3, #3
 8011098:	71fb      	strb	r3, [r7, #7]
 801109a:	e00e      	b.n	80110ba <MAP_getWallData+0x96>
	}
	else if ( en_Head == SOUTH ){
 801109c:	4b0c      	ldr	r3, [pc, #48]	; (80110d0 <MAP_getWallData+0xac>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d103      	bne.n	80110ac <MAP_getWallData+0x88>
		uc_wall = uc_wall >> 2;
 80110a4:	79fb      	ldrb	r3, [r7, #7]
 80110a6:	089b      	lsrs	r3, r3, #2
 80110a8:	71fb      	strb	r3, [r7, #7]
 80110aa:	e006      	b.n	80110ba <MAP_getWallData+0x96>
	}
	else if ( en_Head == WEST ){
 80110ac:	4b08      	ldr	r3, [pc, #32]	; (80110d0 <MAP_getWallData+0xac>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	d102      	bne.n	80110ba <MAP_getWallData+0x96>
		uc_wall = uc_wall >> 1;
 80110b4:	79fb      	ldrb	r3, [r7, #7]
 80110b6:	085b      	lsrs	r3, r3, #1
 80110b8:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	f063 030f 	orn	r3, r3, #15
 80110c0:	b2db      	uxtb	r3, r3
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	200002ca 	.word	0x200002ca
 80110d0:	2000e604 	.word	0x2000e604

080110d4 <MAP_makeMapData>:

void MAP_makeMapData( void )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込
	if ( ( mx == 0 ) && ( my == 0 ) ){
 80110da:	4b66      	ldr	r3, [pc, #408]	; (8011274 <MAP_makeMapData+0x1a0>)
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <MAP_makeMapData+0x1c>
 80110e2:	4b65      	ldr	r3, [pc, #404]	; (8011278 <MAP_makeMapData+0x1a4>)
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d102      	bne.n	80110f0 <MAP_makeMapData+0x1c>
		uc_wall = 0xfe;
 80110ea:	23fe      	movs	r3, #254	; 0xfe
 80110ec:	71fb      	strb	r3, [r7, #7]
 80110ee:	e003      	b.n	80110f8 <MAP_makeMapData+0x24>
	}
	else{
		uc_wall = MAP_getWallData();
 80110f0:	f7ff ff98 	bl	8011024 <MAP_getWallData>
 80110f4:	4603      	mov	r3, r0
 80110f6:	71fb      	strb	r3, [r7, #7]
	}
	g_sysMap[my][mx] = uc_wall;
 80110f8:	4b5f      	ldr	r3, [pc, #380]	; (8011278 <MAP_makeMapData+0x1a4>)
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	4618      	mov	r0, r3
 80110fe:	4b5d      	ldr	r3, [pc, #372]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	4619      	mov	r1, r3
 8011104:	4a5d      	ldr	r2, [pc, #372]	; (801127c <MAP_makeMapData+0x1a8>)
 8011106:	0143      	lsls	r3, r0, #5
 8011108:	4413      	add	r3, r2
 801110a:	440b      	add	r3, r1
 801110c:	79fa      	ldrb	r2, [r7, #7]
 801110e:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 8011110:	4b58      	ldr	r3, [pc, #352]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	2b1f      	cmp	r3, #31
 8011116:	d026      	beq.n	8011166 <MAP_makeMapData+0x92>
		g_sysMap[my][mx+1] = ( g_sysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 8011118:	4b57      	ldr	r3, [pc, #348]	; (8011278 <MAP_makeMapData+0x1a4>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	461a      	mov	r2, r3
 801111e:	4b55      	ldr	r3, [pc, #340]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	3301      	adds	r3, #1
 8011124:	4955      	ldr	r1, [pc, #340]	; (801127c <MAP_makeMapData+0x1a8>)
 8011126:	0152      	lsls	r2, r2, #5
 8011128:	440a      	add	r2, r1
 801112a:	4413      	add	r3, r2
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	b25b      	sxtb	r3, r3
 8011130:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8011134:	b25b      	sxtb	r3, r3
 8011136:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801113a:	b25a      	sxtb	r2, r3
 801113c:	79fb      	ldrb	r3, [r7, #7]
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	b25b      	sxtb	r3, r3
 8011142:	f003 0308 	and.w	r3, r3, #8
 8011146:	b25b      	sxtb	r3, r3
 8011148:	4313      	orrs	r3, r2
 801114a:	b259      	sxtb	r1, r3
 801114c:	4b4a      	ldr	r3, [pc, #296]	; (8011278 <MAP_makeMapData+0x1a4>)
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	461a      	mov	r2, r3
 8011152:	4b48      	ldr	r3, [pc, #288]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	3301      	adds	r3, #1
 8011158:	b2c8      	uxtb	r0, r1
 801115a:	4948      	ldr	r1, [pc, #288]	; (801127c <MAP_makeMapData+0x1a8>)
 801115c:	0152      	lsls	r2, r2, #5
 801115e:	440a      	add	r2, r1
 8011160:	4413      	add	r3, r2
 8011162:	4602      	mov	r2, r0
 8011164:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 8011166:	4b43      	ldr	r3, [pc, #268]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d027      	beq.n	80111be <MAP_makeMapData+0xea>
		g_sysMap[my][mx-1] = ( g_sysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 801116e:	4b42      	ldr	r3, [pc, #264]	; (8011278 <MAP_makeMapData+0x1a4>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	461a      	mov	r2, r3
 8011174:	4b3f      	ldr	r3, [pc, #252]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	3b01      	subs	r3, #1
 801117a:	4940      	ldr	r1, [pc, #256]	; (801127c <MAP_makeMapData+0x1a8>)
 801117c:	0152      	lsls	r2, r2, #5
 801117e:	440a      	add	r2, r1
 8011180:	4413      	add	r3, r2
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	b25b      	sxtb	r3, r3
 8011186:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801118a:	b25b      	sxtb	r3, r3
 801118c:	f043 0320 	orr.w	r3, r3, #32
 8011190:	b25a      	sxtb	r2, r3
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	089b      	lsrs	r3, r3, #2
 8011196:	b2db      	uxtb	r3, r3
 8011198:	b25b      	sxtb	r3, r3
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	b25b      	sxtb	r3, r3
 80111a0:	4313      	orrs	r3, r2
 80111a2:	b259      	sxtb	r1, r3
 80111a4:	4b34      	ldr	r3, [pc, #208]	; (8011278 <MAP_makeMapData+0x1a4>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	461a      	mov	r2, r3
 80111aa:	4b32      	ldr	r3, [pc, #200]	; (8011274 <MAP_makeMapData+0x1a0>)
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	3b01      	subs	r3, #1
 80111b0:	b2c8      	uxtb	r0, r1
 80111b2:	4932      	ldr	r1, [pc, #200]	; (801127c <MAP_makeMapData+0x1a8>)
 80111b4:	0152      	lsls	r2, r2, #5
 80111b6:	440a      	add	r2, r1
 80111b8:	4413      	add	r3, r2
 80111ba:	4602      	mov	r2, r0
 80111bc:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 80111be:	4b2e      	ldr	r3, [pc, #184]	; (8011278 <MAP_makeMapData+0x1a4>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b1f      	cmp	r3, #31
 80111c4:	d026      	beq.n	8011214 <MAP_makeMapData+0x140>
		g_sysMap[my+1][mx] = ( g_sysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 80111c6:	4b2c      	ldr	r3, [pc, #176]	; (8011278 <MAP_makeMapData+0x1a4>)
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	3301      	adds	r3, #1
 80111cc:	4a29      	ldr	r2, [pc, #164]	; (8011274 <MAP_makeMapData+0x1a0>)
 80111ce:	7812      	ldrb	r2, [r2, #0]
 80111d0:	4611      	mov	r1, r2
 80111d2:	4a2a      	ldr	r2, [pc, #168]	; (801127c <MAP_makeMapData+0x1a8>)
 80111d4:	015b      	lsls	r3, r3, #5
 80111d6:	4413      	add	r3, r2
 80111d8:	440b      	add	r3, r1
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	b25b      	sxtb	r3, r3
 80111de:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80111e2:	b25b      	sxtb	r3, r3
 80111e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111e8:	b25a      	sxtb	r2, r3
 80111ea:	79fb      	ldrb	r3, [r7, #7]
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	b25b      	sxtb	r3, r3
 80111f0:	f003 0304 	and.w	r3, r3, #4
 80111f4:	b25b      	sxtb	r3, r3
 80111f6:	4313      	orrs	r3, r2
 80111f8:	b259      	sxtb	r1, r3
 80111fa:	4b1f      	ldr	r3, [pc, #124]	; (8011278 <MAP_makeMapData+0x1a4>)
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	3301      	adds	r3, #1
 8011200:	4a1c      	ldr	r2, [pc, #112]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011202:	7812      	ldrb	r2, [r2, #0]
 8011204:	4610      	mov	r0, r2
 8011206:	b2c9      	uxtb	r1, r1
 8011208:	4a1c      	ldr	r2, [pc, #112]	; (801127c <MAP_makeMapData+0x1a8>)
 801120a:	015b      	lsls	r3, r3, #5
 801120c:	4413      	add	r3, r2
 801120e:	4403      	add	r3, r0
 8011210:	460a      	mov	r2, r1
 8011212:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 8011214:	4b18      	ldr	r3, [pc, #96]	; (8011278 <MAP_makeMapData+0x1a4>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d027      	beq.n	801126c <MAP_makeMapData+0x198>
		g_sysMap[my-1][mx] = ( g_sysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 801121c:	4b16      	ldr	r3, [pc, #88]	; (8011278 <MAP_makeMapData+0x1a4>)
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	3b01      	subs	r3, #1
 8011222:	4a14      	ldr	r2, [pc, #80]	; (8011274 <MAP_makeMapData+0x1a0>)
 8011224:	7812      	ldrb	r2, [r2, #0]
 8011226:	4611      	mov	r1, r2
 8011228:	4a14      	ldr	r2, [pc, #80]	; (801127c <MAP_makeMapData+0x1a8>)
 801122a:	015b      	lsls	r3, r3, #5
 801122c:	4413      	add	r3, r2
 801122e:	440b      	add	r3, r1
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	b25b      	sxtb	r3, r3
 8011234:	f023 0311 	bic.w	r3, r3, #17
 8011238:	b25b      	sxtb	r3, r3
 801123a:	f043 0310 	orr.w	r3, r3, #16
 801123e:	b25a      	sxtb	r2, r3
 8011240:	79fb      	ldrb	r3, [r7, #7]
 8011242:	089b      	lsrs	r3, r3, #2
 8011244:	b2db      	uxtb	r3, r3
 8011246:	b25b      	sxtb	r3, r3
 8011248:	f003 0301 	and.w	r3, r3, #1
 801124c:	b25b      	sxtb	r3, r3
 801124e:	4313      	orrs	r3, r2
 8011250:	b259      	sxtb	r1, r3
 8011252:	4b09      	ldr	r3, [pc, #36]	; (8011278 <MAP_makeMapData+0x1a4>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	3b01      	subs	r3, #1
 8011258:	4a06      	ldr	r2, [pc, #24]	; (8011274 <MAP_makeMapData+0x1a0>)
 801125a:	7812      	ldrb	r2, [r2, #0]
 801125c:	4610      	mov	r0, r2
 801125e:	b2c9      	uxtb	r1, r1
 8011260:	4a06      	ldr	r2, [pc, #24]	; (801127c <MAP_makeMapData+0x1a8>)
 8011262:	015b      	lsls	r3, r3, #5
 8011264:	4413      	add	r3, r2
 8011266:	4403      	add	r3, r0
 8011268:	460a      	mov	r2, r1
 801126a:	701a      	strb	r2, [r3, #0]
	}

}
 801126c:	bf00      	nop
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	2000e607 	.word	0x2000e607
 8011278:	2000e5fd 	.word	0x2000e5fd
 801127c:	20000708 	.word	0x20000708

08011280 <setStep>:
	}
	while( uc_level != 0 );
	
}
*/
void setStep(const int8_t x, const int8_t y, const uint16_t step) {
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	71fb      	strb	r3, [r7, #7]
 801128a:	460b      	mov	r3, r1
 801128c:	71bb      	strb	r3, [r7, #6]
 801128e:	4613      	mov	r3, r2
 8011290:	80bb      	strh	r3, [r7, #4]
	/* (x, y) がフィールド内か確認 */
	if (x < 0 || y < 0 || x >= MAP_X_SIZE || y >= MAP_Y_SIZE) {
 8011292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011296:	2b00      	cmp	r3, #0
 8011298:	db0b      	blt.n	80112b2 <setStep+0x32>
 801129a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	db07      	blt.n	80112b2 <setStep+0x32>
 80112a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112a6:	2b1f      	cmp	r3, #31
 80112a8:	dc03      	bgt.n	80112b2 <setStep+0x32>
 80112aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80112ae:	2b1f      	cmp	r3, #31
 80112b0:	dd03      	ble.n	80112ba <setStep+0x3a>
		printf( "referred to out of field\r\n");
 80112b2:	4808      	ldr	r0, [pc, #32]	; (80112d4 <setStep+0x54>)
 80112b4:	f005 fada 	bl	801686c <puts>
		return;
 80112b8:	e009      	b.n	80112ce <setStep+0x4e>
	}
	us_cmap[y][x] = step;
 80112ba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80112be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112c2:	4905      	ldr	r1, [pc, #20]	; (80112d8 <setStep+0x58>)
 80112c4:	0152      	lsls	r2, r2, #5
 80112c6:	4413      	add	r3, r2
 80112c8:	88ba      	ldrh	r2, [r7, #4]
 80112ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	0801bda8 	.word	0x0801bda8
 80112d8:	20000b2c 	.word	0x20000b2c

080112dc <MAP_makeContourMap_queue>:

void  MAP_makeContourMap_queue(//queue
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 80112dc:	b590      	push	{r4, r7, lr}
 80112de:	b0cd      	sub	sp, #308	; 0x134
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	4604      	mov	r4, r0
 80112e4:	4608      	mov	r0, r1
 80112e6:	4611      	mov	r1, r2
 80112e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80112ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80112f0:	4622      	mov	r2, r4
 80112f2:	701a      	strb	r2, [r3, #0]
 80112f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80112f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80112fc:	4602      	mov	r2, r0
 80112fe:	701a      	strb	r2, [r3, #0]
 8011300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011304:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011308:	460a      	mov	r2, r1
 801130a:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）
 801130c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011310:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011314:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011318:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801131c:	7812      	ldrb	r2, [r2, #0]
 801131e:	701a      	strb	r2, [r3, #0]

	queue_t queue;
	queue_t* pQueue = &queue;
 8011320:	f107 0310 	add.w	r3, r7, #16
 8011324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 8011328:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801132c:	f7f1 fe7e 	bl	800302c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8011330:	2300      	movs	r3, #0
 8011332:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8011336:	e014      	b.n	8011362 <MAP_makeContourMap_queue+0x86>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 8011338:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 801133c:	095b      	lsrs	r3, r3, #5
 801133e:	b29b      	uxth	r3, r3
 8011340:	461a      	mov	r2, r3
 8011342:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011346:	f003 031f 	and.w	r3, r3, #31
 801134a:	49d7      	ldr	r1, [pc, #860]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 801134c:	0152      	lsls	r2, r2, #5
 801134e:	4413      	add	r3, r2
 8011350:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011354:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8011358:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 801135c:	3301      	adds	r3, #1
 801135e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8011362:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8011366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801136a:	d3e5      	bcc.n	8011338 <MAP_makeContourMap_queue+0x5c>

//	std::queue<stPOSITION> q;
//	QueryPerformanceCounter(&start);

	/* 目標地点の等高線を0に設定 */
	setStep(uc_goalX, uc_goalY, 0);
 801136c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011370:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011374:	f993 0000 	ldrsb.w	r0, [r3]
 8011378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801137c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011380:	f993 3000 	ldrsb.w	r3, [r3]
 8011384:	2200      	movs	r2, #0
 8011386:	4619      	mov	r1, r3
 8011388:	f7ff ff7a 	bl	8011280 <setStep>
	st_pos.x = uc_goalX;
 801138c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011390:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = uc_goalY;
 801139a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801139e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 80113ae:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80113b2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80113b6:	f7f1 fe69 	bl	800308c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 80113ba:	e167      	b.n	801168c <MAP_makeContourMap_queue+0x3b0>
		const stPOSITION focus = dequeue(pQueue);
 80113bc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80113c0:	f7f1 fea0 	bl	8003104 <dequeue>
 80113c4:	4602      	mov	r2, r0
 80113c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113ca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113ce:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 80113d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113d8:	885b      	ldrh	r3, [r3, #2]
 80113da:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 80113de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 80113ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80113f4:	785b      	ldrb	r3, [r3, #1]
 80113f6:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 80113fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011402:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011406:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 801140a:	6812      	ldr	r2, [r2, #0]
 801140c:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 801140e:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011412:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011416:	49a5      	ldr	r1, [pc, #660]	; (80116ac <MAP_makeContourMap_queue+0x3d0>)
 8011418:	0152      	lsls	r2, r2, #5
 801141a:	440a      	add	r2, r1
 801141c:	4413      	add	r3, r2
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8011424:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8011428:	f003 0301 	and.w	r3, r3, #1
 801142c:	2b00      	cmp	r3, #0
 801142e:	d146      	bne.n	80114be <MAP_makeContourMap_queue+0x1e2>
 8011430:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011434:	2b1f      	cmp	r3, #31
 8011436:	d042      	beq.n	80114be <MAP_makeContourMap_queue+0x1e2>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 8011438:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011442:	4999      	ldr	r1, [pc, #612]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 8011444:	0152      	lsls	r2, r2, #5
 8011446:	4413      	add	r3, r2
 8011448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801144c:	461a      	mov	r2, r3
 801144e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011452:	3301      	adds	r3, #1
 8011454:	429a      	cmp	r2, r3
 8011456:	dd32      	ble.n	80114be <MAP_makeContourMap_queue+0x1e2>
				next.step = focus_step + 1;
 8011458:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801145c:	3301      	adds	r3, #1
 801145e:	b29a      	uxth	r2, r3
 8011460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011464:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011468:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 801146a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011474:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8011478:	3101      	adds	r1, #1
 801147a:	b288      	uxth	r0, r1
 801147c:	498a      	ldr	r1, [pc, #552]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 801147e:	0152      	lsls	r2, r2, #5
 8011480:	4413      	add	r3, r2
 8011482:	4602      	mov	r2, r0
 8011484:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8011488:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801148c:	b2da      	uxtb	r2, r3
 801148e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011492:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011496:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8011498:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801149c:	b2db      	uxtb	r3, r3
 801149e:	3301      	adds	r3, #1
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80114a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80114aa:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 80114ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80114b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80114b4:	6819      	ldr	r1, [r3, #0]
 80114b6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80114ba:	f7f1 fde7 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 80114be:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80114c2:	f003 0302 	and.w	r3, r3, #2
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d146      	bne.n	8011558 <MAP_makeContourMap_queue+0x27c>
 80114ca:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80114ce:	2b1f      	cmp	r3, #31
 80114d0:	d042      	beq.n	8011558 <MAP_makeContourMap_queue+0x27c>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 80114d2:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 80114d6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80114da:	3301      	adds	r3, #1
 80114dc:	4972      	ldr	r1, [pc, #456]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 80114de:	0152      	lsls	r2, r2, #5
 80114e0:	4413      	add	r3, r2
 80114e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114e6:	461a      	mov	r2, r3
 80114e8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80114ec:	3301      	adds	r3, #1
 80114ee:	429a      	cmp	r2, r3
 80114f0:	dd32      	ble.n	8011558 <MAP_makeContourMap_queue+0x27c>
				next.step = focus_step + 1;
 80114f2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80114f6:	3301      	adds	r3, #1
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80114fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011502:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 8011504:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011508:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801150c:	3301      	adds	r3, #1
 801150e:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8011512:	3101      	adds	r1, #1
 8011514:	b288      	uxth	r0, r1
 8011516:	4964      	ldr	r1, [pc, #400]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 8011518:	0152      	lsls	r2, r2, #5
 801151a:	4413      	add	r3, r2
 801151c:	4602      	mov	r2, r0
 801151e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 8011522:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011526:	b2db      	uxtb	r3, r3
 8011528:	3301      	adds	r3, #1
 801152a:	b2da      	uxtb	r2, r3
 801152c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011530:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011534:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8011536:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801153a:	b2da      	uxtb	r2, r3
 801153c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011540:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011544:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8011546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801154a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801154e:	6819      	ldr	r1, [r3, #0]
 8011550:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011554:	f7f1 fd9a 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8011558:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 801155c:	f003 0304 	and.w	r3, r3, #4
 8011560:	2b00      	cmp	r3, #0
 8011562:	d146      	bne.n	80115f2 <MAP_makeContourMap_queue+0x316>
 8011564:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011568:	2b00      	cmp	r3, #0
 801156a:	d042      	beq.n	80115f2 <MAP_makeContourMap_queue+0x316>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 801156c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8011570:	1e5a      	subs	r2, r3, #1
 8011572:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011576:	494c      	ldr	r1, [pc, #304]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 8011578:	0152      	lsls	r2, r2, #5
 801157a:	4413      	add	r3, r2
 801157c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011580:	461a      	mov	r2, r3
 8011582:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011586:	3301      	adds	r3, #1
 8011588:	429a      	cmp	r2, r3
 801158a:	dd32      	ble.n	80115f2 <MAP_makeContourMap_queue+0x316>
				next.step = focus_step + 1;
 801158c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011590:	3301      	adds	r3, #1
 8011592:	b29a      	uxth	r2, r3
 8011594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011598:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801159c:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 801159e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80115a2:	1e5a      	subs	r2, r3, #1
 80115a4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80115a8:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 80115ac:	3101      	adds	r1, #1
 80115ae:	b288      	uxth	r0, r1
 80115b0:	493d      	ldr	r1, [pc, #244]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 80115b2:	0152      	lsls	r2, r2, #5
 80115b4:	4413      	add	r3, r2
 80115b6:	4602      	mov	r2, r0
 80115b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 80115bc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80115c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80115ca:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 80115cc:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	3b01      	subs	r3, #1
 80115d4:	b2da      	uxtb	r2, r3
 80115d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80115da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80115de:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 80115e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80115e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80115e8:	6819      	ldr	r1, [r3, #0]
 80115ea:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80115ee:	f7f1 fd4d 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 80115f2:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80115f6:	f003 0308 	and.w	r3, r3, #8
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d146      	bne.n	801168c <MAP_makeContourMap_queue+0x3b0>
 80115fe:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011602:	2b00      	cmp	r3, #0
 8011604:	d042      	beq.n	801168c <MAP_makeContourMap_queue+0x3b0>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 8011606:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 801160a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801160e:	3b01      	subs	r3, #1
 8011610:	4925      	ldr	r1, [pc, #148]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 8011612:	0152      	lsls	r2, r2, #5
 8011614:	4413      	add	r3, r2
 8011616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801161a:	461a      	mov	r2, r3
 801161c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8011620:	3301      	adds	r3, #1
 8011622:	429a      	cmp	r2, r3
 8011624:	dd32      	ble.n	801168c <MAP_makeContourMap_queue+0x3b0>
				next.step = focus_step + 1;
 8011626:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801162a:	3301      	adds	r3, #1
 801162c:	b29a      	uxth	r2, r3
 801162e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011636:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 8011638:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 801163c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8011640:	3b01      	subs	r3, #1
 8011642:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8011646:	3101      	adds	r1, #1
 8011648:	b288      	uxth	r0, r1
 801164a:	4917      	ldr	r1, [pc, #92]	; (80116a8 <MAP_makeContourMap_queue+0x3cc>)
 801164c:	0152      	lsls	r2, r2, #5
 801164e:	4413      	add	r3, r2
 8011650:	4602      	mov	r2, r0
 8011652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 8011656:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801165a:	b2db      	uxtb	r3, r3
 801165c:	3b01      	subs	r3, #1
 801165e:	b2da      	uxtb	r2, r3
 8011660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011664:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011668:	701a      	strb	r2, [r3, #0]
				next.y = y;
 801166a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801166e:	b2da      	uxtb	r2, r3
 8011670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011674:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011678:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 801167a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801167e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011682:	6819      	ldr	r1, [r3, #0]
 8011684:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8011688:	f7f1 fd00 	bl	800308c <enqueue>
	while (pQueue->flag != EMPTY) {
 801168c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011690:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011694:	2b00      	cmp	r3, #0
 8011696:	f47f ae91 	bne.w	80113bc <MAP_makeContourMap_queue+0xe0>
			}
		}

	}

}
 801169a:	bf00      	nop
 801169c:	bf00      	nop
 801169e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd90      	pop	{r4, r7, pc}
 80116a6:	bf00      	nop
 80116a8:	20000b2c 	.word	0x20000b2c
 80116ac:	20000708 	.word	0x20000708

080116b0 <MAP_makeContourMap_run>:

void  MAP_makeContourMap_run( //初期型のフルマップ生成　最短用に使用
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 80116b0:	b480      	push	{r7}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	4603      	mov	r3, r0
 80116b8:	71fb      	strb	r3, [r7, #7]
 80116ba:	460b      	mov	r3, r1
 80116bc:	71bb      	strb	r3, [r7, #6]
 80116be:	4613      	mov	r3, r2
 80116c0:	717b      	strb	r3, [r7, #5]
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	/* 等高線マップを初期化する */
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 80116c2:	2300      	movs	r3, #0
 80116c4:	827b      	strh	r3, [r7, #18]
 80116c6:	e010      	b.n	80116ea <MAP_makeContourMap_run+0x3a>
		us_cmap[ i / MAP_Y_SIZE][ i & (MAP_X_SIZE-1) ] = MAP_SMAP_MAX_VAL - 1;
 80116c8:	8a7b      	ldrh	r3, [r7, #18]
 80116ca:	095b      	lsrs	r3, r3, #5
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	461a      	mov	r2, r3
 80116d0:	8a7b      	ldrh	r3, [r7, #18]
 80116d2:	f003 031f 	and.w	r3, r3, #31
 80116d6:	4997      	ldr	r1, [pc, #604]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80116d8:	0152      	lsls	r2, r2, #5
 80116da:	4413      	add	r3, r2
 80116dc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80116e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 80116e4:	8a7b      	ldrh	r3, [r7, #18]
 80116e6:	3301      	adds	r3, #1
 80116e8:	827b      	strh	r3, [r7, #18]
 80116ea:	8a7b      	ldrh	r3, [r7, #18]
 80116ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116f0:	d3ea      	bcc.n	80116c8 <MAP_makeContourMap_run+0x18>
	}
	/* 目標地点の等高線を0に設定 */
	us_cmap[uc_goalY][uc_goalX] = 0;
 80116f2:	79ba      	ldrb	r2, [r7, #6]
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	498f      	ldr	r1, [pc, #572]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80116f8:	0152      	lsls	r2, r2, #5
 80116fa:	4413      	add	r3, r2
 80116fc:	2200      	movs	r2, #0
 80116fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 8011702:	4b8d      	ldr	r3, [pc, #564]	; (8011938 <MAP_makeContourMap_run+0x288>)
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	2b04      	cmp	r3, #4
 8011708:	d11c      	bne.n	8011744 <MAP_makeContourMap_run+0x94>
		us_cmap[uc_goalY + 1][uc_goalX] = 0;
 801170a:	79bb      	ldrb	r3, [r7, #6]
 801170c:	1c5a      	adds	r2, r3, #1
 801170e:	79fb      	ldrb	r3, [r7, #7]
 8011710:	4988      	ldr	r1, [pc, #544]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011712:	0152      	lsls	r2, r2, #5
 8011714:	4413      	add	r3, r2
 8011716:	2200      	movs	r2, #0
 8011718:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX + 1] = 0;
 801171c:	79ba      	ldrb	r2, [r7, #6]
 801171e:	79fb      	ldrb	r3, [r7, #7]
 8011720:	3301      	adds	r3, #1
 8011722:	4984      	ldr	r1, [pc, #528]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011724:	0152      	lsls	r2, r2, #5
 8011726:	4413      	add	r3, r2
 8011728:	2200      	movs	r2, #0
 801172a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 801172e:	79bb      	ldrb	r3, [r7, #6]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	79fb      	ldrb	r3, [r7, #7]
 8011734:	3301      	adds	r3, #1
 8011736:	497f      	ldr	r1, [pc, #508]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011738:	0152      	lsls	r2, r2, #5
 801173a:	4413      	add	r3, r2
 801173c:	2200      	movs	r2, #0
 801173e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011742:	e04f      	b.n	80117e4 <MAP_makeContourMap_run+0x134>
	}
	else if (GOAL_SIZE == 9){
 8011744:	4b7c      	ldr	r3, [pc, #496]	; (8011938 <MAP_makeContourMap_run+0x288>)
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	2b09      	cmp	r3, #9
 801174a:	d14b      	bne.n	80117e4 <MAP_makeContourMap_run+0x134>
		us_cmap[uc_goalY+1][uc_goalX] = 0;
 801174c:	79bb      	ldrb	r3, [r7, #6]
 801174e:	1c5a      	adds	r2, r3, #1
 8011750:	79fb      	ldrb	r3, [r7, #7]
 8011752:	4978      	ldr	r1, [pc, #480]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011754:	0152      	lsls	r2, r2, #5
 8011756:	4413      	add	r3, r2
 8011758:	2200      	movs	r2, #0
 801175a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+1] = 0;
 801175e:	79ba      	ldrb	r2, [r7, #6]
 8011760:	79fb      	ldrb	r3, [r7, #7]
 8011762:	3301      	adds	r3, #1
 8011764:	4973      	ldr	r1, [pc, #460]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011766:	0152      	lsls	r2, r2, #5
 8011768:	4413      	add	r3, r2
 801176a:	2200      	movs	r2, #0
 801176c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+1] = 0;
 8011770:	79bb      	ldrb	r3, [r7, #6]
 8011772:	1c5a      	adds	r2, r3, #1
 8011774:	79fb      	ldrb	r3, [r7, #7]
 8011776:	3301      	adds	r3, #1
 8011778:	496e      	ldr	r1, [pc, #440]	; (8011934 <MAP_makeContourMap_run+0x284>)
 801177a:	0152      	lsls	r2, r2, #5
 801177c:	4413      	add	r3, r2
 801177e:	2200      	movs	r2, #0
 8011780:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX] = 0;
 8011784:	79bb      	ldrb	r3, [r7, #6]
 8011786:	1c9a      	adds	r2, r3, #2
 8011788:	79fb      	ldrb	r3, [r7, #7]
 801178a:	496a      	ldr	r1, [pc, #424]	; (8011934 <MAP_makeContourMap_run+0x284>)
 801178c:	0152      	lsls	r2, r2, #5
 801178e:	4413      	add	r3, r2
 8011790:	2200      	movs	r2, #0
 8011792:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+1] = 0;
 8011796:	79bb      	ldrb	r3, [r7, #6]
 8011798:	1c9a      	adds	r2, r3, #2
 801179a:	79fb      	ldrb	r3, [r7, #7]
 801179c:	3301      	adds	r3, #1
 801179e:	4965      	ldr	r1, [pc, #404]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80117a0:	0152      	lsls	r2, r2, #5
 80117a2:	4413      	add	r3, r2
 80117a4:	2200      	movs	r2, #0
 80117a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+2] = 0;
 80117aa:	79ba      	ldrb	r2, [r7, #6]
 80117ac:	79fb      	ldrb	r3, [r7, #7]
 80117ae:	3302      	adds	r3, #2
 80117b0:	4960      	ldr	r1, [pc, #384]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80117b2:	0152      	lsls	r2, r2, #5
 80117b4:	4413      	add	r3, r2
 80117b6:	2200      	movs	r2, #0
 80117b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+2] = 0;
 80117bc:	79bb      	ldrb	r3, [r7, #6]
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	79fb      	ldrb	r3, [r7, #7]
 80117c2:	3302      	adds	r3, #2
 80117c4:	495b      	ldr	r1, [pc, #364]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80117c6:	0152      	lsls	r2, r2, #5
 80117c8:	4413      	add	r3, r2
 80117ca:	2200      	movs	r2, #0
 80117cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+2] = 0;
 80117d0:	79bb      	ldrb	r3, [r7, #6]
 80117d2:	1c9a      	adds	r2, r3, #2
 80117d4:	79fb      	ldrb	r3, [r7, #7]
 80117d6:	3302      	adds	r3, #2
 80117d8:	4956      	ldr	r1, [pc, #344]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80117da:	0152      	lsls	r2, r2, #5
 80117dc:	4413      	add	r3, r2
 80117de:	2200      	movs	r2, #0
 80117e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	/* 等高線マップを作成 */
	uc_dase = 0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	823b      	strh	r3, [r7, #16]
	do{
		uc_level = 0;
 80117e8:	2300      	movs	r3, #0
 80117ea:	81fb      	strh	r3, [r7, #14]
		uc_new = uc_dase + 1;
 80117ec:	8a3b      	ldrh	r3, [r7, #16]
 80117ee:	3301      	adds	r3, #1
 80117f0:	81bb      	strh	r3, [r7, #12]
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 80117f2:	2300      	movs	r3, #0
 80117f4:	82bb      	strh	r3, [r7, #20]
 80117f6:	e12d      	b.n	8011a54 <MAP_makeContourMap_run+0x3a4>
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 80117f8:	2300      	movs	r3, #0
 80117fa:	82fb      	strh	r3, [r7, #22]
 80117fc:	e123      	b.n	8011a46 <MAP_makeContourMap_run+0x396>
				if ( us_cmap[y][x] == uc_dase ){
 80117fe:	8aba      	ldrh	r2, [r7, #20]
 8011800:	8afb      	ldrh	r3, [r7, #22]
 8011802:	494c      	ldr	r1, [pc, #304]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011804:	0152      	lsls	r2, r2, #5
 8011806:	4413      	add	r3, r2
 8011808:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801180c:	8a3a      	ldrh	r2, [r7, #16]
 801180e:	429a      	cmp	r2, r3
 8011810:	f040 8116 	bne.w	8011a40 <MAP_makeContourMap_run+0x390>
					uc_wallData = g_sysMap[y][x];
 8011814:	8aba      	ldrh	r2, [r7, #20]
 8011816:	8afb      	ldrh	r3, [r7, #22]
 8011818:	4948      	ldr	r1, [pc, #288]	; (801193c <MAP_makeContourMap_run+0x28c>)
 801181a:	0152      	lsls	r2, r2, #5
 801181c:	440a      	add	r2, r1
 801181e:	4413      	add	r3, r2
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	72fb      	strb	r3, [r7, #11]
					/* 探索走行 */
					if( SEARCH == en_type ){
 8011824:	797b      	ldrb	r3, [r7, #5]
 8011826:	2b00      	cmp	r3, #0
 8011828:	f040 808a 	bne.w	8011940 <MAP_makeContourMap_run+0x290>
						if ( ( ( uc_wallData & 0x01 ) == 0x00 ) && ( y != (MAP_Y_SIZE-1) ) ){
 801182c:	7afb      	ldrb	r3, [r7, #11]
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	d11a      	bne.n	801186c <MAP_makeContourMap_run+0x1bc>
 8011836:	8abb      	ldrh	r3, [r7, #20]
 8011838:	2b1f      	cmp	r3, #31
 801183a:	d017      	beq.n	801186c <MAP_makeContourMap_run+0x1bc>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 801183c:	8abb      	ldrh	r3, [r7, #20]
 801183e:	1c5a      	adds	r2, r3, #1
 8011840:	8afb      	ldrh	r3, [r7, #22]
 8011842:	493c      	ldr	r1, [pc, #240]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011844:	0152      	lsls	r2, r2, #5
 8011846:	4413      	add	r3, r2
 8011848:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801184c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011850:	4293      	cmp	r3, r2
 8011852:	d10b      	bne.n	801186c <MAP_makeContourMap_run+0x1bc>
								us_cmap[y+1][x] = uc_new;
 8011854:	8abb      	ldrh	r3, [r7, #20]
 8011856:	1c5a      	adds	r2, r3, #1
 8011858:	8afb      	ldrh	r3, [r7, #22]
 801185a:	4936      	ldr	r1, [pc, #216]	; (8011934 <MAP_makeContourMap_run+0x284>)
 801185c:	0152      	lsls	r2, r2, #5
 801185e:	4413      	add	r3, r2
 8011860:	89ba      	ldrh	r2, [r7, #12]
 8011862:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8011866:	89fb      	ldrh	r3, [r7, #14]
 8011868:	3301      	adds	r3, #1
 801186a:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x02 ) == 0x00 ) && ( x != (MAP_X_SIZE-1) ) ){
 801186c:	7afb      	ldrb	r3, [r7, #11]
 801186e:	f003 0302 	and.w	r3, r3, #2
 8011872:	2b00      	cmp	r3, #0
 8011874:	d11a      	bne.n	80118ac <MAP_makeContourMap_run+0x1fc>
 8011876:	8afb      	ldrh	r3, [r7, #22]
 8011878:	2b1f      	cmp	r3, #31
 801187a:	d017      	beq.n	80118ac <MAP_makeContourMap_run+0x1fc>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 801187c:	8aba      	ldrh	r2, [r7, #20]
 801187e:	8afb      	ldrh	r3, [r7, #22]
 8011880:	3301      	adds	r3, #1
 8011882:	492c      	ldr	r1, [pc, #176]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011884:	0152      	lsls	r2, r2, #5
 8011886:	4413      	add	r3, r2
 8011888:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801188c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011890:	4293      	cmp	r3, r2
 8011892:	d10b      	bne.n	80118ac <MAP_makeContourMap_run+0x1fc>
								us_cmap[y][x+1] = uc_new;
 8011894:	8aba      	ldrh	r2, [r7, #20]
 8011896:	8afb      	ldrh	r3, [r7, #22]
 8011898:	3301      	adds	r3, #1
 801189a:	4926      	ldr	r1, [pc, #152]	; (8011934 <MAP_makeContourMap_run+0x284>)
 801189c:	0152      	lsls	r2, r2, #5
 801189e:	4413      	add	r3, r2
 80118a0:	89ba      	ldrh	r2, [r7, #12]
 80118a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80118a6:	89fb      	ldrh	r3, [r7, #14]
 80118a8:	3301      	adds	r3, #1
 80118aa:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x04 ) == 0x00 ) && ( y != 0 ) ){
 80118ac:	7afb      	ldrb	r3, [r7, #11]
 80118ae:	f003 0304 	and.w	r3, r3, #4
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d11a      	bne.n	80118ec <MAP_makeContourMap_run+0x23c>
 80118b6:	8abb      	ldrh	r3, [r7, #20]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d017      	beq.n	80118ec <MAP_makeContourMap_run+0x23c>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80118bc:	8abb      	ldrh	r3, [r7, #20]
 80118be:	1e5a      	subs	r2, r3, #1
 80118c0:	8afb      	ldrh	r3, [r7, #22]
 80118c2:	491c      	ldr	r1, [pc, #112]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80118c4:	0152      	lsls	r2, r2, #5
 80118c6:	4413      	add	r3, r2
 80118c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80118cc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d10b      	bne.n	80118ec <MAP_makeContourMap_run+0x23c>
								us_cmap[y-1][x] = uc_new;
 80118d4:	8abb      	ldrh	r3, [r7, #20]
 80118d6:	1e5a      	subs	r2, r3, #1
 80118d8:	8afb      	ldrh	r3, [r7, #22]
 80118da:	4916      	ldr	r1, [pc, #88]	; (8011934 <MAP_makeContourMap_run+0x284>)
 80118dc:	0152      	lsls	r2, r2, #5
 80118de:	4413      	add	r3, r2
 80118e0:	89ba      	ldrh	r2, [r7, #12]
 80118e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80118e6:	89fb      	ldrh	r3, [r7, #14]
 80118e8:	3301      	adds	r3, #1
 80118ea:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x08 ) == 0x00 ) && ( x != 0 ) ){
 80118ec:	7afb      	ldrb	r3, [r7, #11]
 80118ee:	f003 0308 	and.w	r3, r3, #8
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f040 80a4 	bne.w	8011a40 <MAP_makeContourMap_run+0x390>
 80118f8:	8afb      	ldrh	r3, [r7, #22]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 80a0 	beq.w	8011a40 <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8011900:	8aba      	ldrh	r2, [r7, #20]
 8011902:	8afb      	ldrh	r3, [r7, #22]
 8011904:	3b01      	subs	r3, #1
 8011906:	490b      	ldr	r1, [pc, #44]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011908:	0152      	lsls	r2, r2, #5
 801190a:	4413      	add	r3, r2
 801190c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011910:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011914:	4293      	cmp	r3, r2
 8011916:	f040 8093 	bne.w	8011a40 <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 801191a:	8aba      	ldrh	r2, [r7, #20]
 801191c:	8afb      	ldrh	r3, [r7, #22]
 801191e:	3b01      	subs	r3, #1
 8011920:	4904      	ldr	r1, [pc, #16]	; (8011934 <MAP_makeContourMap_run+0x284>)
 8011922:	0152      	lsls	r2, r2, #5
 8011924:	4413      	add	r3, r2
 8011926:	89ba      	ldrh	r2, [r7, #12]
 8011928:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801192c:	89fb      	ldrh	r3, [r7, #14]
 801192e:	3301      	adds	r3, #1
 8011930:	81fb      	strh	r3, [r7, #14]
 8011932:	e085      	b.n	8011a40 <MAP_makeContourMap_run+0x390>
 8011934:	20000b2c 	.word	0x20000b2c
 8011938:	2000e606 	.word	0x2000e606
 801193c:	20000708 	.word	0x20000708
							}
						}
					}
					/* 最短走行 */
					else{
						if ( ( ( uc_wallData & 0x11 ) == 0x10 ) && ( y != (MAP_Y_SIZE-1) ) ){
 8011940:	7afb      	ldrb	r3, [r7, #11]
 8011942:	f003 0311 	and.w	r3, r3, #17
 8011946:	2b10      	cmp	r3, #16
 8011948:	d11a      	bne.n	8011980 <MAP_makeContourMap_run+0x2d0>
 801194a:	8abb      	ldrh	r3, [r7, #20]
 801194c:	2b1f      	cmp	r3, #31
 801194e:	d017      	beq.n	8011980 <MAP_makeContourMap_run+0x2d0>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 8011950:	8abb      	ldrh	r3, [r7, #20]
 8011952:	1c5a      	adds	r2, r3, #1
 8011954:	8afb      	ldrh	r3, [r7, #22]
 8011956:	4948      	ldr	r1, [pc, #288]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 8011958:	0152      	lsls	r2, r2, #5
 801195a:	4413      	add	r3, r2
 801195c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011960:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011964:	4293      	cmp	r3, r2
 8011966:	d10b      	bne.n	8011980 <MAP_makeContourMap_run+0x2d0>
								us_cmap[y+1][x] = uc_new;
 8011968:	8abb      	ldrh	r3, [r7, #20]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	8afb      	ldrh	r3, [r7, #22]
 801196e:	4942      	ldr	r1, [pc, #264]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 8011970:	0152      	lsls	r2, r2, #5
 8011972:	4413      	add	r3, r2
 8011974:	89ba      	ldrh	r2, [r7, #12]
 8011976:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 801197a:	89fb      	ldrh	r3, [r7, #14]
 801197c:	3301      	adds	r3, #1
 801197e:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x22 ) == 0x20 ) && ( x != (MAP_X_SIZE-1) ) ){
 8011980:	7afb      	ldrb	r3, [r7, #11]
 8011982:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011986:	2b20      	cmp	r3, #32
 8011988:	d11a      	bne.n	80119c0 <MAP_makeContourMap_run+0x310>
 801198a:	8afb      	ldrh	r3, [r7, #22]
 801198c:	2b1f      	cmp	r3, #31
 801198e:	d017      	beq.n	80119c0 <MAP_makeContourMap_run+0x310>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 8011990:	8aba      	ldrh	r2, [r7, #20]
 8011992:	8afb      	ldrh	r3, [r7, #22]
 8011994:	3301      	adds	r3, #1
 8011996:	4938      	ldr	r1, [pc, #224]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 8011998:	0152      	lsls	r2, r2, #5
 801199a:	4413      	add	r3, r2
 801199c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80119a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d10b      	bne.n	80119c0 <MAP_makeContourMap_run+0x310>
								us_cmap[y][x+1] = uc_new;
 80119a8:	8aba      	ldrh	r2, [r7, #20]
 80119aa:	8afb      	ldrh	r3, [r7, #22]
 80119ac:	3301      	adds	r3, #1
 80119ae:	4932      	ldr	r1, [pc, #200]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 80119b0:	0152      	lsls	r2, r2, #5
 80119b2:	4413      	add	r3, r2
 80119b4:	89ba      	ldrh	r2, [r7, #12]
 80119b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80119ba:	89fb      	ldrh	r3, [r7, #14]
 80119bc:	3301      	adds	r3, #1
 80119be:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x44 ) == 0x40 ) && ( y != 0 ) ){
 80119c0:	7afb      	ldrb	r3, [r7, #11]
 80119c2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80119c6:	2b40      	cmp	r3, #64	; 0x40
 80119c8:	d11a      	bne.n	8011a00 <MAP_makeContourMap_run+0x350>
 80119ca:	8abb      	ldrh	r3, [r7, #20]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d017      	beq.n	8011a00 <MAP_makeContourMap_run+0x350>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 80119d0:	8abb      	ldrh	r3, [r7, #20]
 80119d2:	1e5a      	subs	r2, r3, #1
 80119d4:	8afb      	ldrh	r3, [r7, #22]
 80119d6:	4928      	ldr	r1, [pc, #160]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 80119d8:	0152      	lsls	r2, r2, #5
 80119da:	4413      	add	r3, r2
 80119dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80119e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d10b      	bne.n	8011a00 <MAP_makeContourMap_run+0x350>
								us_cmap[y-1][x] = uc_new;
 80119e8:	8abb      	ldrh	r3, [r7, #20]
 80119ea:	1e5a      	subs	r2, r3, #1
 80119ec:	8afb      	ldrh	r3, [r7, #22]
 80119ee:	4922      	ldr	r1, [pc, #136]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 80119f0:	0152      	lsls	r2, r2, #5
 80119f2:	4413      	add	r3, r2
 80119f4:	89ba      	ldrh	r2, [r7, #12]
 80119f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 80119fa:	89fb      	ldrh	r3, [r7, #14]
 80119fc:	3301      	adds	r3, #1
 80119fe:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x88 ) == 0x80 ) && ( x != 0 ) ){
 8011a00:	7afb      	ldrb	r3, [r7, #11]
 8011a02:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8011a06:	2b80      	cmp	r3, #128	; 0x80
 8011a08:	d11a      	bne.n	8011a40 <MAP_makeContourMap_run+0x390>
 8011a0a:	8afb      	ldrh	r3, [r7, #22]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d017      	beq.n	8011a40 <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 8011a10:	8aba      	ldrh	r2, [r7, #20]
 8011a12:	8afb      	ldrh	r3, [r7, #22]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	4918      	ldr	r1, [pc, #96]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 8011a18:	0152      	lsls	r2, r2, #5
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a20:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d10b      	bne.n	8011a40 <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 8011a28:	8aba      	ldrh	r2, [r7, #20]
 8011a2a:	8afb      	ldrh	r3, [r7, #22]
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	4912      	ldr	r1, [pc, #72]	; (8011a78 <MAP_makeContourMap_run+0x3c8>)
 8011a30:	0152      	lsls	r2, r2, #5
 8011a32:	4413      	add	r3, r2
 8011a34:	89ba      	ldrh	r2, [r7, #12]
 8011a36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8011a3a:	89fb      	ldrh	r3, [r7, #14]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	81fb      	strh	r3, [r7, #14]
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 8011a40:	8afb      	ldrh	r3, [r7, #22]
 8011a42:	3301      	adds	r3, #1
 8011a44:	82fb      	strh	r3, [r7, #22]
 8011a46:	8afb      	ldrh	r3, [r7, #22]
 8011a48:	2b1f      	cmp	r3, #31
 8011a4a:	f67f aed8 	bls.w	80117fe <MAP_makeContourMap_run+0x14e>
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 8011a4e:	8abb      	ldrh	r3, [r7, #20]
 8011a50:	3301      	adds	r3, #1
 8011a52:	82bb      	strh	r3, [r7, #20]
 8011a54:	8abb      	ldrh	r3, [r7, #20]
 8011a56:	2b1f      	cmp	r3, #31
 8011a58:	f67f aece 	bls.w	80117f8 <MAP_makeContourMap_run+0x148>
						}
					}
				}
			}
		}
		uc_dase = uc_dase + 1;
 8011a5c:	8a3b      	ldrh	r3, [r7, #16]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	823b      	strh	r3, [r7, #16]
	}
	while( uc_level != 0 );
 8011a62:	89fb      	ldrh	r3, [r7, #14]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f47f aebf 	bne.w	80117e8 <MAP_makeContourMap_run+0x138>
	
}
 8011a6a:	bf00      	nop
 8011a6c:	bf00      	nop
 8011a6e:	371c      	adds	r7, #28
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	20000b2c 	.word	0x20000b2c

08011a7c <MAP_calcMouseDir>:

void MAP_calcMouseDir( 
	enMAP_SEARCH_TYPE	en_calcType,	///< [in] 計算方法
	enMAP_HEAD_DIR* 	p_head			///< [out] 進行方向（戻り値）
){
 8011a7c:	b480      	push	{r7}
 8011a7e:	b085      	sub	sp, #20
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	4603      	mov	r3, r0
 8011a84:	6039      	str	r1, [r7, #0]
 8011a86:	71fb      	strb	r3, [r7, #7]
	uint16_t		us_new;
	enMAP_HEAD_DIR	en_tmpHead;

	/* 方向計算 */
	// 等高線MAP法
	if( CONTOUR_SYSTEM == en_calcType ){
 8011a88:	79fb      	ldrb	r3, [r7, #7]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f040 80ee 	bne.w	8011c6c <MAP_calcMouseDir+0x1f0>
		// 周辺の4区画で一番目的地に近い移動方向を算出する。
		// ただし、移動できる一番近い区間が複数ある場合には、次の順で選択する。
		// ①未探索区間,直進 ②未探索区間,旋回 ③既探索区間,直進 ④既探索区間,旋回
		uc_wall = g_sysMap[my][mx];
 8011a90:	4b7b      	ldr	r3, [pc, #492]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	4618      	mov	r0, r3
 8011a96:	4b7b      	ldr	r3, [pc, #492]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4a7a      	ldr	r2, [pc, #488]	; (8011c88 <MAP_calcMouseDir+0x20c>)
 8011a9e:	0143      	lsls	r3, r0, #5
 8011aa0:	4413      	add	r3, r2
 8011aa2:	440b      	add	r3, r1
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	72bb      	strb	r3, [r7, #10]
		us_base = MAP_SMAP_MAX_PRI_VAL;					// 16[区画]×16[区画]×4[方向]
 8011aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011aac:	81fb      	strh	r3, [r7, #14]

		/* 4方向を比較 */
		//	北方向の区画の確認
		if ( ( uc_wall & 1 ) == 0 ){
 8011aae:	7abb      	ldrb	r3, [r7, #10]
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d12f      	bne.n	8011b18 <MAP_calcMouseDir+0x9c>
			us_new = us_cmap[my+1][mx] * 4 + 4;
 8011ab8:	4b71      	ldr	r3, [pc, #452]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	3301      	adds	r3, #1
 8011abe:	4a71      	ldr	r2, [pc, #452]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011ac0:	7812      	ldrb	r2, [r2, #0]
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	4a71      	ldr	r2, [pc, #452]	; (8011c8c <MAP_calcMouseDir+0x210>)
 8011ac6:	015b      	lsls	r3, r3, #5
 8011ac8:	440b      	add	r3, r1
 8011aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my+1][mx] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8011ad6:	4b6a      	ldr	r3, [pc, #424]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	3301      	adds	r3, #1
 8011adc:	4a69      	ldr	r2, [pc, #420]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011ade:	7812      	ldrb	r2, [r2, #0]
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	4a69      	ldr	r2, [pc, #420]	; (8011c88 <MAP_calcMouseDir+0x20c>)
 8011ae4:	015b      	lsls	r3, r3, #5
 8011ae6:	4413      	add	r3, r2
 8011ae8:	440b      	add	r3, r1
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011af0:	2bf0      	cmp	r3, #240	; 0xf0
 8011af2:	d002      	beq.n	8011afa <MAP_calcMouseDir+0x7e>
 8011af4:	89bb      	ldrh	r3, [r7, #12]
 8011af6:	3b02      	subs	r3, #2
 8011af8:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == NORTH ) us_new = us_new - 1;
 8011afa:	4b65      	ldr	r3, [pc, #404]	; (8011c90 <MAP_calcMouseDir+0x214>)
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d102      	bne.n	8011b08 <MAP_calcMouseDir+0x8c>
 8011b02:	89bb      	ldrh	r3, [r7, #12]
 8011b04:	3b01      	subs	r3, #1
 8011b06:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8011b08:	89ba      	ldrh	r2, [r7, #12]
 8011b0a:	89fb      	ldrh	r3, [r7, #14]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d203      	bcs.n	8011b18 <MAP_calcMouseDir+0x9c>
				us_base = us_new;
 8011b10:	89bb      	ldrh	r3, [r7, #12]
 8011b12:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = NORTH;
 8011b14:	2300      	movs	r3, #0
 8011b16:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	東方向の区画の確認
		if ( ( uc_wall & 2 ) == 0 ){
 8011b18:	7abb      	ldrb	r3, [r7, #10]
 8011b1a:	f003 0302 	and.w	r3, r3, #2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d12f      	bne.n	8011b82 <MAP_calcMouseDir+0x106>
			us_new = us_cmap[my][mx+1] * 4 + 4;
 8011b22:	4b57      	ldr	r3, [pc, #348]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	4b56      	ldr	r3, [pc, #344]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	4957      	ldr	r1, [pc, #348]	; (8011c8c <MAP_calcMouseDir+0x210>)
 8011b30:	0152      	lsls	r2, r2, #5
 8011b32:	4413      	add	r3, r2
 8011b34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b38:	3301      	adds	r3, #1
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx+1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8011b40:	4b4f      	ldr	r3, [pc, #316]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	461a      	mov	r2, r3
 8011b46:	4b4f      	ldr	r3, [pc, #316]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	494e      	ldr	r1, [pc, #312]	; (8011c88 <MAP_calcMouseDir+0x20c>)
 8011b4e:	0152      	lsls	r2, r2, #5
 8011b50:	440a      	add	r2, r1
 8011b52:	4413      	add	r3, r2
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b5a:	2bf0      	cmp	r3, #240	; 0xf0
 8011b5c:	d002      	beq.n	8011b64 <MAP_calcMouseDir+0xe8>
 8011b5e:	89bb      	ldrh	r3, [r7, #12]
 8011b60:	3b02      	subs	r3, #2
 8011b62:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == EAST) us_new = us_new - 1;
 8011b64:	4b4a      	ldr	r3, [pc, #296]	; (8011c90 <MAP_calcMouseDir+0x214>)
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d102      	bne.n	8011b72 <MAP_calcMouseDir+0xf6>
 8011b6c:	89bb      	ldrh	r3, [r7, #12]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8011b72:	89ba      	ldrh	r2, [r7, #12]
 8011b74:	89fb      	ldrh	r3, [r7, #14]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d203      	bcs.n	8011b82 <MAP_calcMouseDir+0x106>
				us_base = us_new;
 8011b7a:	89bb      	ldrh	r3, [r7, #12]
 8011b7c:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = EAST;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	南方向の区画の確認
		if ( ( uc_wall & 4 ) == 0 ){
 8011b82:	7abb      	ldrb	r3, [r7, #10]
 8011b84:	f003 0304 	and.w	r3, r3, #4
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d12f      	bne.n	8011bec <MAP_calcMouseDir+0x170>
			us_new = us_cmap[my-1][mx] * 4 + 4;
 8011b8c:	4b3c      	ldr	r3, [pc, #240]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	3b01      	subs	r3, #1
 8011b92:	4a3c      	ldr	r2, [pc, #240]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011b94:	7812      	ldrb	r2, [r2, #0]
 8011b96:	4611      	mov	r1, r2
 8011b98:	4a3c      	ldr	r2, [pc, #240]	; (8011c8c <MAP_calcMouseDir+0x210>)
 8011b9a:	015b      	lsls	r3, r3, #5
 8011b9c:	440b      	add	r3, r1
 8011b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my-1][mx] & 0xf0 ) != 0xf0) us_new = us_new - 2;
 8011baa:	4b35      	ldr	r3, [pc, #212]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	4a34      	ldr	r2, [pc, #208]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011bb2:	7812      	ldrb	r2, [r2, #0]
 8011bb4:	4611      	mov	r1, r2
 8011bb6:	4a34      	ldr	r2, [pc, #208]	; (8011c88 <MAP_calcMouseDir+0x20c>)
 8011bb8:	015b      	lsls	r3, r3, #5
 8011bba:	4413      	add	r3, r2
 8011bbc:	440b      	add	r3, r1
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bc4:	2bf0      	cmp	r3, #240	; 0xf0
 8011bc6:	d002      	beq.n	8011bce <MAP_calcMouseDir+0x152>
 8011bc8:	89bb      	ldrh	r3, [r7, #12]
 8011bca:	3b02      	subs	r3, #2
 8011bcc:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == SOUTH ) us_new = us_new - 1;
 8011bce:	4b30      	ldr	r3, [pc, #192]	; (8011c90 <MAP_calcMouseDir+0x214>)
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b02      	cmp	r3, #2
 8011bd4:	d102      	bne.n	8011bdc <MAP_calcMouseDir+0x160>
 8011bd6:	89bb      	ldrh	r3, [r7, #12]
 8011bd8:	3b01      	subs	r3, #1
 8011bda:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8011bdc:	89ba      	ldrh	r2, [r7, #12]
 8011bde:	89fb      	ldrh	r3, [r7, #14]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d203      	bcs.n	8011bec <MAP_calcMouseDir+0x170>
				us_base = us_new;
 8011be4:	89bb      	ldrh	r3, [r7, #12]
 8011be6:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = SOUTH;
 8011be8:	2302      	movs	r3, #2
 8011bea:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	西方向の区画の確認
		if ( ( uc_wall & 8 ) == 0 ){
 8011bec:	7abb      	ldrb	r3, [r7, #10]
 8011bee:	f003 0308 	and.w	r3, r3, #8
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d12f      	bne.n	8011c56 <MAP_calcMouseDir+0x1da>
			us_new = us_cmap[my][mx-1] * 4 + 4;
 8011bf6:	4b22      	ldr	r3, [pc, #136]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	4b21      	ldr	r3, [pc, #132]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	4922      	ldr	r1, [pc, #136]	; (8011c8c <MAP_calcMouseDir+0x210>)
 8011c04:	0152      	lsls	r2, r2, #5
 8011c06:	4413      	add	r3, r2
 8011c08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx-1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 8011c14:	4b1a      	ldr	r3, [pc, #104]	; (8011c80 <MAP_calcMouseDir+0x204>)
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4b1a      	ldr	r3, [pc, #104]	; (8011c84 <MAP_calcMouseDir+0x208>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	4919      	ldr	r1, [pc, #100]	; (8011c88 <MAP_calcMouseDir+0x20c>)
 8011c22:	0152      	lsls	r2, r2, #5
 8011c24:	440a      	add	r2, r1
 8011c26:	4413      	add	r3, r2
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c2e:	2bf0      	cmp	r3, #240	; 0xf0
 8011c30:	d002      	beq.n	8011c38 <MAP_calcMouseDir+0x1bc>
 8011c32:	89bb      	ldrh	r3, [r7, #12]
 8011c34:	3b02      	subs	r3, #2
 8011c36:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == WEST ) us_new = us_new - 1;
 8011c38:	4b15      	ldr	r3, [pc, #84]	; (8011c90 <MAP_calcMouseDir+0x214>)
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b03      	cmp	r3, #3
 8011c3e:	d102      	bne.n	8011c46 <MAP_calcMouseDir+0x1ca>
 8011c40:	89bb      	ldrh	r3, [r7, #12]
 8011c42:	3b01      	subs	r3, #1
 8011c44:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8011c46:	89ba      	ldrh	r2, [r7, #12]
 8011c48:	89fb      	ldrh	r3, [r7, #14]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d203      	bcs.n	8011c56 <MAP_calcMouseDir+0x1da>
				us_base = us_new;
 8011c4e:	89bb      	ldrh	r3, [r7, #12]
 8011c50:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = WEST;
 8011c52:	2303      	movs	r3, #3
 8011c54:	72fb      	strb	r3, [r7, #11]
			}
		}
		
		*p_head = (enMAP_HEAD_DIR)( (en_tmpHead - en_Head) & 3 );		// 移動方向
 8011c56:	4b0e      	ldr	r3, [pc, #56]	; (8011c90 <MAP_calcMouseDir+0x214>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	7afa      	ldrb	r2, [r7, #11]
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	f003 0303 	and.w	r3, r3, #3
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	701a      	strb	r2, [r3, #0]
	// 制御方法指定なし
	else{
		*p_head = (enMAP_HEAD_DIR)0;
	}

}
 8011c6a:	e002      	b.n	8011c72 <MAP_calcMouseDir+0x1f6>
		*p_head = (enMAP_HEAD_DIR)0;
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	701a      	strb	r2, [r3, #0]
}
 8011c72:	bf00      	nop
 8011c74:	3714      	adds	r7, #20
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	2000e5fd 	.word	0x2000e5fd
 8011c84:	2000e607 	.word	0x2000e607
 8011c88:	20000708 	.word	0x20000708
 8011c8c:	20000b2c 	.word	0x20000b2c
 8011c90:	2000e604 	.word	0x2000e604

08011c94 <MAP_refMousePos>:

void MAP_refMousePos( 
	enMAP_HEAD_DIR 			en_head			///< [in] 進行方向
){
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	71fb      	strb	r3, [r7, #7]
	switch( en_head ){
 8011c9e:	79fb      	ldrb	r3, [r7, #7]
 8011ca0:	2b03      	cmp	r3, #3
 8011ca2:	d827      	bhi.n	8011cf4 <MAP_refMousePos+0x60>
 8011ca4:	a201      	add	r2, pc, #4	; (adr r2, 8011cac <MAP_refMousePos+0x18>)
 8011ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011caa:	bf00      	nop
 8011cac:	08011cbd 	.word	0x08011cbd
 8011cb0:	08011ccb 	.word	0x08011ccb
 8011cb4:	08011cd9 	.word	0x08011cd9
 8011cb8:	08011ce7 	.word	0x08011ce7
		case NORTH:
			my = my + 1;
 8011cbc:	4b11      	ldr	r3, [pc, #68]	; (8011d04 <MAP_refMousePos+0x70>)
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	4b0f      	ldr	r3, [pc, #60]	; (8011d04 <MAP_refMousePos+0x70>)
 8011cc6:	701a      	strb	r2, [r3, #0]
			break;
 8011cc8:	e015      	b.n	8011cf6 <MAP_refMousePos+0x62>
		case EAST:
			mx = mx + 1;
 8011cca:	4b0f      	ldr	r3, [pc, #60]	; (8011d08 <MAP_refMousePos+0x74>)
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	4b0d      	ldr	r3, [pc, #52]	; (8011d08 <MAP_refMousePos+0x74>)
 8011cd4:	701a      	strb	r2, [r3, #0]
			break;
 8011cd6:	e00e      	b.n	8011cf6 <MAP_refMousePos+0x62>
		case SOUTH:
			my = my - 1;
 8011cd8:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <MAP_refMousePos+0x70>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	4b08      	ldr	r3, [pc, #32]	; (8011d04 <MAP_refMousePos+0x70>)
 8011ce2:	701a      	strb	r2, [r3, #0]
			break;
 8011ce4:	e007      	b.n	8011cf6 <MAP_refMousePos+0x62>
		case WEST:
			mx = mx - 1;
 8011ce6:	4b08      	ldr	r3, [pc, #32]	; (8011d08 <MAP_refMousePos+0x74>)
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	3b01      	subs	r3, #1
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	4b06      	ldr	r3, [pc, #24]	; (8011d08 <MAP_refMousePos+0x74>)
 8011cf0:	701a      	strb	r2, [r3, #0]
			break;
 8011cf2:	e000      	b.n	8011cf6 <MAP_refMousePos+0x62>
		default:
			break;
 8011cf4:	bf00      	nop
	}
}
 8011cf6:	bf00      	nop
 8011cf8:	370c      	adds	r7, #12
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	2000e5fd 	.word	0x2000e5fd
 8011d08:	2000e607 	.word	0x2000e607

08011d0c <MAP_moveNextBlock>:

void MAP_moveNextBlock( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	4603      	mov	r3, r0
 8011d14:	6039      	str	r1, [r7, #0]
 8011d16:	71fb      	strb	r3, [r7, #7]
	*p_type = TRUE;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8011d1e:	4b4d      	ldr	r3, [pc, #308]	; (8011e54 <MAP_moveNextBlock+0x148>)
 8011d20:	f04f 0200 	mov.w	r2, #0
 8011d24:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8011d26:	79fb      	ldrb	r3, [r7, #7]
 8011d28:	2b03      	cmp	r3, #3
 8011d2a:	f200 8082 	bhi.w	8011e32 <MAP_moveNextBlock+0x126>
 8011d2e:	a201      	add	r2, pc, #4	; (adr r2, 8011d34 <MAP_moveNextBlock+0x28>)
 8011d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d34:	08011d45 	.word	0x08011d45
 8011d38:	08011d55 	.word	0x08011d55
 8011d3c:	08011d7d 	.word	0x08011d7d
 8011d40:	08011d69 	.word	0x08011d69

		/* そのまま前進 */
		case NORTH:
			*p_type = FALSE;
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
			MOT_goBlock_Const( 1 );				// 1区画前進
 8011d4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011d4e:	f7f9 fe1f 	bl	800b990 <MOT_goBlock_Const>
			break;
 8011d52:	e071      	b.n	8011e38 <MAP_moveNextBlock+0x12c>
		// 右に旋回する
		case EAST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8011d54:	eddf 0a40 	vldr	s1, [pc, #256]	; 8011e58 <MAP_moveNextBlock+0x14c>
 8011d58:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011d5c:	f7f9 fdf4 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R90);					// 右90度旋回
 8011d60:	2000      	movs	r0, #0
 8011d62:	f7f9 ff59 	bl	800bc18 <MOT_turn>
			break;
 8011d66:	e067      	b.n	8011e38 <MAP_moveNextBlock+0x12c>
		// 左に旋回する
		case WEST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8011d68:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8011e58 <MAP_moveNextBlock+0x14c>
 8011d6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011d70:	f7f9 fdea 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_L90);					// 右90度旋回
 8011d74:	2001      	movs	r0, #1
 8011d76:	f7f9 ff4f 	bl	800bc18 <MOT_turn>
			break;
 8011d7a:	e05d      	b.n	8011e38 <MAP_moveNextBlock+0x12c>
		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8011d7c:	eddf 0a36 	vldr	s1, [pc, #216]	; 8011e58 <MAP_moveNextBlock+0x14c>
 8011d80:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011d84:	f7f9 fde0 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);					// 右180度旋回
 8011d88:	2002      	movs	r0, #2
 8011d8a:	f7f9 ff45 	bl	800bc18 <MOT_turn>
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8011d8e:	4b33      	ldr	r3, [pc, #204]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10e      	bne.n	8011db4 <MAP_moveNextBlock+0xa8>
 8011d96:	4b32      	ldr	r3, [pc, #200]	; (8011e60 <MAP_moveNextBlock+0x154>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	4b31      	ldr	r3, [pc, #196]	; (8011e64 <MAP_moveNextBlock+0x158>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	4619      	mov	r1, r3
 8011da2:	4a31      	ldr	r2, [pc, #196]	; (8011e68 <MAP_moveNextBlock+0x15c>)
 8011da4:	0143      	lsls	r3, r0, #5
 8011da6:	4413      	add	r3, r2
 8011da8:	440b      	add	r3, r1
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d138      	bne.n	8011e26 <MAP_moveNextBlock+0x11a>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8011db4:	4b29      	ldr	r3, [pc, #164]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d10e      	bne.n	8011dda <MAP_moveNextBlock+0xce>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8011dbc:	4b28      	ldr	r3, [pc, #160]	; (8011e60 <MAP_moveNextBlock+0x154>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	4b28      	ldr	r3, [pc, #160]	; (8011e64 <MAP_moveNextBlock+0x158>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4a27      	ldr	r2, [pc, #156]	; (8011e68 <MAP_moveNextBlock+0x15c>)
 8011dca:	0143      	lsls	r3, r0, #5
 8011dcc:	4413      	add	r3, r2
 8011dce:	440b      	add	r3, r1
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	f003 0302 	and.w	r3, r3, #2
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d125      	bne.n	8011e26 <MAP_moveNextBlock+0x11a>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8011dda:	4b20      	ldr	r3, [pc, #128]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011ddc:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d10e      	bne.n	8011e00 <MAP_moveNextBlock+0xf4>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8011de2:	4b1f      	ldr	r3, [pc, #124]	; (8011e60 <MAP_moveNextBlock+0x154>)
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	4618      	mov	r0, r3
 8011de8:	4b1e      	ldr	r3, [pc, #120]	; (8011e64 <MAP_moveNextBlock+0x158>)
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	4619      	mov	r1, r3
 8011dee:	4a1e      	ldr	r2, [pc, #120]	; (8011e68 <MAP_moveNextBlock+0x15c>)
 8011df0:	0143      	lsls	r3, r0, #5
 8011df2:	4413      	add	r3, r2
 8011df4:	440b      	add	r3, r1
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	f003 0304 	and.w	r3, r3, #4
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d112      	bne.n	8011e26 <MAP_moveNextBlock+0x11a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8011e00:	4b16      	ldr	r3, [pc, #88]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011e02:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d116      	bne.n	8011e36 <MAP_moveNextBlock+0x12a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8011e08:	4b15      	ldr	r3, [pc, #84]	; (8011e60 <MAP_moveNextBlock+0x154>)
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	4b15      	ldr	r3, [pc, #84]	; (8011e64 <MAP_moveNextBlock+0x158>)
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	4619      	mov	r1, r3
 8011e14:	4a14      	ldr	r2, [pc, #80]	; (8011e68 <MAP_moveNextBlock+0x15c>)
 8011e16:	0143      	lsls	r3, r0, #5
 8011e18:	4413      	add	r3, r2
 8011e1a:	440b      	add	r3, r1
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	f003 0308 	and.w	r3, r3, #8
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d007      	beq.n	8011e36 <MAP_moveNextBlock+0x12a>
			){
				MOT_goHitBackWall();					// バックする
 8011e26:	f7fa fa31 	bl	800c28c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8011e2a:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <MAP_moveNextBlock+0x148>)
 8011e2c:	4a0f      	ldr	r2, [pc, #60]	; (8011e6c <MAP_moveNextBlock+0x160>)
 8011e2e:	601a      	str	r2, [r3, #0]
			}
			break;
 8011e30:	e001      	b.n	8011e36 <MAP_moveNextBlock+0x12a>
		default:
			break;
 8011e32:	bf00      	nop
 8011e34:	e000      	b.n	8011e38 <MAP_moveNextBlock+0x12c>
			break;
 8011e36:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock(en_head, p_type);					// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8011e38:	4b08      	ldr	r3, [pc, #32]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011e3a:	781a      	ldrb	r2, [r3, #0]
 8011e3c:	79fb      	ldrb	r3, [r7, #7]
 8011e3e:	4413      	add	r3, r2
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	f003 0303 	and.w	r3, r3, #3
 8011e46:	b2da      	uxtb	r2, r3
 8011e48:	4b04      	ldr	r3, [pc, #16]	; (8011e5c <MAP_moveNextBlock+0x150>)
 8011e4a:	701a      	strb	r2, [r3, #0]
//	}
}
 8011e4c:	bf00      	nop
 8011e4e:	3708      	adds	r7, #8
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	2000e600 	.word	0x2000e600
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	2000e604 	.word	0x2000e604
 8011e60:	2000e5fd 	.word	0x2000e5fd
 8011e64:	2000e607 	.word	0x2000e607
 8011e68:	20000708 	.word	0x20000708
 8011e6c:	3e6b851f 	.word	0x3e6b851f

08011e70 <MAP_moveNextBlock_Sura>:

void MAP_moveNextBlock_Sura( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている
	bool*			p_type,			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
	bool			bl_resume		///< [in] FALSE: レジューム動作ではない、TURE:レジューム動作
){
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	4603      	mov	r3, r0
 8011e78:	6039      	str	r1, [r7, #0]
 8011e7a:	71fb      	strb	r3, [r7, #7]
 8011e7c:	4613      	mov	r3, r2
 8011e7e:	71bb      	strb	r3, [r7, #6]
	*p_type = FALSE;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2200      	movs	r2, #0
 8011e84:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8011e86:	4b7e      	ldr	r3, [pc, #504]	; (8012080 <MAP_moveNextBlock_Sura+0x210>)
 8011e88:	f04f 0200 	mov.w	r2, #0
 8011e8c:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	2b03      	cmp	r3, #3
 8011e92:	f200 8244 	bhi.w	801231e <MAP_moveNextBlock_Sura+0x4ae>
 8011e96:	a201      	add	r2, pc, #4	; (adr r2, 8011e9c <MAP_moveNextBlock_Sura+0x2c>)
 8011e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9c:	08011ead 	.word	0x08011ead
 8011ea0:	08011ed1 	.word	0x08011ed1
 8011ea4:	0801225d 	.word	0x0801225d
 8011ea8:	080120ad 	.word	0x080120ad

		// そのまま前進
		case NORTH:
			
			/* レジューム動作ではない */
			if( bl_resume == FALSE ){
 8011eac:	79bb      	ldrb	r3, [r7, #6]
 8011eae:	f083 0301 	eor.w	r3, r3, #1
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d004      	beq.n	8011ec2 <MAP_moveNextBlock_Sura+0x52>
		
				MOT_goBlock_Const( 1 );					// 1区画前進
 8011eb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011ebc:	f7f9 fd68 	bl	800b990 <MOT_goBlock_Const>
			/* レジューム動作 */
			else{
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
//				uc_SlaCnt = 0;									// スラロームしていない
			}
			break;
 8011ec0:	e22e      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8011ec2:	eddf 0a70 	vldr	s1, [pc, #448]	; 8012084 <MAP_moveNextBlock_Sura+0x214>
 8011ec6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011eca:	f7f9 fd3d 	bl	800b948 <MOT_goBlock_FinSpeed>
			break;
 8011ece:	e227      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>

		// 右にスラロームする
		case EAST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8011ed0:	4b6d      	ldr	r3, [pc, #436]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10e      	bne.n	8011ef6 <MAP_moveNextBlock_Sura+0x86>
 8011ed8:	4b6c      	ldr	r3, [pc, #432]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	4618      	mov	r0, r3
 8011ede:	4b6c      	ldr	r3, [pc, #432]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	4a6b      	ldr	r2, [pc, #428]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011ee6:	0143      	lsls	r3, r0, #5
 8011ee8:	4413      	add	r3, r2
 8011eea:	440b      	add	r3, r1
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	f003 0302 	and.w	r3, r3, #2
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d138      	bne.n	8011f68 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011ef6:	4b64      	ldr	r3, [pc, #400]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011ef8:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d10e      	bne.n	8011f1c <MAP_moveNextBlock_Sura+0xac>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011efe:	4b63      	ldr	r3, [pc, #396]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	4618      	mov	r0, r3
 8011f04:	4b62      	ldr	r3, [pc, #392]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	4619      	mov	r1, r3
 8011f0a:	4a62      	ldr	r2, [pc, #392]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011f0c:	0143      	lsls	r3, r0, #5
 8011f0e:	4413      	add	r3, r2
 8011f10:	440b      	add	r3, r1
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	f003 0304 	and.w	r3, r3, #4
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d125      	bne.n	8011f68 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8011f1c:	4b5a      	ldr	r3, [pc, #360]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d10e      	bne.n	8011f42 <MAP_moveNextBlock_Sura+0xd2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8011f24:	4b59      	ldr	r3, [pc, #356]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	4b59      	ldr	r3, [pc, #356]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	4619      	mov	r1, r3
 8011f30:	4a58      	ldr	r2, [pc, #352]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011f32:	0143      	lsls	r3, r0, #5
 8011f34:	4413      	add	r3, r2
 8011f36:	440b      	add	r3, r1
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	f003 0308 	and.w	r3, r3, #8
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d112      	bne.n	8011f68 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8011f42:	4b51      	ldr	r3, [pc, #324]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011f44:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d112      	bne.n	8011f70 <MAP_moveNextBlock_Sura+0x100>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8011f4a:	4b50      	ldr	r3, [pc, #320]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	4b4f      	ldr	r3, [pc, #316]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	4619      	mov	r1, r3
 8011f56:	4a4f      	ldr	r2, [pc, #316]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011f58:	0143      	lsls	r3, r0, #5
 8011f5a:	4413      	add	r3, r2
 8011f5c:	440b      	add	r3, r1
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	f003 0301 	and.w	r3, r3, #1
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d003      	beq.n	8011f70 <MAP_moveNextBlock_Sura+0x100>
				){
				uc_dist_control = 0.01;
 8011f68:	4b4b      	ldr	r3, [pc, #300]	; (8012098 <MAP_moveNextBlock_Sura+0x228>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	e002      	b.n	8011f76 <MAP_moveNextBlock_Sura+0x106>
				}
			else{
				uc_dist_control = 0;
 8011f70:	4b49      	ldr	r3, [pc, #292]	; (8012098 <MAP_moveNextBlock_Sura+0x228>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 8011f76:	4b49      	ldr	r3, [pc, #292]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 8011f78:	781a      	ldrb	r2, [r3, #0]
 8011f7a:	4b49      	ldr	r3, [pc, #292]	; (80120a0 <MAP_moveNextBlock_Sura+0x230>)
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d20e      	bcs.n	8011fa0 <MAP_moveNextBlock_Sura+0x130>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8011f82:	2000      	movs	r0, #0
 8011f84:	f7f1 f83e 	bl	8003004 <PARAM_getSra>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7fa f9cf 	bl	800c330 <MOT_goSla>
				uc_SlaCnt++;
 8011f92:	4b42      	ldr	r3, [pc, #264]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	3301      	adds	r3, #1
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	4b40      	ldr	r3, [pc, #256]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 8011f9c:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8011f9e:	e1bf      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8011fa0:	4b39      	ldr	r3, [pc, #228]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10e      	bne.n	8011fc6 <MAP_moveNextBlock_Sura+0x156>
 8011fa8:	4b38      	ldr	r3, [pc, #224]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	4618      	mov	r0, r3
 8011fae:	4b38      	ldr	r3, [pc, #224]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4a37      	ldr	r2, [pc, #220]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011fb6:	0143      	lsls	r3, r0, #5
 8011fb8:	4413      	add	r3, r2
 8011fba:	440b      	add	r3, r1
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	f003 0308 	and.w	r3, r3, #8
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d138      	bne.n	8012038 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8011fc6:	4b30      	ldr	r3, [pc, #192]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011fc8:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d10e      	bne.n	8011fec <MAP_moveNextBlock_Sura+0x17c>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8011fce:	4b2f      	ldr	r3, [pc, #188]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	4b2e      	ldr	r3, [pc, #184]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4a2e      	ldr	r2, [pc, #184]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8011fdc:	0143      	lsls	r3, r0, #5
 8011fde:	4413      	add	r3, r2
 8011fe0:	440b      	add	r3, r1
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f003 0301 	and.w	r3, r3, #1
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d125      	bne.n	8012038 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011fec:	4b26      	ldr	r3, [pc, #152]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8011fee:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d10e      	bne.n	8012012 <MAP_moveNextBlock_Sura+0x1a2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011ff4:	4b25      	ldr	r3, [pc, #148]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	4b25      	ldr	r3, [pc, #148]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	4619      	mov	r1, r3
 8012000:	4a24      	ldr	r2, [pc, #144]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8012002:	0143      	lsls	r3, r0, #5
 8012004:	4413      	add	r3, r2
 8012006:	440b      	add	r3, r1
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	f003 0302 	and.w	r3, r3, #2
 801200e:	2b00      	cmp	r3, #0
 8012010:	d112      	bne.n	8012038 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012012:	4b1d      	ldr	r3, [pc, #116]	; (8012088 <MAP_moveNextBlock_Sura+0x218>)
 8012014:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012016:	2b03      	cmp	r3, #3
 8012018:	d123      	bne.n	8012062 <MAP_moveNextBlock_Sura+0x1f2>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 801201a:	4b1c      	ldr	r3, [pc, #112]	; (801208c <MAP_moveNextBlock_Sura+0x21c>)
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	4618      	mov	r0, r3
 8012020:	4b1b      	ldr	r3, [pc, #108]	; (8012090 <MAP_moveNextBlock_Sura+0x220>)
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	4619      	mov	r1, r3
 8012026:	4a1b      	ldr	r2, [pc, #108]	; (8012094 <MAP_moveNextBlock_Sura+0x224>)
 8012028:	0143      	lsls	r3, r0, #5
 801202a:	4413      	add	r3, r2
 801202c:	440b      	add	r3, r1
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	f003 0304 	and.w	r3, r3, #4
 8012034:	2b00      	cmp	r3, #0
 8012036:	d014      	beq.n	8012062 <MAP_moveNextBlock_Sura+0x1f2>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012038:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80120a4 <MAP_moveNextBlock_Sura+0x234>
 801203c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012040:	f7f9 fc82 	bl	800b948 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 8012044:	2000      	movs	r0, #0
 8012046:	f7f9 fde7 	bl	800bc18 <MOT_turn>
					uc_SlaCnt = 0;
 801204a:	4b14      	ldr	r3, [pc, #80]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 801204c:	2200      	movs	r2, #0
 801204e:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8012050:	f7fa f91c 	bl	800c28c <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012054:	4b0a      	ldr	r3, [pc, #40]	; (8012080 <MAP_moveNextBlock_Sura+0x210>)
 8012056:	4a14      	ldr	r2, [pc, #80]	; (80120a8 <MAP_moveNextBlock_Sura+0x238>)
 8012058:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	2201      	movs	r2, #1
 801205e:	701a      	strb	r2, [r3, #0]
			break;
 8012060:	e15e      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012062:	2000      	movs	r0, #0
 8012064:	f7f0 ffce 	bl	8003004 <PARAM_getSra>
 8012068:	4603      	mov	r3, r0
 801206a:	4619      	mov	r1, r3
 801206c:	2000      	movs	r0, #0
 801206e:	f7fa f95f 	bl	800c330 <MOT_goSla>
					uc_SlaCnt++;
 8012072:	4b0a      	ldr	r3, [pc, #40]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	3301      	adds	r3, #1
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b08      	ldr	r3, [pc, #32]	; (801209c <MAP_moveNextBlock_Sura+0x22c>)
 801207c:	701a      	strb	r2, [r3, #0]
			break;
 801207e:	e14f      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
 8012080:	2000e600 	.word	0x2000e600
 8012084:	3e99999a 	.word	0x3e99999a
 8012088:	2000e604 	.word	0x2000e604
 801208c:	2000e5fd 	.word	0x2000e5fd
 8012090:	2000e607 	.word	0x2000e607
 8012094:	20000708 	.word	0x20000708
 8012098:	2000132c 	.word	0x2000132c
 801209c:	200002c6 	.word	0x200002c6
 80120a0:	2000001c 	.word	0x2000001c
 80120a4:	00000000 	.word	0x00000000
 80120a8:	3e6b851f 	.word	0x3e6b851f

		// 左にスラロームする
		case WEST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80120ac:	4ba3      	ldr	r3, [pc, #652]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10e      	bne.n	80120d2 <MAP_moveNextBlock_Sura+0x262>
 80120b4:	4ba2      	ldr	r3, [pc, #648]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	4618      	mov	r0, r3
 80120ba:	4ba2      	ldr	r3, [pc, #648]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	4619      	mov	r1, r3
 80120c0:	4aa1      	ldr	r2, [pc, #644]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80120c2:	0143      	lsls	r3, r0, #5
 80120c4:	4413      	add	r3, r2
 80120c6:	440b      	add	r3, r1
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	f003 0308 	and.w	r3, r3, #8
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d138      	bne.n	8012144 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80120d2:	4b9a      	ldr	r3, [pc, #616]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80120d4:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d10e      	bne.n	80120f8 <MAP_moveNextBlock_Sura+0x288>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80120da:	4b99      	ldr	r3, [pc, #612]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	4618      	mov	r0, r3
 80120e0:	4b98      	ldr	r3, [pc, #608]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	4619      	mov	r1, r3
 80120e6:	4a98      	ldr	r2, [pc, #608]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80120e8:	0143      	lsls	r3, r0, #5
 80120ea:	4413      	add	r3, r2
 80120ec:	440b      	add	r3, r1
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d125      	bne.n	8012144 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80120f8:	4b90      	ldr	r3, [pc, #576]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80120fc:	2b02      	cmp	r3, #2
 80120fe:	d10e      	bne.n	801211e <MAP_moveNextBlock_Sura+0x2ae>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012100:	4b8f      	ldr	r3, [pc, #572]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	4618      	mov	r0, r3
 8012106:	4b8f      	ldr	r3, [pc, #572]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	4619      	mov	r1, r3
 801210c:	4a8e      	ldr	r2, [pc, #568]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 801210e:	0143      	lsls	r3, r0, #5
 8012110:	4413      	add	r3, r2
 8012112:	440b      	add	r3, r1
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	f003 0302 	and.w	r3, r3, #2
 801211a:	2b00      	cmp	r3, #0
 801211c:	d112      	bne.n	8012144 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 801211e:	4b87      	ldr	r3, [pc, #540]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 8012120:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012122:	2b03      	cmp	r3, #3
 8012124:	d112      	bne.n	801214c <MAP_moveNextBlock_Sura+0x2dc>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012126:	4b86      	ldr	r3, [pc, #536]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	4618      	mov	r0, r3
 801212c:	4b85      	ldr	r3, [pc, #532]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	4619      	mov	r1, r3
 8012132:	4a85      	ldr	r2, [pc, #532]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 8012134:	0143      	lsls	r3, r0, #5
 8012136:	4413      	add	r3, r2
 8012138:	440b      	add	r3, r1
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	f003 0304 	and.w	r3, r3, #4
 8012140:	2b00      	cmp	r3, #0
 8012142:	d003      	beq.n	801214c <MAP_moveNextBlock_Sura+0x2dc>
				){
				uc_dist_control = 0.01;
 8012144:	4b81      	ldr	r3, [pc, #516]	; (801234c <MAP_moveNextBlock_Sura+0x4dc>)
 8012146:	2200      	movs	r2, #0
 8012148:	701a      	strb	r2, [r3, #0]
 801214a:	e002      	b.n	8012152 <MAP_moveNextBlock_Sura+0x2e2>
				}
			else{
				uc_dist_control = 0;
 801214c:	4b7f      	ldr	r3, [pc, #508]	; (801234c <MAP_moveNextBlock_Sura+0x4dc>)
 801214e:	2200      	movs	r2, #0
 8012150:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 8012152:	4b7f      	ldr	r3, [pc, #508]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012154:	781a      	ldrb	r2, [r3, #0]
 8012156:	4b7f      	ldr	r3, [pc, #508]	; (8012354 <MAP_moveNextBlock_Sura+0x4e4>)
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	429a      	cmp	r2, r3
 801215c:	d20e      	bcs.n	801217c <MAP_moveNextBlock_Sura+0x30c>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801215e:	2000      	movs	r0, #0
 8012160:	f7f0 ff50 	bl	8003004 <PARAM_getSra>
 8012164:	4603      	mov	r3, r0
 8012166:	4619      	mov	r1, r3
 8012168:	2001      	movs	r0, #1
 801216a:	f7fa f8e1 	bl	800c330 <MOT_goSla>
				uc_SlaCnt++;
 801216e:	4b78      	ldr	r3, [pc, #480]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	3301      	adds	r3, #1
 8012174:	b2da      	uxtb	r2, r3
 8012176:	4b76      	ldr	r3, [pc, #472]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012178:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
			break;
 801217a:	e0d1      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801217c:	4b6f      	ldr	r3, [pc, #444]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d10e      	bne.n	80121a2 <MAP_moveNextBlock_Sura+0x332>
 8012184:	4b6e      	ldr	r3, [pc, #440]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	4618      	mov	r0, r3
 801218a:	4b6e      	ldr	r3, [pc, #440]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	4619      	mov	r1, r3
 8012190:	4a6d      	ldr	r2, [pc, #436]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 8012192:	0143      	lsls	r3, r0, #5
 8012194:	4413      	add	r3, r2
 8012196:	440b      	add	r3, r1
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	f003 0302 	and.w	r3, r3, #2
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d138      	bne.n	8012214 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80121a2:	4b66      	ldr	r3, [pc, #408]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80121a4:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d10e      	bne.n	80121c8 <MAP_moveNextBlock_Sura+0x358>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80121aa:	4b65      	ldr	r3, [pc, #404]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	4618      	mov	r0, r3
 80121b0:	4b64      	ldr	r3, [pc, #400]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	4619      	mov	r1, r3
 80121b6:	4a64      	ldr	r2, [pc, #400]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80121b8:	0143      	lsls	r3, r0, #5
 80121ba:	4413      	add	r3, r2
 80121bc:	440b      	add	r3, r1
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	f003 0304 	and.w	r3, r3, #4
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d125      	bne.n	8012214 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80121c8:	4b5c      	ldr	r3, [pc, #368]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80121ca:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80121cc:	2b02      	cmp	r3, #2
 80121ce:	d10e      	bne.n	80121ee <MAP_moveNextBlock_Sura+0x37e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80121d0:	4b5b      	ldr	r3, [pc, #364]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	4618      	mov	r0, r3
 80121d6:	4b5b      	ldr	r3, [pc, #364]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	4619      	mov	r1, r3
 80121dc:	4a5a      	ldr	r2, [pc, #360]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80121de:	0143      	lsls	r3, r0, #5
 80121e0:	4413      	add	r3, r2
 80121e2:	440b      	add	r3, r1
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	f003 0308 	and.w	r3, r3, #8
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d112      	bne.n	8012214 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80121ee:	4b53      	ldr	r3, [pc, #332]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80121f0:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80121f2:	2b03      	cmp	r3, #3
 80121f4:	d123      	bne.n	801223e <MAP_moveNextBlock_Sura+0x3ce>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80121f6:	4b52      	ldr	r3, [pc, #328]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	4618      	mov	r0, r3
 80121fc:	4b51      	ldr	r3, [pc, #324]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	4619      	mov	r1, r3
 8012202:	4a51      	ldr	r2, [pc, #324]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 8012204:	0143      	lsls	r3, r0, #5
 8012206:	4413      	add	r3, r2
 8012208:	440b      	add	r3, r1
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	f003 0301 	and.w	r3, r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	d014      	beq.n	801223e <MAP_moveNextBlock_Sura+0x3ce>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8012214:	eddf 0a50 	vldr	s1, [pc, #320]	; 8012358 <MAP_moveNextBlock_Sura+0x4e8>
 8012218:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801221c:	f7f9 fb94 	bl	800b948 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 8012220:	2001      	movs	r0, #1
 8012222:	f7f9 fcf9 	bl	800bc18 <MOT_turn>
					uc_SlaCnt = 0;
 8012226:	4b4a      	ldr	r3, [pc, #296]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012228:	2200      	movs	r2, #0
 801222a:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 801222c:	f7fa f82e 	bl	800c28c <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012230:	4b4a      	ldr	r3, [pc, #296]	; (801235c <MAP_moveNextBlock_Sura+0x4ec>)
 8012232:	4a4b      	ldr	r2, [pc, #300]	; (8012360 <MAP_moveNextBlock_Sura+0x4f0>)
 8012234:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	2201      	movs	r2, #1
 801223a:	701a      	strb	r2, [r3, #0]
			break;
 801223c:	e070      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801223e:	2000      	movs	r0, #0
 8012240:	f7f0 fee0 	bl	8003004 <PARAM_getSra>
 8012244:	4603      	mov	r3, r0
 8012246:	4619      	mov	r1, r3
 8012248:	2001      	movs	r0, #1
 801224a:	f7fa f871 	bl	800c330 <MOT_goSla>
					uc_SlaCnt++;
 801224e:	4b40      	ldr	r3, [pc, #256]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	3301      	adds	r3, #1
 8012254:	b2da      	uxtb	r2, r3
 8012256:	4b3e      	ldr	r3, [pc, #248]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012258:	701a      	strb	r2, [r3, #0]
			break;
 801225a:	e061      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>

		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 801225c:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8012358 <MAP_moveNextBlock_Sura+0x4e8>
 8012260:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012264:	f7f9 fb70 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);									// 右180度旋回
 8012268:	2002      	movs	r0, #2
 801226a:	f7f9 fcd5 	bl	800bc18 <MOT_turn>
			uc_SlaCnt = 0;
 801226e:	4b38      	ldr	r3, [pc, #224]	; (8012350 <MAP_moveNextBlock_Sura+0x4e0>)
 8012270:	2200      	movs	r2, #0
 8012272:	701a      	strb	r2, [r3, #0]
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012274:	4b31      	ldr	r3, [pc, #196]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d10e      	bne.n	801229a <MAP_moveNextBlock_Sura+0x42a>
 801227c:	4b30      	ldr	r3, [pc, #192]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	4b30      	ldr	r3, [pc, #192]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	4619      	mov	r1, r3
 8012288:	4a2f      	ldr	r2, [pc, #188]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 801228a:	0143      	lsls	r3, r0, #5
 801228c:	4413      	add	r3, r2
 801228e:	440b      	add	r3, r1
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 0301 	and.w	r3, r3, #1
 8012296:	2b00      	cmp	r3, #0
 8012298:	d138      	bne.n	801230c <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801229a:	4b28      	ldr	r3, [pc, #160]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 801229c:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d10e      	bne.n	80122c0 <MAP_moveNextBlock_Sura+0x450>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80122a2:	4b27      	ldr	r3, [pc, #156]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	4618      	mov	r0, r3
 80122a8:	4b26      	ldr	r3, [pc, #152]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	4619      	mov	r1, r3
 80122ae:	4a26      	ldr	r2, [pc, #152]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80122b0:	0143      	lsls	r3, r0, #5
 80122b2:	4413      	add	r3, r2
 80122b4:	440b      	add	r3, r1
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	f003 0302 	and.w	r3, r3, #2
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d125      	bne.n	801230c <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80122c0:	4b1e      	ldr	r3, [pc, #120]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80122c4:	2b02      	cmp	r3, #2
 80122c6:	d10e      	bne.n	80122e6 <MAP_moveNextBlock_Sura+0x476>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80122c8:	4b1d      	ldr	r3, [pc, #116]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	4618      	mov	r0, r3
 80122ce:	4b1d      	ldr	r3, [pc, #116]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	4619      	mov	r1, r3
 80122d4:	4a1c      	ldr	r2, [pc, #112]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80122d6:	0143      	lsls	r3, r0, #5
 80122d8:	4413      	add	r3, r2
 80122da:	440b      	add	r3, r1
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	f003 0304 	and.w	r3, r3, #4
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d112      	bne.n	801230c <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80122e6:	4b15      	ldr	r3, [pc, #84]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 80122e8:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80122ea:	2b03      	cmp	r3, #3
 80122ec:	d113      	bne.n	8012316 <MAP_moveNextBlock_Sura+0x4a6>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80122ee:	4b14      	ldr	r3, [pc, #80]	; (8012340 <MAP_moveNextBlock_Sura+0x4d0>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	4618      	mov	r0, r3
 80122f4:	4b13      	ldr	r3, [pc, #76]	; (8012344 <MAP_moveNextBlock_Sura+0x4d4>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	4619      	mov	r1, r3
 80122fa:	4a13      	ldr	r2, [pc, #76]	; (8012348 <MAP_moveNextBlock_Sura+0x4d8>)
 80122fc:	0143      	lsls	r3, r0, #5
 80122fe:	4413      	add	r3, r2
 8012300:	440b      	add	r3, r1
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	f003 0308 	and.w	r3, r3, #8
 8012308:	2b00      	cmp	r3, #0
 801230a:	d004      	beq.n	8012316 <MAP_moveNextBlock_Sura+0x4a6>
			){
				MOT_goHitBackWall();					// バックする
 801230c:	f7f9 ffbe 	bl	800c28c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012310:	4b12      	ldr	r3, [pc, #72]	; (801235c <MAP_moveNextBlock_Sura+0x4ec>)
 8012312:	4a13      	ldr	r2, [pc, #76]	; (8012360 <MAP_moveNextBlock_Sura+0x4f0>)
 8012314:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2201      	movs	r2, #1
 801231a:	701a      	strb	r2, [r3, #0]
			break;
 801231c:	e000      	b.n	8012320 <MAP_moveNextBlock_Sura+0x4b0>
			
		default:
			break;
 801231e:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock_Sura(en_head, p_type, TRUE );		// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8012320:	4b06      	ldr	r3, [pc, #24]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 8012322:	781a      	ldrb	r2, [r3, #0]
 8012324:	79fb      	ldrb	r3, [r7, #7]
 8012326:	4413      	add	r3, r2
 8012328:	b2db      	uxtb	r3, r3
 801232a:	f003 0303 	and.w	r3, r3, #3
 801232e:	b2da      	uxtb	r2, r3
 8012330:	4b02      	ldr	r3, [pc, #8]	; (801233c <MAP_moveNextBlock_Sura+0x4cc>)
 8012332:	701a      	strb	r2, [r3, #0]
//	}
}
 8012334:	bf00      	nop
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	2000e604 	.word	0x2000e604
 8012340:	2000e5fd 	.word	0x2000e5fd
 8012344:	2000e607 	.word	0x2000e607
 8012348:	20000708 	.word	0x20000708
 801234c:	2000132c 	.word	0x2000132c
 8012350:	200002c6 	.word	0x200002c6
 8012354:	2000001c 	.word	0x2000001c
 8012358:	00000000 	.word	0x00000000
 801235c:	2000e600 	.word	0x2000e600
 8012360:	3e6b851f 	.word	0x3e6b851f

08012364 <MAP_actGoal>:

void MAP_actGoal( void )
{	
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
	MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012368:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80123a8 <MAP_actGoal+0x44>
 801236c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012370:	f7f9 faea 	bl	800b948 <MOT_goBlock_FinSpeed>
	LL_mDelay(500);
 8012374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012378:	f003 faea 	bl	8015950 <LL_mDelay>
	MOT_turn(MOT_R180);										// 右180度旋回
 801237c:	2002      	movs	r0, #2
 801237e:	f7f9 fc4b 	bl	800bc18 <MOT_turn>
	LL_mDelay(500);
 8012382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012386:	f003 fae3 	bl	8015950 <LL_mDelay>
	
//	MAP_SaveMapData();						// 迷路情報のバックアップ
	log_flag_off();
 801238a:	f7f6 fc77 	bl	8008c7c <log_flag_off>
	MAP_actGoalLED();
 801238e:	f000 f80f 	bl	80123b0 <MAP_actGoalLED>
	
	en_Head = (enMAP_HEAD_DIR)( (en_Head + 2) & (MAP_HEAD_DIR_MAX-1) );			//	進行方向更新
 8012392:	4b06      	ldr	r3, [pc, #24]	; (80123ac <MAP_actGoal+0x48>)
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	3302      	adds	r3, #2
 8012398:	b2db      	uxtb	r3, r3
 801239a:	f003 0303 	and.w	r3, r3, #3
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	4b02      	ldr	r3, [pc, #8]	; (80123ac <MAP_actGoal+0x48>)
 80123a2:	701a      	strb	r2, [r3, #0]

}
 80123a4:	bf00      	nop
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	00000000 	.word	0x00000000
 80123ac:	2000e604 	.word	0x2000e604

080123b0 <MAP_actGoalLED>:

void MAP_actGoalLED( void )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0;i<2;i++)
 80123b6:	2300      	movs	r3, #0
 80123b8:	607b      	str	r3, [r7, #4]
 80123ba:	e020      	b.n	80123fe <MAP_actGoalLED+0x4e>
	{
		SetLED(0x02);
 80123bc:	2002      	movs	r0, #2
 80123be:	f7ef fe03 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80123c2:	2064      	movs	r0, #100	; 0x64
 80123c4:	f003 fac4 	bl	8015950 <LL_mDelay>
		SetLED(0x04);
 80123c8:	2004      	movs	r0, #4
 80123ca:	f7ef fdfd 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80123ce:	2064      	movs	r0, #100	; 0x64
 80123d0:	f003 fabe 	bl	8015950 <LL_mDelay>
		SetLED(0x08);
 80123d4:	2008      	movs	r0, #8
 80123d6:	f7ef fdf7 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80123da:	2064      	movs	r0, #100	; 0x64
 80123dc:	f003 fab8 	bl	8015950 <LL_mDelay>
		SetLED(0x04);
 80123e0:	2004      	movs	r0, #4
 80123e2:	f7ef fdf1 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80123e6:	2064      	movs	r0, #100	; 0x64
 80123e8:	f003 fab2 	bl	8015950 <LL_mDelay>
		SetLED(0x02);
 80123ec:	2002      	movs	r0, #2
 80123ee:	f7ef fdeb 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80123f2:	2064      	movs	r0, #100	; 0x64
 80123f4:	f003 faac 	bl	8015950 <LL_mDelay>
	for(i = 0;i<2;i++)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3301      	adds	r3, #1
 80123fc:	607b      	str	r3, [r7, #4]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b01      	cmp	r3, #1
 8012402:	dddb      	ble.n	80123bc <MAP_actGoalLED+0xc>
	}
	LL_mDelay(100);
 8012404:	2064      	movs	r0, #100	; 0x64
 8012406:	f003 faa3 	bl	8015950 <LL_mDelay>
	map_write();
 801240a:	f7fe fc39 	bl	8010c80 <map_write>
	SetLED(0x00);
 801240e:	2000      	movs	r0, #0
 8012410:	f7ef fdda 	bl	8001fc8 <SetLED>
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <MAP_Goalsize>:

void MAP_Goalsize(int size)
{
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
	GOAL_SIZE= size;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	b2da      	uxtb	r2, r3
 8012428:	4b13      	ldr	r3, [pc, #76]	; (8012478 <MAP_Goalsize+0x5c>)
 801242a:	701a      	strb	r2, [r3, #0]
	if (size == 4) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b04      	cmp	r3, #4
 8012430:	d10c      	bne.n	801244c <MAP_Goalsize+0x30>
		uc_max_x = uc_max_x + 1;
 8012432:	4b12      	ldr	r3, [pc, #72]	; (801247c <MAP_Goalsize+0x60>)
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	3301      	adds	r3, #1
 8012438:	b2da      	uxtb	r2, r3
 801243a:	4b10      	ldr	r3, [pc, #64]	; (801247c <MAP_Goalsize+0x60>)
 801243c:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 1;
 801243e:	4b10      	ldr	r3, [pc, #64]	; (8012480 <MAP_Goalsize+0x64>)
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	3301      	adds	r3, #1
 8012444:	b2da      	uxtb	r2, r3
 8012446:	4b0e      	ldr	r3, [pc, #56]	; (8012480 <MAP_Goalsize+0x64>)
 8012448:	701a      	strb	r2, [r3, #0]
	}
	else if (size == 9) {
		uc_max_x = uc_max_x + 2;
		uc_max_y = uc_max_y + 2;
	}
}
 801244a:	e00e      	b.n	801246a <MAP_Goalsize+0x4e>
	else if (size == 9) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b09      	cmp	r3, #9
 8012450:	d10b      	bne.n	801246a <MAP_Goalsize+0x4e>
		uc_max_x = uc_max_x + 2;
 8012452:	4b0a      	ldr	r3, [pc, #40]	; (801247c <MAP_Goalsize+0x60>)
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	3302      	adds	r3, #2
 8012458:	b2da      	uxtb	r2, r3
 801245a:	4b08      	ldr	r3, [pc, #32]	; (801247c <MAP_Goalsize+0x60>)
 801245c:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 2;
 801245e:	4b08      	ldr	r3, [pc, #32]	; (8012480 <MAP_Goalsize+0x64>)
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	3302      	adds	r3, #2
 8012464:	b2da      	uxtb	r2, r3
 8012466:	4b06      	ldr	r3, [pc, #24]	; (8012480 <MAP_Goalsize+0x64>)
 8012468:	701a      	strb	r2, [r3, #0]
}
 801246a:	bf00      	nop
 801246c:	370c      	adds	r7, #12
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	2000e606 	.word	0x2000e606
 801247c:	2000001a 	.word	0x2000001a
 8012480:	2000001b 	.word	0x2000001b

08012484 <MAP_makeReturnContourMap>:

void  MAP_makeReturnContourMap(uint8_t uc_staX,uint8_t uc_staY) 
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b0cc      	sub	sp, #304	; 0x130
 8012488:	af00      	add	r7, sp, #0
 801248a:	4602      	mov	r2, r0
 801248c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012490:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012494:	701a      	strb	r2, [r3, #0]
 8012496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801249a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801249e:	460a      	mov	r2, r1
 80124a0:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;
	queue_t queue;
	queue_t* pQueue = &queue;
 80124a2:	f107 0310 	add.w	r3, r7, #16
 80124a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 80124aa:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80124ae:	f7f0 fdbd 	bl	800302c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80124b2:	2300      	movs	r3, #0
 80124b4:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 80124b8:	e014      	b.n	80124e4 <MAP_makeReturnContourMap+0x60>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 80124ba:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80124be:	095b      	lsrs	r3, r3, #5
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80124c8:	f003 031f 	and.w	r3, r3, #31
 80124cc:	49cd      	ldr	r1, [pc, #820]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 80124ce:	0152      	lsls	r2, r2, #5
 80124d0:	4413      	add	r3, r2
 80124d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80124d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80124da:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80124de:	3301      	adds	r3, #1
 80124e0:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 80124e4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80124e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124ec:	d3e5      	bcc.n	80124ba <MAP_makeReturnContourMap+0x36>
	}
	/* 目標地点の等高線を0に設定 */
//	us_cmap[0][0] = 0;
	setStep(0, 0, 0);
 80124ee:	2200      	movs	r2, #0
 80124f0:	2100      	movs	r1, #0
 80124f2:	2000      	movs	r0, #0
 80124f4:	f7fe fec4 	bl	8011280 <setStep>
	st_pos.x = 0;
 80124f8:	2300      	movs	r3, #0
 80124fa:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = 0;
 80124fe:	2300      	movs	r3, #0
 8012500:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 8012504:	2300      	movs	r3, #0
 8012506:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 801250a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801250e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012512:	f7f0 fdbb 	bl	800308c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 8012516:	e167      	b.n	80127e8 <MAP_makeReturnContourMap+0x364>
		const stPOSITION focus = dequeue(pQueue);
 8012518:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801251c:	f7f0 fdf2 	bl	8003104 <dequeue>
 8012520:	4602      	mov	r2, r0
 8012522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012526:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801252a:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 801252c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012530:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012534:	885b      	ldrh	r3, [r3, #2]
 8012536:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 801253a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801253e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 8012548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801254c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012550:	785b      	ldrb	r3, [r3, #1]
 8012552:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 8012556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801255a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801255e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012562:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8012566:	6812      	ldr	r2, [r2, #0]
 8012568:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 801256a:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 801256e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012572:	49a5      	ldr	r1, [pc, #660]	; (8012808 <MAP_makeReturnContourMap+0x384>)
 8012574:	0152      	lsls	r2, r2, #5
 8012576:	440a      	add	r2, r1
 8012578:	4413      	add	r3, r2
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8012580:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8012584:	f003 0301 	and.w	r3, r3, #1
 8012588:	2b00      	cmp	r3, #0
 801258a:	d146      	bne.n	801261a <MAP_makeReturnContourMap+0x196>
 801258c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012590:	2b1f      	cmp	r3, #31
 8012592:	d042      	beq.n	801261a <MAP_makeReturnContourMap+0x196>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 8012594:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012598:	1c5a      	adds	r2, r3, #1
 801259a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801259e:	4999      	ldr	r1, [pc, #612]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 80125a0:	0152      	lsls	r2, r2, #5
 80125a2:	4413      	add	r3, r2
 80125a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80125a8:	461a      	mov	r2, r3
 80125aa:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80125ae:	3301      	adds	r3, #1
 80125b0:	429a      	cmp	r2, r3
 80125b2:	dd32      	ble.n	801261a <MAP_makeReturnContourMap+0x196>
				next.step = focus_step + 1;
 80125b4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80125b8:	3301      	adds	r3, #1
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80125c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80125c4:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 80125c6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80125d0:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 80125d4:	3101      	adds	r1, #1
 80125d6:	b288      	uxth	r0, r1
 80125d8:	498a      	ldr	r1, [pc, #552]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 80125da:	0152      	lsls	r2, r2, #5
 80125dc:	4413      	add	r3, r2
 80125de:	4602      	mov	r2, r0
 80125e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 80125e4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80125ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80125f2:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 80125f4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	3301      	adds	r3, #1
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012602:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012606:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 8012608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801260c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012610:	6819      	ldr	r1, [r3, #0]
 8012612:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012616:	f7f0 fd39 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 801261a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 801261e:	f003 0302 	and.w	r3, r3, #2
 8012622:	2b00      	cmp	r3, #0
 8012624:	d146      	bne.n	80126b4 <MAP_makeReturnContourMap+0x230>
 8012626:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801262a:	2b1f      	cmp	r3, #31
 801262c:	d042      	beq.n	80126b4 <MAP_makeReturnContourMap+0x230>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 801262e:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012632:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012636:	3301      	adds	r3, #1
 8012638:	4972      	ldr	r1, [pc, #456]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 801263a:	0152      	lsls	r2, r2, #5
 801263c:	4413      	add	r3, r2
 801263e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012642:	461a      	mov	r2, r3
 8012644:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8012648:	3301      	adds	r3, #1
 801264a:	429a      	cmp	r2, r3
 801264c:	dd32      	ble.n	80126b4 <MAP_makeReturnContourMap+0x230>
				next.step = focus_step + 1;
 801264e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8012652:	3301      	adds	r3, #1
 8012654:	b29a      	uxth	r2, r3
 8012656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801265a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801265e:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 8012660:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012664:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012668:	3301      	adds	r3, #1
 801266a:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 801266e:	3101      	adds	r1, #1
 8012670:	b288      	uxth	r0, r1
 8012672:	4964      	ldr	r1, [pc, #400]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 8012674:	0152      	lsls	r2, r2, #5
 8012676:	4413      	add	r3, r2
 8012678:	4602      	mov	r2, r0
 801267a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 801267e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012682:	b2db      	uxtb	r3, r3
 8012684:	3301      	adds	r3, #1
 8012686:	b2da      	uxtb	r2, r3
 8012688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801268c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012690:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8012692:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8012696:	b2da      	uxtb	r2, r3
 8012698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801269c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80126a0:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 80126a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80126a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80126aa:	6819      	ldr	r1, [r3, #0]
 80126ac:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80126b0:	f7f0 fcec 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 80126b4:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80126b8:	f003 0304 	and.w	r3, r3, #4
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d146      	bne.n	801274e <MAP_makeReturnContourMap+0x2ca>
 80126c0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d042      	beq.n	801274e <MAP_makeReturnContourMap+0x2ca>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 80126c8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80126cc:	1e5a      	subs	r2, r3, #1
 80126ce:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80126d2:	494c      	ldr	r1, [pc, #304]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 80126d4:	0152      	lsls	r2, r2, #5
 80126d6:	4413      	add	r3, r2
 80126d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80126dc:	461a      	mov	r2, r3
 80126de:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80126e2:	3301      	adds	r3, #1
 80126e4:	429a      	cmp	r2, r3
 80126e6:	dd32      	ble.n	801274e <MAP_makeReturnContourMap+0x2ca>
				next.step = focus_step + 1;
 80126e8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80126ec:	3301      	adds	r3, #1
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80126f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80126f8:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 80126fa:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80126fe:	1e5a      	subs	r2, r3, #1
 8012700:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8012704:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8012708:	3101      	adds	r1, #1
 801270a:	b288      	uxth	r0, r1
 801270c:	493d      	ldr	r1, [pc, #244]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 801270e:	0152      	lsls	r2, r2, #5
 8012710:	4413      	add	r3, r2
 8012712:	4602      	mov	r2, r0
 8012714:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8012718:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801271c:	b2da      	uxtb	r2, r3
 801271e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012722:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012726:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 8012728:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 801272c:	b2db      	uxtb	r3, r3
 801272e:	3b01      	subs	r3, #1
 8012730:	b2da      	uxtb	r2, r3
 8012732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801273a:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 801273c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012740:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012744:	6819      	ldr	r1, [r3, #0]
 8012746:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801274a:	f7f0 fc9f 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 801274e:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8012752:	f003 0308 	and.w	r3, r3, #8
 8012756:	2b00      	cmp	r3, #0
 8012758:	d146      	bne.n	80127e8 <MAP_makeReturnContourMap+0x364>
 801275a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801275e:	2b00      	cmp	r3, #0
 8012760:	d042      	beq.n	80127e8 <MAP_makeReturnContourMap+0x364>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 8012762:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012766:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801276a:	3b01      	subs	r3, #1
 801276c:	4925      	ldr	r1, [pc, #148]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 801276e:	0152      	lsls	r2, r2, #5
 8012770:	4413      	add	r3, r2
 8012772:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012776:	461a      	mov	r2, r3
 8012778:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 801277c:	3301      	adds	r3, #1
 801277e:	429a      	cmp	r2, r3
 8012780:	dd32      	ble.n	80127e8 <MAP_makeReturnContourMap+0x364>
				next.step = focus_step + 1;
 8012782:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8012786:	3301      	adds	r3, #1
 8012788:	b29a      	uxth	r2, r3
 801278a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801278e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012792:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 8012794:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8012798:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 801279c:	3b01      	subs	r3, #1
 801279e:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 80127a2:	3101      	adds	r1, #1
 80127a4:	b288      	uxth	r0, r1
 80127a6:	4917      	ldr	r1, [pc, #92]	; (8012804 <MAP_makeReturnContourMap+0x380>)
 80127a8:	0152      	lsls	r2, r2, #5
 80127aa:	4413      	add	r3, r2
 80127ac:	4602      	mov	r2, r0
 80127ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 80127b2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	3b01      	subs	r3, #1
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80127c4:	701a      	strb	r2, [r3, #0]
				next.y = y;
 80127c6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80127d4:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 80127d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80127de:	6819      	ldr	r1, [r3, #0]
 80127e0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80127e4:	f7f0 fc52 	bl	800308c <enqueue>
	while (pQueue->flag != EMPTY) {
 80127e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80127ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f47f ae91 	bne.w	8012518 <MAP_makeReturnContourMap+0x94>
			}
		}

	}

}
 80127f6:	bf00      	nop
 80127f8:	bf00      	nop
 80127fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	20000b2c 	.word	0x20000b2c
 8012808:	20000708 	.word	0x20000708

0801280c <MAP_KnownAcc>:

bool MAP_KnownAcc(void) {
 801280c:	b480      	push	{r7}
 801280e:	b083      	sub	sp, #12
 8012810:	af00      	add	r7, sp, #0

	bool	bl_acc = FALSE;
 8012812:	2300      	movs	r3, #0
 8012814:	71fb      	strb	r3, [r7, #7]
	switch (en_Head) {
 8012816:	4b33      	ldr	r3, [pc, #204]	; (80128e4 <MAP_KnownAcc+0xd8>)
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b03      	cmp	r3, #3
 801281c:	d852      	bhi.n	80128c4 <MAP_KnownAcc+0xb8>
 801281e:	a201      	add	r2, pc, #4	; (adr r2, 8012824 <MAP_KnownAcc+0x18>)
 8012820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012824:	08012835 	.word	0x08012835
 8012828:	08012859 	.word	0x08012859
 801282c:	0801287d 	.word	0x0801287d
 8012830:	080128a1 	.word	0x080128a1
	case NORTH:
		if ((g_sysMap[my + 1][mx] & 0xf1) == 0xf0) {
 8012834:	4b2c      	ldr	r3, [pc, #176]	; (80128e8 <MAP_KnownAcc+0xdc>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	3301      	adds	r3, #1
 801283a:	4a2c      	ldr	r2, [pc, #176]	; (80128ec <MAP_KnownAcc+0xe0>)
 801283c:	7812      	ldrb	r2, [r2, #0]
 801283e:	4611      	mov	r1, r2
 8012840:	4a2b      	ldr	r2, [pc, #172]	; (80128f0 <MAP_KnownAcc+0xe4>)
 8012842:	015b      	lsls	r3, r3, #5
 8012844:	4413      	add	r3, r2
 8012846:	440b      	add	r3, r1
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 801284e:	2bf0      	cmp	r3, #240	; 0xf0
 8012850:	d13a      	bne.n	80128c8 <MAP_KnownAcc+0xbc>
			bl_acc = TRUE;
 8012852:	2301      	movs	r3, #1
 8012854:	71fb      	strb	r3, [r7, #7]
		}

		break;
 8012856:	e037      	b.n	80128c8 <MAP_KnownAcc+0xbc>

	case EAST:
		if ((g_sysMap[my][mx + 1] & 0xf2) == 0xf0) {
 8012858:	4b23      	ldr	r3, [pc, #140]	; (80128e8 <MAP_KnownAcc+0xdc>)
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	461a      	mov	r2, r3
 801285e:	4b23      	ldr	r3, [pc, #140]	; (80128ec <MAP_KnownAcc+0xe0>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	3301      	adds	r3, #1
 8012864:	4922      	ldr	r1, [pc, #136]	; (80128f0 <MAP_KnownAcc+0xe4>)
 8012866:	0152      	lsls	r2, r2, #5
 8012868:	440a      	add	r2, r1
 801286a:	4413      	add	r3, r2
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8012872:	2bf0      	cmp	r3, #240	; 0xf0
 8012874:	d12a      	bne.n	80128cc <MAP_KnownAcc+0xc0>
			bl_acc = TRUE;
 8012876:	2301      	movs	r3, #1
 8012878:	71fb      	strb	r3, [r7, #7]
		}
		break;
 801287a:	e027      	b.n	80128cc <MAP_KnownAcc+0xc0>

	case SOUTH:
		if ((g_sysMap[my - 1][mx] & 0xf4) == 0xf0) {
 801287c:	4b1a      	ldr	r3, [pc, #104]	; (80128e8 <MAP_KnownAcc+0xdc>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	3b01      	subs	r3, #1
 8012882:	4a1a      	ldr	r2, [pc, #104]	; (80128ec <MAP_KnownAcc+0xe0>)
 8012884:	7812      	ldrb	r2, [r2, #0]
 8012886:	4611      	mov	r1, r2
 8012888:	4a19      	ldr	r2, [pc, #100]	; (80128f0 <MAP_KnownAcc+0xe4>)
 801288a:	015b      	lsls	r3, r3, #5
 801288c:	4413      	add	r3, r2
 801288e:	440b      	add	r3, r1
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8012896:	2bf0      	cmp	r3, #240	; 0xf0
 8012898:	d11a      	bne.n	80128d0 <MAP_KnownAcc+0xc4>
			bl_acc = TRUE;
 801289a:	2301      	movs	r3, #1
 801289c:	71fb      	strb	r3, [r7, #7]
		}
		break;
 801289e:	e017      	b.n	80128d0 <MAP_KnownAcc+0xc4>

	case WEST:
		if ((g_sysMap[my][mx - 1] & 0xf8) == 0xf0) {
 80128a0:	4b11      	ldr	r3, [pc, #68]	; (80128e8 <MAP_KnownAcc+0xdc>)
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	461a      	mov	r2, r3
 80128a6:	4b11      	ldr	r3, [pc, #68]	; (80128ec <MAP_KnownAcc+0xe0>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	3b01      	subs	r3, #1
 80128ac:	4910      	ldr	r1, [pc, #64]	; (80128f0 <MAP_KnownAcc+0xe4>)
 80128ae:	0152      	lsls	r2, r2, #5
 80128b0:	440a      	add	r2, r1
 80128b2:	4413      	add	r3, r2
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80128ba:	2bf0      	cmp	r3, #240	; 0xf0
 80128bc:	d10a      	bne.n	80128d4 <MAP_KnownAcc+0xc8>
			bl_acc = TRUE;
 80128be:	2301      	movs	r3, #1
 80128c0:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80128c2:	e007      	b.n	80128d4 <MAP_KnownAcc+0xc8>

	default:
		break;
 80128c4:	bf00      	nop
 80128c6:	e006      	b.n	80128d6 <MAP_KnownAcc+0xca>
		break;
 80128c8:	bf00      	nop
 80128ca:	e004      	b.n	80128d6 <MAP_KnownAcc+0xca>
		break;
 80128cc:	bf00      	nop
 80128ce:	e002      	b.n	80128d6 <MAP_KnownAcc+0xca>
		break;
 80128d0:	bf00      	nop
 80128d2:	e000      	b.n	80128d6 <MAP_KnownAcc+0xca>
		break;
 80128d4:	bf00      	nop
	}
	return	bl_acc;
 80128d6:	79fb      	ldrb	r3, [r7, #7]
}
 80128d8:	4618      	mov	r0, r3
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr
 80128e4:	2000e604 	.word	0x2000e604
 80128e8:	2000e5fd 	.word	0x2000e5fd
 80128ec:	2000e607 	.word	0x2000e607
 80128f0:	20000708 	.word	0x20000708

080128f4 <MAP_moveNextBlock_acc>:

void MAP_moveNextBlock_acc(enMAP_HEAD_DIR en_head, bool* p_type)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	2200      	movs	r2, #0
 8012904:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;
 8012906:	4ba6      	ldr	r3, [pc, #664]	; (8012ba0 <MAP_moveNextBlock_acc+0x2ac>)
 8012908:	f04f 0200 	mov.w	r2, #0
 801290c:	601a      	str	r2, [r3, #0]

	/* 動作 */
	switch (en_head) {
 801290e:	79fb      	ldrb	r3, [r7, #7]
 8012910:	2b03      	cmp	r3, #3
 8012912:	f200 85b9 	bhi.w	8013488 <MAP_moveNextBlock_acc+0xb94>
 8012916:	a201      	add	r2, pc, #4	; (adr r2, 801291c <MAP_moveNextBlock_acc+0x28>)
 8012918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291c:	0801292d 	.word	0x0801292d
 8012920:	080129ad 	.word	0x080129ad
 8012924:	08013015 	.word	0x08013015
 8012928:	08012cd7 	.word	0x08012cd7

		/* そのまま前進 */
	case NORTH:
//		*p_type = FALSE;
//		LED = LED6;
		if (MAP_KnownAcc() == FALSE) {					// 次に進む区画が未探索のとき
 801292c:	f7ff ff6e 	bl	801280c <MAP_KnownAcc>
 8012930:	4603      	mov	r3, r0
 8012932:	f083 0301 	eor.w	r3, r3, #1
 8012936:	b2db      	uxtb	r3, r3
 8012938:	2b00      	cmp	r3, #0
 801293a:	d02c      	beq.n	8012996 <MAP_moveNextBlock_acc+0xa2>
			if (st_known.bl_Known == TRUE){
 801293c:	4b99      	ldr	r3, [pc, #612]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 801293e:	785b      	ldrb	r3, [r3, #1]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d01c      	beq.n	801297e <MAP_moveNextBlock_acc+0x8a>
				if (st_known.uc_StrCnt < 2) {
 8012944:	4b97      	ldr	r3, [pc, #604]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b01      	cmp	r3, #1
 801294a:	d804      	bhi.n	8012956 <MAP_moveNextBlock_acc+0x62>
					MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 801294c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012950:	f7f9 f81e 	bl	800b990 <MOT_goBlock_Const>
 8012954:	e013      	b.n	801297e <MAP_moveNextBlock_acc+0x8a>
				}
				else {
					MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8012956:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801295a:	f7f9 fc71 	bl	800c240 <MOT_setTrgtSpeed>
					MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 801295e:	4b91      	ldr	r3, [pc, #580]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	ee07 3a90 	vmov	s15, r3
 8012966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801296a:	eddf 0a8f 	vldr	s1, [pc, #572]	; 8012ba8 <MAP_moveNextBlock_acc+0x2b4>
 801296e:	eeb0 0a67 	vmov.f32	s0, s15
 8012972:	f7f8 ffe9 	bl	800b948 <MOT_goBlock_FinSpeed>
					MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8012976:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8012ba8 <MAP_moveNextBlock_acc+0x2b4>
 801297a:	f7f9 fc61 	bl	800c240 <MOT_setTrgtSpeed>
				}
			}
			MOT_goBlock_Const(1);	////////////////////
 801297e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012982:	f7f9 f805 	bl	800b990 <MOT_goBlock_Const>
			st_known.uc_StrCnt = 0;
 8012986:	4b87      	ldr	r3, [pc, #540]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 8012988:	2200      	movs	r2, #0
 801298a:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 801298c:	4b85      	ldr	r3, [pc, #532]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 801298e:	2200      	movs	r2, #0
 8012990:	705a      	strb	r2, [r3, #1]

			st_known.uc_StrCnt++;			// 移動区画の加算
			st_known.bl_Known = TRUE;
		}

		break;
 8012992:	f000 bd7a 	b.w	801348a <MAP_moveNextBlock_acc+0xb96>
			st_known.uc_StrCnt++;			// 移動区画の加算
 8012996:	4b83      	ldr	r3, [pc, #524]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	3301      	adds	r3, #1
 801299c:	b2da      	uxtb	r2, r3
 801299e:	4b81      	ldr	r3, [pc, #516]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129a0:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = TRUE;
 80129a2:	4b80      	ldr	r3, [pc, #512]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129a4:	2201      	movs	r2, #1
 80129a6:	705a      	strb	r2, [r3, #1]
		break;
 80129a8:	f000 bd6f 	b.w	801348a <MAP_moveNextBlock_acc+0xb96>

		/* 右に旋回する */
	case EAST:
//		LED = LED8;
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 80129ac:	4b7d      	ldr	r3, [pc, #500]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129ae:	785b      	ldrb	r3, [r3, #1]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d022      	beq.n	80129fa <MAP_moveNextBlock_acc+0x106>
			if (st_known.uc_StrCnt < 2) {
 80129b4:	4b7b      	ldr	r3, [pc, #492]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d804      	bhi.n	80129c6 <MAP_moveNextBlock_acc+0xd2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 80129bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80129c0:	f7f8 ffe6 	bl	800b990 <MOT_goBlock_Const>
 80129c4:	e013      	b.n	80129ee <MAP_moveNextBlock_acc+0xfa>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 80129c6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80129ca:	f7f9 fc39 	bl	800c240 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 80129ce:	4b75      	ldr	r3, [pc, #468]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	ee07 3a90 	vmov	s15, r3
 80129d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129da:	eddf 0a73 	vldr	s1, [pc, #460]	; 8012ba8 <MAP_moveNextBlock_acc+0x2b4>
 80129de:	eeb0 0a67 	vmov.f32	s0, s15
 80129e2:	f7f8 ffb1 	bl	800b948 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 80129e6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8012ba8 <MAP_moveNextBlock_acc+0x2b4>
 80129ea:	f7f9 fc29 	bl	800c240 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;		/////////////////////////////////////////
 80129ee:	4b6d      	ldr	r3, [pc, #436]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 80129f4:	4b6b      	ldr	r3, [pc, #428]	; (8012ba4 <MAP_moveNextBlock_acc+0x2b0>)
 80129f6:	2200      	movs	r2, #0
 80129f8:	705a      	strb	r2, [r3, #1]
		}
		if(wall_hit_flag == 0){}
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80129fa:	4b6c      	ldr	r3, [pc, #432]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d10e      	bne.n	8012a20 <MAP_moveNextBlock_acc+0x12c>
 8012a02:	4b6b      	ldr	r3, [pc, #428]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	4b6a      	ldr	r3, [pc, #424]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4a6a      	ldr	r2, [pc, #424]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012a10:	0143      	lsls	r3, r0, #5
 8012a12:	4413      	add	r3, r2
 8012a14:	440b      	add	r3, r1
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	f003 0302 	and.w	r3, r3, #2
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d138      	bne.n	8012a92 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012a20:	4b62      	ldr	r3, [pc, #392]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012a22:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d10e      	bne.n	8012a46 <MAP_moveNextBlock_acc+0x152>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012a28:	4b61      	ldr	r3, [pc, #388]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	4b61      	ldr	r3, [pc, #388]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	4619      	mov	r1, r3
 8012a34:	4a60      	ldr	r2, [pc, #384]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012a36:	0143      	lsls	r3, r0, #5
 8012a38:	4413      	add	r3, r2
 8012a3a:	440b      	add	r3, r1
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	f003 0304 	and.w	r3, r3, #4
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d125      	bne.n	8012a92 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012a46:	4b59      	ldr	r3, [pc, #356]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012a4a:	2b02      	cmp	r3, #2
 8012a4c:	d10e      	bne.n	8012a6c <MAP_moveNextBlock_acc+0x178>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012a4e:	4b58      	ldr	r3, [pc, #352]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	4b57      	ldr	r3, [pc, #348]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	4619      	mov	r1, r3
 8012a5a:	4a57      	ldr	r2, [pc, #348]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012a5c:	0143      	lsls	r3, r0, #5
 8012a5e:	4413      	add	r3, r2
 8012a60:	440b      	add	r3, r1
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	f003 0308 	and.w	r3, r3, #8
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d112      	bne.n	8012a92 <MAP_moveNextBlock_acc+0x19e>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012a6c:	4b4f      	ldr	r3, [pc, #316]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012a6e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012a70:	2b03      	cmp	r3, #3
 8012a72:	d112      	bne.n	8012a9a <MAP_moveNextBlock_acc+0x1a6>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012a74:	4b4e      	ldr	r3, [pc, #312]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	4b4e      	ldr	r3, [pc, #312]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	4619      	mov	r1, r3
 8012a80:	4a4d      	ldr	r2, [pc, #308]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012a82:	0143      	lsls	r3, r0, #5
 8012a84:	4413      	add	r3, r2
 8012a86:	440b      	add	r3, r1
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0301 	and.w	r3, r3, #1
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d003      	beq.n	8012a9a <MAP_moveNextBlock_acc+0x1a6>
			){
			uc_dist_control = 0.02;
 8012a92:	4b4a      	ldr	r3, [pc, #296]	; (8012bbc <MAP_moveNextBlock_acc+0x2c8>)
 8012a94:	2200      	movs	r2, #0
 8012a96:	701a      	strb	r2, [r3, #0]
 8012a98:	e002      	b.n	8012aa0 <MAP_moveNextBlock_acc+0x1ac>
			}
		else{
			uc_dist_control = 0;
 8012a9a:	4b48      	ldr	r3, [pc, #288]	; (8012bbc <MAP_moveNextBlock_acc+0x2c8>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	701a      	strb	r2, [r3, #0]
		}
		if( uc_SlaCnt < SLA_count ){
 8012aa0:	4b47      	ldr	r3, [pc, #284]	; (8012bc0 <MAP_moveNextBlock_acc+0x2cc>)
 8012aa2:	781a      	ldrb	r2, [r3, #0]
 8012aa4:	4b47      	ldr	r3, [pc, #284]	; (8012bc4 <MAP_moveNextBlock_acc+0x2d0>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d20f      	bcs.n	8012acc <MAP_moveNextBlock_acc+0x1d8>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012aac:	2000      	movs	r0, #0
 8012aae:	f7f0 faa9 	bl	8003004 <PARAM_getSra>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	f7f9 fc3a 	bl	800c330 <MOT_goSla>
				uc_SlaCnt++;
 8012abc:	4b40      	ldr	r3, [pc, #256]	; (8012bc0 <MAP_moveNextBlock_acc+0x2cc>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	4b3e      	ldr	r3, [pc, #248]	; (8012bc0 <MAP_moveNextBlock_acc+0x2cc>)
 8012ac6:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8012ac8:	f000 bcdf 	b.w	801348a <MAP_moveNextBlock_acc+0xb96>
				if(wall_hit_flag == 0){
 8012acc:	4b3e      	ldr	r3, [pc, #248]	; (8012bc8 <MAP_moveNextBlock_acc+0x2d4>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f040 808f 	bne.w	8012bf4 <MAP_moveNextBlock_acc+0x300>
					f_MoveBackDist = 0;
 8012ad6:	4b32      	ldr	r3, [pc, #200]	; (8012ba0 <MAP_moveNextBlock_acc+0x2ac>)
 8012ad8:	f04f 0200 	mov.w	r2, #0
 8012adc:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012ade:	4b33      	ldr	r3, [pc, #204]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d10e      	bne.n	8012b04 <MAP_moveNextBlock_acc+0x210>
 8012ae6:	4b32      	ldr	r3, [pc, #200]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4618      	mov	r0, r3
 8012aec:	4b31      	ldr	r3, [pc, #196]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	4619      	mov	r1, r3
 8012af2:	4a31      	ldr	r2, [pc, #196]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012af4:	0143      	lsls	r3, r0, #5
 8012af6:	4413      	add	r3, r2
 8012af8:	440b      	add	r3, r1
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 0308 	and.w	r3, r3, #8
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d138      	bne.n	8012b76 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b04:	4b29      	ldr	r3, [pc, #164]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d10e      	bne.n	8012b2a <MAP_moveNextBlock_acc+0x236>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b0c:	4b28      	ldr	r3, [pc, #160]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	4618      	mov	r0, r3
 8012b12:	4b28      	ldr	r3, [pc, #160]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	4619      	mov	r1, r3
 8012b18:	4a27      	ldr	r2, [pc, #156]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012b1a:	0143      	lsls	r3, r0, #5
 8012b1c:	4413      	add	r3, r2
 8012b1e:	440b      	add	r3, r1
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d125      	bne.n	8012b76 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b2a:	4b20      	ldr	r3, [pc, #128]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012b2c:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d10e      	bne.n	8012b50 <MAP_moveNextBlock_acc+0x25c>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b32:	4b1f      	ldr	r3, [pc, #124]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	4618      	mov	r0, r3
 8012b38:	4b1e      	ldr	r3, [pc, #120]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	4a1e      	ldr	r2, [pc, #120]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012b40:	0143      	lsls	r3, r0, #5
 8012b42:	4413      	add	r3, r2
 8012b44:	440b      	add	r3, r1
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	f003 0302 	and.w	r3, r3, #2
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d112      	bne.n	8012b76 <MAP_moveNextBlock_acc+0x282>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012b50:	4b16      	ldr	r3, [pc, #88]	; (8012bac <MAP_moveNextBlock_acc+0x2b8>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012b54:	2b03      	cmp	r3, #3
 8012b56:	d13d      	bne.n	8012bd4 <MAP_moveNextBlock_acc+0x2e0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012b58:	4b15      	ldr	r3, [pc, #84]	; (8012bb0 <MAP_moveNextBlock_acc+0x2bc>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	4b15      	ldr	r3, [pc, #84]	; (8012bb4 <MAP_moveNextBlock_acc+0x2c0>)
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	4619      	mov	r1, r3
 8012b64:	4a14      	ldr	r2, [pc, #80]	; (8012bb8 <MAP_moveNextBlock_acc+0x2c4>)
 8012b66:	0143      	lsls	r3, r0, #5
 8012b68:	4413      	add	r3, r2
 8012b6a:	440b      	add	r3, r1
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	f003 0304 	and.w	r3, r3, #4
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d02e      	beq.n	8012bd4 <MAP_moveNextBlock_acc+0x2e0>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012b76:	eddf 0a15 	vldr	s1, [pc, #84]	; 8012bcc <MAP_moveNextBlock_acc+0x2d8>
 8012b7a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012b7e:	f7f8 fee3 	bl	800b948 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_R90);						// 右90度旋回
 8012b82:	2000      	movs	r0, #0
 8012b84:	f7f9 f848 	bl	800bc18 <MOT_turn>
						uc_SlaCnt = 0;
 8012b88:	4b0d      	ldr	r3, [pc, #52]	; (8012bc0 <MAP_moveNextBlock_acc+0x2cc>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8012b8e:	f7f9 fb7d 	bl	800c28c <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012b92:	4b03      	ldr	r3, [pc, #12]	; (8012ba0 <MAP_moveNextBlock_acc+0x2ac>)
 8012b94:	4a0e      	ldr	r2, [pc, #56]	; (8012bd0 <MAP_moveNextBlock_acc+0x2dc>)
 8012b96:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	e099      	b.n	8012cd4 <MAP_moveNextBlock_acc+0x3e0>
 8012ba0:	2000e600 	.word	0x2000e600
 8012ba4:	200002c8 	.word	0x200002c8
 8012ba8:	3e99999a 	.word	0x3e99999a
 8012bac:	2000e604 	.word	0x2000e604
 8012bb0:	2000e5fd 	.word	0x2000e5fd
 8012bb4:	2000e607 	.word	0x2000e607
 8012bb8:	20000708 	.word	0x20000708
 8012bbc:	2000132c 	.word	0x2000132c
 8012bc0:	200002c6 	.word	0x200002c6
 8012bc4:	2000001c 	.word	0x2000001c
 8012bc8:	200002a9 	.word	0x200002a9
 8012bcc:	00000000 	.word	0x00000000
 8012bd0:	3e6b851f 	.word	0x3e6b851f
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	f7f0 fa15 	bl	8003004 <PARAM_getSra>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	4619      	mov	r1, r3
 8012bde:	2000      	movs	r0, #0
 8012be0:	f7f9 fba6 	bl	800c330 <MOT_goSla>
						uc_SlaCnt++;
 8012be4:	4b83      	ldr	r3, [pc, #524]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	3301      	adds	r3, #1
 8012bea:	b2da      	uxtb	r2, r3
 8012bec:	4b81      	ldr	r3, [pc, #516]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012bee:	701a      	strb	r2, [r3, #0]
		break;
 8012bf0:	f000 bc4b 	b.w	801348a <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012bf4:	4b80      	ldr	r3, [pc, #512]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10e      	bne.n	8012c1a <MAP_moveNextBlock_acc+0x326>
 8012bfc:	4b7f      	ldr	r3, [pc, #508]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	4618      	mov	r0, r3
 8012c02:	4b7f      	ldr	r3, [pc, #508]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	4619      	mov	r1, r3
 8012c08:	4a7e      	ldr	r2, [pc, #504]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012c0a:	0143      	lsls	r3, r0, #5
 8012c0c:	4413      	add	r3, r2
 8012c0e:	440b      	add	r3, r1
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	f003 0301 	and.w	r3, r3, #1
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d138      	bne.n	8012c8c <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012c1a:	4b77      	ldr	r3, [pc, #476]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012c1c:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012c1e:	2b01      	cmp	r3, #1
 8012c20:	d10e      	bne.n	8012c40 <MAP_moveNextBlock_acc+0x34c>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012c22:	4b76      	ldr	r3, [pc, #472]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	4618      	mov	r0, r3
 8012c28:	4b75      	ldr	r3, [pc, #468]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4a75      	ldr	r2, [pc, #468]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012c30:	0143      	lsls	r3, r0, #5
 8012c32:	4413      	add	r3, r2
 8012c34:	440b      	add	r3, r1
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	f003 0302 	and.w	r3, r3, #2
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d125      	bne.n	8012c8c <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012c40:	4b6d      	ldr	r3, [pc, #436]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012c42:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012c44:	2b02      	cmp	r3, #2
 8012c46:	d10e      	bne.n	8012c66 <MAP_moveNextBlock_acc+0x372>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012c48:	4b6c      	ldr	r3, [pc, #432]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	4b6c      	ldr	r3, [pc, #432]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	4619      	mov	r1, r3
 8012c54:	4a6b      	ldr	r2, [pc, #428]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012c56:	0143      	lsls	r3, r0, #5
 8012c58:	4413      	add	r3, r2
 8012c5a:	440b      	add	r3, r1
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	f003 0304 	and.w	r3, r3, #4
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d112      	bne.n	8012c8c <MAP_moveNextBlock_acc+0x398>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012c66:	4b64      	ldr	r3, [pc, #400]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012c68:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012c6a:	2b03      	cmp	r3, #3
 8012c6c:	d123      	bne.n	8012cb6 <MAP_moveNextBlock_acc+0x3c2>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012c6e:	4b63      	ldr	r3, [pc, #396]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	4618      	mov	r0, r3
 8012c74:	4b62      	ldr	r3, [pc, #392]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	4619      	mov	r1, r3
 8012c7a:	4a62      	ldr	r2, [pc, #392]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012c7c:	0143      	lsls	r3, r0, #5
 8012c7e:	4413      	add	r3, r2
 8012c80:	440b      	add	r3, r1
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f003 0308 	and.w	r3, r3, #8
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d014      	beq.n	8012cb6 <MAP_moveNextBlock_acc+0x3c2>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012c8c:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8012e08 <MAP_moveNextBlock_acc+0x514>
 8012c90:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012c94:	f7f8 fe58 	bl	800b948 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 8012c98:	2064      	movs	r0, #100	; 0x64
 8012c9a:	f002 fe59 	bl	8015950 <LL_mDelay>
						DIST_Front_Wall_correction();
 8012c9e:	f7f9 ffe7 	bl	800cc70 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);						// 右90度旋回
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	f7f8 ffb8 	bl	800bc18 <MOT_turn>
						uc_SlaCnt = 0;
 8012ca8:	4b52      	ldr	r3, [pc, #328]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012caa:	2200      	movs	r2, #0
 8012cac:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	701a      	strb	r2, [r3, #0]
 8012cb4:	e00e      	b.n	8012cd4 <MAP_moveNextBlock_acc+0x3e0>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	f7f0 f9a4 	bl	8003004 <PARAM_getSra>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	f7f9 fb35 	bl	800c330 <MOT_goSla>
						uc_SlaCnt++;
 8012cc6:	4b4b      	ldr	r3, [pc, #300]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	b2da      	uxtb	r2, r3
 8012cce:	4b49      	ldr	r3, [pc, #292]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012cd0:	701a      	strb	r2, [r3, #0]
		break;
 8012cd2:	e3da      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
 8012cd4:	e3d9      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>

		/* 左に旋回する */
	case WEST:
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012cd6:	4b48      	ldr	r3, [pc, #288]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d10e      	bne.n	8012cfc <MAP_moveNextBlock_acc+0x408>
 8012cde:	4b47      	ldr	r3, [pc, #284]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	4b46      	ldr	r3, [pc, #280]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	4a46      	ldr	r2, [pc, #280]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012cec:	0143      	lsls	r3, r0, #5
 8012cee:	4413      	add	r3, r2
 8012cf0:	440b      	add	r3, r1
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f003 0308 	and.w	r3, r3, #8
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d138      	bne.n	8012d6e <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012cfc:	4b3e      	ldr	r3, [pc, #248]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d10e      	bne.n	8012d22 <MAP_moveNextBlock_acc+0x42e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012d04:	4b3d      	ldr	r3, [pc, #244]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	4b3d      	ldr	r3, [pc, #244]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	4619      	mov	r1, r3
 8012d10:	4a3c      	ldr	r2, [pc, #240]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012d12:	0143      	lsls	r3, r0, #5
 8012d14:	4413      	add	r3, r2
 8012d16:	440b      	add	r3, r1
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	f003 0301 	and.w	r3, r3, #1
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d125      	bne.n	8012d6e <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012d22:	4b35      	ldr	r3, [pc, #212]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012d24:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d10e      	bne.n	8012d48 <MAP_moveNextBlock_acc+0x454>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012d2a:	4b34      	ldr	r3, [pc, #208]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	4618      	mov	r0, r3
 8012d30:	4b33      	ldr	r3, [pc, #204]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	4619      	mov	r1, r3
 8012d36:	4a33      	ldr	r2, [pc, #204]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012d38:	0143      	lsls	r3, r0, #5
 8012d3a:	4413      	add	r3, r2
 8012d3c:	440b      	add	r3, r1
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	f003 0302 	and.w	r3, r3, #2
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d112      	bne.n	8012d6e <MAP_moveNextBlock_acc+0x47a>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012d48:	4b2b      	ldr	r3, [pc, #172]	; (8012df8 <MAP_moveNextBlock_acc+0x504>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8012d4c:	2b03      	cmp	r3, #3
 8012d4e:	d112      	bne.n	8012d76 <MAP_moveNextBlock_acc+0x482>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8012d50:	4b2a      	ldr	r3, [pc, #168]	; (8012dfc <MAP_moveNextBlock_acc+0x508>)
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	4618      	mov	r0, r3
 8012d56:	4b2a      	ldr	r3, [pc, #168]	; (8012e00 <MAP_moveNextBlock_acc+0x50c>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	4a29      	ldr	r2, [pc, #164]	; (8012e04 <MAP_moveNextBlock_acc+0x510>)
 8012d5e:	0143      	lsls	r3, r0, #5
 8012d60:	4413      	add	r3, r2
 8012d62:	440b      	add	r3, r1
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	f003 0304 	and.w	r3, r3, #4
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d003      	beq.n	8012d76 <MAP_moveNextBlock_acc+0x482>
			){
			uc_dist_control = 0.02;
 8012d6e:	4b27      	ldr	r3, [pc, #156]	; (8012e0c <MAP_moveNextBlock_acc+0x518>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	701a      	strb	r2, [r3, #0]
 8012d74:	e002      	b.n	8012d7c <MAP_moveNextBlock_acc+0x488>
			}
		else{
			uc_dist_control = 0;
 8012d76:	4b25      	ldr	r3, [pc, #148]	; (8012e0c <MAP_moveNextBlock_acc+0x518>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	701a      	strb	r2, [r3, #0]
		}
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 8012d7c:	4b24      	ldr	r3, [pc, #144]	; (8012e10 <MAP_moveNextBlock_acc+0x51c>)
 8012d7e:	785b      	ldrb	r3, [r3, #1]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d022      	beq.n	8012dca <MAP_moveNextBlock_acc+0x4d6>
			if (st_known.uc_StrCnt < 2) {
 8012d84:	4b22      	ldr	r3, [pc, #136]	; (8012e10 <MAP_moveNextBlock_acc+0x51c>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d804      	bhi.n	8012d96 <MAP_moveNextBlock_acc+0x4a2>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8012d8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012d90:	f7f8 fdfe 	bl	800b990 <MOT_goBlock_Const>
 8012d94:	e013      	b.n	8012dbe <MAP_moveNextBlock_acc+0x4ca>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8012d96:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012d9a:	f7f9 fa51 	bl	800c240 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);		// n区画前進
 8012d9e:	4b1c      	ldr	r3, [pc, #112]	; (8012e10 <MAP_moveNextBlock_acc+0x51c>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	ee07 3a90 	vmov	s15, r3
 8012da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012daa:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012e14 <MAP_moveNextBlock_acc+0x520>
 8012dae:	eeb0 0a67 	vmov.f32	s0, s15
 8012db2:	f7f8 fdc9 	bl	800b948 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8012db6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8012e14 <MAP_moveNextBlock_acc+0x520>
 8012dba:	f7f9 fa41 	bl	800c240 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;			//////////////////////////////////////
 8012dbe:	4b14      	ldr	r3, [pc, #80]	; (8012e10 <MAP_moveNextBlock_acc+0x51c>)
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 8012dc4:	4b12      	ldr	r3, [pc, #72]	; (8012e10 <MAP_moveNextBlock_acc+0x51c>)
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	705a      	strb	r2, [r3, #1]
		}

		if( uc_SlaCnt < SLA_count ){
 8012dca:	4b0a      	ldr	r3, [pc, #40]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012dcc:	781a      	ldrb	r2, [r3, #0]
 8012dce:	4b12      	ldr	r3, [pc, #72]	; (8012e18 <MAP_moveNextBlock_acc+0x524>)
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d222      	bcs.n	8012e1c <MAP_moveNextBlock_acc+0x528>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	f7f0 f914 	bl	8003004 <PARAM_getSra>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	4619      	mov	r1, r3
 8012de0:	2001      	movs	r0, #1
 8012de2:	f7f9 faa5 	bl	800c330 <MOT_goSla>
				uc_SlaCnt++;
 8012de6:	4b03      	ldr	r3, [pc, #12]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	3301      	adds	r3, #1
 8012dec:	b2da      	uxtb	r2, r3
 8012dee:	4b01      	ldr	r3, [pc, #4]	; (8012df4 <MAP_moveNextBlock_acc+0x500>)
 8012df0:	701a      	strb	r2, [r3, #0]
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
						uc_SlaCnt++;
					}
				}
			}
		break;
 8012df2:	e34a      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
 8012df4:	200002c6 	.word	0x200002c6
 8012df8:	2000e604 	.word	0x2000e604
 8012dfc:	2000e5fd 	.word	0x2000e5fd
 8012e00:	2000e607 	.word	0x2000e607
 8012e04:	20000708 	.word	0x20000708
 8012e08:	00000000 	.word	0x00000000
 8012e0c:	2000132c 	.word	0x2000132c
 8012e10:	200002c8 	.word	0x200002c8
 8012e14:	3e99999a 	.word	0x3e99999a
 8012e18:	2000001c 	.word	0x2000001c
				if(wall_hit_flag == 0){
 8012e1c:	4b74      	ldr	r3, [pc, #464]	; (8012ff0 <MAP_moveNextBlock_acc+0x6fc>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d173      	bne.n	8012f0c <MAP_moveNextBlock_acc+0x618>
					f_MoveBackDist = 0;
 8012e24:	4b73      	ldr	r3, [pc, #460]	; (8012ff4 <MAP_moveNextBlock_acc+0x700>)
 8012e26:	f04f 0200 	mov.w	r2, #0
 8012e2a:	601a      	str	r2, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012e2c:	4b72      	ldr	r3, [pc, #456]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d10e      	bne.n	8012e52 <MAP_moveNextBlock_acc+0x55e>
 8012e34:	4b71      	ldr	r3, [pc, #452]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	4b71      	ldr	r3, [pc, #452]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	4a70      	ldr	r2, [pc, #448]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012e42:	0143      	lsls	r3, r0, #5
 8012e44:	4413      	add	r3, r2
 8012e46:	440b      	add	r3, r1
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f003 0302 	and.w	r3, r3, #2
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d138      	bne.n	8012ec4 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012e52:	4b69      	ldr	r3, [pc, #420]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d10e      	bne.n	8012e78 <MAP_moveNextBlock_acc+0x584>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012e5a:	4b68      	ldr	r3, [pc, #416]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	4b67      	ldr	r3, [pc, #412]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	4619      	mov	r1, r3
 8012e66:	4a67      	ldr	r2, [pc, #412]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012e68:	0143      	lsls	r3, r0, #5
 8012e6a:	4413      	add	r3, r2
 8012e6c:	440b      	add	r3, r1
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	f003 0304 	and.w	r3, r3, #4
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d125      	bne.n	8012ec4 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012e78:	4b5f      	ldr	r3, [pc, #380]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8012e7c:	2b02      	cmp	r3, #2
 8012e7e:	d10e      	bne.n	8012e9e <MAP_moveNextBlock_acc+0x5aa>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012e80:	4b5e      	ldr	r3, [pc, #376]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	4618      	mov	r0, r3
 8012e86:	4b5e      	ldr	r3, [pc, #376]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	4a5d      	ldr	r2, [pc, #372]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012e8e:	0143      	lsls	r3, r0, #5
 8012e90:	4413      	add	r3, r2
 8012e92:	440b      	add	r3, r1
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	f003 0308 	and.w	r3, r3, #8
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d112      	bne.n	8012ec4 <MAP_moveNextBlock_acc+0x5d0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012e9e:	4b56      	ldr	r3, [pc, #344]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8012ea2:	2b03      	cmp	r3, #3
 8012ea4:	d123      	bne.n	8012eee <MAP_moveNextBlock_acc+0x5fa>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8012ea6:	4b55      	ldr	r3, [pc, #340]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	4b54      	ldr	r3, [pc, #336]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	4a54      	ldr	r2, [pc, #336]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012eb4:	0143      	lsls	r3, r0, #5
 8012eb6:	4413      	add	r3, r2
 8012eb8:	440b      	add	r3, r1
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	f003 0301 	and.w	r3, r3, #1
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d014      	beq.n	8012eee <MAP_moveNextBlock_acc+0x5fa>
						MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8012ec4:	eddf 0a52 	vldr	s1, [pc, #328]	; 8013010 <MAP_moveNextBlock_acc+0x71c>
 8012ec8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012ecc:	f7f8 fd3c 	bl	800b948 <MOT_goBlock_FinSpeed>
						MOT_turn(MOT_L90);					// 右90度旋回
 8012ed0:	2001      	movs	r0, #1
 8012ed2:	f7f8 fea1 	bl	800bc18 <MOT_turn>
						uc_SlaCnt = 0;
 8012ed6:	4b4c      	ldr	r3, [pc, #304]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012ed8:	2200      	movs	r2, #0
 8012eda:	701a      	strb	r2, [r3, #0]
						MOT_goHitBackWall();					// バックする
 8012edc:	f7f9 f9d6 	bl	800c28c <MOT_goHitBackWall>
						f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8012ee0:	4b44      	ldr	r3, [pc, #272]	; (8012ff4 <MAP_moveNextBlock_acc+0x700>)
 8012ee2:	4a4a      	ldr	r2, [pc, #296]	; (801300c <MAP_moveNextBlock_acc+0x718>)
 8012ee4:	601a      	str	r2, [r3, #0]
						*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	701a      	strb	r2, [r3, #0]
 8012eec:	e07e      	b.n	8012fec <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f7f0 f888 	bl	8003004 <PARAM_getSra>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	2001      	movs	r0, #1
 8012efa:	f7f9 fa19 	bl	800c330 <MOT_goSla>
						uc_SlaCnt++;
 8012efe:	4b42      	ldr	r3, [pc, #264]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	3301      	adds	r3, #1
 8012f04:	b2da      	uxtb	r2, r3
 8012f06:	4b40      	ldr	r3, [pc, #256]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012f08:	701a      	strb	r2, [r3, #0]
		break;
 8012f0a:	e2be      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012f0c:	4b3a      	ldr	r3, [pc, #232]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10e      	bne.n	8012f32 <MAP_moveNextBlock_acc+0x63e>
 8012f14:	4b39      	ldr	r3, [pc, #228]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	4b39      	ldr	r3, [pc, #228]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	4a38      	ldr	r2, [pc, #224]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012f22:	0143      	lsls	r3, r0, #5
 8012f24:	4413      	add	r3, r2
 8012f26:	440b      	add	r3, r1
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d138      	bne.n	8012fa4 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012f32:	4b31      	ldr	r3, [pc, #196]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012f34:	781b      	ldrb	r3, [r3, #0]
					if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d10e      	bne.n	8012f58 <MAP_moveNextBlock_acc+0x664>
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012f3a:	4b30      	ldr	r3, [pc, #192]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	4b2f      	ldr	r3, [pc, #188]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	4619      	mov	r1, r3
 8012f46:	4a2f      	ldr	r2, [pc, #188]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012f48:	0143      	lsls	r3, r0, #5
 8012f4a:	4413      	add	r3, r2
 8012f4c:	440b      	add	r3, r1
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	f003 0302 	and.w	r3, r3, #2
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d125      	bne.n	8012fa4 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012f58:	4b27      	ldr	r3, [pc, #156]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012f5a:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8012f5c:	2b02      	cmp	r3, #2
 8012f5e:	d10e      	bne.n	8012f7e <MAP_moveNextBlock_acc+0x68a>
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012f60:	4b26      	ldr	r3, [pc, #152]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	4618      	mov	r0, r3
 8012f66:	4b26      	ldr	r3, [pc, #152]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	4a25      	ldr	r2, [pc, #148]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012f6e:	0143      	lsls	r3, r0, #5
 8012f70:	4413      	add	r3, r2
 8012f72:	440b      	add	r3, r1
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	f003 0304 	and.w	r3, r3, #4
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d112      	bne.n	8012fa4 <MAP_moveNextBlock_acc+0x6b0>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012f7e:	4b1e      	ldr	r3, [pc, #120]	; (8012ff8 <MAP_moveNextBlock_acc+0x704>)
 8012f80:	781b      	ldrb	r3, [r3, #0]
						( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 8012f82:	2b03      	cmp	r3, #3
 8012f84:	d123      	bne.n	8012fce <MAP_moveNextBlock_acc+0x6da>
						( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 8012f86:	4b1d      	ldr	r3, [pc, #116]	; (8012ffc <MAP_moveNextBlock_acc+0x708>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	4b1c      	ldr	r3, [pc, #112]	; (8013000 <MAP_moveNextBlock_acc+0x70c>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	4619      	mov	r1, r3
 8012f92:	4a1c      	ldr	r2, [pc, #112]	; (8013004 <MAP_moveNextBlock_acc+0x710>)
 8012f94:	0143      	lsls	r3, r0, #5
 8012f96:	4413      	add	r3, r2
 8012f98:	440b      	add	r3, r1
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	f003 0308 	and.w	r3, r3, #8
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d014      	beq.n	8012fce <MAP_moveNextBlock_acc+0x6da>
						MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8012fa4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8013010 <MAP_moveNextBlock_acc+0x71c>
 8012fa8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012fac:	f7f8 fccc 	bl	800b948 <MOT_goBlock_FinSpeed>
						LL_mDelay(100);
 8012fb0:	2064      	movs	r0, #100	; 0x64
 8012fb2:	f002 fccd 	bl	8015950 <LL_mDelay>
						DIST_Front_Wall_correction();
 8012fb6:	f7f9 fe5b 	bl	800cc70 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);						// 右90度旋回
 8012fba:	2001      	movs	r0, #1
 8012fbc:	f7f8 fe2c 	bl	800bc18 <MOT_turn>
						uc_SlaCnt = 0;
 8012fc0:	4b11      	ldr	r3, [pc, #68]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	701a      	strb	r2, [r3, #0]
						*p_type = TRUE;								// 次は半区間＋バック分進める
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	701a      	strb	r2, [r3, #0]
 8012fcc:	e00e      	b.n	8012fec <MAP_moveNextBlock_acc+0x6f8>
						MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8012fce:	2000      	movs	r0, #0
 8012fd0:	f7f0 f818 	bl	8003004 <PARAM_getSra>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	2000      	movs	r0, #0
 8012fda:	f7f9 f9a9 	bl	800c330 <MOT_goSla>
						uc_SlaCnt++;
 8012fde:	4b0a      	ldr	r3, [pc, #40]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	b2da      	uxtb	r2, r3
 8012fe6:	4b08      	ldr	r3, [pc, #32]	; (8013008 <MAP_moveNextBlock_acc+0x714>)
 8012fe8:	701a      	strb	r2, [r3, #0]
		break;
 8012fea:	e24e      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
 8012fec:	e24d      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
 8012fee:	bf00      	nop
 8012ff0:	200002a9 	.word	0x200002a9
 8012ff4:	2000e600 	.word	0x2000e600
 8012ff8:	2000e604 	.word	0x2000e604
 8012ffc:	2000e5fd 	.word	0x2000e5fd
 8013000:	2000e607 	.word	0x2000e607
 8013004:	20000708 	.word	0x20000708
 8013008:	200002c6 	.word	0x200002c6
 801300c:	3e6b851f 	.word	0x3e6b851f
 8013010:	00000000 	.word	0x00000000

		/* 反転して戻る */
	case SOUTH:
//		LED = LED_ALL_ON;
		MOT_goBlock_FinSpeed(0.5, 0);			// 半区画前進
 8013014:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 8013010 <MAP_moveNextBlock_acc+0x71c>
 8013018:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801301c:	f7f8 fc94 	bl	800b948 <MOT_goBlock_FinSpeed>
		if(wall_hit_flag == 0){
 8013020:	4b86      	ldr	r3, [pc, #536]	; (801323c <MAP_moveNextBlock_acc+0x948>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d15a      	bne.n	80130de <MAP_moveNextBlock_acc+0x7ea>
			MOT_turn(MOT_R180);									// 右180度旋回
 8013028:	2002      	movs	r0, #2
 801302a:	f7f8 fdf5 	bl	800bc18 <MOT_turn>
			uc_SlaCnt = 0;
 801302e:	4b84      	ldr	r3, [pc, #528]	; (8013240 <MAP_moveNextBlock_acc+0x94c>)
 8013030:	2200      	movs	r2, #0
 8013032:	701a      	strb	r2, [r3, #0]

			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8013034:	4b83      	ldr	r3, [pc, #524]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d10e      	bne.n	801305a <MAP_moveNextBlock_acc+0x766>
 801303c:	4b82      	ldr	r3, [pc, #520]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	4618      	mov	r0, r3
 8013042:	4b82      	ldr	r3, [pc, #520]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	4619      	mov	r1, r3
 8013048:	4a81      	ldr	r2, [pc, #516]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 801304a:	0143      	lsls	r3, r0, #5
 801304c:	4413      	add	r3, r2
 801304e:	440b      	add	r3, r1
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	f003 0301 	and.w	r3, r3, #1
 8013056:	2b00      	cmp	r3, #0
 8013058:	d138      	bne.n	80130cc <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801305a:	4b7a      	ldr	r3, [pc, #488]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 801305c:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 801305e:	2b01      	cmp	r3, #1
 8013060:	d10e      	bne.n	8013080 <MAP_moveNextBlock_acc+0x78c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013062:	4b79      	ldr	r3, [pc, #484]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	4618      	mov	r0, r3
 8013068:	4b78      	ldr	r3, [pc, #480]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	4619      	mov	r1, r3
 801306e:	4a78      	ldr	r2, [pc, #480]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 8013070:	0143      	lsls	r3, r0, #5
 8013072:	4413      	add	r3, r2
 8013074:	440b      	add	r3, r1
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	f003 0302 	and.w	r3, r3, #2
 801307c:	2b00      	cmp	r3, #0
 801307e:	d125      	bne.n	80130cc <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013080:	4b70      	ldr	r3, [pc, #448]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 8013082:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013084:	2b02      	cmp	r3, #2
 8013086:	d10e      	bne.n	80130a6 <MAP_moveNextBlock_acc+0x7b2>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013088:	4b6f      	ldr	r3, [pc, #444]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	4618      	mov	r0, r3
 801308e:	4b6f      	ldr	r3, [pc, #444]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	4619      	mov	r1, r3
 8013094:	4a6e      	ldr	r2, [pc, #440]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 8013096:	0143      	lsls	r3, r0, #5
 8013098:	4413      	add	r3, r2
 801309a:	440b      	add	r3, r1
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 0304 	and.w	r3, r3, #4
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d112      	bne.n	80130cc <MAP_moveNextBlock_acc+0x7d8>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80130a6:	4b67      	ldr	r3, [pc, #412]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 80130a8:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 80130aa:	2b03      	cmp	r3, #3
 80130ac:	d113      	bne.n	80130d6 <MAP_moveNextBlock_acc+0x7e2>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 80130ae:	4b66      	ldr	r3, [pc, #408]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	4618      	mov	r0, r3
 80130b4:	4b65      	ldr	r3, [pc, #404]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	4619      	mov	r1, r3
 80130ba:	4a65      	ldr	r2, [pc, #404]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 80130bc:	0143      	lsls	r3, r0, #5
 80130be:	4413      	add	r3, r2
 80130c0:	440b      	add	r3, r1
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 0308 	and.w	r3, r3, #8
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d004      	beq.n	80130d6 <MAP_moveNextBlock_acc+0x7e2>
				) {
				MOT_goHitBackWall();					// バックする
 80130cc:	f7f9 f8de 	bl	800c28c <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;	// バックした分の移動距離[区画]を加算
 80130d0:	4b60      	ldr	r3, [pc, #384]	; (8013254 <MAP_moveNextBlock_acc+0x960>)
 80130d2:	4a61      	ldr	r2, [pc, #388]	; (8013258 <MAP_moveNextBlock_acc+0x964>)
 80130d4:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	2201      	movs	r2, #1
 80130da:	701a      	strb	r2, [r3, #0]
				}
				
				*p_type = TRUE;								// 次は半区間＋バック分進める
			}
		}
		break;
 80130dc:	e1d5      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
			uc_SlaCnt = 0;
 80130de:	4b58      	ldr	r3, [pc, #352]	; (8013240 <MAP_moveNextBlock_acc+0x94c>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	701a      	strb	r2, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 80130e4:	4b57      	ldr	r3, [pc, #348]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d10e      	bne.n	801310a <MAP_moveNextBlock_acc+0x816>
 80130ec:	4b56      	ldr	r3, [pc, #344]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	4618      	mov	r0, r3
 80130f2:	4b56      	ldr	r3, [pc, #344]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	4619      	mov	r1, r3
 80130f8:	4a55      	ldr	r2, [pc, #340]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 80130fa:	0143      	lsls	r3, r0, #5
 80130fc:	4413      	add	r3, r2
 80130fe:	440b      	add	r3, r1
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	f003 0301 	and.w	r3, r3, #1
 8013106:	2b00      	cmp	r3, #0
 8013108:	d13a      	bne.n	8013180 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801310a:	4b4e      	ldr	r3, [pc, #312]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 801310c:	781b      	ldrb	r3, [r3, #0]
			if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 801310e:	2b01      	cmp	r3, #1
 8013110:	d10e      	bne.n	8013130 <MAP_moveNextBlock_acc+0x83c>
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013112:	4b4d      	ldr	r3, [pc, #308]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	4618      	mov	r0, r3
 8013118:	4b4c      	ldr	r3, [pc, #304]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	4619      	mov	r1, r3
 801311e:	4a4c      	ldr	r2, [pc, #304]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 8013120:	0143      	lsls	r3, r0, #5
 8013122:	4413      	add	r3, r2
 8013124:	440b      	add	r3, r1
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f003 0302 	and.w	r3, r3, #2
 801312c:	2b00      	cmp	r3, #0
 801312e:	d127      	bne.n	8013180 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013130:	4b44      	ldr	r3, [pc, #272]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 8013132:	781b      	ldrb	r3, [r3, #0]
				((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8013134:	2b02      	cmp	r3, #2
 8013136:	d10e      	bne.n	8013156 <MAP_moveNextBlock_acc+0x862>
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8013138:	4b43      	ldr	r3, [pc, #268]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	4618      	mov	r0, r3
 801313e:	4b43      	ldr	r3, [pc, #268]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	4619      	mov	r1, r3
 8013144:	4a42      	ldr	r2, [pc, #264]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 8013146:	0143      	lsls	r3, r0, #5
 8013148:	4413      	add	r3, r2
 801314a:	440b      	add	r3, r1
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	f003 0304 	and.w	r3, r3, #4
 8013152:	2b00      	cmp	r3, #0
 8013154:	d114      	bne.n	8013180 <MAP_moveNextBlock_acc+0x88c>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013156:	4b3b      	ldr	r3, [pc, #236]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 8013158:	781b      	ldrb	r3, [r3, #0]
				((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 801315a:	2b03      	cmp	r3, #3
 801315c:	f040 80dd 	bne.w	801331a <MAP_moveNextBlock_acc+0xa26>
				((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8013160:	4b39      	ldr	r3, [pc, #228]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	4618      	mov	r0, r3
 8013166:	4b39      	ldr	r3, [pc, #228]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	4619      	mov	r1, r3
 801316c:	4a38      	ldr	r2, [pc, #224]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 801316e:	0143      	lsls	r3, r0, #5
 8013170:	4413      	add	r3, r2
 8013172:	440b      	add	r3, r1
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	f003 0308 	and.w	r3, r3, #8
 801317a:	2b00      	cmp	r3, #0
 801317c:	f000 80cd 	beq.w	801331a <MAP_moveNextBlock_acc+0xa26>
					LL_mDelay(100);
 8013180:	2064      	movs	r0, #100	; 0x64
 8013182:	f002 fbe5 	bl	8015950 <LL_mDelay>
					DIST_Front_Wall_correction();
 8013186:	f7f9 fd73 	bl	800cc70 <DIST_Front_Wall_correction>
					if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 801318a:	4b2e      	ldr	r3, [pc, #184]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d10e      	bne.n	80131b0 <MAP_moveNextBlock_acc+0x8bc>
 8013192:	4b2d      	ldr	r3, [pc, #180]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	4618      	mov	r0, r3
 8013198:	4b2c      	ldr	r3, [pc, #176]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	4619      	mov	r1, r3
 801319e:	4a2c      	ldr	r2, [pc, #176]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 80131a0:	0143      	lsls	r3, r0, #5
 80131a2:	4413      	add	r3, r2
 80131a4:	440b      	add	r3, r1
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	f003 0302 	and.w	r3, r3, #2
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d138      	bne.n	8013222 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80131b0:	4b24      	ldr	r3, [pc, #144]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
					if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d10e      	bne.n	80131d6 <MAP_moveNextBlock_acc+0x8e2>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80131b8:	4b23      	ldr	r3, [pc, #140]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	4618      	mov	r0, r3
 80131be:	4b23      	ldr	r3, [pc, #140]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	4619      	mov	r1, r3
 80131c4:	4a22      	ldr	r2, [pc, #136]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 80131c6:	0143      	lsls	r3, r0, #5
 80131c8:	4413      	add	r3, r2
 80131ca:	440b      	add	r3, r1
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	f003 0304 	and.w	r3, r3, #4
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d125      	bne.n	8013222 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80131d6:	4b1b      	ldr	r3, [pc, #108]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 80131d8:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 80131da:	2b02      	cmp	r3, #2
 80131dc:	d10e      	bne.n	80131fc <MAP_moveNextBlock_acc+0x908>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 80131de:	4b1a      	ldr	r3, [pc, #104]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	4618      	mov	r0, r3
 80131e4:	4b19      	ldr	r3, [pc, #100]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	4619      	mov	r1, r3
 80131ea:	4a19      	ldr	r2, [pc, #100]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 80131ec:	0143      	lsls	r3, r0, #5
 80131ee:	4413      	add	r3, r2
 80131f0:	440b      	add	r3, r1
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	f003 0308 	and.w	r3, r3, #8
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d112      	bne.n	8013222 <MAP_moveNextBlock_acc+0x92e>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 80131fc:	4b11      	ldr	r3, [pc, #68]	; (8013244 <MAP_moveNextBlock_acc+0x950>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013200:	2b03      	cmp	r3, #3
 8013202:	d12b      	bne.n	801325c <MAP_moveNextBlock_acc+0x968>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013204:	4b10      	ldr	r3, [pc, #64]	; (8013248 <MAP_moveNextBlock_acc+0x954>)
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	4618      	mov	r0, r3
 801320a:	4b10      	ldr	r3, [pc, #64]	; (801324c <MAP_moveNextBlock_acc+0x958>)
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	4619      	mov	r1, r3
 8013210:	4a0f      	ldr	r2, [pc, #60]	; (8013250 <MAP_moveNextBlock_acc+0x95c>)
 8013212:	0143      	lsls	r3, r0, #5
 8013214:	4413      	add	r3, r2
 8013216:	440b      	add	r3, r1
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	f003 0301 	and.w	r3, r3, #1
 801321e:	2b00      	cmp	r3, #0
 8013220:	d01c      	beq.n	801325c <MAP_moveNextBlock_acc+0x968>
						MOT_turn(MOT_R90);									// 右90度旋回
 8013222:	2000      	movs	r0, #0
 8013224:	f7f8 fcf8 	bl	800bc18 <MOT_turn>
						LL_mDelay(100);
 8013228:	2064      	movs	r0, #100	; 0x64
 801322a:	f002 fb91 	bl	8015950 <LL_mDelay>
						DIST_Front_Wall_correction();
 801322e:	f7f9 fd1f 	bl	800cc70 <DIST_Front_Wall_correction>
						MOT_turn(MOT_R90);									// 右90度旋回
 8013232:	2000      	movs	r0, #0
 8013234:	f7f8 fcf0 	bl	800bc18 <MOT_turn>
 8013238:	e06b      	b.n	8013312 <MAP_moveNextBlock_acc+0xa1e>
 801323a:	bf00      	nop
 801323c:	200002a9 	.word	0x200002a9
 8013240:	200002c6 	.word	0x200002c6
 8013244:	2000e604 	.word	0x2000e604
 8013248:	2000e5fd 	.word	0x2000e5fd
 801324c:	2000e607 	.word	0x2000e607
 8013250:	20000708 	.word	0x20000708
 8013254:	2000e600 	.word	0x2000e600
 8013258:	3e6b851f 	.word	0x3e6b851f
					}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 801325c:	4b92      	ldr	r3, [pc, #584]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10e      	bne.n	8013282 <MAP_moveNextBlock_acc+0x98e>
 8013264:	4b91      	ldr	r3, [pc, #580]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	4618      	mov	r0, r3
 801326a:	4b91      	ldr	r3, [pc, #580]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	4619      	mov	r1, r3
 8013270:	4a90      	ldr	r2, [pc, #576]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013272:	0143      	lsls	r3, r0, #5
 8013274:	4413      	add	r3, r2
 8013276:	440b      	add	r3, r1
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	f003 0308 	and.w	r3, r3, #8
 801327e:	2b00      	cmp	r3, #0
 8013280:	d138      	bne.n	80132f4 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 8013282:	4b89      	ldr	r3, [pc, #548]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 8013284:	781b      	ldrb	r3, [r3, #0]
					}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 8013286:	2b01      	cmp	r3, #1
 8013288:	d10e      	bne.n	80132a8 <MAP_moveNextBlock_acc+0x9b4>
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 801328a:	4b88      	ldr	r3, [pc, #544]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	4618      	mov	r0, r3
 8013290:	4b87      	ldr	r3, [pc, #540]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	4619      	mov	r1, r3
 8013296:	4a87      	ldr	r2, [pc, #540]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013298:	0143      	lsls	r3, r0, #5
 801329a:	4413      	add	r3, r2
 801329c:	440b      	add	r3, r1
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	f003 0301 	and.w	r3, r3, #1
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d125      	bne.n	80132f4 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80132a8:	4b7f      	ldr	r3, [pc, #508]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
						((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d10e      	bne.n	80132ce <MAP_moveNextBlock_acc+0x9da>
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80132b0:	4b7e      	ldr	r3, [pc, #504]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	4618      	mov	r0, r3
 80132b6:	4b7e      	ldr	r3, [pc, #504]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	4619      	mov	r1, r3
 80132bc:	4a7d      	ldr	r2, [pc, #500]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 80132be:	0143      	lsls	r3, r0, #5
 80132c0:	4413      	add	r3, r2
 80132c2:	440b      	add	r3, r1
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	f003 0302 	and.w	r3, r3, #2
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d112      	bne.n	80132f4 <MAP_moveNextBlock_acc+0xa00>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 80132ce:	4b76      	ldr	r3, [pc, #472]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
						((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 80132d2:	2b03      	cmp	r3, #3
 80132d4:	d11a      	bne.n	801330c <MAP_moveNextBlock_acc+0xa18>
						((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 80132d6:	4b75      	ldr	r3, [pc, #468]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	4618      	mov	r0, r3
 80132dc:	4b74      	ldr	r3, [pc, #464]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	4619      	mov	r1, r3
 80132e2:	4a74      	ldr	r2, [pc, #464]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 80132e4:	0143      	lsls	r3, r0, #5
 80132e6:	4413      	add	r3, r2
 80132e8:	440b      	add	r3, r1
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	f003 0304 	and.w	r3, r3, #4
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00b      	beq.n	801330c <MAP_moveNextBlock_acc+0xa18>
						MOT_turn(MOT_L90);									// 右90度旋回
 80132f4:	2001      	movs	r0, #1
 80132f6:	f7f8 fc8f 	bl	800bc18 <MOT_turn>
						LL_mDelay(100);
 80132fa:	2064      	movs	r0, #100	; 0x64
 80132fc:	f002 fb28 	bl	8015950 <LL_mDelay>
						DIST_Front_Wall_correction();
 8013300:	f7f9 fcb6 	bl	800cc70 <DIST_Front_Wall_correction>
						MOT_turn(MOT_L90);									// 右90度旋回
 8013304:	2001      	movs	r0, #1
 8013306:	f7f8 fc87 	bl	800bc18 <MOT_turn>
 801330a:	e002      	b.n	8013312 <MAP_moveNextBlock_acc+0xa1e>
						MOT_turn(MOT_R180);
 801330c:	2002      	movs	r0, #2
 801330e:	f7f8 fc83 	bl	800bc18 <MOT_turn>
					*p_type = TRUE;								// 次は半区間＋バック分進める
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	2201      	movs	r2, #1
 8013316:	701a      	strb	r2, [r3, #0]
		break;
 8013318:	e0b7      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>
				if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 801331a:	4b63      	ldr	r3, [pc, #396]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10e      	bne.n	8013340 <MAP_moveNextBlock_acc+0xa4c>
 8013322:	4b62      	ldr	r3, [pc, #392]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	4618      	mov	r0, r3
 8013328:	4b61      	ldr	r3, [pc, #388]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	4619      	mov	r1, r3
 801332e:	4a61      	ldr	r2, [pc, #388]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013330:	0143      	lsls	r3, r0, #5
 8013332:	4413      	add	r3, r2
 8013334:	440b      	add	r3, r1
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 0302 	and.w	r3, r3, #2
 801333c:	2b00      	cmp	r3, #0
 801333e:	d138      	bne.n	80133b2 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013340:	4b59      	ldr	r3, [pc, #356]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 8013342:	781b      	ldrb	r3, [r3, #0]
				if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 北を向いていて東に壁がある
 8013344:	2b01      	cmp	r3, #1
 8013346:	d10e      	bne.n	8013366 <MAP_moveNextBlock_acc+0xa72>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 8013348:	4b58      	ldr	r3, [pc, #352]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	4618      	mov	r0, r3
 801334e:	4b58      	ldr	r3, [pc, #352]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	4619      	mov	r1, r3
 8013354:	4a57      	ldr	r2, [pc, #348]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013356:	0143      	lsls	r3, r0, #5
 8013358:	4413      	add	r3, r2
 801335a:	440b      	add	r3, r1
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	f003 0304 	and.w	r3, r3, #4
 8013362:	2b00      	cmp	r3, #0
 8013364:	d125      	bne.n	80133b2 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013366:	4b50      	ldr	r3, [pc, #320]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 8013368:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 東を向いていて南に壁がある
 801336a:	2b02      	cmp	r3, #2
 801336c:	d10e      	bne.n	801338c <MAP_moveNextBlock_acc+0xa98>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 801336e:	4b4f      	ldr	r3, [pc, #316]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	4618      	mov	r0, r3
 8013374:	4b4e      	ldr	r3, [pc, #312]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	4619      	mov	r1, r3
 801337a:	4a4e      	ldr	r2, [pc, #312]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 801337c:	0143      	lsls	r3, r0, #5
 801337e:	4413      	add	r3, r2
 8013380:	440b      	add	r3, r1
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	f003 0308 	and.w	r3, r3, #8
 8013388:	2b00      	cmp	r3, #0
 801338a:	d112      	bne.n	80133b2 <MAP_moveNextBlock_acc+0xabe>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 801338c:	4b46      	ldr	r3, [pc, #280]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801338e:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 南を向いていて西に壁がある
 8013390:	2b03      	cmp	r3, #3
 8013392:	d11a      	bne.n	80133ca <MAP_moveNextBlock_acc+0xad6>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x01) != 0)) 			// 西を向いていて北に壁がある
 8013394:	4b45      	ldr	r3, [pc, #276]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	4618      	mov	r0, r3
 801339a:	4b45      	ldr	r3, [pc, #276]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	4619      	mov	r1, r3
 80133a0:	4a44      	ldr	r2, [pc, #272]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 80133a2:	0143      	lsls	r3, r0, #5
 80133a4:	4413      	add	r3, r2
 80133a6:	440b      	add	r3, r1
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	f003 0301 	and.w	r3, r3, #1
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d00b      	beq.n	80133ca <MAP_moveNextBlock_acc+0xad6>
					MOT_turn(MOT_R90);									// 右90度旋回
 80133b2:	2000      	movs	r0, #0
 80133b4:	f7f8 fc30 	bl	800bc18 <MOT_turn>
					LL_mDelay(100);
 80133b8:	2064      	movs	r0, #100	; 0x64
 80133ba:	f002 fac9 	bl	8015950 <LL_mDelay>
					DIST_Front_Wall_correction();
 80133be:	f7f9 fc57 	bl	800cc70 <DIST_Front_Wall_correction>
					MOT_turn(MOT_R90);									// 右90度旋回
 80133c2:	2000      	movs	r0, #0
 80133c4:	f7f8 fc28 	bl	800bc18 <MOT_turn>
 80133c8:	e05a      	b.n	8013480 <MAP_moveNextBlock_acc+0xb8c>
				}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80133ca:	4b37      	ldr	r3, [pc, #220]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d10e      	bne.n	80133f0 <MAP_moveNextBlock_acc+0xafc>
 80133d2:	4b36      	ldr	r3, [pc, #216]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	4618      	mov	r0, r3
 80133d8:	4b35      	ldr	r3, [pc, #212]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	4619      	mov	r1, r3
 80133de:	4a35      	ldr	r2, [pc, #212]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 80133e0:	0143      	lsls	r3, r0, #5
 80133e2:	4413      	add	r3, r2
 80133e4:	440b      	add	r3, r1
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	f003 0308 	and.w	r3, r3, #8
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d138      	bne.n	8013462 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80133f0:	4b2d      	ldr	r3, [pc, #180]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 80133f2:	781b      	ldrb	r3, [r3, #0]
				}else if(((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x08) != 0)) ||		// 北を向いていて西に壁がある
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d10e      	bne.n	8013416 <MAP_moveNextBlock_acc+0xb22>
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 80133f8:	4b2c      	ldr	r3, [pc, #176]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	4618      	mov	r0, r3
 80133fe:	4b2c      	ldr	r3, [pc, #176]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	4619      	mov	r1, r3
 8013404:	4a2b      	ldr	r2, [pc, #172]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013406:	0143      	lsls	r3, r0, #5
 8013408:	4413      	add	r3, r2
 801340a:	440b      	add	r3, r1
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d125      	bne.n	8013462 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013416:	4b24      	ldr	r3, [pc, #144]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 8013418:	781b      	ldrb	r3, [r3, #0]
					((en_Head == EAST) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 東を向いていて北に壁がある
 801341a:	2b02      	cmp	r3, #2
 801341c:	d10e      	bne.n	801343c <MAP_moveNextBlock_acc+0xb48>
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 801341e:	4b23      	ldr	r3, [pc, #140]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	4618      	mov	r0, r3
 8013424:	4b22      	ldr	r3, [pc, #136]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	4619      	mov	r1, r3
 801342a:	4a22      	ldr	r2, [pc, #136]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 801342c:	0143      	lsls	r3, r0, #5
 801342e:	4413      	add	r3, r2
 8013430:	440b      	add	r3, r1
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f003 0302 	and.w	r3, r3, #2
 8013438:	2b00      	cmp	r3, #0
 801343a:	d112      	bne.n	8013462 <MAP_moveNextBlock_acc+0xb6e>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 801343c:	4b1a      	ldr	r3, [pc, #104]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801343e:	781b      	ldrb	r3, [r3, #0]
					((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 南を向いていて東に壁がある
 8013440:	2b03      	cmp	r3, #3
 8013442:	d11a      	bne.n	801347a <MAP_moveNextBlock_acc+0xb86>
					((en_Head == WEST) && ((g_sysMap[my][mx] & 0x04) != 0)) 			// 西を向いていて南に壁がある
 8013444:	4b19      	ldr	r3, [pc, #100]	; (80134ac <MAP_moveNextBlock_acc+0xbb8>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	4618      	mov	r0, r3
 801344a:	4b19      	ldr	r3, [pc, #100]	; (80134b0 <MAP_moveNextBlock_acc+0xbbc>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	4619      	mov	r1, r3
 8013450:	4a18      	ldr	r2, [pc, #96]	; (80134b4 <MAP_moveNextBlock_acc+0xbc0>)
 8013452:	0143      	lsls	r3, r0, #5
 8013454:	4413      	add	r3, r2
 8013456:	440b      	add	r3, r1
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	f003 0304 	and.w	r3, r3, #4
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00b      	beq.n	801347a <MAP_moveNextBlock_acc+0xb86>
					MOT_turn(MOT_L90);									// 右90度旋回
 8013462:	2001      	movs	r0, #1
 8013464:	f7f8 fbd8 	bl	800bc18 <MOT_turn>
					LL_mDelay(100);
 8013468:	2064      	movs	r0, #100	; 0x64
 801346a:	f002 fa71 	bl	8015950 <LL_mDelay>
					DIST_Front_Wall_correction();
 801346e:	f7f9 fbff 	bl	800cc70 <DIST_Front_Wall_correction>
					MOT_turn(MOT_L90);									// 右90度旋回
 8013472:	2001      	movs	r0, #1
 8013474:	f7f8 fbd0 	bl	800bc18 <MOT_turn>
 8013478:	e002      	b.n	8013480 <MAP_moveNextBlock_acc+0xb8c>
					MOT_turn(MOT_R180);
 801347a:	2002      	movs	r0, #2
 801347c:	f7f8 fbcc 	bl	800bc18 <MOT_turn>
				*p_type = TRUE;								// 次は半区間＋バック分進める
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	2201      	movs	r2, #1
 8013484:	701a      	strb	r2, [r3, #0]
		break;
 8013486:	e000      	b.n	801348a <MAP_moveNextBlock_acc+0xb96>

	default:
		break;
 8013488:	bf00      	nop
	}

	/* 進行方向更新 */
//	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
	en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + (uint8_t)en_head) & (MAP_HEAD_DIR_MAX - 1));
 801348a:	4b07      	ldr	r3, [pc, #28]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801348c:	781a      	ldrb	r2, [r3, #0]
 801348e:	79fb      	ldrb	r3, [r7, #7]
 8013490:	4413      	add	r3, r2
 8013492:	b2db      	uxtb	r3, r3
 8013494:	f003 0303 	and.w	r3, r3, #3
 8013498:	b2da      	uxtb	r2, r3
 801349a:	4b03      	ldr	r3, [pc, #12]	; (80134a8 <MAP_moveNextBlock_acc+0xbb4>)
 801349c:	701a      	strb	r2, [r3, #0]
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	2000e604 	.word	0x2000e604
 80134ac:	2000e5fd 	.word	0x2000e5fd
 80134b0:	2000e607 	.word	0x2000e607
 80134b4:	20000708 	.word	0x20000708

080134b8 <MAP_searchGoal>:
void MAP_searchGoal(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80134b8:	b590      	push	{r4, r7, lr}
 80134ba:	b087      	sub	sp, #28
 80134bc:	af02      	add	r7, sp, #8
 80134be:	4604      	mov	r4, r0
 80134c0:	4608      	mov	r0, r1
 80134c2:	4611      	mov	r1, r2
 80134c4:	461a      	mov	r2, r3
 80134c6:	4623      	mov	r3, r4
 80134c8:	71fb      	strb	r3, [r7, #7]
 80134ca:	4603      	mov	r3, r0
 80134cc:	71bb      	strb	r3, [r7, #6]
 80134ce:	460b      	mov	r3, r1
 80134d0:	717b      	strb	r3, [r7, #5]
 80134d2:	4613      	mov	r3, r2
 80134d4:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 80134d6:	2300      	movs	r3, #0
 80134d8:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 80134da:	2301      	movs	r3, #1
 80134dc:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 80134de:	4b95      	ldr	r3, [pc, #596]	; (8013734 <MAP_searchGoal+0x27c>)
 80134e0:	2201      	movs	r2, #1
 80134e2:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 80134e4:	793b      	ldrb	r3, [r7, #4]
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d122      	bne.n	8013530 <MAP_searchGoal+0x78>
		uc_goalX = uc_trgX;
 80134ea:	79fb      	ldrb	r3, [r7, #7]
 80134ec:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 80134ee:	79bb      	ldrb	r3, [r7, #6]
 80134f0:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 80134f2:	4b91      	ldr	r3, [pc, #580]	; (8013738 <MAP_searchGoal+0x280>)
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 80134f8:	4b90      	ldr	r3, [pc, #576]	; (801373c <MAP_searchGoal+0x284>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80134fe:	797a      	ldrb	r2, [r7, #5]
 8013500:	79b9      	ldrb	r1, [r7, #6]
 8013502:	79fb      	ldrb	r3, [r7, #7]
 8013504:	4618      	mov	r0, r3
 8013506:	f7fd fee9 	bl	80112dc <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 801350a:	4b8d      	ldr	r3, [pc, #564]	; (8013740 <MAP_searchGoal+0x288>)
 801350c:	781a      	ldrb	r2, [r3, #0]
 801350e:	7bfc      	ldrb	r4, [r7, #15]
 8013510:	7b79      	ldrb	r1, [r7, #13]
 8013512:	7bb8      	ldrb	r0, [r7, #14]
 8013514:	f107 0309 	add.w	r3, r7, #9
 8013518:	9301      	str	r3, [sp, #4]
 801351a:	7bfb      	ldrb	r3, [r7, #15]
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	4623      	mov	r3, r4
 8013520:	f7fc ff16 	bl	8010350 <MAP_searchCmdList>
		uc_trgX = Return_X;
 8013524:	4b87      	ldr	r3, [pc, #540]	; (8013744 <MAP_searchGoal+0x28c>)
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 801352a:	4b87      	ldr	r3, [pc, #540]	; (8013748 <MAP_searchGoal+0x290>)
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8013530:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801374c <MAP_searchGoal+0x294>
 8013534:	f7f8 fe84 	bl	800c240 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 8013538:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8013750 <MAP_searchGoal+0x298>
 801353c:	f7f8 fe96 	bl	800c26c <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8013540:	4b84      	ldr	r3, [pc, #528]	; (8013754 <MAP_searchGoal+0x29c>)
 8013542:	f04f 0200 	mov.w	r2, #0
 8013546:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8013548:	4b83      	ldr	r3, [pc, #524]	; (8013758 <MAP_searchGoal+0x2a0>)
 801354a:	2200      	movs	r2, #0
 801354c:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 801354e:	4b83      	ldr	r3, [pc, #524]	; (801375c <MAP_searchGoal+0x2a4>)
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	79fa      	ldrb	r2, [r7, #7]
 8013554:	429a      	cmp	r2, r3
 8013556:	d107      	bne.n	8013568 <MAP_searchGoal+0xb0>
 8013558:	4b81      	ldr	r3, [pc, #516]	; (8013760 <MAP_searchGoal+0x2a8>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	79ba      	ldrb	r2, [r7, #6]
 801355e:	429a      	cmp	r2, r3
 8013560:	d102      	bne.n	8013568 <MAP_searchGoal+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 8013562:	4b7c      	ldr	r3, [pc, #496]	; (8013754 <MAP_searchGoal+0x29c>)
 8013564:	4a7f      	ldr	r2, [pc, #508]	; (8013764 <MAP_searchGoal+0x2ac>)
 8013566:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 8013568:	f7f5 fb7c 	bl	8008c64 <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 801356c:	4b74      	ldr	r3, [pc, #464]	; (8013740 <MAP_searchGoal+0x288>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	4618      	mov	r0, r3
 8013572:	f7fe fb8f 	bl	8011c94 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 8013576:	793b      	ldrb	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d132      	bne.n	80135e2 <MAP_searchGoal+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801357c:	797a      	ldrb	r2, [r7, #5]
 801357e:	79b9      	ldrb	r1, [r7, #6]
 8013580:	79fb      	ldrb	r3, [r7, #7]
 8013582:	4618      	mov	r0, r3
 8013584:	f7fd feaa 	bl	80112dc <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8013588:	7abb      	ldrb	r3, [r7, #10]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00c      	beq.n	80135a8 <MAP_searchGoal+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801358e:	4b71      	ldr	r3, [pc, #452]	; (8013754 <MAP_searchGoal+0x29c>)
 8013590:	edd3 7a00 	vldr	s15, [r3]
 8013594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013598:	ee77 7a87 	vadd.f32	s15, s15, s14
 801359c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 801374c <MAP_searchGoal+0x294>
 80135a0:	eeb0 0a67 	vmov.f32	s0, s15
 80135a4:	f7f8 f9d0 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 80135a8:	f7fd fd94 	bl	80110d4 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80135ac:	f107 030b 	add.w	r3, r7, #11
 80135b0:	4619      	mov	r1, r3
 80135b2:	2000      	movs	r0, #0
 80135b4:	f7fe fa62 	bl	8011a7c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80135b8:	4b5f      	ldr	r3, [pc, #380]	; (8013738 <MAP_searchGoal+0x280>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	79fa      	ldrb	r2, [r7, #7]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d107      	bne.n	80135d2 <MAP_searchGoal+0x11a>
 80135c2:	4b5e      	ldr	r3, [pc, #376]	; (801373c <MAP_searchGoal+0x284>)
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	79ba      	ldrb	r2, [r7, #6]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d102      	bne.n	80135d2 <MAP_searchGoal+0x11a>
				MAP_actGoal();										// ゴール時の動作
 80135cc:	f7fe feca 	bl	8012364 <MAP_actGoal>
				break;
 80135d0:	e0a4      	b.n	801371c <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80135d2:	7afb      	ldrb	r3, [r7, #11]
 80135d4:	f107 020a 	add.w	r2, r7, #10
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fe fb96 	bl	8011d0c <MAP_moveNextBlock>
 80135e0:	e081      	b.n	80136e6 <MAP_searchGoal+0x22e>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 80135e2:	793b      	ldrb	r3, [r7, #4]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d132      	bne.n	801364e <MAP_searchGoal+0x196>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80135e8:	797a      	ldrb	r2, [r7, #5]
 80135ea:	79b9      	ldrb	r1, [r7, #6]
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fd fe74 	bl	80112dc <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 80135f4:	7abb      	ldrb	r3, [r7, #10]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00c      	beq.n	8013614 <MAP_searchGoal+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80135fa:	4b56      	ldr	r3, [pc, #344]	; (8013754 <MAP_searchGoal+0x29c>)
 80135fc:	edd3 7a00 	vldr	s15, [r3]
 8013600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013608:	eddf 0a50 	vldr	s1, [pc, #320]	; 801374c <MAP_searchGoal+0x294>
 801360c:	eeb0 0a67 	vmov.f32	s0, s15
 8013610:	f7f8 f99a 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 8013614:	f7fd fd5e 	bl	80110d4 <MAP_makeMapData>
			
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);				// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8013618:	f107 030b 	add.w	r3, r7, #11
 801361c:	4619      	mov	r1, r3
 801361e:	2000      	movs	r0, #0
 8013620:	f7fe fa2c 	bl	8011a7c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8013624:	4b44      	ldr	r3, [pc, #272]	; (8013738 <MAP_searchGoal+0x280>)
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	79fa      	ldrb	r2, [r7, #7]
 801362a:	429a      	cmp	r2, r3
 801362c:	d107      	bne.n	801363e <MAP_searchGoal+0x186>
 801362e:	4b43      	ldr	r3, [pc, #268]	; (801373c <MAP_searchGoal+0x284>)
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	79ba      	ldrb	r2, [r7, #6]
 8013634:	429a      	cmp	r2, r3
 8013636:	d102      	bne.n	801363e <MAP_searchGoal+0x186>
				MAP_actGoal();										// ゴール時の動作
 8013638:	f7fe fe94 	bl	8012364 <MAP_actGoal>
				break;
 801363c:	e06e      	b.n	801371c <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動						← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 801363e:	7afb      	ldrb	r3, [r7, #11]
 8013640:	f107 010a 	add.w	r1, r7, #10
 8013644:	2200      	movs	r2, #0
 8013646:	4618      	mov	r0, r3
 8013648:	f7fe fc12 	bl	8011e70 <MAP_moveNextBlock_Sura>
 801364c:	e04b      	b.n	80136e6 <MAP_searchGoal+0x22e>
//				MAP_moveNextBlock_acc(en_head, &bl_type);
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 801364e:	793b      	ldrb	r3, [r7, #4]
 8013650:	2b03      	cmp	r3, #3
 8013652:	d148      	bne.n	80136e6 <MAP_searchGoal+0x22e>
			
			if( TRUE == bl_type ){
 8013654:	7abb      	ldrb	r3, [r7, #10]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00c      	beq.n	8013674 <MAP_searchGoal+0x1bc>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801365a:	4b3e      	ldr	r3, [pc, #248]	; (8013754 <MAP_searchGoal+0x29c>)
 801365c:	edd3 7a00 	vldr	s15, [r3]
 8013660:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013664:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013668:	eddf 0a38 	vldr	s1, [pc, #224]	; 801374c <MAP_searchGoal+0x294>
 801366c:	eeb0 0a67 	vmov.f32	s0, s15
 8013670:	f7f8 f96a 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 8013674:	f7fd fd2e 	bl	80110d4 <MAP_makeMapData>
						
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 8013678:	7b7a      	ldrb	r2, [r7, #13]
 801367a:	7bbb      	ldrb	r3, [r7, #14]
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe ff00 	bl	8012484 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8013684:	4b2e      	ldr	r3, [pc, #184]	; (8013740 <MAP_searchGoal+0x288>)
 8013686:	781a      	ldrb	r2, [r3, #0]
 8013688:	7bfc      	ldrb	r4, [r7, #15]
 801368a:	7b79      	ldrb	r1, [r7, #13]
 801368c:	7bb8      	ldrb	r0, [r7, #14]
 801368e:	f107 0309 	add.w	r3, r7, #9
 8013692:	9301      	str	r3, [sp, #4]
 8013694:	7bfb      	ldrb	r3, [r7, #15]
 8013696:	9300      	str	r3, [sp, #0]
 8013698:	4623      	mov	r3, r4
 801369a:	f7fc fe59 	bl	8010350 <MAP_searchCmdList>
			uc_trgX = Return_X;
 801369e:	4b29      	ldr	r3, [pc, #164]	; (8013744 <MAP_searchGoal+0x28c>)
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80136a4:	4b28      	ldr	r3, [pc, #160]	; (8013748 <MAP_searchGoal+0x290>)
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80136aa:	797a      	ldrb	r2, [r7, #5]
 80136ac:	79b9      	ldrb	r1, [r7, #6]
 80136ae:	79fb      	ldrb	r3, [r7, #7]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fd fe13 	bl	80112dc <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80136b6:	f107 030b 	add.w	r3, r7, #11
 80136ba:	4619      	mov	r1, r3
 80136bc:	2000      	movs	r0, #0
 80136be:	f7fe f9dd 	bl	8011a7c <MAP_calcMouseDir>
			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 80136c2:	4b1d      	ldr	r3, [pc, #116]	; (8013738 <MAP_searchGoal+0x280>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d106      	bne.n	80136d8 <MAP_searchGoal+0x220>
 80136ca:	4b1c      	ldr	r3, [pc, #112]	; (801373c <MAP_searchGoal+0x284>)
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d102      	bne.n	80136d8 <MAP_searchGoal+0x220>
				MAP_actGoal();
 80136d2:	f7fe fe47 	bl	8012364 <MAP_actGoal>
				break;
 80136d6:	e021      	b.n	801371c <MAP_searchGoal+0x264>
			}
//			}
			else {
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE);	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80136d8:	7afb      	ldrb	r3, [r7, #11]
 80136da:	f107 010a 	add.w	r1, r7, #10
 80136de:	2200      	movs	r2, #0
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fe fbc5 	bl	8011e70 <MAP_moveNextBlock_Sura>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 80136e6:	f7f4 fe09 	bl	80082fc <SYS_isOutOfCtrl>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	f43f af3d 	beq.w	801356c <MAP_searchGoal+0xb4>
			CTRL_stop();
 80136f2:	f7f2 f83b 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80136f6:	2000      	movs	r0, #0
 80136f8:	f7f4 fe32 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80136fc:	2001      	movs	r0, #1
 80136fe:	f7f4 fe2f 	bl	8008360 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8013702:	4b0f      	ldr	r3, [pc, #60]	; (8013740 <MAP_searchGoal+0x288>)
 8013704:	2200      	movs	r2, #0
 8013706:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8013708:	4b0b      	ldr	r3, [pc, #44]	; (8013738 <MAP_searchGoal+0x280>)
 801370a:	2200      	movs	r2, #0
 801370c:	701a      	strb	r2, [r3, #0]
			my			= 0;
 801370e:	4b0b      	ldr	r3, [pc, #44]	; (801373c <MAP_searchGoal+0x284>)
 8013710:	2200      	movs	r2, #0
 8013712:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8013714:	4b0f      	ldr	r3, [pc, #60]	; (8013754 <MAP_searchGoal+0x29c>)
 8013716:	f04f 0200 	mov.w	r2, #0
 801371a:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 801371c:	4b05      	ldr	r3, [pc, #20]	; (8013734 <MAP_searchGoal+0x27c>)
 801371e:	2200      	movs	r2, #0
 8013720:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8013722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013726:	f002 f913 	bl	8015950 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );				// モード変更有効
}
 801372a:	bf00      	nop
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	bd90      	pop	{r4, r7, pc}
 8013732:	bf00      	nop
 8013734:	20000704 	.word	0x20000704
 8013738:	2000e607 	.word	0x2000e607
 801373c:	2000e5fd 	.word	0x2000e5fd
 8013740:	2000e604 	.word	0x2000e604
 8013744:	200002e1 	.word	0x200002e1
 8013748:	200006ed 	.word	0x200006ed
 801374c:	3e99999a 	.word	0x3e99999a
 8013750:	00000000 	.word	0x00000000
 8013754:	2000e600 	.word	0x2000e600
 8013758:	200002c6 	.word	0x200002c6
 801375c:	2000e5fc 	.word	0x2000e5fc
 8013760:	2000e605 	.word	0x2000e605
 8013764:	3e6b851f 	.word	0x3e6b851f

08013768 <MAP_searchGoalKnown>:
void MAP_searchGoalKnown(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b087      	sub	sp, #28
 801376c:	af02      	add	r7, sp, #8
 801376e:	4604      	mov	r4, r0
 8013770:	4608      	mov	r0, r1
 8013772:	4611      	mov	r1, r2
 8013774:	461a      	mov	r2, r3
 8013776:	4623      	mov	r3, r4
 8013778:	71fb      	strb	r3, [r7, #7]
 801377a:	4603      	mov	r3, r0
 801377c:	71bb      	strb	r3, [r7, #6]
 801377e:	460b      	mov	r3, r1
 8013780:	717b      	strb	r3, [r7, #5]
 8013782:	4613      	mov	r3, r2
 8013784:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 8013786:	2300      	movs	r3, #0
 8013788:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 801378a:	2301      	movs	r3, #1
 801378c:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 801378e:	4bb2      	ldr	r3, [pc, #712]	; (8013a58 <MAP_searchGoalKnown+0x2f0>)
 8013790:	2201      	movs	r2, #1
 8013792:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 8013794:	793b      	ldrb	r3, [r7, #4]
 8013796:	2b03      	cmp	r3, #3
 8013798:	d122      	bne.n	80137e0 <MAP_searchGoalKnown+0x78>
		uc_goalX = uc_trgX;
 801379a:	79fb      	ldrb	r3, [r7, #7]
 801379c:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 801379e:	79bb      	ldrb	r3, [r7, #6]
 80137a0:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 80137a2:	4bae      	ldr	r3, [pc, #696]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 80137a8:	4bad      	ldr	r3, [pc, #692]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 80137ae:	797a      	ldrb	r2, [r7, #5]
 80137b0:	79b9      	ldrb	r1, [r7, #6]
 80137b2:	79fb      	ldrb	r3, [r7, #7]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fd fd91 	bl	80112dc <MAP_makeContourMap_queue>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80137ba:	4baa      	ldr	r3, [pc, #680]	; (8013a64 <MAP_searchGoalKnown+0x2fc>)
 80137bc:	781a      	ldrb	r2, [r3, #0]
 80137be:	7bfc      	ldrb	r4, [r7, #15]
 80137c0:	7b79      	ldrb	r1, [r7, #13]
 80137c2:	7bb8      	ldrb	r0, [r7, #14]
 80137c4:	f107 0309 	add.w	r3, r7, #9
 80137c8:	9301      	str	r3, [sp, #4]
 80137ca:	7bfb      	ldrb	r3, [r7, #15]
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	4623      	mov	r3, r4
 80137d0:	f7fc fdbe 	bl	8010350 <MAP_searchCmdList>
		uc_trgX = Return_X;
 80137d4:	4ba4      	ldr	r3, [pc, #656]	; (8013a68 <MAP_searchGoalKnown+0x300>)
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 80137da:	4ba4      	ldr	r3, [pc, #656]	; (8013a6c <MAP_searchGoalKnown+0x304>)
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 80137e0:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8013a70 <MAP_searchGoalKnown+0x308>
 80137e4:	f7f8 fd2c 	bl	800c240 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 80137e8:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8013a74 <MAP_searchGoalKnown+0x30c>
 80137ec:	f7f8 fd3e 	bl	800c26c <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 80137f0:	4ba1      	ldr	r3, [pc, #644]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 80137f2:	f04f 0200 	mov.w	r2, #0
 80137f6:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 80137f8:	4ba0      	ldr	r3, [pc, #640]	; (8013a7c <MAP_searchGoalKnown+0x314>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 80137fe:	4ba0      	ldr	r3, [pc, #640]	; (8013a80 <MAP_searchGoalKnown+0x318>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	79fa      	ldrb	r2, [r7, #7]
 8013804:	429a      	cmp	r2, r3
 8013806:	d107      	bne.n	8013818 <MAP_searchGoalKnown+0xb0>
 8013808:	4b9e      	ldr	r3, [pc, #632]	; (8013a84 <MAP_searchGoalKnown+0x31c>)
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	79ba      	ldrb	r2, [r7, #6]
 801380e:	429a      	cmp	r2, r3
 8013810:	d102      	bne.n	8013818 <MAP_searchGoalKnown+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 8013812:	4b99      	ldr	r3, [pc, #612]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 8013814:	4a9c      	ldr	r2, [pc, #624]	; (8013a88 <MAP_searchGoalKnown+0x320>)
 8013816:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 8013818:	f7f5 fa24 	bl	8008c64 <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 801381c:	4b91      	ldr	r3, [pc, #580]	; (8013a64 <MAP_searchGoalKnown+0x2fc>)
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	4618      	mov	r0, r3
 8013822:	f7fe fa37 	bl	8011c94 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 8013826:	793b      	ldrb	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d132      	bne.n	8013892 <MAP_searchGoalKnown+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 801382c:	797a      	ldrb	r2, [r7, #5]
 801382e:	79b9      	ldrb	r1, [r7, #6]
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	4618      	mov	r0, r3
 8013834:	f7fd fd52 	bl	80112dc <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 8013838:	7abb      	ldrb	r3, [r7, #10]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00c      	beq.n	8013858 <MAP_searchGoalKnown+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801383e:	4b8e      	ldr	r3, [pc, #568]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 8013840:	edd3 7a00 	vldr	s15, [r3]
 8013844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013848:	ee77 7a87 	vadd.f32	s15, s15, s14
 801384c:	eddf 0a88 	vldr	s1, [pc, #544]	; 8013a70 <MAP_searchGoalKnown+0x308>
 8013850:	eeb0 0a67 	vmov.f32	s0, s15
 8013854:	f7f8 f878 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 8013858:	f7fd fc3c 	bl	80110d4 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 801385c:	f107 030b 	add.w	r3, r7, #11
 8013860:	4619      	mov	r1, r3
 8013862:	2000      	movs	r0, #0
 8013864:	f7fe f90a 	bl	8011a7c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 8013868:	4b7c      	ldr	r3, [pc, #496]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	79fa      	ldrb	r2, [r7, #7]
 801386e:	429a      	cmp	r2, r3
 8013870:	d107      	bne.n	8013882 <MAP_searchGoalKnown+0x11a>
 8013872:	4b7b      	ldr	r3, [pc, #492]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	79ba      	ldrb	r2, [r7, #6]
 8013878:	429a      	cmp	r2, r3
 801387a:	d102      	bne.n	8013882 <MAP_searchGoalKnown+0x11a>
				MAP_actGoal();										// ゴール時の動作
 801387c:	f7fe fd72 	bl	8012364 <MAP_actGoal>
				break;
 8013880:	e0df      	b.n	8013a42 <MAP_searchGoalKnown+0x2da>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8013882:	7afb      	ldrb	r3, [r7, #11]
 8013884:	f107 020a 	add.w	r2, r7, #10
 8013888:	4611      	mov	r1, r2
 801388a:	4618      	mov	r0, r3
 801388c:	f7fe fa3e 	bl	8011d0c <MAP_moveNextBlock>
 8013890:	e08f      	b.n	80139b2 <MAP_searchGoalKnown+0x24a>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 8013892:	793b      	ldrb	r3, [r7, #4]
 8013894:	2b01      	cmp	r3, #1
 8013896:	d139      	bne.n	801390c <MAP_searchGoalKnown+0x1a4>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8013898:	797a      	ldrb	r2, [r7, #5]
 801389a:	79b9      	ldrb	r1, [r7, #6]
 801389c:	79fb      	ldrb	r3, [r7, #7]
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fd fd1c 	bl	80112dc <MAP_makeContourMap_queue>
			if( TRUE == bl_type ){
 80138a4:	7abb      	ldrb	r3, [r7, #10]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00c      	beq.n	80138c4 <MAP_searchGoalKnown+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80138aa:	4b73      	ldr	r3, [pc, #460]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 80138ac:	edd3 7a00 	vldr	s15, [r3]
 80138b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80138b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138b8:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8013a70 <MAP_searchGoalKnown+0x308>
 80138bc:	eeb0 0a67 	vmov.f32	s0, s15
 80138c0:	f7f8 f842 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 80138c4:	4b71      	ldr	r3, [pc, #452]	; (8013a8c <MAP_searchGoalKnown+0x324>)
 80138c6:	785b      	ldrb	r3, [r3, #1]
 80138c8:	f083 0301 	eor.w	r3, r3, #1
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d001      	beq.n	80138d6 <MAP_searchGoalKnown+0x16e>
				MAP_makeMapData();		// 壁データから迷路データを作成
 80138d2:	f7fd fbff 	bl	80110d4 <MAP_makeMapData>
			}
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80138d6:	f107 030b 	add.w	r3, r7, #11
 80138da:	4619      	mov	r1, r3
 80138dc:	2000      	movs	r0, #0
 80138de:	f7fe f8cd 	bl	8011a7c <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80138e2:	4b5e      	ldr	r3, [pc, #376]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	79fa      	ldrb	r2, [r7, #7]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d107      	bne.n	80138fc <MAP_searchGoalKnown+0x194>
 80138ec:	4b5c      	ldr	r3, [pc, #368]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	79ba      	ldrb	r2, [r7, #6]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d102      	bne.n	80138fc <MAP_searchGoalKnown+0x194>
				MAP_actGoal();									// ゴール時の動作
 80138f6:	f7fe fd35 	bl	8012364 <MAP_actGoal>
				break;
 80138fa:	e0a2      	b.n	8013a42 <MAP_searchGoalKnown+0x2da>
			}
			else{
//				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
				MAP_moveNextBlock_acc(en_head, &bl_type);
 80138fc:	7afb      	ldrb	r3, [r7, #11]
 80138fe:	f107 020a 	add.w	r2, r7, #10
 8013902:	4611      	mov	r1, r2
 8013904:	4618      	mov	r0, r3
 8013906:	f7fe fff5 	bl	80128f4 <MAP_moveNextBlock_acc>
 801390a:	e052      	b.n	80139b2 <MAP_searchGoalKnown+0x24a>
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 801390c:	793b      	ldrb	r3, [r7, #4]
 801390e:	2b03      	cmp	r3, #3
 8013910:	d14f      	bne.n	80139b2 <MAP_searchGoalKnown+0x24a>
			
			if( TRUE == bl_type ){
 8013912:	7abb      	ldrb	r3, [r7, #10]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00c      	beq.n	8013932 <MAP_searchGoalKnown+0x1ca>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8013918:	4b57      	ldr	r3, [pc, #348]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 801391a:	edd3 7a00 	vldr	s15, [r3]
 801391e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013926:	eddf 0a52 	vldr	s1, [pc, #328]	; 8013a70 <MAP_searchGoalKnown+0x308>
 801392a:	eeb0 0a67 	vmov.f32	s0, s15
 801392e:	f7f8 f80b 	bl	800b948 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 8013932:	4b56      	ldr	r3, [pc, #344]	; (8013a8c <MAP_searchGoalKnown+0x324>)
 8013934:	785b      	ldrb	r3, [r3, #1]
 8013936:	f083 0301 	eor.w	r3, r3, #1
 801393a:	b2db      	uxtb	r3, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <MAP_searchGoalKnown+0x1dc>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8013940:	f7fd fbc8 	bl	80110d4 <MAP_makeMapData>
			}			
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 8013944:	7b7a      	ldrb	r2, [r7, #13]
 8013946:	7bbb      	ldrb	r3, [r7, #14]
 8013948:	4611      	mov	r1, r2
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fd9a 	bl	8012484 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8013950:	4b44      	ldr	r3, [pc, #272]	; (8013a64 <MAP_searchGoalKnown+0x2fc>)
 8013952:	781a      	ldrb	r2, [r3, #0]
 8013954:	7bfc      	ldrb	r4, [r7, #15]
 8013956:	7b79      	ldrb	r1, [r7, #13]
 8013958:	7bb8      	ldrb	r0, [r7, #14]
 801395a:	f107 0309 	add.w	r3, r7, #9
 801395e:	9301      	str	r3, [sp, #4]
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4623      	mov	r3, r4
 8013966:	f7fc fcf3 	bl	8010350 <MAP_searchCmdList>
			uc_trgX = Return_X;
 801396a:	4b3f      	ldr	r3, [pc, #252]	; (8013a68 <MAP_searchGoalKnown+0x300>)
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 8013970:	4b3e      	ldr	r3, [pc, #248]	; (8013a6c <MAP_searchGoalKnown+0x304>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_queue(uc_trgX, uc_trgY, en_type);
 8013976:	797a      	ldrb	r2, [r7, #5]
 8013978:	79b9      	ldrb	r1, [r7, #6]
 801397a:	79fb      	ldrb	r3, [r7, #7]
 801397c:	4618      	mov	r0, r3
 801397e:	f7fd fcad 	bl	80112dc <MAP_makeContourMap_queue>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 8013982:	f107 030b 	add.w	r3, r7, #11
 8013986:	4619      	mov	r1, r3
 8013988:	2000      	movs	r0, #0
 801398a:	f7fe f877 	bl	8011a7c <MAP_calcMouseDir>

			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 801398e:	4b33      	ldr	r3, [pc, #204]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d106      	bne.n	80139a4 <MAP_searchGoalKnown+0x23c>
 8013996:	4b32      	ldr	r3, [pc, #200]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d102      	bne.n	80139a4 <MAP_searchGoalKnown+0x23c>
				MAP_actGoal();
 801399e:	f7fe fce1 	bl	8012364 <MAP_actGoal>
				break;
 80139a2:	e04e      	b.n	8013a42 <MAP_searchGoalKnown+0x2da>
			}
//			}
			else {
				MAP_moveNextBlock_acc(en_head, &bl_type);
 80139a4:	7afb      	ldrb	r3, [r7, #11]
 80139a6:	f107 020a 	add.w	r2, r7, #10
 80139aa:	4611      	mov	r1, r2
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fe ffa1 	bl	80128f4 <MAP_moveNextBlock_acc>
			}
//			LED_count(uc_trgY);
		}
		if(Min_in>6){
 80139b2:	4b37      	ldr	r3, [pc, #220]	; (8013a90 <MAP_searchGoalKnown+0x328>)
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	2b06      	cmp	r3, #6
 80139ba:	d927      	bls.n	8013a0c <MAP_searchGoalKnown+0x2a4>
			MOT_goBlock_FinSpeed(0.5,0.0);
 80139bc:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8013a74 <MAP_searchGoalKnown+0x30c>
 80139c0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80139c4:	f7f7 ffc0 	bl	800b948 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);	
 80139c8:	2002      	movs	r0, #2
 80139ca:	f7f8 f925 	bl	800bc18 <MOT_turn>
			LL_mDelay(200);
 80139ce:	20c8      	movs	r0, #200	; 0xc8
 80139d0:	f001 ffbe 	bl	8015950 <LL_mDelay>
			MOT_turn(MOT_R180);	
 80139d4:	2002      	movs	r0, #2
 80139d6:	f7f8 f91f 	bl	800bc18 <MOT_turn>
			LL_mDelay(200);
 80139da:	20c8      	movs	r0, #200	; 0xc8
 80139dc:	f001 ffb8 	bl	8015950 <LL_mDelay>
			CTRL_stop();
 80139e0:	f7f1 fec4 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80139e4:	2000      	movs	r0, #0
 80139e6:	f7f4 fcbb 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 80139ea:	2001      	movs	r0, #1
 80139ec:	f7f4 fcb8 	bl	8008360 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 80139f0:	4b1c      	ldr	r3, [pc, #112]	; (8013a64 <MAP_searchGoalKnown+0x2fc>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 80139f6:	4b19      	ldr	r3, [pc, #100]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 80139f8:	2200      	movs	r2, #0
 80139fa:	701a      	strb	r2, [r3, #0]
			my			= 0;
 80139fc:	4b18      	ldr	r3, [pc, #96]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 80139fe:	2200      	movs	r2, #0
 8013a00:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8013a02:	4b1d      	ldr	r3, [pc, #116]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 8013a04:	f04f 0200 	mov.w	r2, #0
 8013a08:	601a      	str	r2, [r3, #0]
			break;
 8013a0a:	e01a      	b.n	8013a42 <MAP_searchGoalKnown+0x2da>
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 8013a0c:	f7f4 fc76 	bl	80082fc <SYS_isOutOfCtrl>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f43f af02 	beq.w	801381c <MAP_searchGoalKnown+0xb4>
			CTRL_stop();
 8013a18:	f7f1 fea8 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	f7f4 fc9f 	bl	8008360 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8013a22:	2001      	movs	r0, #1
 8013a24:	f7f4 fc9c 	bl	8008360 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8013a28:	4b0e      	ldr	r3, [pc, #56]	; (8013a64 <MAP_searchGoalKnown+0x2fc>)
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8013a2e:	4b0b      	ldr	r3, [pc, #44]	; (8013a5c <MAP_searchGoalKnown+0x2f4>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8013a34:	4b0a      	ldr	r3, [pc, #40]	; (8013a60 <MAP_searchGoalKnown+0x2f8>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8013a3a:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <MAP_searchGoalKnown+0x310>)
 8013a3c:	f04f 0200 	mov.w	r2, #0
 8013a40:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 8013a42:	4b05      	ldr	r3, [pc, #20]	; (8013a58 <MAP_searchGoalKnown+0x2f0>)
 8013a44:	2200      	movs	r2, #0
 8013a46:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8013a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013a4c:	f001 ff80 	bl	8015950 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}
 8013a50:	bf00      	nop
 8013a52:	3714      	adds	r7, #20
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd90      	pop	{r4, r7, pc}
 8013a58:	20000704 	.word	0x20000704
 8013a5c:	2000e607 	.word	0x2000e607
 8013a60:	2000e5fd 	.word	0x2000e5fd
 8013a64:	2000e604 	.word	0x2000e604
 8013a68:	200002e1 	.word	0x200002e1
 8013a6c:	200006ed 	.word	0x200006ed
 8013a70:	3e99999a 	.word	0x3e99999a
 8013a74:	00000000 	.word	0x00000000
 8013a78:	2000e600 	.word	0x2000e600
 8013a7c:	200002c6 	.word	0x200002c6
 8013a80:	2000e5fc 	.word	0x2000e5fc
 8013a84:	2000e605 	.word	0x2000e605
 8013a88:	3e6b851f 	.word	0x3e6b851f
 8013a8c:	200002c8 	.word	0x200002c8
 8013a90:	200002e0 	.word	0x200002e0

08013a94 <MAP_clearMap_direction>:
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}

void MAP_clearMap_direction(void)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	80bb      	strh	r3, [r7, #4]
 8013a9e:	e015      	b.n	8013acc <MAP_clearMap_direction+0x38>
		for (x = 0; x < MAP_X_SIZE; x++) {
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	80fb      	strh	r3, [r7, #6]
 8013aa4:	e00c      	b.n	8013ac0 <MAP_clearMap_direction+0x2c>
			uc_data = 0x00;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	70fb      	strb	r3, [r7, #3]
			g_Map_direction[y][x] = uc_data;
 8013aaa:	88ba      	ldrh	r2, [r7, #4]
 8013aac:	88fb      	ldrh	r3, [r7, #6]
 8013aae:	490c      	ldr	r1, [pc, #48]	; (8013ae0 <MAP_clearMap_direction+0x4c>)
 8013ab0:	0152      	lsls	r2, r2, #5
 8013ab2:	440a      	add	r2, r1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	78fa      	ldrb	r2, [r7, #3]
 8013ab8:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < MAP_X_SIZE; x++) {
 8013aba:	88fb      	ldrh	r3, [r7, #6]
 8013abc:	3301      	adds	r3, #1
 8013abe:	80fb      	strh	r3, [r7, #6]
 8013ac0:	88fb      	ldrh	r3, [r7, #6]
 8013ac2:	2b1f      	cmp	r3, #31
 8013ac4:	d9ef      	bls.n	8013aa6 <MAP_clearMap_direction+0x12>
	for (y = 0; y < MAP_Y_SIZE; y++) {
 8013ac6:	88bb      	ldrh	r3, [r7, #4]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	80bb      	strh	r3, [r7, #4]
 8013acc:	88bb      	ldrh	r3, [r7, #4]
 8013ace:	2b1f      	cmp	r3, #31
 8013ad0:	d9e6      	bls.n	8013aa0 <MAP_clearMap_direction+0xc>
		}
	}

}
 8013ad2:	bf00      	nop
 8013ad4:	bf00      	nop
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	200002e4 	.word	0x200002e4

08013ae4 <MAP_makeContourMap_dijkstra_modoki>:

void  MAP_makeContourMap_dijkstra_modoki(
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	4603      	mov	r3, r0
 8013aec:	71fb      	strb	r3, [r7, #7]
 8013aee:	460b      	mov	r3, r1
 8013af0:	71bb      	strb	r3, [r7, #6]
 8013af2:	4613      	mov	r3, r2
 8013af4:	717b      	strb	r3, [r7, #5]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	MAP_clearMap_direction();
 8013af6:	f7ff ffcd 	bl	8013a94 <MAP_clearMap_direction>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8013afa:	2300      	movs	r3, #0
 8013afc:	827b      	strh	r3, [r7, #18]
 8013afe:	e010      	b.n	8013b22 <MAP_makeContourMap_dijkstra_modoki+0x3e>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL*4 - 1;
 8013b00:	8a7b      	ldrh	r3, [r7, #18]
 8013b02:	095b      	lsrs	r3, r3, #5
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	461a      	mov	r2, r3
 8013b08:	8a7b      	ldrh	r3, [r7, #18]
 8013b0a:	f003 031f 	and.w	r3, r3, #31
 8013b0e:	495e      	ldr	r1, [pc, #376]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b10:	0152      	lsls	r2, r2, #5
 8013b12:	4413      	add	r3, r2
 8013b14:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013b18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 8013b1c:	8a7b      	ldrh	r3, [r7, #18]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	827b      	strh	r3, [r7, #18]
 8013b22:	8a7b      	ldrh	r3, [r7, #18]
 8013b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b28:	d3ea      	bcc.n	8013b00 <MAP_makeContourMap_dijkstra_modoki+0x1c>
	}
	/* 目標地点の等高線を0に設定 */
	us_cmap[uc_goalY][uc_goalX] = 0;
 8013b2a:	79ba      	ldrb	r2, [r7, #6]
 8013b2c:	79fb      	ldrb	r3, [r7, #7]
 8013b2e:	4956      	ldr	r1, [pc, #344]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b30:	0152      	lsls	r2, r2, #5
 8013b32:	4413      	add	r3, r2
 8013b34:	2200      	movs	r2, #0
 8013b36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 8013b3a:	4b54      	ldr	r3, [pc, #336]	; (8013c8c <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	2b04      	cmp	r3, #4
 8013b40:	d11c      	bne.n	8013b7c <MAP_makeContourMap_dijkstra_modoki+0x98>
		us_cmap[uc_goalY + 1][uc_goalX] = 0;
 8013b42:	79bb      	ldrb	r3, [r7, #6]
 8013b44:	1c5a      	adds	r2, r3, #1
 8013b46:	79fb      	ldrb	r3, [r7, #7]
 8013b48:	494f      	ldr	r1, [pc, #316]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b4a:	0152      	lsls	r2, r2, #5
 8013b4c:	4413      	add	r3, r2
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX + 1] = 0;
 8013b54:	79ba      	ldrb	r2, [r7, #6]
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	3301      	adds	r3, #1
 8013b5a:	494b      	ldr	r1, [pc, #300]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b5c:	0152      	lsls	r2, r2, #5
 8013b5e:	4413      	add	r3, r2
 8013b60:	2200      	movs	r2, #0
 8013b62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 8013b66:	79bb      	ldrb	r3, [r7, #6]
 8013b68:	1c5a      	adds	r2, r3, #1
 8013b6a:	79fb      	ldrb	r3, [r7, #7]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	4946      	ldr	r1, [pc, #280]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b70:	0152      	lsls	r2, r2, #5
 8013b72:	4413      	add	r3, r2
 8013b74:	2200      	movs	r2, #0
 8013b76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8013b7a:	e04f      	b.n	8013c1c <MAP_makeContourMap_dijkstra_modoki+0x138>
	}
	else if (GOAL_SIZE == 9){
 8013b7c:	4b43      	ldr	r3, [pc, #268]	; (8013c8c <MAP_makeContourMap_dijkstra_modoki+0x1a8>)
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b09      	cmp	r3, #9
 8013b82:	d14b      	bne.n	8013c1c <MAP_makeContourMap_dijkstra_modoki+0x138>
		us_cmap[uc_goalY+1][uc_goalX] = 0;
 8013b84:	79bb      	ldrb	r3, [r7, #6]
 8013b86:	1c5a      	adds	r2, r3, #1
 8013b88:	79fb      	ldrb	r3, [r7, #7]
 8013b8a:	493f      	ldr	r1, [pc, #252]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b8c:	0152      	lsls	r2, r2, #5
 8013b8e:	4413      	add	r3, r2
 8013b90:	2200      	movs	r2, #0
 8013b92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+1] = 0;
 8013b96:	79ba      	ldrb	r2, [r7, #6]
 8013b98:	79fb      	ldrb	r3, [r7, #7]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	493a      	ldr	r1, [pc, #232]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013b9e:	0152      	lsls	r2, r2, #5
 8013ba0:	4413      	add	r3, r2
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+1] = 0;
 8013ba8:	79bb      	ldrb	r3, [r7, #6]
 8013baa:	1c5a      	adds	r2, r3, #1
 8013bac:	79fb      	ldrb	r3, [r7, #7]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	4935      	ldr	r1, [pc, #212]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013bb2:	0152      	lsls	r2, r2, #5
 8013bb4:	4413      	add	r3, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX] = 0;
 8013bbc:	79bb      	ldrb	r3, [r7, #6]
 8013bbe:	1c9a      	adds	r2, r3, #2
 8013bc0:	79fb      	ldrb	r3, [r7, #7]
 8013bc2:	4931      	ldr	r1, [pc, #196]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013bc4:	0152      	lsls	r2, r2, #5
 8013bc6:	4413      	add	r3, r2
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+1] = 0;
 8013bce:	79bb      	ldrb	r3, [r7, #6]
 8013bd0:	1c9a      	adds	r2, r3, #2
 8013bd2:	79fb      	ldrb	r3, [r7, #7]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	492c      	ldr	r1, [pc, #176]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013bd8:	0152      	lsls	r2, r2, #5
 8013bda:	4413      	add	r3, r2
 8013bdc:	2200      	movs	r2, #0
 8013bde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+2] = 0;
 8013be2:	79ba      	ldrb	r2, [r7, #6]
 8013be4:	79fb      	ldrb	r3, [r7, #7]
 8013be6:	3302      	adds	r3, #2
 8013be8:	4927      	ldr	r1, [pc, #156]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013bea:	0152      	lsls	r2, r2, #5
 8013bec:	4413      	add	r3, r2
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+2] = 0;
 8013bf4:	79bb      	ldrb	r3, [r7, #6]
 8013bf6:	1c5a      	adds	r2, r3, #1
 8013bf8:	79fb      	ldrb	r3, [r7, #7]
 8013bfa:	3302      	adds	r3, #2
 8013bfc:	4922      	ldr	r1, [pc, #136]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013bfe:	0152      	lsls	r2, r2, #5
 8013c00:	4413      	add	r3, r2
 8013c02:	2200      	movs	r2, #0
 8013c04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+2] = 0;
 8013c08:	79bb      	ldrb	r3, [r7, #6]
 8013c0a:	1c9a      	adds	r2, r3, #2
 8013c0c:	79fb      	ldrb	r3, [r7, #7]
 8013c0e:	3302      	adds	r3, #2
 8013c10:	491d      	ldr	r1, [pc, #116]	; (8013c88 <MAP_makeContourMap_dijkstra_modoki+0x1a4>)
 8013c12:	0152      	lsls	r2, r2, #5
 8013c14:	4413      	add	r3, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

	if (mx > uc_max_x)uc_max_x = mx;
 8013c1c:	4b1c      	ldr	r3, [pc, #112]	; (8013c90 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8013c1e:	781a      	ldrb	r2, [r3, #0]
 8013c20:	4b1c      	ldr	r3, [pc, #112]	; (8013c94 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d903      	bls.n	8013c30 <MAP_makeContourMap_dijkstra_modoki+0x14c>
 8013c28:	4b19      	ldr	r3, [pc, #100]	; (8013c90 <MAP_makeContourMap_dijkstra_modoki+0x1ac>)
 8013c2a:	781a      	ldrb	r2, [r3, #0]
 8013c2c:	4b19      	ldr	r3, [pc, #100]	; (8013c94 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8013c2e:	701a      	strb	r2, [r3, #0]
	if (my > uc_max_y)uc_max_y = my;
 8013c30:	4b19      	ldr	r3, [pc, #100]	; (8013c98 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8013c32:	781a      	ldrb	r2, [r3, #0]
 8013c34:	4b19      	ldr	r3, [pc, #100]	; (8013c9c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d903      	bls.n	8013c44 <MAP_makeContourMap_dijkstra_modoki+0x160>
 8013c3c:	4b16      	ldr	r3, [pc, #88]	; (8013c98 <MAP_makeContourMap_dijkstra_modoki+0x1b4>)
 8013c3e:	781a      	ldrb	r2, [r3, #0]
 8013c40:	4b16      	ldr	r3, [pc, #88]	; (8013c9c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8013c42:	701a      	strb	r2, [r3, #0]
	uc_max_x = 32;
 8013c44:	4b13      	ldr	r3, [pc, #76]	; (8013c94 <MAP_makeContourMap_dijkstra_modoki+0x1b0>)
 8013c46:	2220      	movs	r2, #32
 8013c48:	701a      	strb	r2, [r3, #0]
	uc_max_y = 32;
 8013c4a:	4b14      	ldr	r3, [pc, #80]	; (8013c9c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8013c4c:	2220      	movs	r2, #32
 8013c4e:	701a      	strb	r2, [r3, #0]

	g_Map_direction[uc_goalY][uc_goalX] = 0xff;
 8013c50:	79ba      	ldrb	r2, [r7, #6]
 8013c52:	79fb      	ldrb	r3, [r7, #7]
 8013c54:	4912      	ldr	r1, [pc, #72]	; (8013ca0 <MAP_makeContourMap_dijkstra_modoki+0x1bc>)
 8013c56:	0152      	lsls	r2, r2, #5
 8013c58:	440a      	add	r2, r1
 8013c5a:	4413      	add	r3, r2
 8013c5c:	22ff      	movs	r2, #255	; 0xff
 8013c5e:	701a      	strb	r2, [r3, #0]

	/* 等高線マップを作成 */
	uc_dase = 0;
 8013c60:	2300      	movs	r3, #0
 8013c62:	823b      	strh	r3, [r7, #16]
	do {
		uc_level = 0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	81bb      	strh	r3, [r7, #12]
		uc_new = uc_dase + 1;
 8013c68:	8a3b      	ldrh	r3, [r7, #16]
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	81fb      	strh	r3, [r7, #14]
		for (y = 0; y < MAP_Y_SIZE; y++) {
 8013c6e:	2300      	movs	r3, #0
 8013c70:	82bb      	strh	r3, [r7, #20]
 8013c72:	e1ea      	b.n	801404a <MAP_makeContourMap_dijkstra_modoki+0x566>
			if (uc_max_y+1 < y) break;
 8013c74:	4b09      	ldr	r3, [pc, #36]	; (8013c9c <MAP_makeContourMap_dijkstra_modoki+0x1b8>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	1c5a      	adds	r2, r3, #1
 8013c7a:	8abb      	ldrh	r3, [r7, #20]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	f2c0 81e9 	blt.w	8014054 <MAP_makeContourMap_dijkstra_modoki+0x570>
			for (x = 0; x < MAP_X_SIZE; x++) {
 8013c82:	2300      	movs	r3, #0
 8013c84:	82fb      	strh	r3, [r7, #22]
 8013c86:	e1d7      	b.n	8014038 <MAP_makeContourMap_dijkstra_modoki+0x554>
 8013c88:	20000b2c 	.word	0x20000b2c
 8013c8c:	2000e606 	.word	0x2000e606
 8013c90:	2000e607 	.word	0x2000e607
 8013c94:	2000001a 	.word	0x2000001a
 8013c98:	2000e5fd 	.word	0x2000e5fd
 8013c9c:	2000001b 	.word	0x2000001b
 8013ca0:	200002e4 	.word	0x200002e4
				if (us_cmap[y][x] == uc_dase) {
 8013ca4:	8aba      	ldrh	r2, [r7, #20]
 8013ca6:	8afb      	ldrh	r3, [r7, #22]
 8013ca8:	49a0      	ldr	r1, [pc, #640]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013caa:	0152      	lsls	r2, r2, #5
 8013cac:	4413      	add	r3, r2
 8013cae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013cb2:	8a3a      	ldrh	r2, [r7, #16]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	f040 81b4 	bne.w	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
					uc_wallData = g_sysMap[y][x];
 8013cba:	8aba      	ldrh	r2, [r7, #20]
 8013cbc:	8afb      	ldrh	r3, [r7, #22]
 8013cbe:	499c      	ldr	r1, [pc, #624]	; (8013f30 <MAP_makeContourMap_dijkstra_modoki+0x44c>)
 8013cc0:	0152      	lsls	r2, r2, #5
 8013cc2:	440a      	add	r2, r1
 8013cc4:	4413      	add	r3, r2
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	72fb      	strb	r3, [r7, #11]
					if (uc_max_x+1 < x) break;
 8013cca:	4b9a      	ldr	r3, [pc, #616]	; (8013f34 <MAP_makeContourMap_dijkstra_modoki+0x450>)
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	1c5a      	adds	r2, r3, #1
 8013cd0:	8afb      	ldrh	r3, [r7, #22]
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	f2c0 81b5 	blt.w	8014042 <MAP_makeContourMap_dijkstra_modoki+0x55e>
					/* 探索走行 */
					if (SEARCH == en_type) {
 8013cd8:	797b      	ldrb	r3, [r7, #5]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f040 8084 	bne.w	8013de8 <MAP_makeContourMap_dijkstra_modoki+0x304>
						if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8013ce0:	7afb      	ldrb	r3, [r7, #11]
 8013ce2:	f003 0301 	and.w	r3, r3, #1
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d11a      	bne.n	8013d20 <MAP_makeContourMap_dijkstra_modoki+0x23c>
 8013cea:	8abb      	ldrh	r3, [r7, #20]
 8013cec:	2b1f      	cmp	r3, #31
 8013cee:	d017      	beq.n	8013d20 <MAP_makeContourMap_dijkstra_modoki+0x23c>
							if (us_cmap[y + 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8013cf0:	8abb      	ldrh	r3, [r7, #20]
 8013cf2:	1c5a      	adds	r2, r3, #1
 8013cf4:	8afb      	ldrh	r3, [r7, #22]
 8013cf6:	498d      	ldr	r1, [pc, #564]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013cf8:	0152      	lsls	r2, r2, #5
 8013cfa:	4413      	add	r3, r2
 8013cfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d00:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d10b      	bne.n	8013d20 <MAP_makeContourMap_dijkstra_modoki+0x23c>
								us_cmap[y + 1][x] = uc_new;
 8013d08:	8abb      	ldrh	r3, [r7, #20]
 8013d0a:	1c5a      	adds	r2, r3, #1
 8013d0c:	8afb      	ldrh	r3, [r7, #22]
 8013d0e:	4987      	ldr	r1, [pc, #540]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013d10:	0152      	lsls	r2, r2, #5
 8013d12:	4413      	add	r3, r2
 8013d14:	89fa      	ldrh	r2, [r7, #14]
 8013d16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8013d1a:	89bb      	ldrh	r3, [r7, #12]
 8013d1c:	3301      	adds	r3, #1
 8013d1e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8013d20:	7afb      	ldrb	r3, [r7, #11]
 8013d22:	f003 0302 	and.w	r3, r3, #2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d11a      	bne.n	8013d60 <MAP_makeContourMap_dijkstra_modoki+0x27c>
 8013d2a:	8afb      	ldrh	r3, [r7, #22]
 8013d2c:	2b1f      	cmp	r3, #31
 8013d2e:	d017      	beq.n	8013d60 <MAP_makeContourMap_dijkstra_modoki+0x27c>
							if (us_cmap[y][x + 1] == MAP_SMAP_MAX_VAL - 1) {
 8013d30:	8aba      	ldrh	r2, [r7, #20]
 8013d32:	8afb      	ldrh	r3, [r7, #22]
 8013d34:	3301      	adds	r3, #1
 8013d36:	497d      	ldr	r1, [pc, #500]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013d38:	0152      	lsls	r2, r2, #5
 8013d3a:	4413      	add	r3, r2
 8013d3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d40:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d10b      	bne.n	8013d60 <MAP_makeContourMap_dijkstra_modoki+0x27c>
								us_cmap[y][x + 1] = uc_new;
 8013d48:	8aba      	ldrh	r2, [r7, #20]
 8013d4a:	8afb      	ldrh	r3, [r7, #22]
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	4977      	ldr	r1, [pc, #476]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013d50:	0152      	lsls	r2, r2, #5
 8013d52:	4413      	add	r3, r2
 8013d54:	89fa      	ldrh	r2, [r7, #14]
 8013d56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8013d5a:	89bb      	ldrh	r3, [r7, #12]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8013d60:	7afb      	ldrb	r3, [r7, #11]
 8013d62:	f003 0304 	and.w	r3, r3, #4
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d11a      	bne.n	8013da0 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
 8013d6a:	8abb      	ldrh	r3, [r7, #20]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d017      	beq.n	8013da0 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
							if (us_cmap[y - 1][x] == MAP_SMAP_MAX_VAL - 1) {
 8013d70:	8abb      	ldrh	r3, [r7, #20]
 8013d72:	1e5a      	subs	r2, r3, #1
 8013d74:	8afb      	ldrh	r3, [r7, #22]
 8013d76:	496d      	ldr	r1, [pc, #436]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013d78:	0152      	lsls	r2, r2, #5
 8013d7a:	4413      	add	r3, r2
 8013d7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013d80:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013d84:	4293      	cmp	r3, r2
 8013d86:	d10b      	bne.n	8013da0 <MAP_makeContourMap_dijkstra_modoki+0x2bc>
								us_cmap[y - 1][x] = uc_new;
 8013d88:	8abb      	ldrh	r3, [r7, #20]
 8013d8a:	1e5a      	subs	r2, r3, #1
 8013d8c:	8afb      	ldrh	r3, [r7, #22]
 8013d8e:	4967      	ldr	r1, [pc, #412]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013d90:	0152      	lsls	r2, r2, #5
 8013d92:	4413      	add	r3, r2
 8013d94:	89fa      	ldrh	r2, [r7, #14]
 8013d96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8013d9a:	89bb      	ldrh	r3, [r7, #12]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8013da0:	7afb      	ldrb	r3, [r7, #11]
 8013da2:	f003 0308 	and.w	r3, r3, #8
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f040 813b 	bne.w	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 8013dac:	8afb      	ldrh	r3, [r7, #22]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f000 8137 	beq.w	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if (us_cmap[y][x - 1] == MAP_SMAP_MAX_VAL - 1) {
 8013db4:	8aba      	ldrh	r2, [r7, #20]
 8013db6:	8afb      	ldrh	r3, [r7, #22]
 8013db8:	3b01      	subs	r3, #1
 8013dba:	495c      	ldr	r1, [pc, #368]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013dbc:	0152      	lsls	r2, r2, #5
 8013dbe:	4413      	add	r3, r2
 8013dc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013dc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	f040 812a 	bne.w	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_cmap[y][x - 1] = uc_new;
 8013dce:	8aba      	ldrh	r2, [r7, #20]
 8013dd0:	8afb      	ldrh	r3, [r7, #22]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	4955      	ldr	r1, [pc, #340]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013dd6:	0152      	lsls	r2, r2, #5
 8013dd8:	4413      	add	r3, r2
 8013dda:	89fa      	ldrh	r2, [r7, #14]
 8013ddc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 8013de0:	89bb      	ldrh	r3, [r7, #12]
 8013de2:	3301      	adds	r3, #1
 8013de4:	81bb      	strh	r3, [r7, #12]
 8013de6:	e11c      	b.n	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							}
						}
					}
					/* 最短走行 */
					else {
						if (((uc_wallData & 0x11) == 0x10) && (y != (MAP_Y_SIZE - 1))) {
 8013de8:	7afb      	ldrb	r3, [r7, #11]
 8013dea:	f003 0311 	and.w	r3, r3, #17
 8013dee:	2b10      	cmp	r3, #16
 8013df0:	d13f      	bne.n	8013e72 <MAP_makeContourMap_dijkstra_modoki+0x38e>
 8013df2:	8abb      	ldrh	r3, [r7, #20]
 8013df4:	2b1f      	cmp	r3, #31
 8013df6:	d03c      	beq.n	8013e72 <MAP_makeContourMap_dijkstra_modoki+0x38e>
							if((g_Map_direction[y][x]&0x10) == 0x10){
 8013df8:	8aba      	ldrh	r2, [r7, #20]
 8013dfa:	8afb      	ldrh	r3, [r7, #22]
 8013dfc:	494e      	ldr	r1, [pc, #312]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013dfe:	0152      	lsls	r2, r2, #5
 8013e00:	440a      	add	r2, r1
 8013e02:	4413      	add	r3, r2
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	f003 0310 	and.w	r3, r3, #16
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d003      	beq.n	8013e16 <MAP_makeContourMap_dijkstra_modoki+0x332>
								uc_new = uc_dase + 1;
 8013e0e:	8a3b      	ldrh	r3, [r7, #16]
 8013e10:	3301      	adds	r3, #1
 8013e12:	81fb      	strh	r3, [r7, #14]
 8013e14:	e002      	b.n	8013e1c <MAP_makeContourMap_dijkstra_modoki+0x338>
							}else{
								uc_new = uc_dase + 2;
 8013e16:	8a3b      	ldrh	r3, [r7, #16]
 8013e18:	3302      	adds	r3, #2
 8013e1a:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y + 1][x] > uc_new) {
 8013e1c:	8abb      	ldrh	r3, [r7, #20]
 8013e1e:	1c5a      	adds	r2, r3, #1
 8013e20:	8afb      	ldrh	r3, [r7, #22]
 8013e22:	4942      	ldr	r1, [pc, #264]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013e24:	0152      	lsls	r2, r2, #5
 8013e26:	4413      	add	r3, r2
 8013e28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013e2c:	89fa      	ldrh	r2, [r7, #14]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d21f      	bcs.n	8013e72 <MAP_makeContourMap_dijkstra_modoki+0x38e>
								us_cmap[y + 1][x] = uc_new;
 8013e32:	8abb      	ldrh	r3, [r7, #20]
 8013e34:	1c5a      	adds	r2, r3, #1
 8013e36:	8afb      	ldrh	r3, [r7, #22]
 8013e38:	493c      	ldr	r1, [pc, #240]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013e3a:	0152      	lsls	r2, r2, #5
 8013e3c:	4413      	add	r3, r2
 8013e3e:	89fa      	ldrh	r2, [r7, #14]
 8013e40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y+1][x] |= 0x10;
 8013e44:	8abb      	ldrh	r3, [r7, #20]
 8013e46:	1c5a      	adds	r2, r3, #1
 8013e48:	8afb      	ldrh	r3, [r7, #22]
 8013e4a:	493b      	ldr	r1, [pc, #236]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013e4c:	0152      	lsls	r2, r2, #5
 8013e4e:	440a      	add	r2, r1
 8013e50:	4413      	add	r3, r2
 8013e52:	7819      	ldrb	r1, [r3, #0]
 8013e54:	8abb      	ldrh	r3, [r7, #20]
 8013e56:	1c5a      	adds	r2, r3, #1
 8013e58:	8afb      	ldrh	r3, [r7, #22]
 8013e5a:	f041 0110 	orr.w	r1, r1, #16
 8013e5e:	b2c8      	uxtb	r0, r1
 8013e60:	4935      	ldr	r1, [pc, #212]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013e62:	0152      	lsls	r2, r2, #5
 8013e64:	440a      	add	r2, r1
 8013e66:	4413      	add	r3, r2
 8013e68:	4602      	mov	r2, r0
 8013e6a:	701a      	strb	r2, [r3, #0]
								uc_level++;
 8013e6c:	89bb      	ldrh	r3, [r7, #12]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x22) == 0x20) && (x != (MAP_X_SIZE - 1))) {
 8013e72:	7afb      	ldrb	r3, [r7, #11]
 8013e74:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8013e78:	2b20      	cmp	r3, #32
 8013e7a:	d13f      	bne.n	8013efc <MAP_makeContourMap_dijkstra_modoki+0x418>
 8013e7c:	8afb      	ldrh	r3, [r7, #22]
 8013e7e:	2b1f      	cmp	r3, #31
 8013e80:	d03c      	beq.n	8013efc <MAP_makeContourMap_dijkstra_modoki+0x418>
							if((g_Map_direction[y][x]&0x40) == 0x40){
 8013e82:	8aba      	ldrh	r2, [r7, #20]
 8013e84:	8afb      	ldrh	r3, [r7, #22]
 8013e86:	492c      	ldr	r1, [pc, #176]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013e88:	0152      	lsls	r2, r2, #5
 8013e8a:	440a      	add	r2, r1
 8013e8c:	4413      	add	r3, r2
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d003      	beq.n	8013ea0 <MAP_makeContourMap_dijkstra_modoki+0x3bc>
								uc_new = uc_dase + 1;
 8013e98:	8a3b      	ldrh	r3, [r7, #16]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	81fb      	strh	r3, [r7, #14]
 8013e9e:	e002      	b.n	8013ea6 <MAP_makeContourMap_dijkstra_modoki+0x3c2>
							}else{
								uc_new = uc_dase + 2;
 8013ea0:	8a3b      	ldrh	r3, [r7, #16]
 8013ea2:	3302      	adds	r3, #2
 8013ea4:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y][x + 1] > uc_new) {
 8013ea6:	8aba      	ldrh	r2, [r7, #20]
 8013ea8:	8afb      	ldrh	r3, [r7, #22]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	491f      	ldr	r1, [pc, #124]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013eae:	0152      	lsls	r2, r2, #5
 8013eb0:	4413      	add	r3, r2
 8013eb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013eb6:	89fa      	ldrh	r2, [r7, #14]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d21f      	bcs.n	8013efc <MAP_makeContourMap_dijkstra_modoki+0x418>
								us_cmap[y][x + 1] = uc_new;
 8013ebc:	8aba      	ldrh	r2, [r7, #20]
 8013ebe:	8afb      	ldrh	r3, [r7, #22]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	491a      	ldr	r1, [pc, #104]	; (8013f2c <MAP_makeContourMap_dijkstra_modoki+0x448>)
 8013ec4:	0152      	lsls	r2, r2, #5
 8013ec6:	4413      	add	r3, r2
 8013ec8:	89fa      	ldrh	r2, [r7, #14]
 8013eca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y][x+1] |= 0x40;
 8013ece:	8aba      	ldrh	r2, [r7, #20]
 8013ed0:	8afb      	ldrh	r3, [r7, #22]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	4918      	ldr	r1, [pc, #96]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013ed6:	0152      	lsls	r2, r2, #5
 8013ed8:	440a      	add	r2, r1
 8013eda:	4413      	add	r3, r2
 8013edc:	7819      	ldrb	r1, [r3, #0]
 8013ede:	8aba      	ldrh	r2, [r7, #20]
 8013ee0:	8afb      	ldrh	r3, [r7, #22]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8013ee8:	b2c8      	uxtb	r0, r1
 8013eea:	4913      	ldr	r1, [pc, #76]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013eec:	0152      	lsls	r2, r2, #5
 8013eee:	440a      	add	r2, r1
 8013ef0:	4413      	add	r3, r2
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	701a      	strb	r2, [r3, #0]
								uc_level++;
 8013ef6:	89bb      	ldrh	r3, [r7, #12]
 8013ef8:	3301      	adds	r3, #1
 8013efa:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x44) == 0x40) && (y != 0)) {
 8013efc:	7afb      	ldrb	r3, [r7, #11]
 8013efe:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013f02:	2b40      	cmp	r3, #64	; 0x40
 8013f04:	d148      	bne.n	8013f98 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
 8013f06:	8abb      	ldrh	r3, [r7, #20]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d045      	beq.n	8013f98 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
							if((g_Map_direction[y][x]&0x01) == 0x01){
 8013f0c:	8aba      	ldrh	r2, [r7, #20]
 8013f0e:	8afb      	ldrh	r3, [r7, #22]
 8013f10:	4909      	ldr	r1, [pc, #36]	; (8013f38 <MAP_makeContourMap_dijkstra_modoki+0x454>)
 8013f12:	0152      	lsls	r2, r2, #5
 8013f14:	440a      	add	r2, r1
 8013f16:	4413      	add	r3, r2
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	f003 0301 	and.w	r3, r3, #1
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d00c      	beq.n	8013f3c <MAP_makeContourMap_dijkstra_modoki+0x458>
								uc_new = uc_dase + 1;
 8013f22:	8a3b      	ldrh	r3, [r7, #16]
 8013f24:	3301      	adds	r3, #1
 8013f26:	81fb      	strh	r3, [r7, #14]
 8013f28:	e00b      	b.n	8013f42 <MAP_makeContourMap_dijkstra_modoki+0x45e>
 8013f2a:	bf00      	nop
 8013f2c:	20000b2c 	.word	0x20000b2c
 8013f30:	20000708 	.word	0x20000708
 8013f34:	2000001a 	.word	0x2000001a
 8013f38:	200002e4 	.word	0x200002e4
							}else{
								uc_new = uc_dase + 2;
 8013f3c:	8a3b      	ldrh	r3, [r7, #16]
 8013f3e:	3302      	adds	r3, #2
 8013f40:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y - 1][x] > uc_new) {
 8013f42:	8abb      	ldrh	r3, [r7, #20]
 8013f44:	1e5a      	subs	r2, r3, #1
 8013f46:	8afb      	ldrh	r3, [r7, #22]
 8013f48:	4949      	ldr	r1, [pc, #292]	; (8014070 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8013f4a:	0152      	lsls	r2, r2, #5
 8013f4c:	4413      	add	r3, r2
 8013f4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f52:	89fa      	ldrh	r2, [r7, #14]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d21f      	bcs.n	8013f98 <MAP_makeContourMap_dijkstra_modoki+0x4b4>
								us_cmap[y - 1][x] = uc_new;
 8013f58:	8abb      	ldrh	r3, [r7, #20]
 8013f5a:	1e5a      	subs	r2, r3, #1
 8013f5c:	8afb      	ldrh	r3, [r7, #22]
 8013f5e:	4944      	ldr	r1, [pc, #272]	; (8014070 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8013f60:	0152      	lsls	r2, r2, #5
 8013f62:	4413      	add	r3, r2
 8013f64:	89fa      	ldrh	r2, [r7, #14]
 8013f66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y-1][x] |= 0x01;
 8013f6a:	8abb      	ldrh	r3, [r7, #20]
 8013f6c:	1e5a      	subs	r2, r3, #1
 8013f6e:	8afb      	ldrh	r3, [r7, #22]
 8013f70:	4940      	ldr	r1, [pc, #256]	; (8014074 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8013f72:	0152      	lsls	r2, r2, #5
 8013f74:	440a      	add	r2, r1
 8013f76:	4413      	add	r3, r2
 8013f78:	7819      	ldrb	r1, [r3, #0]
 8013f7a:	8abb      	ldrh	r3, [r7, #20]
 8013f7c:	1e5a      	subs	r2, r3, #1
 8013f7e:	8afb      	ldrh	r3, [r7, #22]
 8013f80:	f041 0101 	orr.w	r1, r1, #1
 8013f84:	b2c8      	uxtb	r0, r1
 8013f86:	493b      	ldr	r1, [pc, #236]	; (8014074 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8013f88:	0152      	lsls	r2, r2, #5
 8013f8a:	440a      	add	r2, r1
 8013f8c:	4413      	add	r3, r2
 8013f8e:	4602      	mov	r2, r0
 8013f90:	701a      	strb	r2, [r3, #0]
								uc_level++;
 8013f92:	89bb      	ldrh	r3, [r7, #12]
 8013f94:	3301      	adds	r3, #1
 8013f96:	81bb      	strh	r3, [r7, #12]
							}
						}
						if (((uc_wallData & 0x88) == 0x80) && (x != 0)) {
 8013f98:	7afb      	ldrb	r3, [r7, #11]
 8013f9a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8013f9e:	2b80      	cmp	r3, #128	; 0x80
 8013fa0:	d13f      	bne.n	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
 8013fa2:	8afb      	ldrh	r3, [r7, #22]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d03c      	beq.n	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
							if((g_Map_direction[y][x]&0x04) == 0x04){
 8013fa8:	8aba      	ldrh	r2, [r7, #20]
 8013faa:	8afb      	ldrh	r3, [r7, #22]
 8013fac:	4931      	ldr	r1, [pc, #196]	; (8014074 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8013fae:	0152      	lsls	r2, r2, #5
 8013fb0:	440a      	add	r2, r1
 8013fb2:	4413      	add	r3, r2
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	f003 0304 	and.w	r3, r3, #4
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d003      	beq.n	8013fc6 <MAP_makeContourMap_dijkstra_modoki+0x4e2>
								uc_new = uc_dase + 1;
 8013fbe:	8a3b      	ldrh	r3, [r7, #16]
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	81fb      	strh	r3, [r7, #14]
 8013fc4:	e002      	b.n	8013fcc <MAP_makeContourMap_dijkstra_modoki+0x4e8>
							}else{
								uc_new = uc_dase + 2;
 8013fc6:	8a3b      	ldrh	r3, [r7, #16]
 8013fc8:	3302      	adds	r3, #2
 8013fca:	81fb      	strh	r3, [r7, #14]
							}
							if (us_cmap[y][x - 1] > uc_new) {
 8013fcc:	8aba      	ldrh	r2, [r7, #20]
 8013fce:	8afb      	ldrh	r3, [r7, #22]
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	4927      	ldr	r1, [pc, #156]	; (8014070 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8013fd4:	0152      	lsls	r2, r2, #5
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013fdc:	89fa      	ldrh	r2, [r7, #14]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d21f      	bcs.n	8014022 <MAP_makeContourMap_dijkstra_modoki+0x53e>
								us_cmap[y][x - 1] = uc_new;
 8013fe2:	8aba      	ldrh	r2, [r7, #20]
 8013fe4:	8afb      	ldrh	r3, [r7, #22]
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	4921      	ldr	r1, [pc, #132]	; (8014070 <MAP_makeContourMap_dijkstra_modoki+0x58c>)
 8013fea:	0152      	lsls	r2, r2, #5
 8013fec:	4413      	add	r3, r2
 8013fee:	89fa      	ldrh	r2, [r7, #14]
 8013ff0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								g_Map_direction[y][x-1] |= 0x04;
 8013ff4:	8aba      	ldrh	r2, [r7, #20]
 8013ff6:	8afb      	ldrh	r3, [r7, #22]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	491e      	ldr	r1, [pc, #120]	; (8014074 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8013ffc:	0152      	lsls	r2, r2, #5
 8013ffe:	440a      	add	r2, r1
 8014000:	4413      	add	r3, r2
 8014002:	7819      	ldrb	r1, [r3, #0]
 8014004:	8aba      	ldrh	r2, [r7, #20]
 8014006:	8afb      	ldrh	r3, [r7, #22]
 8014008:	3b01      	subs	r3, #1
 801400a:	f041 0104 	orr.w	r1, r1, #4
 801400e:	b2c8      	uxtb	r0, r1
 8014010:	4918      	ldr	r1, [pc, #96]	; (8014074 <MAP_makeContourMap_dijkstra_modoki+0x590>)
 8014012:	0152      	lsls	r2, r2, #5
 8014014:	440a      	add	r2, r1
 8014016:	4413      	add	r3, r2
 8014018:	4602      	mov	r2, r0
 801401a:	701a      	strb	r2, [r3, #0]
								uc_level++;
 801401c:	89bb      	ldrh	r3, [r7, #12]
 801401e:	3301      	adds	r3, #1
 8014020:	81bb      	strh	r3, [r7, #12]
							}
						}
					}
				}
				if(uc_dase != 4095)uc_level++;
 8014022:	8a3b      	ldrh	r3, [r7, #16]
 8014024:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014028:	4293      	cmp	r3, r2
 801402a:	d002      	beq.n	8014032 <MAP_makeContourMap_dijkstra_modoki+0x54e>
 801402c:	89bb      	ldrh	r3, [r7, #12]
 801402e:	3301      	adds	r3, #1
 8014030:	81bb      	strh	r3, [r7, #12]
			for (x = 0; x < MAP_X_SIZE; x++) {
 8014032:	8afb      	ldrh	r3, [r7, #22]
 8014034:	3301      	adds	r3, #1
 8014036:	82fb      	strh	r3, [r7, #22]
 8014038:	8afb      	ldrh	r3, [r7, #22]
 801403a:	2b1f      	cmp	r3, #31
 801403c:	f67f ae32 	bls.w	8013ca4 <MAP_makeContourMap_dijkstra_modoki+0x1c0>
 8014040:	e000      	b.n	8014044 <MAP_makeContourMap_dijkstra_modoki+0x560>
					if (uc_max_x+1 < x) break;
 8014042:	bf00      	nop
		for (y = 0; y < MAP_Y_SIZE; y++) {
 8014044:	8abb      	ldrh	r3, [r7, #20]
 8014046:	3301      	adds	r3, #1
 8014048:	82bb      	strh	r3, [r7, #20]
 801404a:	8abb      	ldrh	r3, [r7, #20]
 801404c:	2b1f      	cmp	r3, #31
 801404e:	f67f ae11 	bls.w	8013c74 <MAP_makeContourMap_dijkstra_modoki+0x190>
 8014052:	e000      	b.n	8014056 <MAP_makeContourMap_dijkstra_modoki+0x572>
			if (uc_max_y+1 < y) break;
 8014054:	bf00      	nop
			}
		}
		uc_dase = uc_dase + 1;
 8014056:	8a3b      	ldrh	r3, [r7, #16]
 8014058:	3301      	adds	r3, #1
 801405a:	823b      	strh	r3, [r7, #16]
	} while (uc_level != 0);
 801405c:	89bb      	ldrh	r3, [r7, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	f47f ae00 	bne.w	8013c64 <MAP_makeContourMap_dijkstra_modoki+0x180>

}
 8014064:	bf00      	nop
 8014066:	bf00      	nop
 8014068:	3718      	adds	r7, #24
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20000b2c 	.word	0x20000b2c
 8014074:	200002e4 	.word	0x200002e4

08014078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8014078:	480d      	ldr	r0, [pc, #52]	; (80140b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801407a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801407c:	480d      	ldr	r0, [pc, #52]	; (80140b4 <LoopForever+0x6>)
  ldr r1, =_edata
 801407e:	490e      	ldr	r1, [pc, #56]	; (80140b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014080:	4a0e      	ldr	r2, [pc, #56]	; (80140bc <LoopForever+0xe>)
  movs r3, #0
 8014082:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8014084:	e002      	b.n	801408c <LoopCopyDataInit>

08014086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801408a:	3304      	adds	r3, #4

0801408c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801408c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801408e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014090:	d3f9      	bcc.n	8014086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014092:	4a0b      	ldr	r2, [pc, #44]	; (80140c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8014094:	4c0b      	ldr	r4, [pc, #44]	; (80140c4 <LoopForever+0x16>)
  movs r3, #0
 8014096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014098:	e001      	b.n	801409e <LoopFillZerobss>

0801409a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801409a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801409c:	3204      	adds	r2, #4

0801409e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801409e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80140a0:	d3fb      	bcc.n	801409a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80140a2:	f7f0 f9a5 	bl	80043f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80140a6:	f001 fc91 	bl	80159cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80140aa:	f7ee fa7b 	bl	80025a4 <main>

080140ae <LoopForever>:

LoopForever:
    b LoopForever
 80140ae:	e7fe      	b.n	80140ae <LoopForever>
  ldr   r0, =_estack
 80140b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80140b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80140b8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80140bc:	0801c860 	.word	0x0801c860
  ldr r2, =_sbss
 80140c0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80140c4:	2000e608 	.word	0x2000e608

080140c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80140c8:	e7fe      	b.n	80140c8 <ADC1_2_IRQHandler>

080140ca <LL_ADC_REG_SetSequencerLength>:
{
 80140ca:	b480      	push	{r7}
 80140cc:	b083      	sub	sp, #12
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
 80140d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140d8:	f023 020f 	bic.w	r2, r3, #15
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	431a      	orrs	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80140e4:	bf00      	nop
 80140e6:	370c      	adds	r7, #12
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr

080140f0 <LL_ADC_IsEnabled>:
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	f003 0301 	and.w	r3, r3, #1
 8014100:	2b01      	cmp	r3, #1
 8014102:	d101      	bne.n	8014108 <LL_ADC_IsEnabled+0x18>
 8014104:	2301      	movs	r3, #1
 8014106:	e000      	b.n	801410a <LL_ADC_IsEnabled+0x1a>
 8014108:	2300      	movs	r3, #0
}
 801410a:	4618      	mov	r0, r3
 801410c:	370c      	adds	r7, #12
 801410e:	46bd      	mov	sp, r7
 8014110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014114:	4770      	bx	lr
	...

08014118 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8014118:	b590      	push	{r4, r7, lr}
 801411a:	b085      	sub	sp, #20
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8014122:	2300      	movs	r3, #0
 8014124:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	4a27      	ldr	r2, [pc, #156]	; (80141c8 <LL_ADC_CommonInit+0xb0>)
 801412a:	4293      	cmp	r3, r2
 801412c:	d10f      	bne.n	801414e <LL_ADC_CommonInit+0x36>
 801412e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8014132:	f7ff ffdd 	bl	80140f0 <LL_ADC_IsEnabled>
 8014136:	4604      	mov	r4, r0
 8014138:	4824      	ldr	r0, [pc, #144]	; (80141cc <LL_ADC_CommonInit+0xb4>)
 801413a:	f7ff ffd9 	bl	80140f0 <LL_ADC_IsEnabled>
 801413e:	4603      	mov	r3, r0
 8014140:	4323      	orrs	r3, r4
 8014142:	2b00      	cmp	r3, #0
 8014144:	bf0c      	ite	eq
 8014146:	2301      	moveq	r3, #1
 8014148:	2300      	movne	r3, #0
 801414a:	b2db      	uxtb	r3, r3
 801414c:	e012      	b.n	8014174 <LL_ADC_CommonInit+0x5c>
 801414e:	4820      	ldr	r0, [pc, #128]	; (80141d0 <LL_ADC_CommonInit+0xb8>)
 8014150:	f7ff ffce 	bl	80140f0 <LL_ADC_IsEnabled>
 8014154:	4604      	mov	r4, r0
 8014156:	481f      	ldr	r0, [pc, #124]	; (80141d4 <LL_ADC_CommonInit+0xbc>)
 8014158:	f7ff ffca 	bl	80140f0 <LL_ADC_IsEnabled>
 801415c:	4603      	mov	r3, r0
 801415e:	431c      	orrs	r4, r3
 8014160:	481d      	ldr	r0, [pc, #116]	; (80141d8 <LL_ADC_CommonInit+0xc0>)
 8014162:	f7ff ffc5 	bl	80140f0 <LL_ADC_IsEnabled>
 8014166:	4603      	mov	r3, r0
 8014168:	4323      	orrs	r3, r4
 801416a:	2b00      	cmp	r3, #0
 801416c:	bf0c      	ite	eq
 801416e:	2301      	moveq	r3, #1
 8014170:	2300      	movne	r3, #0
 8014172:	b2db      	uxtb	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d020      	beq.n	80141ba <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d012      	beq.n	80141a6 <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	689a      	ldr	r2, [r3, #8]
 8014184:	4b15      	ldr	r3, [pc, #84]	; (80141dc <LL_ADC_CommonInit+0xc4>)
 8014186:	4013      	ands	r3, r2
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	6811      	ldr	r1, [r2, #0]
 801418c:	683a      	ldr	r2, [r7, #0]
 801418e:	6852      	ldr	r2, [r2, #4]
 8014190:	4311      	orrs	r1, r2
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	6892      	ldr	r2, [r2, #8]
 8014196:	4311      	orrs	r1, r2
 8014198:	683a      	ldr	r2, [r7, #0]
 801419a:	68d2      	ldr	r2, [r2, #12]
 801419c:	430a      	orrs	r2, r1
 801419e:	431a      	orrs	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	609a      	str	r2, [r3, #8]
 80141a4:	e00b      	b.n	80141be <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	689a      	ldr	r2, [r3, #8]
 80141aa:	4b0c      	ldr	r3, [pc, #48]	; (80141dc <LL_ADC_CommonInit+0xc4>)
 80141ac:	4013      	ands	r3, r2
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	6812      	ldr	r2, [r2, #0]
 80141b2:	431a      	orrs	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	609a      	str	r2, [r3, #8]
 80141b8:	e001      	b.n	80141be <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80141ba:	2301      	movs	r3, #1
 80141bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80141be:	7bfb      	ldrb	r3, [r7, #15]
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3714      	adds	r7, #20
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd90      	pop	{r4, r7, pc}
 80141c8:	50000300 	.word	0x50000300
 80141cc:	50000100 	.word	0x50000100
 80141d0:	50000400 	.word	0x50000400
 80141d4:	50000500 	.word	0x50000500
 80141d8:	50000600 	.word	0x50000600
 80141dc:	ffc030e0 	.word	0xffc030e0

080141e0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80141ea:	2300      	movs	r3, #0
 80141ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff ff7e 	bl	80140f0 <LL_ADC_IsEnabled>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d111      	bne.n	801421e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014202:	f023 0318 	bic.w	r3, r3, #24
 8014206:	683a      	ldr	r2, [r7, #0]
 8014208:	6811      	ldr	r1, [r2, #0]
 801420a:	683a      	ldr	r2, [r7, #0]
 801420c:	6852      	ldr	r2, [r2, #4]
 801420e:	4311      	orrs	r1, r2
 8014210:	683a      	ldr	r2, [r7, #0]
 8014212:	6892      	ldr	r2, [r2, #8]
 8014214:	430a      	orrs	r2, r1
 8014216:	431a      	orrs	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	60da      	str	r2, [r3, #12]
 801421c:	e001      	b.n	8014222 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 801421e:	2301      	movs	r3, #1
 8014220:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014222:	7bfb      	ldrb	r3, [r7, #15]
}
 8014224:	4618      	mov	r0, r3
 8014226:	3710      	adds	r7, #16
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8014236:	2300      	movs	r3, #0
 8014238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7ff ff58 	bl	80140f0 <LL_ADC_IsEnabled>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d132      	bne.n	80142ac <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d015      	beq.n	801427a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	68da      	ldr	r2, [r3, #12]
 8014252:	4b1a      	ldr	r3, [pc, #104]	; (80142bc <LL_ADC_REG_Init+0x90>)
 8014254:	4013      	ands	r3, r2
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	6811      	ldr	r1, [r2, #0]
 801425a:	683a      	ldr	r2, [r7, #0]
 801425c:	6892      	ldr	r2, [r2, #8]
 801425e:	4311      	orrs	r1, r2
 8014260:	683a      	ldr	r2, [r7, #0]
 8014262:	68d2      	ldr	r2, [r2, #12]
 8014264:	4311      	orrs	r1, r2
 8014266:	683a      	ldr	r2, [r7, #0]
 8014268:	6912      	ldr	r2, [r2, #16]
 801426a:	4311      	orrs	r1, r2
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	6952      	ldr	r2, [r2, #20]
 8014270:	430a      	orrs	r2, r1
 8014272:	431a      	orrs	r2, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	60da      	str	r2, [r3, #12]
 8014278:	e011      	b.n	801429e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	68da      	ldr	r2, [r3, #12]
 801427e:	4b0f      	ldr	r3, [pc, #60]	; (80142bc <LL_ADC_REG_Init+0x90>)
 8014280:	4013      	ands	r3, r2
 8014282:	683a      	ldr	r2, [r7, #0]
 8014284:	6811      	ldr	r1, [r2, #0]
 8014286:	683a      	ldr	r2, [r7, #0]
 8014288:	68d2      	ldr	r2, [r2, #12]
 801428a:	4311      	orrs	r1, r2
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	6912      	ldr	r2, [r2, #16]
 8014290:	4311      	orrs	r1, r2
 8014292:	683a      	ldr	r2, [r7, #0]
 8014294:	6952      	ldr	r2, [r2, #20]
 8014296:	430a      	orrs	r2, r1
 8014298:	431a      	orrs	r2, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	4619      	mov	r1, r3
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7ff ff10 	bl	80140ca <LL_ADC_REG_SetSequencerLength>
 80142aa:	e001      	b.n	80142b0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80142ac:	2301      	movs	r3, #1
 80142ae:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80142b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	fff0c01c 	.word	0xfff0c01c

080142c0 <LL_GPIO_SetPinMode>:
{
 80142c0:	b480      	push	{r7}
 80142c2:	b08b      	sub	sp, #44	; 0x2c
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	fa93 f3a3 	rbit	r3, r3
 80142da:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d101      	bne.n	80142ea <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80142e6:	2320      	movs	r3, #32
 80142e8:	e003      	b.n	80142f2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	fab3 f383 	clz	r3, r3
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	2103      	movs	r1, #3
 80142f6:	fa01 f303 	lsl.w	r3, r1, r3
 80142fa:	43db      	mvns	r3, r3
 80142fc:	401a      	ands	r2, r3
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014302:	6a3b      	ldr	r3, [r7, #32]
 8014304:	fa93 f3a3 	rbit	r3, r3
 8014308:	61fb      	str	r3, [r7, #28]
  return result;
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	2b00      	cmp	r3, #0
 8014312:	d101      	bne.n	8014318 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8014314:	2320      	movs	r3, #32
 8014316:	e003      	b.n	8014320 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	fab3 f383 	clz	r3, r3
 801431e:	b2db      	uxtb	r3, r3
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	6879      	ldr	r1, [r7, #4]
 8014324:	fa01 f303 	lsl.w	r3, r1, r3
 8014328:	431a      	orrs	r2, r3
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	601a      	str	r2, [r3, #0]
}
 801432e:	bf00      	nop
 8014330:	372c      	adds	r7, #44	; 0x2c
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <LL_GPIO_SetPinOutputType>:
{
 801433a:	b480      	push	{r7}
 801433c:	b085      	sub	sp, #20
 801433e:	af00      	add	r7, sp, #0
 8014340:	60f8      	str	r0, [r7, #12]
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	43db      	mvns	r3, r3
 801434e:	401a      	ands	r2, r3
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	6879      	ldr	r1, [r7, #4]
 8014354:	fb01 f303 	mul.w	r3, r1, r3
 8014358:	431a      	orrs	r2, r3
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	605a      	str	r2, [r3, #4]
}
 801435e:	bf00      	nop
 8014360:	3714      	adds	r7, #20
 8014362:	46bd      	mov	sp, r7
 8014364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014368:	4770      	bx	lr

0801436a <LL_GPIO_SetPinSpeed>:
{
 801436a:	b480      	push	{r7}
 801436c:	b08b      	sub	sp, #44	; 0x2c
 801436e:	af00      	add	r7, sp, #0
 8014370:	60f8      	str	r0, [r7, #12]
 8014372:	60b9      	str	r1, [r7, #8]
 8014374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	689a      	ldr	r2, [r3, #8]
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	fa93 f3a3 	rbit	r3, r3
 8014384:	613b      	str	r3, [r7, #16]
  return result;
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8014390:	2320      	movs	r3, #32
 8014392:	e003      	b.n	801439c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	fab3 f383 	clz	r3, r3
 801439a:	b2db      	uxtb	r3, r3
 801439c:	005b      	lsls	r3, r3, #1
 801439e:	2103      	movs	r1, #3
 80143a0:	fa01 f303 	lsl.w	r3, r1, r3
 80143a4:	43db      	mvns	r3, r3
 80143a6:	401a      	ands	r2, r3
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143ac:	6a3b      	ldr	r3, [r7, #32]
 80143ae:	fa93 f3a3 	rbit	r3, r3
 80143b2:	61fb      	str	r3, [r7, #28]
  return result;
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80143be:	2320      	movs	r3, #32
 80143c0:	e003      	b.n	80143ca <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	fab3 f383 	clz	r3, r3
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	6879      	ldr	r1, [r7, #4]
 80143ce:	fa01 f303 	lsl.w	r3, r1, r3
 80143d2:	431a      	orrs	r2, r3
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	609a      	str	r2, [r3, #8]
}
 80143d8:	bf00      	nop
 80143da:	372c      	adds	r7, #44	; 0x2c
 80143dc:	46bd      	mov	sp, r7
 80143de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e2:	4770      	bx	lr

080143e4 <LL_GPIO_SetPinPull>:
{
 80143e4:	b480      	push	{r7}
 80143e6:	b08b      	sub	sp, #44	; 0x2c
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	60f8      	str	r0, [r7, #12]
 80143ec:	60b9      	str	r1, [r7, #8]
 80143ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	68da      	ldr	r2, [r3, #12]
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	fa93 f3a3 	rbit	r3, r3
 80143fe:	613b      	str	r3, [r7, #16]
  return result;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d101      	bne.n	801440e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801440a:	2320      	movs	r3, #32
 801440c:	e003      	b.n	8014416 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	fab3 f383 	clz	r3, r3
 8014414:	b2db      	uxtb	r3, r3
 8014416:	005b      	lsls	r3, r3, #1
 8014418:	2103      	movs	r1, #3
 801441a:	fa01 f303 	lsl.w	r3, r1, r3
 801441e:	43db      	mvns	r3, r3
 8014420:	401a      	ands	r2, r3
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014426:	6a3b      	ldr	r3, [r7, #32]
 8014428:	fa93 f3a3 	rbit	r3, r3
 801442c:	61fb      	str	r3, [r7, #28]
  return result;
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014434:	2b00      	cmp	r3, #0
 8014436:	d101      	bne.n	801443c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8014438:	2320      	movs	r3, #32
 801443a:	e003      	b.n	8014444 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443e:	fab3 f383 	clz	r3, r3
 8014442:	b2db      	uxtb	r3, r3
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	6879      	ldr	r1, [r7, #4]
 8014448:	fa01 f303 	lsl.w	r3, r1, r3
 801444c:	431a      	orrs	r2, r3
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	60da      	str	r2, [r3, #12]
}
 8014452:	bf00      	nop
 8014454:	372c      	adds	r7, #44	; 0x2c
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr

0801445e <LL_GPIO_SetAFPin_0_7>:
{
 801445e:	b480      	push	{r7}
 8014460:	b08b      	sub	sp, #44	; 0x2c
 8014462:	af00      	add	r7, sp, #0
 8014464:	60f8      	str	r0, [r7, #12]
 8014466:	60b9      	str	r1, [r7, #8]
 8014468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	6a1a      	ldr	r2, [r3, #32]
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	fa93 f3a3 	rbit	r3, r3
 8014478:	613b      	str	r3, [r7, #16]
  return result;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d101      	bne.n	8014488 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8014484:	2320      	movs	r3, #32
 8014486:	e003      	b.n	8014490 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	fab3 f383 	clz	r3, r3
 801448e:	b2db      	uxtb	r3, r3
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	210f      	movs	r1, #15
 8014494:	fa01 f303 	lsl.w	r3, r1, r3
 8014498:	43db      	mvns	r3, r3
 801449a:	401a      	ands	r2, r3
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	fa93 f3a3 	rbit	r3, r3
 80144a6:	61fb      	str	r3, [r7, #28]
  return result;
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d101      	bne.n	80144b6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80144b2:	2320      	movs	r3, #32
 80144b4:	e003      	b.n	80144be <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80144b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b8:	fab3 f383 	clz	r3, r3
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	6879      	ldr	r1, [r7, #4]
 80144c2:	fa01 f303 	lsl.w	r3, r1, r3
 80144c6:	431a      	orrs	r2, r3
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	621a      	str	r2, [r3, #32]
}
 80144cc:	bf00      	nop
 80144ce:	372c      	adds	r7, #44	; 0x2c
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <LL_GPIO_SetAFPin_8_15>:
{
 80144d8:	b480      	push	{r7}
 80144da:	b08b      	sub	sp, #44	; 0x2c
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	0a1b      	lsrs	r3, r3, #8
 80144ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	fa93 f3a3 	rbit	r3, r3
 80144f4:	613b      	str	r3, [r7, #16]
  return result;
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d101      	bne.n	8014504 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8014500:	2320      	movs	r3, #32
 8014502:	e003      	b.n	801450c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	fab3 f383 	clz	r3, r3
 801450a:	b2db      	uxtb	r3, r3
 801450c:	009b      	lsls	r3, r3, #2
 801450e:	210f      	movs	r1, #15
 8014510:	fa01 f303 	lsl.w	r3, r1, r3
 8014514:	43db      	mvns	r3, r3
 8014516:	401a      	ands	r2, r3
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	0a1b      	lsrs	r3, r3, #8
 801451c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801451e:	6a3b      	ldr	r3, [r7, #32]
 8014520:	fa93 f3a3 	rbit	r3, r3
 8014524:	61fb      	str	r3, [r7, #28]
  return result;
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452c:	2b00      	cmp	r3, #0
 801452e:	d101      	bne.n	8014534 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8014530:	2320      	movs	r3, #32
 8014532:	e003      	b.n	801453c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8014534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014536:	fab3 f383 	clz	r3, r3
 801453a:	b2db      	uxtb	r3, r3
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	6879      	ldr	r1, [r7, #4]
 8014540:	fa01 f303 	lsl.w	r3, r1, r3
 8014544:	431a      	orrs	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	625a      	str	r2, [r3, #36]	; 0x24
}
 801454a:	bf00      	nop
 801454c:	372c      	adds	r7, #44	; 0x2c
 801454e:	46bd      	mov	sp, r7
 8014550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014554:	4770      	bx	lr

08014556 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b088      	sub	sp, #32
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	fa93 f3a3 	rbit	r3, r3
 801456c:	60fb      	str	r3, [r7, #12]
  return result;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d101      	bne.n	801457c <LL_GPIO_Init+0x26>
    return 32U;
 8014578:	2320      	movs	r3, #32
 801457a:	e003      	b.n	8014584 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	fab3 f383 	clz	r3, r3
 8014582:	b2db      	uxtb	r3, r3
 8014584:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8014586:	e048      	b.n	801461a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	2101      	movs	r1, #1
 801458e:	69fb      	ldr	r3, [r7, #28]
 8014590:	fa01 f303 	lsl.w	r3, r1, r3
 8014594:	4013      	ands	r3, r2
 8014596:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d03a      	beq.n	8014614 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d003      	beq.n	80145ae <LL_GPIO_Init+0x58>
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	2b02      	cmp	r3, #2
 80145ac:	d10e      	bne.n	80145cc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	689b      	ldr	r3, [r3, #8]
 80145b2:	461a      	mov	r2, r3
 80145b4:	69b9      	ldr	r1, [r7, #24]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff fed7 	bl	801436a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	6819      	ldr	r1, [r3, #0]
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	461a      	mov	r2, r3
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7ff feb7 	bl	801433a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	691b      	ldr	r3, [r3, #16]
 80145d0:	461a      	mov	r2, r3
 80145d2:	69b9      	ldr	r1, [r7, #24]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff ff05 	bl	80143e4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	2b02      	cmp	r3, #2
 80145e0:	d111      	bne.n	8014606 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	2bff      	cmp	r3, #255	; 0xff
 80145e6:	d807      	bhi.n	80145f8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	695b      	ldr	r3, [r3, #20]
 80145ec:	461a      	mov	r2, r3
 80145ee:	69b9      	ldr	r1, [r7, #24]
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff ff34 	bl	801445e <LL_GPIO_SetAFPin_0_7>
 80145f6:	e006      	b.n	8014606 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	695b      	ldr	r3, [r3, #20]
 80145fc:	461a      	mov	r2, r3
 80145fe:	69b9      	ldr	r1, [r7, #24]
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff ff69 	bl	80144d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	461a      	mov	r2, r3
 801460c:	69b9      	ldr	r1, [r7, #24]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7ff fe56 	bl	80142c0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8014614:	69fb      	ldr	r3, [r7, #28]
 8014616:	3301      	adds	r3, #1
 8014618:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	681a      	ldr	r2, [r3, #0]
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	fa22 f303 	lsr.w	r3, r2, r3
 8014624:	2b00      	cmp	r3, #0
 8014626:	d1af      	bne.n	8014588 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8014628:	2300      	movs	r3, #0
}
 801462a:	4618      	mov	r0, r3
 801462c:	3720      	adds	r7, #32
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
	...

08014634 <LL_RCC_HSI_IsReady>:
{
 8014634:	b480      	push	{r7}
 8014636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8014638:	4b07      	ldr	r3, [pc, #28]	; (8014658 <LL_RCC_HSI_IsReady+0x24>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014644:	d101      	bne.n	801464a <LL_RCC_HSI_IsReady+0x16>
 8014646:	2301      	movs	r3, #1
 8014648:	e000      	b.n	801464c <LL_RCC_HSI_IsReady+0x18>
 801464a:	2300      	movs	r3, #0
}
 801464c:	4618      	mov	r0, r3
 801464e:	46bd      	mov	sp, r7
 8014650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop
 8014658:	40021000 	.word	0x40021000

0801465c <LL_RCC_LSE_IsReady>:
{
 801465c:	b480      	push	{r7}
 801465e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8014660:	4b07      	ldr	r3, [pc, #28]	; (8014680 <LL_RCC_LSE_IsReady+0x24>)
 8014662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014666:	f003 0302 	and.w	r3, r3, #2
 801466a:	2b02      	cmp	r3, #2
 801466c:	d101      	bne.n	8014672 <LL_RCC_LSE_IsReady+0x16>
 801466e:	2301      	movs	r3, #1
 8014670:	e000      	b.n	8014674 <LL_RCC_LSE_IsReady+0x18>
 8014672:	2300      	movs	r3, #0
}
 8014674:	4618      	mov	r0, r3
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop
 8014680:	40021000 	.word	0x40021000

08014684 <LL_RCC_GetSysClkSource>:
{
 8014684:	b480      	push	{r7}
 8014686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8014688:	4b04      	ldr	r3, [pc, #16]	; (801469c <LL_RCC_GetSysClkSource+0x18>)
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	f003 030c 	and.w	r3, r3, #12
}
 8014690:	4618      	mov	r0, r3
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr
 801469a:	bf00      	nop
 801469c:	40021000 	.word	0x40021000

080146a0 <LL_RCC_GetAHBPrescaler>:
{
 80146a0:	b480      	push	{r7}
 80146a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80146a4:	4b04      	ldr	r3, [pc, #16]	; (80146b8 <LL_RCC_GetAHBPrescaler+0x18>)
 80146a6:	689b      	ldr	r3, [r3, #8]
 80146a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr
 80146b6:	bf00      	nop
 80146b8:	40021000 	.word	0x40021000

080146bc <LL_RCC_GetAPB1Prescaler>:
{
 80146bc:	b480      	push	{r7}
 80146be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80146c0:	4b04      	ldr	r3, [pc, #16]	; (80146d4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80146c2:	689b      	ldr	r3, [r3, #8]
 80146c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	40021000 	.word	0x40021000

080146d8 <LL_RCC_GetAPB2Prescaler>:
{
 80146d8:	b480      	push	{r7}
 80146da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80146dc:	4b04      	ldr	r3, [pc, #16]	; (80146f0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	40021000 	.word	0x40021000

080146f4 <LL_RCC_GetUSARTClockSource>:
{
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80146fc:	4b06      	ldr	r3, [pc, #24]	; (8014718 <LL_RCC_GetUSARTClockSource+0x24>)
 80146fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	401a      	ands	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	041b      	lsls	r3, r3, #16
 801470a:	4313      	orrs	r3, r2
}
 801470c:	4618      	mov	r0, r3
 801470e:	370c      	adds	r7, #12
 8014710:	46bd      	mov	sp, r7
 8014712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014716:	4770      	bx	lr
 8014718:	40021000 	.word	0x40021000

0801471c <LL_RCC_GetUARTClockSource>:
{
 801471c:	b480      	push	{r7}
 801471e:	b083      	sub	sp, #12
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8014724:	4b06      	ldr	r3, [pc, #24]	; (8014740 <LL_RCC_GetUARTClockSource+0x24>)
 8014726:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	401a      	ands	r2, r3
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	041b      	lsls	r3, r3, #16
 8014732:	4313      	orrs	r3, r2
}
 8014734:	4618      	mov	r0, r3
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr
 8014740:	40021000 	.word	0x40021000

08014744 <LL_RCC_PLL_GetMainSource>:
{
 8014744:	b480      	push	{r7}
 8014746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8014748:	4b04      	ldr	r3, [pc, #16]	; (801475c <LL_RCC_PLL_GetMainSource+0x18>)
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	f003 0303 	and.w	r3, r3, #3
}
 8014750:	4618      	mov	r0, r3
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	40021000 	.word	0x40021000

08014760 <LL_RCC_PLL_GetN>:
{
 8014760:	b480      	push	{r7}
 8014762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8014764:	4b04      	ldr	r3, [pc, #16]	; (8014778 <LL_RCC_PLL_GetN+0x18>)
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	0a1b      	lsrs	r3, r3, #8
 801476a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801476e:	4618      	mov	r0, r3
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr
 8014778:	40021000 	.word	0x40021000

0801477c <LL_RCC_PLL_GetR>:
{
 801477c:	b480      	push	{r7}
 801477e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8014780:	4b04      	ldr	r3, [pc, #16]	; (8014794 <LL_RCC_PLL_GetR+0x18>)
 8014782:	68db      	ldr	r3, [r3, #12]
 8014784:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8014788:	4618      	mov	r0, r3
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
 8014792:	bf00      	nop
 8014794:	40021000 	.word	0x40021000

08014798 <LL_RCC_PLL_GetDivider>:
{
 8014798:	b480      	push	{r7}
 801479a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 801479c:	4b04      	ldr	r3, [pc, #16]	; (80147b0 <LL_RCC_PLL_GetDivider+0x18>)
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	40021000 	.word	0x40021000

080147b4 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b084      	sub	sp, #16
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80147bc:	2300      	movs	r3, #0
 80147be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2b03      	cmp	r3, #3
 80147c4:	d132      	bne.n	801482c <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f7ff ff94 	bl	80146f4 <LL_RCC_GetUSARTClockSource>
 80147cc:	4603      	mov	r3, r0
 80147ce:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80147d2:	d016      	beq.n	8014802 <LL_RCC_GetUSARTClockFreq+0x4e>
 80147d4:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80147d8:	d81c      	bhi.n	8014814 <LL_RCC_GetUSARTClockFreq+0x60>
 80147da:	4a52      	ldr	r2, [pc, #328]	; (8014924 <LL_RCC_GetUSARTClockFreq+0x170>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d003      	beq.n	80147e8 <LL_RCC_GetUSARTClockFreq+0x34>
 80147e0:	4a51      	ldr	r2, [pc, #324]	; (8014928 <LL_RCC_GetUSARTClockFreq+0x174>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d004      	beq.n	80147f0 <LL_RCC_GetUSARTClockFreq+0x3c>
 80147e6:	e015      	b.n	8014814 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80147e8:	f000 f934 	bl	8014a54 <RCC_GetSystemClockFreq>
 80147ec:	60f8      	str	r0, [r7, #12]
        break;
 80147ee:	e094      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80147f0:	f7ff ff20 	bl	8014634 <LL_RCC_HSI_IsReady>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	f000 8082 	beq.w	8014900 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 80147fc:	4b4b      	ldr	r3, [pc, #300]	; (801492c <LL_RCC_GetUSARTClockFreq+0x178>)
 80147fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8014800:	e07e      	b.n	8014900 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8014802:	f7ff ff2b 	bl	801465c <LL_RCC_LSE_IsReady>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d07b      	beq.n	8014904 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 801480c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014810:	60fb      	str	r3, [r7, #12]
        }
        break;
 8014812:	e077      	b.n	8014904 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8014814:	f000 f91e 	bl	8014a54 <RCC_GetSystemClockFreq>
 8014818:	4603      	mov	r3, r0
 801481a:	4618      	mov	r0, r3
 801481c:	f000 f940 	bl	8014aa0 <RCC_GetHCLKClockFreq>
 8014820:	4603      	mov	r3, r0
 8014822:	4618      	mov	r0, r3
 8014824:	f000 f96a 	bl	8014afc <RCC_GetPCLK2ClockFreq>
 8014828:	60f8      	str	r0, [r7, #12]
        break;
 801482a:	e076      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2b0c      	cmp	r3, #12
 8014830:	d131      	bne.n	8014896 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f7ff ff5e 	bl	80146f4 <LL_RCC_GetUSARTClockSource>
 8014838:	4603      	mov	r3, r0
 801483a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 801483e:	d015      	beq.n	801486c <LL_RCC_GetUSARTClockFreq+0xb8>
 8014840:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8014844:	d81b      	bhi.n	801487e <LL_RCC_GetUSARTClockFreq+0xca>
 8014846:	4a3a      	ldr	r2, [pc, #232]	; (8014930 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d003      	beq.n	8014854 <LL_RCC_GetUSARTClockFreq+0xa0>
 801484c:	4a39      	ldr	r2, [pc, #228]	; (8014934 <LL_RCC_GetUSARTClockFreq+0x180>)
 801484e:	4293      	cmp	r3, r2
 8014850:	d004      	beq.n	801485c <LL_RCC_GetUSARTClockFreq+0xa8>
 8014852:	e014      	b.n	801487e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8014854:	f000 f8fe 	bl	8014a54 <RCC_GetSystemClockFreq>
 8014858:	60f8      	str	r0, [r7, #12]
        break;
 801485a:	e05e      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801485c:	f7ff feea 	bl	8014634 <LL_RCC_HSI_IsReady>
 8014860:	4603      	mov	r3, r0
 8014862:	2b00      	cmp	r3, #0
 8014864:	d050      	beq.n	8014908 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 8014866:	4b31      	ldr	r3, [pc, #196]	; (801492c <LL_RCC_GetUSARTClockFreq+0x178>)
 8014868:	60fb      	str	r3, [r7, #12]
        }
        break;
 801486a:	e04d      	b.n	8014908 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801486c:	f7ff fef6 	bl	801465c <LL_RCC_LSE_IsReady>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d04a      	beq.n	801490c <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 8014876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801487a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801487c:	e046      	b.n	801490c <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801487e:	f000 f8e9 	bl	8014a54 <RCC_GetSystemClockFreq>
 8014882:	4603      	mov	r3, r0
 8014884:	4618      	mov	r0, r3
 8014886:	f000 f90b 	bl	8014aa0 <RCC_GetHCLKClockFreq>
 801488a:	4603      	mov	r3, r0
 801488c:	4618      	mov	r0, r3
 801488e:	f000 f91f 	bl	8014ad0 <RCC_GetPCLK1ClockFreq>
 8014892:	60f8      	str	r0, [r7, #12]
        break;
 8014894:	e041      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2b30      	cmp	r3, #48	; 0x30
 801489a:	d139      	bne.n	8014910 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f7ff ff29 	bl	80146f4 <LL_RCC_GetUSARTClockSource>
 80148a2:	4603      	mov	r3, r0
 80148a4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80148a8:	d015      	beq.n	80148d6 <LL_RCC_GetUSARTClockFreq+0x122>
 80148aa:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80148ae:	d81b      	bhi.n	80148e8 <LL_RCC_GetUSARTClockFreq+0x134>
 80148b0:	4a21      	ldr	r2, [pc, #132]	; (8014938 <LL_RCC_GetUSARTClockFreq+0x184>)
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d003      	beq.n	80148be <LL_RCC_GetUSARTClockFreq+0x10a>
 80148b6:	4a21      	ldr	r2, [pc, #132]	; (801493c <LL_RCC_GetUSARTClockFreq+0x188>)
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d004      	beq.n	80148c6 <LL_RCC_GetUSARTClockFreq+0x112>
 80148bc:	e014      	b.n	80148e8 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80148be:	f000 f8c9 	bl	8014a54 <RCC_GetSystemClockFreq>
 80148c2:	60f8      	str	r0, [r7, #12]
          break;
 80148c4:	e029      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80148c6:	f7ff feb5 	bl	8014634 <LL_RCC_HSI_IsReady>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d021      	beq.n	8014914 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 80148d0:	4b16      	ldr	r3, [pc, #88]	; (801492c <LL_RCC_GetUSARTClockFreq+0x178>)
 80148d2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80148d4:	e01e      	b.n	8014914 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80148d6:	f7ff fec1 	bl	801465c <LL_RCC_LSE_IsReady>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d01b      	beq.n	8014918 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 80148e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148e4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80148e6:	e017      	b.n	8014918 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80148e8:	f000 f8b4 	bl	8014a54 <RCC_GetSystemClockFreq>
 80148ec:	4603      	mov	r3, r0
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 f8d6 	bl	8014aa0 <RCC_GetHCLKClockFreq>
 80148f4:	4603      	mov	r3, r0
 80148f6:	4618      	mov	r0, r3
 80148f8:	f000 f8ea 	bl	8014ad0 <RCC_GetPCLK1ClockFreq>
 80148fc:	60f8      	str	r0, [r7, #12]
          break;
 80148fe:	e00c      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8014900:	bf00      	nop
 8014902:	e00a      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8014904:	bf00      	nop
 8014906:	e008      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8014908:	bf00      	nop
 801490a:	e006      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 801490c:	bf00      	nop
 801490e:	e004      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8014910:	bf00      	nop
 8014912:	e002      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8014914:	bf00      	nop
 8014916:	e000      	b.n	801491a <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8014918:	bf00      	nop
  }
  return usart_frequency;
 801491a:	68fb      	ldr	r3, [r7, #12]
}
 801491c:	4618      	mov	r0, r3
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}
 8014924:	00030001 	.word	0x00030001
 8014928:	00030002 	.word	0x00030002
 801492c:	00f42400 	.word	0x00f42400
 8014930:	000c0004 	.word	0x000c0004
 8014934:	000c0008 	.word	0x000c0008
 8014938:	00300010 	.word	0x00300010
 801493c:	00300020 	.word	0x00300020

08014940 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8014948:	2300      	movs	r3, #0
 801494a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2bc0      	cmp	r3, #192	; 0xc0
 8014950:	d131      	bne.n	80149b6 <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f7ff fee2 	bl	801471c <LL_RCC_GetUARTClockSource>
 8014958:	4603      	mov	r3, r0
 801495a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 801495e:	d015      	beq.n	801498c <LL_RCC_GetUARTClockFreq+0x4c>
 8014960:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8014964:	d81b      	bhi.n	801499e <LL_RCC_GetUARTClockFreq+0x5e>
 8014966:	4a36      	ldr	r2, [pc, #216]	; (8014a40 <LL_RCC_GetUARTClockFreq+0x100>)
 8014968:	4293      	cmp	r3, r2
 801496a:	d003      	beq.n	8014974 <LL_RCC_GetUARTClockFreq+0x34>
 801496c:	4a35      	ldr	r2, [pc, #212]	; (8014a44 <LL_RCC_GetUARTClockFreq+0x104>)
 801496e:	4293      	cmp	r3, r2
 8014970:	d004      	beq.n	801497c <LL_RCC_GetUARTClockFreq+0x3c>
 8014972:	e014      	b.n	801499e <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8014974:	f000 f86e 	bl	8014a54 <RCC_GetSystemClockFreq>
 8014978:	60f8      	str	r0, [r7, #12]
        break;
 801497a:	e021      	b.n	80149c0 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 801497c:	f7ff fe5a 	bl	8014634 <LL_RCC_HSI_IsReady>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d019      	beq.n	80149ba <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 8014986:	4b30      	ldr	r3, [pc, #192]	; (8014a48 <LL_RCC_GetUARTClockFreq+0x108>)
 8014988:	60fb      	str	r3, [r7, #12]
        }
        break;
 801498a:	e016      	b.n	80149ba <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 801498c:	f7ff fe66 	bl	801465c <LL_RCC_LSE_IsReady>
 8014990:	4603      	mov	r3, r0
 8014992:	2b00      	cmp	r3, #0
 8014994:	d013      	beq.n	80149be <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 8014996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801499a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801499c:	e00f      	b.n	80149be <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801499e:	f000 f859 	bl	8014a54 <RCC_GetSystemClockFreq>
 80149a2:	4603      	mov	r3, r0
 80149a4:	4618      	mov	r0, r3
 80149a6:	f000 f87b 	bl	8014aa0 <RCC_GetHCLKClockFreq>
 80149aa:	4603      	mov	r3, r0
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 f88f 	bl	8014ad0 <RCC_GetPCLK1ClockFreq>
 80149b2:	60f8      	str	r0, [r7, #12]
        break;
 80149b4:	e004      	b.n	80149c0 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 80149b6:	bf00      	nop
 80149b8:	e002      	b.n	80149c0 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80149ba:	bf00      	nop
 80149bc:	e000      	b.n	80149c0 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80149be:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80149c6:	d131      	bne.n	8014a2c <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f7ff fea7 	bl	801471c <LL_RCC_GetUARTClockSource>
 80149ce:	4603      	mov	r3, r0
 80149d0:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80149d4:	d015      	beq.n	8014a02 <LL_RCC_GetUARTClockFreq+0xc2>
 80149d6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80149da:	d81b      	bhi.n	8014a14 <LL_RCC_GetUARTClockFreq+0xd4>
 80149dc:	4a1b      	ldr	r2, [pc, #108]	; (8014a4c <LL_RCC_GetUARTClockFreq+0x10c>)
 80149de:	4293      	cmp	r3, r2
 80149e0:	d003      	beq.n	80149ea <LL_RCC_GetUARTClockFreq+0xaa>
 80149e2:	4a1b      	ldr	r2, [pc, #108]	; (8014a50 <LL_RCC_GetUARTClockFreq+0x110>)
 80149e4:	4293      	cmp	r3, r2
 80149e6:	d004      	beq.n	80149f2 <LL_RCC_GetUARTClockFreq+0xb2>
 80149e8:	e014      	b.n	8014a14 <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80149ea:	f000 f833 	bl	8014a54 <RCC_GetSystemClockFreq>
 80149ee:	60f8      	str	r0, [r7, #12]
        break;
 80149f0:	e021      	b.n	8014a36 <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80149f2:	f7ff fe1f 	bl	8014634 <LL_RCC_HSI_IsReady>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d019      	beq.n	8014a30 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 80149fc:	4b12      	ldr	r3, [pc, #72]	; (8014a48 <LL_RCC_GetUARTClockFreq+0x108>)
 80149fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8014a00:	e016      	b.n	8014a30 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8014a02:	f7ff fe2b 	bl	801465c <LL_RCC_LSE_IsReady>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d013      	beq.n	8014a34 <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8014a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8014a12:	e00f      	b.n	8014a34 <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8014a14:	f000 f81e 	bl	8014a54 <RCC_GetSystemClockFreq>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f000 f840 	bl	8014aa0 <RCC_GetHCLKClockFreq>
 8014a20:	4603      	mov	r3, r0
 8014a22:	4618      	mov	r0, r3
 8014a24:	f000 f854 	bl	8014ad0 <RCC_GetPCLK1ClockFreq>
 8014a28:	60f8      	str	r0, [r7, #12]
        break;
 8014a2a:	e004      	b.n	8014a36 <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8014a2c:	bf00      	nop
 8014a2e:	e002      	b.n	8014a36 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8014a30:	bf00      	nop
 8014a32:	e000      	b.n	8014a36 <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8014a34:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8014a36:	68fb      	ldr	r3, [r7, #12]
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	00c00040 	.word	0x00c00040
 8014a44:	00c00080 	.word	0x00c00080
 8014a48:	00f42400 	.word	0x00f42400
 8014a4c:	03000100 	.word	0x03000100
 8014a50:	03000200 	.word	0x03000200

08014a54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8014a5a:	f7ff fe13 	bl	8014684 <LL_RCC_GetSysClkSource>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b0c      	cmp	r3, #12
 8014a62:	d00c      	beq.n	8014a7e <RCC_GetSystemClockFreq+0x2a>
 8014a64:	2b0c      	cmp	r3, #12
 8014a66:	d80e      	bhi.n	8014a86 <RCC_GetSystemClockFreq+0x32>
 8014a68:	2b04      	cmp	r3, #4
 8014a6a:	d002      	beq.n	8014a72 <RCC_GetSystemClockFreq+0x1e>
 8014a6c:	2b08      	cmp	r3, #8
 8014a6e:	d003      	beq.n	8014a78 <RCC_GetSystemClockFreq+0x24>
 8014a70:	e009      	b.n	8014a86 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8014a72:	4b09      	ldr	r3, [pc, #36]	; (8014a98 <RCC_GetSystemClockFreq+0x44>)
 8014a74:	607b      	str	r3, [r7, #4]
      break;
 8014a76:	e009      	b.n	8014a8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8014a78:	4b08      	ldr	r3, [pc, #32]	; (8014a9c <RCC_GetSystemClockFreq+0x48>)
 8014a7a:	607b      	str	r3, [r7, #4]
      break;
 8014a7c:	e006      	b.n	8014a8c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8014a7e:	f000 f853 	bl	8014b28 <RCC_PLL_GetFreqDomain_SYS>
 8014a82:	6078      	str	r0, [r7, #4]
      break;
 8014a84:	e002      	b.n	8014a8c <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8014a86:	4b04      	ldr	r3, [pc, #16]	; (8014a98 <RCC_GetSystemClockFreq+0x44>)
 8014a88:	607b      	str	r3, [r7, #4]
      break;
 8014a8a:	bf00      	nop
  }

  return frequency;
 8014a8c:	687b      	ldr	r3, [r7, #4]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	00f42400 	.word	0x00f42400
 8014a9c:	007a1200 	.word	0x007a1200

08014aa0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8014aa8:	f7ff fdfa 	bl	80146a0 <LL_RCC_GetAHBPrescaler>
 8014aac:	4603      	mov	r3, r0
 8014aae:	091b      	lsrs	r3, r3, #4
 8014ab0:	f003 030f 	and.w	r3, r3, #15
 8014ab4:	4a05      	ldr	r2, [pc, #20]	; (8014acc <RCC_GetHCLKClockFreq+0x2c>)
 8014ab6:	5cd3      	ldrb	r3, [r2, r3]
 8014ab8:	f003 031f 	and.w	r3, r3, #31
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3708      	adds	r7, #8
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	0801bebc 	.word	0x0801bebc

08014ad0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8014ad8:	f7ff fdf0 	bl	80146bc <LL_RCC_GetAPB1Prescaler>
 8014adc:	4603      	mov	r3, r0
 8014ade:	0a1b      	lsrs	r3, r3, #8
 8014ae0:	4a05      	ldr	r2, [pc, #20]	; (8014af8 <RCC_GetPCLK1ClockFreq+0x28>)
 8014ae2:	5cd3      	ldrb	r3, [r2, r3]
 8014ae4:	f003 031f 	and.w	r3, r3, #31
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	0801becc 	.word	0x0801becc

08014afc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8014b04:	f7ff fde8 	bl	80146d8 <LL_RCC_GetAPB2Prescaler>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	0adb      	lsrs	r3, r3, #11
 8014b0c:	4a05      	ldr	r2, [pc, #20]	; (8014b24 <RCC_GetPCLK2ClockFreq+0x28>)
 8014b0e:	5cd3      	ldrb	r3, [r2, r3]
 8014b10:	f003 031f 	and.w	r3, r3, #31
 8014b14:	687a      	ldr	r2, [r7, #4]
 8014b16:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	0801becc 	.word	0x0801becc

08014b28 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8014b28:	b590      	push	{r4, r7, lr}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014b2e:	f7ff fe09 	bl	8014744 <LL_RCC_PLL_GetMainSource>
 8014b32:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2b02      	cmp	r3, #2
 8014b38:	d003      	beq.n	8014b42 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	2b03      	cmp	r3, #3
 8014b3e:	d003      	beq.n	8014b48 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8014b40:	e005      	b.n	8014b4e <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8014b42:	4b11      	ldr	r3, [pc, #68]	; (8014b88 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8014b44:	607b      	str	r3, [r7, #4]
      break;
 8014b46:	e005      	b.n	8014b54 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8014b48:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8014b4a:	607b      	str	r3, [r7, #4]
      break;
 8014b4c:	e002      	b.n	8014b54 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8014b4e:	4b0e      	ldr	r3, [pc, #56]	; (8014b88 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8014b50:	607b      	str	r3, [r7, #4]
      break;
 8014b52:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014b54:	f7ff fe04 	bl	8014760 <LL_RCC_PLL_GetN>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	fb03 f402 	mul.w	r4, r3, r2
 8014b60:	f7ff fe1a 	bl	8014798 <LL_RCC_PLL_GetDivider>
 8014b64:	4603      	mov	r3, r0
 8014b66:	091b      	lsrs	r3, r3, #4
 8014b68:	3301      	adds	r3, #1
 8014b6a:	fbb4 f4f3 	udiv	r4, r4, r3
 8014b6e:	f7ff fe05 	bl	801477c <LL_RCC_PLL_GetR>
 8014b72:	4603      	mov	r3, r0
 8014b74:	0e5b      	lsrs	r3, r3, #25
 8014b76:	3301      	adds	r3, #1
 8014b78:	005b      	lsls	r3, r3, #1
 8014b7a:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd90      	pop	{r4, r7, pc}
 8014b86:	bf00      	nop
 8014b88:	00f42400 	.word	0x00f42400
 8014b8c:	007a1200 	.word	0x007a1200

08014b90 <LL_SPI_IsEnabled>:
{
 8014b90:	b480      	push	{r7}
 8014b92:	b083      	sub	sp, #12
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba0:	2b40      	cmp	r3, #64	; 0x40
 8014ba2:	d101      	bne.n	8014ba8 <LL_SPI_IsEnabled+0x18>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	e000      	b.n	8014baa <LL_SPI_IsEnabled+0x1a>
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	370c      	adds	r7, #12
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr

08014bb6 <LL_SPI_SetCRCPolynomial>:
{
 8014bb6:	b480      	push	{r7}
 8014bb8:	b083      	sub	sp, #12
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
 8014bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	611a      	str	r2, [r3, #16]
}
 8014bca:	bf00      	nop
 8014bcc:	370c      	adds	r7, #12
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr

08014bd6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b084      	sub	sp, #16
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8014be0:	2301      	movs	r3, #1
 8014be2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f7ff ffd3 	bl	8014b90 <LL_SPI_IsEnabled>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d13b      	bne.n	8014c68 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014bf8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8014bfc:	683a      	ldr	r2, [r7, #0]
 8014bfe:	6811      	ldr	r1, [r2, #0]
 8014c00:	683a      	ldr	r2, [r7, #0]
 8014c02:	6852      	ldr	r2, [r2, #4]
 8014c04:	4311      	orrs	r1, r2
 8014c06:	683a      	ldr	r2, [r7, #0]
 8014c08:	68d2      	ldr	r2, [r2, #12]
 8014c0a:	4311      	orrs	r1, r2
 8014c0c:	683a      	ldr	r2, [r7, #0]
 8014c0e:	6912      	ldr	r2, [r2, #16]
 8014c10:	4311      	orrs	r1, r2
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	6952      	ldr	r2, [r2, #20]
 8014c16:	4311      	orrs	r1, r2
 8014c18:	683a      	ldr	r2, [r7, #0]
 8014c1a:	6992      	ldr	r2, [r2, #24]
 8014c1c:	4311      	orrs	r1, r2
 8014c1e:	683a      	ldr	r2, [r7, #0]
 8014c20:	69d2      	ldr	r2, [r2, #28]
 8014c22:	4311      	orrs	r1, r2
 8014c24:	683a      	ldr	r2, [r7, #0]
 8014c26:	6a12      	ldr	r2, [r2, #32]
 8014c28:	430a      	orrs	r2, r1
 8014c2a:	431a      	orrs	r2, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014c38:	f023 0304 	bic.w	r3, r3, #4
 8014c3c:	683a      	ldr	r2, [r7, #0]
 8014c3e:	6891      	ldr	r1, [r2, #8]
 8014c40:	683a      	ldr	r2, [r7, #0]
 8014c42:	6952      	ldr	r2, [r2, #20]
 8014c44:	0c12      	lsrs	r2, r2, #16
 8014c46:	430a      	orrs	r2, r1
 8014c48:	431a      	orrs	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	6a1b      	ldr	r3, [r3, #32]
 8014c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c56:	d105      	bne.n	8014c64 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f7ff ffa9 	bl	8014bb6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8014c64:	2300      	movs	r3, #0
 8014c66:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	69db      	ldr	r3, [r3, #28]
 8014c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8014c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <LL_TIM_SetPrescaler>:
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b083      	sub	sp, #12
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014c8e:	bf00      	nop
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr

08014c9a <LL_TIM_SetAutoReload>:
{
 8014c9a:	b480      	push	{r7}
 8014c9c:	b083      	sub	sp, #12
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
 8014ca2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	683a      	ldr	r2, [r7, #0]
 8014ca8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8014caa:	bf00      	nop
 8014cac:	370c      	adds	r7, #12
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	4770      	bx	lr

08014cb6 <LL_TIM_SetRepetitionCounter>:
{
 8014cb6:	b480      	push	{r7}
 8014cb8:	b083      	sub	sp, #12
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	683a      	ldr	r2, [r7, #0]
 8014cc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014cc6:	bf00      	nop
 8014cc8:	370c      	adds	r7, #12
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr

08014cd2 <LL_TIM_OC_SetCompareCH1>:
{
 8014cd2:	b480      	push	{r7}
 8014cd4:	b083      	sub	sp, #12
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
 8014cda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8014ce2:	bf00      	nop
 8014ce4:	370c      	adds	r7, #12
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <LL_TIM_OC_SetCompareCH2>:
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b083      	sub	sp, #12
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
 8014cf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	683a      	ldr	r2, [r7, #0]
 8014cfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8014cfe:	bf00      	nop
 8014d00:	370c      	adds	r7, #12
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr

08014d0a <LL_TIM_OC_SetCompareCH3>:
{
 8014d0a:	b480      	push	{r7}
 8014d0c:	b083      	sub	sp, #12
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
 8014d12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	683a      	ldr	r2, [r7, #0]
 8014d18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8014d1a:	bf00      	nop
 8014d1c:	370c      	adds	r7, #12
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <LL_TIM_OC_SetCompareCH4>:
{
 8014d26:	b480      	push	{r7}
 8014d28:	b083      	sub	sp, #12
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
 8014d2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	683a      	ldr	r2, [r7, #0]
 8014d34:	641a      	str	r2, [r3, #64]	; 0x40
}
 8014d36:	bf00      	nop
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <LL_TIM_OC_SetCompareCH5>:
{
 8014d42:	b480      	push	{r7}
 8014d44:	b083      	sub	sp, #12
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
 8014d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	649a      	str	r2, [r3, #72]	; 0x48
}
 8014d56:	bf00      	nop
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <LL_TIM_OC_SetCompareCH6>:
{
 8014d62:	b480      	push	{r7}
 8014d64:	b083      	sub	sp, #12
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
 8014d6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	683a      	ldr	r2, [r7, #0]
 8014d70:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8014d72:	bf00      	nop
 8014d74:	370c      	adds	r7, #12
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8014d7e:	b480      	push	{r7}
 8014d80:	b083      	sub	sp, #12
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	695b      	ldr	r3, [r3, #20]
 8014d8a:	f043 0201 	orr.w	r2, r3, #1
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	615a      	str	r2, [r3, #20]
}
 8014d92:	bf00      	nop
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
	...

08014da0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	4a43      	ldr	r2, [pc, #268]	; (8014ec0 <LL_TIM_Init+0x120>)
 8014db4:	4293      	cmp	r3, r2
 8014db6:	d017      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014dbe:	d013      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4a40      	ldr	r2, [pc, #256]	; (8014ec4 <LL_TIM_Init+0x124>)
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	d00f      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	4a3f      	ldr	r2, [pc, #252]	; (8014ec8 <LL_TIM_Init+0x128>)
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d00b      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	4a3e      	ldr	r2, [pc, #248]	; (8014ecc <LL_TIM_Init+0x12c>)
 8014dd4:	4293      	cmp	r3, r2
 8014dd6:	d007      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4a3d      	ldr	r2, [pc, #244]	; (8014ed0 <LL_TIM_Init+0x130>)
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d003      	beq.n	8014de8 <LL_TIM_Init+0x48>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4a3c      	ldr	r2, [pc, #240]	; (8014ed4 <LL_TIM_Init+0x134>)
 8014de4:	4293      	cmp	r3, r2
 8014de6:	d106      	bne.n	8014df6 <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	4313      	orrs	r3, r2
 8014df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	4a31      	ldr	r2, [pc, #196]	; (8014ec0 <LL_TIM_Init+0x120>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d023      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e04:	d01f      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4a2e      	ldr	r2, [pc, #184]	; (8014ec4 <LL_TIM_Init+0x124>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d01b      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4a2d      	ldr	r2, [pc, #180]	; (8014ec8 <LL_TIM_Init+0x128>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d017      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	4a2c      	ldr	r2, [pc, #176]	; (8014ecc <LL_TIM_Init+0x12c>)
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	d013      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4a2b      	ldr	r2, [pc, #172]	; (8014ed0 <LL_TIM_Init+0x130>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d00f      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4a2b      	ldr	r2, [pc, #172]	; (8014ed8 <LL_TIM_Init+0x138>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d00b      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	4a2a      	ldr	r2, [pc, #168]	; (8014edc <LL_TIM_Init+0x13c>)
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d007      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4a29      	ldr	r2, [pc, #164]	; (8014ee0 <LL_TIM_Init+0x140>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d003      	beq.n	8014e46 <LL_TIM_Init+0xa6>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4a24      	ldr	r2, [pc, #144]	; (8014ed4 <LL_TIM_Init+0x134>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d106      	bne.n	8014e54 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	4313      	orrs	r3, r2
 8014e52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	68fa      	ldr	r2, [r7, #12]
 8014e58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	689b      	ldr	r3, [r3, #8]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f7ff ff1a 	bl	8014c9a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	881b      	ldrh	r3, [r3, #0]
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7ff ff06 	bl	8014c7e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	4a12      	ldr	r2, [pc, #72]	; (8014ec0 <LL_TIM_Init+0x120>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d013      	beq.n	8014ea2 <LL_TIM_Init+0x102>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	4a14      	ldr	r2, [pc, #80]	; (8014ed0 <LL_TIM_Init+0x130>)
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d00f      	beq.n	8014ea2 <LL_TIM_Init+0x102>
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	4a14      	ldr	r2, [pc, #80]	; (8014ed8 <LL_TIM_Init+0x138>)
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d00b      	beq.n	8014ea2 <LL_TIM_Init+0x102>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4a13      	ldr	r2, [pc, #76]	; (8014edc <LL_TIM_Init+0x13c>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d007      	beq.n	8014ea2 <LL_TIM_Init+0x102>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	4a12      	ldr	r2, [pc, #72]	; (8014ee0 <LL_TIM_Init+0x140>)
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d003      	beq.n	8014ea2 <LL_TIM_Init+0x102>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4a0d      	ldr	r2, [pc, #52]	; (8014ed4 <LL_TIM_Init+0x134>)
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d105      	bne.n	8014eae <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	691b      	ldr	r3, [r3, #16]
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7ff ff04 	bl	8014cb6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff ff65 	bl	8014d7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3710      	adds	r7, #16
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	40012c00 	.word	0x40012c00
 8014ec4:	40000400 	.word	0x40000400
 8014ec8:	40000800 	.word	0x40000800
 8014ecc:	40000c00 	.word	0x40000c00
 8014ed0:	40013400 	.word	0x40013400
 8014ed4:	40015000 	.word	0x40015000
 8014ed8:	40014000 	.word	0x40014000
 8014edc:	40014400 	.word	0x40014400
 8014ee0:	40014800 	.word	0x40014800

08014ee4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b086      	sub	sp, #24
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	60b9      	str	r1, [r7, #8]
 8014eee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014efa:	d045      	beq.n	8014f88 <LL_TIM_OC_Init+0xa4>
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014f02:	d848      	bhi.n	8014f96 <LL_TIM_OC_Init+0xb2>
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f0a:	d036      	beq.n	8014f7a <LL_TIM_OC_Init+0x96>
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f12:	d840      	bhi.n	8014f96 <LL_TIM_OC_Init+0xb2>
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f1a:	d027      	beq.n	8014f6c <LL_TIM_OC_Init+0x88>
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f22:	d838      	bhi.n	8014f96 <LL_TIM_OC_Init+0xb2>
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f2a:	d018      	beq.n	8014f5e <LL_TIM_OC_Init+0x7a>
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f32:	d830      	bhi.n	8014f96 <LL_TIM_OC_Init+0xb2>
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d003      	beq.n	8014f42 <LL_TIM_OC_Init+0x5e>
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	2b10      	cmp	r3, #16
 8014f3e:	d007      	beq.n	8014f50 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8014f40:	e029      	b.n	8014f96 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8014f42:	6879      	ldr	r1, [r7, #4]
 8014f44:	68f8      	ldr	r0, [r7, #12]
 8014f46:	f000 f8bf 	bl	80150c8 <OC1Config>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8014f4e:	e023      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8014f50:	6879      	ldr	r1, [r7, #4]
 8014f52:	68f8      	ldr	r0, [r7, #12]
 8014f54:	f000 f93e 	bl	80151d4 <OC2Config>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8014f5c:	e01c      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8014f5e:	6879      	ldr	r1, [r7, #4]
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	f000 f9c1 	bl	80152e8 <OC3Config>
 8014f66:	4603      	mov	r3, r0
 8014f68:	75fb      	strb	r3, [r7, #23]
      break;
 8014f6a:	e015      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8014f6c:	6879      	ldr	r1, [r7, #4]
 8014f6e:	68f8      	ldr	r0, [r7, #12]
 8014f70:	f000 fa44 	bl	80153fc <OC4Config>
 8014f74:	4603      	mov	r3, r0
 8014f76:	75fb      	strb	r3, [r7, #23]
      break;
 8014f78:	e00e      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8014f7a:	6879      	ldr	r1, [r7, #4]
 8014f7c:	68f8      	ldr	r0, [r7, #12]
 8014f7e:	f000 fac7 	bl	8015510 <OC5Config>
 8014f82:	4603      	mov	r3, r0
 8014f84:	75fb      	strb	r3, [r7, #23]
      break;
 8014f86:	e007      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8014f88:	6879      	ldr	r1, [r7, #4]
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f000 fb2a 	bl	80155e4 <OC6Config>
 8014f90:	4603      	mov	r3, r0
 8014f92:	75fb      	strb	r3, [r7, #23]
      break;
 8014f94:	e000      	b.n	8014f98 <LL_TIM_OC_Init+0xb4>
      break;
 8014f96:	bf00      	nop
  }

  return result;
 8014f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3718      	adds	r7, #24
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
	...

08014fa4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014fb8:	683a      	ldr	r2, [r7, #0]
 8014fba:	7b12      	ldrb	r2, [r2, #12]
 8014fbc:	4313      	orrs	r3, r2
 8014fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	4313      	orrs	r3, r2
 8014fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	4313      	orrs	r3, r2
 8014fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ff0:	683a      	ldr	r2, [r7, #0]
 8014ff2:	89d2      	ldrh	r2, [r2, #14]
 8014ff4:	4313      	orrs	r3, r2
 8014ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	691b      	ldr	r3, [r3, #16]
 8015002:	4313      	orrs	r3, r2
 8015004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015010:	4313      	orrs	r3, r2
 8015012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801501e:	4313      	orrs	r3, r2
 8015020:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	4a25      	ldr	r2, [pc, #148]	; (80150bc <LL_TIM_BDTR_Init+0x118>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d007      	beq.n	801503a <LL_TIM_BDTR_Init+0x96>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4a24      	ldr	r2, [pc, #144]	; (80150c0 <LL_TIM_BDTR_Init+0x11c>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d003      	beq.n	801503a <LL_TIM_BDTR_Init+0x96>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4a23      	ldr	r2, [pc, #140]	; (80150c4 <LL_TIM_BDTR_Init+0x120>)
 8015036:	4293      	cmp	r3, r2
 8015038:	d10d      	bne.n	8015056 <LL_TIM_BDTR_Init+0xb2>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	695b      	ldr	r3, [r3, #20]
 8015044:	4313      	orrs	r3, r2
 8015046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	699b      	ldr	r3, [r3, #24]
 8015052:	4313      	orrs	r3, r2
 8015054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4a18      	ldr	r2, [pc, #96]	; (80150bc <LL_TIM_BDTR_Init+0x118>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d007      	beq.n	801506e <LL_TIM_BDTR_Init+0xca>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a17      	ldr	r2, [pc, #92]	; (80150c0 <LL_TIM_BDTR_Init+0x11c>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d003      	beq.n	801506e <LL_TIM_BDTR_Init+0xca>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4a16      	ldr	r2, [pc, #88]	; (80150c4 <LL_TIM_BDTR_Init+0x120>)
 801506a:	4293      	cmp	r3, r2
 801506c:	d11b      	bne.n	80150a6 <LL_TIM_BDTR_Init+0x102>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015078:	4313      	orrs	r3, r2
 801507a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	69db      	ldr	r3, [r3, #28]
 8015086:	4313      	orrs	r3, r2
 8015088:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	6a1b      	ldr	r3, [r3, #32]
 8015094:	4313      	orrs	r3, r2
 8015096:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150a2:	4313      	orrs	r3, r2
 80150a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	68fa      	ldr	r2, [r7, #12]
 80150aa:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80150ac:	2300      	movs	r3, #0
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3714      	adds	r7, #20
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	40012c00 	.word	0x40012c00
 80150c0:	40013400 	.word	0x40013400
 80150c4:	40015000 	.word	0x40015000

080150c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6a1b      	ldr	r3, [r3, #32]
 80150d6:	f023 0201 	bic.w	r2, r3, #1
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6a1b      	ldr	r3, [r3, #32]
 80150e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	699b      	ldr	r3, [r3, #24]
 80150ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f023 0303 	bic.w	r3, r3, #3
 80150f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80150fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015102:	683a      	ldr	r2, [r7, #0]
 8015104:	6812      	ldr	r2, [r2, #0]
 8015106:	4313      	orrs	r3, r2
 8015108:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	f023 0202 	bic.w	r2, r3, #2
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	691b      	ldr	r3, [r3, #16]
 8015114:	4313      	orrs	r3, r2
 8015116:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	f023 0201 	bic.w	r2, r3, #1
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	4313      	orrs	r3, r2
 8015124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	4a24      	ldr	r2, [pc, #144]	; (80151bc <OC1Config+0xf4>)
 801512a:	4293      	cmp	r3, r2
 801512c:	d013      	beq.n	8015156 <OC1Config+0x8e>
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	4a23      	ldr	r2, [pc, #140]	; (80151c0 <OC1Config+0xf8>)
 8015132:	4293      	cmp	r3, r2
 8015134:	d00f      	beq.n	8015156 <OC1Config+0x8e>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4a22      	ldr	r2, [pc, #136]	; (80151c4 <OC1Config+0xfc>)
 801513a:	4293      	cmp	r3, r2
 801513c:	d00b      	beq.n	8015156 <OC1Config+0x8e>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	4a21      	ldr	r2, [pc, #132]	; (80151c8 <OC1Config+0x100>)
 8015142:	4293      	cmp	r3, r2
 8015144:	d007      	beq.n	8015156 <OC1Config+0x8e>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	4a20      	ldr	r2, [pc, #128]	; (80151cc <OC1Config+0x104>)
 801514a:	4293      	cmp	r3, r2
 801514c:	d003      	beq.n	8015156 <OC1Config+0x8e>
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	4a1f      	ldr	r2, [pc, #124]	; (80151d0 <OC1Config+0x108>)
 8015152:	4293      	cmp	r3, r2
 8015154:	d11e      	bne.n	8015194 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	f023 0208 	bic.w	r2, r3, #8
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	695b      	ldr	r3, [r3, #20]
 8015160:	009b      	lsls	r3, r3, #2
 8015162:	4313      	orrs	r3, r2
 8015164:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	f023 0204 	bic.w	r2, r3, #4
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	689b      	ldr	r3, [r3, #8]
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	4313      	orrs	r3, r2
 8015174:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	699b      	ldr	r3, [r3, #24]
 8015180:	4313      	orrs	r3, r2
 8015182:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	69db      	ldr	r3, [r3, #28]
 801518e:	005b      	lsls	r3, r3, #1
 8015190:	4313      	orrs	r3, r2
 8015192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	693a      	ldr	r2, [r7, #16]
 8015198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	68fa      	ldr	r2, [r7, #12]
 801519e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	4619      	mov	r1, r3
 80151a6:	6878      	ldr	r0, [r7, #4]
 80151a8:	f7ff fd93 	bl	8014cd2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	697a      	ldr	r2, [r7, #20]
 80151b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80151b2:	2300      	movs	r3, #0
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3718      	adds	r7, #24
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	40012c00 	.word	0x40012c00
 80151c0:	40013400 	.word	0x40013400
 80151c4:	40014000 	.word	0x40014000
 80151c8:	40014400 	.word	0x40014400
 80151cc:	40014800 	.word	0x40014800
 80151d0:	40015000 	.word	0x40015000

080151d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6a1b      	ldr	r3, [r3, #32]
 80151e2:	f023 0210 	bic.w	r2, r3, #16
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6a1b      	ldr	r3, [r3, #32]
 80151ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	699b      	ldr	r3, [r3, #24]
 80151fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	6812      	ldr	r2, [r2, #0]
 8015212:	0212      	lsls	r2, r2, #8
 8015214:	4313      	orrs	r3, r2
 8015216:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	f023 0220 	bic.w	r2, r3, #32
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	691b      	ldr	r3, [r3, #16]
 8015222:	011b      	lsls	r3, r3, #4
 8015224:	4313      	orrs	r3, r2
 8015226:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	f023 0210 	bic.w	r2, r3, #16
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	011b      	lsls	r3, r3, #4
 8015234:	4313      	orrs	r3, r2
 8015236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	4a25      	ldr	r2, [pc, #148]	; (80152d0 <OC2Config+0xfc>)
 801523c:	4293      	cmp	r3, r2
 801523e:	d013      	beq.n	8015268 <OC2Config+0x94>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4a24      	ldr	r2, [pc, #144]	; (80152d4 <OC2Config+0x100>)
 8015244:	4293      	cmp	r3, r2
 8015246:	d00f      	beq.n	8015268 <OC2Config+0x94>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	4a23      	ldr	r2, [pc, #140]	; (80152d8 <OC2Config+0x104>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d00b      	beq.n	8015268 <OC2Config+0x94>
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	4a22      	ldr	r2, [pc, #136]	; (80152dc <OC2Config+0x108>)
 8015254:	4293      	cmp	r3, r2
 8015256:	d007      	beq.n	8015268 <OC2Config+0x94>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	4a21      	ldr	r2, [pc, #132]	; (80152e0 <OC2Config+0x10c>)
 801525c:	4293      	cmp	r3, r2
 801525e:	d003      	beq.n	8015268 <OC2Config+0x94>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	4a20      	ldr	r2, [pc, #128]	; (80152e4 <OC2Config+0x110>)
 8015264:	4293      	cmp	r3, r2
 8015266:	d11f      	bne.n	80152a8 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	695b      	ldr	r3, [r3, #20]
 8015272:	019b      	lsls	r3, r3, #6
 8015274:	4313      	orrs	r3, r2
 8015276:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	689b      	ldr	r3, [r3, #8]
 8015282:	019b      	lsls	r3, r3, #6
 8015284:	4313      	orrs	r3, r2
 8015286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	699b      	ldr	r3, [r3, #24]
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4313      	orrs	r3, r2
 8015296:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	69db      	ldr	r3, [r3, #28]
 80152a2:	00db      	lsls	r3, r3, #3
 80152a4:	4313      	orrs	r3, r2
 80152a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	693a      	ldr	r2, [r7, #16]
 80152ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	68fa      	ldr	r2, [r7, #12]
 80152b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	4619      	mov	r1, r3
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7ff fd17 	bl	8014cee <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	697a      	ldr	r2, [r7, #20]
 80152c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80152c6:	2300      	movs	r3, #0
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3718      	adds	r7, #24
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	40012c00 	.word	0x40012c00
 80152d4:	40013400 	.word	0x40013400
 80152d8:	40014000 	.word	0x40014000
 80152dc:	40014400 	.word	0x40014400
 80152e0:	40014800 	.word	0x40014800
 80152e4:	40015000 	.word	0x40015000

080152e8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6a1b      	ldr	r3, [r3, #32]
 80152f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6a1b      	ldr	r3, [r3, #32]
 8015302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	69db      	ldr	r3, [r3, #28]
 801530e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	f023 0303 	bic.w	r3, r3, #3
 8015316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	6812      	ldr	r2, [r2, #0]
 8015326:	4313      	orrs	r3, r2
 8015328:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	691b      	ldr	r3, [r3, #16]
 8015334:	021b      	lsls	r3, r3, #8
 8015336:	4313      	orrs	r3, r2
 8015338:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	021b      	lsls	r3, r3, #8
 8015346:	4313      	orrs	r3, r2
 8015348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4a25      	ldr	r2, [pc, #148]	; (80153e4 <OC3Config+0xfc>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d013      	beq.n	801537a <OC3Config+0x92>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	4a24      	ldr	r2, [pc, #144]	; (80153e8 <OC3Config+0x100>)
 8015356:	4293      	cmp	r3, r2
 8015358:	d00f      	beq.n	801537a <OC3Config+0x92>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	4a23      	ldr	r2, [pc, #140]	; (80153ec <OC3Config+0x104>)
 801535e:	4293      	cmp	r3, r2
 8015360:	d00b      	beq.n	801537a <OC3Config+0x92>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	4a22      	ldr	r2, [pc, #136]	; (80153f0 <OC3Config+0x108>)
 8015366:	4293      	cmp	r3, r2
 8015368:	d007      	beq.n	801537a <OC3Config+0x92>
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	4a21      	ldr	r2, [pc, #132]	; (80153f4 <OC3Config+0x10c>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d003      	beq.n	801537a <OC3Config+0x92>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	4a20      	ldr	r2, [pc, #128]	; (80153f8 <OC3Config+0x110>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d11f      	bne.n	80153ba <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	695b      	ldr	r3, [r3, #20]
 8015384:	029b      	lsls	r3, r3, #10
 8015386:	4313      	orrs	r3, r2
 8015388:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	689b      	ldr	r3, [r3, #8]
 8015394:	029b      	lsls	r3, r3, #10
 8015396:	4313      	orrs	r3, r2
 8015398:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	011b      	lsls	r3, r3, #4
 80153a6:	4313      	orrs	r3, r2
 80153a8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	69db      	ldr	r3, [r3, #28]
 80153b4:	015b      	lsls	r3, r3, #5
 80153b6:	4313      	orrs	r3, r2
 80153b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	693a      	ldr	r2, [r7, #16]
 80153be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	68fa      	ldr	r2, [r7, #12]
 80153c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	4619      	mov	r1, r3
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7ff fc9c 	bl	8014d0a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	697a      	ldr	r2, [r7, #20]
 80153d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80153d8:	2300      	movs	r3, #0
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	40012c00 	.word	0x40012c00
 80153e8:	40013400 	.word	0x40013400
 80153ec:	40014000 	.word	0x40014000
 80153f0:	40014400 	.word	0x40014400
 80153f4:	40014800 	.word	0x40014800
 80153f8:	40015000 	.word	0x40015000

080153fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b086      	sub	sp, #24
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6a1b      	ldr	r3, [r3, #32]
 801540a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6a1b      	ldr	r3, [r3, #32]
 8015416:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	69db      	ldr	r3, [r3, #28]
 8015422:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801542a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015436:	683a      	ldr	r2, [r7, #0]
 8015438:	6812      	ldr	r2, [r2, #0]
 801543a:	0212      	lsls	r2, r2, #8
 801543c:	4313      	orrs	r3, r2
 801543e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	691b      	ldr	r3, [r3, #16]
 801544a:	031b      	lsls	r3, r3, #12
 801544c:	4313      	orrs	r3, r2
 801544e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	031b      	lsls	r3, r3, #12
 801545c:	4313      	orrs	r3, r2
 801545e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	4a25      	ldr	r2, [pc, #148]	; (80154f8 <OC4Config+0xfc>)
 8015464:	4293      	cmp	r3, r2
 8015466:	d013      	beq.n	8015490 <OC4Config+0x94>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	4a24      	ldr	r2, [pc, #144]	; (80154fc <OC4Config+0x100>)
 801546c:	4293      	cmp	r3, r2
 801546e:	d00f      	beq.n	8015490 <OC4Config+0x94>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	4a23      	ldr	r2, [pc, #140]	; (8015500 <OC4Config+0x104>)
 8015474:	4293      	cmp	r3, r2
 8015476:	d00b      	beq.n	8015490 <OC4Config+0x94>
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	4a22      	ldr	r2, [pc, #136]	; (8015504 <OC4Config+0x108>)
 801547c:	4293      	cmp	r3, r2
 801547e:	d007      	beq.n	8015490 <OC4Config+0x94>
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	4a21      	ldr	r2, [pc, #132]	; (8015508 <OC4Config+0x10c>)
 8015484:	4293      	cmp	r3, r2
 8015486:	d003      	beq.n	8015490 <OC4Config+0x94>
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	4a20      	ldr	r2, [pc, #128]	; (801550c <OC4Config+0x110>)
 801548c:	4293      	cmp	r3, r2
 801548e:	d11f      	bne.n	80154d0 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	695b      	ldr	r3, [r3, #20]
 801549a:	039b      	lsls	r3, r3, #14
 801549c:	4313      	orrs	r3, r2
 801549e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	689b      	ldr	r3, [r3, #8]
 80154aa:	039b      	lsls	r3, r3, #14
 80154ac:	4313      	orrs	r3, r2
 80154ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	699b      	ldr	r3, [r3, #24]
 80154ba:	019b      	lsls	r3, r3, #6
 80154bc:	4313      	orrs	r3, r2
 80154be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	69db      	ldr	r3, [r3, #28]
 80154ca:	01db      	lsls	r3, r3, #7
 80154cc:	4313      	orrs	r3, r2
 80154ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	693a      	ldr	r2, [r7, #16]
 80154d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	4619      	mov	r1, r3
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f7ff fc1f 	bl	8014d26 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80154ee:	2300      	movs	r3, #0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3718      	adds	r7, #24
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	40012c00 	.word	0x40012c00
 80154fc:	40013400 	.word	0x40013400
 8015500:	40014000 	.word	0x40014000
 8015504:	40014400 	.word	0x40014400
 8015508:	40014800 	.word	0x40014800
 801550c:	40015000 	.word	0x40015000

08015510 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6a1b      	ldr	r3, [r3, #32]
 801551e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6a1b      	ldr	r3, [r3, #32]
 801552a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015530:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801553c:	683a      	ldr	r2, [r7, #0]
 801553e:	6812      	ldr	r2, [r2, #0]
 8015540:	4313      	orrs	r3, r2
 8015542:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	041b      	lsls	r3, r3, #16
 8015550:	4313      	orrs	r3, r2
 8015552:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	041b      	lsls	r3, r3, #16
 8015560:	4313      	orrs	r3, r2
 8015562:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	4a19      	ldr	r2, [pc, #100]	; (80155cc <OC5Config+0xbc>)
 8015568:	4293      	cmp	r3, r2
 801556a:	d013      	beq.n	8015594 <OC5Config+0x84>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	4a18      	ldr	r2, [pc, #96]	; (80155d0 <OC5Config+0xc0>)
 8015570:	4293      	cmp	r3, r2
 8015572:	d00f      	beq.n	8015594 <OC5Config+0x84>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	4a17      	ldr	r2, [pc, #92]	; (80155d4 <OC5Config+0xc4>)
 8015578:	4293      	cmp	r3, r2
 801557a:	d00b      	beq.n	8015594 <OC5Config+0x84>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	4a16      	ldr	r2, [pc, #88]	; (80155d8 <OC5Config+0xc8>)
 8015580:	4293      	cmp	r3, r2
 8015582:	d007      	beq.n	8015594 <OC5Config+0x84>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	4a15      	ldr	r2, [pc, #84]	; (80155dc <OC5Config+0xcc>)
 8015588:	4293      	cmp	r3, r2
 801558a:	d003      	beq.n	8015594 <OC5Config+0x84>
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4a14      	ldr	r2, [pc, #80]	; (80155e0 <OC5Config+0xd0>)
 8015590:	4293      	cmp	r3, r2
 8015592:	d109      	bne.n	80155a8 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	699b      	ldr	r3, [r3, #24]
 80155a0:	021b      	lsls	r3, r3, #8
 80155a2:	431a      	orrs	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	68ba      	ldr	r2, [r7, #8]
 80155ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	68db      	ldr	r3, [r3, #12]
 80155b2:	4619      	mov	r1, r3
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f7ff fbc4 	bl	8014d42 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	68fa      	ldr	r2, [r7, #12]
 80155be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	40012c00 	.word	0x40012c00
 80155d0:	40013400 	.word	0x40013400
 80155d4:	40014000 	.word	0x40014000
 80155d8:	40014400 	.word	0x40014400
 80155dc:	40014800 	.word	0x40014800
 80155e0:	40015000 	.word	0x40015000

080155e4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b084      	sub	sp, #16
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6a1b      	ldr	r3, [r3, #32]
 80155f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6a1b      	ldr	r3, [r3, #32]
 80155fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015604:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015610:	683a      	ldr	r2, [r7, #0]
 8015612:	6812      	ldr	r2, [r2, #0]
 8015614:	0212      	lsls	r2, r2, #8
 8015616:	4313      	orrs	r3, r2
 8015618:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	691b      	ldr	r3, [r3, #16]
 8015624:	051b      	lsls	r3, r3, #20
 8015626:	4313      	orrs	r3, r2
 8015628:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	051b      	lsls	r3, r3, #20
 8015636:	4313      	orrs	r3, r2
 8015638:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	4a18      	ldr	r2, [pc, #96]	; (80156a0 <OC6Config+0xbc>)
 801563e:	4293      	cmp	r3, r2
 8015640:	d013      	beq.n	801566a <OC6Config+0x86>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	4a17      	ldr	r2, [pc, #92]	; (80156a4 <OC6Config+0xc0>)
 8015646:	4293      	cmp	r3, r2
 8015648:	d00f      	beq.n	801566a <OC6Config+0x86>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4a16      	ldr	r2, [pc, #88]	; (80156a8 <OC6Config+0xc4>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d00b      	beq.n	801566a <OC6Config+0x86>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4a15      	ldr	r2, [pc, #84]	; (80156ac <OC6Config+0xc8>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d007      	beq.n	801566a <OC6Config+0x86>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4a14      	ldr	r2, [pc, #80]	; (80156b0 <OC6Config+0xcc>)
 801565e:	4293      	cmp	r3, r2
 8015660:	d003      	beq.n	801566a <OC6Config+0x86>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	4a13      	ldr	r2, [pc, #76]	; (80156b4 <OC6Config+0xd0>)
 8015666:	4293      	cmp	r3, r2
 8015668:	d109      	bne.n	801567e <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	699b      	ldr	r3, [r3, #24]
 8015676:	029b      	lsls	r3, r3, #10
 8015678:	431a      	orrs	r2, r3
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	4619      	mov	r1, r3
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7ff fb69 	bl	8014d62 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	68fa      	ldr	r2, [r7, #12]
 8015694:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8015696:	2300      	movs	r3, #0
}
 8015698:	4618      	mov	r0, r3
 801569a:	3710      	adds	r7, #16
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	40012c00 	.word	0x40012c00
 80156a4:	40013400 	.word	0x40013400
 80156a8:	40014000 	.word	0x40014000
 80156ac:	40014400 	.word	0x40014400
 80156b0:	40014800 	.word	0x40014800
 80156b4:	40015000 	.word	0x40015000

080156b8 <LL_USART_IsEnabled>:
{
 80156b8:	b480      	push	{r7}
 80156ba:	b083      	sub	sp, #12
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f003 0301 	and.w	r3, r3, #1
 80156c8:	2b01      	cmp	r3, #1
 80156ca:	d101      	bne.n	80156d0 <LL_USART_IsEnabled+0x18>
 80156cc:	2301      	movs	r3, #1
 80156ce:	e000      	b.n	80156d2 <LL_USART_IsEnabled+0x1a>
 80156d0:	2300      	movs	r3, #0
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	370c      	adds	r7, #12
 80156d6:	46bd      	mov	sp, r7
 80156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156dc:	4770      	bx	lr

080156de <LL_USART_SetPrescaler>:
{
 80156de:	b480      	push	{r7}
 80156e0:	b083      	sub	sp, #12
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ec:	f023 030f 	bic.w	r3, r3, #15
 80156f0:	683a      	ldr	r2, [r7, #0]
 80156f2:	b292      	uxth	r2, r2
 80156f4:	431a      	orrs	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80156fa:	bf00      	nop
 80156fc:	370c      	adds	r7, #12
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr

08015706 <LL_USART_SetStopBitsLength>:
{
 8015706:	b480      	push	{r7}
 8015708:	b083      	sub	sp, #12
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	431a      	orrs	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	605a      	str	r2, [r3, #4]
}
 8015720:	bf00      	nop
 8015722:	370c      	adds	r7, #12
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <LL_USART_SetHWFlowCtrl>:
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	431a      	orrs	r2, r3
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	609a      	str	r2, [r3, #8]
}
 8015746:	bf00      	nop
 8015748:	370c      	adds	r7, #12
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr
	...

08015754 <LL_USART_SetBaudRate>:
{
 8015754:	b480      	push	{r7}
 8015756:	b087      	sub	sp, #28
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
 8015760:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2b0b      	cmp	r3, #11
 8015766:	d83c      	bhi.n	80157e2 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8015768:	6a3b      	ldr	r3, [r7, #32]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d039      	beq.n	80157e2 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015774:	d122      	bne.n	80157bc <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	b2db      	uxtb	r3, r3
 801577a:	461a      	mov	r2, r3
 801577c:	4b1c      	ldr	r3, [pc, #112]	; (80157f0 <LL_USART_SetBaudRate+0x9c>)
 801577e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015782:	68ba      	ldr	r2, [r7, #8]
 8015784:	fbb2 f3f3 	udiv	r3, r2, r3
 8015788:	005a      	lsls	r2, r3, #1
 801578a:	6a3b      	ldr	r3, [r7, #32]
 801578c:	085b      	lsrs	r3, r3, #1
 801578e:	441a      	add	r2, r3
 8015790:	6a3b      	ldr	r3, [r7, #32]
 8015792:	fbb2 f3f3 	udiv	r3, r2, r3
 8015796:	b29b      	uxth	r3, r3
 8015798:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 801579a:	697a      	ldr	r2, [r7, #20]
 801579c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80157a0:	4013      	ands	r3, r2
 80157a2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	085b      	lsrs	r3, r3, #1
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	f003 0307 	and.w	r3, r3, #7
 80157ae:	693a      	ldr	r2, [r7, #16]
 80157b0:	4313      	orrs	r3, r2
 80157b2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	693a      	ldr	r2, [r7, #16]
 80157b8:	60da      	str	r2, [r3, #12]
}
 80157ba:	e012      	b.n	80157e2 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	461a      	mov	r2, r3
 80157c2:	4b0b      	ldr	r3, [pc, #44]	; (80157f0 <LL_USART_SetBaudRate+0x9c>)
 80157c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c8:	68ba      	ldr	r2, [r7, #8]
 80157ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80157ce:	6a3b      	ldr	r3, [r7, #32]
 80157d0:	085b      	lsrs	r3, r3, #1
 80157d2:	441a      	add	r2, r3
 80157d4:	6a3b      	ldr	r3, [r7, #32]
 80157d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80157da:	b29b      	uxth	r3, r3
 80157dc:	461a      	mov	r2, r3
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	60da      	str	r2, [r3, #12]
}
 80157e2:	bf00      	nop
 80157e4:	371c      	adds	r7, #28
 80157e6:	46bd      	mov	sp, r7
 80157e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ec:	4770      	bx	lr
 80157ee:	bf00      	nop
 80157f0:	0801c19c 	.word	0x0801c19c

080157f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b086      	sub	sp, #24
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80157fe:	2301      	movs	r3, #1
 8015800:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8015802:	2300      	movs	r3, #0
 8015804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7ff ff56 	bl	80156b8 <LL_USART_IsEnabled>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d165      	bne.n	80158de <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	4b34      	ldr	r3, [pc, #208]	; (80158e8 <LL_USART_Init+0xf4>)
 8015818:	4013      	ands	r3, r2
 801581a:	683a      	ldr	r2, [r7, #0]
 801581c:	6891      	ldr	r1, [r2, #8]
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	6912      	ldr	r2, [r2, #16]
 8015822:	4311      	orrs	r1, r2
 8015824:	683a      	ldr	r2, [r7, #0]
 8015826:	6952      	ldr	r2, [r2, #20]
 8015828:	4311      	orrs	r1, r2
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	69d2      	ldr	r2, [r2, #28]
 801582e:	430a      	orrs	r2, r1
 8015830:	431a      	orrs	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	4619      	mov	r1, r3
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f7ff ff62 	bl	8015706 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	699b      	ldr	r3, [r3, #24]
 8015846:	4619      	mov	r1, r3
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f7ff ff6f 	bl	801572c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	4a26      	ldr	r2, [pc, #152]	; (80158ec <LL_USART_Init+0xf8>)
 8015852:	4293      	cmp	r3, r2
 8015854:	d104      	bne.n	8015860 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8015856:	2003      	movs	r0, #3
 8015858:	f7fe ffac 	bl	80147b4 <LL_RCC_GetUSARTClockFreq>
 801585c:	60b8      	str	r0, [r7, #8]
 801585e:	e023      	b.n	80158a8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4a23      	ldr	r2, [pc, #140]	; (80158f0 <LL_USART_Init+0xfc>)
 8015864:	4293      	cmp	r3, r2
 8015866:	d104      	bne.n	8015872 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8015868:	200c      	movs	r0, #12
 801586a:	f7fe ffa3 	bl	80147b4 <LL_RCC_GetUSARTClockFreq>
 801586e:	60b8      	str	r0, [r7, #8]
 8015870:	e01a      	b.n	80158a8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	4a1f      	ldr	r2, [pc, #124]	; (80158f4 <LL_USART_Init+0x100>)
 8015876:	4293      	cmp	r3, r2
 8015878:	d104      	bne.n	8015884 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 801587a:	2030      	movs	r0, #48	; 0x30
 801587c:	f7fe ff9a 	bl	80147b4 <LL_RCC_GetUSARTClockFreq>
 8015880:	60b8      	str	r0, [r7, #8]
 8015882:	e011      	b.n	80158a8 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a1c      	ldr	r2, [pc, #112]	; (80158f8 <LL_USART_Init+0x104>)
 8015888:	4293      	cmp	r3, r2
 801588a:	d104      	bne.n	8015896 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 801588c:	20c0      	movs	r0, #192	; 0xc0
 801588e:	f7ff f857 	bl	8014940 <LL_RCC_GetUARTClockFreq>
 8015892:	60b8      	str	r0, [r7, #8]
 8015894:	e008      	b.n	80158a8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	4a18      	ldr	r2, [pc, #96]	; (80158fc <LL_USART_Init+0x108>)
 801589a:	4293      	cmp	r3, r2
 801589c:	d104      	bne.n	80158a8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 801589e:	f44f 7040 	mov.w	r0, #768	; 0x300
 80158a2:	f7ff f84d 	bl	8014940 <LL_RCC_GetUARTClockFreq>
 80158a6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d011      	beq.n	80158d2 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00d      	beq.n	80158d2 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80158b6:	2300      	movs	r3, #0
 80158b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	69d9      	ldr	r1, [r3, #28]
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	460b      	mov	r3, r1
 80158ca:	68b9      	ldr	r1, [r7, #8]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7ff ff41 	bl	8015754 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4619      	mov	r1, r3
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f7ff ff00 	bl	80156de <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80158de:	7bfb      	ldrb	r3, [r7, #15]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	efff69f3 	.word	0xefff69f3
 80158ec:	40013800 	.word	0x40013800
 80158f0:	40004400 	.word	0x40004400
 80158f4:	40004800 	.word	0x40004800
 80158f8:	40004c00 	.word	0x40004c00
 80158fc:	40005000 	.word	0x40005000

08015900 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015912:	4a07      	ldr	r2, [pc, #28]	; (8015930 <LL_InitTick+0x30>)
 8015914:	3b01      	subs	r3, #1
 8015916:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8015918:	4b05      	ldr	r3, [pc, #20]	; (8015930 <LL_InitTick+0x30>)
 801591a:	2200      	movs	r2, #0
 801591c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801591e:	4b04      	ldr	r3, [pc, #16]	; (8015930 <LL_InitTick+0x30>)
 8015920:	2205      	movs	r2, #5
 8015922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8015924:	bf00      	nop
 8015926:	370c      	adds	r7, #12
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr
 8015930:	e000e010 	.word	0xe000e010

08015934 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 801593c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff ffdd 	bl	8015900 <LL_InitTick>
}
 8015946:	bf00      	nop
 8015948:	3708      	adds	r7, #8
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
	...

08015950 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8015950:	b480      	push	{r7}
 8015952:	b085      	sub	sp, #20
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8015958:	4b10      	ldr	r3, [pc, #64]	; (801599c <LL_mDelay+0x4c>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 801595e:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801596a:	d00c      	beq.n	8015986 <LL_mDelay+0x36>
  {
    tmpDelay++;
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	3301      	adds	r3, #1
 8015970:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8015972:	e008      	b.n	8015986 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8015974:	4b09      	ldr	r3, [pc, #36]	; (801599c <LL_mDelay+0x4c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801597c:	2b00      	cmp	r3, #0
 801597e:	d002      	beq.n	8015986 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	3b01      	subs	r3, #1
 8015984:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d1f3      	bne.n	8015974 <LL_mDelay+0x24>
    }
  }
}
 801598c:	bf00      	nop
 801598e:	bf00      	nop
 8015990:	3714      	adds	r7, #20
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr
 801599a:	bf00      	nop
 801599c:	e000e010 	.word	0xe000e010

080159a0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80159a8:	4a04      	ldr	r2, [pc, #16]	; (80159bc <LL_SetSystemCoreClock+0x1c>)
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	6013      	str	r3, [r2, #0]
}
 80159ae:	bf00      	nop
 80159b0:	370c      	adds	r7, #12
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr
 80159ba:	bf00      	nop
 80159bc:	20000004 	.word	0x20000004

080159c0 <__errno>:
 80159c0:	4b01      	ldr	r3, [pc, #4]	; (80159c8 <__errno+0x8>)
 80159c2:	6818      	ldr	r0, [r3, #0]
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	20000020 	.word	0x20000020

080159cc <__libc_init_array>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	4d0d      	ldr	r5, [pc, #52]	; (8015a04 <__libc_init_array+0x38>)
 80159d0:	4c0d      	ldr	r4, [pc, #52]	; (8015a08 <__libc_init_array+0x3c>)
 80159d2:	1b64      	subs	r4, r4, r5
 80159d4:	10a4      	asrs	r4, r4, #2
 80159d6:	2600      	movs	r6, #0
 80159d8:	42a6      	cmp	r6, r4
 80159da:	d109      	bne.n	80159f0 <__libc_init_array+0x24>
 80159dc:	4d0b      	ldr	r5, [pc, #44]	; (8015a0c <__libc_init_array+0x40>)
 80159de:	4c0c      	ldr	r4, [pc, #48]	; (8015a10 <__libc_init_array+0x44>)
 80159e0:	f005 ffc8 	bl	801b974 <_init>
 80159e4:	1b64      	subs	r4, r4, r5
 80159e6:	10a4      	asrs	r4, r4, #2
 80159e8:	2600      	movs	r6, #0
 80159ea:	42a6      	cmp	r6, r4
 80159ec:	d105      	bne.n	80159fa <__libc_init_array+0x2e>
 80159ee:	bd70      	pop	{r4, r5, r6, pc}
 80159f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80159f4:	4798      	blx	r3
 80159f6:	3601      	adds	r6, #1
 80159f8:	e7ee      	b.n	80159d8 <__libc_init_array+0xc>
 80159fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80159fe:	4798      	blx	r3
 8015a00:	3601      	adds	r6, #1
 8015a02:	e7f2      	b.n	80159ea <__libc_init_array+0x1e>
 8015a04:	0801c858 	.word	0x0801c858
 8015a08:	0801c858 	.word	0x0801c858
 8015a0c:	0801c858 	.word	0x0801c858
 8015a10:	0801c85c 	.word	0x0801c85c

08015a14 <memcpy>:
 8015a14:	440a      	add	r2, r1
 8015a16:	4291      	cmp	r1, r2
 8015a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a1c:	d100      	bne.n	8015a20 <memcpy+0xc>
 8015a1e:	4770      	bx	lr
 8015a20:	b510      	push	{r4, lr}
 8015a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a2a:	4291      	cmp	r1, r2
 8015a2c:	d1f9      	bne.n	8015a22 <memcpy+0xe>
 8015a2e:	bd10      	pop	{r4, pc}

08015a30 <memset>:
 8015a30:	4402      	add	r2, r0
 8015a32:	4603      	mov	r3, r0
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d100      	bne.n	8015a3a <memset+0xa>
 8015a38:	4770      	bx	lr
 8015a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8015a3e:	e7f9      	b.n	8015a34 <memset+0x4>

08015a40 <__cvt>:
 8015a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a44:	ec55 4b10 	vmov	r4, r5, d0
 8015a48:	2d00      	cmp	r5, #0
 8015a4a:	460e      	mov	r6, r1
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	462b      	mov	r3, r5
 8015a50:	bfbb      	ittet	lt
 8015a52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a56:	461d      	movlt	r5, r3
 8015a58:	2300      	movge	r3, #0
 8015a5a:	232d      	movlt	r3, #45	; 0x2d
 8015a5c:	700b      	strb	r3, [r1, #0]
 8015a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a64:	4691      	mov	r9, r2
 8015a66:	f023 0820 	bic.w	r8, r3, #32
 8015a6a:	bfbc      	itt	lt
 8015a6c:	4622      	movlt	r2, r4
 8015a6e:	4614      	movlt	r4, r2
 8015a70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015a74:	d005      	beq.n	8015a82 <__cvt+0x42>
 8015a76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015a7a:	d100      	bne.n	8015a7e <__cvt+0x3e>
 8015a7c:	3601      	adds	r6, #1
 8015a7e:	2102      	movs	r1, #2
 8015a80:	e000      	b.n	8015a84 <__cvt+0x44>
 8015a82:	2103      	movs	r1, #3
 8015a84:	ab03      	add	r3, sp, #12
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	ab02      	add	r3, sp, #8
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	ec45 4b10 	vmov	d0, r4, r5
 8015a90:	4653      	mov	r3, sl
 8015a92:	4632      	mov	r2, r6
 8015a94:	f001 ffe0 	bl	8017a58 <_dtoa_r>
 8015a98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015a9c:	4607      	mov	r7, r0
 8015a9e:	d102      	bne.n	8015aa6 <__cvt+0x66>
 8015aa0:	f019 0f01 	tst.w	r9, #1
 8015aa4:	d022      	beq.n	8015aec <__cvt+0xac>
 8015aa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015aaa:	eb07 0906 	add.w	r9, r7, r6
 8015aae:	d110      	bne.n	8015ad2 <__cvt+0x92>
 8015ab0:	783b      	ldrb	r3, [r7, #0]
 8015ab2:	2b30      	cmp	r3, #48	; 0x30
 8015ab4:	d10a      	bne.n	8015acc <__cvt+0x8c>
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2300      	movs	r3, #0
 8015aba:	4620      	mov	r0, r4
 8015abc:	4629      	mov	r1, r5
 8015abe:	f7eb f82b 	bl	8000b18 <__aeabi_dcmpeq>
 8015ac2:	b918      	cbnz	r0, 8015acc <__cvt+0x8c>
 8015ac4:	f1c6 0601 	rsb	r6, r6, #1
 8015ac8:	f8ca 6000 	str.w	r6, [sl]
 8015acc:	f8da 3000 	ldr.w	r3, [sl]
 8015ad0:	4499      	add	r9, r3
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7eb f81d 	bl	8000b18 <__aeabi_dcmpeq>
 8015ade:	b108      	cbz	r0, 8015ae4 <__cvt+0xa4>
 8015ae0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ae4:	2230      	movs	r2, #48	; 0x30
 8015ae6:	9b03      	ldr	r3, [sp, #12]
 8015ae8:	454b      	cmp	r3, r9
 8015aea:	d307      	bcc.n	8015afc <__cvt+0xbc>
 8015aec:	9b03      	ldr	r3, [sp, #12]
 8015aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015af0:	1bdb      	subs	r3, r3, r7
 8015af2:	4638      	mov	r0, r7
 8015af4:	6013      	str	r3, [r2, #0]
 8015af6:	b004      	add	sp, #16
 8015af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015afc:	1c59      	adds	r1, r3, #1
 8015afe:	9103      	str	r1, [sp, #12]
 8015b00:	701a      	strb	r2, [r3, #0]
 8015b02:	e7f0      	b.n	8015ae6 <__cvt+0xa6>

08015b04 <__exponent>:
 8015b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b06:	4603      	mov	r3, r0
 8015b08:	2900      	cmp	r1, #0
 8015b0a:	bfb8      	it	lt
 8015b0c:	4249      	neglt	r1, r1
 8015b0e:	f803 2b02 	strb.w	r2, [r3], #2
 8015b12:	bfb4      	ite	lt
 8015b14:	222d      	movlt	r2, #45	; 0x2d
 8015b16:	222b      	movge	r2, #43	; 0x2b
 8015b18:	2909      	cmp	r1, #9
 8015b1a:	7042      	strb	r2, [r0, #1]
 8015b1c:	dd2a      	ble.n	8015b74 <__exponent+0x70>
 8015b1e:	f10d 0407 	add.w	r4, sp, #7
 8015b22:	46a4      	mov	ip, r4
 8015b24:	270a      	movs	r7, #10
 8015b26:	46a6      	mov	lr, r4
 8015b28:	460a      	mov	r2, r1
 8015b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8015b2e:	fb07 1516 	mls	r5, r7, r6, r1
 8015b32:	3530      	adds	r5, #48	; 0x30
 8015b34:	2a63      	cmp	r2, #99	; 0x63
 8015b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8015b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015b3e:	4631      	mov	r1, r6
 8015b40:	dcf1      	bgt.n	8015b26 <__exponent+0x22>
 8015b42:	3130      	adds	r1, #48	; 0x30
 8015b44:	f1ae 0502 	sub.w	r5, lr, #2
 8015b48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015b4c:	1c44      	adds	r4, r0, #1
 8015b4e:	4629      	mov	r1, r5
 8015b50:	4561      	cmp	r1, ip
 8015b52:	d30a      	bcc.n	8015b6a <__exponent+0x66>
 8015b54:	f10d 0209 	add.w	r2, sp, #9
 8015b58:	eba2 020e 	sub.w	r2, r2, lr
 8015b5c:	4565      	cmp	r5, ip
 8015b5e:	bf88      	it	hi
 8015b60:	2200      	movhi	r2, #0
 8015b62:	4413      	add	r3, r2
 8015b64:	1a18      	subs	r0, r3, r0
 8015b66:	b003      	add	sp, #12
 8015b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015b72:	e7ed      	b.n	8015b50 <__exponent+0x4c>
 8015b74:	2330      	movs	r3, #48	; 0x30
 8015b76:	3130      	adds	r1, #48	; 0x30
 8015b78:	7083      	strb	r3, [r0, #2]
 8015b7a:	70c1      	strb	r1, [r0, #3]
 8015b7c:	1d03      	adds	r3, r0, #4
 8015b7e:	e7f1      	b.n	8015b64 <__exponent+0x60>

08015b80 <_printf_float>:
 8015b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b84:	ed2d 8b02 	vpush	{d8}
 8015b88:	b08d      	sub	sp, #52	; 0x34
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015b90:	4616      	mov	r6, r2
 8015b92:	461f      	mov	r7, r3
 8015b94:	4605      	mov	r5, r0
 8015b96:	f003 fa73 	bl	8019080 <_localeconv_r>
 8015b9a:	f8d0 a000 	ldr.w	sl, [r0]
 8015b9e:	4650      	mov	r0, sl
 8015ba0:	f7ea fb3e 	bl	8000220 <strlen>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ba8:	6823      	ldr	r3, [r4, #0]
 8015baa:	9305      	str	r3, [sp, #20]
 8015bac:	f8d8 3000 	ldr.w	r3, [r8]
 8015bb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015bb4:	3307      	adds	r3, #7
 8015bb6:	f023 0307 	bic.w	r3, r3, #7
 8015bba:	f103 0208 	add.w	r2, r3, #8
 8015bbe:	f8c8 2000 	str.w	r2, [r8]
 8015bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015bca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015bd2:	9307      	str	r3, [sp, #28]
 8015bd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8015bd8:	ee08 0a10 	vmov	s16, r0
 8015bdc:	4b9f      	ldr	r3, [pc, #636]	; (8015e5c <_printf_float+0x2dc>)
 8015bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015be2:	f04f 32ff 	mov.w	r2, #4294967295
 8015be6:	f7ea ffc9 	bl	8000b7c <__aeabi_dcmpun>
 8015bea:	bb88      	cbnz	r0, 8015c50 <_printf_float+0xd0>
 8015bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bf0:	4b9a      	ldr	r3, [pc, #616]	; (8015e5c <_printf_float+0x2dc>)
 8015bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8015bf6:	f7ea ffa3 	bl	8000b40 <__aeabi_dcmple>
 8015bfa:	bb48      	cbnz	r0, 8015c50 <_printf_float+0xd0>
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	2300      	movs	r3, #0
 8015c00:	4640      	mov	r0, r8
 8015c02:	4649      	mov	r1, r9
 8015c04:	f7ea ff92 	bl	8000b2c <__aeabi_dcmplt>
 8015c08:	b110      	cbz	r0, 8015c10 <_printf_float+0x90>
 8015c0a:	232d      	movs	r3, #45	; 0x2d
 8015c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c10:	4b93      	ldr	r3, [pc, #588]	; (8015e60 <_printf_float+0x2e0>)
 8015c12:	4894      	ldr	r0, [pc, #592]	; (8015e64 <_printf_float+0x2e4>)
 8015c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015c18:	bf94      	ite	ls
 8015c1a:	4698      	movls	r8, r3
 8015c1c:	4680      	movhi	r8, r0
 8015c1e:	2303      	movs	r3, #3
 8015c20:	6123      	str	r3, [r4, #16]
 8015c22:	9b05      	ldr	r3, [sp, #20]
 8015c24:	f023 0204 	bic.w	r2, r3, #4
 8015c28:	6022      	str	r2, [r4, #0]
 8015c2a:	f04f 0900 	mov.w	r9, #0
 8015c2e:	9700      	str	r7, [sp, #0]
 8015c30:	4633      	mov	r3, r6
 8015c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8015c34:	4621      	mov	r1, r4
 8015c36:	4628      	mov	r0, r5
 8015c38:	f000 f9d8 	bl	8015fec <_printf_common>
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	f040 8090 	bne.w	8015d62 <_printf_float+0x1e2>
 8015c42:	f04f 30ff 	mov.w	r0, #4294967295
 8015c46:	b00d      	add	sp, #52	; 0x34
 8015c48:	ecbd 8b02 	vpop	{d8}
 8015c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c50:	4642      	mov	r2, r8
 8015c52:	464b      	mov	r3, r9
 8015c54:	4640      	mov	r0, r8
 8015c56:	4649      	mov	r1, r9
 8015c58:	f7ea ff90 	bl	8000b7c <__aeabi_dcmpun>
 8015c5c:	b140      	cbz	r0, 8015c70 <_printf_float+0xf0>
 8015c5e:	464b      	mov	r3, r9
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	bfbc      	itt	lt
 8015c64:	232d      	movlt	r3, #45	; 0x2d
 8015c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015c6a:	487f      	ldr	r0, [pc, #508]	; (8015e68 <_printf_float+0x2e8>)
 8015c6c:	4b7f      	ldr	r3, [pc, #508]	; (8015e6c <_printf_float+0x2ec>)
 8015c6e:	e7d1      	b.n	8015c14 <_printf_float+0x94>
 8015c70:	6863      	ldr	r3, [r4, #4]
 8015c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015c76:	9206      	str	r2, [sp, #24]
 8015c78:	1c5a      	adds	r2, r3, #1
 8015c7a:	d13f      	bne.n	8015cfc <_printf_float+0x17c>
 8015c7c:	2306      	movs	r3, #6
 8015c7e:	6063      	str	r3, [r4, #4]
 8015c80:	9b05      	ldr	r3, [sp, #20]
 8015c82:	6861      	ldr	r1, [r4, #4]
 8015c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015c88:	2300      	movs	r3, #0
 8015c8a:	9303      	str	r3, [sp, #12]
 8015c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8015c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015c92:	ab09      	add	r3, sp, #36	; 0x24
 8015c94:	ec49 8b10 	vmov	d0, r8, r9
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	6022      	str	r2, [r4, #0]
 8015c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f7ff fecd 	bl	8015a40 <__cvt>
 8015ca6:	9b06      	ldr	r3, [sp, #24]
 8015ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015caa:	2b47      	cmp	r3, #71	; 0x47
 8015cac:	4680      	mov	r8, r0
 8015cae:	d108      	bne.n	8015cc2 <_printf_float+0x142>
 8015cb0:	1cc8      	adds	r0, r1, #3
 8015cb2:	db02      	blt.n	8015cba <_printf_float+0x13a>
 8015cb4:	6863      	ldr	r3, [r4, #4]
 8015cb6:	4299      	cmp	r1, r3
 8015cb8:	dd41      	ble.n	8015d3e <_printf_float+0x1be>
 8015cba:	f1ab 0b02 	sub.w	fp, fp, #2
 8015cbe:	fa5f fb8b 	uxtb.w	fp, fp
 8015cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015cc6:	d820      	bhi.n	8015d0a <_printf_float+0x18a>
 8015cc8:	3901      	subs	r1, #1
 8015cca:	465a      	mov	r2, fp
 8015ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8015cd2:	f7ff ff17 	bl	8015b04 <__exponent>
 8015cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cd8:	1813      	adds	r3, r2, r0
 8015cda:	2a01      	cmp	r2, #1
 8015cdc:	4681      	mov	r9, r0
 8015cde:	6123      	str	r3, [r4, #16]
 8015ce0:	dc02      	bgt.n	8015ce8 <_printf_float+0x168>
 8015ce2:	6822      	ldr	r2, [r4, #0]
 8015ce4:	07d2      	lsls	r2, r2, #31
 8015ce6:	d501      	bpl.n	8015cec <_printf_float+0x16c>
 8015ce8:	3301      	adds	r3, #1
 8015cea:	6123      	str	r3, [r4, #16]
 8015cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d09c      	beq.n	8015c2e <_printf_float+0xae>
 8015cf4:	232d      	movs	r3, #45	; 0x2d
 8015cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cfa:	e798      	b.n	8015c2e <_printf_float+0xae>
 8015cfc:	9a06      	ldr	r2, [sp, #24]
 8015cfe:	2a47      	cmp	r2, #71	; 0x47
 8015d00:	d1be      	bne.n	8015c80 <_printf_float+0x100>
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d1bc      	bne.n	8015c80 <_printf_float+0x100>
 8015d06:	2301      	movs	r3, #1
 8015d08:	e7b9      	b.n	8015c7e <_printf_float+0xfe>
 8015d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015d0e:	d118      	bne.n	8015d42 <_printf_float+0x1c2>
 8015d10:	2900      	cmp	r1, #0
 8015d12:	6863      	ldr	r3, [r4, #4]
 8015d14:	dd0b      	ble.n	8015d2e <_printf_float+0x1ae>
 8015d16:	6121      	str	r1, [r4, #16]
 8015d18:	b913      	cbnz	r3, 8015d20 <_printf_float+0x1a0>
 8015d1a:	6822      	ldr	r2, [r4, #0]
 8015d1c:	07d0      	lsls	r0, r2, #31
 8015d1e:	d502      	bpl.n	8015d26 <_printf_float+0x1a6>
 8015d20:	3301      	adds	r3, #1
 8015d22:	440b      	add	r3, r1
 8015d24:	6123      	str	r3, [r4, #16]
 8015d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8015d28:	f04f 0900 	mov.w	r9, #0
 8015d2c:	e7de      	b.n	8015cec <_printf_float+0x16c>
 8015d2e:	b913      	cbnz	r3, 8015d36 <_printf_float+0x1b6>
 8015d30:	6822      	ldr	r2, [r4, #0]
 8015d32:	07d2      	lsls	r2, r2, #31
 8015d34:	d501      	bpl.n	8015d3a <_printf_float+0x1ba>
 8015d36:	3302      	adds	r3, #2
 8015d38:	e7f4      	b.n	8015d24 <_printf_float+0x1a4>
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	e7f2      	b.n	8015d24 <_printf_float+0x1a4>
 8015d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d44:	4299      	cmp	r1, r3
 8015d46:	db05      	blt.n	8015d54 <_printf_float+0x1d4>
 8015d48:	6823      	ldr	r3, [r4, #0]
 8015d4a:	6121      	str	r1, [r4, #16]
 8015d4c:	07d8      	lsls	r0, r3, #31
 8015d4e:	d5ea      	bpl.n	8015d26 <_printf_float+0x1a6>
 8015d50:	1c4b      	adds	r3, r1, #1
 8015d52:	e7e7      	b.n	8015d24 <_printf_float+0x1a4>
 8015d54:	2900      	cmp	r1, #0
 8015d56:	bfd4      	ite	le
 8015d58:	f1c1 0202 	rsble	r2, r1, #2
 8015d5c:	2201      	movgt	r2, #1
 8015d5e:	4413      	add	r3, r2
 8015d60:	e7e0      	b.n	8015d24 <_printf_float+0x1a4>
 8015d62:	6823      	ldr	r3, [r4, #0]
 8015d64:	055a      	lsls	r2, r3, #21
 8015d66:	d407      	bmi.n	8015d78 <_printf_float+0x1f8>
 8015d68:	6923      	ldr	r3, [r4, #16]
 8015d6a:	4642      	mov	r2, r8
 8015d6c:	4631      	mov	r1, r6
 8015d6e:	4628      	mov	r0, r5
 8015d70:	47b8      	blx	r7
 8015d72:	3001      	adds	r0, #1
 8015d74:	d12c      	bne.n	8015dd0 <_printf_float+0x250>
 8015d76:	e764      	b.n	8015c42 <_printf_float+0xc2>
 8015d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015d7c:	f240 80e0 	bls.w	8015f40 <_printf_float+0x3c0>
 8015d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d84:	2200      	movs	r2, #0
 8015d86:	2300      	movs	r3, #0
 8015d88:	f7ea fec6 	bl	8000b18 <__aeabi_dcmpeq>
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	d034      	beq.n	8015dfa <_printf_float+0x27a>
 8015d90:	4a37      	ldr	r2, [pc, #220]	; (8015e70 <_printf_float+0x2f0>)
 8015d92:	2301      	movs	r3, #1
 8015d94:	4631      	mov	r1, r6
 8015d96:	4628      	mov	r0, r5
 8015d98:	47b8      	blx	r7
 8015d9a:	3001      	adds	r0, #1
 8015d9c:	f43f af51 	beq.w	8015c42 <_printf_float+0xc2>
 8015da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015da4:	429a      	cmp	r2, r3
 8015da6:	db02      	blt.n	8015dae <_printf_float+0x22e>
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	07d8      	lsls	r0, r3, #31
 8015dac:	d510      	bpl.n	8015dd0 <_printf_float+0x250>
 8015dae:	ee18 3a10 	vmov	r3, s16
 8015db2:	4652      	mov	r2, sl
 8015db4:	4631      	mov	r1, r6
 8015db6:	4628      	mov	r0, r5
 8015db8:	47b8      	blx	r7
 8015dba:	3001      	adds	r0, #1
 8015dbc:	f43f af41 	beq.w	8015c42 <_printf_float+0xc2>
 8015dc0:	f04f 0800 	mov.w	r8, #0
 8015dc4:	f104 091a 	add.w	r9, r4, #26
 8015dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	4543      	cmp	r3, r8
 8015dce:	dc09      	bgt.n	8015de4 <_printf_float+0x264>
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	079b      	lsls	r3, r3, #30
 8015dd4:	f100 8105 	bmi.w	8015fe2 <_printf_float+0x462>
 8015dd8:	68e0      	ldr	r0, [r4, #12]
 8015dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ddc:	4298      	cmp	r0, r3
 8015dde:	bfb8      	it	lt
 8015de0:	4618      	movlt	r0, r3
 8015de2:	e730      	b.n	8015c46 <_printf_float+0xc6>
 8015de4:	2301      	movs	r3, #1
 8015de6:	464a      	mov	r2, r9
 8015de8:	4631      	mov	r1, r6
 8015dea:	4628      	mov	r0, r5
 8015dec:	47b8      	blx	r7
 8015dee:	3001      	adds	r0, #1
 8015df0:	f43f af27 	beq.w	8015c42 <_printf_float+0xc2>
 8015df4:	f108 0801 	add.w	r8, r8, #1
 8015df8:	e7e6      	b.n	8015dc8 <_printf_float+0x248>
 8015dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	dc39      	bgt.n	8015e74 <_printf_float+0x2f4>
 8015e00:	4a1b      	ldr	r2, [pc, #108]	; (8015e70 <_printf_float+0x2f0>)
 8015e02:	2301      	movs	r3, #1
 8015e04:	4631      	mov	r1, r6
 8015e06:	4628      	mov	r0, r5
 8015e08:	47b8      	blx	r7
 8015e0a:	3001      	adds	r0, #1
 8015e0c:	f43f af19 	beq.w	8015c42 <_printf_float+0xc2>
 8015e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e14:	4313      	orrs	r3, r2
 8015e16:	d102      	bne.n	8015e1e <_printf_float+0x29e>
 8015e18:	6823      	ldr	r3, [r4, #0]
 8015e1a:	07d9      	lsls	r1, r3, #31
 8015e1c:	d5d8      	bpl.n	8015dd0 <_printf_float+0x250>
 8015e1e:	ee18 3a10 	vmov	r3, s16
 8015e22:	4652      	mov	r2, sl
 8015e24:	4631      	mov	r1, r6
 8015e26:	4628      	mov	r0, r5
 8015e28:	47b8      	blx	r7
 8015e2a:	3001      	adds	r0, #1
 8015e2c:	f43f af09 	beq.w	8015c42 <_printf_float+0xc2>
 8015e30:	f04f 0900 	mov.w	r9, #0
 8015e34:	f104 0a1a 	add.w	sl, r4, #26
 8015e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e3a:	425b      	negs	r3, r3
 8015e3c:	454b      	cmp	r3, r9
 8015e3e:	dc01      	bgt.n	8015e44 <_printf_float+0x2c4>
 8015e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e42:	e792      	b.n	8015d6a <_printf_float+0x1ea>
 8015e44:	2301      	movs	r3, #1
 8015e46:	4652      	mov	r2, sl
 8015e48:	4631      	mov	r1, r6
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	47b8      	blx	r7
 8015e4e:	3001      	adds	r0, #1
 8015e50:	f43f aef7 	beq.w	8015c42 <_printf_float+0xc2>
 8015e54:	f109 0901 	add.w	r9, r9, #1
 8015e58:	e7ee      	b.n	8015e38 <_printf_float+0x2b8>
 8015e5a:	bf00      	nop
 8015e5c:	7fefffff 	.word	0x7fefffff
 8015e60:	0801c1d0 	.word	0x0801c1d0
 8015e64:	0801c1d4 	.word	0x0801c1d4
 8015e68:	0801c1dc 	.word	0x0801c1dc
 8015e6c:	0801c1d8 	.word	0x0801c1d8
 8015e70:	0801c1e0 	.word	0x0801c1e0
 8015e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	bfa8      	it	ge
 8015e7c:	461a      	movge	r2, r3
 8015e7e:	2a00      	cmp	r2, #0
 8015e80:	4691      	mov	r9, r2
 8015e82:	dc37      	bgt.n	8015ef4 <_printf_float+0x374>
 8015e84:	f04f 0b00 	mov.w	fp, #0
 8015e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e8c:	f104 021a 	add.w	r2, r4, #26
 8015e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015e92:	9305      	str	r3, [sp, #20]
 8015e94:	eba3 0309 	sub.w	r3, r3, r9
 8015e98:	455b      	cmp	r3, fp
 8015e9a:	dc33      	bgt.n	8015f04 <_printf_float+0x384>
 8015e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	db3b      	blt.n	8015f1c <_printf_float+0x39c>
 8015ea4:	6823      	ldr	r3, [r4, #0]
 8015ea6:	07da      	lsls	r2, r3, #31
 8015ea8:	d438      	bmi.n	8015f1c <_printf_float+0x39c>
 8015eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eac:	9a05      	ldr	r2, [sp, #20]
 8015eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015eb0:	1a9a      	subs	r2, r3, r2
 8015eb2:	eba3 0901 	sub.w	r9, r3, r1
 8015eb6:	4591      	cmp	r9, r2
 8015eb8:	bfa8      	it	ge
 8015eba:	4691      	movge	r9, r2
 8015ebc:	f1b9 0f00 	cmp.w	r9, #0
 8015ec0:	dc35      	bgt.n	8015f2e <_printf_float+0x3ae>
 8015ec2:	f04f 0800 	mov.w	r8, #0
 8015ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015eca:	f104 0a1a 	add.w	sl, r4, #26
 8015ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ed2:	1a9b      	subs	r3, r3, r2
 8015ed4:	eba3 0309 	sub.w	r3, r3, r9
 8015ed8:	4543      	cmp	r3, r8
 8015eda:	f77f af79 	ble.w	8015dd0 <_printf_float+0x250>
 8015ede:	2301      	movs	r3, #1
 8015ee0:	4652      	mov	r2, sl
 8015ee2:	4631      	mov	r1, r6
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	47b8      	blx	r7
 8015ee8:	3001      	adds	r0, #1
 8015eea:	f43f aeaa 	beq.w	8015c42 <_printf_float+0xc2>
 8015eee:	f108 0801 	add.w	r8, r8, #1
 8015ef2:	e7ec      	b.n	8015ece <_printf_float+0x34e>
 8015ef4:	4613      	mov	r3, r2
 8015ef6:	4631      	mov	r1, r6
 8015ef8:	4642      	mov	r2, r8
 8015efa:	4628      	mov	r0, r5
 8015efc:	47b8      	blx	r7
 8015efe:	3001      	adds	r0, #1
 8015f00:	d1c0      	bne.n	8015e84 <_printf_float+0x304>
 8015f02:	e69e      	b.n	8015c42 <_printf_float+0xc2>
 8015f04:	2301      	movs	r3, #1
 8015f06:	4631      	mov	r1, r6
 8015f08:	4628      	mov	r0, r5
 8015f0a:	9205      	str	r2, [sp, #20]
 8015f0c:	47b8      	blx	r7
 8015f0e:	3001      	adds	r0, #1
 8015f10:	f43f ae97 	beq.w	8015c42 <_printf_float+0xc2>
 8015f14:	9a05      	ldr	r2, [sp, #20]
 8015f16:	f10b 0b01 	add.w	fp, fp, #1
 8015f1a:	e7b9      	b.n	8015e90 <_printf_float+0x310>
 8015f1c:	ee18 3a10 	vmov	r3, s16
 8015f20:	4652      	mov	r2, sl
 8015f22:	4631      	mov	r1, r6
 8015f24:	4628      	mov	r0, r5
 8015f26:	47b8      	blx	r7
 8015f28:	3001      	adds	r0, #1
 8015f2a:	d1be      	bne.n	8015eaa <_printf_float+0x32a>
 8015f2c:	e689      	b.n	8015c42 <_printf_float+0xc2>
 8015f2e:	9a05      	ldr	r2, [sp, #20]
 8015f30:	464b      	mov	r3, r9
 8015f32:	4442      	add	r2, r8
 8015f34:	4631      	mov	r1, r6
 8015f36:	4628      	mov	r0, r5
 8015f38:	47b8      	blx	r7
 8015f3a:	3001      	adds	r0, #1
 8015f3c:	d1c1      	bne.n	8015ec2 <_printf_float+0x342>
 8015f3e:	e680      	b.n	8015c42 <_printf_float+0xc2>
 8015f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f42:	2a01      	cmp	r2, #1
 8015f44:	dc01      	bgt.n	8015f4a <_printf_float+0x3ca>
 8015f46:	07db      	lsls	r3, r3, #31
 8015f48:	d538      	bpl.n	8015fbc <_printf_float+0x43c>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	4642      	mov	r2, r8
 8015f4e:	4631      	mov	r1, r6
 8015f50:	4628      	mov	r0, r5
 8015f52:	47b8      	blx	r7
 8015f54:	3001      	adds	r0, #1
 8015f56:	f43f ae74 	beq.w	8015c42 <_printf_float+0xc2>
 8015f5a:	ee18 3a10 	vmov	r3, s16
 8015f5e:	4652      	mov	r2, sl
 8015f60:	4631      	mov	r1, r6
 8015f62:	4628      	mov	r0, r5
 8015f64:	47b8      	blx	r7
 8015f66:	3001      	adds	r0, #1
 8015f68:	f43f ae6b 	beq.w	8015c42 <_printf_float+0xc2>
 8015f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f70:	2200      	movs	r2, #0
 8015f72:	2300      	movs	r3, #0
 8015f74:	f7ea fdd0 	bl	8000b18 <__aeabi_dcmpeq>
 8015f78:	b9d8      	cbnz	r0, 8015fb2 <_printf_float+0x432>
 8015f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f7c:	f108 0201 	add.w	r2, r8, #1
 8015f80:	3b01      	subs	r3, #1
 8015f82:	4631      	mov	r1, r6
 8015f84:	4628      	mov	r0, r5
 8015f86:	47b8      	blx	r7
 8015f88:	3001      	adds	r0, #1
 8015f8a:	d10e      	bne.n	8015faa <_printf_float+0x42a>
 8015f8c:	e659      	b.n	8015c42 <_printf_float+0xc2>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	4652      	mov	r2, sl
 8015f92:	4631      	mov	r1, r6
 8015f94:	4628      	mov	r0, r5
 8015f96:	47b8      	blx	r7
 8015f98:	3001      	adds	r0, #1
 8015f9a:	f43f ae52 	beq.w	8015c42 <_printf_float+0xc2>
 8015f9e:	f108 0801 	add.w	r8, r8, #1
 8015fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fa4:	3b01      	subs	r3, #1
 8015fa6:	4543      	cmp	r3, r8
 8015fa8:	dcf1      	bgt.n	8015f8e <_printf_float+0x40e>
 8015faa:	464b      	mov	r3, r9
 8015fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015fb0:	e6dc      	b.n	8015d6c <_printf_float+0x1ec>
 8015fb2:	f04f 0800 	mov.w	r8, #0
 8015fb6:	f104 0a1a 	add.w	sl, r4, #26
 8015fba:	e7f2      	b.n	8015fa2 <_printf_float+0x422>
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	4642      	mov	r2, r8
 8015fc0:	e7df      	b.n	8015f82 <_printf_float+0x402>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	464a      	mov	r2, r9
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	4628      	mov	r0, r5
 8015fca:	47b8      	blx	r7
 8015fcc:	3001      	adds	r0, #1
 8015fce:	f43f ae38 	beq.w	8015c42 <_printf_float+0xc2>
 8015fd2:	f108 0801 	add.w	r8, r8, #1
 8015fd6:	68e3      	ldr	r3, [r4, #12]
 8015fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015fda:	1a5b      	subs	r3, r3, r1
 8015fdc:	4543      	cmp	r3, r8
 8015fde:	dcf0      	bgt.n	8015fc2 <_printf_float+0x442>
 8015fe0:	e6fa      	b.n	8015dd8 <_printf_float+0x258>
 8015fe2:	f04f 0800 	mov.w	r8, #0
 8015fe6:	f104 0919 	add.w	r9, r4, #25
 8015fea:	e7f4      	b.n	8015fd6 <_printf_float+0x456>

08015fec <_printf_common>:
 8015fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ff0:	4616      	mov	r6, r2
 8015ff2:	4699      	mov	r9, r3
 8015ff4:	688a      	ldr	r2, [r1, #8]
 8015ff6:	690b      	ldr	r3, [r1, #16]
 8015ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	bfb8      	it	lt
 8016000:	4613      	movlt	r3, r2
 8016002:	6033      	str	r3, [r6, #0]
 8016004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016008:	4607      	mov	r7, r0
 801600a:	460c      	mov	r4, r1
 801600c:	b10a      	cbz	r2, 8016012 <_printf_common+0x26>
 801600e:	3301      	adds	r3, #1
 8016010:	6033      	str	r3, [r6, #0]
 8016012:	6823      	ldr	r3, [r4, #0]
 8016014:	0699      	lsls	r1, r3, #26
 8016016:	bf42      	ittt	mi
 8016018:	6833      	ldrmi	r3, [r6, #0]
 801601a:	3302      	addmi	r3, #2
 801601c:	6033      	strmi	r3, [r6, #0]
 801601e:	6825      	ldr	r5, [r4, #0]
 8016020:	f015 0506 	ands.w	r5, r5, #6
 8016024:	d106      	bne.n	8016034 <_printf_common+0x48>
 8016026:	f104 0a19 	add.w	sl, r4, #25
 801602a:	68e3      	ldr	r3, [r4, #12]
 801602c:	6832      	ldr	r2, [r6, #0]
 801602e:	1a9b      	subs	r3, r3, r2
 8016030:	42ab      	cmp	r3, r5
 8016032:	dc26      	bgt.n	8016082 <_printf_common+0x96>
 8016034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016038:	1e13      	subs	r3, r2, #0
 801603a:	6822      	ldr	r2, [r4, #0]
 801603c:	bf18      	it	ne
 801603e:	2301      	movne	r3, #1
 8016040:	0692      	lsls	r2, r2, #26
 8016042:	d42b      	bmi.n	801609c <_printf_common+0xb0>
 8016044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016048:	4649      	mov	r1, r9
 801604a:	4638      	mov	r0, r7
 801604c:	47c0      	blx	r8
 801604e:	3001      	adds	r0, #1
 8016050:	d01e      	beq.n	8016090 <_printf_common+0xa4>
 8016052:	6823      	ldr	r3, [r4, #0]
 8016054:	68e5      	ldr	r5, [r4, #12]
 8016056:	6832      	ldr	r2, [r6, #0]
 8016058:	f003 0306 	and.w	r3, r3, #6
 801605c:	2b04      	cmp	r3, #4
 801605e:	bf08      	it	eq
 8016060:	1aad      	subeq	r5, r5, r2
 8016062:	68a3      	ldr	r3, [r4, #8]
 8016064:	6922      	ldr	r2, [r4, #16]
 8016066:	bf0c      	ite	eq
 8016068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801606c:	2500      	movne	r5, #0
 801606e:	4293      	cmp	r3, r2
 8016070:	bfc4      	itt	gt
 8016072:	1a9b      	subgt	r3, r3, r2
 8016074:	18ed      	addgt	r5, r5, r3
 8016076:	2600      	movs	r6, #0
 8016078:	341a      	adds	r4, #26
 801607a:	42b5      	cmp	r5, r6
 801607c:	d11a      	bne.n	80160b4 <_printf_common+0xc8>
 801607e:	2000      	movs	r0, #0
 8016080:	e008      	b.n	8016094 <_printf_common+0xa8>
 8016082:	2301      	movs	r3, #1
 8016084:	4652      	mov	r2, sl
 8016086:	4649      	mov	r1, r9
 8016088:	4638      	mov	r0, r7
 801608a:	47c0      	blx	r8
 801608c:	3001      	adds	r0, #1
 801608e:	d103      	bne.n	8016098 <_printf_common+0xac>
 8016090:	f04f 30ff 	mov.w	r0, #4294967295
 8016094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016098:	3501      	adds	r5, #1
 801609a:	e7c6      	b.n	801602a <_printf_common+0x3e>
 801609c:	18e1      	adds	r1, r4, r3
 801609e:	1c5a      	adds	r2, r3, #1
 80160a0:	2030      	movs	r0, #48	; 0x30
 80160a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80160a6:	4422      	add	r2, r4
 80160a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80160ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80160b0:	3302      	adds	r3, #2
 80160b2:	e7c7      	b.n	8016044 <_printf_common+0x58>
 80160b4:	2301      	movs	r3, #1
 80160b6:	4622      	mov	r2, r4
 80160b8:	4649      	mov	r1, r9
 80160ba:	4638      	mov	r0, r7
 80160bc:	47c0      	blx	r8
 80160be:	3001      	adds	r0, #1
 80160c0:	d0e6      	beq.n	8016090 <_printf_common+0xa4>
 80160c2:	3601      	adds	r6, #1
 80160c4:	e7d9      	b.n	801607a <_printf_common+0x8e>
	...

080160c8 <_printf_i>:
 80160c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160cc:	7e0f      	ldrb	r7, [r1, #24]
 80160ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80160d0:	2f78      	cmp	r7, #120	; 0x78
 80160d2:	4691      	mov	r9, r2
 80160d4:	4680      	mov	r8, r0
 80160d6:	460c      	mov	r4, r1
 80160d8:	469a      	mov	sl, r3
 80160da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80160de:	d807      	bhi.n	80160f0 <_printf_i+0x28>
 80160e0:	2f62      	cmp	r7, #98	; 0x62
 80160e2:	d80a      	bhi.n	80160fa <_printf_i+0x32>
 80160e4:	2f00      	cmp	r7, #0
 80160e6:	f000 80d8 	beq.w	801629a <_printf_i+0x1d2>
 80160ea:	2f58      	cmp	r7, #88	; 0x58
 80160ec:	f000 80a3 	beq.w	8016236 <_printf_i+0x16e>
 80160f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80160f8:	e03a      	b.n	8016170 <_printf_i+0xa8>
 80160fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80160fe:	2b15      	cmp	r3, #21
 8016100:	d8f6      	bhi.n	80160f0 <_printf_i+0x28>
 8016102:	a101      	add	r1, pc, #4	; (adr r1, 8016108 <_printf_i+0x40>)
 8016104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016108:	08016161 	.word	0x08016161
 801610c:	08016175 	.word	0x08016175
 8016110:	080160f1 	.word	0x080160f1
 8016114:	080160f1 	.word	0x080160f1
 8016118:	080160f1 	.word	0x080160f1
 801611c:	080160f1 	.word	0x080160f1
 8016120:	08016175 	.word	0x08016175
 8016124:	080160f1 	.word	0x080160f1
 8016128:	080160f1 	.word	0x080160f1
 801612c:	080160f1 	.word	0x080160f1
 8016130:	080160f1 	.word	0x080160f1
 8016134:	08016281 	.word	0x08016281
 8016138:	080161a5 	.word	0x080161a5
 801613c:	08016263 	.word	0x08016263
 8016140:	080160f1 	.word	0x080160f1
 8016144:	080160f1 	.word	0x080160f1
 8016148:	080162a3 	.word	0x080162a3
 801614c:	080160f1 	.word	0x080160f1
 8016150:	080161a5 	.word	0x080161a5
 8016154:	080160f1 	.word	0x080160f1
 8016158:	080160f1 	.word	0x080160f1
 801615c:	0801626b 	.word	0x0801626b
 8016160:	682b      	ldr	r3, [r5, #0]
 8016162:	1d1a      	adds	r2, r3, #4
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	602a      	str	r2, [r5, #0]
 8016168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801616c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016170:	2301      	movs	r3, #1
 8016172:	e0a3      	b.n	80162bc <_printf_i+0x1f4>
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	6829      	ldr	r1, [r5, #0]
 8016178:	0606      	lsls	r6, r0, #24
 801617a:	f101 0304 	add.w	r3, r1, #4
 801617e:	d50a      	bpl.n	8016196 <_printf_i+0xce>
 8016180:	680e      	ldr	r6, [r1, #0]
 8016182:	602b      	str	r3, [r5, #0]
 8016184:	2e00      	cmp	r6, #0
 8016186:	da03      	bge.n	8016190 <_printf_i+0xc8>
 8016188:	232d      	movs	r3, #45	; 0x2d
 801618a:	4276      	negs	r6, r6
 801618c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016190:	485e      	ldr	r0, [pc, #376]	; (801630c <_printf_i+0x244>)
 8016192:	230a      	movs	r3, #10
 8016194:	e019      	b.n	80161ca <_printf_i+0x102>
 8016196:	680e      	ldr	r6, [r1, #0]
 8016198:	602b      	str	r3, [r5, #0]
 801619a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801619e:	bf18      	it	ne
 80161a0:	b236      	sxthne	r6, r6
 80161a2:	e7ef      	b.n	8016184 <_printf_i+0xbc>
 80161a4:	682b      	ldr	r3, [r5, #0]
 80161a6:	6820      	ldr	r0, [r4, #0]
 80161a8:	1d19      	adds	r1, r3, #4
 80161aa:	6029      	str	r1, [r5, #0]
 80161ac:	0601      	lsls	r1, r0, #24
 80161ae:	d501      	bpl.n	80161b4 <_printf_i+0xec>
 80161b0:	681e      	ldr	r6, [r3, #0]
 80161b2:	e002      	b.n	80161ba <_printf_i+0xf2>
 80161b4:	0646      	lsls	r6, r0, #25
 80161b6:	d5fb      	bpl.n	80161b0 <_printf_i+0xe8>
 80161b8:	881e      	ldrh	r6, [r3, #0]
 80161ba:	4854      	ldr	r0, [pc, #336]	; (801630c <_printf_i+0x244>)
 80161bc:	2f6f      	cmp	r7, #111	; 0x6f
 80161be:	bf0c      	ite	eq
 80161c0:	2308      	moveq	r3, #8
 80161c2:	230a      	movne	r3, #10
 80161c4:	2100      	movs	r1, #0
 80161c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80161ca:	6865      	ldr	r5, [r4, #4]
 80161cc:	60a5      	str	r5, [r4, #8]
 80161ce:	2d00      	cmp	r5, #0
 80161d0:	bfa2      	ittt	ge
 80161d2:	6821      	ldrge	r1, [r4, #0]
 80161d4:	f021 0104 	bicge.w	r1, r1, #4
 80161d8:	6021      	strge	r1, [r4, #0]
 80161da:	b90e      	cbnz	r6, 80161e0 <_printf_i+0x118>
 80161dc:	2d00      	cmp	r5, #0
 80161de:	d04d      	beq.n	801627c <_printf_i+0x1b4>
 80161e0:	4615      	mov	r5, r2
 80161e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80161e6:	fb03 6711 	mls	r7, r3, r1, r6
 80161ea:	5dc7      	ldrb	r7, [r0, r7]
 80161ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80161f0:	4637      	mov	r7, r6
 80161f2:	42bb      	cmp	r3, r7
 80161f4:	460e      	mov	r6, r1
 80161f6:	d9f4      	bls.n	80161e2 <_printf_i+0x11a>
 80161f8:	2b08      	cmp	r3, #8
 80161fa:	d10b      	bne.n	8016214 <_printf_i+0x14c>
 80161fc:	6823      	ldr	r3, [r4, #0]
 80161fe:	07de      	lsls	r6, r3, #31
 8016200:	d508      	bpl.n	8016214 <_printf_i+0x14c>
 8016202:	6923      	ldr	r3, [r4, #16]
 8016204:	6861      	ldr	r1, [r4, #4]
 8016206:	4299      	cmp	r1, r3
 8016208:	bfde      	ittt	le
 801620a:	2330      	movle	r3, #48	; 0x30
 801620c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016214:	1b52      	subs	r2, r2, r5
 8016216:	6122      	str	r2, [r4, #16]
 8016218:	f8cd a000 	str.w	sl, [sp]
 801621c:	464b      	mov	r3, r9
 801621e:	aa03      	add	r2, sp, #12
 8016220:	4621      	mov	r1, r4
 8016222:	4640      	mov	r0, r8
 8016224:	f7ff fee2 	bl	8015fec <_printf_common>
 8016228:	3001      	adds	r0, #1
 801622a:	d14c      	bne.n	80162c6 <_printf_i+0x1fe>
 801622c:	f04f 30ff 	mov.w	r0, #4294967295
 8016230:	b004      	add	sp, #16
 8016232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016236:	4835      	ldr	r0, [pc, #212]	; (801630c <_printf_i+0x244>)
 8016238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801623c:	6829      	ldr	r1, [r5, #0]
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	f851 6b04 	ldr.w	r6, [r1], #4
 8016244:	6029      	str	r1, [r5, #0]
 8016246:	061d      	lsls	r5, r3, #24
 8016248:	d514      	bpl.n	8016274 <_printf_i+0x1ac>
 801624a:	07df      	lsls	r7, r3, #31
 801624c:	bf44      	itt	mi
 801624e:	f043 0320 	orrmi.w	r3, r3, #32
 8016252:	6023      	strmi	r3, [r4, #0]
 8016254:	b91e      	cbnz	r6, 801625e <_printf_i+0x196>
 8016256:	6823      	ldr	r3, [r4, #0]
 8016258:	f023 0320 	bic.w	r3, r3, #32
 801625c:	6023      	str	r3, [r4, #0]
 801625e:	2310      	movs	r3, #16
 8016260:	e7b0      	b.n	80161c4 <_printf_i+0xfc>
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	f043 0320 	orr.w	r3, r3, #32
 8016268:	6023      	str	r3, [r4, #0]
 801626a:	2378      	movs	r3, #120	; 0x78
 801626c:	4828      	ldr	r0, [pc, #160]	; (8016310 <_printf_i+0x248>)
 801626e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016272:	e7e3      	b.n	801623c <_printf_i+0x174>
 8016274:	0659      	lsls	r1, r3, #25
 8016276:	bf48      	it	mi
 8016278:	b2b6      	uxthmi	r6, r6
 801627a:	e7e6      	b.n	801624a <_printf_i+0x182>
 801627c:	4615      	mov	r5, r2
 801627e:	e7bb      	b.n	80161f8 <_printf_i+0x130>
 8016280:	682b      	ldr	r3, [r5, #0]
 8016282:	6826      	ldr	r6, [r4, #0]
 8016284:	6961      	ldr	r1, [r4, #20]
 8016286:	1d18      	adds	r0, r3, #4
 8016288:	6028      	str	r0, [r5, #0]
 801628a:	0635      	lsls	r5, r6, #24
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	d501      	bpl.n	8016294 <_printf_i+0x1cc>
 8016290:	6019      	str	r1, [r3, #0]
 8016292:	e002      	b.n	801629a <_printf_i+0x1d2>
 8016294:	0670      	lsls	r0, r6, #25
 8016296:	d5fb      	bpl.n	8016290 <_printf_i+0x1c8>
 8016298:	8019      	strh	r1, [r3, #0]
 801629a:	2300      	movs	r3, #0
 801629c:	6123      	str	r3, [r4, #16]
 801629e:	4615      	mov	r5, r2
 80162a0:	e7ba      	b.n	8016218 <_printf_i+0x150>
 80162a2:	682b      	ldr	r3, [r5, #0]
 80162a4:	1d1a      	adds	r2, r3, #4
 80162a6:	602a      	str	r2, [r5, #0]
 80162a8:	681d      	ldr	r5, [r3, #0]
 80162aa:	6862      	ldr	r2, [r4, #4]
 80162ac:	2100      	movs	r1, #0
 80162ae:	4628      	mov	r0, r5
 80162b0:	f7e9 ffbe 	bl	8000230 <memchr>
 80162b4:	b108      	cbz	r0, 80162ba <_printf_i+0x1f2>
 80162b6:	1b40      	subs	r0, r0, r5
 80162b8:	6060      	str	r0, [r4, #4]
 80162ba:	6863      	ldr	r3, [r4, #4]
 80162bc:	6123      	str	r3, [r4, #16]
 80162be:	2300      	movs	r3, #0
 80162c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162c4:	e7a8      	b.n	8016218 <_printf_i+0x150>
 80162c6:	6923      	ldr	r3, [r4, #16]
 80162c8:	462a      	mov	r2, r5
 80162ca:	4649      	mov	r1, r9
 80162cc:	4640      	mov	r0, r8
 80162ce:	47d0      	blx	sl
 80162d0:	3001      	adds	r0, #1
 80162d2:	d0ab      	beq.n	801622c <_printf_i+0x164>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	079b      	lsls	r3, r3, #30
 80162d8:	d413      	bmi.n	8016302 <_printf_i+0x23a>
 80162da:	68e0      	ldr	r0, [r4, #12]
 80162dc:	9b03      	ldr	r3, [sp, #12]
 80162de:	4298      	cmp	r0, r3
 80162e0:	bfb8      	it	lt
 80162e2:	4618      	movlt	r0, r3
 80162e4:	e7a4      	b.n	8016230 <_printf_i+0x168>
 80162e6:	2301      	movs	r3, #1
 80162e8:	4632      	mov	r2, r6
 80162ea:	4649      	mov	r1, r9
 80162ec:	4640      	mov	r0, r8
 80162ee:	47d0      	blx	sl
 80162f0:	3001      	adds	r0, #1
 80162f2:	d09b      	beq.n	801622c <_printf_i+0x164>
 80162f4:	3501      	adds	r5, #1
 80162f6:	68e3      	ldr	r3, [r4, #12]
 80162f8:	9903      	ldr	r1, [sp, #12]
 80162fa:	1a5b      	subs	r3, r3, r1
 80162fc:	42ab      	cmp	r3, r5
 80162fe:	dcf2      	bgt.n	80162e6 <_printf_i+0x21e>
 8016300:	e7eb      	b.n	80162da <_printf_i+0x212>
 8016302:	2500      	movs	r5, #0
 8016304:	f104 0619 	add.w	r6, r4, #25
 8016308:	e7f5      	b.n	80162f6 <_printf_i+0x22e>
 801630a:	bf00      	nop
 801630c:	0801c1e2 	.word	0x0801c1e2
 8016310:	0801c1f3 	.word	0x0801c1f3

08016314 <_scanf_float>:
 8016314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016318:	b087      	sub	sp, #28
 801631a:	4617      	mov	r7, r2
 801631c:	9303      	str	r3, [sp, #12]
 801631e:	688b      	ldr	r3, [r1, #8]
 8016320:	1e5a      	subs	r2, r3, #1
 8016322:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016326:	bf83      	ittte	hi
 8016328:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801632c:	195b      	addhi	r3, r3, r5
 801632e:	9302      	strhi	r3, [sp, #8]
 8016330:	2300      	movls	r3, #0
 8016332:	bf86      	itte	hi
 8016334:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016338:	608b      	strhi	r3, [r1, #8]
 801633a:	9302      	strls	r3, [sp, #8]
 801633c:	680b      	ldr	r3, [r1, #0]
 801633e:	468b      	mov	fp, r1
 8016340:	2500      	movs	r5, #0
 8016342:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016346:	f84b 3b1c 	str.w	r3, [fp], #28
 801634a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801634e:	4680      	mov	r8, r0
 8016350:	460c      	mov	r4, r1
 8016352:	465e      	mov	r6, fp
 8016354:	46aa      	mov	sl, r5
 8016356:	46a9      	mov	r9, r5
 8016358:	9501      	str	r5, [sp, #4]
 801635a:	68a2      	ldr	r2, [r4, #8]
 801635c:	b152      	cbz	r2, 8016374 <_scanf_float+0x60>
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	2b4e      	cmp	r3, #78	; 0x4e
 8016364:	d864      	bhi.n	8016430 <_scanf_float+0x11c>
 8016366:	2b40      	cmp	r3, #64	; 0x40
 8016368:	d83c      	bhi.n	80163e4 <_scanf_float+0xd0>
 801636a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801636e:	b2c8      	uxtb	r0, r1
 8016370:	280e      	cmp	r0, #14
 8016372:	d93a      	bls.n	80163ea <_scanf_float+0xd6>
 8016374:	f1b9 0f00 	cmp.w	r9, #0
 8016378:	d003      	beq.n	8016382 <_scanf_float+0x6e>
 801637a:	6823      	ldr	r3, [r4, #0]
 801637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016380:	6023      	str	r3, [r4, #0]
 8016382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016386:	f1ba 0f01 	cmp.w	sl, #1
 801638a:	f200 8113 	bhi.w	80165b4 <_scanf_float+0x2a0>
 801638e:	455e      	cmp	r6, fp
 8016390:	f200 8105 	bhi.w	801659e <_scanf_float+0x28a>
 8016394:	2501      	movs	r5, #1
 8016396:	4628      	mov	r0, r5
 8016398:	b007      	add	sp, #28
 801639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801639e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80163a2:	2a0d      	cmp	r2, #13
 80163a4:	d8e6      	bhi.n	8016374 <_scanf_float+0x60>
 80163a6:	a101      	add	r1, pc, #4	; (adr r1, 80163ac <_scanf_float+0x98>)
 80163a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80163ac:	080164eb 	.word	0x080164eb
 80163b0:	08016375 	.word	0x08016375
 80163b4:	08016375 	.word	0x08016375
 80163b8:	08016375 	.word	0x08016375
 80163bc:	0801654b 	.word	0x0801654b
 80163c0:	08016523 	.word	0x08016523
 80163c4:	08016375 	.word	0x08016375
 80163c8:	08016375 	.word	0x08016375
 80163cc:	080164f9 	.word	0x080164f9
 80163d0:	08016375 	.word	0x08016375
 80163d4:	08016375 	.word	0x08016375
 80163d8:	08016375 	.word	0x08016375
 80163dc:	08016375 	.word	0x08016375
 80163e0:	080164b1 	.word	0x080164b1
 80163e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80163e8:	e7db      	b.n	80163a2 <_scanf_float+0x8e>
 80163ea:	290e      	cmp	r1, #14
 80163ec:	d8c2      	bhi.n	8016374 <_scanf_float+0x60>
 80163ee:	a001      	add	r0, pc, #4	; (adr r0, 80163f4 <_scanf_float+0xe0>)
 80163f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80163f4:	080164a3 	.word	0x080164a3
 80163f8:	08016375 	.word	0x08016375
 80163fc:	080164a3 	.word	0x080164a3
 8016400:	08016537 	.word	0x08016537
 8016404:	08016375 	.word	0x08016375
 8016408:	08016451 	.word	0x08016451
 801640c:	0801648d 	.word	0x0801648d
 8016410:	0801648d 	.word	0x0801648d
 8016414:	0801648d 	.word	0x0801648d
 8016418:	0801648d 	.word	0x0801648d
 801641c:	0801648d 	.word	0x0801648d
 8016420:	0801648d 	.word	0x0801648d
 8016424:	0801648d 	.word	0x0801648d
 8016428:	0801648d 	.word	0x0801648d
 801642c:	0801648d 	.word	0x0801648d
 8016430:	2b6e      	cmp	r3, #110	; 0x6e
 8016432:	d809      	bhi.n	8016448 <_scanf_float+0x134>
 8016434:	2b60      	cmp	r3, #96	; 0x60
 8016436:	d8b2      	bhi.n	801639e <_scanf_float+0x8a>
 8016438:	2b54      	cmp	r3, #84	; 0x54
 801643a:	d077      	beq.n	801652c <_scanf_float+0x218>
 801643c:	2b59      	cmp	r3, #89	; 0x59
 801643e:	d199      	bne.n	8016374 <_scanf_float+0x60>
 8016440:	2d07      	cmp	r5, #7
 8016442:	d197      	bne.n	8016374 <_scanf_float+0x60>
 8016444:	2508      	movs	r5, #8
 8016446:	e029      	b.n	801649c <_scanf_float+0x188>
 8016448:	2b74      	cmp	r3, #116	; 0x74
 801644a:	d06f      	beq.n	801652c <_scanf_float+0x218>
 801644c:	2b79      	cmp	r3, #121	; 0x79
 801644e:	e7f6      	b.n	801643e <_scanf_float+0x12a>
 8016450:	6821      	ldr	r1, [r4, #0]
 8016452:	05c8      	lsls	r0, r1, #23
 8016454:	d51a      	bpl.n	801648c <_scanf_float+0x178>
 8016456:	9b02      	ldr	r3, [sp, #8]
 8016458:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801645c:	6021      	str	r1, [r4, #0]
 801645e:	f109 0901 	add.w	r9, r9, #1
 8016462:	b11b      	cbz	r3, 801646c <_scanf_float+0x158>
 8016464:	3b01      	subs	r3, #1
 8016466:	3201      	adds	r2, #1
 8016468:	9302      	str	r3, [sp, #8]
 801646a:	60a2      	str	r2, [r4, #8]
 801646c:	68a3      	ldr	r3, [r4, #8]
 801646e:	3b01      	subs	r3, #1
 8016470:	60a3      	str	r3, [r4, #8]
 8016472:	6923      	ldr	r3, [r4, #16]
 8016474:	3301      	adds	r3, #1
 8016476:	6123      	str	r3, [r4, #16]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	3b01      	subs	r3, #1
 801647c:	2b00      	cmp	r3, #0
 801647e:	607b      	str	r3, [r7, #4]
 8016480:	f340 8084 	ble.w	801658c <_scanf_float+0x278>
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	3301      	adds	r3, #1
 8016488:	603b      	str	r3, [r7, #0]
 801648a:	e766      	b.n	801635a <_scanf_float+0x46>
 801648c:	eb1a 0f05 	cmn.w	sl, r5
 8016490:	f47f af70 	bne.w	8016374 <_scanf_float+0x60>
 8016494:	6822      	ldr	r2, [r4, #0]
 8016496:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801649a:	6022      	str	r2, [r4, #0]
 801649c:	f806 3b01 	strb.w	r3, [r6], #1
 80164a0:	e7e4      	b.n	801646c <_scanf_float+0x158>
 80164a2:	6822      	ldr	r2, [r4, #0]
 80164a4:	0610      	lsls	r0, r2, #24
 80164a6:	f57f af65 	bpl.w	8016374 <_scanf_float+0x60>
 80164aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80164ae:	e7f4      	b.n	801649a <_scanf_float+0x186>
 80164b0:	f1ba 0f00 	cmp.w	sl, #0
 80164b4:	d10e      	bne.n	80164d4 <_scanf_float+0x1c0>
 80164b6:	f1b9 0f00 	cmp.w	r9, #0
 80164ba:	d10e      	bne.n	80164da <_scanf_float+0x1c6>
 80164bc:	6822      	ldr	r2, [r4, #0]
 80164be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80164c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80164c6:	d108      	bne.n	80164da <_scanf_float+0x1c6>
 80164c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80164cc:	6022      	str	r2, [r4, #0]
 80164ce:	f04f 0a01 	mov.w	sl, #1
 80164d2:	e7e3      	b.n	801649c <_scanf_float+0x188>
 80164d4:	f1ba 0f02 	cmp.w	sl, #2
 80164d8:	d055      	beq.n	8016586 <_scanf_float+0x272>
 80164da:	2d01      	cmp	r5, #1
 80164dc:	d002      	beq.n	80164e4 <_scanf_float+0x1d0>
 80164de:	2d04      	cmp	r5, #4
 80164e0:	f47f af48 	bne.w	8016374 <_scanf_float+0x60>
 80164e4:	3501      	adds	r5, #1
 80164e6:	b2ed      	uxtb	r5, r5
 80164e8:	e7d8      	b.n	801649c <_scanf_float+0x188>
 80164ea:	f1ba 0f01 	cmp.w	sl, #1
 80164ee:	f47f af41 	bne.w	8016374 <_scanf_float+0x60>
 80164f2:	f04f 0a02 	mov.w	sl, #2
 80164f6:	e7d1      	b.n	801649c <_scanf_float+0x188>
 80164f8:	b97d      	cbnz	r5, 801651a <_scanf_float+0x206>
 80164fa:	f1b9 0f00 	cmp.w	r9, #0
 80164fe:	f47f af3c 	bne.w	801637a <_scanf_float+0x66>
 8016502:	6822      	ldr	r2, [r4, #0]
 8016504:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016508:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801650c:	f47f af39 	bne.w	8016382 <_scanf_float+0x6e>
 8016510:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016514:	6022      	str	r2, [r4, #0]
 8016516:	2501      	movs	r5, #1
 8016518:	e7c0      	b.n	801649c <_scanf_float+0x188>
 801651a:	2d03      	cmp	r5, #3
 801651c:	d0e2      	beq.n	80164e4 <_scanf_float+0x1d0>
 801651e:	2d05      	cmp	r5, #5
 8016520:	e7de      	b.n	80164e0 <_scanf_float+0x1cc>
 8016522:	2d02      	cmp	r5, #2
 8016524:	f47f af26 	bne.w	8016374 <_scanf_float+0x60>
 8016528:	2503      	movs	r5, #3
 801652a:	e7b7      	b.n	801649c <_scanf_float+0x188>
 801652c:	2d06      	cmp	r5, #6
 801652e:	f47f af21 	bne.w	8016374 <_scanf_float+0x60>
 8016532:	2507      	movs	r5, #7
 8016534:	e7b2      	b.n	801649c <_scanf_float+0x188>
 8016536:	6822      	ldr	r2, [r4, #0]
 8016538:	0591      	lsls	r1, r2, #22
 801653a:	f57f af1b 	bpl.w	8016374 <_scanf_float+0x60>
 801653e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016542:	6022      	str	r2, [r4, #0]
 8016544:	f8cd 9004 	str.w	r9, [sp, #4]
 8016548:	e7a8      	b.n	801649c <_scanf_float+0x188>
 801654a:	6822      	ldr	r2, [r4, #0]
 801654c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016550:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016554:	d006      	beq.n	8016564 <_scanf_float+0x250>
 8016556:	0550      	lsls	r0, r2, #21
 8016558:	f57f af0c 	bpl.w	8016374 <_scanf_float+0x60>
 801655c:	f1b9 0f00 	cmp.w	r9, #0
 8016560:	f43f af0f 	beq.w	8016382 <_scanf_float+0x6e>
 8016564:	0591      	lsls	r1, r2, #22
 8016566:	bf58      	it	pl
 8016568:	9901      	ldrpl	r1, [sp, #4]
 801656a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801656e:	bf58      	it	pl
 8016570:	eba9 0101 	subpl.w	r1, r9, r1
 8016574:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016578:	bf58      	it	pl
 801657a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801657e:	6022      	str	r2, [r4, #0]
 8016580:	f04f 0900 	mov.w	r9, #0
 8016584:	e78a      	b.n	801649c <_scanf_float+0x188>
 8016586:	f04f 0a03 	mov.w	sl, #3
 801658a:	e787      	b.n	801649c <_scanf_float+0x188>
 801658c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016590:	4639      	mov	r1, r7
 8016592:	4640      	mov	r0, r8
 8016594:	4798      	blx	r3
 8016596:	2800      	cmp	r0, #0
 8016598:	f43f aedf 	beq.w	801635a <_scanf_float+0x46>
 801659c:	e6ea      	b.n	8016374 <_scanf_float+0x60>
 801659e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80165a6:	463a      	mov	r2, r7
 80165a8:	4640      	mov	r0, r8
 80165aa:	4798      	blx	r3
 80165ac:	6923      	ldr	r3, [r4, #16]
 80165ae:	3b01      	subs	r3, #1
 80165b0:	6123      	str	r3, [r4, #16]
 80165b2:	e6ec      	b.n	801638e <_scanf_float+0x7a>
 80165b4:	1e6b      	subs	r3, r5, #1
 80165b6:	2b06      	cmp	r3, #6
 80165b8:	d825      	bhi.n	8016606 <_scanf_float+0x2f2>
 80165ba:	2d02      	cmp	r5, #2
 80165bc:	d836      	bhi.n	801662c <_scanf_float+0x318>
 80165be:	455e      	cmp	r6, fp
 80165c0:	f67f aee8 	bls.w	8016394 <_scanf_float+0x80>
 80165c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80165cc:	463a      	mov	r2, r7
 80165ce:	4640      	mov	r0, r8
 80165d0:	4798      	blx	r3
 80165d2:	6923      	ldr	r3, [r4, #16]
 80165d4:	3b01      	subs	r3, #1
 80165d6:	6123      	str	r3, [r4, #16]
 80165d8:	e7f1      	b.n	80165be <_scanf_float+0x2aa>
 80165da:	9802      	ldr	r0, [sp, #8]
 80165dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80165e4:	9002      	str	r0, [sp, #8]
 80165e6:	463a      	mov	r2, r7
 80165e8:	4640      	mov	r0, r8
 80165ea:	4798      	blx	r3
 80165ec:	6923      	ldr	r3, [r4, #16]
 80165ee:	3b01      	subs	r3, #1
 80165f0:	6123      	str	r3, [r4, #16]
 80165f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165f6:	fa5f fa8a 	uxtb.w	sl, sl
 80165fa:	f1ba 0f02 	cmp.w	sl, #2
 80165fe:	d1ec      	bne.n	80165da <_scanf_float+0x2c6>
 8016600:	3d03      	subs	r5, #3
 8016602:	b2ed      	uxtb	r5, r5
 8016604:	1b76      	subs	r6, r6, r5
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	05da      	lsls	r2, r3, #23
 801660a:	d52f      	bpl.n	801666c <_scanf_float+0x358>
 801660c:	055b      	lsls	r3, r3, #21
 801660e:	d510      	bpl.n	8016632 <_scanf_float+0x31e>
 8016610:	455e      	cmp	r6, fp
 8016612:	f67f aebf 	bls.w	8016394 <_scanf_float+0x80>
 8016616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801661a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801661e:	463a      	mov	r2, r7
 8016620:	4640      	mov	r0, r8
 8016622:	4798      	blx	r3
 8016624:	6923      	ldr	r3, [r4, #16]
 8016626:	3b01      	subs	r3, #1
 8016628:	6123      	str	r3, [r4, #16]
 801662a:	e7f1      	b.n	8016610 <_scanf_float+0x2fc>
 801662c:	46aa      	mov	sl, r5
 801662e:	9602      	str	r6, [sp, #8]
 8016630:	e7df      	b.n	80165f2 <_scanf_float+0x2de>
 8016632:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016636:	6923      	ldr	r3, [r4, #16]
 8016638:	2965      	cmp	r1, #101	; 0x65
 801663a:	f103 33ff 	add.w	r3, r3, #4294967295
 801663e:	f106 35ff 	add.w	r5, r6, #4294967295
 8016642:	6123      	str	r3, [r4, #16]
 8016644:	d00c      	beq.n	8016660 <_scanf_float+0x34c>
 8016646:	2945      	cmp	r1, #69	; 0x45
 8016648:	d00a      	beq.n	8016660 <_scanf_float+0x34c>
 801664a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801664e:	463a      	mov	r2, r7
 8016650:	4640      	mov	r0, r8
 8016652:	4798      	blx	r3
 8016654:	6923      	ldr	r3, [r4, #16]
 8016656:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801665a:	3b01      	subs	r3, #1
 801665c:	1eb5      	subs	r5, r6, #2
 801665e:	6123      	str	r3, [r4, #16]
 8016660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016664:	463a      	mov	r2, r7
 8016666:	4640      	mov	r0, r8
 8016668:	4798      	blx	r3
 801666a:	462e      	mov	r6, r5
 801666c:	6825      	ldr	r5, [r4, #0]
 801666e:	f015 0510 	ands.w	r5, r5, #16
 8016672:	d159      	bne.n	8016728 <_scanf_float+0x414>
 8016674:	7035      	strb	r5, [r6, #0]
 8016676:	6823      	ldr	r3, [r4, #0]
 8016678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801667c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016680:	d11b      	bne.n	80166ba <_scanf_float+0x3a6>
 8016682:	9b01      	ldr	r3, [sp, #4]
 8016684:	454b      	cmp	r3, r9
 8016686:	eba3 0209 	sub.w	r2, r3, r9
 801668a:	d123      	bne.n	80166d4 <_scanf_float+0x3c0>
 801668c:	2200      	movs	r2, #0
 801668e:	4659      	mov	r1, fp
 8016690:	4640      	mov	r0, r8
 8016692:	f001 f80b 	bl	80176ac <_strtod_r>
 8016696:	6822      	ldr	r2, [r4, #0]
 8016698:	9b03      	ldr	r3, [sp, #12]
 801669a:	f012 0f02 	tst.w	r2, #2
 801669e:	ec57 6b10 	vmov	r6, r7, d0
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	d021      	beq.n	80166ea <_scanf_float+0x3d6>
 80166a6:	9903      	ldr	r1, [sp, #12]
 80166a8:	1d1a      	adds	r2, r3, #4
 80166aa:	600a      	str	r2, [r1, #0]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	e9c3 6700 	strd	r6, r7, [r3]
 80166b2:	68e3      	ldr	r3, [r4, #12]
 80166b4:	3301      	adds	r3, #1
 80166b6:	60e3      	str	r3, [r4, #12]
 80166b8:	e66d      	b.n	8016396 <_scanf_float+0x82>
 80166ba:	9b04      	ldr	r3, [sp, #16]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d0e5      	beq.n	801668c <_scanf_float+0x378>
 80166c0:	9905      	ldr	r1, [sp, #20]
 80166c2:	230a      	movs	r3, #10
 80166c4:	462a      	mov	r2, r5
 80166c6:	3101      	adds	r1, #1
 80166c8:	4640      	mov	r0, r8
 80166ca:	f001 f877 	bl	80177bc <_strtol_r>
 80166ce:	9b04      	ldr	r3, [sp, #16]
 80166d0:	9e05      	ldr	r6, [sp, #20]
 80166d2:	1ac2      	subs	r2, r0, r3
 80166d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80166d8:	429e      	cmp	r6, r3
 80166da:	bf28      	it	cs
 80166dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80166e0:	4912      	ldr	r1, [pc, #72]	; (801672c <_scanf_float+0x418>)
 80166e2:	4630      	mov	r0, r6
 80166e4:	f000 f99e 	bl	8016a24 <siprintf>
 80166e8:	e7d0      	b.n	801668c <_scanf_float+0x378>
 80166ea:	9903      	ldr	r1, [sp, #12]
 80166ec:	f012 0f04 	tst.w	r2, #4
 80166f0:	f103 0204 	add.w	r2, r3, #4
 80166f4:	600a      	str	r2, [r1, #0]
 80166f6:	d1d9      	bne.n	80166ac <_scanf_float+0x398>
 80166f8:	f8d3 8000 	ldr.w	r8, [r3]
 80166fc:	ee10 2a10 	vmov	r2, s0
 8016700:	ee10 0a10 	vmov	r0, s0
 8016704:	463b      	mov	r3, r7
 8016706:	4639      	mov	r1, r7
 8016708:	f7ea fa38 	bl	8000b7c <__aeabi_dcmpun>
 801670c:	b128      	cbz	r0, 801671a <_scanf_float+0x406>
 801670e:	4808      	ldr	r0, [pc, #32]	; (8016730 <_scanf_float+0x41c>)
 8016710:	f000 f982 	bl	8016a18 <nanf>
 8016714:	ed88 0a00 	vstr	s0, [r8]
 8016718:	e7cb      	b.n	80166b2 <_scanf_float+0x39e>
 801671a:	4630      	mov	r0, r6
 801671c:	4639      	mov	r1, r7
 801671e:	f7ea fa8b 	bl	8000c38 <__aeabi_d2f>
 8016722:	f8c8 0000 	str.w	r0, [r8]
 8016726:	e7c4      	b.n	80166b2 <_scanf_float+0x39e>
 8016728:	2500      	movs	r5, #0
 801672a:	e634      	b.n	8016396 <_scanf_float+0x82>
 801672c:	0801c204 	.word	0x0801c204
 8016730:	0801c678 	.word	0x0801c678

08016734 <iprintf>:
 8016734:	b40f      	push	{r0, r1, r2, r3}
 8016736:	4b0a      	ldr	r3, [pc, #40]	; (8016760 <iprintf+0x2c>)
 8016738:	b513      	push	{r0, r1, r4, lr}
 801673a:	681c      	ldr	r4, [r3, #0]
 801673c:	b124      	cbz	r4, 8016748 <iprintf+0x14>
 801673e:	69a3      	ldr	r3, [r4, #24]
 8016740:	b913      	cbnz	r3, 8016748 <iprintf+0x14>
 8016742:	4620      	mov	r0, r4
 8016744:	f002 f890 	bl	8018868 <__sinit>
 8016748:	ab05      	add	r3, sp, #20
 801674a:	9a04      	ldr	r2, [sp, #16]
 801674c:	68a1      	ldr	r1, [r4, #8]
 801674e:	9301      	str	r3, [sp, #4]
 8016750:	4620      	mov	r0, r4
 8016752:	f003 fc59 	bl	801a008 <_vfiprintf_r>
 8016756:	b002      	add	sp, #8
 8016758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801675c:	b004      	add	sp, #16
 801675e:	4770      	bx	lr
 8016760:	20000020 	.word	0x20000020

08016764 <putchar>:
 8016764:	4b09      	ldr	r3, [pc, #36]	; (801678c <putchar+0x28>)
 8016766:	b513      	push	{r0, r1, r4, lr}
 8016768:	681c      	ldr	r4, [r3, #0]
 801676a:	4601      	mov	r1, r0
 801676c:	b134      	cbz	r4, 801677c <putchar+0x18>
 801676e:	69a3      	ldr	r3, [r4, #24]
 8016770:	b923      	cbnz	r3, 801677c <putchar+0x18>
 8016772:	9001      	str	r0, [sp, #4]
 8016774:	4620      	mov	r0, r4
 8016776:	f002 f877 	bl	8018868 <__sinit>
 801677a:	9901      	ldr	r1, [sp, #4]
 801677c:	68a2      	ldr	r2, [r4, #8]
 801677e:	4620      	mov	r0, r4
 8016780:	b002      	add	sp, #8
 8016782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016786:	f003 bd6f 	b.w	801a268 <_putc_r>
 801678a:	bf00      	nop
 801678c:	20000020 	.word	0x20000020

08016790 <_puts_r>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	460e      	mov	r6, r1
 8016794:	4605      	mov	r5, r0
 8016796:	b118      	cbz	r0, 80167a0 <_puts_r+0x10>
 8016798:	6983      	ldr	r3, [r0, #24]
 801679a:	b90b      	cbnz	r3, 80167a0 <_puts_r+0x10>
 801679c:	f002 f864 	bl	8018868 <__sinit>
 80167a0:	69ab      	ldr	r3, [r5, #24]
 80167a2:	68ac      	ldr	r4, [r5, #8]
 80167a4:	b913      	cbnz	r3, 80167ac <_puts_r+0x1c>
 80167a6:	4628      	mov	r0, r5
 80167a8:	f002 f85e 	bl	8018868 <__sinit>
 80167ac:	4b2c      	ldr	r3, [pc, #176]	; (8016860 <_puts_r+0xd0>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d120      	bne.n	80167f4 <_puts_r+0x64>
 80167b2:	686c      	ldr	r4, [r5, #4]
 80167b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167b6:	07db      	lsls	r3, r3, #31
 80167b8:	d405      	bmi.n	80167c6 <_puts_r+0x36>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	0598      	lsls	r0, r3, #22
 80167be:	d402      	bmi.n	80167c6 <_puts_r+0x36>
 80167c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167c2:	f002 fc62 	bl	801908a <__retarget_lock_acquire_recursive>
 80167c6:	89a3      	ldrh	r3, [r4, #12]
 80167c8:	0719      	lsls	r1, r3, #28
 80167ca:	d51d      	bpl.n	8016808 <_puts_r+0x78>
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	b1db      	cbz	r3, 8016808 <_puts_r+0x78>
 80167d0:	3e01      	subs	r6, #1
 80167d2:	68a3      	ldr	r3, [r4, #8]
 80167d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80167d8:	3b01      	subs	r3, #1
 80167da:	60a3      	str	r3, [r4, #8]
 80167dc:	bb39      	cbnz	r1, 801682e <_puts_r+0x9e>
 80167de:	2b00      	cmp	r3, #0
 80167e0:	da38      	bge.n	8016854 <_puts_r+0xc4>
 80167e2:	4622      	mov	r2, r4
 80167e4:	210a      	movs	r1, #10
 80167e6:	4628      	mov	r0, r5
 80167e8:	f000 ffea 	bl	80177c0 <__swbuf_r>
 80167ec:	3001      	adds	r0, #1
 80167ee:	d011      	beq.n	8016814 <_puts_r+0x84>
 80167f0:	250a      	movs	r5, #10
 80167f2:	e011      	b.n	8016818 <_puts_r+0x88>
 80167f4:	4b1b      	ldr	r3, [pc, #108]	; (8016864 <_puts_r+0xd4>)
 80167f6:	429c      	cmp	r4, r3
 80167f8:	d101      	bne.n	80167fe <_puts_r+0x6e>
 80167fa:	68ac      	ldr	r4, [r5, #8]
 80167fc:	e7da      	b.n	80167b4 <_puts_r+0x24>
 80167fe:	4b1a      	ldr	r3, [pc, #104]	; (8016868 <_puts_r+0xd8>)
 8016800:	429c      	cmp	r4, r3
 8016802:	bf08      	it	eq
 8016804:	68ec      	ldreq	r4, [r5, #12]
 8016806:	e7d5      	b.n	80167b4 <_puts_r+0x24>
 8016808:	4621      	mov	r1, r4
 801680a:	4628      	mov	r0, r5
 801680c:	f001 f82a 	bl	8017864 <__swsetup_r>
 8016810:	2800      	cmp	r0, #0
 8016812:	d0dd      	beq.n	80167d0 <_puts_r+0x40>
 8016814:	f04f 35ff 	mov.w	r5, #4294967295
 8016818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801681a:	07da      	lsls	r2, r3, #31
 801681c:	d405      	bmi.n	801682a <_puts_r+0x9a>
 801681e:	89a3      	ldrh	r3, [r4, #12]
 8016820:	059b      	lsls	r3, r3, #22
 8016822:	d402      	bmi.n	801682a <_puts_r+0x9a>
 8016824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016826:	f002 fc31 	bl	801908c <__retarget_lock_release_recursive>
 801682a:	4628      	mov	r0, r5
 801682c:	bd70      	pop	{r4, r5, r6, pc}
 801682e:	2b00      	cmp	r3, #0
 8016830:	da04      	bge.n	801683c <_puts_r+0xac>
 8016832:	69a2      	ldr	r2, [r4, #24]
 8016834:	429a      	cmp	r2, r3
 8016836:	dc06      	bgt.n	8016846 <_puts_r+0xb6>
 8016838:	290a      	cmp	r1, #10
 801683a:	d004      	beq.n	8016846 <_puts_r+0xb6>
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	6022      	str	r2, [r4, #0]
 8016842:	7019      	strb	r1, [r3, #0]
 8016844:	e7c5      	b.n	80167d2 <_puts_r+0x42>
 8016846:	4622      	mov	r2, r4
 8016848:	4628      	mov	r0, r5
 801684a:	f000 ffb9 	bl	80177c0 <__swbuf_r>
 801684e:	3001      	adds	r0, #1
 8016850:	d1bf      	bne.n	80167d2 <_puts_r+0x42>
 8016852:	e7df      	b.n	8016814 <_puts_r+0x84>
 8016854:	6823      	ldr	r3, [r4, #0]
 8016856:	250a      	movs	r5, #10
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	6022      	str	r2, [r4, #0]
 801685c:	701d      	strb	r5, [r3, #0]
 801685e:	e7db      	b.n	8016818 <_puts_r+0x88>
 8016860:	0801c414 	.word	0x0801c414
 8016864:	0801c434 	.word	0x0801c434
 8016868:	0801c3f4 	.word	0x0801c3f4

0801686c <puts>:
 801686c:	4b02      	ldr	r3, [pc, #8]	; (8016878 <puts+0xc>)
 801686e:	4601      	mov	r1, r0
 8016870:	6818      	ldr	r0, [r3, #0]
 8016872:	f7ff bf8d 	b.w	8016790 <_puts_r>
 8016876:	bf00      	nop
 8016878:	20000020 	.word	0x20000020

0801687c <setbuf>:
 801687c:	2900      	cmp	r1, #0
 801687e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016882:	bf0c      	ite	eq
 8016884:	2202      	moveq	r2, #2
 8016886:	2200      	movne	r2, #0
 8016888:	f000 b800 	b.w	801688c <setvbuf>

0801688c <setvbuf>:
 801688c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016890:	461d      	mov	r5, r3
 8016892:	4b5d      	ldr	r3, [pc, #372]	; (8016a08 <setvbuf+0x17c>)
 8016894:	681f      	ldr	r7, [r3, #0]
 8016896:	4604      	mov	r4, r0
 8016898:	460e      	mov	r6, r1
 801689a:	4690      	mov	r8, r2
 801689c:	b127      	cbz	r7, 80168a8 <setvbuf+0x1c>
 801689e:	69bb      	ldr	r3, [r7, #24]
 80168a0:	b913      	cbnz	r3, 80168a8 <setvbuf+0x1c>
 80168a2:	4638      	mov	r0, r7
 80168a4:	f001 ffe0 	bl	8018868 <__sinit>
 80168a8:	4b58      	ldr	r3, [pc, #352]	; (8016a0c <setvbuf+0x180>)
 80168aa:	429c      	cmp	r4, r3
 80168ac:	d167      	bne.n	801697e <setvbuf+0xf2>
 80168ae:	687c      	ldr	r4, [r7, #4]
 80168b0:	f1b8 0f02 	cmp.w	r8, #2
 80168b4:	d006      	beq.n	80168c4 <setvbuf+0x38>
 80168b6:	f1b8 0f01 	cmp.w	r8, #1
 80168ba:	f200 809f 	bhi.w	80169fc <setvbuf+0x170>
 80168be:	2d00      	cmp	r5, #0
 80168c0:	f2c0 809c 	blt.w	80169fc <setvbuf+0x170>
 80168c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168c6:	07db      	lsls	r3, r3, #31
 80168c8:	d405      	bmi.n	80168d6 <setvbuf+0x4a>
 80168ca:	89a3      	ldrh	r3, [r4, #12]
 80168cc:	0598      	lsls	r0, r3, #22
 80168ce:	d402      	bmi.n	80168d6 <setvbuf+0x4a>
 80168d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168d2:	f002 fbda 	bl	801908a <__retarget_lock_acquire_recursive>
 80168d6:	4621      	mov	r1, r4
 80168d8:	4638      	mov	r0, r7
 80168da:	f001 ff31 	bl	8018740 <_fflush_r>
 80168de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168e0:	b141      	cbz	r1, 80168f4 <setvbuf+0x68>
 80168e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168e6:	4299      	cmp	r1, r3
 80168e8:	d002      	beq.n	80168f0 <setvbuf+0x64>
 80168ea:	4638      	mov	r0, r7
 80168ec:	f003 f926 	bl	8019b3c <_free_r>
 80168f0:	2300      	movs	r3, #0
 80168f2:	6363      	str	r3, [r4, #52]	; 0x34
 80168f4:	2300      	movs	r3, #0
 80168f6:	61a3      	str	r3, [r4, #24]
 80168f8:	6063      	str	r3, [r4, #4]
 80168fa:	89a3      	ldrh	r3, [r4, #12]
 80168fc:	0619      	lsls	r1, r3, #24
 80168fe:	d503      	bpl.n	8016908 <setvbuf+0x7c>
 8016900:	6921      	ldr	r1, [r4, #16]
 8016902:	4638      	mov	r0, r7
 8016904:	f003 f91a 	bl	8019b3c <_free_r>
 8016908:	89a3      	ldrh	r3, [r4, #12]
 801690a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801690e:	f023 0303 	bic.w	r3, r3, #3
 8016912:	f1b8 0f02 	cmp.w	r8, #2
 8016916:	81a3      	strh	r3, [r4, #12]
 8016918:	d06c      	beq.n	80169f4 <setvbuf+0x168>
 801691a:	ab01      	add	r3, sp, #4
 801691c:	466a      	mov	r2, sp
 801691e:	4621      	mov	r1, r4
 8016920:	4638      	mov	r0, r7
 8016922:	f002 fbb4 	bl	801908e <__swhatbuf_r>
 8016926:	89a3      	ldrh	r3, [r4, #12]
 8016928:	4318      	orrs	r0, r3
 801692a:	81a0      	strh	r0, [r4, #12]
 801692c:	2d00      	cmp	r5, #0
 801692e:	d130      	bne.n	8016992 <setvbuf+0x106>
 8016930:	9d00      	ldr	r5, [sp, #0]
 8016932:	4628      	mov	r0, r5
 8016934:	f002 fc10 	bl	8019158 <malloc>
 8016938:	4606      	mov	r6, r0
 801693a:	2800      	cmp	r0, #0
 801693c:	d155      	bne.n	80169ea <setvbuf+0x15e>
 801693e:	f8dd 9000 	ldr.w	r9, [sp]
 8016942:	45a9      	cmp	r9, r5
 8016944:	d14a      	bne.n	80169dc <setvbuf+0x150>
 8016946:	f04f 35ff 	mov.w	r5, #4294967295
 801694a:	2200      	movs	r2, #0
 801694c:	60a2      	str	r2, [r4, #8]
 801694e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8016952:	6022      	str	r2, [r4, #0]
 8016954:	6122      	str	r2, [r4, #16]
 8016956:	2201      	movs	r2, #1
 8016958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801695c:	6162      	str	r2, [r4, #20]
 801695e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016960:	f043 0302 	orr.w	r3, r3, #2
 8016964:	07d2      	lsls	r2, r2, #31
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	d405      	bmi.n	8016976 <setvbuf+0xea>
 801696a:	f413 7f00 	tst.w	r3, #512	; 0x200
 801696e:	d102      	bne.n	8016976 <setvbuf+0xea>
 8016970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016972:	f002 fb8b 	bl	801908c <__retarget_lock_release_recursive>
 8016976:	4628      	mov	r0, r5
 8016978:	b003      	add	sp, #12
 801697a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801697e:	4b24      	ldr	r3, [pc, #144]	; (8016a10 <setvbuf+0x184>)
 8016980:	429c      	cmp	r4, r3
 8016982:	d101      	bne.n	8016988 <setvbuf+0xfc>
 8016984:	68bc      	ldr	r4, [r7, #8]
 8016986:	e793      	b.n	80168b0 <setvbuf+0x24>
 8016988:	4b22      	ldr	r3, [pc, #136]	; (8016a14 <setvbuf+0x188>)
 801698a:	429c      	cmp	r4, r3
 801698c:	bf08      	it	eq
 801698e:	68fc      	ldreq	r4, [r7, #12]
 8016990:	e78e      	b.n	80168b0 <setvbuf+0x24>
 8016992:	2e00      	cmp	r6, #0
 8016994:	d0cd      	beq.n	8016932 <setvbuf+0xa6>
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	b913      	cbnz	r3, 80169a0 <setvbuf+0x114>
 801699a:	4638      	mov	r0, r7
 801699c:	f001 ff64 	bl	8018868 <__sinit>
 80169a0:	f1b8 0f01 	cmp.w	r8, #1
 80169a4:	bf08      	it	eq
 80169a6:	89a3      	ldrheq	r3, [r4, #12]
 80169a8:	6026      	str	r6, [r4, #0]
 80169aa:	bf04      	itt	eq
 80169ac:	f043 0301 	orreq.w	r3, r3, #1
 80169b0:	81a3      	strheq	r3, [r4, #12]
 80169b2:	89a2      	ldrh	r2, [r4, #12]
 80169b4:	f012 0308 	ands.w	r3, r2, #8
 80169b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80169bc:	d01c      	beq.n	80169f8 <setvbuf+0x16c>
 80169be:	07d3      	lsls	r3, r2, #31
 80169c0:	bf41      	itttt	mi
 80169c2:	2300      	movmi	r3, #0
 80169c4:	426d      	negmi	r5, r5
 80169c6:	60a3      	strmi	r3, [r4, #8]
 80169c8:	61a5      	strmi	r5, [r4, #24]
 80169ca:	bf58      	it	pl
 80169cc:	60a5      	strpl	r5, [r4, #8]
 80169ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80169d0:	f015 0501 	ands.w	r5, r5, #1
 80169d4:	d115      	bne.n	8016a02 <setvbuf+0x176>
 80169d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80169da:	e7c8      	b.n	801696e <setvbuf+0xe2>
 80169dc:	4648      	mov	r0, r9
 80169de:	f002 fbbb 	bl	8019158 <malloc>
 80169e2:	4606      	mov	r6, r0
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d0ae      	beq.n	8016946 <setvbuf+0xba>
 80169e8:	464d      	mov	r5, r9
 80169ea:	89a3      	ldrh	r3, [r4, #12]
 80169ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169f0:	81a3      	strh	r3, [r4, #12]
 80169f2:	e7d0      	b.n	8016996 <setvbuf+0x10a>
 80169f4:	2500      	movs	r5, #0
 80169f6:	e7a8      	b.n	801694a <setvbuf+0xbe>
 80169f8:	60a3      	str	r3, [r4, #8]
 80169fa:	e7e8      	b.n	80169ce <setvbuf+0x142>
 80169fc:	f04f 35ff 	mov.w	r5, #4294967295
 8016a00:	e7b9      	b.n	8016976 <setvbuf+0xea>
 8016a02:	2500      	movs	r5, #0
 8016a04:	e7b7      	b.n	8016976 <setvbuf+0xea>
 8016a06:	bf00      	nop
 8016a08:	20000020 	.word	0x20000020
 8016a0c:	0801c414 	.word	0x0801c414
 8016a10:	0801c434 	.word	0x0801c434
 8016a14:	0801c3f4 	.word	0x0801c3f4

08016a18 <nanf>:
 8016a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a20 <nanf+0x8>
 8016a1c:	4770      	bx	lr
 8016a1e:	bf00      	nop
 8016a20:	7fc00000 	.word	0x7fc00000

08016a24 <siprintf>:
 8016a24:	b40e      	push	{r1, r2, r3}
 8016a26:	b500      	push	{lr}
 8016a28:	b09c      	sub	sp, #112	; 0x70
 8016a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8016a2c:	9002      	str	r0, [sp, #8]
 8016a2e:	9006      	str	r0, [sp, #24]
 8016a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a34:	4809      	ldr	r0, [pc, #36]	; (8016a5c <siprintf+0x38>)
 8016a36:	9107      	str	r1, [sp, #28]
 8016a38:	9104      	str	r1, [sp, #16]
 8016a3a:	4909      	ldr	r1, [pc, #36]	; (8016a60 <siprintf+0x3c>)
 8016a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a40:	9105      	str	r1, [sp, #20]
 8016a42:	6800      	ldr	r0, [r0, #0]
 8016a44:	9301      	str	r3, [sp, #4]
 8016a46:	a902      	add	r1, sp, #8
 8016a48:	f003 f9b4 	bl	8019db4 <_svfiprintf_r>
 8016a4c:	9b02      	ldr	r3, [sp, #8]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	701a      	strb	r2, [r3, #0]
 8016a52:	b01c      	add	sp, #112	; 0x70
 8016a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a58:	b003      	add	sp, #12
 8016a5a:	4770      	bx	lr
 8016a5c:	20000020 	.word	0x20000020
 8016a60:	ffff0208 	.word	0xffff0208

08016a64 <sulp>:
 8016a64:	b570      	push	{r4, r5, r6, lr}
 8016a66:	4604      	mov	r4, r0
 8016a68:	460d      	mov	r5, r1
 8016a6a:	ec45 4b10 	vmov	d0, r4, r5
 8016a6e:	4616      	mov	r6, r2
 8016a70:	f002 fefe 	bl	8019870 <__ulp>
 8016a74:	ec51 0b10 	vmov	r0, r1, d0
 8016a78:	b17e      	cbz	r6, 8016a9a <sulp+0x36>
 8016a7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016a7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	dd09      	ble.n	8016a9a <sulp+0x36>
 8016a86:	051b      	lsls	r3, r3, #20
 8016a88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016a8c:	2400      	movs	r4, #0
 8016a8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016a92:	4622      	mov	r2, r4
 8016a94:	462b      	mov	r3, r5
 8016a96:	f7e9 fdd7 	bl	8000648 <__aeabi_dmul>
 8016a9a:	bd70      	pop	{r4, r5, r6, pc}
 8016a9c:	0000      	movs	r0, r0
	...

08016aa0 <_strtod_l>:
 8016aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa4:	ed2d 8b02 	vpush	{d8}
 8016aa8:	b09d      	sub	sp, #116	; 0x74
 8016aaa:	461f      	mov	r7, r3
 8016aac:	2300      	movs	r3, #0
 8016aae:	9318      	str	r3, [sp, #96]	; 0x60
 8016ab0:	4ba2      	ldr	r3, [pc, #648]	; (8016d3c <_strtod_l+0x29c>)
 8016ab2:	9213      	str	r2, [sp, #76]	; 0x4c
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	9305      	str	r3, [sp, #20]
 8016ab8:	4604      	mov	r4, r0
 8016aba:	4618      	mov	r0, r3
 8016abc:	4688      	mov	r8, r1
 8016abe:	f7e9 fbaf 	bl	8000220 <strlen>
 8016ac2:	f04f 0a00 	mov.w	sl, #0
 8016ac6:	4605      	mov	r5, r0
 8016ac8:	f04f 0b00 	mov.w	fp, #0
 8016acc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ad2:	781a      	ldrb	r2, [r3, #0]
 8016ad4:	2a2b      	cmp	r2, #43	; 0x2b
 8016ad6:	d04e      	beq.n	8016b76 <_strtod_l+0xd6>
 8016ad8:	d83b      	bhi.n	8016b52 <_strtod_l+0xb2>
 8016ada:	2a0d      	cmp	r2, #13
 8016adc:	d834      	bhi.n	8016b48 <_strtod_l+0xa8>
 8016ade:	2a08      	cmp	r2, #8
 8016ae0:	d834      	bhi.n	8016b4c <_strtod_l+0xac>
 8016ae2:	2a00      	cmp	r2, #0
 8016ae4:	d03e      	beq.n	8016b64 <_strtod_l+0xc4>
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8016aea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016aec:	7833      	ldrb	r3, [r6, #0]
 8016aee:	2b30      	cmp	r3, #48	; 0x30
 8016af0:	f040 80b0 	bne.w	8016c54 <_strtod_l+0x1b4>
 8016af4:	7873      	ldrb	r3, [r6, #1]
 8016af6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016afa:	2b58      	cmp	r3, #88	; 0x58
 8016afc:	d168      	bne.n	8016bd0 <_strtod_l+0x130>
 8016afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b00:	9301      	str	r3, [sp, #4]
 8016b02:	ab18      	add	r3, sp, #96	; 0x60
 8016b04:	9702      	str	r7, [sp, #8]
 8016b06:	9300      	str	r3, [sp, #0]
 8016b08:	4a8d      	ldr	r2, [pc, #564]	; (8016d40 <_strtod_l+0x2a0>)
 8016b0a:	ab19      	add	r3, sp, #100	; 0x64
 8016b0c:	a917      	add	r1, sp, #92	; 0x5c
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f001 ffae 	bl	8018a70 <__gethex>
 8016b14:	f010 0707 	ands.w	r7, r0, #7
 8016b18:	4605      	mov	r5, r0
 8016b1a:	d005      	beq.n	8016b28 <_strtod_l+0x88>
 8016b1c:	2f06      	cmp	r7, #6
 8016b1e:	d12c      	bne.n	8016b7a <_strtod_l+0xda>
 8016b20:	3601      	adds	r6, #1
 8016b22:	2300      	movs	r3, #0
 8016b24:	9617      	str	r6, [sp, #92]	; 0x5c
 8016b26:	930a      	str	r3, [sp, #40]	; 0x28
 8016b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	f040 8590 	bne.w	8017650 <_strtod_l+0xbb0>
 8016b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b32:	b1eb      	cbz	r3, 8016b70 <_strtod_l+0xd0>
 8016b34:	4652      	mov	r2, sl
 8016b36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016b3a:	ec43 2b10 	vmov	d0, r2, r3
 8016b3e:	b01d      	add	sp, #116	; 0x74
 8016b40:	ecbd 8b02 	vpop	{d8}
 8016b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b48:	2a20      	cmp	r2, #32
 8016b4a:	d1cc      	bne.n	8016ae6 <_strtod_l+0x46>
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b50:	e7be      	b.n	8016ad0 <_strtod_l+0x30>
 8016b52:	2a2d      	cmp	r2, #45	; 0x2d
 8016b54:	d1c7      	bne.n	8016ae6 <_strtod_l+0x46>
 8016b56:	2201      	movs	r2, #1
 8016b58:	920a      	str	r2, [sp, #40]	; 0x28
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8016b5e:	785b      	ldrb	r3, [r3, #1]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1c2      	bne.n	8016aea <_strtod_l+0x4a>
 8016b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	f040 856e 	bne.w	801764c <_strtod_l+0xbac>
 8016b70:	4652      	mov	r2, sl
 8016b72:	465b      	mov	r3, fp
 8016b74:	e7e1      	b.n	8016b3a <_strtod_l+0x9a>
 8016b76:	2200      	movs	r2, #0
 8016b78:	e7ee      	b.n	8016b58 <_strtod_l+0xb8>
 8016b7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b7c:	b13a      	cbz	r2, 8016b8e <_strtod_l+0xee>
 8016b7e:	2135      	movs	r1, #53	; 0x35
 8016b80:	a81a      	add	r0, sp, #104	; 0x68
 8016b82:	f002 ff80 	bl	8019a86 <__copybits>
 8016b86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f002 fb3f 	bl	801920c <_Bfree>
 8016b8e:	3f01      	subs	r7, #1
 8016b90:	2f04      	cmp	r7, #4
 8016b92:	d806      	bhi.n	8016ba2 <_strtod_l+0x102>
 8016b94:	e8df f007 	tbb	[pc, r7]
 8016b98:	1714030a 	.word	0x1714030a
 8016b9c:	0a          	.byte	0x0a
 8016b9d:	00          	.byte	0x00
 8016b9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8016ba2:	0728      	lsls	r0, r5, #28
 8016ba4:	d5c0      	bpl.n	8016b28 <_strtod_l+0x88>
 8016ba6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016baa:	e7bd      	b.n	8016b28 <_strtod_l+0x88>
 8016bac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8016bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016bb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016bb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016bba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016bbe:	e7f0      	b.n	8016ba2 <_strtod_l+0x102>
 8016bc0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8016d44 <_strtod_l+0x2a4>
 8016bc4:	e7ed      	b.n	8016ba2 <_strtod_l+0x102>
 8016bc6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016bca:	f04f 3aff 	mov.w	sl, #4294967295
 8016bce:	e7e8      	b.n	8016ba2 <_strtod_l+0x102>
 8016bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016bd2:	1c5a      	adds	r2, r3, #1
 8016bd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8016bd6:	785b      	ldrb	r3, [r3, #1]
 8016bd8:	2b30      	cmp	r3, #48	; 0x30
 8016bda:	d0f9      	beq.n	8016bd0 <_strtod_l+0x130>
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d0a3      	beq.n	8016b28 <_strtod_l+0x88>
 8016be0:	2301      	movs	r3, #1
 8016be2:	f04f 0900 	mov.w	r9, #0
 8016be6:	9304      	str	r3, [sp, #16]
 8016be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016bea:	9308      	str	r3, [sp, #32]
 8016bec:	f8cd 901c 	str.w	r9, [sp, #28]
 8016bf0:	464f      	mov	r7, r9
 8016bf2:	220a      	movs	r2, #10
 8016bf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016bf6:	7806      	ldrb	r6, [r0, #0]
 8016bf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016bfc:	b2d9      	uxtb	r1, r3
 8016bfe:	2909      	cmp	r1, #9
 8016c00:	d92a      	bls.n	8016c58 <_strtod_l+0x1b8>
 8016c02:	9905      	ldr	r1, [sp, #20]
 8016c04:	462a      	mov	r2, r5
 8016c06:	f003 fbd2 	bl	801a3ae <strncmp>
 8016c0a:	b398      	cbz	r0, 8016c74 <_strtod_l+0x1d4>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	4632      	mov	r2, r6
 8016c10:	463d      	mov	r5, r7
 8016c12:	9005      	str	r0, [sp, #20]
 8016c14:	4603      	mov	r3, r0
 8016c16:	2a65      	cmp	r2, #101	; 0x65
 8016c18:	d001      	beq.n	8016c1e <_strtod_l+0x17e>
 8016c1a:	2a45      	cmp	r2, #69	; 0x45
 8016c1c:	d118      	bne.n	8016c50 <_strtod_l+0x1b0>
 8016c1e:	b91d      	cbnz	r5, 8016c28 <_strtod_l+0x188>
 8016c20:	9a04      	ldr	r2, [sp, #16]
 8016c22:	4302      	orrs	r2, r0
 8016c24:	d09e      	beq.n	8016b64 <_strtod_l+0xc4>
 8016c26:	2500      	movs	r5, #0
 8016c28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8016c2c:	f108 0201 	add.w	r2, r8, #1
 8016c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016c36:	2a2b      	cmp	r2, #43	; 0x2b
 8016c38:	d075      	beq.n	8016d26 <_strtod_l+0x286>
 8016c3a:	2a2d      	cmp	r2, #45	; 0x2d
 8016c3c:	d07b      	beq.n	8016d36 <_strtod_l+0x296>
 8016c3e:	f04f 0c00 	mov.w	ip, #0
 8016c42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016c46:	2909      	cmp	r1, #9
 8016c48:	f240 8082 	bls.w	8016d50 <_strtod_l+0x2b0>
 8016c4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8016c50:	2600      	movs	r6, #0
 8016c52:	e09d      	b.n	8016d90 <_strtod_l+0x2f0>
 8016c54:	2300      	movs	r3, #0
 8016c56:	e7c4      	b.n	8016be2 <_strtod_l+0x142>
 8016c58:	2f08      	cmp	r7, #8
 8016c5a:	bfd8      	it	le
 8016c5c:	9907      	ldrle	r1, [sp, #28]
 8016c5e:	f100 0001 	add.w	r0, r0, #1
 8016c62:	bfda      	itte	le
 8016c64:	fb02 3301 	mlale	r3, r2, r1, r3
 8016c68:	9307      	strle	r3, [sp, #28]
 8016c6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016c6e:	3701      	adds	r7, #1
 8016c70:	9017      	str	r0, [sp, #92]	; 0x5c
 8016c72:	e7bf      	b.n	8016bf4 <_strtod_l+0x154>
 8016c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c76:	195a      	adds	r2, r3, r5
 8016c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c7a:	5d5a      	ldrb	r2, [r3, r5]
 8016c7c:	2f00      	cmp	r7, #0
 8016c7e:	d037      	beq.n	8016cf0 <_strtod_l+0x250>
 8016c80:	9005      	str	r0, [sp, #20]
 8016c82:	463d      	mov	r5, r7
 8016c84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8016c88:	2b09      	cmp	r3, #9
 8016c8a:	d912      	bls.n	8016cb2 <_strtod_l+0x212>
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	e7c2      	b.n	8016c16 <_strtod_l+0x176>
 8016c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c92:	1c5a      	adds	r2, r3, #1
 8016c94:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c96:	785a      	ldrb	r2, [r3, #1]
 8016c98:	3001      	adds	r0, #1
 8016c9a:	2a30      	cmp	r2, #48	; 0x30
 8016c9c:	d0f8      	beq.n	8016c90 <_strtod_l+0x1f0>
 8016c9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016ca2:	2b08      	cmp	r3, #8
 8016ca4:	f200 84d9 	bhi.w	801765a <_strtod_l+0xbba>
 8016ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016caa:	9005      	str	r0, [sp, #20]
 8016cac:	2000      	movs	r0, #0
 8016cae:	9308      	str	r3, [sp, #32]
 8016cb0:	4605      	mov	r5, r0
 8016cb2:	3a30      	subs	r2, #48	; 0x30
 8016cb4:	f100 0301 	add.w	r3, r0, #1
 8016cb8:	d014      	beq.n	8016ce4 <_strtod_l+0x244>
 8016cba:	9905      	ldr	r1, [sp, #20]
 8016cbc:	4419      	add	r1, r3
 8016cbe:	9105      	str	r1, [sp, #20]
 8016cc0:	462b      	mov	r3, r5
 8016cc2:	eb00 0e05 	add.w	lr, r0, r5
 8016cc6:	210a      	movs	r1, #10
 8016cc8:	4573      	cmp	r3, lr
 8016cca:	d113      	bne.n	8016cf4 <_strtod_l+0x254>
 8016ccc:	182b      	adds	r3, r5, r0
 8016cce:	2b08      	cmp	r3, #8
 8016cd0:	f105 0501 	add.w	r5, r5, #1
 8016cd4:	4405      	add	r5, r0
 8016cd6:	dc1c      	bgt.n	8016d12 <_strtod_l+0x272>
 8016cd8:	9907      	ldr	r1, [sp, #28]
 8016cda:	230a      	movs	r3, #10
 8016cdc:	fb03 2301 	mla	r3, r3, r1, r2
 8016ce0:	9307      	str	r3, [sp, #28]
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016ce6:	1c51      	adds	r1, r2, #1
 8016ce8:	9117      	str	r1, [sp, #92]	; 0x5c
 8016cea:	7852      	ldrb	r2, [r2, #1]
 8016cec:	4618      	mov	r0, r3
 8016cee:	e7c9      	b.n	8016c84 <_strtod_l+0x1e4>
 8016cf0:	4638      	mov	r0, r7
 8016cf2:	e7d2      	b.n	8016c9a <_strtod_l+0x1fa>
 8016cf4:	2b08      	cmp	r3, #8
 8016cf6:	dc04      	bgt.n	8016d02 <_strtod_l+0x262>
 8016cf8:	9e07      	ldr	r6, [sp, #28]
 8016cfa:	434e      	muls	r6, r1
 8016cfc:	9607      	str	r6, [sp, #28]
 8016cfe:	3301      	adds	r3, #1
 8016d00:	e7e2      	b.n	8016cc8 <_strtod_l+0x228>
 8016d02:	f103 0c01 	add.w	ip, r3, #1
 8016d06:	f1bc 0f10 	cmp.w	ip, #16
 8016d0a:	bfd8      	it	le
 8016d0c:	fb01 f909 	mulle.w	r9, r1, r9
 8016d10:	e7f5      	b.n	8016cfe <_strtod_l+0x25e>
 8016d12:	2d10      	cmp	r5, #16
 8016d14:	bfdc      	itt	le
 8016d16:	230a      	movle	r3, #10
 8016d18:	fb03 2909 	mlale	r9, r3, r9, r2
 8016d1c:	e7e1      	b.n	8016ce2 <_strtod_l+0x242>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	9305      	str	r3, [sp, #20]
 8016d22:	2301      	movs	r3, #1
 8016d24:	e77c      	b.n	8016c20 <_strtod_l+0x180>
 8016d26:	f04f 0c00 	mov.w	ip, #0
 8016d2a:	f108 0202 	add.w	r2, r8, #2
 8016d2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016d34:	e785      	b.n	8016c42 <_strtod_l+0x1a2>
 8016d36:	f04f 0c01 	mov.w	ip, #1
 8016d3a:	e7f6      	b.n	8016d2a <_strtod_l+0x28a>
 8016d3c:	0801c4bc 	.word	0x0801c4bc
 8016d40:	0801c20c 	.word	0x0801c20c
 8016d44:	7ff00000 	.word	0x7ff00000
 8016d48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d4a:	1c51      	adds	r1, r2, #1
 8016d4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8016d4e:	7852      	ldrb	r2, [r2, #1]
 8016d50:	2a30      	cmp	r2, #48	; 0x30
 8016d52:	d0f9      	beq.n	8016d48 <_strtod_l+0x2a8>
 8016d54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016d58:	2908      	cmp	r1, #8
 8016d5a:	f63f af79 	bhi.w	8016c50 <_strtod_l+0x1b0>
 8016d5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d64:	9206      	str	r2, [sp, #24]
 8016d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d68:	1c51      	adds	r1, r2, #1
 8016d6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8016d6c:	7852      	ldrb	r2, [r2, #1]
 8016d6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016d72:	2e09      	cmp	r6, #9
 8016d74:	d937      	bls.n	8016de6 <_strtod_l+0x346>
 8016d76:	9e06      	ldr	r6, [sp, #24]
 8016d78:	1b89      	subs	r1, r1, r6
 8016d7a:	2908      	cmp	r1, #8
 8016d7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016d80:	dc02      	bgt.n	8016d88 <_strtod_l+0x2e8>
 8016d82:	4576      	cmp	r6, lr
 8016d84:	bfa8      	it	ge
 8016d86:	4676      	movge	r6, lr
 8016d88:	f1bc 0f00 	cmp.w	ip, #0
 8016d8c:	d000      	beq.n	8016d90 <_strtod_l+0x2f0>
 8016d8e:	4276      	negs	r6, r6
 8016d90:	2d00      	cmp	r5, #0
 8016d92:	d14d      	bne.n	8016e30 <_strtod_l+0x390>
 8016d94:	9904      	ldr	r1, [sp, #16]
 8016d96:	4301      	orrs	r1, r0
 8016d98:	f47f aec6 	bne.w	8016b28 <_strtod_l+0x88>
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f47f aee1 	bne.w	8016b64 <_strtod_l+0xc4>
 8016da2:	2a69      	cmp	r2, #105	; 0x69
 8016da4:	d027      	beq.n	8016df6 <_strtod_l+0x356>
 8016da6:	dc24      	bgt.n	8016df2 <_strtod_l+0x352>
 8016da8:	2a49      	cmp	r2, #73	; 0x49
 8016daa:	d024      	beq.n	8016df6 <_strtod_l+0x356>
 8016dac:	2a4e      	cmp	r2, #78	; 0x4e
 8016dae:	f47f aed9 	bne.w	8016b64 <_strtod_l+0xc4>
 8016db2:	499f      	ldr	r1, [pc, #636]	; (8017030 <_strtod_l+0x590>)
 8016db4:	a817      	add	r0, sp, #92	; 0x5c
 8016db6:	f002 f8b3 	bl	8018f20 <__match>
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	f43f aed2 	beq.w	8016b64 <_strtod_l+0xc4>
 8016dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	2b28      	cmp	r3, #40	; 0x28
 8016dc6:	d12d      	bne.n	8016e24 <_strtod_l+0x384>
 8016dc8:	499a      	ldr	r1, [pc, #616]	; (8017034 <_strtod_l+0x594>)
 8016dca:	aa1a      	add	r2, sp, #104	; 0x68
 8016dcc:	a817      	add	r0, sp, #92	; 0x5c
 8016dce:	f002 f8bb 	bl	8018f48 <__hexnan>
 8016dd2:	2805      	cmp	r0, #5
 8016dd4:	d126      	bne.n	8016e24 <_strtod_l+0x384>
 8016dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dd8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8016ddc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016de0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016de4:	e6a0      	b.n	8016b28 <_strtod_l+0x88>
 8016de6:	210a      	movs	r1, #10
 8016de8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8016dec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016df0:	e7b9      	b.n	8016d66 <_strtod_l+0x2c6>
 8016df2:	2a6e      	cmp	r2, #110	; 0x6e
 8016df4:	e7db      	b.n	8016dae <_strtod_l+0x30e>
 8016df6:	4990      	ldr	r1, [pc, #576]	; (8017038 <_strtod_l+0x598>)
 8016df8:	a817      	add	r0, sp, #92	; 0x5c
 8016dfa:	f002 f891 	bl	8018f20 <__match>
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	f43f aeb0 	beq.w	8016b64 <_strtod_l+0xc4>
 8016e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e06:	498d      	ldr	r1, [pc, #564]	; (801703c <_strtod_l+0x59c>)
 8016e08:	3b01      	subs	r3, #1
 8016e0a:	a817      	add	r0, sp, #92	; 0x5c
 8016e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e0e:	f002 f887 	bl	8018f20 <__match>
 8016e12:	b910      	cbnz	r0, 8016e1a <_strtod_l+0x37a>
 8016e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e16:	3301      	adds	r3, #1
 8016e18:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801704c <_strtod_l+0x5ac>
 8016e1e:	f04f 0a00 	mov.w	sl, #0
 8016e22:	e681      	b.n	8016b28 <_strtod_l+0x88>
 8016e24:	4886      	ldr	r0, [pc, #536]	; (8017040 <_strtod_l+0x5a0>)
 8016e26:	f003 fa67 	bl	801a2f8 <nan>
 8016e2a:	ec5b ab10 	vmov	sl, fp, d0
 8016e2e:	e67b      	b.n	8016b28 <_strtod_l+0x88>
 8016e30:	9b05      	ldr	r3, [sp, #20]
 8016e32:	9807      	ldr	r0, [sp, #28]
 8016e34:	1af3      	subs	r3, r6, r3
 8016e36:	2f00      	cmp	r7, #0
 8016e38:	bf08      	it	eq
 8016e3a:	462f      	moveq	r7, r5
 8016e3c:	2d10      	cmp	r5, #16
 8016e3e:	9306      	str	r3, [sp, #24]
 8016e40:	46a8      	mov	r8, r5
 8016e42:	bfa8      	it	ge
 8016e44:	f04f 0810 	movge.w	r8, #16
 8016e48:	f7e9 fb84 	bl	8000554 <__aeabi_ui2d>
 8016e4c:	2d09      	cmp	r5, #9
 8016e4e:	4682      	mov	sl, r0
 8016e50:	468b      	mov	fp, r1
 8016e52:	dd13      	ble.n	8016e7c <_strtod_l+0x3dc>
 8016e54:	4b7b      	ldr	r3, [pc, #492]	; (8017044 <_strtod_l+0x5a4>)
 8016e56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016e5e:	f7e9 fbf3 	bl	8000648 <__aeabi_dmul>
 8016e62:	4682      	mov	sl, r0
 8016e64:	4648      	mov	r0, r9
 8016e66:	468b      	mov	fp, r1
 8016e68:	f7e9 fb74 	bl	8000554 <__aeabi_ui2d>
 8016e6c:	4602      	mov	r2, r0
 8016e6e:	460b      	mov	r3, r1
 8016e70:	4650      	mov	r0, sl
 8016e72:	4659      	mov	r1, fp
 8016e74:	f7e9 fa32 	bl	80002dc <__adddf3>
 8016e78:	4682      	mov	sl, r0
 8016e7a:	468b      	mov	fp, r1
 8016e7c:	2d0f      	cmp	r5, #15
 8016e7e:	dc38      	bgt.n	8016ef2 <_strtod_l+0x452>
 8016e80:	9b06      	ldr	r3, [sp, #24]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f43f ae50 	beq.w	8016b28 <_strtod_l+0x88>
 8016e88:	dd24      	ble.n	8016ed4 <_strtod_l+0x434>
 8016e8a:	2b16      	cmp	r3, #22
 8016e8c:	dc0b      	bgt.n	8016ea6 <_strtod_l+0x406>
 8016e8e:	496d      	ldr	r1, [pc, #436]	; (8017044 <_strtod_l+0x5a4>)
 8016e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e98:	4652      	mov	r2, sl
 8016e9a:	465b      	mov	r3, fp
 8016e9c:	f7e9 fbd4 	bl	8000648 <__aeabi_dmul>
 8016ea0:	4682      	mov	sl, r0
 8016ea2:	468b      	mov	fp, r1
 8016ea4:	e640      	b.n	8016b28 <_strtod_l+0x88>
 8016ea6:	9a06      	ldr	r2, [sp, #24]
 8016ea8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016eac:	4293      	cmp	r3, r2
 8016eae:	db20      	blt.n	8016ef2 <_strtod_l+0x452>
 8016eb0:	4c64      	ldr	r4, [pc, #400]	; (8017044 <_strtod_l+0x5a4>)
 8016eb2:	f1c5 050f 	rsb	r5, r5, #15
 8016eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016eba:	4652      	mov	r2, sl
 8016ebc:	465b      	mov	r3, fp
 8016ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ec2:	f7e9 fbc1 	bl	8000648 <__aeabi_dmul>
 8016ec6:	9b06      	ldr	r3, [sp, #24]
 8016ec8:	1b5d      	subs	r5, r3, r5
 8016eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ed2:	e7e3      	b.n	8016e9c <_strtod_l+0x3fc>
 8016ed4:	9b06      	ldr	r3, [sp, #24]
 8016ed6:	3316      	adds	r3, #22
 8016ed8:	db0b      	blt.n	8016ef2 <_strtod_l+0x452>
 8016eda:	9b05      	ldr	r3, [sp, #20]
 8016edc:	1b9e      	subs	r6, r3, r6
 8016ede:	4b59      	ldr	r3, [pc, #356]	; (8017044 <_strtod_l+0x5a4>)
 8016ee0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8016ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016ee8:	4650      	mov	r0, sl
 8016eea:	4659      	mov	r1, fp
 8016eec:	f7e9 fcd6 	bl	800089c <__aeabi_ddiv>
 8016ef0:	e7d6      	b.n	8016ea0 <_strtod_l+0x400>
 8016ef2:	9b06      	ldr	r3, [sp, #24]
 8016ef4:	eba5 0808 	sub.w	r8, r5, r8
 8016ef8:	4498      	add	r8, r3
 8016efa:	f1b8 0f00 	cmp.w	r8, #0
 8016efe:	dd74      	ble.n	8016fea <_strtod_l+0x54a>
 8016f00:	f018 030f 	ands.w	r3, r8, #15
 8016f04:	d00a      	beq.n	8016f1c <_strtod_l+0x47c>
 8016f06:	494f      	ldr	r1, [pc, #316]	; (8017044 <_strtod_l+0x5a4>)
 8016f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f0c:	4652      	mov	r2, sl
 8016f0e:	465b      	mov	r3, fp
 8016f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f14:	f7e9 fb98 	bl	8000648 <__aeabi_dmul>
 8016f18:	4682      	mov	sl, r0
 8016f1a:	468b      	mov	fp, r1
 8016f1c:	f038 080f 	bics.w	r8, r8, #15
 8016f20:	d04f      	beq.n	8016fc2 <_strtod_l+0x522>
 8016f22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016f26:	dd22      	ble.n	8016f6e <_strtod_l+0x4ce>
 8016f28:	2500      	movs	r5, #0
 8016f2a:	462e      	mov	r6, r5
 8016f2c:	9507      	str	r5, [sp, #28]
 8016f2e:	9505      	str	r5, [sp, #20]
 8016f30:	2322      	movs	r3, #34	; 0x22
 8016f32:	f8df b118 	ldr.w	fp, [pc, #280]	; 801704c <_strtod_l+0x5ac>
 8016f36:	6023      	str	r3, [r4, #0]
 8016f38:	f04f 0a00 	mov.w	sl, #0
 8016f3c:	9b07      	ldr	r3, [sp, #28]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f43f adf2 	beq.w	8016b28 <_strtod_l+0x88>
 8016f44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016f46:	4620      	mov	r0, r4
 8016f48:	f002 f960 	bl	801920c <_Bfree>
 8016f4c:	9905      	ldr	r1, [sp, #20]
 8016f4e:	4620      	mov	r0, r4
 8016f50:	f002 f95c 	bl	801920c <_Bfree>
 8016f54:	4631      	mov	r1, r6
 8016f56:	4620      	mov	r0, r4
 8016f58:	f002 f958 	bl	801920c <_Bfree>
 8016f5c:	9907      	ldr	r1, [sp, #28]
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f002 f954 	bl	801920c <_Bfree>
 8016f64:	4629      	mov	r1, r5
 8016f66:	4620      	mov	r0, r4
 8016f68:	f002 f950 	bl	801920c <_Bfree>
 8016f6c:	e5dc      	b.n	8016b28 <_strtod_l+0x88>
 8016f6e:	4b36      	ldr	r3, [pc, #216]	; (8017048 <_strtod_l+0x5a8>)
 8016f70:	9304      	str	r3, [sp, #16]
 8016f72:	2300      	movs	r3, #0
 8016f74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016f78:	4650      	mov	r0, sl
 8016f7a:	4659      	mov	r1, fp
 8016f7c:	4699      	mov	r9, r3
 8016f7e:	f1b8 0f01 	cmp.w	r8, #1
 8016f82:	dc21      	bgt.n	8016fc8 <_strtod_l+0x528>
 8016f84:	b10b      	cbz	r3, 8016f8a <_strtod_l+0x4ea>
 8016f86:	4682      	mov	sl, r0
 8016f88:	468b      	mov	fp, r1
 8016f8a:	4b2f      	ldr	r3, [pc, #188]	; (8017048 <_strtod_l+0x5a8>)
 8016f8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016f90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016f94:	4652      	mov	r2, sl
 8016f96:	465b      	mov	r3, fp
 8016f98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016f9c:	f7e9 fb54 	bl	8000648 <__aeabi_dmul>
 8016fa0:	4b2a      	ldr	r3, [pc, #168]	; (801704c <_strtod_l+0x5ac>)
 8016fa2:	460a      	mov	r2, r1
 8016fa4:	400b      	ands	r3, r1
 8016fa6:	492a      	ldr	r1, [pc, #168]	; (8017050 <_strtod_l+0x5b0>)
 8016fa8:	428b      	cmp	r3, r1
 8016faa:	4682      	mov	sl, r0
 8016fac:	d8bc      	bhi.n	8016f28 <_strtod_l+0x488>
 8016fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016fb2:	428b      	cmp	r3, r1
 8016fb4:	bf86      	itte	hi
 8016fb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8017054 <_strtod_l+0x5b4>
 8016fba:	f04f 3aff 	movhi.w	sl, #4294967295
 8016fbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	9304      	str	r3, [sp, #16]
 8016fc6:	e084      	b.n	80170d2 <_strtod_l+0x632>
 8016fc8:	f018 0f01 	tst.w	r8, #1
 8016fcc:	d005      	beq.n	8016fda <_strtod_l+0x53a>
 8016fce:	9b04      	ldr	r3, [sp, #16]
 8016fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd4:	f7e9 fb38 	bl	8000648 <__aeabi_dmul>
 8016fd8:	2301      	movs	r3, #1
 8016fda:	9a04      	ldr	r2, [sp, #16]
 8016fdc:	3208      	adds	r2, #8
 8016fde:	f109 0901 	add.w	r9, r9, #1
 8016fe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fe6:	9204      	str	r2, [sp, #16]
 8016fe8:	e7c9      	b.n	8016f7e <_strtod_l+0x4de>
 8016fea:	d0ea      	beq.n	8016fc2 <_strtod_l+0x522>
 8016fec:	f1c8 0800 	rsb	r8, r8, #0
 8016ff0:	f018 020f 	ands.w	r2, r8, #15
 8016ff4:	d00a      	beq.n	801700c <_strtod_l+0x56c>
 8016ff6:	4b13      	ldr	r3, [pc, #76]	; (8017044 <_strtod_l+0x5a4>)
 8016ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ffc:	4650      	mov	r0, sl
 8016ffe:	4659      	mov	r1, fp
 8017000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017004:	f7e9 fc4a 	bl	800089c <__aeabi_ddiv>
 8017008:	4682      	mov	sl, r0
 801700a:	468b      	mov	fp, r1
 801700c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017010:	d0d7      	beq.n	8016fc2 <_strtod_l+0x522>
 8017012:	f1b8 0f1f 	cmp.w	r8, #31
 8017016:	dd1f      	ble.n	8017058 <_strtod_l+0x5b8>
 8017018:	2500      	movs	r5, #0
 801701a:	462e      	mov	r6, r5
 801701c:	9507      	str	r5, [sp, #28]
 801701e:	9505      	str	r5, [sp, #20]
 8017020:	2322      	movs	r3, #34	; 0x22
 8017022:	f04f 0a00 	mov.w	sl, #0
 8017026:	f04f 0b00 	mov.w	fp, #0
 801702a:	6023      	str	r3, [r4, #0]
 801702c:	e786      	b.n	8016f3c <_strtod_l+0x49c>
 801702e:	bf00      	nop
 8017030:	0801c1dd 	.word	0x0801c1dd
 8017034:	0801c220 	.word	0x0801c220
 8017038:	0801c1d5 	.word	0x0801c1d5
 801703c:	0801c364 	.word	0x0801c364
 8017040:	0801c678 	.word	0x0801c678
 8017044:	0801c558 	.word	0x0801c558
 8017048:	0801c530 	.word	0x0801c530
 801704c:	7ff00000 	.word	0x7ff00000
 8017050:	7ca00000 	.word	0x7ca00000
 8017054:	7fefffff 	.word	0x7fefffff
 8017058:	f018 0310 	ands.w	r3, r8, #16
 801705c:	bf18      	it	ne
 801705e:	236a      	movne	r3, #106	; 0x6a
 8017060:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8017410 <_strtod_l+0x970>
 8017064:	9304      	str	r3, [sp, #16]
 8017066:	4650      	mov	r0, sl
 8017068:	4659      	mov	r1, fp
 801706a:	2300      	movs	r3, #0
 801706c:	f018 0f01 	tst.w	r8, #1
 8017070:	d004      	beq.n	801707c <_strtod_l+0x5dc>
 8017072:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017076:	f7e9 fae7 	bl	8000648 <__aeabi_dmul>
 801707a:	2301      	movs	r3, #1
 801707c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017080:	f109 0908 	add.w	r9, r9, #8
 8017084:	d1f2      	bne.n	801706c <_strtod_l+0x5cc>
 8017086:	b10b      	cbz	r3, 801708c <_strtod_l+0x5ec>
 8017088:	4682      	mov	sl, r0
 801708a:	468b      	mov	fp, r1
 801708c:	9b04      	ldr	r3, [sp, #16]
 801708e:	b1c3      	cbz	r3, 80170c2 <_strtod_l+0x622>
 8017090:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8017094:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017098:	2b00      	cmp	r3, #0
 801709a:	4659      	mov	r1, fp
 801709c:	dd11      	ble.n	80170c2 <_strtod_l+0x622>
 801709e:	2b1f      	cmp	r3, #31
 80170a0:	f340 8124 	ble.w	80172ec <_strtod_l+0x84c>
 80170a4:	2b34      	cmp	r3, #52	; 0x34
 80170a6:	bfde      	ittt	le
 80170a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80170ac:	f04f 33ff 	movle.w	r3, #4294967295
 80170b0:	fa03 f202 	lslle.w	r2, r3, r2
 80170b4:	f04f 0a00 	mov.w	sl, #0
 80170b8:	bfcc      	ite	gt
 80170ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80170be:	ea02 0b01 	andle.w	fp, r2, r1
 80170c2:	2200      	movs	r2, #0
 80170c4:	2300      	movs	r3, #0
 80170c6:	4650      	mov	r0, sl
 80170c8:	4659      	mov	r1, fp
 80170ca:	f7e9 fd25 	bl	8000b18 <__aeabi_dcmpeq>
 80170ce:	2800      	cmp	r0, #0
 80170d0:	d1a2      	bne.n	8017018 <_strtod_l+0x578>
 80170d2:	9b07      	ldr	r3, [sp, #28]
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	9908      	ldr	r1, [sp, #32]
 80170d8:	462b      	mov	r3, r5
 80170da:	463a      	mov	r2, r7
 80170dc:	4620      	mov	r0, r4
 80170de:	f002 f8fd 	bl	80192dc <__s2b>
 80170e2:	9007      	str	r0, [sp, #28]
 80170e4:	2800      	cmp	r0, #0
 80170e6:	f43f af1f 	beq.w	8016f28 <_strtod_l+0x488>
 80170ea:	9b05      	ldr	r3, [sp, #20]
 80170ec:	1b9e      	subs	r6, r3, r6
 80170ee:	9b06      	ldr	r3, [sp, #24]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	bfb4      	ite	lt
 80170f4:	4633      	movlt	r3, r6
 80170f6:	2300      	movge	r3, #0
 80170f8:	930c      	str	r3, [sp, #48]	; 0x30
 80170fa:	9b06      	ldr	r3, [sp, #24]
 80170fc:	2500      	movs	r5, #0
 80170fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017102:	9312      	str	r3, [sp, #72]	; 0x48
 8017104:	462e      	mov	r6, r5
 8017106:	9b07      	ldr	r3, [sp, #28]
 8017108:	4620      	mov	r0, r4
 801710a:	6859      	ldr	r1, [r3, #4]
 801710c:	f002 f83e 	bl	801918c <_Balloc>
 8017110:	9005      	str	r0, [sp, #20]
 8017112:	2800      	cmp	r0, #0
 8017114:	f43f af0c 	beq.w	8016f30 <_strtod_l+0x490>
 8017118:	9b07      	ldr	r3, [sp, #28]
 801711a:	691a      	ldr	r2, [r3, #16]
 801711c:	3202      	adds	r2, #2
 801711e:	f103 010c 	add.w	r1, r3, #12
 8017122:	0092      	lsls	r2, r2, #2
 8017124:	300c      	adds	r0, #12
 8017126:	f7fe fc75 	bl	8015a14 <memcpy>
 801712a:	ec4b ab10 	vmov	d0, sl, fp
 801712e:	aa1a      	add	r2, sp, #104	; 0x68
 8017130:	a919      	add	r1, sp, #100	; 0x64
 8017132:	4620      	mov	r0, r4
 8017134:	f002 fc18 	bl	8019968 <__d2b>
 8017138:	ec4b ab18 	vmov	d8, sl, fp
 801713c:	9018      	str	r0, [sp, #96]	; 0x60
 801713e:	2800      	cmp	r0, #0
 8017140:	f43f aef6 	beq.w	8016f30 <_strtod_l+0x490>
 8017144:	2101      	movs	r1, #1
 8017146:	4620      	mov	r0, r4
 8017148:	f002 f962 	bl	8019410 <__i2b>
 801714c:	4606      	mov	r6, r0
 801714e:	2800      	cmp	r0, #0
 8017150:	f43f aeee 	beq.w	8016f30 <_strtod_l+0x490>
 8017154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017156:	9904      	ldr	r1, [sp, #16]
 8017158:	2b00      	cmp	r3, #0
 801715a:	bfab      	itete	ge
 801715c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801715e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017160:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8017162:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8017166:	bfac      	ite	ge
 8017168:	eb03 0902 	addge.w	r9, r3, r2
 801716c:	1ad7      	sublt	r7, r2, r3
 801716e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017170:	eba3 0801 	sub.w	r8, r3, r1
 8017174:	4490      	add	r8, r2
 8017176:	4ba1      	ldr	r3, [pc, #644]	; (80173fc <_strtod_l+0x95c>)
 8017178:	f108 38ff 	add.w	r8, r8, #4294967295
 801717c:	4598      	cmp	r8, r3
 801717e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017182:	f280 80c7 	bge.w	8017314 <_strtod_l+0x874>
 8017186:	eba3 0308 	sub.w	r3, r3, r8
 801718a:	2b1f      	cmp	r3, #31
 801718c:	eba2 0203 	sub.w	r2, r2, r3
 8017190:	f04f 0101 	mov.w	r1, #1
 8017194:	f300 80b1 	bgt.w	80172fa <_strtod_l+0x85a>
 8017198:	fa01 f303 	lsl.w	r3, r1, r3
 801719c:	930d      	str	r3, [sp, #52]	; 0x34
 801719e:	2300      	movs	r3, #0
 80171a0:	9308      	str	r3, [sp, #32]
 80171a2:	eb09 0802 	add.w	r8, r9, r2
 80171a6:	9b04      	ldr	r3, [sp, #16]
 80171a8:	45c1      	cmp	r9, r8
 80171aa:	4417      	add	r7, r2
 80171ac:	441f      	add	r7, r3
 80171ae:	464b      	mov	r3, r9
 80171b0:	bfa8      	it	ge
 80171b2:	4643      	movge	r3, r8
 80171b4:	42bb      	cmp	r3, r7
 80171b6:	bfa8      	it	ge
 80171b8:	463b      	movge	r3, r7
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	bfc2      	ittt	gt
 80171be:	eba8 0803 	subgt.w	r8, r8, r3
 80171c2:	1aff      	subgt	r7, r7, r3
 80171c4:	eba9 0903 	subgt.w	r9, r9, r3
 80171c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	dd17      	ble.n	80171fe <_strtod_l+0x75e>
 80171ce:	4631      	mov	r1, r6
 80171d0:	461a      	mov	r2, r3
 80171d2:	4620      	mov	r0, r4
 80171d4:	f002 f9dc 	bl	8019590 <__pow5mult>
 80171d8:	4606      	mov	r6, r0
 80171da:	2800      	cmp	r0, #0
 80171dc:	f43f aea8 	beq.w	8016f30 <_strtod_l+0x490>
 80171e0:	4601      	mov	r1, r0
 80171e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80171e4:	4620      	mov	r0, r4
 80171e6:	f002 f929 	bl	801943c <__multiply>
 80171ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80171ec:	2800      	cmp	r0, #0
 80171ee:	f43f ae9f 	beq.w	8016f30 <_strtod_l+0x490>
 80171f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80171f4:	4620      	mov	r0, r4
 80171f6:	f002 f809 	bl	801920c <_Bfree>
 80171fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171fc:	9318      	str	r3, [sp, #96]	; 0x60
 80171fe:	f1b8 0f00 	cmp.w	r8, #0
 8017202:	f300 808c 	bgt.w	801731e <_strtod_l+0x87e>
 8017206:	9b06      	ldr	r3, [sp, #24]
 8017208:	2b00      	cmp	r3, #0
 801720a:	dd08      	ble.n	801721e <_strtod_l+0x77e>
 801720c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801720e:	9905      	ldr	r1, [sp, #20]
 8017210:	4620      	mov	r0, r4
 8017212:	f002 f9bd 	bl	8019590 <__pow5mult>
 8017216:	9005      	str	r0, [sp, #20]
 8017218:	2800      	cmp	r0, #0
 801721a:	f43f ae89 	beq.w	8016f30 <_strtod_l+0x490>
 801721e:	2f00      	cmp	r7, #0
 8017220:	dd08      	ble.n	8017234 <_strtod_l+0x794>
 8017222:	9905      	ldr	r1, [sp, #20]
 8017224:	463a      	mov	r2, r7
 8017226:	4620      	mov	r0, r4
 8017228:	f002 fa0c 	bl	8019644 <__lshift>
 801722c:	9005      	str	r0, [sp, #20]
 801722e:	2800      	cmp	r0, #0
 8017230:	f43f ae7e 	beq.w	8016f30 <_strtod_l+0x490>
 8017234:	f1b9 0f00 	cmp.w	r9, #0
 8017238:	dd08      	ble.n	801724c <_strtod_l+0x7ac>
 801723a:	4631      	mov	r1, r6
 801723c:	464a      	mov	r2, r9
 801723e:	4620      	mov	r0, r4
 8017240:	f002 fa00 	bl	8019644 <__lshift>
 8017244:	4606      	mov	r6, r0
 8017246:	2800      	cmp	r0, #0
 8017248:	f43f ae72 	beq.w	8016f30 <_strtod_l+0x490>
 801724c:	9a05      	ldr	r2, [sp, #20]
 801724e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017250:	4620      	mov	r0, r4
 8017252:	f002 fa83 	bl	801975c <__mdiff>
 8017256:	4605      	mov	r5, r0
 8017258:	2800      	cmp	r0, #0
 801725a:	f43f ae69 	beq.w	8016f30 <_strtod_l+0x490>
 801725e:	68c3      	ldr	r3, [r0, #12]
 8017260:	930b      	str	r3, [sp, #44]	; 0x2c
 8017262:	2300      	movs	r3, #0
 8017264:	60c3      	str	r3, [r0, #12]
 8017266:	4631      	mov	r1, r6
 8017268:	f002 fa5c 	bl	8019724 <__mcmp>
 801726c:	2800      	cmp	r0, #0
 801726e:	da60      	bge.n	8017332 <_strtod_l+0x892>
 8017270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017272:	ea53 030a 	orrs.w	r3, r3, sl
 8017276:	f040 8082 	bne.w	801737e <_strtod_l+0x8de>
 801727a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801727e:	2b00      	cmp	r3, #0
 8017280:	d17d      	bne.n	801737e <_strtod_l+0x8de>
 8017282:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017286:	0d1b      	lsrs	r3, r3, #20
 8017288:	051b      	lsls	r3, r3, #20
 801728a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801728e:	d976      	bls.n	801737e <_strtod_l+0x8de>
 8017290:	696b      	ldr	r3, [r5, #20]
 8017292:	b913      	cbnz	r3, 801729a <_strtod_l+0x7fa>
 8017294:	692b      	ldr	r3, [r5, #16]
 8017296:	2b01      	cmp	r3, #1
 8017298:	dd71      	ble.n	801737e <_strtod_l+0x8de>
 801729a:	4629      	mov	r1, r5
 801729c:	2201      	movs	r2, #1
 801729e:	4620      	mov	r0, r4
 80172a0:	f002 f9d0 	bl	8019644 <__lshift>
 80172a4:	4631      	mov	r1, r6
 80172a6:	4605      	mov	r5, r0
 80172a8:	f002 fa3c 	bl	8019724 <__mcmp>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	dd66      	ble.n	801737e <_strtod_l+0x8de>
 80172b0:	9904      	ldr	r1, [sp, #16]
 80172b2:	4a53      	ldr	r2, [pc, #332]	; (8017400 <_strtod_l+0x960>)
 80172b4:	465b      	mov	r3, fp
 80172b6:	2900      	cmp	r1, #0
 80172b8:	f000 8081 	beq.w	80173be <_strtod_l+0x91e>
 80172bc:	ea02 010b 	and.w	r1, r2, fp
 80172c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80172c4:	dc7b      	bgt.n	80173be <_strtod_l+0x91e>
 80172c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80172ca:	f77f aea9 	ble.w	8017020 <_strtod_l+0x580>
 80172ce:	4b4d      	ldr	r3, [pc, #308]	; (8017404 <_strtod_l+0x964>)
 80172d0:	4650      	mov	r0, sl
 80172d2:	4659      	mov	r1, fp
 80172d4:	2200      	movs	r2, #0
 80172d6:	f7e9 f9b7 	bl	8000648 <__aeabi_dmul>
 80172da:	460b      	mov	r3, r1
 80172dc:	4303      	orrs	r3, r0
 80172de:	bf08      	it	eq
 80172e0:	2322      	moveq	r3, #34	; 0x22
 80172e2:	4682      	mov	sl, r0
 80172e4:	468b      	mov	fp, r1
 80172e6:	bf08      	it	eq
 80172e8:	6023      	streq	r3, [r4, #0]
 80172ea:	e62b      	b.n	8016f44 <_strtod_l+0x4a4>
 80172ec:	f04f 32ff 	mov.w	r2, #4294967295
 80172f0:	fa02 f303 	lsl.w	r3, r2, r3
 80172f4:	ea03 0a0a 	and.w	sl, r3, sl
 80172f8:	e6e3      	b.n	80170c2 <_strtod_l+0x622>
 80172fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80172fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017302:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017306:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801730a:	fa01 f308 	lsl.w	r3, r1, r8
 801730e:	9308      	str	r3, [sp, #32]
 8017310:	910d      	str	r1, [sp, #52]	; 0x34
 8017312:	e746      	b.n	80171a2 <_strtod_l+0x702>
 8017314:	2300      	movs	r3, #0
 8017316:	9308      	str	r3, [sp, #32]
 8017318:	2301      	movs	r3, #1
 801731a:	930d      	str	r3, [sp, #52]	; 0x34
 801731c:	e741      	b.n	80171a2 <_strtod_l+0x702>
 801731e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017320:	4642      	mov	r2, r8
 8017322:	4620      	mov	r0, r4
 8017324:	f002 f98e 	bl	8019644 <__lshift>
 8017328:	9018      	str	r0, [sp, #96]	; 0x60
 801732a:	2800      	cmp	r0, #0
 801732c:	f47f af6b 	bne.w	8017206 <_strtod_l+0x766>
 8017330:	e5fe      	b.n	8016f30 <_strtod_l+0x490>
 8017332:	465f      	mov	r7, fp
 8017334:	d16e      	bne.n	8017414 <_strtod_l+0x974>
 8017336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801733c:	b342      	cbz	r2, 8017390 <_strtod_l+0x8f0>
 801733e:	4a32      	ldr	r2, [pc, #200]	; (8017408 <_strtod_l+0x968>)
 8017340:	4293      	cmp	r3, r2
 8017342:	d128      	bne.n	8017396 <_strtod_l+0x8f6>
 8017344:	9b04      	ldr	r3, [sp, #16]
 8017346:	4651      	mov	r1, sl
 8017348:	b1eb      	cbz	r3, 8017386 <_strtod_l+0x8e6>
 801734a:	4b2d      	ldr	r3, [pc, #180]	; (8017400 <_strtod_l+0x960>)
 801734c:	403b      	ands	r3, r7
 801734e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017352:	f04f 32ff 	mov.w	r2, #4294967295
 8017356:	d819      	bhi.n	801738c <_strtod_l+0x8ec>
 8017358:	0d1b      	lsrs	r3, r3, #20
 801735a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801735e:	fa02 f303 	lsl.w	r3, r2, r3
 8017362:	4299      	cmp	r1, r3
 8017364:	d117      	bne.n	8017396 <_strtod_l+0x8f6>
 8017366:	4b29      	ldr	r3, [pc, #164]	; (801740c <_strtod_l+0x96c>)
 8017368:	429f      	cmp	r7, r3
 801736a:	d102      	bne.n	8017372 <_strtod_l+0x8d2>
 801736c:	3101      	adds	r1, #1
 801736e:	f43f addf 	beq.w	8016f30 <_strtod_l+0x490>
 8017372:	4b23      	ldr	r3, [pc, #140]	; (8017400 <_strtod_l+0x960>)
 8017374:	403b      	ands	r3, r7
 8017376:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801737a:	f04f 0a00 	mov.w	sl, #0
 801737e:	9b04      	ldr	r3, [sp, #16]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d1a4      	bne.n	80172ce <_strtod_l+0x82e>
 8017384:	e5de      	b.n	8016f44 <_strtod_l+0x4a4>
 8017386:	f04f 33ff 	mov.w	r3, #4294967295
 801738a:	e7ea      	b.n	8017362 <_strtod_l+0x8c2>
 801738c:	4613      	mov	r3, r2
 801738e:	e7e8      	b.n	8017362 <_strtod_l+0x8c2>
 8017390:	ea53 030a 	orrs.w	r3, r3, sl
 8017394:	d08c      	beq.n	80172b0 <_strtod_l+0x810>
 8017396:	9b08      	ldr	r3, [sp, #32]
 8017398:	b1db      	cbz	r3, 80173d2 <_strtod_l+0x932>
 801739a:	423b      	tst	r3, r7
 801739c:	d0ef      	beq.n	801737e <_strtod_l+0x8de>
 801739e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173a0:	9a04      	ldr	r2, [sp, #16]
 80173a2:	4650      	mov	r0, sl
 80173a4:	4659      	mov	r1, fp
 80173a6:	b1c3      	cbz	r3, 80173da <_strtod_l+0x93a>
 80173a8:	f7ff fb5c 	bl	8016a64 <sulp>
 80173ac:	4602      	mov	r2, r0
 80173ae:	460b      	mov	r3, r1
 80173b0:	ec51 0b18 	vmov	r0, r1, d8
 80173b4:	f7e8 ff92 	bl	80002dc <__adddf3>
 80173b8:	4682      	mov	sl, r0
 80173ba:	468b      	mov	fp, r1
 80173bc:	e7df      	b.n	801737e <_strtod_l+0x8de>
 80173be:	4013      	ands	r3, r2
 80173c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80173c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80173c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80173cc:	f04f 3aff 	mov.w	sl, #4294967295
 80173d0:	e7d5      	b.n	801737e <_strtod_l+0x8de>
 80173d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173d4:	ea13 0f0a 	tst.w	r3, sl
 80173d8:	e7e0      	b.n	801739c <_strtod_l+0x8fc>
 80173da:	f7ff fb43 	bl	8016a64 <sulp>
 80173de:	4602      	mov	r2, r0
 80173e0:	460b      	mov	r3, r1
 80173e2:	ec51 0b18 	vmov	r0, r1, d8
 80173e6:	f7e8 ff77 	bl	80002d8 <__aeabi_dsub>
 80173ea:	2200      	movs	r2, #0
 80173ec:	2300      	movs	r3, #0
 80173ee:	4682      	mov	sl, r0
 80173f0:	468b      	mov	fp, r1
 80173f2:	f7e9 fb91 	bl	8000b18 <__aeabi_dcmpeq>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	d0c1      	beq.n	801737e <_strtod_l+0x8de>
 80173fa:	e611      	b.n	8017020 <_strtod_l+0x580>
 80173fc:	fffffc02 	.word	0xfffffc02
 8017400:	7ff00000 	.word	0x7ff00000
 8017404:	39500000 	.word	0x39500000
 8017408:	000fffff 	.word	0x000fffff
 801740c:	7fefffff 	.word	0x7fefffff
 8017410:	0801c238 	.word	0x0801c238
 8017414:	4631      	mov	r1, r6
 8017416:	4628      	mov	r0, r5
 8017418:	f002 fb02 	bl	8019a20 <__ratio>
 801741c:	ec59 8b10 	vmov	r8, r9, d0
 8017420:	ee10 0a10 	vmov	r0, s0
 8017424:	2200      	movs	r2, #0
 8017426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801742a:	4649      	mov	r1, r9
 801742c:	f7e9 fb88 	bl	8000b40 <__aeabi_dcmple>
 8017430:	2800      	cmp	r0, #0
 8017432:	d07a      	beq.n	801752a <_strtod_l+0xa8a>
 8017434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017436:	2b00      	cmp	r3, #0
 8017438:	d04a      	beq.n	80174d0 <_strtod_l+0xa30>
 801743a:	4b95      	ldr	r3, [pc, #596]	; (8017690 <_strtod_l+0xbf0>)
 801743c:	2200      	movs	r2, #0
 801743e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017442:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017690 <_strtod_l+0xbf0>
 8017446:	f04f 0800 	mov.w	r8, #0
 801744a:	4b92      	ldr	r3, [pc, #584]	; (8017694 <_strtod_l+0xbf4>)
 801744c:	403b      	ands	r3, r7
 801744e:	930d      	str	r3, [sp, #52]	; 0x34
 8017450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017452:	4b91      	ldr	r3, [pc, #580]	; (8017698 <_strtod_l+0xbf8>)
 8017454:	429a      	cmp	r2, r3
 8017456:	f040 80b0 	bne.w	80175ba <_strtod_l+0xb1a>
 801745a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801745e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017462:	ec4b ab10 	vmov	d0, sl, fp
 8017466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801746a:	f002 fa01 	bl	8019870 <__ulp>
 801746e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017472:	ec53 2b10 	vmov	r2, r3, d0
 8017476:	f7e9 f8e7 	bl	8000648 <__aeabi_dmul>
 801747a:	4652      	mov	r2, sl
 801747c:	465b      	mov	r3, fp
 801747e:	f7e8 ff2d 	bl	80002dc <__adddf3>
 8017482:	460b      	mov	r3, r1
 8017484:	4983      	ldr	r1, [pc, #524]	; (8017694 <_strtod_l+0xbf4>)
 8017486:	4a85      	ldr	r2, [pc, #532]	; (801769c <_strtod_l+0xbfc>)
 8017488:	4019      	ands	r1, r3
 801748a:	4291      	cmp	r1, r2
 801748c:	4682      	mov	sl, r0
 801748e:	d960      	bls.n	8017552 <_strtod_l+0xab2>
 8017490:	ee18 3a90 	vmov	r3, s17
 8017494:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017498:	4293      	cmp	r3, r2
 801749a:	d104      	bne.n	80174a6 <_strtod_l+0xa06>
 801749c:	ee18 3a10 	vmov	r3, s16
 80174a0:	3301      	adds	r3, #1
 80174a2:	f43f ad45 	beq.w	8016f30 <_strtod_l+0x490>
 80174a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80176a8 <_strtod_l+0xc08>
 80174aa:	f04f 3aff 	mov.w	sl, #4294967295
 80174ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80174b0:	4620      	mov	r0, r4
 80174b2:	f001 feab 	bl	801920c <_Bfree>
 80174b6:	9905      	ldr	r1, [sp, #20]
 80174b8:	4620      	mov	r0, r4
 80174ba:	f001 fea7 	bl	801920c <_Bfree>
 80174be:	4631      	mov	r1, r6
 80174c0:	4620      	mov	r0, r4
 80174c2:	f001 fea3 	bl	801920c <_Bfree>
 80174c6:	4629      	mov	r1, r5
 80174c8:	4620      	mov	r0, r4
 80174ca:	f001 fe9f 	bl	801920c <_Bfree>
 80174ce:	e61a      	b.n	8017106 <_strtod_l+0x666>
 80174d0:	f1ba 0f00 	cmp.w	sl, #0
 80174d4:	d11b      	bne.n	801750e <_strtod_l+0xa6e>
 80174d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174da:	b9f3      	cbnz	r3, 801751a <_strtod_l+0xa7a>
 80174dc:	4b6c      	ldr	r3, [pc, #432]	; (8017690 <_strtod_l+0xbf0>)
 80174de:	2200      	movs	r2, #0
 80174e0:	4640      	mov	r0, r8
 80174e2:	4649      	mov	r1, r9
 80174e4:	f7e9 fb22 	bl	8000b2c <__aeabi_dcmplt>
 80174e8:	b9d0      	cbnz	r0, 8017520 <_strtod_l+0xa80>
 80174ea:	4640      	mov	r0, r8
 80174ec:	4649      	mov	r1, r9
 80174ee:	4b6c      	ldr	r3, [pc, #432]	; (80176a0 <_strtod_l+0xc00>)
 80174f0:	2200      	movs	r2, #0
 80174f2:	f7e9 f8a9 	bl	8000648 <__aeabi_dmul>
 80174f6:	4680      	mov	r8, r0
 80174f8:	4689      	mov	r9, r1
 80174fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80174fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8017502:	9315      	str	r3, [sp, #84]	; 0x54
 8017504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801750c:	e79d      	b.n	801744a <_strtod_l+0x9aa>
 801750e:	f1ba 0f01 	cmp.w	sl, #1
 8017512:	d102      	bne.n	801751a <_strtod_l+0xa7a>
 8017514:	2f00      	cmp	r7, #0
 8017516:	f43f ad83 	beq.w	8017020 <_strtod_l+0x580>
 801751a:	4b62      	ldr	r3, [pc, #392]	; (80176a4 <_strtod_l+0xc04>)
 801751c:	2200      	movs	r2, #0
 801751e:	e78e      	b.n	801743e <_strtod_l+0x99e>
 8017520:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80176a0 <_strtod_l+0xc00>
 8017524:	f04f 0800 	mov.w	r8, #0
 8017528:	e7e7      	b.n	80174fa <_strtod_l+0xa5a>
 801752a:	4b5d      	ldr	r3, [pc, #372]	; (80176a0 <_strtod_l+0xc00>)
 801752c:	4640      	mov	r0, r8
 801752e:	4649      	mov	r1, r9
 8017530:	2200      	movs	r2, #0
 8017532:	f7e9 f889 	bl	8000648 <__aeabi_dmul>
 8017536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017538:	4680      	mov	r8, r0
 801753a:	4689      	mov	r9, r1
 801753c:	b933      	cbnz	r3, 801754c <_strtod_l+0xaac>
 801753e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017542:	900e      	str	r0, [sp, #56]	; 0x38
 8017544:	930f      	str	r3, [sp, #60]	; 0x3c
 8017546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801754a:	e7dd      	b.n	8017508 <_strtod_l+0xa68>
 801754c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8017550:	e7f9      	b.n	8017546 <_strtod_l+0xaa6>
 8017552:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017556:	9b04      	ldr	r3, [sp, #16]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d1a8      	bne.n	80174ae <_strtod_l+0xa0e>
 801755c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017562:	0d1b      	lsrs	r3, r3, #20
 8017564:	051b      	lsls	r3, r3, #20
 8017566:	429a      	cmp	r2, r3
 8017568:	d1a1      	bne.n	80174ae <_strtod_l+0xa0e>
 801756a:	4640      	mov	r0, r8
 801756c:	4649      	mov	r1, r9
 801756e:	f7e9 fbb3 	bl	8000cd8 <__aeabi_d2lz>
 8017572:	f7e9 f83b 	bl	80005ec <__aeabi_l2d>
 8017576:	4602      	mov	r2, r0
 8017578:	460b      	mov	r3, r1
 801757a:	4640      	mov	r0, r8
 801757c:	4649      	mov	r1, r9
 801757e:	f7e8 feab 	bl	80002d8 <__aeabi_dsub>
 8017582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017588:	ea43 030a 	orr.w	r3, r3, sl
 801758c:	4313      	orrs	r3, r2
 801758e:	4680      	mov	r8, r0
 8017590:	4689      	mov	r9, r1
 8017592:	d055      	beq.n	8017640 <_strtod_l+0xba0>
 8017594:	a336      	add	r3, pc, #216	; (adr r3, 8017670 <_strtod_l+0xbd0>)
 8017596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801759a:	f7e9 fac7 	bl	8000b2c <__aeabi_dcmplt>
 801759e:	2800      	cmp	r0, #0
 80175a0:	f47f acd0 	bne.w	8016f44 <_strtod_l+0x4a4>
 80175a4:	a334      	add	r3, pc, #208	; (adr r3, 8017678 <_strtod_l+0xbd8>)
 80175a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175aa:	4640      	mov	r0, r8
 80175ac:	4649      	mov	r1, r9
 80175ae:	f7e9 fadb 	bl	8000b68 <__aeabi_dcmpgt>
 80175b2:	2800      	cmp	r0, #0
 80175b4:	f43f af7b 	beq.w	80174ae <_strtod_l+0xa0e>
 80175b8:	e4c4      	b.n	8016f44 <_strtod_l+0x4a4>
 80175ba:	9b04      	ldr	r3, [sp, #16]
 80175bc:	b333      	cbz	r3, 801760c <_strtod_l+0xb6c>
 80175be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80175c4:	d822      	bhi.n	801760c <_strtod_l+0xb6c>
 80175c6:	a32e      	add	r3, pc, #184	; (adr r3, 8017680 <_strtod_l+0xbe0>)
 80175c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175cc:	4640      	mov	r0, r8
 80175ce:	4649      	mov	r1, r9
 80175d0:	f7e9 fab6 	bl	8000b40 <__aeabi_dcmple>
 80175d4:	b1a0      	cbz	r0, 8017600 <_strtod_l+0xb60>
 80175d6:	4649      	mov	r1, r9
 80175d8:	4640      	mov	r0, r8
 80175da:	f7e9 fb0d 	bl	8000bf8 <__aeabi_d2uiz>
 80175de:	2801      	cmp	r0, #1
 80175e0:	bf38      	it	cc
 80175e2:	2001      	movcc	r0, #1
 80175e4:	f7e8 ffb6 	bl	8000554 <__aeabi_ui2d>
 80175e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175ea:	4680      	mov	r8, r0
 80175ec:	4689      	mov	r9, r1
 80175ee:	bb23      	cbnz	r3, 801763a <_strtod_l+0xb9a>
 80175f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175f4:	9010      	str	r0, [sp, #64]	; 0x40
 80175f6:	9311      	str	r3, [sp, #68]	; 0x44
 80175f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80175fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017604:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017608:	1a9b      	subs	r3, r3, r2
 801760a:	9309      	str	r3, [sp, #36]	; 0x24
 801760c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017610:	eeb0 0a48 	vmov.f32	s0, s16
 8017614:	eef0 0a68 	vmov.f32	s1, s17
 8017618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801761c:	f002 f928 	bl	8019870 <__ulp>
 8017620:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017624:	ec53 2b10 	vmov	r2, r3, d0
 8017628:	f7e9 f80e 	bl	8000648 <__aeabi_dmul>
 801762c:	ec53 2b18 	vmov	r2, r3, d8
 8017630:	f7e8 fe54 	bl	80002dc <__adddf3>
 8017634:	4682      	mov	sl, r0
 8017636:	468b      	mov	fp, r1
 8017638:	e78d      	b.n	8017556 <_strtod_l+0xab6>
 801763a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801763e:	e7db      	b.n	80175f8 <_strtod_l+0xb58>
 8017640:	a311      	add	r3, pc, #68	; (adr r3, 8017688 <_strtod_l+0xbe8>)
 8017642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017646:	f7e9 fa71 	bl	8000b2c <__aeabi_dcmplt>
 801764a:	e7b2      	b.n	80175b2 <_strtod_l+0xb12>
 801764c:	2300      	movs	r3, #0
 801764e:	930a      	str	r3, [sp, #40]	; 0x28
 8017650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017654:	6013      	str	r3, [r2, #0]
 8017656:	f7ff ba6b 	b.w	8016b30 <_strtod_l+0x90>
 801765a:	2a65      	cmp	r2, #101	; 0x65
 801765c:	f43f ab5f 	beq.w	8016d1e <_strtod_l+0x27e>
 8017660:	2a45      	cmp	r2, #69	; 0x45
 8017662:	f43f ab5c 	beq.w	8016d1e <_strtod_l+0x27e>
 8017666:	2301      	movs	r3, #1
 8017668:	f7ff bb94 	b.w	8016d94 <_strtod_l+0x2f4>
 801766c:	f3af 8000 	nop.w
 8017670:	94a03595 	.word	0x94a03595
 8017674:	3fdfffff 	.word	0x3fdfffff
 8017678:	35afe535 	.word	0x35afe535
 801767c:	3fe00000 	.word	0x3fe00000
 8017680:	ffc00000 	.word	0xffc00000
 8017684:	41dfffff 	.word	0x41dfffff
 8017688:	94a03595 	.word	0x94a03595
 801768c:	3fcfffff 	.word	0x3fcfffff
 8017690:	3ff00000 	.word	0x3ff00000
 8017694:	7ff00000 	.word	0x7ff00000
 8017698:	7fe00000 	.word	0x7fe00000
 801769c:	7c9fffff 	.word	0x7c9fffff
 80176a0:	3fe00000 	.word	0x3fe00000
 80176a4:	bff00000 	.word	0xbff00000
 80176a8:	7fefffff 	.word	0x7fefffff

080176ac <_strtod_r>:
 80176ac:	4b01      	ldr	r3, [pc, #4]	; (80176b4 <_strtod_r+0x8>)
 80176ae:	f7ff b9f7 	b.w	8016aa0 <_strtod_l>
 80176b2:	bf00      	nop
 80176b4:	20000088 	.word	0x20000088

080176b8 <_strtol_l.constprop.0>:
 80176b8:	2b01      	cmp	r3, #1
 80176ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176be:	d001      	beq.n	80176c4 <_strtol_l.constprop.0+0xc>
 80176c0:	2b24      	cmp	r3, #36	; 0x24
 80176c2:	d906      	bls.n	80176d2 <_strtol_l.constprop.0+0x1a>
 80176c4:	f7fe f97c 	bl	80159c0 <__errno>
 80176c8:	2316      	movs	r3, #22
 80176ca:	6003      	str	r3, [r0, #0]
 80176cc:	2000      	movs	r0, #0
 80176ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80177b8 <_strtol_l.constprop.0+0x100>
 80176d6:	460d      	mov	r5, r1
 80176d8:	462e      	mov	r6, r5
 80176da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80176e2:	f017 0708 	ands.w	r7, r7, #8
 80176e6:	d1f7      	bne.n	80176d8 <_strtol_l.constprop.0+0x20>
 80176e8:	2c2d      	cmp	r4, #45	; 0x2d
 80176ea:	d132      	bne.n	8017752 <_strtol_l.constprop.0+0x9a>
 80176ec:	782c      	ldrb	r4, [r5, #0]
 80176ee:	2701      	movs	r7, #1
 80176f0:	1cb5      	adds	r5, r6, #2
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d05b      	beq.n	80177ae <_strtol_l.constprop.0+0xf6>
 80176f6:	2b10      	cmp	r3, #16
 80176f8:	d109      	bne.n	801770e <_strtol_l.constprop.0+0x56>
 80176fa:	2c30      	cmp	r4, #48	; 0x30
 80176fc:	d107      	bne.n	801770e <_strtol_l.constprop.0+0x56>
 80176fe:	782c      	ldrb	r4, [r5, #0]
 8017700:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017704:	2c58      	cmp	r4, #88	; 0x58
 8017706:	d14d      	bne.n	80177a4 <_strtol_l.constprop.0+0xec>
 8017708:	786c      	ldrb	r4, [r5, #1]
 801770a:	2310      	movs	r3, #16
 801770c:	3502      	adds	r5, #2
 801770e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017712:	f108 38ff 	add.w	r8, r8, #4294967295
 8017716:	f04f 0c00 	mov.w	ip, #0
 801771a:	fbb8 f9f3 	udiv	r9, r8, r3
 801771e:	4666      	mov	r6, ip
 8017720:	fb03 8a19 	mls	sl, r3, r9, r8
 8017724:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017728:	f1be 0f09 	cmp.w	lr, #9
 801772c:	d816      	bhi.n	801775c <_strtol_l.constprop.0+0xa4>
 801772e:	4674      	mov	r4, lr
 8017730:	42a3      	cmp	r3, r4
 8017732:	dd24      	ble.n	801777e <_strtol_l.constprop.0+0xc6>
 8017734:	f1bc 0f00 	cmp.w	ip, #0
 8017738:	db1e      	blt.n	8017778 <_strtol_l.constprop.0+0xc0>
 801773a:	45b1      	cmp	r9, r6
 801773c:	d31c      	bcc.n	8017778 <_strtol_l.constprop.0+0xc0>
 801773e:	d101      	bne.n	8017744 <_strtol_l.constprop.0+0x8c>
 8017740:	45a2      	cmp	sl, r4
 8017742:	db19      	blt.n	8017778 <_strtol_l.constprop.0+0xc0>
 8017744:	fb06 4603 	mla	r6, r6, r3, r4
 8017748:	f04f 0c01 	mov.w	ip, #1
 801774c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017750:	e7e8      	b.n	8017724 <_strtol_l.constprop.0+0x6c>
 8017752:	2c2b      	cmp	r4, #43	; 0x2b
 8017754:	bf04      	itt	eq
 8017756:	782c      	ldrbeq	r4, [r5, #0]
 8017758:	1cb5      	addeq	r5, r6, #2
 801775a:	e7ca      	b.n	80176f2 <_strtol_l.constprop.0+0x3a>
 801775c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017760:	f1be 0f19 	cmp.w	lr, #25
 8017764:	d801      	bhi.n	801776a <_strtol_l.constprop.0+0xb2>
 8017766:	3c37      	subs	r4, #55	; 0x37
 8017768:	e7e2      	b.n	8017730 <_strtol_l.constprop.0+0x78>
 801776a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801776e:	f1be 0f19 	cmp.w	lr, #25
 8017772:	d804      	bhi.n	801777e <_strtol_l.constprop.0+0xc6>
 8017774:	3c57      	subs	r4, #87	; 0x57
 8017776:	e7db      	b.n	8017730 <_strtol_l.constprop.0+0x78>
 8017778:	f04f 3cff 	mov.w	ip, #4294967295
 801777c:	e7e6      	b.n	801774c <_strtol_l.constprop.0+0x94>
 801777e:	f1bc 0f00 	cmp.w	ip, #0
 8017782:	da05      	bge.n	8017790 <_strtol_l.constprop.0+0xd8>
 8017784:	2322      	movs	r3, #34	; 0x22
 8017786:	6003      	str	r3, [r0, #0]
 8017788:	4646      	mov	r6, r8
 801778a:	b942      	cbnz	r2, 801779e <_strtol_l.constprop.0+0xe6>
 801778c:	4630      	mov	r0, r6
 801778e:	e79e      	b.n	80176ce <_strtol_l.constprop.0+0x16>
 8017790:	b107      	cbz	r7, 8017794 <_strtol_l.constprop.0+0xdc>
 8017792:	4276      	negs	r6, r6
 8017794:	2a00      	cmp	r2, #0
 8017796:	d0f9      	beq.n	801778c <_strtol_l.constprop.0+0xd4>
 8017798:	f1bc 0f00 	cmp.w	ip, #0
 801779c:	d000      	beq.n	80177a0 <_strtol_l.constprop.0+0xe8>
 801779e:	1e69      	subs	r1, r5, #1
 80177a0:	6011      	str	r1, [r2, #0]
 80177a2:	e7f3      	b.n	801778c <_strtol_l.constprop.0+0xd4>
 80177a4:	2430      	movs	r4, #48	; 0x30
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d1b1      	bne.n	801770e <_strtol_l.constprop.0+0x56>
 80177aa:	2308      	movs	r3, #8
 80177ac:	e7af      	b.n	801770e <_strtol_l.constprop.0+0x56>
 80177ae:	2c30      	cmp	r4, #48	; 0x30
 80177b0:	d0a5      	beq.n	80176fe <_strtol_l.constprop.0+0x46>
 80177b2:	230a      	movs	r3, #10
 80177b4:	e7ab      	b.n	801770e <_strtol_l.constprop.0+0x56>
 80177b6:	bf00      	nop
 80177b8:	0801c261 	.word	0x0801c261

080177bc <_strtol_r>:
 80177bc:	f7ff bf7c 	b.w	80176b8 <_strtol_l.constprop.0>

080177c0 <__swbuf_r>:
 80177c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c2:	460e      	mov	r6, r1
 80177c4:	4614      	mov	r4, r2
 80177c6:	4605      	mov	r5, r0
 80177c8:	b118      	cbz	r0, 80177d2 <__swbuf_r+0x12>
 80177ca:	6983      	ldr	r3, [r0, #24]
 80177cc:	b90b      	cbnz	r3, 80177d2 <__swbuf_r+0x12>
 80177ce:	f001 f84b 	bl	8018868 <__sinit>
 80177d2:	4b21      	ldr	r3, [pc, #132]	; (8017858 <__swbuf_r+0x98>)
 80177d4:	429c      	cmp	r4, r3
 80177d6:	d12b      	bne.n	8017830 <__swbuf_r+0x70>
 80177d8:	686c      	ldr	r4, [r5, #4]
 80177da:	69a3      	ldr	r3, [r4, #24]
 80177dc:	60a3      	str	r3, [r4, #8]
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	071a      	lsls	r2, r3, #28
 80177e2:	d52f      	bpl.n	8017844 <__swbuf_r+0x84>
 80177e4:	6923      	ldr	r3, [r4, #16]
 80177e6:	b36b      	cbz	r3, 8017844 <__swbuf_r+0x84>
 80177e8:	6923      	ldr	r3, [r4, #16]
 80177ea:	6820      	ldr	r0, [r4, #0]
 80177ec:	1ac0      	subs	r0, r0, r3
 80177ee:	6963      	ldr	r3, [r4, #20]
 80177f0:	b2f6      	uxtb	r6, r6
 80177f2:	4283      	cmp	r3, r0
 80177f4:	4637      	mov	r7, r6
 80177f6:	dc04      	bgt.n	8017802 <__swbuf_r+0x42>
 80177f8:	4621      	mov	r1, r4
 80177fa:	4628      	mov	r0, r5
 80177fc:	f000 ffa0 	bl	8018740 <_fflush_r>
 8017800:	bb30      	cbnz	r0, 8017850 <__swbuf_r+0x90>
 8017802:	68a3      	ldr	r3, [r4, #8]
 8017804:	3b01      	subs	r3, #1
 8017806:	60a3      	str	r3, [r4, #8]
 8017808:	6823      	ldr	r3, [r4, #0]
 801780a:	1c5a      	adds	r2, r3, #1
 801780c:	6022      	str	r2, [r4, #0]
 801780e:	701e      	strb	r6, [r3, #0]
 8017810:	6963      	ldr	r3, [r4, #20]
 8017812:	3001      	adds	r0, #1
 8017814:	4283      	cmp	r3, r0
 8017816:	d004      	beq.n	8017822 <__swbuf_r+0x62>
 8017818:	89a3      	ldrh	r3, [r4, #12]
 801781a:	07db      	lsls	r3, r3, #31
 801781c:	d506      	bpl.n	801782c <__swbuf_r+0x6c>
 801781e:	2e0a      	cmp	r6, #10
 8017820:	d104      	bne.n	801782c <__swbuf_r+0x6c>
 8017822:	4621      	mov	r1, r4
 8017824:	4628      	mov	r0, r5
 8017826:	f000 ff8b 	bl	8018740 <_fflush_r>
 801782a:	b988      	cbnz	r0, 8017850 <__swbuf_r+0x90>
 801782c:	4638      	mov	r0, r7
 801782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017830:	4b0a      	ldr	r3, [pc, #40]	; (801785c <__swbuf_r+0x9c>)
 8017832:	429c      	cmp	r4, r3
 8017834:	d101      	bne.n	801783a <__swbuf_r+0x7a>
 8017836:	68ac      	ldr	r4, [r5, #8]
 8017838:	e7cf      	b.n	80177da <__swbuf_r+0x1a>
 801783a:	4b09      	ldr	r3, [pc, #36]	; (8017860 <__swbuf_r+0xa0>)
 801783c:	429c      	cmp	r4, r3
 801783e:	bf08      	it	eq
 8017840:	68ec      	ldreq	r4, [r5, #12]
 8017842:	e7ca      	b.n	80177da <__swbuf_r+0x1a>
 8017844:	4621      	mov	r1, r4
 8017846:	4628      	mov	r0, r5
 8017848:	f000 f80c 	bl	8017864 <__swsetup_r>
 801784c:	2800      	cmp	r0, #0
 801784e:	d0cb      	beq.n	80177e8 <__swbuf_r+0x28>
 8017850:	f04f 37ff 	mov.w	r7, #4294967295
 8017854:	e7ea      	b.n	801782c <__swbuf_r+0x6c>
 8017856:	bf00      	nop
 8017858:	0801c414 	.word	0x0801c414
 801785c:	0801c434 	.word	0x0801c434
 8017860:	0801c3f4 	.word	0x0801c3f4

08017864 <__swsetup_r>:
 8017864:	4b32      	ldr	r3, [pc, #200]	; (8017930 <__swsetup_r+0xcc>)
 8017866:	b570      	push	{r4, r5, r6, lr}
 8017868:	681d      	ldr	r5, [r3, #0]
 801786a:	4606      	mov	r6, r0
 801786c:	460c      	mov	r4, r1
 801786e:	b125      	cbz	r5, 801787a <__swsetup_r+0x16>
 8017870:	69ab      	ldr	r3, [r5, #24]
 8017872:	b913      	cbnz	r3, 801787a <__swsetup_r+0x16>
 8017874:	4628      	mov	r0, r5
 8017876:	f000 fff7 	bl	8018868 <__sinit>
 801787a:	4b2e      	ldr	r3, [pc, #184]	; (8017934 <__swsetup_r+0xd0>)
 801787c:	429c      	cmp	r4, r3
 801787e:	d10f      	bne.n	80178a0 <__swsetup_r+0x3c>
 8017880:	686c      	ldr	r4, [r5, #4]
 8017882:	89a3      	ldrh	r3, [r4, #12]
 8017884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017888:	0719      	lsls	r1, r3, #28
 801788a:	d42c      	bmi.n	80178e6 <__swsetup_r+0x82>
 801788c:	06dd      	lsls	r5, r3, #27
 801788e:	d411      	bmi.n	80178b4 <__swsetup_r+0x50>
 8017890:	2309      	movs	r3, #9
 8017892:	6033      	str	r3, [r6, #0]
 8017894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017898:	81a3      	strh	r3, [r4, #12]
 801789a:	f04f 30ff 	mov.w	r0, #4294967295
 801789e:	e03e      	b.n	801791e <__swsetup_r+0xba>
 80178a0:	4b25      	ldr	r3, [pc, #148]	; (8017938 <__swsetup_r+0xd4>)
 80178a2:	429c      	cmp	r4, r3
 80178a4:	d101      	bne.n	80178aa <__swsetup_r+0x46>
 80178a6:	68ac      	ldr	r4, [r5, #8]
 80178a8:	e7eb      	b.n	8017882 <__swsetup_r+0x1e>
 80178aa:	4b24      	ldr	r3, [pc, #144]	; (801793c <__swsetup_r+0xd8>)
 80178ac:	429c      	cmp	r4, r3
 80178ae:	bf08      	it	eq
 80178b0:	68ec      	ldreq	r4, [r5, #12]
 80178b2:	e7e6      	b.n	8017882 <__swsetup_r+0x1e>
 80178b4:	0758      	lsls	r0, r3, #29
 80178b6:	d512      	bpl.n	80178de <__swsetup_r+0x7a>
 80178b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178ba:	b141      	cbz	r1, 80178ce <__swsetup_r+0x6a>
 80178bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178c0:	4299      	cmp	r1, r3
 80178c2:	d002      	beq.n	80178ca <__swsetup_r+0x66>
 80178c4:	4630      	mov	r0, r6
 80178c6:	f002 f939 	bl	8019b3c <_free_r>
 80178ca:	2300      	movs	r3, #0
 80178cc:	6363      	str	r3, [r4, #52]	; 0x34
 80178ce:	89a3      	ldrh	r3, [r4, #12]
 80178d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80178d4:	81a3      	strh	r3, [r4, #12]
 80178d6:	2300      	movs	r3, #0
 80178d8:	6063      	str	r3, [r4, #4]
 80178da:	6923      	ldr	r3, [r4, #16]
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	89a3      	ldrh	r3, [r4, #12]
 80178e0:	f043 0308 	orr.w	r3, r3, #8
 80178e4:	81a3      	strh	r3, [r4, #12]
 80178e6:	6923      	ldr	r3, [r4, #16]
 80178e8:	b94b      	cbnz	r3, 80178fe <__swsetup_r+0x9a>
 80178ea:	89a3      	ldrh	r3, [r4, #12]
 80178ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80178f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178f4:	d003      	beq.n	80178fe <__swsetup_r+0x9a>
 80178f6:	4621      	mov	r1, r4
 80178f8:	4630      	mov	r0, r6
 80178fa:	f001 fbed 	bl	80190d8 <__smakebuf_r>
 80178fe:	89a0      	ldrh	r0, [r4, #12]
 8017900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017904:	f010 0301 	ands.w	r3, r0, #1
 8017908:	d00a      	beq.n	8017920 <__swsetup_r+0xbc>
 801790a:	2300      	movs	r3, #0
 801790c:	60a3      	str	r3, [r4, #8]
 801790e:	6963      	ldr	r3, [r4, #20]
 8017910:	425b      	negs	r3, r3
 8017912:	61a3      	str	r3, [r4, #24]
 8017914:	6923      	ldr	r3, [r4, #16]
 8017916:	b943      	cbnz	r3, 801792a <__swsetup_r+0xc6>
 8017918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801791c:	d1ba      	bne.n	8017894 <__swsetup_r+0x30>
 801791e:	bd70      	pop	{r4, r5, r6, pc}
 8017920:	0781      	lsls	r1, r0, #30
 8017922:	bf58      	it	pl
 8017924:	6963      	ldrpl	r3, [r4, #20]
 8017926:	60a3      	str	r3, [r4, #8]
 8017928:	e7f4      	b.n	8017914 <__swsetup_r+0xb0>
 801792a:	2000      	movs	r0, #0
 801792c:	e7f7      	b.n	801791e <__swsetup_r+0xba>
 801792e:	bf00      	nop
 8017930:	20000020 	.word	0x20000020
 8017934:	0801c414 	.word	0x0801c414
 8017938:	0801c434 	.word	0x0801c434
 801793c:	0801c3f4 	.word	0x0801c3f4

08017940 <quorem>:
 8017940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	6903      	ldr	r3, [r0, #16]
 8017946:	690c      	ldr	r4, [r1, #16]
 8017948:	42a3      	cmp	r3, r4
 801794a:	4607      	mov	r7, r0
 801794c:	f2c0 8081 	blt.w	8017a52 <quorem+0x112>
 8017950:	3c01      	subs	r4, #1
 8017952:	f101 0814 	add.w	r8, r1, #20
 8017956:	f100 0514 	add.w	r5, r0, #20
 801795a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801795e:	9301      	str	r3, [sp, #4]
 8017960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017968:	3301      	adds	r3, #1
 801796a:	429a      	cmp	r2, r3
 801796c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017970:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017974:	fbb2 f6f3 	udiv	r6, r2, r3
 8017978:	d331      	bcc.n	80179de <quorem+0x9e>
 801797a:	f04f 0e00 	mov.w	lr, #0
 801797e:	4640      	mov	r0, r8
 8017980:	46ac      	mov	ip, r5
 8017982:	46f2      	mov	sl, lr
 8017984:	f850 2b04 	ldr.w	r2, [r0], #4
 8017988:	b293      	uxth	r3, r2
 801798a:	fb06 e303 	mla	r3, r6, r3, lr
 801798e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017992:	b29b      	uxth	r3, r3
 8017994:	ebaa 0303 	sub.w	r3, sl, r3
 8017998:	f8dc a000 	ldr.w	sl, [ip]
 801799c:	0c12      	lsrs	r2, r2, #16
 801799e:	fa13 f38a 	uxtah	r3, r3, sl
 80179a2:	fb06 e202 	mla	r2, r6, r2, lr
 80179a6:	9300      	str	r3, [sp, #0]
 80179a8:	9b00      	ldr	r3, [sp, #0]
 80179aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80179ae:	b292      	uxth	r2, r2
 80179b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80179b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80179b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80179bc:	4581      	cmp	r9, r0
 80179be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80179c2:	f84c 3b04 	str.w	r3, [ip], #4
 80179c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80179ca:	d2db      	bcs.n	8017984 <quorem+0x44>
 80179cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80179d0:	b92b      	cbnz	r3, 80179de <quorem+0x9e>
 80179d2:	9b01      	ldr	r3, [sp, #4]
 80179d4:	3b04      	subs	r3, #4
 80179d6:	429d      	cmp	r5, r3
 80179d8:	461a      	mov	r2, r3
 80179da:	d32e      	bcc.n	8017a3a <quorem+0xfa>
 80179dc:	613c      	str	r4, [r7, #16]
 80179de:	4638      	mov	r0, r7
 80179e0:	f001 fea0 	bl	8019724 <__mcmp>
 80179e4:	2800      	cmp	r0, #0
 80179e6:	db24      	blt.n	8017a32 <quorem+0xf2>
 80179e8:	3601      	adds	r6, #1
 80179ea:	4628      	mov	r0, r5
 80179ec:	f04f 0c00 	mov.w	ip, #0
 80179f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80179f4:	f8d0 e000 	ldr.w	lr, [r0]
 80179f8:	b293      	uxth	r3, r2
 80179fa:	ebac 0303 	sub.w	r3, ip, r3
 80179fe:	0c12      	lsrs	r2, r2, #16
 8017a00:	fa13 f38e 	uxtah	r3, r3, lr
 8017a04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a0c:	b29b      	uxth	r3, r3
 8017a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a12:	45c1      	cmp	r9, r8
 8017a14:	f840 3b04 	str.w	r3, [r0], #4
 8017a18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017a1c:	d2e8      	bcs.n	80179f0 <quorem+0xb0>
 8017a1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017a26:	b922      	cbnz	r2, 8017a32 <quorem+0xf2>
 8017a28:	3b04      	subs	r3, #4
 8017a2a:	429d      	cmp	r5, r3
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	d30a      	bcc.n	8017a46 <quorem+0x106>
 8017a30:	613c      	str	r4, [r7, #16]
 8017a32:	4630      	mov	r0, r6
 8017a34:	b003      	add	sp, #12
 8017a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a3a:	6812      	ldr	r2, [r2, #0]
 8017a3c:	3b04      	subs	r3, #4
 8017a3e:	2a00      	cmp	r2, #0
 8017a40:	d1cc      	bne.n	80179dc <quorem+0x9c>
 8017a42:	3c01      	subs	r4, #1
 8017a44:	e7c7      	b.n	80179d6 <quorem+0x96>
 8017a46:	6812      	ldr	r2, [r2, #0]
 8017a48:	3b04      	subs	r3, #4
 8017a4a:	2a00      	cmp	r2, #0
 8017a4c:	d1f0      	bne.n	8017a30 <quorem+0xf0>
 8017a4e:	3c01      	subs	r4, #1
 8017a50:	e7eb      	b.n	8017a2a <quorem+0xea>
 8017a52:	2000      	movs	r0, #0
 8017a54:	e7ee      	b.n	8017a34 <quorem+0xf4>
	...

08017a58 <_dtoa_r>:
 8017a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5c:	ed2d 8b04 	vpush	{d8-d9}
 8017a60:	ec57 6b10 	vmov	r6, r7, d0
 8017a64:	b093      	sub	sp, #76	; 0x4c
 8017a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017a68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017a6c:	9106      	str	r1, [sp, #24]
 8017a6e:	ee10 aa10 	vmov	sl, s0
 8017a72:	4604      	mov	r4, r0
 8017a74:	9209      	str	r2, [sp, #36]	; 0x24
 8017a76:	930c      	str	r3, [sp, #48]	; 0x30
 8017a78:	46bb      	mov	fp, r7
 8017a7a:	b975      	cbnz	r5, 8017a9a <_dtoa_r+0x42>
 8017a7c:	2010      	movs	r0, #16
 8017a7e:	f001 fb6b 	bl	8019158 <malloc>
 8017a82:	4602      	mov	r2, r0
 8017a84:	6260      	str	r0, [r4, #36]	; 0x24
 8017a86:	b920      	cbnz	r0, 8017a92 <_dtoa_r+0x3a>
 8017a88:	4ba7      	ldr	r3, [pc, #668]	; (8017d28 <_dtoa_r+0x2d0>)
 8017a8a:	21ea      	movs	r1, #234	; 0xea
 8017a8c:	48a7      	ldr	r0, [pc, #668]	; (8017d2c <_dtoa_r+0x2d4>)
 8017a8e:	f002 fcc1 	bl	801a414 <__assert_func>
 8017a92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017a96:	6005      	str	r5, [r0, #0]
 8017a98:	60c5      	str	r5, [r0, #12]
 8017a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a9c:	6819      	ldr	r1, [r3, #0]
 8017a9e:	b151      	cbz	r1, 8017ab6 <_dtoa_r+0x5e>
 8017aa0:	685a      	ldr	r2, [r3, #4]
 8017aa2:	604a      	str	r2, [r1, #4]
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	4093      	lsls	r3, r2
 8017aa8:	608b      	str	r3, [r1, #8]
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f001 fbae 	bl	801920c <_Bfree>
 8017ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	601a      	str	r2, [r3, #0]
 8017ab6:	1e3b      	subs	r3, r7, #0
 8017ab8:	bfaa      	itet	ge
 8017aba:	2300      	movge	r3, #0
 8017abc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017ac0:	f8c8 3000 	strge.w	r3, [r8]
 8017ac4:	4b9a      	ldr	r3, [pc, #616]	; (8017d30 <_dtoa_r+0x2d8>)
 8017ac6:	bfbc      	itt	lt
 8017ac8:	2201      	movlt	r2, #1
 8017aca:	f8c8 2000 	strlt.w	r2, [r8]
 8017ace:	ea33 030b 	bics.w	r3, r3, fp
 8017ad2:	d11b      	bne.n	8017b0c <_dtoa_r+0xb4>
 8017ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ad6:	f242 730f 	movw	r3, #9999	; 0x270f
 8017ada:	6013      	str	r3, [r2, #0]
 8017adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ae0:	4333      	orrs	r3, r6
 8017ae2:	f000 8592 	beq.w	801860a <_dtoa_r+0xbb2>
 8017ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ae8:	b963      	cbnz	r3, 8017b04 <_dtoa_r+0xac>
 8017aea:	4b92      	ldr	r3, [pc, #584]	; (8017d34 <_dtoa_r+0x2dc>)
 8017aec:	e022      	b.n	8017b34 <_dtoa_r+0xdc>
 8017aee:	4b92      	ldr	r3, [pc, #584]	; (8017d38 <_dtoa_r+0x2e0>)
 8017af0:	9301      	str	r3, [sp, #4]
 8017af2:	3308      	adds	r3, #8
 8017af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017af6:	6013      	str	r3, [r2, #0]
 8017af8:	9801      	ldr	r0, [sp, #4]
 8017afa:	b013      	add	sp, #76	; 0x4c
 8017afc:	ecbd 8b04 	vpop	{d8-d9}
 8017b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b04:	4b8b      	ldr	r3, [pc, #556]	; (8017d34 <_dtoa_r+0x2dc>)
 8017b06:	9301      	str	r3, [sp, #4]
 8017b08:	3303      	adds	r3, #3
 8017b0a:	e7f3      	b.n	8017af4 <_dtoa_r+0x9c>
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	2300      	movs	r3, #0
 8017b10:	4650      	mov	r0, sl
 8017b12:	4659      	mov	r1, fp
 8017b14:	f7e9 f800 	bl	8000b18 <__aeabi_dcmpeq>
 8017b18:	ec4b ab19 	vmov	d9, sl, fp
 8017b1c:	4680      	mov	r8, r0
 8017b1e:	b158      	cbz	r0, 8017b38 <_dtoa_r+0xe0>
 8017b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b22:	2301      	movs	r3, #1
 8017b24:	6013      	str	r3, [r2, #0]
 8017b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f000 856b 	beq.w	8018604 <_dtoa_r+0xbac>
 8017b2e:	4883      	ldr	r0, [pc, #524]	; (8017d3c <_dtoa_r+0x2e4>)
 8017b30:	6018      	str	r0, [r3, #0]
 8017b32:	1e43      	subs	r3, r0, #1
 8017b34:	9301      	str	r3, [sp, #4]
 8017b36:	e7df      	b.n	8017af8 <_dtoa_r+0xa0>
 8017b38:	ec4b ab10 	vmov	d0, sl, fp
 8017b3c:	aa10      	add	r2, sp, #64	; 0x40
 8017b3e:	a911      	add	r1, sp, #68	; 0x44
 8017b40:	4620      	mov	r0, r4
 8017b42:	f001 ff11 	bl	8019968 <__d2b>
 8017b46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017b4a:	ee08 0a10 	vmov	s16, r0
 8017b4e:	2d00      	cmp	r5, #0
 8017b50:	f000 8084 	beq.w	8017c5c <_dtoa_r+0x204>
 8017b54:	ee19 3a90 	vmov	r3, s19
 8017b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017b60:	4656      	mov	r6, sl
 8017b62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017b6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017b6e:	4b74      	ldr	r3, [pc, #464]	; (8017d40 <_dtoa_r+0x2e8>)
 8017b70:	2200      	movs	r2, #0
 8017b72:	4630      	mov	r0, r6
 8017b74:	4639      	mov	r1, r7
 8017b76:	f7e8 fbaf 	bl	80002d8 <__aeabi_dsub>
 8017b7a:	a365      	add	r3, pc, #404	; (adr r3, 8017d10 <_dtoa_r+0x2b8>)
 8017b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b80:	f7e8 fd62 	bl	8000648 <__aeabi_dmul>
 8017b84:	a364      	add	r3, pc, #400	; (adr r3, 8017d18 <_dtoa_r+0x2c0>)
 8017b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b8a:	f7e8 fba7 	bl	80002dc <__adddf3>
 8017b8e:	4606      	mov	r6, r0
 8017b90:	4628      	mov	r0, r5
 8017b92:	460f      	mov	r7, r1
 8017b94:	f7e8 fcee 	bl	8000574 <__aeabi_i2d>
 8017b98:	a361      	add	r3, pc, #388	; (adr r3, 8017d20 <_dtoa_r+0x2c8>)
 8017b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9e:	f7e8 fd53 	bl	8000648 <__aeabi_dmul>
 8017ba2:	4602      	mov	r2, r0
 8017ba4:	460b      	mov	r3, r1
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	4639      	mov	r1, r7
 8017baa:	f7e8 fb97 	bl	80002dc <__adddf3>
 8017bae:	4606      	mov	r6, r0
 8017bb0:	460f      	mov	r7, r1
 8017bb2:	f7e8 fff9 	bl	8000ba8 <__aeabi_d2iz>
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	9000      	str	r0, [sp, #0]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	4630      	mov	r0, r6
 8017bbe:	4639      	mov	r1, r7
 8017bc0:	f7e8 ffb4 	bl	8000b2c <__aeabi_dcmplt>
 8017bc4:	b150      	cbz	r0, 8017bdc <_dtoa_r+0x184>
 8017bc6:	9800      	ldr	r0, [sp, #0]
 8017bc8:	f7e8 fcd4 	bl	8000574 <__aeabi_i2d>
 8017bcc:	4632      	mov	r2, r6
 8017bce:	463b      	mov	r3, r7
 8017bd0:	f7e8 ffa2 	bl	8000b18 <__aeabi_dcmpeq>
 8017bd4:	b910      	cbnz	r0, 8017bdc <_dtoa_r+0x184>
 8017bd6:	9b00      	ldr	r3, [sp, #0]
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	9300      	str	r3, [sp, #0]
 8017bdc:	9b00      	ldr	r3, [sp, #0]
 8017bde:	2b16      	cmp	r3, #22
 8017be0:	d85a      	bhi.n	8017c98 <_dtoa_r+0x240>
 8017be2:	9a00      	ldr	r2, [sp, #0]
 8017be4:	4b57      	ldr	r3, [pc, #348]	; (8017d44 <_dtoa_r+0x2ec>)
 8017be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bee:	ec51 0b19 	vmov	r0, r1, d9
 8017bf2:	f7e8 ff9b 	bl	8000b2c <__aeabi_dcmplt>
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d050      	beq.n	8017c9c <_dtoa_r+0x244>
 8017bfa:	9b00      	ldr	r3, [sp, #0]
 8017bfc:	3b01      	subs	r3, #1
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	2300      	movs	r3, #0
 8017c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c06:	1b5d      	subs	r5, r3, r5
 8017c08:	1e6b      	subs	r3, r5, #1
 8017c0a:	9305      	str	r3, [sp, #20]
 8017c0c:	bf45      	ittet	mi
 8017c0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017c12:	9304      	strmi	r3, [sp, #16]
 8017c14:	2300      	movpl	r3, #0
 8017c16:	2300      	movmi	r3, #0
 8017c18:	bf4c      	ite	mi
 8017c1a:	9305      	strmi	r3, [sp, #20]
 8017c1c:	9304      	strpl	r3, [sp, #16]
 8017c1e:	9b00      	ldr	r3, [sp, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	db3d      	blt.n	8017ca0 <_dtoa_r+0x248>
 8017c24:	9b05      	ldr	r3, [sp, #20]
 8017c26:	9a00      	ldr	r2, [sp, #0]
 8017c28:	920a      	str	r2, [sp, #40]	; 0x28
 8017c2a:	4413      	add	r3, r2
 8017c2c:	9305      	str	r3, [sp, #20]
 8017c2e:	2300      	movs	r3, #0
 8017c30:	9307      	str	r3, [sp, #28]
 8017c32:	9b06      	ldr	r3, [sp, #24]
 8017c34:	2b09      	cmp	r3, #9
 8017c36:	f200 8089 	bhi.w	8017d4c <_dtoa_r+0x2f4>
 8017c3a:	2b05      	cmp	r3, #5
 8017c3c:	bfc4      	itt	gt
 8017c3e:	3b04      	subgt	r3, #4
 8017c40:	9306      	strgt	r3, [sp, #24]
 8017c42:	9b06      	ldr	r3, [sp, #24]
 8017c44:	f1a3 0302 	sub.w	r3, r3, #2
 8017c48:	bfcc      	ite	gt
 8017c4a:	2500      	movgt	r5, #0
 8017c4c:	2501      	movle	r5, #1
 8017c4e:	2b03      	cmp	r3, #3
 8017c50:	f200 8087 	bhi.w	8017d62 <_dtoa_r+0x30a>
 8017c54:	e8df f003 	tbb	[pc, r3]
 8017c58:	59383a2d 	.word	0x59383a2d
 8017c5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017c60:	441d      	add	r5, r3
 8017c62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017c66:	2b20      	cmp	r3, #32
 8017c68:	bfc1      	itttt	gt
 8017c6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017c6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017c72:	fa0b f303 	lslgt.w	r3, fp, r3
 8017c76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017c7a:	bfda      	itte	le
 8017c7c:	f1c3 0320 	rsble	r3, r3, #32
 8017c80:	fa06 f003 	lslle.w	r0, r6, r3
 8017c84:	4318      	orrgt	r0, r3
 8017c86:	f7e8 fc65 	bl	8000554 <__aeabi_ui2d>
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	4606      	mov	r6, r0
 8017c8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017c92:	3d01      	subs	r5, #1
 8017c94:	930e      	str	r3, [sp, #56]	; 0x38
 8017c96:	e76a      	b.n	8017b6e <_dtoa_r+0x116>
 8017c98:	2301      	movs	r3, #1
 8017c9a:	e7b2      	b.n	8017c02 <_dtoa_r+0x1aa>
 8017c9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c9e:	e7b1      	b.n	8017c04 <_dtoa_r+0x1ac>
 8017ca0:	9b04      	ldr	r3, [sp, #16]
 8017ca2:	9a00      	ldr	r2, [sp, #0]
 8017ca4:	1a9b      	subs	r3, r3, r2
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	4253      	negs	r3, r2
 8017caa:	9307      	str	r3, [sp, #28]
 8017cac:	2300      	movs	r3, #0
 8017cae:	930a      	str	r3, [sp, #40]	; 0x28
 8017cb0:	e7bf      	b.n	8017c32 <_dtoa_r+0x1da>
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	9308      	str	r3, [sp, #32]
 8017cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	dc55      	bgt.n	8017d68 <_dtoa_r+0x310>
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017cc2:	461a      	mov	r2, r3
 8017cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8017cc6:	e00c      	b.n	8017ce2 <_dtoa_r+0x28a>
 8017cc8:	2301      	movs	r3, #1
 8017cca:	e7f3      	b.n	8017cb4 <_dtoa_r+0x25c>
 8017ccc:	2300      	movs	r3, #0
 8017cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cd0:	9308      	str	r3, [sp, #32]
 8017cd2:	9b00      	ldr	r3, [sp, #0]
 8017cd4:	4413      	add	r3, r2
 8017cd6:	9302      	str	r3, [sp, #8]
 8017cd8:	3301      	adds	r3, #1
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	9303      	str	r3, [sp, #12]
 8017cde:	bfb8      	it	lt
 8017ce0:	2301      	movlt	r3, #1
 8017ce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	6042      	str	r2, [r0, #4]
 8017ce8:	2204      	movs	r2, #4
 8017cea:	f102 0614 	add.w	r6, r2, #20
 8017cee:	429e      	cmp	r6, r3
 8017cf0:	6841      	ldr	r1, [r0, #4]
 8017cf2:	d93d      	bls.n	8017d70 <_dtoa_r+0x318>
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	f001 fa49 	bl	801918c <_Balloc>
 8017cfa:	9001      	str	r0, [sp, #4]
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	d13b      	bne.n	8017d78 <_dtoa_r+0x320>
 8017d00:	4b11      	ldr	r3, [pc, #68]	; (8017d48 <_dtoa_r+0x2f0>)
 8017d02:	4602      	mov	r2, r0
 8017d04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017d08:	e6c0      	b.n	8017a8c <_dtoa_r+0x34>
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e7df      	b.n	8017cce <_dtoa_r+0x276>
 8017d0e:	bf00      	nop
 8017d10:	636f4361 	.word	0x636f4361
 8017d14:	3fd287a7 	.word	0x3fd287a7
 8017d18:	8b60c8b3 	.word	0x8b60c8b3
 8017d1c:	3fc68a28 	.word	0x3fc68a28
 8017d20:	509f79fb 	.word	0x509f79fb
 8017d24:	3fd34413 	.word	0x3fd34413
 8017d28:	0801c36e 	.word	0x0801c36e
 8017d2c:	0801c385 	.word	0x0801c385
 8017d30:	7ff00000 	.word	0x7ff00000
 8017d34:	0801c36a 	.word	0x0801c36a
 8017d38:	0801c361 	.word	0x0801c361
 8017d3c:	0801c1e1 	.word	0x0801c1e1
 8017d40:	3ff80000 	.word	0x3ff80000
 8017d44:	0801c558 	.word	0x0801c558
 8017d48:	0801c3e0 	.word	0x0801c3e0
 8017d4c:	2501      	movs	r5, #1
 8017d4e:	2300      	movs	r3, #0
 8017d50:	9306      	str	r3, [sp, #24]
 8017d52:	9508      	str	r5, [sp, #32]
 8017d54:	f04f 33ff 	mov.w	r3, #4294967295
 8017d58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	2312      	movs	r3, #18
 8017d60:	e7b0      	b.n	8017cc4 <_dtoa_r+0x26c>
 8017d62:	2301      	movs	r3, #1
 8017d64:	9308      	str	r3, [sp, #32]
 8017d66:	e7f5      	b.n	8017d54 <_dtoa_r+0x2fc>
 8017d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d6e:	e7b8      	b.n	8017ce2 <_dtoa_r+0x28a>
 8017d70:	3101      	adds	r1, #1
 8017d72:	6041      	str	r1, [r0, #4]
 8017d74:	0052      	lsls	r2, r2, #1
 8017d76:	e7b8      	b.n	8017cea <_dtoa_r+0x292>
 8017d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d7a:	9a01      	ldr	r2, [sp, #4]
 8017d7c:	601a      	str	r2, [r3, #0]
 8017d7e:	9b03      	ldr	r3, [sp, #12]
 8017d80:	2b0e      	cmp	r3, #14
 8017d82:	f200 809d 	bhi.w	8017ec0 <_dtoa_r+0x468>
 8017d86:	2d00      	cmp	r5, #0
 8017d88:	f000 809a 	beq.w	8017ec0 <_dtoa_r+0x468>
 8017d8c:	9b00      	ldr	r3, [sp, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	dd32      	ble.n	8017df8 <_dtoa_r+0x3a0>
 8017d92:	4ab7      	ldr	r2, [pc, #732]	; (8018070 <_dtoa_r+0x618>)
 8017d94:	f003 030f 	and.w	r3, r3, #15
 8017d98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017da0:	9b00      	ldr	r3, [sp, #0]
 8017da2:	05d8      	lsls	r0, r3, #23
 8017da4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017da8:	d516      	bpl.n	8017dd8 <_dtoa_r+0x380>
 8017daa:	4bb2      	ldr	r3, [pc, #712]	; (8018074 <_dtoa_r+0x61c>)
 8017dac:	ec51 0b19 	vmov	r0, r1, d9
 8017db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017db4:	f7e8 fd72 	bl	800089c <__aeabi_ddiv>
 8017db8:	f007 070f 	and.w	r7, r7, #15
 8017dbc:	4682      	mov	sl, r0
 8017dbe:	468b      	mov	fp, r1
 8017dc0:	2503      	movs	r5, #3
 8017dc2:	4eac      	ldr	r6, [pc, #688]	; (8018074 <_dtoa_r+0x61c>)
 8017dc4:	b957      	cbnz	r7, 8017ddc <_dtoa_r+0x384>
 8017dc6:	4642      	mov	r2, r8
 8017dc8:	464b      	mov	r3, r9
 8017dca:	4650      	mov	r0, sl
 8017dcc:	4659      	mov	r1, fp
 8017dce:	f7e8 fd65 	bl	800089c <__aeabi_ddiv>
 8017dd2:	4682      	mov	sl, r0
 8017dd4:	468b      	mov	fp, r1
 8017dd6:	e028      	b.n	8017e2a <_dtoa_r+0x3d2>
 8017dd8:	2502      	movs	r5, #2
 8017dda:	e7f2      	b.n	8017dc2 <_dtoa_r+0x36a>
 8017ddc:	07f9      	lsls	r1, r7, #31
 8017dde:	d508      	bpl.n	8017df2 <_dtoa_r+0x39a>
 8017de0:	4640      	mov	r0, r8
 8017de2:	4649      	mov	r1, r9
 8017de4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017de8:	f7e8 fc2e 	bl	8000648 <__aeabi_dmul>
 8017dec:	3501      	adds	r5, #1
 8017dee:	4680      	mov	r8, r0
 8017df0:	4689      	mov	r9, r1
 8017df2:	107f      	asrs	r7, r7, #1
 8017df4:	3608      	adds	r6, #8
 8017df6:	e7e5      	b.n	8017dc4 <_dtoa_r+0x36c>
 8017df8:	f000 809b 	beq.w	8017f32 <_dtoa_r+0x4da>
 8017dfc:	9b00      	ldr	r3, [sp, #0]
 8017dfe:	4f9d      	ldr	r7, [pc, #628]	; (8018074 <_dtoa_r+0x61c>)
 8017e00:	425e      	negs	r6, r3
 8017e02:	4b9b      	ldr	r3, [pc, #620]	; (8018070 <_dtoa_r+0x618>)
 8017e04:	f006 020f 	and.w	r2, r6, #15
 8017e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e10:	ec51 0b19 	vmov	r0, r1, d9
 8017e14:	f7e8 fc18 	bl	8000648 <__aeabi_dmul>
 8017e18:	1136      	asrs	r6, r6, #4
 8017e1a:	4682      	mov	sl, r0
 8017e1c:	468b      	mov	fp, r1
 8017e1e:	2300      	movs	r3, #0
 8017e20:	2502      	movs	r5, #2
 8017e22:	2e00      	cmp	r6, #0
 8017e24:	d17a      	bne.n	8017f1c <_dtoa_r+0x4c4>
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d1d3      	bne.n	8017dd2 <_dtoa_r+0x37a>
 8017e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 8082 	beq.w	8017f36 <_dtoa_r+0x4de>
 8017e32:	4b91      	ldr	r3, [pc, #580]	; (8018078 <_dtoa_r+0x620>)
 8017e34:	2200      	movs	r2, #0
 8017e36:	4650      	mov	r0, sl
 8017e38:	4659      	mov	r1, fp
 8017e3a:	f7e8 fe77 	bl	8000b2c <__aeabi_dcmplt>
 8017e3e:	2800      	cmp	r0, #0
 8017e40:	d079      	beq.n	8017f36 <_dtoa_r+0x4de>
 8017e42:	9b03      	ldr	r3, [sp, #12]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d076      	beq.n	8017f36 <_dtoa_r+0x4de>
 8017e48:	9b02      	ldr	r3, [sp, #8]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	dd36      	ble.n	8017ebc <_dtoa_r+0x464>
 8017e4e:	9b00      	ldr	r3, [sp, #0]
 8017e50:	4650      	mov	r0, sl
 8017e52:	4659      	mov	r1, fp
 8017e54:	1e5f      	subs	r7, r3, #1
 8017e56:	2200      	movs	r2, #0
 8017e58:	4b88      	ldr	r3, [pc, #544]	; (801807c <_dtoa_r+0x624>)
 8017e5a:	f7e8 fbf5 	bl	8000648 <__aeabi_dmul>
 8017e5e:	9e02      	ldr	r6, [sp, #8]
 8017e60:	4682      	mov	sl, r0
 8017e62:	468b      	mov	fp, r1
 8017e64:	3501      	adds	r5, #1
 8017e66:	4628      	mov	r0, r5
 8017e68:	f7e8 fb84 	bl	8000574 <__aeabi_i2d>
 8017e6c:	4652      	mov	r2, sl
 8017e6e:	465b      	mov	r3, fp
 8017e70:	f7e8 fbea 	bl	8000648 <__aeabi_dmul>
 8017e74:	4b82      	ldr	r3, [pc, #520]	; (8018080 <_dtoa_r+0x628>)
 8017e76:	2200      	movs	r2, #0
 8017e78:	f7e8 fa30 	bl	80002dc <__adddf3>
 8017e7c:	46d0      	mov	r8, sl
 8017e7e:	46d9      	mov	r9, fp
 8017e80:	4682      	mov	sl, r0
 8017e82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017e86:	2e00      	cmp	r6, #0
 8017e88:	d158      	bne.n	8017f3c <_dtoa_r+0x4e4>
 8017e8a:	4b7e      	ldr	r3, [pc, #504]	; (8018084 <_dtoa_r+0x62c>)
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	4640      	mov	r0, r8
 8017e90:	4649      	mov	r1, r9
 8017e92:	f7e8 fa21 	bl	80002d8 <__aeabi_dsub>
 8017e96:	4652      	mov	r2, sl
 8017e98:	465b      	mov	r3, fp
 8017e9a:	4680      	mov	r8, r0
 8017e9c:	4689      	mov	r9, r1
 8017e9e:	f7e8 fe63 	bl	8000b68 <__aeabi_dcmpgt>
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	f040 8295 	bne.w	80183d2 <_dtoa_r+0x97a>
 8017ea8:	4652      	mov	r2, sl
 8017eaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017eae:	4640      	mov	r0, r8
 8017eb0:	4649      	mov	r1, r9
 8017eb2:	f7e8 fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	f040 8289 	bne.w	80183ce <_dtoa_r+0x976>
 8017ebc:	ec5b ab19 	vmov	sl, fp, d9
 8017ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	f2c0 8148 	blt.w	8018158 <_dtoa_r+0x700>
 8017ec8:	9a00      	ldr	r2, [sp, #0]
 8017eca:	2a0e      	cmp	r2, #14
 8017ecc:	f300 8144 	bgt.w	8018158 <_dtoa_r+0x700>
 8017ed0:	4b67      	ldr	r3, [pc, #412]	; (8018070 <_dtoa_r+0x618>)
 8017ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ed6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	f280 80d5 	bge.w	801808c <_dtoa_r+0x634>
 8017ee2:	9b03      	ldr	r3, [sp, #12]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f300 80d1 	bgt.w	801808c <_dtoa_r+0x634>
 8017eea:	f040 826f 	bne.w	80183cc <_dtoa_r+0x974>
 8017eee:	4b65      	ldr	r3, [pc, #404]	; (8018084 <_dtoa_r+0x62c>)
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	4640      	mov	r0, r8
 8017ef4:	4649      	mov	r1, r9
 8017ef6:	f7e8 fba7 	bl	8000648 <__aeabi_dmul>
 8017efa:	4652      	mov	r2, sl
 8017efc:	465b      	mov	r3, fp
 8017efe:	f7e8 fe29 	bl	8000b54 <__aeabi_dcmpge>
 8017f02:	9e03      	ldr	r6, [sp, #12]
 8017f04:	4637      	mov	r7, r6
 8017f06:	2800      	cmp	r0, #0
 8017f08:	f040 8245 	bne.w	8018396 <_dtoa_r+0x93e>
 8017f0c:	9d01      	ldr	r5, [sp, #4]
 8017f0e:	2331      	movs	r3, #49	; 0x31
 8017f10:	f805 3b01 	strb.w	r3, [r5], #1
 8017f14:	9b00      	ldr	r3, [sp, #0]
 8017f16:	3301      	adds	r3, #1
 8017f18:	9300      	str	r3, [sp, #0]
 8017f1a:	e240      	b.n	801839e <_dtoa_r+0x946>
 8017f1c:	07f2      	lsls	r2, r6, #31
 8017f1e:	d505      	bpl.n	8017f2c <_dtoa_r+0x4d4>
 8017f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f24:	f7e8 fb90 	bl	8000648 <__aeabi_dmul>
 8017f28:	3501      	adds	r5, #1
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	1076      	asrs	r6, r6, #1
 8017f2e:	3708      	adds	r7, #8
 8017f30:	e777      	b.n	8017e22 <_dtoa_r+0x3ca>
 8017f32:	2502      	movs	r5, #2
 8017f34:	e779      	b.n	8017e2a <_dtoa_r+0x3d2>
 8017f36:	9f00      	ldr	r7, [sp, #0]
 8017f38:	9e03      	ldr	r6, [sp, #12]
 8017f3a:	e794      	b.n	8017e66 <_dtoa_r+0x40e>
 8017f3c:	9901      	ldr	r1, [sp, #4]
 8017f3e:	4b4c      	ldr	r3, [pc, #304]	; (8018070 <_dtoa_r+0x618>)
 8017f40:	4431      	add	r1, r6
 8017f42:	910d      	str	r1, [sp, #52]	; 0x34
 8017f44:	9908      	ldr	r1, [sp, #32]
 8017f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017f4e:	2900      	cmp	r1, #0
 8017f50:	d043      	beq.n	8017fda <_dtoa_r+0x582>
 8017f52:	494d      	ldr	r1, [pc, #308]	; (8018088 <_dtoa_r+0x630>)
 8017f54:	2000      	movs	r0, #0
 8017f56:	f7e8 fca1 	bl	800089c <__aeabi_ddiv>
 8017f5a:	4652      	mov	r2, sl
 8017f5c:	465b      	mov	r3, fp
 8017f5e:	f7e8 f9bb 	bl	80002d8 <__aeabi_dsub>
 8017f62:	9d01      	ldr	r5, [sp, #4]
 8017f64:	4682      	mov	sl, r0
 8017f66:	468b      	mov	fp, r1
 8017f68:	4649      	mov	r1, r9
 8017f6a:	4640      	mov	r0, r8
 8017f6c:	f7e8 fe1c 	bl	8000ba8 <__aeabi_d2iz>
 8017f70:	4606      	mov	r6, r0
 8017f72:	f7e8 faff 	bl	8000574 <__aeabi_i2d>
 8017f76:	4602      	mov	r2, r0
 8017f78:	460b      	mov	r3, r1
 8017f7a:	4640      	mov	r0, r8
 8017f7c:	4649      	mov	r1, r9
 8017f7e:	f7e8 f9ab 	bl	80002d8 <__aeabi_dsub>
 8017f82:	3630      	adds	r6, #48	; 0x30
 8017f84:	f805 6b01 	strb.w	r6, [r5], #1
 8017f88:	4652      	mov	r2, sl
 8017f8a:	465b      	mov	r3, fp
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	4689      	mov	r9, r1
 8017f90:	f7e8 fdcc 	bl	8000b2c <__aeabi_dcmplt>
 8017f94:	2800      	cmp	r0, #0
 8017f96:	d163      	bne.n	8018060 <_dtoa_r+0x608>
 8017f98:	4642      	mov	r2, r8
 8017f9a:	464b      	mov	r3, r9
 8017f9c:	4936      	ldr	r1, [pc, #216]	; (8018078 <_dtoa_r+0x620>)
 8017f9e:	2000      	movs	r0, #0
 8017fa0:	f7e8 f99a 	bl	80002d8 <__aeabi_dsub>
 8017fa4:	4652      	mov	r2, sl
 8017fa6:	465b      	mov	r3, fp
 8017fa8:	f7e8 fdc0 	bl	8000b2c <__aeabi_dcmplt>
 8017fac:	2800      	cmp	r0, #0
 8017fae:	f040 80b5 	bne.w	801811c <_dtoa_r+0x6c4>
 8017fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fb4:	429d      	cmp	r5, r3
 8017fb6:	d081      	beq.n	8017ebc <_dtoa_r+0x464>
 8017fb8:	4b30      	ldr	r3, [pc, #192]	; (801807c <_dtoa_r+0x624>)
 8017fba:	2200      	movs	r2, #0
 8017fbc:	4650      	mov	r0, sl
 8017fbe:	4659      	mov	r1, fp
 8017fc0:	f7e8 fb42 	bl	8000648 <__aeabi_dmul>
 8017fc4:	4b2d      	ldr	r3, [pc, #180]	; (801807c <_dtoa_r+0x624>)
 8017fc6:	4682      	mov	sl, r0
 8017fc8:	468b      	mov	fp, r1
 8017fca:	4640      	mov	r0, r8
 8017fcc:	4649      	mov	r1, r9
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f7e8 fb3a 	bl	8000648 <__aeabi_dmul>
 8017fd4:	4680      	mov	r8, r0
 8017fd6:	4689      	mov	r9, r1
 8017fd8:	e7c6      	b.n	8017f68 <_dtoa_r+0x510>
 8017fda:	4650      	mov	r0, sl
 8017fdc:	4659      	mov	r1, fp
 8017fde:	f7e8 fb33 	bl	8000648 <__aeabi_dmul>
 8017fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fe4:	9d01      	ldr	r5, [sp, #4]
 8017fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8017fe8:	4682      	mov	sl, r0
 8017fea:	468b      	mov	fp, r1
 8017fec:	4649      	mov	r1, r9
 8017fee:	4640      	mov	r0, r8
 8017ff0:	f7e8 fdda 	bl	8000ba8 <__aeabi_d2iz>
 8017ff4:	4606      	mov	r6, r0
 8017ff6:	f7e8 fabd 	bl	8000574 <__aeabi_i2d>
 8017ffa:	3630      	adds	r6, #48	; 0x30
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	460b      	mov	r3, r1
 8018000:	4640      	mov	r0, r8
 8018002:	4649      	mov	r1, r9
 8018004:	f7e8 f968 	bl	80002d8 <__aeabi_dsub>
 8018008:	f805 6b01 	strb.w	r6, [r5], #1
 801800c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801800e:	429d      	cmp	r5, r3
 8018010:	4680      	mov	r8, r0
 8018012:	4689      	mov	r9, r1
 8018014:	f04f 0200 	mov.w	r2, #0
 8018018:	d124      	bne.n	8018064 <_dtoa_r+0x60c>
 801801a:	4b1b      	ldr	r3, [pc, #108]	; (8018088 <_dtoa_r+0x630>)
 801801c:	4650      	mov	r0, sl
 801801e:	4659      	mov	r1, fp
 8018020:	f7e8 f95c 	bl	80002dc <__adddf3>
 8018024:	4602      	mov	r2, r0
 8018026:	460b      	mov	r3, r1
 8018028:	4640      	mov	r0, r8
 801802a:	4649      	mov	r1, r9
 801802c:	f7e8 fd9c 	bl	8000b68 <__aeabi_dcmpgt>
 8018030:	2800      	cmp	r0, #0
 8018032:	d173      	bne.n	801811c <_dtoa_r+0x6c4>
 8018034:	4652      	mov	r2, sl
 8018036:	465b      	mov	r3, fp
 8018038:	4913      	ldr	r1, [pc, #76]	; (8018088 <_dtoa_r+0x630>)
 801803a:	2000      	movs	r0, #0
 801803c:	f7e8 f94c 	bl	80002d8 <__aeabi_dsub>
 8018040:	4602      	mov	r2, r0
 8018042:	460b      	mov	r3, r1
 8018044:	4640      	mov	r0, r8
 8018046:	4649      	mov	r1, r9
 8018048:	f7e8 fd70 	bl	8000b2c <__aeabi_dcmplt>
 801804c:	2800      	cmp	r0, #0
 801804e:	f43f af35 	beq.w	8017ebc <_dtoa_r+0x464>
 8018052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018054:	1e6b      	subs	r3, r5, #1
 8018056:	930f      	str	r3, [sp, #60]	; 0x3c
 8018058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801805c:	2b30      	cmp	r3, #48	; 0x30
 801805e:	d0f8      	beq.n	8018052 <_dtoa_r+0x5fa>
 8018060:	9700      	str	r7, [sp, #0]
 8018062:	e049      	b.n	80180f8 <_dtoa_r+0x6a0>
 8018064:	4b05      	ldr	r3, [pc, #20]	; (801807c <_dtoa_r+0x624>)
 8018066:	f7e8 faef 	bl	8000648 <__aeabi_dmul>
 801806a:	4680      	mov	r8, r0
 801806c:	4689      	mov	r9, r1
 801806e:	e7bd      	b.n	8017fec <_dtoa_r+0x594>
 8018070:	0801c558 	.word	0x0801c558
 8018074:	0801c530 	.word	0x0801c530
 8018078:	3ff00000 	.word	0x3ff00000
 801807c:	40240000 	.word	0x40240000
 8018080:	401c0000 	.word	0x401c0000
 8018084:	40140000 	.word	0x40140000
 8018088:	3fe00000 	.word	0x3fe00000
 801808c:	9d01      	ldr	r5, [sp, #4]
 801808e:	4656      	mov	r6, sl
 8018090:	465f      	mov	r7, fp
 8018092:	4642      	mov	r2, r8
 8018094:	464b      	mov	r3, r9
 8018096:	4630      	mov	r0, r6
 8018098:	4639      	mov	r1, r7
 801809a:	f7e8 fbff 	bl	800089c <__aeabi_ddiv>
 801809e:	f7e8 fd83 	bl	8000ba8 <__aeabi_d2iz>
 80180a2:	4682      	mov	sl, r0
 80180a4:	f7e8 fa66 	bl	8000574 <__aeabi_i2d>
 80180a8:	4642      	mov	r2, r8
 80180aa:	464b      	mov	r3, r9
 80180ac:	f7e8 facc 	bl	8000648 <__aeabi_dmul>
 80180b0:	4602      	mov	r2, r0
 80180b2:	460b      	mov	r3, r1
 80180b4:	4630      	mov	r0, r6
 80180b6:	4639      	mov	r1, r7
 80180b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80180bc:	f7e8 f90c 	bl	80002d8 <__aeabi_dsub>
 80180c0:	f805 6b01 	strb.w	r6, [r5], #1
 80180c4:	9e01      	ldr	r6, [sp, #4]
 80180c6:	9f03      	ldr	r7, [sp, #12]
 80180c8:	1bae      	subs	r6, r5, r6
 80180ca:	42b7      	cmp	r7, r6
 80180cc:	4602      	mov	r2, r0
 80180ce:	460b      	mov	r3, r1
 80180d0:	d135      	bne.n	801813e <_dtoa_r+0x6e6>
 80180d2:	f7e8 f903 	bl	80002dc <__adddf3>
 80180d6:	4642      	mov	r2, r8
 80180d8:	464b      	mov	r3, r9
 80180da:	4606      	mov	r6, r0
 80180dc:	460f      	mov	r7, r1
 80180de:	f7e8 fd43 	bl	8000b68 <__aeabi_dcmpgt>
 80180e2:	b9d0      	cbnz	r0, 801811a <_dtoa_r+0x6c2>
 80180e4:	4642      	mov	r2, r8
 80180e6:	464b      	mov	r3, r9
 80180e8:	4630      	mov	r0, r6
 80180ea:	4639      	mov	r1, r7
 80180ec:	f7e8 fd14 	bl	8000b18 <__aeabi_dcmpeq>
 80180f0:	b110      	cbz	r0, 80180f8 <_dtoa_r+0x6a0>
 80180f2:	f01a 0f01 	tst.w	sl, #1
 80180f6:	d110      	bne.n	801811a <_dtoa_r+0x6c2>
 80180f8:	4620      	mov	r0, r4
 80180fa:	ee18 1a10 	vmov	r1, s16
 80180fe:	f001 f885 	bl	801920c <_Bfree>
 8018102:	2300      	movs	r3, #0
 8018104:	9800      	ldr	r0, [sp, #0]
 8018106:	702b      	strb	r3, [r5, #0]
 8018108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801810a:	3001      	adds	r0, #1
 801810c:	6018      	str	r0, [r3, #0]
 801810e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018110:	2b00      	cmp	r3, #0
 8018112:	f43f acf1 	beq.w	8017af8 <_dtoa_r+0xa0>
 8018116:	601d      	str	r5, [r3, #0]
 8018118:	e4ee      	b.n	8017af8 <_dtoa_r+0xa0>
 801811a:	9f00      	ldr	r7, [sp, #0]
 801811c:	462b      	mov	r3, r5
 801811e:	461d      	mov	r5, r3
 8018120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018124:	2a39      	cmp	r2, #57	; 0x39
 8018126:	d106      	bne.n	8018136 <_dtoa_r+0x6de>
 8018128:	9a01      	ldr	r2, [sp, #4]
 801812a:	429a      	cmp	r2, r3
 801812c:	d1f7      	bne.n	801811e <_dtoa_r+0x6c6>
 801812e:	9901      	ldr	r1, [sp, #4]
 8018130:	2230      	movs	r2, #48	; 0x30
 8018132:	3701      	adds	r7, #1
 8018134:	700a      	strb	r2, [r1, #0]
 8018136:	781a      	ldrb	r2, [r3, #0]
 8018138:	3201      	adds	r2, #1
 801813a:	701a      	strb	r2, [r3, #0]
 801813c:	e790      	b.n	8018060 <_dtoa_r+0x608>
 801813e:	4ba6      	ldr	r3, [pc, #664]	; (80183d8 <_dtoa_r+0x980>)
 8018140:	2200      	movs	r2, #0
 8018142:	f7e8 fa81 	bl	8000648 <__aeabi_dmul>
 8018146:	2200      	movs	r2, #0
 8018148:	2300      	movs	r3, #0
 801814a:	4606      	mov	r6, r0
 801814c:	460f      	mov	r7, r1
 801814e:	f7e8 fce3 	bl	8000b18 <__aeabi_dcmpeq>
 8018152:	2800      	cmp	r0, #0
 8018154:	d09d      	beq.n	8018092 <_dtoa_r+0x63a>
 8018156:	e7cf      	b.n	80180f8 <_dtoa_r+0x6a0>
 8018158:	9a08      	ldr	r2, [sp, #32]
 801815a:	2a00      	cmp	r2, #0
 801815c:	f000 80d7 	beq.w	801830e <_dtoa_r+0x8b6>
 8018160:	9a06      	ldr	r2, [sp, #24]
 8018162:	2a01      	cmp	r2, #1
 8018164:	f300 80ba 	bgt.w	80182dc <_dtoa_r+0x884>
 8018168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801816a:	2a00      	cmp	r2, #0
 801816c:	f000 80b2 	beq.w	80182d4 <_dtoa_r+0x87c>
 8018170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018174:	9e07      	ldr	r6, [sp, #28]
 8018176:	9d04      	ldr	r5, [sp, #16]
 8018178:	9a04      	ldr	r2, [sp, #16]
 801817a:	441a      	add	r2, r3
 801817c:	9204      	str	r2, [sp, #16]
 801817e:	9a05      	ldr	r2, [sp, #20]
 8018180:	2101      	movs	r1, #1
 8018182:	441a      	add	r2, r3
 8018184:	4620      	mov	r0, r4
 8018186:	9205      	str	r2, [sp, #20]
 8018188:	f001 f942 	bl	8019410 <__i2b>
 801818c:	4607      	mov	r7, r0
 801818e:	2d00      	cmp	r5, #0
 8018190:	dd0c      	ble.n	80181ac <_dtoa_r+0x754>
 8018192:	9b05      	ldr	r3, [sp, #20]
 8018194:	2b00      	cmp	r3, #0
 8018196:	dd09      	ble.n	80181ac <_dtoa_r+0x754>
 8018198:	42ab      	cmp	r3, r5
 801819a:	9a04      	ldr	r2, [sp, #16]
 801819c:	bfa8      	it	ge
 801819e:	462b      	movge	r3, r5
 80181a0:	1ad2      	subs	r2, r2, r3
 80181a2:	9204      	str	r2, [sp, #16]
 80181a4:	9a05      	ldr	r2, [sp, #20]
 80181a6:	1aed      	subs	r5, r5, r3
 80181a8:	1ad3      	subs	r3, r2, r3
 80181aa:	9305      	str	r3, [sp, #20]
 80181ac:	9b07      	ldr	r3, [sp, #28]
 80181ae:	b31b      	cbz	r3, 80181f8 <_dtoa_r+0x7a0>
 80181b0:	9b08      	ldr	r3, [sp, #32]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	f000 80af 	beq.w	8018316 <_dtoa_r+0x8be>
 80181b8:	2e00      	cmp	r6, #0
 80181ba:	dd13      	ble.n	80181e4 <_dtoa_r+0x78c>
 80181bc:	4639      	mov	r1, r7
 80181be:	4632      	mov	r2, r6
 80181c0:	4620      	mov	r0, r4
 80181c2:	f001 f9e5 	bl	8019590 <__pow5mult>
 80181c6:	ee18 2a10 	vmov	r2, s16
 80181ca:	4601      	mov	r1, r0
 80181cc:	4607      	mov	r7, r0
 80181ce:	4620      	mov	r0, r4
 80181d0:	f001 f934 	bl	801943c <__multiply>
 80181d4:	ee18 1a10 	vmov	r1, s16
 80181d8:	4680      	mov	r8, r0
 80181da:	4620      	mov	r0, r4
 80181dc:	f001 f816 	bl	801920c <_Bfree>
 80181e0:	ee08 8a10 	vmov	s16, r8
 80181e4:	9b07      	ldr	r3, [sp, #28]
 80181e6:	1b9a      	subs	r2, r3, r6
 80181e8:	d006      	beq.n	80181f8 <_dtoa_r+0x7a0>
 80181ea:	ee18 1a10 	vmov	r1, s16
 80181ee:	4620      	mov	r0, r4
 80181f0:	f001 f9ce 	bl	8019590 <__pow5mult>
 80181f4:	ee08 0a10 	vmov	s16, r0
 80181f8:	2101      	movs	r1, #1
 80181fa:	4620      	mov	r0, r4
 80181fc:	f001 f908 	bl	8019410 <__i2b>
 8018200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018202:	2b00      	cmp	r3, #0
 8018204:	4606      	mov	r6, r0
 8018206:	f340 8088 	ble.w	801831a <_dtoa_r+0x8c2>
 801820a:	461a      	mov	r2, r3
 801820c:	4601      	mov	r1, r0
 801820e:	4620      	mov	r0, r4
 8018210:	f001 f9be 	bl	8019590 <__pow5mult>
 8018214:	9b06      	ldr	r3, [sp, #24]
 8018216:	2b01      	cmp	r3, #1
 8018218:	4606      	mov	r6, r0
 801821a:	f340 8081 	ble.w	8018320 <_dtoa_r+0x8c8>
 801821e:	f04f 0800 	mov.w	r8, #0
 8018222:	6933      	ldr	r3, [r6, #16]
 8018224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018228:	6918      	ldr	r0, [r3, #16]
 801822a:	f001 f8a1 	bl	8019370 <__hi0bits>
 801822e:	f1c0 0020 	rsb	r0, r0, #32
 8018232:	9b05      	ldr	r3, [sp, #20]
 8018234:	4418      	add	r0, r3
 8018236:	f010 001f 	ands.w	r0, r0, #31
 801823a:	f000 8092 	beq.w	8018362 <_dtoa_r+0x90a>
 801823e:	f1c0 0320 	rsb	r3, r0, #32
 8018242:	2b04      	cmp	r3, #4
 8018244:	f340 808a 	ble.w	801835c <_dtoa_r+0x904>
 8018248:	f1c0 001c 	rsb	r0, r0, #28
 801824c:	9b04      	ldr	r3, [sp, #16]
 801824e:	4403      	add	r3, r0
 8018250:	9304      	str	r3, [sp, #16]
 8018252:	9b05      	ldr	r3, [sp, #20]
 8018254:	4403      	add	r3, r0
 8018256:	4405      	add	r5, r0
 8018258:	9305      	str	r3, [sp, #20]
 801825a:	9b04      	ldr	r3, [sp, #16]
 801825c:	2b00      	cmp	r3, #0
 801825e:	dd07      	ble.n	8018270 <_dtoa_r+0x818>
 8018260:	ee18 1a10 	vmov	r1, s16
 8018264:	461a      	mov	r2, r3
 8018266:	4620      	mov	r0, r4
 8018268:	f001 f9ec 	bl	8019644 <__lshift>
 801826c:	ee08 0a10 	vmov	s16, r0
 8018270:	9b05      	ldr	r3, [sp, #20]
 8018272:	2b00      	cmp	r3, #0
 8018274:	dd05      	ble.n	8018282 <_dtoa_r+0x82a>
 8018276:	4631      	mov	r1, r6
 8018278:	461a      	mov	r2, r3
 801827a:	4620      	mov	r0, r4
 801827c:	f001 f9e2 	bl	8019644 <__lshift>
 8018280:	4606      	mov	r6, r0
 8018282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018284:	2b00      	cmp	r3, #0
 8018286:	d06e      	beq.n	8018366 <_dtoa_r+0x90e>
 8018288:	ee18 0a10 	vmov	r0, s16
 801828c:	4631      	mov	r1, r6
 801828e:	f001 fa49 	bl	8019724 <__mcmp>
 8018292:	2800      	cmp	r0, #0
 8018294:	da67      	bge.n	8018366 <_dtoa_r+0x90e>
 8018296:	9b00      	ldr	r3, [sp, #0]
 8018298:	3b01      	subs	r3, #1
 801829a:	ee18 1a10 	vmov	r1, s16
 801829e:	9300      	str	r3, [sp, #0]
 80182a0:	220a      	movs	r2, #10
 80182a2:	2300      	movs	r3, #0
 80182a4:	4620      	mov	r0, r4
 80182a6:	f000 ffd3 	bl	8019250 <__multadd>
 80182aa:	9b08      	ldr	r3, [sp, #32]
 80182ac:	ee08 0a10 	vmov	s16, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	f000 81b1 	beq.w	8018618 <_dtoa_r+0xbc0>
 80182b6:	2300      	movs	r3, #0
 80182b8:	4639      	mov	r1, r7
 80182ba:	220a      	movs	r2, #10
 80182bc:	4620      	mov	r0, r4
 80182be:	f000 ffc7 	bl	8019250 <__multadd>
 80182c2:	9b02      	ldr	r3, [sp, #8]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	4607      	mov	r7, r0
 80182c8:	f300 808e 	bgt.w	80183e8 <_dtoa_r+0x990>
 80182cc:	9b06      	ldr	r3, [sp, #24]
 80182ce:	2b02      	cmp	r3, #2
 80182d0:	dc51      	bgt.n	8018376 <_dtoa_r+0x91e>
 80182d2:	e089      	b.n	80183e8 <_dtoa_r+0x990>
 80182d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80182da:	e74b      	b.n	8018174 <_dtoa_r+0x71c>
 80182dc:	9b03      	ldr	r3, [sp, #12]
 80182de:	1e5e      	subs	r6, r3, #1
 80182e0:	9b07      	ldr	r3, [sp, #28]
 80182e2:	42b3      	cmp	r3, r6
 80182e4:	bfbf      	itttt	lt
 80182e6:	9b07      	ldrlt	r3, [sp, #28]
 80182e8:	9607      	strlt	r6, [sp, #28]
 80182ea:	1af2      	sublt	r2, r6, r3
 80182ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80182ee:	bfb6      	itet	lt
 80182f0:	189b      	addlt	r3, r3, r2
 80182f2:	1b9e      	subge	r6, r3, r6
 80182f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80182f6:	9b03      	ldr	r3, [sp, #12]
 80182f8:	bfb8      	it	lt
 80182fa:	2600      	movlt	r6, #0
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	bfb7      	itett	lt
 8018300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8018304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8018308:	1a9d      	sublt	r5, r3, r2
 801830a:	2300      	movlt	r3, #0
 801830c:	e734      	b.n	8018178 <_dtoa_r+0x720>
 801830e:	9e07      	ldr	r6, [sp, #28]
 8018310:	9d04      	ldr	r5, [sp, #16]
 8018312:	9f08      	ldr	r7, [sp, #32]
 8018314:	e73b      	b.n	801818e <_dtoa_r+0x736>
 8018316:	9a07      	ldr	r2, [sp, #28]
 8018318:	e767      	b.n	80181ea <_dtoa_r+0x792>
 801831a:	9b06      	ldr	r3, [sp, #24]
 801831c:	2b01      	cmp	r3, #1
 801831e:	dc18      	bgt.n	8018352 <_dtoa_r+0x8fa>
 8018320:	f1ba 0f00 	cmp.w	sl, #0
 8018324:	d115      	bne.n	8018352 <_dtoa_r+0x8fa>
 8018326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801832a:	b993      	cbnz	r3, 8018352 <_dtoa_r+0x8fa>
 801832c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018330:	0d1b      	lsrs	r3, r3, #20
 8018332:	051b      	lsls	r3, r3, #20
 8018334:	b183      	cbz	r3, 8018358 <_dtoa_r+0x900>
 8018336:	9b04      	ldr	r3, [sp, #16]
 8018338:	3301      	adds	r3, #1
 801833a:	9304      	str	r3, [sp, #16]
 801833c:	9b05      	ldr	r3, [sp, #20]
 801833e:	3301      	adds	r3, #1
 8018340:	9305      	str	r3, [sp, #20]
 8018342:	f04f 0801 	mov.w	r8, #1
 8018346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018348:	2b00      	cmp	r3, #0
 801834a:	f47f af6a 	bne.w	8018222 <_dtoa_r+0x7ca>
 801834e:	2001      	movs	r0, #1
 8018350:	e76f      	b.n	8018232 <_dtoa_r+0x7da>
 8018352:	f04f 0800 	mov.w	r8, #0
 8018356:	e7f6      	b.n	8018346 <_dtoa_r+0x8ee>
 8018358:	4698      	mov	r8, r3
 801835a:	e7f4      	b.n	8018346 <_dtoa_r+0x8ee>
 801835c:	f43f af7d 	beq.w	801825a <_dtoa_r+0x802>
 8018360:	4618      	mov	r0, r3
 8018362:	301c      	adds	r0, #28
 8018364:	e772      	b.n	801824c <_dtoa_r+0x7f4>
 8018366:	9b03      	ldr	r3, [sp, #12]
 8018368:	2b00      	cmp	r3, #0
 801836a:	dc37      	bgt.n	80183dc <_dtoa_r+0x984>
 801836c:	9b06      	ldr	r3, [sp, #24]
 801836e:	2b02      	cmp	r3, #2
 8018370:	dd34      	ble.n	80183dc <_dtoa_r+0x984>
 8018372:	9b03      	ldr	r3, [sp, #12]
 8018374:	9302      	str	r3, [sp, #8]
 8018376:	9b02      	ldr	r3, [sp, #8]
 8018378:	b96b      	cbnz	r3, 8018396 <_dtoa_r+0x93e>
 801837a:	4631      	mov	r1, r6
 801837c:	2205      	movs	r2, #5
 801837e:	4620      	mov	r0, r4
 8018380:	f000 ff66 	bl	8019250 <__multadd>
 8018384:	4601      	mov	r1, r0
 8018386:	4606      	mov	r6, r0
 8018388:	ee18 0a10 	vmov	r0, s16
 801838c:	f001 f9ca 	bl	8019724 <__mcmp>
 8018390:	2800      	cmp	r0, #0
 8018392:	f73f adbb 	bgt.w	8017f0c <_dtoa_r+0x4b4>
 8018396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018398:	9d01      	ldr	r5, [sp, #4]
 801839a:	43db      	mvns	r3, r3
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	f04f 0800 	mov.w	r8, #0
 80183a2:	4631      	mov	r1, r6
 80183a4:	4620      	mov	r0, r4
 80183a6:	f000 ff31 	bl	801920c <_Bfree>
 80183aa:	2f00      	cmp	r7, #0
 80183ac:	f43f aea4 	beq.w	80180f8 <_dtoa_r+0x6a0>
 80183b0:	f1b8 0f00 	cmp.w	r8, #0
 80183b4:	d005      	beq.n	80183c2 <_dtoa_r+0x96a>
 80183b6:	45b8      	cmp	r8, r7
 80183b8:	d003      	beq.n	80183c2 <_dtoa_r+0x96a>
 80183ba:	4641      	mov	r1, r8
 80183bc:	4620      	mov	r0, r4
 80183be:	f000 ff25 	bl	801920c <_Bfree>
 80183c2:	4639      	mov	r1, r7
 80183c4:	4620      	mov	r0, r4
 80183c6:	f000 ff21 	bl	801920c <_Bfree>
 80183ca:	e695      	b.n	80180f8 <_dtoa_r+0x6a0>
 80183cc:	2600      	movs	r6, #0
 80183ce:	4637      	mov	r7, r6
 80183d0:	e7e1      	b.n	8018396 <_dtoa_r+0x93e>
 80183d2:	9700      	str	r7, [sp, #0]
 80183d4:	4637      	mov	r7, r6
 80183d6:	e599      	b.n	8017f0c <_dtoa_r+0x4b4>
 80183d8:	40240000 	.word	0x40240000
 80183dc:	9b08      	ldr	r3, [sp, #32]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	f000 80ca 	beq.w	8018578 <_dtoa_r+0xb20>
 80183e4:	9b03      	ldr	r3, [sp, #12]
 80183e6:	9302      	str	r3, [sp, #8]
 80183e8:	2d00      	cmp	r5, #0
 80183ea:	dd05      	ble.n	80183f8 <_dtoa_r+0x9a0>
 80183ec:	4639      	mov	r1, r7
 80183ee:	462a      	mov	r2, r5
 80183f0:	4620      	mov	r0, r4
 80183f2:	f001 f927 	bl	8019644 <__lshift>
 80183f6:	4607      	mov	r7, r0
 80183f8:	f1b8 0f00 	cmp.w	r8, #0
 80183fc:	d05b      	beq.n	80184b6 <_dtoa_r+0xa5e>
 80183fe:	6879      	ldr	r1, [r7, #4]
 8018400:	4620      	mov	r0, r4
 8018402:	f000 fec3 	bl	801918c <_Balloc>
 8018406:	4605      	mov	r5, r0
 8018408:	b928      	cbnz	r0, 8018416 <_dtoa_r+0x9be>
 801840a:	4b87      	ldr	r3, [pc, #540]	; (8018628 <_dtoa_r+0xbd0>)
 801840c:	4602      	mov	r2, r0
 801840e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018412:	f7ff bb3b 	b.w	8017a8c <_dtoa_r+0x34>
 8018416:	693a      	ldr	r2, [r7, #16]
 8018418:	3202      	adds	r2, #2
 801841a:	0092      	lsls	r2, r2, #2
 801841c:	f107 010c 	add.w	r1, r7, #12
 8018420:	300c      	adds	r0, #12
 8018422:	f7fd faf7 	bl	8015a14 <memcpy>
 8018426:	2201      	movs	r2, #1
 8018428:	4629      	mov	r1, r5
 801842a:	4620      	mov	r0, r4
 801842c:	f001 f90a 	bl	8019644 <__lshift>
 8018430:	9b01      	ldr	r3, [sp, #4]
 8018432:	f103 0901 	add.w	r9, r3, #1
 8018436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801843a:	4413      	add	r3, r2
 801843c:	9305      	str	r3, [sp, #20]
 801843e:	f00a 0301 	and.w	r3, sl, #1
 8018442:	46b8      	mov	r8, r7
 8018444:	9304      	str	r3, [sp, #16]
 8018446:	4607      	mov	r7, r0
 8018448:	4631      	mov	r1, r6
 801844a:	ee18 0a10 	vmov	r0, s16
 801844e:	f7ff fa77 	bl	8017940 <quorem>
 8018452:	4641      	mov	r1, r8
 8018454:	9002      	str	r0, [sp, #8]
 8018456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801845a:	ee18 0a10 	vmov	r0, s16
 801845e:	f001 f961 	bl	8019724 <__mcmp>
 8018462:	463a      	mov	r2, r7
 8018464:	9003      	str	r0, [sp, #12]
 8018466:	4631      	mov	r1, r6
 8018468:	4620      	mov	r0, r4
 801846a:	f001 f977 	bl	801975c <__mdiff>
 801846e:	68c2      	ldr	r2, [r0, #12]
 8018470:	f109 3bff 	add.w	fp, r9, #4294967295
 8018474:	4605      	mov	r5, r0
 8018476:	bb02      	cbnz	r2, 80184ba <_dtoa_r+0xa62>
 8018478:	4601      	mov	r1, r0
 801847a:	ee18 0a10 	vmov	r0, s16
 801847e:	f001 f951 	bl	8019724 <__mcmp>
 8018482:	4602      	mov	r2, r0
 8018484:	4629      	mov	r1, r5
 8018486:	4620      	mov	r0, r4
 8018488:	9207      	str	r2, [sp, #28]
 801848a:	f000 febf 	bl	801920c <_Bfree>
 801848e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018492:	ea43 0102 	orr.w	r1, r3, r2
 8018496:	9b04      	ldr	r3, [sp, #16]
 8018498:	430b      	orrs	r3, r1
 801849a:	464d      	mov	r5, r9
 801849c:	d10f      	bne.n	80184be <_dtoa_r+0xa66>
 801849e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80184a2:	d02a      	beq.n	80184fa <_dtoa_r+0xaa2>
 80184a4:	9b03      	ldr	r3, [sp, #12]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	dd02      	ble.n	80184b0 <_dtoa_r+0xa58>
 80184aa:	9b02      	ldr	r3, [sp, #8]
 80184ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80184b0:	f88b a000 	strb.w	sl, [fp]
 80184b4:	e775      	b.n	80183a2 <_dtoa_r+0x94a>
 80184b6:	4638      	mov	r0, r7
 80184b8:	e7ba      	b.n	8018430 <_dtoa_r+0x9d8>
 80184ba:	2201      	movs	r2, #1
 80184bc:	e7e2      	b.n	8018484 <_dtoa_r+0xa2c>
 80184be:	9b03      	ldr	r3, [sp, #12]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	db04      	blt.n	80184ce <_dtoa_r+0xa76>
 80184c4:	9906      	ldr	r1, [sp, #24]
 80184c6:	430b      	orrs	r3, r1
 80184c8:	9904      	ldr	r1, [sp, #16]
 80184ca:	430b      	orrs	r3, r1
 80184cc:	d122      	bne.n	8018514 <_dtoa_r+0xabc>
 80184ce:	2a00      	cmp	r2, #0
 80184d0:	ddee      	ble.n	80184b0 <_dtoa_r+0xa58>
 80184d2:	ee18 1a10 	vmov	r1, s16
 80184d6:	2201      	movs	r2, #1
 80184d8:	4620      	mov	r0, r4
 80184da:	f001 f8b3 	bl	8019644 <__lshift>
 80184de:	4631      	mov	r1, r6
 80184e0:	ee08 0a10 	vmov	s16, r0
 80184e4:	f001 f91e 	bl	8019724 <__mcmp>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	dc03      	bgt.n	80184f4 <_dtoa_r+0xa9c>
 80184ec:	d1e0      	bne.n	80184b0 <_dtoa_r+0xa58>
 80184ee:	f01a 0f01 	tst.w	sl, #1
 80184f2:	d0dd      	beq.n	80184b0 <_dtoa_r+0xa58>
 80184f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80184f8:	d1d7      	bne.n	80184aa <_dtoa_r+0xa52>
 80184fa:	2339      	movs	r3, #57	; 0x39
 80184fc:	f88b 3000 	strb.w	r3, [fp]
 8018500:	462b      	mov	r3, r5
 8018502:	461d      	mov	r5, r3
 8018504:	3b01      	subs	r3, #1
 8018506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801850a:	2a39      	cmp	r2, #57	; 0x39
 801850c:	d071      	beq.n	80185f2 <_dtoa_r+0xb9a>
 801850e:	3201      	adds	r2, #1
 8018510:	701a      	strb	r2, [r3, #0]
 8018512:	e746      	b.n	80183a2 <_dtoa_r+0x94a>
 8018514:	2a00      	cmp	r2, #0
 8018516:	dd07      	ble.n	8018528 <_dtoa_r+0xad0>
 8018518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801851c:	d0ed      	beq.n	80184fa <_dtoa_r+0xaa2>
 801851e:	f10a 0301 	add.w	r3, sl, #1
 8018522:	f88b 3000 	strb.w	r3, [fp]
 8018526:	e73c      	b.n	80183a2 <_dtoa_r+0x94a>
 8018528:	9b05      	ldr	r3, [sp, #20]
 801852a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801852e:	4599      	cmp	r9, r3
 8018530:	d047      	beq.n	80185c2 <_dtoa_r+0xb6a>
 8018532:	ee18 1a10 	vmov	r1, s16
 8018536:	2300      	movs	r3, #0
 8018538:	220a      	movs	r2, #10
 801853a:	4620      	mov	r0, r4
 801853c:	f000 fe88 	bl	8019250 <__multadd>
 8018540:	45b8      	cmp	r8, r7
 8018542:	ee08 0a10 	vmov	s16, r0
 8018546:	f04f 0300 	mov.w	r3, #0
 801854a:	f04f 020a 	mov.w	r2, #10
 801854e:	4641      	mov	r1, r8
 8018550:	4620      	mov	r0, r4
 8018552:	d106      	bne.n	8018562 <_dtoa_r+0xb0a>
 8018554:	f000 fe7c 	bl	8019250 <__multadd>
 8018558:	4680      	mov	r8, r0
 801855a:	4607      	mov	r7, r0
 801855c:	f109 0901 	add.w	r9, r9, #1
 8018560:	e772      	b.n	8018448 <_dtoa_r+0x9f0>
 8018562:	f000 fe75 	bl	8019250 <__multadd>
 8018566:	4639      	mov	r1, r7
 8018568:	4680      	mov	r8, r0
 801856a:	2300      	movs	r3, #0
 801856c:	220a      	movs	r2, #10
 801856e:	4620      	mov	r0, r4
 8018570:	f000 fe6e 	bl	8019250 <__multadd>
 8018574:	4607      	mov	r7, r0
 8018576:	e7f1      	b.n	801855c <_dtoa_r+0xb04>
 8018578:	9b03      	ldr	r3, [sp, #12]
 801857a:	9302      	str	r3, [sp, #8]
 801857c:	9d01      	ldr	r5, [sp, #4]
 801857e:	ee18 0a10 	vmov	r0, s16
 8018582:	4631      	mov	r1, r6
 8018584:	f7ff f9dc 	bl	8017940 <quorem>
 8018588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801858c:	9b01      	ldr	r3, [sp, #4]
 801858e:	f805 ab01 	strb.w	sl, [r5], #1
 8018592:	1aea      	subs	r2, r5, r3
 8018594:	9b02      	ldr	r3, [sp, #8]
 8018596:	4293      	cmp	r3, r2
 8018598:	dd09      	ble.n	80185ae <_dtoa_r+0xb56>
 801859a:	ee18 1a10 	vmov	r1, s16
 801859e:	2300      	movs	r3, #0
 80185a0:	220a      	movs	r2, #10
 80185a2:	4620      	mov	r0, r4
 80185a4:	f000 fe54 	bl	8019250 <__multadd>
 80185a8:	ee08 0a10 	vmov	s16, r0
 80185ac:	e7e7      	b.n	801857e <_dtoa_r+0xb26>
 80185ae:	9b02      	ldr	r3, [sp, #8]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	bfc8      	it	gt
 80185b4:	461d      	movgt	r5, r3
 80185b6:	9b01      	ldr	r3, [sp, #4]
 80185b8:	bfd8      	it	le
 80185ba:	2501      	movle	r5, #1
 80185bc:	441d      	add	r5, r3
 80185be:	f04f 0800 	mov.w	r8, #0
 80185c2:	ee18 1a10 	vmov	r1, s16
 80185c6:	2201      	movs	r2, #1
 80185c8:	4620      	mov	r0, r4
 80185ca:	f001 f83b 	bl	8019644 <__lshift>
 80185ce:	4631      	mov	r1, r6
 80185d0:	ee08 0a10 	vmov	s16, r0
 80185d4:	f001 f8a6 	bl	8019724 <__mcmp>
 80185d8:	2800      	cmp	r0, #0
 80185da:	dc91      	bgt.n	8018500 <_dtoa_r+0xaa8>
 80185dc:	d102      	bne.n	80185e4 <_dtoa_r+0xb8c>
 80185de:	f01a 0f01 	tst.w	sl, #1
 80185e2:	d18d      	bne.n	8018500 <_dtoa_r+0xaa8>
 80185e4:	462b      	mov	r3, r5
 80185e6:	461d      	mov	r5, r3
 80185e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80185ec:	2a30      	cmp	r2, #48	; 0x30
 80185ee:	d0fa      	beq.n	80185e6 <_dtoa_r+0xb8e>
 80185f0:	e6d7      	b.n	80183a2 <_dtoa_r+0x94a>
 80185f2:	9a01      	ldr	r2, [sp, #4]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d184      	bne.n	8018502 <_dtoa_r+0xaaa>
 80185f8:	9b00      	ldr	r3, [sp, #0]
 80185fa:	3301      	adds	r3, #1
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	2331      	movs	r3, #49	; 0x31
 8018600:	7013      	strb	r3, [r2, #0]
 8018602:	e6ce      	b.n	80183a2 <_dtoa_r+0x94a>
 8018604:	4b09      	ldr	r3, [pc, #36]	; (801862c <_dtoa_r+0xbd4>)
 8018606:	f7ff ba95 	b.w	8017b34 <_dtoa_r+0xdc>
 801860a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801860c:	2b00      	cmp	r3, #0
 801860e:	f47f aa6e 	bne.w	8017aee <_dtoa_r+0x96>
 8018612:	4b07      	ldr	r3, [pc, #28]	; (8018630 <_dtoa_r+0xbd8>)
 8018614:	f7ff ba8e 	b.w	8017b34 <_dtoa_r+0xdc>
 8018618:	9b02      	ldr	r3, [sp, #8]
 801861a:	2b00      	cmp	r3, #0
 801861c:	dcae      	bgt.n	801857c <_dtoa_r+0xb24>
 801861e:	9b06      	ldr	r3, [sp, #24]
 8018620:	2b02      	cmp	r3, #2
 8018622:	f73f aea8 	bgt.w	8018376 <_dtoa_r+0x91e>
 8018626:	e7a9      	b.n	801857c <_dtoa_r+0xb24>
 8018628:	0801c3e0 	.word	0x0801c3e0
 801862c:	0801c1e0 	.word	0x0801c1e0
 8018630:	0801c361 	.word	0x0801c361

08018634 <__sflush_r>:
 8018634:	898a      	ldrh	r2, [r1, #12]
 8018636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863a:	4605      	mov	r5, r0
 801863c:	0710      	lsls	r0, r2, #28
 801863e:	460c      	mov	r4, r1
 8018640:	d458      	bmi.n	80186f4 <__sflush_r+0xc0>
 8018642:	684b      	ldr	r3, [r1, #4]
 8018644:	2b00      	cmp	r3, #0
 8018646:	dc05      	bgt.n	8018654 <__sflush_r+0x20>
 8018648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801864a:	2b00      	cmp	r3, #0
 801864c:	dc02      	bgt.n	8018654 <__sflush_r+0x20>
 801864e:	2000      	movs	r0, #0
 8018650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018656:	2e00      	cmp	r6, #0
 8018658:	d0f9      	beq.n	801864e <__sflush_r+0x1a>
 801865a:	2300      	movs	r3, #0
 801865c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018660:	682f      	ldr	r7, [r5, #0]
 8018662:	602b      	str	r3, [r5, #0]
 8018664:	d032      	beq.n	80186cc <__sflush_r+0x98>
 8018666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018668:	89a3      	ldrh	r3, [r4, #12]
 801866a:	075a      	lsls	r2, r3, #29
 801866c:	d505      	bpl.n	801867a <__sflush_r+0x46>
 801866e:	6863      	ldr	r3, [r4, #4]
 8018670:	1ac0      	subs	r0, r0, r3
 8018672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018674:	b10b      	cbz	r3, 801867a <__sflush_r+0x46>
 8018676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018678:	1ac0      	subs	r0, r0, r3
 801867a:	2300      	movs	r3, #0
 801867c:	4602      	mov	r2, r0
 801867e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018680:	6a21      	ldr	r1, [r4, #32]
 8018682:	4628      	mov	r0, r5
 8018684:	47b0      	blx	r6
 8018686:	1c43      	adds	r3, r0, #1
 8018688:	89a3      	ldrh	r3, [r4, #12]
 801868a:	d106      	bne.n	801869a <__sflush_r+0x66>
 801868c:	6829      	ldr	r1, [r5, #0]
 801868e:	291d      	cmp	r1, #29
 8018690:	d82c      	bhi.n	80186ec <__sflush_r+0xb8>
 8018692:	4a2a      	ldr	r2, [pc, #168]	; (801873c <__sflush_r+0x108>)
 8018694:	40ca      	lsrs	r2, r1
 8018696:	07d6      	lsls	r6, r2, #31
 8018698:	d528      	bpl.n	80186ec <__sflush_r+0xb8>
 801869a:	2200      	movs	r2, #0
 801869c:	6062      	str	r2, [r4, #4]
 801869e:	04d9      	lsls	r1, r3, #19
 80186a0:	6922      	ldr	r2, [r4, #16]
 80186a2:	6022      	str	r2, [r4, #0]
 80186a4:	d504      	bpl.n	80186b0 <__sflush_r+0x7c>
 80186a6:	1c42      	adds	r2, r0, #1
 80186a8:	d101      	bne.n	80186ae <__sflush_r+0x7a>
 80186aa:	682b      	ldr	r3, [r5, #0]
 80186ac:	b903      	cbnz	r3, 80186b0 <__sflush_r+0x7c>
 80186ae:	6560      	str	r0, [r4, #84]	; 0x54
 80186b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186b2:	602f      	str	r7, [r5, #0]
 80186b4:	2900      	cmp	r1, #0
 80186b6:	d0ca      	beq.n	801864e <__sflush_r+0x1a>
 80186b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186bc:	4299      	cmp	r1, r3
 80186be:	d002      	beq.n	80186c6 <__sflush_r+0x92>
 80186c0:	4628      	mov	r0, r5
 80186c2:	f001 fa3b 	bl	8019b3c <_free_r>
 80186c6:	2000      	movs	r0, #0
 80186c8:	6360      	str	r0, [r4, #52]	; 0x34
 80186ca:	e7c1      	b.n	8018650 <__sflush_r+0x1c>
 80186cc:	6a21      	ldr	r1, [r4, #32]
 80186ce:	2301      	movs	r3, #1
 80186d0:	4628      	mov	r0, r5
 80186d2:	47b0      	blx	r6
 80186d4:	1c41      	adds	r1, r0, #1
 80186d6:	d1c7      	bne.n	8018668 <__sflush_r+0x34>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d0c4      	beq.n	8018668 <__sflush_r+0x34>
 80186de:	2b1d      	cmp	r3, #29
 80186e0:	d001      	beq.n	80186e6 <__sflush_r+0xb2>
 80186e2:	2b16      	cmp	r3, #22
 80186e4:	d101      	bne.n	80186ea <__sflush_r+0xb6>
 80186e6:	602f      	str	r7, [r5, #0]
 80186e8:	e7b1      	b.n	801864e <__sflush_r+0x1a>
 80186ea:	89a3      	ldrh	r3, [r4, #12]
 80186ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186f0:	81a3      	strh	r3, [r4, #12]
 80186f2:	e7ad      	b.n	8018650 <__sflush_r+0x1c>
 80186f4:	690f      	ldr	r7, [r1, #16]
 80186f6:	2f00      	cmp	r7, #0
 80186f8:	d0a9      	beq.n	801864e <__sflush_r+0x1a>
 80186fa:	0793      	lsls	r3, r2, #30
 80186fc:	680e      	ldr	r6, [r1, #0]
 80186fe:	bf08      	it	eq
 8018700:	694b      	ldreq	r3, [r1, #20]
 8018702:	600f      	str	r7, [r1, #0]
 8018704:	bf18      	it	ne
 8018706:	2300      	movne	r3, #0
 8018708:	eba6 0807 	sub.w	r8, r6, r7
 801870c:	608b      	str	r3, [r1, #8]
 801870e:	f1b8 0f00 	cmp.w	r8, #0
 8018712:	dd9c      	ble.n	801864e <__sflush_r+0x1a>
 8018714:	6a21      	ldr	r1, [r4, #32]
 8018716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018718:	4643      	mov	r3, r8
 801871a:	463a      	mov	r2, r7
 801871c:	4628      	mov	r0, r5
 801871e:	47b0      	blx	r6
 8018720:	2800      	cmp	r0, #0
 8018722:	dc06      	bgt.n	8018732 <__sflush_r+0xfe>
 8018724:	89a3      	ldrh	r3, [r4, #12]
 8018726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801872a:	81a3      	strh	r3, [r4, #12]
 801872c:	f04f 30ff 	mov.w	r0, #4294967295
 8018730:	e78e      	b.n	8018650 <__sflush_r+0x1c>
 8018732:	4407      	add	r7, r0
 8018734:	eba8 0800 	sub.w	r8, r8, r0
 8018738:	e7e9      	b.n	801870e <__sflush_r+0xda>
 801873a:	bf00      	nop
 801873c:	20400001 	.word	0x20400001

08018740 <_fflush_r>:
 8018740:	b538      	push	{r3, r4, r5, lr}
 8018742:	690b      	ldr	r3, [r1, #16]
 8018744:	4605      	mov	r5, r0
 8018746:	460c      	mov	r4, r1
 8018748:	b913      	cbnz	r3, 8018750 <_fflush_r+0x10>
 801874a:	2500      	movs	r5, #0
 801874c:	4628      	mov	r0, r5
 801874e:	bd38      	pop	{r3, r4, r5, pc}
 8018750:	b118      	cbz	r0, 801875a <_fflush_r+0x1a>
 8018752:	6983      	ldr	r3, [r0, #24]
 8018754:	b90b      	cbnz	r3, 801875a <_fflush_r+0x1a>
 8018756:	f000 f887 	bl	8018868 <__sinit>
 801875a:	4b14      	ldr	r3, [pc, #80]	; (80187ac <_fflush_r+0x6c>)
 801875c:	429c      	cmp	r4, r3
 801875e:	d11b      	bne.n	8018798 <_fflush_r+0x58>
 8018760:	686c      	ldr	r4, [r5, #4]
 8018762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d0ef      	beq.n	801874a <_fflush_r+0xa>
 801876a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801876c:	07d0      	lsls	r0, r2, #31
 801876e:	d404      	bmi.n	801877a <_fflush_r+0x3a>
 8018770:	0599      	lsls	r1, r3, #22
 8018772:	d402      	bmi.n	801877a <_fflush_r+0x3a>
 8018774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018776:	f000 fc88 	bl	801908a <__retarget_lock_acquire_recursive>
 801877a:	4628      	mov	r0, r5
 801877c:	4621      	mov	r1, r4
 801877e:	f7ff ff59 	bl	8018634 <__sflush_r>
 8018782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018784:	07da      	lsls	r2, r3, #31
 8018786:	4605      	mov	r5, r0
 8018788:	d4e0      	bmi.n	801874c <_fflush_r+0xc>
 801878a:	89a3      	ldrh	r3, [r4, #12]
 801878c:	059b      	lsls	r3, r3, #22
 801878e:	d4dd      	bmi.n	801874c <_fflush_r+0xc>
 8018790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018792:	f000 fc7b 	bl	801908c <__retarget_lock_release_recursive>
 8018796:	e7d9      	b.n	801874c <_fflush_r+0xc>
 8018798:	4b05      	ldr	r3, [pc, #20]	; (80187b0 <_fflush_r+0x70>)
 801879a:	429c      	cmp	r4, r3
 801879c:	d101      	bne.n	80187a2 <_fflush_r+0x62>
 801879e:	68ac      	ldr	r4, [r5, #8]
 80187a0:	e7df      	b.n	8018762 <_fflush_r+0x22>
 80187a2:	4b04      	ldr	r3, [pc, #16]	; (80187b4 <_fflush_r+0x74>)
 80187a4:	429c      	cmp	r4, r3
 80187a6:	bf08      	it	eq
 80187a8:	68ec      	ldreq	r4, [r5, #12]
 80187aa:	e7da      	b.n	8018762 <_fflush_r+0x22>
 80187ac:	0801c414 	.word	0x0801c414
 80187b0:	0801c434 	.word	0x0801c434
 80187b4:	0801c3f4 	.word	0x0801c3f4

080187b8 <std>:
 80187b8:	2300      	movs	r3, #0
 80187ba:	b510      	push	{r4, lr}
 80187bc:	4604      	mov	r4, r0
 80187be:	e9c0 3300 	strd	r3, r3, [r0]
 80187c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80187c6:	6083      	str	r3, [r0, #8]
 80187c8:	8181      	strh	r1, [r0, #12]
 80187ca:	6643      	str	r3, [r0, #100]	; 0x64
 80187cc:	81c2      	strh	r2, [r0, #14]
 80187ce:	6183      	str	r3, [r0, #24]
 80187d0:	4619      	mov	r1, r3
 80187d2:	2208      	movs	r2, #8
 80187d4:	305c      	adds	r0, #92	; 0x5c
 80187d6:	f7fd f92b 	bl	8015a30 <memset>
 80187da:	4b05      	ldr	r3, [pc, #20]	; (80187f0 <std+0x38>)
 80187dc:	6263      	str	r3, [r4, #36]	; 0x24
 80187de:	4b05      	ldr	r3, [pc, #20]	; (80187f4 <std+0x3c>)
 80187e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80187e2:	4b05      	ldr	r3, [pc, #20]	; (80187f8 <std+0x40>)
 80187e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80187e6:	4b05      	ldr	r3, [pc, #20]	; (80187fc <std+0x44>)
 80187e8:	6224      	str	r4, [r4, #32]
 80187ea:	6323      	str	r3, [r4, #48]	; 0x30
 80187ec:	bd10      	pop	{r4, pc}
 80187ee:	bf00      	nop
 80187f0:	0801a329 	.word	0x0801a329
 80187f4:	0801a34b 	.word	0x0801a34b
 80187f8:	0801a383 	.word	0x0801a383
 80187fc:	0801a3a7 	.word	0x0801a3a7

08018800 <_cleanup_r>:
 8018800:	4901      	ldr	r1, [pc, #4]	; (8018808 <_cleanup_r+0x8>)
 8018802:	f000 b8af 	b.w	8018964 <_fwalk_reent>
 8018806:	bf00      	nop
 8018808:	08018741 	.word	0x08018741

0801880c <__sfmoreglue>:
 801880c:	b570      	push	{r4, r5, r6, lr}
 801880e:	2268      	movs	r2, #104	; 0x68
 8018810:	1e4d      	subs	r5, r1, #1
 8018812:	4355      	muls	r5, r2
 8018814:	460e      	mov	r6, r1
 8018816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801881a:	f001 f9fb 	bl	8019c14 <_malloc_r>
 801881e:	4604      	mov	r4, r0
 8018820:	b140      	cbz	r0, 8018834 <__sfmoreglue+0x28>
 8018822:	2100      	movs	r1, #0
 8018824:	e9c0 1600 	strd	r1, r6, [r0]
 8018828:	300c      	adds	r0, #12
 801882a:	60a0      	str	r0, [r4, #8]
 801882c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018830:	f7fd f8fe 	bl	8015a30 <memset>
 8018834:	4620      	mov	r0, r4
 8018836:	bd70      	pop	{r4, r5, r6, pc}

08018838 <__sfp_lock_acquire>:
 8018838:	4801      	ldr	r0, [pc, #4]	; (8018840 <__sfp_lock_acquire+0x8>)
 801883a:	f000 bc26 	b.w	801908a <__retarget_lock_acquire_recursive>
 801883e:	bf00      	nop
 8018840:	200002cc 	.word	0x200002cc

08018844 <__sfp_lock_release>:
 8018844:	4801      	ldr	r0, [pc, #4]	; (801884c <__sfp_lock_release+0x8>)
 8018846:	f000 bc21 	b.w	801908c <__retarget_lock_release_recursive>
 801884a:	bf00      	nop
 801884c:	200002cc 	.word	0x200002cc

08018850 <__sinit_lock_acquire>:
 8018850:	4801      	ldr	r0, [pc, #4]	; (8018858 <__sinit_lock_acquire+0x8>)
 8018852:	f000 bc1a 	b.w	801908a <__retarget_lock_acquire_recursive>
 8018856:	bf00      	nop
 8018858:	200002cd 	.word	0x200002cd

0801885c <__sinit_lock_release>:
 801885c:	4801      	ldr	r0, [pc, #4]	; (8018864 <__sinit_lock_release+0x8>)
 801885e:	f000 bc15 	b.w	801908c <__retarget_lock_release_recursive>
 8018862:	bf00      	nop
 8018864:	200002cd 	.word	0x200002cd

08018868 <__sinit>:
 8018868:	b510      	push	{r4, lr}
 801886a:	4604      	mov	r4, r0
 801886c:	f7ff fff0 	bl	8018850 <__sinit_lock_acquire>
 8018870:	69a3      	ldr	r3, [r4, #24]
 8018872:	b11b      	cbz	r3, 801887c <__sinit+0x14>
 8018874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018878:	f7ff bff0 	b.w	801885c <__sinit_lock_release>
 801887c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018880:	6523      	str	r3, [r4, #80]	; 0x50
 8018882:	4b13      	ldr	r3, [pc, #76]	; (80188d0 <__sinit+0x68>)
 8018884:	4a13      	ldr	r2, [pc, #76]	; (80188d4 <__sinit+0x6c>)
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	62a2      	str	r2, [r4, #40]	; 0x28
 801888a:	42a3      	cmp	r3, r4
 801888c:	bf04      	itt	eq
 801888e:	2301      	moveq	r3, #1
 8018890:	61a3      	streq	r3, [r4, #24]
 8018892:	4620      	mov	r0, r4
 8018894:	f000 f820 	bl	80188d8 <__sfp>
 8018898:	6060      	str	r0, [r4, #4]
 801889a:	4620      	mov	r0, r4
 801889c:	f000 f81c 	bl	80188d8 <__sfp>
 80188a0:	60a0      	str	r0, [r4, #8]
 80188a2:	4620      	mov	r0, r4
 80188a4:	f000 f818 	bl	80188d8 <__sfp>
 80188a8:	2200      	movs	r2, #0
 80188aa:	60e0      	str	r0, [r4, #12]
 80188ac:	2104      	movs	r1, #4
 80188ae:	6860      	ldr	r0, [r4, #4]
 80188b0:	f7ff ff82 	bl	80187b8 <std>
 80188b4:	68a0      	ldr	r0, [r4, #8]
 80188b6:	2201      	movs	r2, #1
 80188b8:	2109      	movs	r1, #9
 80188ba:	f7ff ff7d 	bl	80187b8 <std>
 80188be:	68e0      	ldr	r0, [r4, #12]
 80188c0:	2202      	movs	r2, #2
 80188c2:	2112      	movs	r1, #18
 80188c4:	f7ff ff78 	bl	80187b8 <std>
 80188c8:	2301      	movs	r3, #1
 80188ca:	61a3      	str	r3, [r4, #24]
 80188cc:	e7d2      	b.n	8018874 <__sinit+0xc>
 80188ce:	bf00      	nop
 80188d0:	0801c1cc 	.word	0x0801c1cc
 80188d4:	08018801 	.word	0x08018801

080188d8 <__sfp>:
 80188d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188da:	4607      	mov	r7, r0
 80188dc:	f7ff ffac 	bl	8018838 <__sfp_lock_acquire>
 80188e0:	4b1e      	ldr	r3, [pc, #120]	; (801895c <__sfp+0x84>)
 80188e2:	681e      	ldr	r6, [r3, #0]
 80188e4:	69b3      	ldr	r3, [r6, #24]
 80188e6:	b913      	cbnz	r3, 80188ee <__sfp+0x16>
 80188e8:	4630      	mov	r0, r6
 80188ea:	f7ff ffbd 	bl	8018868 <__sinit>
 80188ee:	3648      	adds	r6, #72	; 0x48
 80188f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	d503      	bpl.n	8018900 <__sfp+0x28>
 80188f8:	6833      	ldr	r3, [r6, #0]
 80188fa:	b30b      	cbz	r3, 8018940 <__sfp+0x68>
 80188fc:	6836      	ldr	r6, [r6, #0]
 80188fe:	e7f7      	b.n	80188f0 <__sfp+0x18>
 8018900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018904:	b9d5      	cbnz	r5, 801893c <__sfp+0x64>
 8018906:	4b16      	ldr	r3, [pc, #88]	; (8018960 <__sfp+0x88>)
 8018908:	60e3      	str	r3, [r4, #12]
 801890a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801890e:	6665      	str	r5, [r4, #100]	; 0x64
 8018910:	f000 fbba 	bl	8019088 <__retarget_lock_init_recursive>
 8018914:	f7ff ff96 	bl	8018844 <__sfp_lock_release>
 8018918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801891c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018920:	6025      	str	r5, [r4, #0]
 8018922:	61a5      	str	r5, [r4, #24]
 8018924:	2208      	movs	r2, #8
 8018926:	4629      	mov	r1, r5
 8018928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801892c:	f7fd f880 	bl	8015a30 <memset>
 8018930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018938:	4620      	mov	r0, r4
 801893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801893c:	3468      	adds	r4, #104	; 0x68
 801893e:	e7d9      	b.n	80188f4 <__sfp+0x1c>
 8018940:	2104      	movs	r1, #4
 8018942:	4638      	mov	r0, r7
 8018944:	f7ff ff62 	bl	801880c <__sfmoreglue>
 8018948:	4604      	mov	r4, r0
 801894a:	6030      	str	r0, [r6, #0]
 801894c:	2800      	cmp	r0, #0
 801894e:	d1d5      	bne.n	80188fc <__sfp+0x24>
 8018950:	f7ff ff78 	bl	8018844 <__sfp_lock_release>
 8018954:	230c      	movs	r3, #12
 8018956:	603b      	str	r3, [r7, #0]
 8018958:	e7ee      	b.n	8018938 <__sfp+0x60>
 801895a:	bf00      	nop
 801895c:	0801c1cc 	.word	0x0801c1cc
 8018960:	ffff0001 	.word	0xffff0001

08018964 <_fwalk_reent>:
 8018964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018968:	4606      	mov	r6, r0
 801896a:	4688      	mov	r8, r1
 801896c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018970:	2700      	movs	r7, #0
 8018972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018976:	f1b9 0901 	subs.w	r9, r9, #1
 801897a:	d505      	bpl.n	8018988 <_fwalk_reent+0x24>
 801897c:	6824      	ldr	r4, [r4, #0]
 801897e:	2c00      	cmp	r4, #0
 8018980:	d1f7      	bne.n	8018972 <_fwalk_reent+0xe>
 8018982:	4638      	mov	r0, r7
 8018984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018988:	89ab      	ldrh	r3, [r5, #12]
 801898a:	2b01      	cmp	r3, #1
 801898c:	d907      	bls.n	801899e <_fwalk_reent+0x3a>
 801898e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018992:	3301      	adds	r3, #1
 8018994:	d003      	beq.n	801899e <_fwalk_reent+0x3a>
 8018996:	4629      	mov	r1, r5
 8018998:	4630      	mov	r0, r6
 801899a:	47c0      	blx	r8
 801899c:	4307      	orrs	r7, r0
 801899e:	3568      	adds	r5, #104	; 0x68
 80189a0:	e7e9      	b.n	8018976 <_fwalk_reent+0x12>

080189a2 <rshift>:
 80189a2:	6903      	ldr	r3, [r0, #16]
 80189a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80189a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 80189b0:	f100 0414 	add.w	r4, r0, #20
 80189b4:	dd45      	ble.n	8018a42 <rshift+0xa0>
 80189b6:	f011 011f 	ands.w	r1, r1, #31
 80189ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80189be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80189c2:	d10c      	bne.n	80189de <rshift+0x3c>
 80189c4:	f100 0710 	add.w	r7, r0, #16
 80189c8:	4629      	mov	r1, r5
 80189ca:	42b1      	cmp	r1, r6
 80189cc:	d334      	bcc.n	8018a38 <rshift+0x96>
 80189ce:	1a9b      	subs	r3, r3, r2
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	1eea      	subs	r2, r5, #3
 80189d4:	4296      	cmp	r6, r2
 80189d6:	bf38      	it	cc
 80189d8:	2300      	movcc	r3, #0
 80189da:	4423      	add	r3, r4
 80189dc:	e015      	b.n	8018a0a <rshift+0x68>
 80189de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80189e2:	f1c1 0820 	rsb	r8, r1, #32
 80189e6:	40cf      	lsrs	r7, r1
 80189e8:	f105 0e04 	add.w	lr, r5, #4
 80189ec:	46a1      	mov	r9, r4
 80189ee:	4576      	cmp	r6, lr
 80189f0:	46f4      	mov	ip, lr
 80189f2:	d815      	bhi.n	8018a20 <rshift+0x7e>
 80189f4:	1a9a      	subs	r2, r3, r2
 80189f6:	0092      	lsls	r2, r2, #2
 80189f8:	3a04      	subs	r2, #4
 80189fa:	3501      	adds	r5, #1
 80189fc:	42ae      	cmp	r6, r5
 80189fe:	bf38      	it	cc
 8018a00:	2200      	movcc	r2, #0
 8018a02:	18a3      	adds	r3, r4, r2
 8018a04:	50a7      	str	r7, [r4, r2]
 8018a06:	b107      	cbz	r7, 8018a0a <rshift+0x68>
 8018a08:	3304      	adds	r3, #4
 8018a0a:	1b1a      	subs	r2, r3, r4
 8018a0c:	42a3      	cmp	r3, r4
 8018a0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018a12:	bf08      	it	eq
 8018a14:	2300      	moveq	r3, #0
 8018a16:	6102      	str	r2, [r0, #16]
 8018a18:	bf08      	it	eq
 8018a1a:	6143      	streq	r3, [r0, #20]
 8018a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a20:	f8dc c000 	ldr.w	ip, [ip]
 8018a24:	fa0c fc08 	lsl.w	ip, ip, r8
 8018a28:	ea4c 0707 	orr.w	r7, ip, r7
 8018a2c:	f849 7b04 	str.w	r7, [r9], #4
 8018a30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018a34:	40cf      	lsrs	r7, r1
 8018a36:	e7da      	b.n	80189ee <rshift+0x4c>
 8018a38:	f851 cb04 	ldr.w	ip, [r1], #4
 8018a3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8018a40:	e7c3      	b.n	80189ca <rshift+0x28>
 8018a42:	4623      	mov	r3, r4
 8018a44:	e7e1      	b.n	8018a0a <rshift+0x68>

08018a46 <__hexdig_fun>:
 8018a46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018a4a:	2b09      	cmp	r3, #9
 8018a4c:	d802      	bhi.n	8018a54 <__hexdig_fun+0xe>
 8018a4e:	3820      	subs	r0, #32
 8018a50:	b2c0      	uxtb	r0, r0
 8018a52:	4770      	bx	lr
 8018a54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018a58:	2b05      	cmp	r3, #5
 8018a5a:	d801      	bhi.n	8018a60 <__hexdig_fun+0x1a>
 8018a5c:	3847      	subs	r0, #71	; 0x47
 8018a5e:	e7f7      	b.n	8018a50 <__hexdig_fun+0xa>
 8018a60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018a64:	2b05      	cmp	r3, #5
 8018a66:	d801      	bhi.n	8018a6c <__hexdig_fun+0x26>
 8018a68:	3827      	subs	r0, #39	; 0x27
 8018a6a:	e7f1      	b.n	8018a50 <__hexdig_fun+0xa>
 8018a6c:	2000      	movs	r0, #0
 8018a6e:	4770      	bx	lr

08018a70 <__gethex>:
 8018a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a74:	ed2d 8b02 	vpush	{d8}
 8018a78:	b089      	sub	sp, #36	; 0x24
 8018a7a:	ee08 0a10 	vmov	s16, r0
 8018a7e:	9304      	str	r3, [sp, #16]
 8018a80:	4bb4      	ldr	r3, [pc, #720]	; (8018d54 <__gethex+0x2e4>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	9301      	str	r3, [sp, #4]
 8018a86:	4618      	mov	r0, r3
 8018a88:	468b      	mov	fp, r1
 8018a8a:	4690      	mov	r8, r2
 8018a8c:	f7e7 fbc8 	bl	8000220 <strlen>
 8018a90:	9b01      	ldr	r3, [sp, #4]
 8018a92:	f8db 2000 	ldr.w	r2, [fp]
 8018a96:	4403      	add	r3, r0
 8018a98:	4682      	mov	sl, r0
 8018a9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018a9e:	9305      	str	r3, [sp, #20]
 8018aa0:	1c93      	adds	r3, r2, #2
 8018aa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018aa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018aaa:	32fe      	adds	r2, #254	; 0xfe
 8018aac:	18d1      	adds	r1, r2, r3
 8018aae:	461f      	mov	r7, r3
 8018ab0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018ab4:	9100      	str	r1, [sp, #0]
 8018ab6:	2830      	cmp	r0, #48	; 0x30
 8018ab8:	d0f8      	beq.n	8018aac <__gethex+0x3c>
 8018aba:	f7ff ffc4 	bl	8018a46 <__hexdig_fun>
 8018abe:	4604      	mov	r4, r0
 8018ac0:	2800      	cmp	r0, #0
 8018ac2:	d13a      	bne.n	8018b3a <__gethex+0xca>
 8018ac4:	9901      	ldr	r1, [sp, #4]
 8018ac6:	4652      	mov	r2, sl
 8018ac8:	4638      	mov	r0, r7
 8018aca:	f001 fc70 	bl	801a3ae <strncmp>
 8018ace:	4605      	mov	r5, r0
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	d168      	bne.n	8018ba6 <__gethex+0x136>
 8018ad4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018ad8:	eb07 060a 	add.w	r6, r7, sl
 8018adc:	f7ff ffb3 	bl	8018a46 <__hexdig_fun>
 8018ae0:	2800      	cmp	r0, #0
 8018ae2:	d062      	beq.n	8018baa <__gethex+0x13a>
 8018ae4:	4633      	mov	r3, r6
 8018ae6:	7818      	ldrb	r0, [r3, #0]
 8018ae8:	2830      	cmp	r0, #48	; 0x30
 8018aea:	461f      	mov	r7, r3
 8018aec:	f103 0301 	add.w	r3, r3, #1
 8018af0:	d0f9      	beq.n	8018ae6 <__gethex+0x76>
 8018af2:	f7ff ffa8 	bl	8018a46 <__hexdig_fun>
 8018af6:	2301      	movs	r3, #1
 8018af8:	fab0 f480 	clz	r4, r0
 8018afc:	0964      	lsrs	r4, r4, #5
 8018afe:	4635      	mov	r5, r6
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	463a      	mov	r2, r7
 8018b04:	4616      	mov	r6, r2
 8018b06:	3201      	adds	r2, #1
 8018b08:	7830      	ldrb	r0, [r6, #0]
 8018b0a:	f7ff ff9c 	bl	8018a46 <__hexdig_fun>
 8018b0e:	2800      	cmp	r0, #0
 8018b10:	d1f8      	bne.n	8018b04 <__gethex+0x94>
 8018b12:	9901      	ldr	r1, [sp, #4]
 8018b14:	4652      	mov	r2, sl
 8018b16:	4630      	mov	r0, r6
 8018b18:	f001 fc49 	bl	801a3ae <strncmp>
 8018b1c:	b980      	cbnz	r0, 8018b40 <__gethex+0xd0>
 8018b1e:	b94d      	cbnz	r5, 8018b34 <__gethex+0xc4>
 8018b20:	eb06 050a 	add.w	r5, r6, sl
 8018b24:	462a      	mov	r2, r5
 8018b26:	4616      	mov	r6, r2
 8018b28:	3201      	adds	r2, #1
 8018b2a:	7830      	ldrb	r0, [r6, #0]
 8018b2c:	f7ff ff8b 	bl	8018a46 <__hexdig_fun>
 8018b30:	2800      	cmp	r0, #0
 8018b32:	d1f8      	bne.n	8018b26 <__gethex+0xb6>
 8018b34:	1bad      	subs	r5, r5, r6
 8018b36:	00ad      	lsls	r5, r5, #2
 8018b38:	e004      	b.n	8018b44 <__gethex+0xd4>
 8018b3a:	2400      	movs	r4, #0
 8018b3c:	4625      	mov	r5, r4
 8018b3e:	e7e0      	b.n	8018b02 <__gethex+0x92>
 8018b40:	2d00      	cmp	r5, #0
 8018b42:	d1f7      	bne.n	8018b34 <__gethex+0xc4>
 8018b44:	7833      	ldrb	r3, [r6, #0]
 8018b46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b4a:	2b50      	cmp	r3, #80	; 0x50
 8018b4c:	d13b      	bne.n	8018bc6 <__gethex+0x156>
 8018b4e:	7873      	ldrb	r3, [r6, #1]
 8018b50:	2b2b      	cmp	r3, #43	; 0x2b
 8018b52:	d02c      	beq.n	8018bae <__gethex+0x13e>
 8018b54:	2b2d      	cmp	r3, #45	; 0x2d
 8018b56:	d02e      	beq.n	8018bb6 <__gethex+0x146>
 8018b58:	1c71      	adds	r1, r6, #1
 8018b5a:	f04f 0900 	mov.w	r9, #0
 8018b5e:	7808      	ldrb	r0, [r1, #0]
 8018b60:	f7ff ff71 	bl	8018a46 <__hexdig_fun>
 8018b64:	1e43      	subs	r3, r0, #1
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	2b18      	cmp	r3, #24
 8018b6a:	d82c      	bhi.n	8018bc6 <__gethex+0x156>
 8018b6c:	f1a0 0210 	sub.w	r2, r0, #16
 8018b70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018b74:	f7ff ff67 	bl	8018a46 <__hexdig_fun>
 8018b78:	1e43      	subs	r3, r0, #1
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	2b18      	cmp	r3, #24
 8018b7e:	d91d      	bls.n	8018bbc <__gethex+0x14c>
 8018b80:	f1b9 0f00 	cmp.w	r9, #0
 8018b84:	d000      	beq.n	8018b88 <__gethex+0x118>
 8018b86:	4252      	negs	r2, r2
 8018b88:	4415      	add	r5, r2
 8018b8a:	f8cb 1000 	str.w	r1, [fp]
 8018b8e:	b1e4      	cbz	r4, 8018bca <__gethex+0x15a>
 8018b90:	9b00      	ldr	r3, [sp, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	bf14      	ite	ne
 8018b96:	2700      	movne	r7, #0
 8018b98:	2706      	moveq	r7, #6
 8018b9a:	4638      	mov	r0, r7
 8018b9c:	b009      	add	sp, #36	; 0x24
 8018b9e:	ecbd 8b02 	vpop	{d8}
 8018ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba6:	463e      	mov	r6, r7
 8018ba8:	4625      	mov	r5, r4
 8018baa:	2401      	movs	r4, #1
 8018bac:	e7ca      	b.n	8018b44 <__gethex+0xd4>
 8018bae:	f04f 0900 	mov.w	r9, #0
 8018bb2:	1cb1      	adds	r1, r6, #2
 8018bb4:	e7d3      	b.n	8018b5e <__gethex+0xee>
 8018bb6:	f04f 0901 	mov.w	r9, #1
 8018bba:	e7fa      	b.n	8018bb2 <__gethex+0x142>
 8018bbc:	230a      	movs	r3, #10
 8018bbe:	fb03 0202 	mla	r2, r3, r2, r0
 8018bc2:	3a10      	subs	r2, #16
 8018bc4:	e7d4      	b.n	8018b70 <__gethex+0x100>
 8018bc6:	4631      	mov	r1, r6
 8018bc8:	e7df      	b.n	8018b8a <__gethex+0x11a>
 8018bca:	1bf3      	subs	r3, r6, r7
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	4621      	mov	r1, r4
 8018bd0:	2b07      	cmp	r3, #7
 8018bd2:	dc0b      	bgt.n	8018bec <__gethex+0x17c>
 8018bd4:	ee18 0a10 	vmov	r0, s16
 8018bd8:	f000 fad8 	bl	801918c <_Balloc>
 8018bdc:	4604      	mov	r4, r0
 8018bde:	b940      	cbnz	r0, 8018bf2 <__gethex+0x182>
 8018be0:	4b5d      	ldr	r3, [pc, #372]	; (8018d58 <__gethex+0x2e8>)
 8018be2:	4602      	mov	r2, r0
 8018be4:	21de      	movs	r1, #222	; 0xde
 8018be6:	485d      	ldr	r0, [pc, #372]	; (8018d5c <__gethex+0x2ec>)
 8018be8:	f001 fc14 	bl	801a414 <__assert_func>
 8018bec:	3101      	adds	r1, #1
 8018bee:	105b      	asrs	r3, r3, #1
 8018bf0:	e7ee      	b.n	8018bd0 <__gethex+0x160>
 8018bf2:	f100 0914 	add.w	r9, r0, #20
 8018bf6:	f04f 0b00 	mov.w	fp, #0
 8018bfa:	f1ca 0301 	rsb	r3, sl, #1
 8018bfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8018c02:	f8cd b000 	str.w	fp, [sp]
 8018c06:	9306      	str	r3, [sp, #24]
 8018c08:	42b7      	cmp	r7, r6
 8018c0a:	d340      	bcc.n	8018c8e <__gethex+0x21e>
 8018c0c:	9802      	ldr	r0, [sp, #8]
 8018c0e:	9b00      	ldr	r3, [sp, #0]
 8018c10:	f840 3b04 	str.w	r3, [r0], #4
 8018c14:	eba0 0009 	sub.w	r0, r0, r9
 8018c18:	1080      	asrs	r0, r0, #2
 8018c1a:	0146      	lsls	r6, r0, #5
 8018c1c:	6120      	str	r0, [r4, #16]
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f000 fba6 	bl	8019370 <__hi0bits>
 8018c24:	1a30      	subs	r0, r6, r0
 8018c26:	f8d8 6000 	ldr.w	r6, [r8]
 8018c2a:	42b0      	cmp	r0, r6
 8018c2c:	dd63      	ble.n	8018cf6 <__gethex+0x286>
 8018c2e:	1b87      	subs	r7, r0, r6
 8018c30:	4639      	mov	r1, r7
 8018c32:	4620      	mov	r0, r4
 8018c34:	f000 ff4a 	bl	8019acc <__any_on>
 8018c38:	4682      	mov	sl, r0
 8018c3a:	b1a8      	cbz	r0, 8018c68 <__gethex+0x1f8>
 8018c3c:	1e7b      	subs	r3, r7, #1
 8018c3e:	1159      	asrs	r1, r3, #5
 8018c40:	f003 021f 	and.w	r2, r3, #31
 8018c44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018c48:	f04f 0a01 	mov.w	sl, #1
 8018c4c:	fa0a f202 	lsl.w	r2, sl, r2
 8018c50:	420a      	tst	r2, r1
 8018c52:	d009      	beq.n	8018c68 <__gethex+0x1f8>
 8018c54:	4553      	cmp	r3, sl
 8018c56:	dd05      	ble.n	8018c64 <__gethex+0x1f4>
 8018c58:	1eb9      	subs	r1, r7, #2
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f000 ff36 	bl	8019acc <__any_on>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	d145      	bne.n	8018cf0 <__gethex+0x280>
 8018c64:	f04f 0a02 	mov.w	sl, #2
 8018c68:	4639      	mov	r1, r7
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	f7ff fe99 	bl	80189a2 <rshift>
 8018c70:	443d      	add	r5, r7
 8018c72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c76:	42ab      	cmp	r3, r5
 8018c78:	da4c      	bge.n	8018d14 <__gethex+0x2a4>
 8018c7a:	ee18 0a10 	vmov	r0, s16
 8018c7e:	4621      	mov	r1, r4
 8018c80:	f000 fac4 	bl	801920c <_Bfree>
 8018c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018c86:	2300      	movs	r3, #0
 8018c88:	6013      	str	r3, [r2, #0]
 8018c8a:	27a3      	movs	r7, #163	; 0xa3
 8018c8c:	e785      	b.n	8018b9a <__gethex+0x12a>
 8018c8e:	1e73      	subs	r3, r6, #1
 8018c90:	9a05      	ldr	r2, [sp, #20]
 8018c92:	9303      	str	r3, [sp, #12]
 8018c94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d019      	beq.n	8018cd0 <__gethex+0x260>
 8018c9c:	f1bb 0f20 	cmp.w	fp, #32
 8018ca0:	d107      	bne.n	8018cb2 <__gethex+0x242>
 8018ca2:	9b02      	ldr	r3, [sp, #8]
 8018ca4:	9a00      	ldr	r2, [sp, #0]
 8018ca6:	f843 2b04 	str.w	r2, [r3], #4
 8018caa:	9302      	str	r3, [sp, #8]
 8018cac:	2300      	movs	r3, #0
 8018cae:	9300      	str	r3, [sp, #0]
 8018cb0:	469b      	mov	fp, r3
 8018cb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018cb6:	f7ff fec6 	bl	8018a46 <__hexdig_fun>
 8018cba:	9b00      	ldr	r3, [sp, #0]
 8018cbc:	f000 000f 	and.w	r0, r0, #15
 8018cc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8018cc4:	4303      	orrs	r3, r0
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	f10b 0b04 	add.w	fp, fp, #4
 8018ccc:	9b03      	ldr	r3, [sp, #12]
 8018cce:	e00d      	b.n	8018cec <__gethex+0x27c>
 8018cd0:	9b03      	ldr	r3, [sp, #12]
 8018cd2:	9a06      	ldr	r2, [sp, #24]
 8018cd4:	4413      	add	r3, r2
 8018cd6:	42bb      	cmp	r3, r7
 8018cd8:	d3e0      	bcc.n	8018c9c <__gethex+0x22c>
 8018cda:	4618      	mov	r0, r3
 8018cdc:	9901      	ldr	r1, [sp, #4]
 8018cde:	9307      	str	r3, [sp, #28]
 8018ce0:	4652      	mov	r2, sl
 8018ce2:	f001 fb64 	bl	801a3ae <strncmp>
 8018ce6:	9b07      	ldr	r3, [sp, #28]
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	d1d7      	bne.n	8018c9c <__gethex+0x22c>
 8018cec:	461e      	mov	r6, r3
 8018cee:	e78b      	b.n	8018c08 <__gethex+0x198>
 8018cf0:	f04f 0a03 	mov.w	sl, #3
 8018cf4:	e7b8      	b.n	8018c68 <__gethex+0x1f8>
 8018cf6:	da0a      	bge.n	8018d0e <__gethex+0x29e>
 8018cf8:	1a37      	subs	r7, r6, r0
 8018cfa:	4621      	mov	r1, r4
 8018cfc:	ee18 0a10 	vmov	r0, s16
 8018d00:	463a      	mov	r2, r7
 8018d02:	f000 fc9f 	bl	8019644 <__lshift>
 8018d06:	1bed      	subs	r5, r5, r7
 8018d08:	4604      	mov	r4, r0
 8018d0a:	f100 0914 	add.w	r9, r0, #20
 8018d0e:	f04f 0a00 	mov.w	sl, #0
 8018d12:	e7ae      	b.n	8018c72 <__gethex+0x202>
 8018d14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d18:	42a8      	cmp	r0, r5
 8018d1a:	dd72      	ble.n	8018e02 <__gethex+0x392>
 8018d1c:	1b45      	subs	r5, r0, r5
 8018d1e:	42ae      	cmp	r6, r5
 8018d20:	dc36      	bgt.n	8018d90 <__gethex+0x320>
 8018d22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018d26:	2b02      	cmp	r3, #2
 8018d28:	d02a      	beq.n	8018d80 <__gethex+0x310>
 8018d2a:	2b03      	cmp	r3, #3
 8018d2c:	d02c      	beq.n	8018d88 <__gethex+0x318>
 8018d2e:	2b01      	cmp	r3, #1
 8018d30:	d11c      	bne.n	8018d6c <__gethex+0x2fc>
 8018d32:	42ae      	cmp	r6, r5
 8018d34:	d11a      	bne.n	8018d6c <__gethex+0x2fc>
 8018d36:	2e01      	cmp	r6, #1
 8018d38:	d112      	bne.n	8018d60 <__gethex+0x2f0>
 8018d3a:	9a04      	ldr	r2, [sp, #16]
 8018d3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018d40:	6013      	str	r3, [r2, #0]
 8018d42:	2301      	movs	r3, #1
 8018d44:	6123      	str	r3, [r4, #16]
 8018d46:	f8c9 3000 	str.w	r3, [r9]
 8018d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018d4c:	2762      	movs	r7, #98	; 0x62
 8018d4e:	601c      	str	r4, [r3, #0]
 8018d50:	e723      	b.n	8018b9a <__gethex+0x12a>
 8018d52:	bf00      	nop
 8018d54:	0801c4bc 	.word	0x0801c4bc
 8018d58:	0801c3e0 	.word	0x0801c3e0
 8018d5c:	0801c454 	.word	0x0801c454
 8018d60:	1e71      	subs	r1, r6, #1
 8018d62:	4620      	mov	r0, r4
 8018d64:	f000 feb2 	bl	8019acc <__any_on>
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	d1e6      	bne.n	8018d3a <__gethex+0x2ca>
 8018d6c:	ee18 0a10 	vmov	r0, s16
 8018d70:	4621      	mov	r1, r4
 8018d72:	f000 fa4b 	bl	801920c <_Bfree>
 8018d76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d78:	2300      	movs	r3, #0
 8018d7a:	6013      	str	r3, [r2, #0]
 8018d7c:	2750      	movs	r7, #80	; 0x50
 8018d7e:	e70c      	b.n	8018b9a <__gethex+0x12a>
 8018d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d1f2      	bne.n	8018d6c <__gethex+0x2fc>
 8018d86:	e7d8      	b.n	8018d3a <__gethex+0x2ca>
 8018d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d1d5      	bne.n	8018d3a <__gethex+0x2ca>
 8018d8e:	e7ed      	b.n	8018d6c <__gethex+0x2fc>
 8018d90:	1e6f      	subs	r7, r5, #1
 8018d92:	f1ba 0f00 	cmp.w	sl, #0
 8018d96:	d131      	bne.n	8018dfc <__gethex+0x38c>
 8018d98:	b127      	cbz	r7, 8018da4 <__gethex+0x334>
 8018d9a:	4639      	mov	r1, r7
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f000 fe95 	bl	8019acc <__any_on>
 8018da2:	4682      	mov	sl, r0
 8018da4:	117b      	asrs	r3, r7, #5
 8018da6:	2101      	movs	r1, #1
 8018da8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018dac:	f007 071f 	and.w	r7, r7, #31
 8018db0:	fa01 f707 	lsl.w	r7, r1, r7
 8018db4:	421f      	tst	r7, r3
 8018db6:	4629      	mov	r1, r5
 8018db8:	4620      	mov	r0, r4
 8018dba:	bf18      	it	ne
 8018dbc:	f04a 0a02 	orrne.w	sl, sl, #2
 8018dc0:	1b76      	subs	r6, r6, r5
 8018dc2:	f7ff fdee 	bl	80189a2 <rshift>
 8018dc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018dca:	2702      	movs	r7, #2
 8018dcc:	f1ba 0f00 	cmp.w	sl, #0
 8018dd0:	d048      	beq.n	8018e64 <__gethex+0x3f4>
 8018dd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018dd6:	2b02      	cmp	r3, #2
 8018dd8:	d015      	beq.n	8018e06 <__gethex+0x396>
 8018dda:	2b03      	cmp	r3, #3
 8018ddc:	d017      	beq.n	8018e0e <__gethex+0x39e>
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d109      	bne.n	8018df6 <__gethex+0x386>
 8018de2:	f01a 0f02 	tst.w	sl, #2
 8018de6:	d006      	beq.n	8018df6 <__gethex+0x386>
 8018de8:	f8d9 0000 	ldr.w	r0, [r9]
 8018dec:	ea4a 0a00 	orr.w	sl, sl, r0
 8018df0:	f01a 0f01 	tst.w	sl, #1
 8018df4:	d10e      	bne.n	8018e14 <__gethex+0x3a4>
 8018df6:	f047 0710 	orr.w	r7, r7, #16
 8018dfa:	e033      	b.n	8018e64 <__gethex+0x3f4>
 8018dfc:	f04f 0a01 	mov.w	sl, #1
 8018e00:	e7d0      	b.n	8018da4 <__gethex+0x334>
 8018e02:	2701      	movs	r7, #1
 8018e04:	e7e2      	b.n	8018dcc <__gethex+0x35c>
 8018e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e08:	f1c3 0301 	rsb	r3, r3, #1
 8018e0c:	9315      	str	r3, [sp, #84]	; 0x54
 8018e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0f0      	beq.n	8018df6 <__gethex+0x386>
 8018e14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018e18:	f104 0314 	add.w	r3, r4, #20
 8018e1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018e20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018e24:	f04f 0c00 	mov.w	ip, #0
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018e32:	d01c      	beq.n	8018e6e <__gethex+0x3fe>
 8018e34:	3201      	adds	r2, #1
 8018e36:	6002      	str	r2, [r0, #0]
 8018e38:	2f02      	cmp	r7, #2
 8018e3a:	f104 0314 	add.w	r3, r4, #20
 8018e3e:	d13f      	bne.n	8018ec0 <__gethex+0x450>
 8018e40:	f8d8 2000 	ldr.w	r2, [r8]
 8018e44:	3a01      	subs	r2, #1
 8018e46:	42b2      	cmp	r2, r6
 8018e48:	d10a      	bne.n	8018e60 <__gethex+0x3f0>
 8018e4a:	1171      	asrs	r1, r6, #5
 8018e4c:	2201      	movs	r2, #1
 8018e4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018e52:	f006 061f 	and.w	r6, r6, #31
 8018e56:	fa02 f606 	lsl.w	r6, r2, r6
 8018e5a:	421e      	tst	r6, r3
 8018e5c:	bf18      	it	ne
 8018e5e:	4617      	movne	r7, r2
 8018e60:	f047 0720 	orr.w	r7, r7, #32
 8018e64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e66:	601c      	str	r4, [r3, #0]
 8018e68:	9b04      	ldr	r3, [sp, #16]
 8018e6a:	601d      	str	r5, [r3, #0]
 8018e6c:	e695      	b.n	8018b9a <__gethex+0x12a>
 8018e6e:	4299      	cmp	r1, r3
 8018e70:	f843 cc04 	str.w	ip, [r3, #-4]
 8018e74:	d8d8      	bhi.n	8018e28 <__gethex+0x3b8>
 8018e76:	68a3      	ldr	r3, [r4, #8]
 8018e78:	459b      	cmp	fp, r3
 8018e7a:	db19      	blt.n	8018eb0 <__gethex+0x440>
 8018e7c:	6861      	ldr	r1, [r4, #4]
 8018e7e:	ee18 0a10 	vmov	r0, s16
 8018e82:	3101      	adds	r1, #1
 8018e84:	f000 f982 	bl	801918c <_Balloc>
 8018e88:	4681      	mov	r9, r0
 8018e8a:	b918      	cbnz	r0, 8018e94 <__gethex+0x424>
 8018e8c:	4b1a      	ldr	r3, [pc, #104]	; (8018ef8 <__gethex+0x488>)
 8018e8e:	4602      	mov	r2, r0
 8018e90:	2184      	movs	r1, #132	; 0x84
 8018e92:	e6a8      	b.n	8018be6 <__gethex+0x176>
 8018e94:	6922      	ldr	r2, [r4, #16]
 8018e96:	3202      	adds	r2, #2
 8018e98:	f104 010c 	add.w	r1, r4, #12
 8018e9c:	0092      	lsls	r2, r2, #2
 8018e9e:	300c      	adds	r0, #12
 8018ea0:	f7fc fdb8 	bl	8015a14 <memcpy>
 8018ea4:	4621      	mov	r1, r4
 8018ea6:	ee18 0a10 	vmov	r0, s16
 8018eaa:	f000 f9af 	bl	801920c <_Bfree>
 8018eae:	464c      	mov	r4, r9
 8018eb0:	6923      	ldr	r3, [r4, #16]
 8018eb2:	1c5a      	adds	r2, r3, #1
 8018eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018eb8:	6122      	str	r2, [r4, #16]
 8018eba:	2201      	movs	r2, #1
 8018ebc:	615a      	str	r2, [r3, #20]
 8018ebe:	e7bb      	b.n	8018e38 <__gethex+0x3c8>
 8018ec0:	6922      	ldr	r2, [r4, #16]
 8018ec2:	455a      	cmp	r2, fp
 8018ec4:	dd0b      	ble.n	8018ede <__gethex+0x46e>
 8018ec6:	2101      	movs	r1, #1
 8018ec8:	4620      	mov	r0, r4
 8018eca:	f7ff fd6a 	bl	80189a2 <rshift>
 8018ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ed2:	3501      	adds	r5, #1
 8018ed4:	42ab      	cmp	r3, r5
 8018ed6:	f6ff aed0 	blt.w	8018c7a <__gethex+0x20a>
 8018eda:	2701      	movs	r7, #1
 8018edc:	e7c0      	b.n	8018e60 <__gethex+0x3f0>
 8018ede:	f016 061f 	ands.w	r6, r6, #31
 8018ee2:	d0fa      	beq.n	8018eda <__gethex+0x46a>
 8018ee4:	4453      	add	r3, sl
 8018ee6:	f1c6 0620 	rsb	r6, r6, #32
 8018eea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018eee:	f000 fa3f 	bl	8019370 <__hi0bits>
 8018ef2:	42b0      	cmp	r0, r6
 8018ef4:	dbe7      	blt.n	8018ec6 <__gethex+0x456>
 8018ef6:	e7f0      	b.n	8018eda <__gethex+0x46a>
 8018ef8:	0801c3e0 	.word	0x0801c3e0

08018efc <L_shift>:
 8018efc:	f1c2 0208 	rsb	r2, r2, #8
 8018f00:	0092      	lsls	r2, r2, #2
 8018f02:	b570      	push	{r4, r5, r6, lr}
 8018f04:	f1c2 0620 	rsb	r6, r2, #32
 8018f08:	6843      	ldr	r3, [r0, #4]
 8018f0a:	6804      	ldr	r4, [r0, #0]
 8018f0c:	fa03 f506 	lsl.w	r5, r3, r6
 8018f10:	432c      	orrs	r4, r5
 8018f12:	40d3      	lsrs	r3, r2
 8018f14:	6004      	str	r4, [r0, #0]
 8018f16:	f840 3f04 	str.w	r3, [r0, #4]!
 8018f1a:	4288      	cmp	r0, r1
 8018f1c:	d3f4      	bcc.n	8018f08 <L_shift+0xc>
 8018f1e:	bd70      	pop	{r4, r5, r6, pc}

08018f20 <__match>:
 8018f20:	b530      	push	{r4, r5, lr}
 8018f22:	6803      	ldr	r3, [r0, #0]
 8018f24:	3301      	adds	r3, #1
 8018f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f2a:	b914      	cbnz	r4, 8018f32 <__match+0x12>
 8018f2c:	6003      	str	r3, [r0, #0]
 8018f2e:	2001      	movs	r0, #1
 8018f30:	bd30      	pop	{r4, r5, pc}
 8018f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018f3a:	2d19      	cmp	r5, #25
 8018f3c:	bf98      	it	ls
 8018f3e:	3220      	addls	r2, #32
 8018f40:	42a2      	cmp	r2, r4
 8018f42:	d0f0      	beq.n	8018f26 <__match+0x6>
 8018f44:	2000      	movs	r0, #0
 8018f46:	e7f3      	b.n	8018f30 <__match+0x10>

08018f48 <__hexnan>:
 8018f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4c:	680b      	ldr	r3, [r1, #0]
 8018f4e:	115e      	asrs	r6, r3, #5
 8018f50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018f54:	f013 031f 	ands.w	r3, r3, #31
 8018f58:	b087      	sub	sp, #28
 8018f5a:	bf18      	it	ne
 8018f5c:	3604      	addne	r6, #4
 8018f5e:	2500      	movs	r5, #0
 8018f60:	1f37      	subs	r7, r6, #4
 8018f62:	4690      	mov	r8, r2
 8018f64:	6802      	ldr	r2, [r0, #0]
 8018f66:	9301      	str	r3, [sp, #4]
 8018f68:	4682      	mov	sl, r0
 8018f6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8018f6e:	46b9      	mov	r9, r7
 8018f70:	463c      	mov	r4, r7
 8018f72:	9502      	str	r5, [sp, #8]
 8018f74:	46ab      	mov	fp, r5
 8018f76:	7851      	ldrb	r1, [r2, #1]
 8018f78:	1c53      	adds	r3, r2, #1
 8018f7a:	9303      	str	r3, [sp, #12]
 8018f7c:	b341      	cbz	r1, 8018fd0 <__hexnan+0x88>
 8018f7e:	4608      	mov	r0, r1
 8018f80:	9205      	str	r2, [sp, #20]
 8018f82:	9104      	str	r1, [sp, #16]
 8018f84:	f7ff fd5f 	bl	8018a46 <__hexdig_fun>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d14f      	bne.n	801902c <__hexnan+0xe4>
 8018f8c:	9904      	ldr	r1, [sp, #16]
 8018f8e:	9a05      	ldr	r2, [sp, #20]
 8018f90:	2920      	cmp	r1, #32
 8018f92:	d818      	bhi.n	8018fc6 <__hexnan+0x7e>
 8018f94:	9b02      	ldr	r3, [sp, #8]
 8018f96:	459b      	cmp	fp, r3
 8018f98:	dd13      	ble.n	8018fc2 <__hexnan+0x7a>
 8018f9a:	454c      	cmp	r4, r9
 8018f9c:	d206      	bcs.n	8018fac <__hexnan+0x64>
 8018f9e:	2d07      	cmp	r5, #7
 8018fa0:	dc04      	bgt.n	8018fac <__hexnan+0x64>
 8018fa2:	462a      	mov	r2, r5
 8018fa4:	4649      	mov	r1, r9
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	f7ff ffa8 	bl	8018efc <L_shift>
 8018fac:	4544      	cmp	r4, r8
 8018fae:	d950      	bls.n	8019052 <__hexnan+0x10a>
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	f1a4 0904 	sub.w	r9, r4, #4
 8018fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8018fba:	f8cd b008 	str.w	fp, [sp, #8]
 8018fbe:	464c      	mov	r4, r9
 8018fc0:	461d      	mov	r5, r3
 8018fc2:	9a03      	ldr	r2, [sp, #12]
 8018fc4:	e7d7      	b.n	8018f76 <__hexnan+0x2e>
 8018fc6:	2929      	cmp	r1, #41	; 0x29
 8018fc8:	d156      	bne.n	8019078 <__hexnan+0x130>
 8018fca:	3202      	adds	r2, #2
 8018fcc:	f8ca 2000 	str.w	r2, [sl]
 8018fd0:	f1bb 0f00 	cmp.w	fp, #0
 8018fd4:	d050      	beq.n	8019078 <__hexnan+0x130>
 8018fd6:	454c      	cmp	r4, r9
 8018fd8:	d206      	bcs.n	8018fe8 <__hexnan+0xa0>
 8018fda:	2d07      	cmp	r5, #7
 8018fdc:	dc04      	bgt.n	8018fe8 <__hexnan+0xa0>
 8018fde:	462a      	mov	r2, r5
 8018fe0:	4649      	mov	r1, r9
 8018fe2:	4620      	mov	r0, r4
 8018fe4:	f7ff ff8a 	bl	8018efc <L_shift>
 8018fe8:	4544      	cmp	r4, r8
 8018fea:	d934      	bls.n	8019056 <__hexnan+0x10e>
 8018fec:	f1a8 0204 	sub.w	r2, r8, #4
 8018ff0:	4623      	mov	r3, r4
 8018ff2:	f853 1b04 	ldr.w	r1, [r3], #4
 8018ff6:	f842 1f04 	str.w	r1, [r2, #4]!
 8018ffa:	429f      	cmp	r7, r3
 8018ffc:	d2f9      	bcs.n	8018ff2 <__hexnan+0xaa>
 8018ffe:	1b3b      	subs	r3, r7, r4
 8019000:	f023 0303 	bic.w	r3, r3, #3
 8019004:	3304      	adds	r3, #4
 8019006:	3401      	adds	r4, #1
 8019008:	3e03      	subs	r6, #3
 801900a:	42b4      	cmp	r4, r6
 801900c:	bf88      	it	hi
 801900e:	2304      	movhi	r3, #4
 8019010:	4443      	add	r3, r8
 8019012:	2200      	movs	r2, #0
 8019014:	f843 2b04 	str.w	r2, [r3], #4
 8019018:	429f      	cmp	r7, r3
 801901a:	d2fb      	bcs.n	8019014 <__hexnan+0xcc>
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	b91b      	cbnz	r3, 8019028 <__hexnan+0xe0>
 8019020:	4547      	cmp	r7, r8
 8019022:	d127      	bne.n	8019074 <__hexnan+0x12c>
 8019024:	2301      	movs	r3, #1
 8019026:	603b      	str	r3, [r7, #0]
 8019028:	2005      	movs	r0, #5
 801902a:	e026      	b.n	801907a <__hexnan+0x132>
 801902c:	3501      	adds	r5, #1
 801902e:	2d08      	cmp	r5, #8
 8019030:	f10b 0b01 	add.w	fp, fp, #1
 8019034:	dd06      	ble.n	8019044 <__hexnan+0xfc>
 8019036:	4544      	cmp	r4, r8
 8019038:	d9c3      	bls.n	8018fc2 <__hexnan+0x7a>
 801903a:	2300      	movs	r3, #0
 801903c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019040:	2501      	movs	r5, #1
 8019042:	3c04      	subs	r4, #4
 8019044:	6822      	ldr	r2, [r4, #0]
 8019046:	f000 000f 	and.w	r0, r0, #15
 801904a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801904e:	6022      	str	r2, [r4, #0]
 8019050:	e7b7      	b.n	8018fc2 <__hexnan+0x7a>
 8019052:	2508      	movs	r5, #8
 8019054:	e7b5      	b.n	8018fc2 <__hexnan+0x7a>
 8019056:	9b01      	ldr	r3, [sp, #4]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d0df      	beq.n	801901c <__hexnan+0xd4>
 801905c:	f04f 32ff 	mov.w	r2, #4294967295
 8019060:	f1c3 0320 	rsb	r3, r3, #32
 8019064:	fa22 f303 	lsr.w	r3, r2, r3
 8019068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801906c:	401a      	ands	r2, r3
 801906e:	f846 2c04 	str.w	r2, [r6, #-4]
 8019072:	e7d3      	b.n	801901c <__hexnan+0xd4>
 8019074:	3f04      	subs	r7, #4
 8019076:	e7d1      	b.n	801901c <__hexnan+0xd4>
 8019078:	2004      	movs	r0, #4
 801907a:	b007      	add	sp, #28
 801907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019080 <_localeconv_r>:
 8019080:	4800      	ldr	r0, [pc, #0]	; (8019084 <_localeconv_r+0x4>)
 8019082:	4770      	bx	lr
 8019084:	20000178 	.word	0x20000178

08019088 <__retarget_lock_init_recursive>:
 8019088:	4770      	bx	lr

0801908a <__retarget_lock_acquire_recursive>:
 801908a:	4770      	bx	lr

0801908c <__retarget_lock_release_recursive>:
 801908c:	4770      	bx	lr

0801908e <__swhatbuf_r>:
 801908e:	b570      	push	{r4, r5, r6, lr}
 8019090:	460e      	mov	r6, r1
 8019092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019096:	2900      	cmp	r1, #0
 8019098:	b096      	sub	sp, #88	; 0x58
 801909a:	4614      	mov	r4, r2
 801909c:	461d      	mov	r5, r3
 801909e:	da08      	bge.n	80190b2 <__swhatbuf_r+0x24>
 80190a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80190a4:	2200      	movs	r2, #0
 80190a6:	602a      	str	r2, [r5, #0]
 80190a8:	061a      	lsls	r2, r3, #24
 80190aa:	d410      	bmi.n	80190ce <__swhatbuf_r+0x40>
 80190ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190b0:	e00e      	b.n	80190d0 <__swhatbuf_r+0x42>
 80190b2:	466a      	mov	r2, sp
 80190b4:	f001 f9ee 	bl	801a494 <_fstat_r>
 80190b8:	2800      	cmp	r0, #0
 80190ba:	dbf1      	blt.n	80190a0 <__swhatbuf_r+0x12>
 80190bc:	9a01      	ldr	r2, [sp, #4]
 80190be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80190c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190c6:	425a      	negs	r2, r3
 80190c8:	415a      	adcs	r2, r3
 80190ca:	602a      	str	r2, [r5, #0]
 80190cc:	e7ee      	b.n	80190ac <__swhatbuf_r+0x1e>
 80190ce:	2340      	movs	r3, #64	; 0x40
 80190d0:	2000      	movs	r0, #0
 80190d2:	6023      	str	r3, [r4, #0]
 80190d4:	b016      	add	sp, #88	; 0x58
 80190d6:	bd70      	pop	{r4, r5, r6, pc}

080190d8 <__smakebuf_r>:
 80190d8:	898b      	ldrh	r3, [r1, #12]
 80190da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190dc:	079d      	lsls	r5, r3, #30
 80190de:	4606      	mov	r6, r0
 80190e0:	460c      	mov	r4, r1
 80190e2:	d507      	bpl.n	80190f4 <__smakebuf_r+0x1c>
 80190e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80190e8:	6023      	str	r3, [r4, #0]
 80190ea:	6123      	str	r3, [r4, #16]
 80190ec:	2301      	movs	r3, #1
 80190ee:	6163      	str	r3, [r4, #20]
 80190f0:	b002      	add	sp, #8
 80190f2:	bd70      	pop	{r4, r5, r6, pc}
 80190f4:	ab01      	add	r3, sp, #4
 80190f6:	466a      	mov	r2, sp
 80190f8:	f7ff ffc9 	bl	801908e <__swhatbuf_r>
 80190fc:	9900      	ldr	r1, [sp, #0]
 80190fe:	4605      	mov	r5, r0
 8019100:	4630      	mov	r0, r6
 8019102:	f000 fd87 	bl	8019c14 <_malloc_r>
 8019106:	b948      	cbnz	r0, 801911c <__smakebuf_r+0x44>
 8019108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801910c:	059a      	lsls	r2, r3, #22
 801910e:	d4ef      	bmi.n	80190f0 <__smakebuf_r+0x18>
 8019110:	f023 0303 	bic.w	r3, r3, #3
 8019114:	f043 0302 	orr.w	r3, r3, #2
 8019118:	81a3      	strh	r3, [r4, #12]
 801911a:	e7e3      	b.n	80190e4 <__smakebuf_r+0xc>
 801911c:	4b0d      	ldr	r3, [pc, #52]	; (8019154 <__smakebuf_r+0x7c>)
 801911e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019120:	89a3      	ldrh	r3, [r4, #12]
 8019122:	6020      	str	r0, [r4, #0]
 8019124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019128:	81a3      	strh	r3, [r4, #12]
 801912a:	9b00      	ldr	r3, [sp, #0]
 801912c:	6163      	str	r3, [r4, #20]
 801912e:	9b01      	ldr	r3, [sp, #4]
 8019130:	6120      	str	r0, [r4, #16]
 8019132:	b15b      	cbz	r3, 801914c <__smakebuf_r+0x74>
 8019134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019138:	4630      	mov	r0, r6
 801913a:	f001 f9bd 	bl	801a4b8 <_isatty_r>
 801913e:	b128      	cbz	r0, 801914c <__smakebuf_r+0x74>
 8019140:	89a3      	ldrh	r3, [r4, #12]
 8019142:	f023 0303 	bic.w	r3, r3, #3
 8019146:	f043 0301 	orr.w	r3, r3, #1
 801914a:	81a3      	strh	r3, [r4, #12]
 801914c:	89a0      	ldrh	r0, [r4, #12]
 801914e:	4305      	orrs	r5, r0
 8019150:	81a5      	strh	r5, [r4, #12]
 8019152:	e7cd      	b.n	80190f0 <__smakebuf_r+0x18>
 8019154:	08018801 	.word	0x08018801

08019158 <malloc>:
 8019158:	4b02      	ldr	r3, [pc, #8]	; (8019164 <malloc+0xc>)
 801915a:	4601      	mov	r1, r0
 801915c:	6818      	ldr	r0, [r3, #0]
 801915e:	f000 bd59 	b.w	8019c14 <_malloc_r>
 8019162:	bf00      	nop
 8019164:	20000020 	.word	0x20000020

08019168 <__ascii_mbtowc>:
 8019168:	b082      	sub	sp, #8
 801916a:	b901      	cbnz	r1, 801916e <__ascii_mbtowc+0x6>
 801916c:	a901      	add	r1, sp, #4
 801916e:	b142      	cbz	r2, 8019182 <__ascii_mbtowc+0x1a>
 8019170:	b14b      	cbz	r3, 8019186 <__ascii_mbtowc+0x1e>
 8019172:	7813      	ldrb	r3, [r2, #0]
 8019174:	600b      	str	r3, [r1, #0]
 8019176:	7812      	ldrb	r2, [r2, #0]
 8019178:	1e10      	subs	r0, r2, #0
 801917a:	bf18      	it	ne
 801917c:	2001      	movne	r0, #1
 801917e:	b002      	add	sp, #8
 8019180:	4770      	bx	lr
 8019182:	4610      	mov	r0, r2
 8019184:	e7fb      	b.n	801917e <__ascii_mbtowc+0x16>
 8019186:	f06f 0001 	mvn.w	r0, #1
 801918a:	e7f8      	b.n	801917e <__ascii_mbtowc+0x16>

0801918c <_Balloc>:
 801918c:	b570      	push	{r4, r5, r6, lr}
 801918e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019190:	4604      	mov	r4, r0
 8019192:	460d      	mov	r5, r1
 8019194:	b976      	cbnz	r6, 80191b4 <_Balloc+0x28>
 8019196:	2010      	movs	r0, #16
 8019198:	f7ff ffde 	bl	8019158 <malloc>
 801919c:	4602      	mov	r2, r0
 801919e:	6260      	str	r0, [r4, #36]	; 0x24
 80191a0:	b920      	cbnz	r0, 80191ac <_Balloc+0x20>
 80191a2:	4b18      	ldr	r3, [pc, #96]	; (8019204 <_Balloc+0x78>)
 80191a4:	4818      	ldr	r0, [pc, #96]	; (8019208 <_Balloc+0x7c>)
 80191a6:	2166      	movs	r1, #102	; 0x66
 80191a8:	f001 f934 	bl	801a414 <__assert_func>
 80191ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191b0:	6006      	str	r6, [r0, #0]
 80191b2:	60c6      	str	r6, [r0, #12]
 80191b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80191b6:	68f3      	ldr	r3, [r6, #12]
 80191b8:	b183      	cbz	r3, 80191dc <_Balloc+0x50>
 80191ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191bc:	68db      	ldr	r3, [r3, #12]
 80191be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191c2:	b9b8      	cbnz	r0, 80191f4 <_Balloc+0x68>
 80191c4:	2101      	movs	r1, #1
 80191c6:	fa01 f605 	lsl.w	r6, r1, r5
 80191ca:	1d72      	adds	r2, r6, #5
 80191cc:	0092      	lsls	r2, r2, #2
 80191ce:	4620      	mov	r0, r4
 80191d0:	f000 fc9d 	bl	8019b0e <_calloc_r>
 80191d4:	b160      	cbz	r0, 80191f0 <_Balloc+0x64>
 80191d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80191da:	e00e      	b.n	80191fa <_Balloc+0x6e>
 80191dc:	2221      	movs	r2, #33	; 0x21
 80191de:	2104      	movs	r1, #4
 80191e0:	4620      	mov	r0, r4
 80191e2:	f000 fc94 	bl	8019b0e <_calloc_r>
 80191e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191e8:	60f0      	str	r0, [r6, #12]
 80191ea:	68db      	ldr	r3, [r3, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d1e4      	bne.n	80191ba <_Balloc+0x2e>
 80191f0:	2000      	movs	r0, #0
 80191f2:	bd70      	pop	{r4, r5, r6, pc}
 80191f4:	6802      	ldr	r2, [r0, #0]
 80191f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80191fa:	2300      	movs	r3, #0
 80191fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019200:	e7f7      	b.n	80191f2 <_Balloc+0x66>
 8019202:	bf00      	nop
 8019204:	0801c36e 	.word	0x0801c36e
 8019208:	0801c4d0 	.word	0x0801c4d0

0801920c <_Bfree>:
 801920c:	b570      	push	{r4, r5, r6, lr}
 801920e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019210:	4605      	mov	r5, r0
 8019212:	460c      	mov	r4, r1
 8019214:	b976      	cbnz	r6, 8019234 <_Bfree+0x28>
 8019216:	2010      	movs	r0, #16
 8019218:	f7ff ff9e 	bl	8019158 <malloc>
 801921c:	4602      	mov	r2, r0
 801921e:	6268      	str	r0, [r5, #36]	; 0x24
 8019220:	b920      	cbnz	r0, 801922c <_Bfree+0x20>
 8019222:	4b09      	ldr	r3, [pc, #36]	; (8019248 <_Bfree+0x3c>)
 8019224:	4809      	ldr	r0, [pc, #36]	; (801924c <_Bfree+0x40>)
 8019226:	218a      	movs	r1, #138	; 0x8a
 8019228:	f001 f8f4 	bl	801a414 <__assert_func>
 801922c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019230:	6006      	str	r6, [r0, #0]
 8019232:	60c6      	str	r6, [r0, #12]
 8019234:	b13c      	cbz	r4, 8019246 <_Bfree+0x3a>
 8019236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019238:	6862      	ldr	r2, [r4, #4]
 801923a:	68db      	ldr	r3, [r3, #12]
 801923c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019240:	6021      	str	r1, [r4, #0]
 8019242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019246:	bd70      	pop	{r4, r5, r6, pc}
 8019248:	0801c36e 	.word	0x0801c36e
 801924c:	0801c4d0 	.word	0x0801c4d0

08019250 <__multadd>:
 8019250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019254:	690d      	ldr	r5, [r1, #16]
 8019256:	4607      	mov	r7, r0
 8019258:	460c      	mov	r4, r1
 801925a:	461e      	mov	r6, r3
 801925c:	f101 0c14 	add.w	ip, r1, #20
 8019260:	2000      	movs	r0, #0
 8019262:	f8dc 3000 	ldr.w	r3, [ip]
 8019266:	b299      	uxth	r1, r3
 8019268:	fb02 6101 	mla	r1, r2, r1, r6
 801926c:	0c1e      	lsrs	r6, r3, #16
 801926e:	0c0b      	lsrs	r3, r1, #16
 8019270:	fb02 3306 	mla	r3, r2, r6, r3
 8019274:	b289      	uxth	r1, r1
 8019276:	3001      	adds	r0, #1
 8019278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801927c:	4285      	cmp	r5, r0
 801927e:	f84c 1b04 	str.w	r1, [ip], #4
 8019282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019286:	dcec      	bgt.n	8019262 <__multadd+0x12>
 8019288:	b30e      	cbz	r6, 80192ce <__multadd+0x7e>
 801928a:	68a3      	ldr	r3, [r4, #8]
 801928c:	42ab      	cmp	r3, r5
 801928e:	dc19      	bgt.n	80192c4 <__multadd+0x74>
 8019290:	6861      	ldr	r1, [r4, #4]
 8019292:	4638      	mov	r0, r7
 8019294:	3101      	adds	r1, #1
 8019296:	f7ff ff79 	bl	801918c <_Balloc>
 801929a:	4680      	mov	r8, r0
 801929c:	b928      	cbnz	r0, 80192aa <__multadd+0x5a>
 801929e:	4602      	mov	r2, r0
 80192a0:	4b0c      	ldr	r3, [pc, #48]	; (80192d4 <__multadd+0x84>)
 80192a2:	480d      	ldr	r0, [pc, #52]	; (80192d8 <__multadd+0x88>)
 80192a4:	21b5      	movs	r1, #181	; 0xb5
 80192a6:	f001 f8b5 	bl	801a414 <__assert_func>
 80192aa:	6922      	ldr	r2, [r4, #16]
 80192ac:	3202      	adds	r2, #2
 80192ae:	f104 010c 	add.w	r1, r4, #12
 80192b2:	0092      	lsls	r2, r2, #2
 80192b4:	300c      	adds	r0, #12
 80192b6:	f7fc fbad 	bl	8015a14 <memcpy>
 80192ba:	4621      	mov	r1, r4
 80192bc:	4638      	mov	r0, r7
 80192be:	f7ff ffa5 	bl	801920c <_Bfree>
 80192c2:	4644      	mov	r4, r8
 80192c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80192c8:	3501      	adds	r5, #1
 80192ca:	615e      	str	r6, [r3, #20]
 80192cc:	6125      	str	r5, [r4, #16]
 80192ce:	4620      	mov	r0, r4
 80192d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192d4:	0801c3e0 	.word	0x0801c3e0
 80192d8:	0801c4d0 	.word	0x0801c4d0

080192dc <__s2b>:
 80192dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192e0:	460c      	mov	r4, r1
 80192e2:	4615      	mov	r5, r2
 80192e4:	461f      	mov	r7, r3
 80192e6:	2209      	movs	r2, #9
 80192e8:	3308      	adds	r3, #8
 80192ea:	4606      	mov	r6, r0
 80192ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80192f0:	2100      	movs	r1, #0
 80192f2:	2201      	movs	r2, #1
 80192f4:	429a      	cmp	r2, r3
 80192f6:	db09      	blt.n	801930c <__s2b+0x30>
 80192f8:	4630      	mov	r0, r6
 80192fa:	f7ff ff47 	bl	801918c <_Balloc>
 80192fe:	b940      	cbnz	r0, 8019312 <__s2b+0x36>
 8019300:	4602      	mov	r2, r0
 8019302:	4b19      	ldr	r3, [pc, #100]	; (8019368 <__s2b+0x8c>)
 8019304:	4819      	ldr	r0, [pc, #100]	; (801936c <__s2b+0x90>)
 8019306:	21ce      	movs	r1, #206	; 0xce
 8019308:	f001 f884 	bl	801a414 <__assert_func>
 801930c:	0052      	lsls	r2, r2, #1
 801930e:	3101      	adds	r1, #1
 8019310:	e7f0      	b.n	80192f4 <__s2b+0x18>
 8019312:	9b08      	ldr	r3, [sp, #32]
 8019314:	6143      	str	r3, [r0, #20]
 8019316:	2d09      	cmp	r5, #9
 8019318:	f04f 0301 	mov.w	r3, #1
 801931c:	6103      	str	r3, [r0, #16]
 801931e:	dd16      	ble.n	801934e <__s2b+0x72>
 8019320:	f104 0909 	add.w	r9, r4, #9
 8019324:	46c8      	mov	r8, r9
 8019326:	442c      	add	r4, r5
 8019328:	f818 3b01 	ldrb.w	r3, [r8], #1
 801932c:	4601      	mov	r1, r0
 801932e:	3b30      	subs	r3, #48	; 0x30
 8019330:	220a      	movs	r2, #10
 8019332:	4630      	mov	r0, r6
 8019334:	f7ff ff8c 	bl	8019250 <__multadd>
 8019338:	45a0      	cmp	r8, r4
 801933a:	d1f5      	bne.n	8019328 <__s2b+0x4c>
 801933c:	f1a5 0408 	sub.w	r4, r5, #8
 8019340:	444c      	add	r4, r9
 8019342:	1b2d      	subs	r5, r5, r4
 8019344:	1963      	adds	r3, r4, r5
 8019346:	42bb      	cmp	r3, r7
 8019348:	db04      	blt.n	8019354 <__s2b+0x78>
 801934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801934e:	340a      	adds	r4, #10
 8019350:	2509      	movs	r5, #9
 8019352:	e7f6      	b.n	8019342 <__s2b+0x66>
 8019354:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019358:	4601      	mov	r1, r0
 801935a:	3b30      	subs	r3, #48	; 0x30
 801935c:	220a      	movs	r2, #10
 801935e:	4630      	mov	r0, r6
 8019360:	f7ff ff76 	bl	8019250 <__multadd>
 8019364:	e7ee      	b.n	8019344 <__s2b+0x68>
 8019366:	bf00      	nop
 8019368:	0801c3e0 	.word	0x0801c3e0
 801936c:	0801c4d0 	.word	0x0801c4d0

08019370 <__hi0bits>:
 8019370:	0c03      	lsrs	r3, r0, #16
 8019372:	041b      	lsls	r3, r3, #16
 8019374:	b9d3      	cbnz	r3, 80193ac <__hi0bits+0x3c>
 8019376:	0400      	lsls	r0, r0, #16
 8019378:	2310      	movs	r3, #16
 801937a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801937e:	bf04      	itt	eq
 8019380:	0200      	lsleq	r0, r0, #8
 8019382:	3308      	addeq	r3, #8
 8019384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019388:	bf04      	itt	eq
 801938a:	0100      	lsleq	r0, r0, #4
 801938c:	3304      	addeq	r3, #4
 801938e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019392:	bf04      	itt	eq
 8019394:	0080      	lsleq	r0, r0, #2
 8019396:	3302      	addeq	r3, #2
 8019398:	2800      	cmp	r0, #0
 801939a:	db05      	blt.n	80193a8 <__hi0bits+0x38>
 801939c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80193a0:	f103 0301 	add.w	r3, r3, #1
 80193a4:	bf08      	it	eq
 80193a6:	2320      	moveq	r3, #32
 80193a8:	4618      	mov	r0, r3
 80193aa:	4770      	bx	lr
 80193ac:	2300      	movs	r3, #0
 80193ae:	e7e4      	b.n	801937a <__hi0bits+0xa>

080193b0 <__lo0bits>:
 80193b0:	6803      	ldr	r3, [r0, #0]
 80193b2:	f013 0207 	ands.w	r2, r3, #7
 80193b6:	4601      	mov	r1, r0
 80193b8:	d00b      	beq.n	80193d2 <__lo0bits+0x22>
 80193ba:	07da      	lsls	r2, r3, #31
 80193bc:	d423      	bmi.n	8019406 <__lo0bits+0x56>
 80193be:	0798      	lsls	r0, r3, #30
 80193c0:	bf49      	itett	mi
 80193c2:	085b      	lsrmi	r3, r3, #1
 80193c4:	089b      	lsrpl	r3, r3, #2
 80193c6:	2001      	movmi	r0, #1
 80193c8:	600b      	strmi	r3, [r1, #0]
 80193ca:	bf5c      	itt	pl
 80193cc:	600b      	strpl	r3, [r1, #0]
 80193ce:	2002      	movpl	r0, #2
 80193d0:	4770      	bx	lr
 80193d2:	b298      	uxth	r0, r3
 80193d4:	b9a8      	cbnz	r0, 8019402 <__lo0bits+0x52>
 80193d6:	0c1b      	lsrs	r3, r3, #16
 80193d8:	2010      	movs	r0, #16
 80193da:	b2da      	uxtb	r2, r3
 80193dc:	b90a      	cbnz	r2, 80193e2 <__lo0bits+0x32>
 80193de:	3008      	adds	r0, #8
 80193e0:	0a1b      	lsrs	r3, r3, #8
 80193e2:	071a      	lsls	r2, r3, #28
 80193e4:	bf04      	itt	eq
 80193e6:	091b      	lsreq	r3, r3, #4
 80193e8:	3004      	addeq	r0, #4
 80193ea:	079a      	lsls	r2, r3, #30
 80193ec:	bf04      	itt	eq
 80193ee:	089b      	lsreq	r3, r3, #2
 80193f0:	3002      	addeq	r0, #2
 80193f2:	07da      	lsls	r2, r3, #31
 80193f4:	d403      	bmi.n	80193fe <__lo0bits+0x4e>
 80193f6:	085b      	lsrs	r3, r3, #1
 80193f8:	f100 0001 	add.w	r0, r0, #1
 80193fc:	d005      	beq.n	801940a <__lo0bits+0x5a>
 80193fe:	600b      	str	r3, [r1, #0]
 8019400:	4770      	bx	lr
 8019402:	4610      	mov	r0, r2
 8019404:	e7e9      	b.n	80193da <__lo0bits+0x2a>
 8019406:	2000      	movs	r0, #0
 8019408:	4770      	bx	lr
 801940a:	2020      	movs	r0, #32
 801940c:	4770      	bx	lr
	...

08019410 <__i2b>:
 8019410:	b510      	push	{r4, lr}
 8019412:	460c      	mov	r4, r1
 8019414:	2101      	movs	r1, #1
 8019416:	f7ff feb9 	bl	801918c <_Balloc>
 801941a:	4602      	mov	r2, r0
 801941c:	b928      	cbnz	r0, 801942a <__i2b+0x1a>
 801941e:	4b05      	ldr	r3, [pc, #20]	; (8019434 <__i2b+0x24>)
 8019420:	4805      	ldr	r0, [pc, #20]	; (8019438 <__i2b+0x28>)
 8019422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019426:	f000 fff5 	bl	801a414 <__assert_func>
 801942a:	2301      	movs	r3, #1
 801942c:	6144      	str	r4, [r0, #20]
 801942e:	6103      	str	r3, [r0, #16]
 8019430:	bd10      	pop	{r4, pc}
 8019432:	bf00      	nop
 8019434:	0801c3e0 	.word	0x0801c3e0
 8019438:	0801c4d0 	.word	0x0801c4d0

0801943c <__multiply>:
 801943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019440:	4691      	mov	r9, r2
 8019442:	690a      	ldr	r2, [r1, #16]
 8019444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019448:	429a      	cmp	r2, r3
 801944a:	bfb8      	it	lt
 801944c:	460b      	movlt	r3, r1
 801944e:	460c      	mov	r4, r1
 8019450:	bfbc      	itt	lt
 8019452:	464c      	movlt	r4, r9
 8019454:	4699      	movlt	r9, r3
 8019456:	6927      	ldr	r7, [r4, #16]
 8019458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801945c:	68a3      	ldr	r3, [r4, #8]
 801945e:	6861      	ldr	r1, [r4, #4]
 8019460:	eb07 060a 	add.w	r6, r7, sl
 8019464:	42b3      	cmp	r3, r6
 8019466:	b085      	sub	sp, #20
 8019468:	bfb8      	it	lt
 801946a:	3101      	addlt	r1, #1
 801946c:	f7ff fe8e 	bl	801918c <_Balloc>
 8019470:	b930      	cbnz	r0, 8019480 <__multiply+0x44>
 8019472:	4602      	mov	r2, r0
 8019474:	4b44      	ldr	r3, [pc, #272]	; (8019588 <__multiply+0x14c>)
 8019476:	4845      	ldr	r0, [pc, #276]	; (801958c <__multiply+0x150>)
 8019478:	f240 115d 	movw	r1, #349	; 0x15d
 801947c:	f000 ffca 	bl	801a414 <__assert_func>
 8019480:	f100 0514 	add.w	r5, r0, #20
 8019484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019488:	462b      	mov	r3, r5
 801948a:	2200      	movs	r2, #0
 801948c:	4543      	cmp	r3, r8
 801948e:	d321      	bcc.n	80194d4 <__multiply+0x98>
 8019490:	f104 0314 	add.w	r3, r4, #20
 8019494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019498:	f109 0314 	add.w	r3, r9, #20
 801949c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80194a0:	9202      	str	r2, [sp, #8]
 80194a2:	1b3a      	subs	r2, r7, r4
 80194a4:	3a15      	subs	r2, #21
 80194a6:	f022 0203 	bic.w	r2, r2, #3
 80194aa:	3204      	adds	r2, #4
 80194ac:	f104 0115 	add.w	r1, r4, #21
 80194b0:	428f      	cmp	r7, r1
 80194b2:	bf38      	it	cc
 80194b4:	2204      	movcc	r2, #4
 80194b6:	9201      	str	r2, [sp, #4]
 80194b8:	9a02      	ldr	r2, [sp, #8]
 80194ba:	9303      	str	r3, [sp, #12]
 80194bc:	429a      	cmp	r2, r3
 80194be:	d80c      	bhi.n	80194da <__multiply+0x9e>
 80194c0:	2e00      	cmp	r6, #0
 80194c2:	dd03      	ble.n	80194cc <__multiply+0x90>
 80194c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d05a      	beq.n	8019582 <__multiply+0x146>
 80194cc:	6106      	str	r6, [r0, #16]
 80194ce:	b005      	add	sp, #20
 80194d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d4:	f843 2b04 	str.w	r2, [r3], #4
 80194d8:	e7d8      	b.n	801948c <__multiply+0x50>
 80194da:	f8b3 a000 	ldrh.w	sl, [r3]
 80194de:	f1ba 0f00 	cmp.w	sl, #0
 80194e2:	d024      	beq.n	801952e <__multiply+0xf2>
 80194e4:	f104 0e14 	add.w	lr, r4, #20
 80194e8:	46a9      	mov	r9, r5
 80194ea:	f04f 0c00 	mov.w	ip, #0
 80194ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80194f2:	f8d9 1000 	ldr.w	r1, [r9]
 80194f6:	fa1f fb82 	uxth.w	fp, r2
 80194fa:	b289      	uxth	r1, r1
 80194fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8019500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019504:	f8d9 2000 	ldr.w	r2, [r9]
 8019508:	4461      	add	r1, ip
 801950a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801950e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019516:	b289      	uxth	r1, r1
 8019518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801951c:	4577      	cmp	r7, lr
 801951e:	f849 1b04 	str.w	r1, [r9], #4
 8019522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019526:	d8e2      	bhi.n	80194ee <__multiply+0xb2>
 8019528:	9a01      	ldr	r2, [sp, #4]
 801952a:	f845 c002 	str.w	ip, [r5, r2]
 801952e:	9a03      	ldr	r2, [sp, #12]
 8019530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019534:	3304      	adds	r3, #4
 8019536:	f1b9 0f00 	cmp.w	r9, #0
 801953a:	d020      	beq.n	801957e <__multiply+0x142>
 801953c:	6829      	ldr	r1, [r5, #0]
 801953e:	f104 0c14 	add.w	ip, r4, #20
 8019542:	46ae      	mov	lr, r5
 8019544:	f04f 0a00 	mov.w	sl, #0
 8019548:	f8bc b000 	ldrh.w	fp, [ip]
 801954c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019550:	fb09 220b 	mla	r2, r9, fp, r2
 8019554:	4492      	add	sl, r2
 8019556:	b289      	uxth	r1, r1
 8019558:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801955c:	f84e 1b04 	str.w	r1, [lr], #4
 8019560:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019564:	f8be 1000 	ldrh.w	r1, [lr]
 8019568:	0c12      	lsrs	r2, r2, #16
 801956a:	fb09 1102 	mla	r1, r9, r2, r1
 801956e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019572:	4567      	cmp	r7, ip
 8019574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019578:	d8e6      	bhi.n	8019548 <__multiply+0x10c>
 801957a:	9a01      	ldr	r2, [sp, #4]
 801957c:	50a9      	str	r1, [r5, r2]
 801957e:	3504      	adds	r5, #4
 8019580:	e79a      	b.n	80194b8 <__multiply+0x7c>
 8019582:	3e01      	subs	r6, #1
 8019584:	e79c      	b.n	80194c0 <__multiply+0x84>
 8019586:	bf00      	nop
 8019588:	0801c3e0 	.word	0x0801c3e0
 801958c:	0801c4d0 	.word	0x0801c4d0

08019590 <__pow5mult>:
 8019590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019594:	4615      	mov	r5, r2
 8019596:	f012 0203 	ands.w	r2, r2, #3
 801959a:	4606      	mov	r6, r0
 801959c:	460f      	mov	r7, r1
 801959e:	d007      	beq.n	80195b0 <__pow5mult+0x20>
 80195a0:	4c25      	ldr	r4, [pc, #148]	; (8019638 <__pow5mult+0xa8>)
 80195a2:	3a01      	subs	r2, #1
 80195a4:	2300      	movs	r3, #0
 80195a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195aa:	f7ff fe51 	bl	8019250 <__multadd>
 80195ae:	4607      	mov	r7, r0
 80195b0:	10ad      	asrs	r5, r5, #2
 80195b2:	d03d      	beq.n	8019630 <__pow5mult+0xa0>
 80195b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195b6:	b97c      	cbnz	r4, 80195d8 <__pow5mult+0x48>
 80195b8:	2010      	movs	r0, #16
 80195ba:	f7ff fdcd 	bl	8019158 <malloc>
 80195be:	4602      	mov	r2, r0
 80195c0:	6270      	str	r0, [r6, #36]	; 0x24
 80195c2:	b928      	cbnz	r0, 80195d0 <__pow5mult+0x40>
 80195c4:	4b1d      	ldr	r3, [pc, #116]	; (801963c <__pow5mult+0xac>)
 80195c6:	481e      	ldr	r0, [pc, #120]	; (8019640 <__pow5mult+0xb0>)
 80195c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80195cc:	f000 ff22 	bl	801a414 <__assert_func>
 80195d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80195d4:	6004      	str	r4, [r0, #0]
 80195d6:	60c4      	str	r4, [r0, #12]
 80195d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80195dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80195e0:	b94c      	cbnz	r4, 80195f6 <__pow5mult+0x66>
 80195e2:	f240 2171 	movw	r1, #625	; 0x271
 80195e6:	4630      	mov	r0, r6
 80195e8:	f7ff ff12 	bl	8019410 <__i2b>
 80195ec:	2300      	movs	r3, #0
 80195ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80195f2:	4604      	mov	r4, r0
 80195f4:	6003      	str	r3, [r0, #0]
 80195f6:	f04f 0900 	mov.w	r9, #0
 80195fa:	07eb      	lsls	r3, r5, #31
 80195fc:	d50a      	bpl.n	8019614 <__pow5mult+0x84>
 80195fe:	4639      	mov	r1, r7
 8019600:	4622      	mov	r2, r4
 8019602:	4630      	mov	r0, r6
 8019604:	f7ff ff1a 	bl	801943c <__multiply>
 8019608:	4639      	mov	r1, r7
 801960a:	4680      	mov	r8, r0
 801960c:	4630      	mov	r0, r6
 801960e:	f7ff fdfd 	bl	801920c <_Bfree>
 8019612:	4647      	mov	r7, r8
 8019614:	106d      	asrs	r5, r5, #1
 8019616:	d00b      	beq.n	8019630 <__pow5mult+0xa0>
 8019618:	6820      	ldr	r0, [r4, #0]
 801961a:	b938      	cbnz	r0, 801962c <__pow5mult+0x9c>
 801961c:	4622      	mov	r2, r4
 801961e:	4621      	mov	r1, r4
 8019620:	4630      	mov	r0, r6
 8019622:	f7ff ff0b 	bl	801943c <__multiply>
 8019626:	6020      	str	r0, [r4, #0]
 8019628:	f8c0 9000 	str.w	r9, [r0]
 801962c:	4604      	mov	r4, r0
 801962e:	e7e4      	b.n	80195fa <__pow5mult+0x6a>
 8019630:	4638      	mov	r0, r7
 8019632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019636:	bf00      	nop
 8019638:	0801c620 	.word	0x0801c620
 801963c:	0801c36e 	.word	0x0801c36e
 8019640:	0801c4d0 	.word	0x0801c4d0

08019644 <__lshift>:
 8019644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019648:	460c      	mov	r4, r1
 801964a:	6849      	ldr	r1, [r1, #4]
 801964c:	6923      	ldr	r3, [r4, #16]
 801964e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019652:	68a3      	ldr	r3, [r4, #8]
 8019654:	4607      	mov	r7, r0
 8019656:	4691      	mov	r9, r2
 8019658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801965c:	f108 0601 	add.w	r6, r8, #1
 8019660:	42b3      	cmp	r3, r6
 8019662:	db0b      	blt.n	801967c <__lshift+0x38>
 8019664:	4638      	mov	r0, r7
 8019666:	f7ff fd91 	bl	801918c <_Balloc>
 801966a:	4605      	mov	r5, r0
 801966c:	b948      	cbnz	r0, 8019682 <__lshift+0x3e>
 801966e:	4602      	mov	r2, r0
 8019670:	4b2a      	ldr	r3, [pc, #168]	; (801971c <__lshift+0xd8>)
 8019672:	482b      	ldr	r0, [pc, #172]	; (8019720 <__lshift+0xdc>)
 8019674:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019678:	f000 fecc 	bl	801a414 <__assert_func>
 801967c:	3101      	adds	r1, #1
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	e7ee      	b.n	8019660 <__lshift+0x1c>
 8019682:	2300      	movs	r3, #0
 8019684:	f100 0114 	add.w	r1, r0, #20
 8019688:	f100 0210 	add.w	r2, r0, #16
 801968c:	4618      	mov	r0, r3
 801968e:	4553      	cmp	r3, sl
 8019690:	db37      	blt.n	8019702 <__lshift+0xbe>
 8019692:	6920      	ldr	r0, [r4, #16]
 8019694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019698:	f104 0314 	add.w	r3, r4, #20
 801969c:	f019 091f 	ands.w	r9, r9, #31
 80196a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80196a8:	d02f      	beq.n	801970a <__lshift+0xc6>
 80196aa:	f1c9 0e20 	rsb	lr, r9, #32
 80196ae:	468a      	mov	sl, r1
 80196b0:	f04f 0c00 	mov.w	ip, #0
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	fa02 f209 	lsl.w	r2, r2, r9
 80196ba:	ea42 020c 	orr.w	r2, r2, ip
 80196be:	f84a 2b04 	str.w	r2, [sl], #4
 80196c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196c6:	4298      	cmp	r0, r3
 80196c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80196cc:	d8f2      	bhi.n	80196b4 <__lshift+0x70>
 80196ce:	1b03      	subs	r3, r0, r4
 80196d0:	3b15      	subs	r3, #21
 80196d2:	f023 0303 	bic.w	r3, r3, #3
 80196d6:	3304      	adds	r3, #4
 80196d8:	f104 0215 	add.w	r2, r4, #21
 80196dc:	4290      	cmp	r0, r2
 80196de:	bf38      	it	cc
 80196e0:	2304      	movcc	r3, #4
 80196e2:	f841 c003 	str.w	ip, [r1, r3]
 80196e6:	f1bc 0f00 	cmp.w	ip, #0
 80196ea:	d001      	beq.n	80196f0 <__lshift+0xac>
 80196ec:	f108 0602 	add.w	r6, r8, #2
 80196f0:	3e01      	subs	r6, #1
 80196f2:	4638      	mov	r0, r7
 80196f4:	612e      	str	r6, [r5, #16]
 80196f6:	4621      	mov	r1, r4
 80196f8:	f7ff fd88 	bl	801920c <_Bfree>
 80196fc:	4628      	mov	r0, r5
 80196fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019702:	f842 0f04 	str.w	r0, [r2, #4]!
 8019706:	3301      	adds	r3, #1
 8019708:	e7c1      	b.n	801968e <__lshift+0x4a>
 801970a:	3904      	subs	r1, #4
 801970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019710:	f841 2f04 	str.w	r2, [r1, #4]!
 8019714:	4298      	cmp	r0, r3
 8019716:	d8f9      	bhi.n	801970c <__lshift+0xc8>
 8019718:	e7ea      	b.n	80196f0 <__lshift+0xac>
 801971a:	bf00      	nop
 801971c:	0801c3e0 	.word	0x0801c3e0
 8019720:	0801c4d0 	.word	0x0801c4d0

08019724 <__mcmp>:
 8019724:	b530      	push	{r4, r5, lr}
 8019726:	6902      	ldr	r2, [r0, #16]
 8019728:	690c      	ldr	r4, [r1, #16]
 801972a:	1b12      	subs	r2, r2, r4
 801972c:	d10e      	bne.n	801974c <__mcmp+0x28>
 801972e:	f100 0314 	add.w	r3, r0, #20
 8019732:	3114      	adds	r1, #20
 8019734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801973c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019744:	42a5      	cmp	r5, r4
 8019746:	d003      	beq.n	8019750 <__mcmp+0x2c>
 8019748:	d305      	bcc.n	8019756 <__mcmp+0x32>
 801974a:	2201      	movs	r2, #1
 801974c:	4610      	mov	r0, r2
 801974e:	bd30      	pop	{r4, r5, pc}
 8019750:	4283      	cmp	r3, r0
 8019752:	d3f3      	bcc.n	801973c <__mcmp+0x18>
 8019754:	e7fa      	b.n	801974c <__mcmp+0x28>
 8019756:	f04f 32ff 	mov.w	r2, #4294967295
 801975a:	e7f7      	b.n	801974c <__mcmp+0x28>

0801975c <__mdiff>:
 801975c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019760:	460c      	mov	r4, r1
 8019762:	4606      	mov	r6, r0
 8019764:	4611      	mov	r1, r2
 8019766:	4620      	mov	r0, r4
 8019768:	4690      	mov	r8, r2
 801976a:	f7ff ffdb 	bl	8019724 <__mcmp>
 801976e:	1e05      	subs	r5, r0, #0
 8019770:	d110      	bne.n	8019794 <__mdiff+0x38>
 8019772:	4629      	mov	r1, r5
 8019774:	4630      	mov	r0, r6
 8019776:	f7ff fd09 	bl	801918c <_Balloc>
 801977a:	b930      	cbnz	r0, 801978a <__mdiff+0x2e>
 801977c:	4b3a      	ldr	r3, [pc, #232]	; (8019868 <__mdiff+0x10c>)
 801977e:	4602      	mov	r2, r0
 8019780:	f240 2132 	movw	r1, #562	; 0x232
 8019784:	4839      	ldr	r0, [pc, #228]	; (801986c <__mdiff+0x110>)
 8019786:	f000 fe45 	bl	801a414 <__assert_func>
 801978a:	2301      	movs	r3, #1
 801978c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019794:	bfa4      	itt	ge
 8019796:	4643      	movge	r3, r8
 8019798:	46a0      	movge	r8, r4
 801979a:	4630      	mov	r0, r6
 801979c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80197a0:	bfa6      	itte	ge
 80197a2:	461c      	movge	r4, r3
 80197a4:	2500      	movge	r5, #0
 80197a6:	2501      	movlt	r5, #1
 80197a8:	f7ff fcf0 	bl	801918c <_Balloc>
 80197ac:	b920      	cbnz	r0, 80197b8 <__mdiff+0x5c>
 80197ae:	4b2e      	ldr	r3, [pc, #184]	; (8019868 <__mdiff+0x10c>)
 80197b0:	4602      	mov	r2, r0
 80197b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80197b6:	e7e5      	b.n	8019784 <__mdiff+0x28>
 80197b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80197bc:	6926      	ldr	r6, [r4, #16]
 80197be:	60c5      	str	r5, [r0, #12]
 80197c0:	f104 0914 	add.w	r9, r4, #20
 80197c4:	f108 0514 	add.w	r5, r8, #20
 80197c8:	f100 0e14 	add.w	lr, r0, #20
 80197cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80197d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80197d4:	f108 0210 	add.w	r2, r8, #16
 80197d8:	46f2      	mov	sl, lr
 80197da:	2100      	movs	r1, #0
 80197dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80197e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80197e4:	fa1f f883 	uxth.w	r8, r3
 80197e8:	fa11 f18b 	uxtah	r1, r1, fp
 80197ec:	0c1b      	lsrs	r3, r3, #16
 80197ee:	eba1 0808 	sub.w	r8, r1, r8
 80197f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80197f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80197fa:	fa1f f888 	uxth.w	r8, r8
 80197fe:	1419      	asrs	r1, r3, #16
 8019800:	454e      	cmp	r6, r9
 8019802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019806:	f84a 3b04 	str.w	r3, [sl], #4
 801980a:	d8e7      	bhi.n	80197dc <__mdiff+0x80>
 801980c:	1b33      	subs	r3, r6, r4
 801980e:	3b15      	subs	r3, #21
 8019810:	f023 0303 	bic.w	r3, r3, #3
 8019814:	3304      	adds	r3, #4
 8019816:	3415      	adds	r4, #21
 8019818:	42a6      	cmp	r6, r4
 801981a:	bf38      	it	cc
 801981c:	2304      	movcc	r3, #4
 801981e:	441d      	add	r5, r3
 8019820:	4473      	add	r3, lr
 8019822:	469e      	mov	lr, r3
 8019824:	462e      	mov	r6, r5
 8019826:	4566      	cmp	r6, ip
 8019828:	d30e      	bcc.n	8019848 <__mdiff+0xec>
 801982a:	f10c 0203 	add.w	r2, ip, #3
 801982e:	1b52      	subs	r2, r2, r5
 8019830:	f022 0203 	bic.w	r2, r2, #3
 8019834:	3d03      	subs	r5, #3
 8019836:	45ac      	cmp	ip, r5
 8019838:	bf38      	it	cc
 801983a:	2200      	movcc	r2, #0
 801983c:	441a      	add	r2, r3
 801983e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019842:	b17b      	cbz	r3, 8019864 <__mdiff+0x108>
 8019844:	6107      	str	r7, [r0, #16]
 8019846:	e7a3      	b.n	8019790 <__mdiff+0x34>
 8019848:	f856 8b04 	ldr.w	r8, [r6], #4
 801984c:	fa11 f288 	uxtah	r2, r1, r8
 8019850:	1414      	asrs	r4, r2, #16
 8019852:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019856:	b292      	uxth	r2, r2
 8019858:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801985c:	f84e 2b04 	str.w	r2, [lr], #4
 8019860:	1421      	asrs	r1, r4, #16
 8019862:	e7e0      	b.n	8019826 <__mdiff+0xca>
 8019864:	3f01      	subs	r7, #1
 8019866:	e7ea      	b.n	801983e <__mdiff+0xe2>
 8019868:	0801c3e0 	.word	0x0801c3e0
 801986c:	0801c4d0 	.word	0x0801c4d0

08019870 <__ulp>:
 8019870:	b082      	sub	sp, #8
 8019872:	ed8d 0b00 	vstr	d0, [sp]
 8019876:	9b01      	ldr	r3, [sp, #4]
 8019878:	4912      	ldr	r1, [pc, #72]	; (80198c4 <__ulp+0x54>)
 801987a:	4019      	ands	r1, r3
 801987c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019880:	2900      	cmp	r1, #0
 8019882:	dd05      	ble.n	8019890 <__ulp+0x20>
 8019884:	2200      	movs	r2, #0
 8019886:	460b      	mov	r3, r1
 8019888:	ec43 2b10 	vmov	d0, r2, r3
 801988c:	b002      	add	sp, #8
 801988e:	4770      	bx	lr
 8019890:	4249      	negs	r1, r1
 8019892:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019896:	ea4f 5021 	mov.w	r0, r1, asr #20
 801989a:	f04f 0200 	mov.w	r2, #0
 801989e:	f04f 0300 	mov.w	r3, #0
 80198a2:	da04      	bge.n	80198ae <__ulp+0x3e>
 80198a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80198a8:	fa41 f300 	asr.w	r3, r1, r0
 80198ac:	e7ec      	b.n	8019888 <__ulp+0x18>
 80198ae:	f1a0 0114 	sub.w	r1, r0, #20
 80198b2:	291e      	cmp	r1, #30
 80198b4:	bfda      	itte	le
 80198b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80198ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80198be:	2101      	movgt	r1, #1
 80198c0:	460a      	mov	r2, r1
 80198c2:	e7e1      	b.n	8019888 <__ulp+0x18>
 80198c4:	7ff00000 	.word	0x7ff00000

080198c8 <__b2d>:
 80198c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ca:	6905      	ldr	r5, [r0, #16]
 80198cc:	f100 0714 	add.w	r7, r0, #20
 80198d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80198d4:	1f2e      	subs	r6, r5, #4
 80198d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80198da:	4620      	mov	r0, r4
 80198dc:	f7ff fd48 	bl	8019370 <__hi0bits>
 80198e0:	f1c0 0320 	rsb	r3, r0, #32
 80198e4:	280a      	cmp	r0, #10
 80198e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019964 <__b2d+0x9c>
 80198ea:	600b      	str	r3, [r1, #0]
 80198ec:	dc14      	bgt.n	8019918 <__b2d+0x50>
 80198ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80198f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80198f6:	42b7      	cmp	r7, r6
 80198f8:	ea41 030c 	orr.w	r3, r1, ip
 80198fc:	bf34      	ite	cc
 80198fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019902:	2100      	movcs	r1, #0
 8019904:	3015      	adds	r0, #21
 8019906:	fa04 f000 	lsl.w	r0, r4, r0
 801990a:	fa21 f10e 	lsr.w	r1, r1, lr
 801990e:	ea40 0201 	orr.w	r2, r0, r1
 8019912:	ec43 2b10 	vmov	d0, r2, r3
 8019916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019918:	42b7      	cmp	r7, r6
 801991a:	bf3a      	itte	cc
 801991c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019920:	f1a5 0608 	subcc.w	r6, r5, #8
 8019924:	2100      	movcs	r1, #0
 8019926:	380b      	subs	r0, #11
 8019928:	d017      	beq.n	801995a <__b2d+0x92>
 801992a:	f1c0 0c20 	rsb	ip, r0, #32
 801992e:	fa04 f500 	lsl.w	r5, r4, r0
 8019932:	42be      	cmp	r6, r7
 8019934:	fa21 f40c 	lsr.w	r4, r1, ip
 8019938:	ea45 0504 	orr.w	r5, r5, r4
 801993c:	bf8c      	ite	hi
 801993e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019942:	2400      	movls	r4, #0
 8019944:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019948:	fa01 f000 	lsl.w	r0, r1, r0
 801994c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019950:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019954:	ea40 0204 	orr.w	r2, r0, r4
 8019958:	e7db      	b.n	8019912 <__b2d+0x4a>
 801995a:	ea44 030c 	orr.w	r3, r4, ip
 801995e:	460a      	mov	r2, r1
 8019960:	e7d7      	b.n	8019912 <__b2d+0x4a>
 8019962:	bf00      	nop
 8019964:	3ff00000 	.word	0x3ff00000

08019968 <__d2b>:
 8019968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801996c:	4689      	mov	r9, r1
 801996e:	2101      	movs	r1, #1
 8019970:	ec57 6b10 	vmov	r6, r7, d0
 8019974:	4690      	mov	r8, r2
 8019976:	f7ff fc09 	bl	801918c <_Balloc>
 801997a:	4604      	mov	r4, r0
 801997c:	b930      	cbnz	r0, 801998c <__d2b+0x24>
 801997e:	4602      	mov	r2, r0
 8019980:	4b25      	ldr	r3, [pc, #148]	; (8019a18 <__d2b+0xb0>)
 8019982:	4826      	ldr	r0, [pc, #152]	; (8019a1c <__d2b+0xb4>)
 8019984:	f240 310a 	movw	r1, #778	; 0x30a
 8019988:	f000 fd44 	bl	801a414 <__assert_func>
 801998c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019994:	bb35      	cbnz	r5, 80199e4 <__d2b+0x7c>
 8019996:	2e00      	cmp	r6, #0
 8019998:	9301      	str	r3, [sp, #4]
 801999a:	d028      	beq.n	80199ee <__d2b+0x86>
 801999c:	4668      	mov	r0, sp
 801999e:	9600      	str	r6, [sp, #0]
 80199a0:	f7ff fd06 	bl	80193b0 <__lo0bits>
 80199a4:	9900      	ldr	r1, [sp, #0]
 80199a6:	b300      	cbz	r0, 80199ea <__d2b+0x82>
 80199a8:	9a01      	ldr	r2, [sp, #4]
 80199aa:	f1c0 0320 	rsb	r3, r0, #32
 80199ae:	fa02 f303 	lsl.w	r3, r2, r3
 80199b2:	430b      	orrs	r3, r1
 80199b4:	40c2      	lsrs	r2, r0
 80199b6:	6163      	str	r3, [r4, #20]
 80199b8:	9201      	str	r2, [sp, #4]
 80199ba:	9b01      	ldr	r3, [sp, #4]
 80199bc:	61a3      	str	r3, [r4, #24]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	bf14      	ite	ne
 80199c2:	2202      	movne	r2, #2
 80199c4:	2201      	moveq	r2, #1
 80199c6:	6122      	str	r2, [r4, #16]
 80199c8:	b1d5      	cbz	r5, 8019a00 <__d2b+0x98>
 80199ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80199ce:	4405      	add	r5, r0
 80199d0:	f8c9 5000 	str.w	r5, [r9]
 80199d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80199d8:	f8c8 0000 	str.w	r0, [r8]
 80199dc:	4620      	mov	r0, r4
 80199de:	b003      	add	sp, #12
 80199e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199e8:	e7d5      	b.n	8019996 <__d2b+0x2e>
 80199ea:	6161      	str	r1, [r4, #20]
 80199ec:	e7e5      	b.n	80199ba <__d2b+0x52>
 80199ee:	a801      	add	r0, sp, #4
 80199f0:	f7ff fcde 	bl	80193b0 <__lo0bits>
 80199f4:	9b01      	ldr	r3, [sp, #4]
 80199f6:	6163      	str	r3, [r4, #20]
 80199f8:	2201      	movs	r2, #1
 80199fa:	6122      	str	r2, [r4, #16]
 80199fc:	3020      	adds	r0, #32
 80199fe:	e7e3      	b.n	80199c8 <__d2b+0x60>
 8019a00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a08:	f8c9 0000 	str.w	r0, [r9]
 8019a0c:	6918      	ldr	r0, [r3, #16]
 8019a0e:	f7ff fcaf 	bl	8019370 <__hi0bits>
 8019a12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019a16:	e7df      	b.n	80199d8 <__d2b+0x70>
 8019a18:	0801c3e0 	.word	0x0801c3e0
 8019a1c:	0801c4d0 	.word	0x0801c4d0

08019a20 <__ratio>:
 8019a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	4688      	mov	r8, r1
 8019a26:	4669      	mov	r1, sp
 8019a28:	4681      	mov	r9, r0
 8019a2a:	f7ff ff4d 	bl	80198c8 <__b2d>
 8019a2e:	a901      	add	r1, sp, #4
 8019a30:	4640      	mov	r0, r8
 8019a32:	ec55 4b10 	vmov	r4, r5, d0
 8019a36:	f7ff ff47 	bl	80198c8 <__b2d>
 8019a3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019a3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019a42:	eba3 0c02 	sub.w	ip, r3, r2
 8019a46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a4a:	1a9b      	subs	r3, r3, r2
 8019a4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019a50:	ec51 0b10 	vmov	r0, r1, d0
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	bfd6      	itet	le
 8019a58:	460a      	movle	r2, r1
 8019a5a:	462a      	movgt	r2, r5
 8019a5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019a60:	468b      	mov	fp, r1
 8019a62:	462f      	mov	r7, r5
 8019a64:	bfd4      	ite	le
 8019a66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019a6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019a6e:	4620      	mov	r0, r4
 8019a70:	ee10 2a10 	vmov	r2, s0
 8019a74:	465b      	mov	r3, fp
 8019a76:	4639      	mov	r1, r7
 8019a78:	f7e6 ff10 	bl	800089c <__aeabi_ddiv>
 8019a7c:	ec41 0b10 	vmov	d0, r0, r1
 8019a80:	b003      	add	sp, #12
 8019a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a86 <__copybits>:
 8019a86:	3901      	subs	r1, #1
 8019a88:	b570      	push	{r4, r5, r6, lr}
 8019a8a:	1149      	asrs	r1, r1, #5
 8019a8c:	6914      	ldr	r4, [r2, #16]
 8019a8e:	3101      	adds	r1, #1
 8019a90:	f102 0314 	add.w	r3, r2, #20
 8019a94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a9c:	1f05      	subs	r5, r0, #4
 8019a9e:	42a3      	cmp	r3, r4
 8019aa0:	d30c      	bcc.n	8019abc <__copybits+0x36>
 8019aa2:	1aa3      	subs	r3, r4, r2
 8019aa4:	3b11      	subs	r3, #17
 8019aa6:	f023 0303 	bic.w	r3, r3, #3
 8019aaa:	3211      	adds	r2, #17
 8019aac:	42a2      	cmp	r2, r4
 8019aae:	bf88      	it	hi
 8019ab0:	2300      	movhi	r3, #0
 8019ab2:	4418      	add	r0, r3
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	4288      	cmp	r0, r1
 8019ab8:	d305      	bcc.n	8019ac6 <__copybits+0x40>
 8019aba:	bd70      	pop	{r4, r5, r6, pc}
 8019abc:	f853 6b04 	ldr.w	r6, [r3], #4
 8019ac0:	f845 6f04 	str.w	r6, [r5, #4]!
 8019ac4:	e7eb      	b.n	8019a9e <__copybits+0x18>
 8019ac6:	f840 3b04 	str.w	r3, [r0], #4
 8019aca:	e7f4      	b.n	8019ab6 <__copybits+0x30>

08019acc <__any_on>:
 8019acc:	f100 0214 	add.w	r2, r0, #20
 8019ad0:	6900      	ldr	r0, [r0, #16]
 8019ad2:	114b      	asrs	r3, r1, #5
 8019ad4:	4298      	cmp	r0, r3
 8019ad6:	b510      	push	{r4, lr}
 8019ad8:	db11      	blt.n	8019afe <__any_on+0x32>
 8019ada:	dd0a      	ble.n	8019af2 <__any_on+0x26>
 8019adc:	f011 011f 	ands.w	r1, r1, #31
 8019ae0:	d007      	beq.n	8019af2 <__any_on+0x26>
 8019ae2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019ae6:	fa24 f001 	lsr.w	r0, r4, r1
 8019aea:	fa00 f101 	lsl.w	r1, r0, r1
 8019aee:	428c      	cmp	r4, r1
 8019af0:	d10b      	bne.n	8019b0a <__any_on+0x3e>
 8019af2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019af6:	4293      	cmp	r3, r2
 8019af8:	d803      	bhi.n	8019b02 <__any_on+0x36>
 8019afa:	2000      	movs	r0, #0
 8019afc:	bd10      	pop	{r4, pc}
 8019afe:	4603      	mov	r3, r0
 8019b00:	e7f7      	b.n	8019af2 <__any_on+0x26>
 8019b02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b06:	2900      	cmp	r1, #0
 8019b08:	d0f5      	beq.n	8019af6 <__any_on+0x2a>
 8019b0a:	2001      	movs	r0, #1
 8019b0c:	e7f6      	b.n	8019afc <__any_on+0x30>

08019b0e <_calloc_r>:
 8019b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b10:	fba1 2402 	umull	r2, r4, r1, r2
 8019b14:	b94c      	cbnz	r4, 8019b2a <_calloc_r+0x1c>
 8019b16:	4611      	mov	r1, r2
 8019b18:	9201      	str	r2, [sp, #4]
 8019b1a:	f000 f87b 	bl	8019c14 <_malloc_r>
 8019b1e:	9a01      	ldr	r2, [sp, #4]
 8019b20:	4605      	mov	r5, r0
 8019b22:	b930      	cbnz	r0, 8019b32 <_calloc_r+0x24>
 8019b24:	4628      	mov	r0, r5
 8019b26:	b003      	add	sp, #12
 8019b28:	bd30      	pop	{r4, r5, pc}
 8019b2a:	220c      	movs	r2, #12
 8019b2c:	6002      	str	r2, [r0, #0]
 8019b2e:	2500      	movs	r5, #0
 8019b30:	e7f8      	b.n	8019b24 <_calloc_r+0x16>
 8019b32:	4621      	mov	r1, r4
 8019b34:	f7fb ff7c 	bl	8015a30 <memset>
 8019b38:	e7f4      	b.n	8019b24 <_calloc_r+0x16>
	...

08019b3c <_free_r>:
 8019b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b3e:	2900      	cmp	r1, #0
 8019b40:	d044      	beq.n	8019bcc <_free_r+0x90>
 8019b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b46:	9001      	str	r0, [sp, #4]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8019b4e:	bfb8      	it	lt
 8019b50:	18e4      	addlt	r4, r4, r3
 8019b52:	f000 fced 	bl	801a530 <__malloc_lock>
 8019b56:	4a1e      	ldr	r2, [pc, #120]	; (8019bd0 <_free_r+0x94>)
 8019b58:	9801      	ldr	r0, [sp, #4]
 8019b5a:	6813      	ldr	r3, [r2, #0]
 8019b5c:	b933      	cbnz	r3, 8019b6c <_free_r+0x30>
 8019b5e:	6063      	str	r3, [r4, #4]
 8019b60:	6014      	str	r4, [r2, #0]
 8019b62:	b003      	add	sp, #12
 8019b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b68:	f000 bce8 	b.w	801a53c <__malloc_unlock>
 8019b6c:	42a3      	cmp	r3, r4
 8019b6e:	d908      	bls.n	8019b82 <_free_r+0x46>
 8019b70:	6825      	ldr	r5, [r4, #0]
 8019b72:	1961      	adds	r1, r4, r5
 8019b74:	428b      	cmp	r3, r1
 8019b76:	bf01      	itttt	eq
 8019b78:	6819      	ldreq	r1, [r3, #0]
 8019b7a:	685b      	ldreq	r3, [r3, #4]
 8019b7c:	1949      	addeq	r1, r1, r5
 8019b7e:	6021      	streq	r1, [r4, #0]
 8019b80:	e7ed      	b.n	8019b5e <_free_r+0x22>
 8019b82:	461a      	mov	r2, r3
 8019b84:	685b      	ldr	r3, [r3, #4]
 8019b86:	b10b      	cbz	r3, 8019b8c <_free_r+0x50>
 8019b88:	42a3      	cmp	r3, r4
 8019b8a:	d9fa      	bls.n	8019b82 <_free_r+0x46>
 8019b8c:	6811      	ldr	r1, [r2, #0]
 8019b8e:	1855      	adds	r5, r2, r1
 8019b90:	42a5      	cmp	r5, r4
 8019b92:	d10b      	bne.n	8019bac <_free_r+0x70>
 8019b94:	6824      	ldr	r4, [r4, #0]
 8019b96:	4421      	add	r1, r4
 8019b98:	1854      	adds	r4, r2, r1
 8019b9a:	42a3      	cmp	r3, r4
 8019b9c:	6011      	str	r1, [r2, #0]
 8019b9e:	d1e0      	bne.n	8019b62 <_free_r+0x26>
 8019ba0:	681c      	ldr	r4, [r3, #0]
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	6053      	str	r3, [r2, #4]
 8019ba6:	4421      	add	r1, r4
 8019ba8:	6011      	str	r1, [r2, #0]
 8019baa:	e7da      	b.n	8019b62 <_free_r+0x26>
 8019bac:	d902      	bls.n	8019bb4 <_free_r+0x78>
 8019bae:	230c      	movs	r3, #12
 8019bb0:	6003      	str	r3, [r0, #0]
 8019bb2:	e7d6      	b.n	8019b62 <_free_r+0x26>
 8019bb4:	6825      	ldr	r5, [r4, #0]
 8019bb6:	1961      	adds	r1, r4, r5
 8019bb8:	428b      	cmp	r3, r1
 8019bba:	bf04      	itt	eq
 8019bbc:	6819      	ldreq	r1, [r3, #0]
 8019bbe:	685b      	ldreq	r3, [r3, #4]
 8019bc0:	6063      	str	r3, [r4, #4]
 8019bc2:	bf04      	itt	eq
 8019bc4:	1949      	addeq	r1, r1, r5
 8019bc6:	6021      	streq	r1, [r4, #0]
 8019bc8:	6054      	str	r4, [r2, #4]
 8019bca:	e7ca      	b.n	8019b62 <_free_r+0x26>
 8019bcc:	b003      	add	sp, #12
 8019bce:	bd30      	pop	{r4, r5, pc}
 8019bd0:	200002d0 	.word	0x200002d0

08019bd4 <sbrk_aligned>:
 8019bd4:	b570      	push	{r4, r5, r6, lr}
 8019bd6:	4e0e      	ldr	r6, [pc, #56]	; (8019c10 <sbrk_aligned+0x3c>)
 8019bd8:	460c      	mov	r4, r1
 8019bda:	6831      	ldr	r1, [r6, #0]
 8019bdc:	4605      	mov	r5, r0
 8019bde:	b911      	cbnz	r1, 8019be6 <sbrk_aligned+0x12>
 8019be0:	f000 fb92 	bl	801a308 <_sbrk_r>
 8019be4:	6030      	str	r0, [r6, #0]
 8019be6:	4621      	mov	r1, r4
 8019be8:	4628      	mov	r0, r5
 8019bea:	f000 fb8d 	bl	801a308 <_sbrk_r>
 8019bee:	1c43      	adds	r3, r0, #1
 8019bf0:	d00a      	beq.n	8019c08 <sbrk_aligned+0x34>
 8019bf2:	1cc4      	adds	r4, r0, #3
 8019bf4:	f024 0403 	bic.w	r4, r4, #3
 8019bf8:	42a0      	cmp	r0, r4
 8019bfa:	d007      	beq.n	8019c0c <sbrk_aligned+0x38>
 8019bfc:	1a21      	subs	r1, r4, r0
 8019bfe:	4628      	mov	r0, r5
 8019c00:	f000 fb82 	bl	801a308 <_sbrk_r>
 8019c04:	3001      	adds	r0, #1
 8019c06:	d101      	bne.n	8019c0c <sbrk_aligned+0x38>
 8019c08:	f04f 34ff 	mov.w	r4, #4294967295
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	bd70      	pop	{r4, r5, r6, pc}
 8019c10:	200002d4 	.word	0x200002d4

08019c14 <_malloc_r>:
 8019c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c18:	1ccd      	adds	r5, r1, #3
 8019c1a:	f025 0503 	bic.w	r5, r5, #3
 8019c1e:	3508      	adds	r5, #8
 8019c20:	2d0c      	cmp	r5, #12
 8019c22:	bf38      	it	cc
 8019c24:	250c      	movcc	r5, #12
 8019c26:	2d00      	cmp	r5, #0
 8019c28:	4607      	mov	r7, r0
 8019c2a:	db01      	blt.n	8019c30 <_malloc_r+0x1c>
 8019c2c:	42a9      	cmp	r1, r5
 8019c2e:	d905      	bls.n	8019c3c <_malloc_r+0x28>
 8019c30:	230c      	movs	r3, #12
 8019c32:	603b      	str	r3, [r7, #0]
 8019c34:	2600      	movs	r6, #0
 8019c36:	4630      	mov	r0, r6
 8019c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c3c:	4e2e      	ldr	r6, [pc, #184]	; (8019cf8 <_malloc_r+0xe4>)
 8019c3e:	f000 fc77 	bl	801a530 <__malloc_lock>
 8019c42:	6833      	ldr	r3, [r6, #0]
 8019c44:	461c      	mov	r4, r3
 8019c46:	bb34      	cbnz	r4, 8019c96 <_malloc_r+0x82>
 8019c48:	4629      	mov	r1, r5
 8019c4a:	4638      	mov	r0, r7
 8019c4c:	f7ff ffc2 	bl	8019bd4 <sbrk_aligned>
 8019c50:	1c43      	adds	r3, r0, #1
 8019c52:	4604      	mov	r4, r0
 8019c54:	d14d      	bne.n	8019cf2 <_malloc_r+0xde>
 8019c56:	6834      	ldr	r4, [r6, #0]
 8019c58:	4626      	mov	r6, r4
 8019c5a:	2e00      	cmp	r6, #0
 8019c5c:	d140      	bne.n	8019ce0 <_malloc_r+0xcc>
 8019c5e:	6823      	ldr	r3, [r4, #0]
 8019c60:	4631      	mov	r1, r6
 8019c62:	4638      	mov	r0, r7
 8019c64:	eb04 0803 	add.w	r8, r4, r3
 8019c68:	f000 fb4e 	bl	801a308 <_sbrk_r>
 8019c6c:	4580      	cmp	r8, r0
 8019c6e:	d13a      	bne.n	8019ce6 <_malloc_r+0xd2>
 8019c70:	6821      	ldr	r1, [r4, #0]
 8019c72:	3503      	adds	r5, #3
 8019c74:	1a6d      	subs	r5, r5, r1
 8019c76:	f025 0503 	bic.w	r5, r5, #3
 8019c7a:	3508      	adds	r5, #8
 8019c7c:	2d0c      	cmp	r5, #12
 8019c7e:	bf38      	it	cc
 8019c80:	250c      	movcc	r5, #12
 8019c82:	4629      	mov	r1, r5
 8019c84:	4638      	mov	r0, r7
 8019c86:	f7ff ffa5 	bl	8019bd4 <sbrk_aligned>
 8019c8a:	3001      	adds	r0, #1
 8019c8c:	d02b      	beq.n	8019ce6 <_malloc_r+0xd2>
 8019c8e:	6823      	ldr	r3, [r4, #0]
 8019c90:	442b      	add	r3, r5
 8019c92:	6023      	str	r3, [r4, #0]
 8019c94:	e00e      	b.n	8019cb4 <_malloc_r+0xa0>
 8019c96:	6822      	ldr	r2, [r4, #0]
 8019c98:	1b52      	subs	r2, r2, r5
 8019c9a:	d41e      	bmi.n	8019cda <_malloc_r+0xc6>
 8019c9c:	2a0b      	cmp	r2, #11
 8019c9e:	d916      	bls.n	8019cce <_malloc_r+0xba>
 8019ca0:	1961      	adds	r1, r4, r5
 8019ca2:	42a3      	cmp	r3, r4
 8019ca4:	6025      	str	r5, [r4, #0]
 8019ca6:	bf18      	it	ne
 8019ca8:	6059      	strne	r1, [r3, #4]
 8019caa:	6863      	ldr	r3, [r4, #4]
 8019cac:	bf08      	it	eq
 8019cae:	6031      	streq	r1, [r6, #0]
 8019cb0:	5162      	str	r2, [r4, r5]
 8019cb2:	604b      	str	r3, [r1, #4]
 8019cb4:	4638      	mov	r0, r7
 8019cb6:	f104 060b 	add.w	r6, r4, #11
 8019cba:	f000 fc3f 	bl	801a53c <__malloc_unlock>
 8019cbe:	f026 0607 	bic.w	r6, r6, #7
 8019cc2:	1d23      	adds	r3, r4, #4
 8019cc4:	1af2      	subs	r2, r6, r3
 8019cc6:	d0b6      	beq.n	8019c36 <_malloc_r+0x22>
 8019cc8:	1b9b      	subs	r3, r3, r6
 8019cca:	50a3      	str	r3, [r4, r2]
 8019ccc:	e7b3      	b.n	8019c36 <_malloc_r+0x22>
 8019cce:	6862      	ldr	r2, [r4, #4]
 8019cd0:	42a3      	cmp	r3, r4
 8019cd2:	bf0c      	ite	eq
 8019cd4:	6032      	streq	r2, [r6, #0]
 8019cd6:	605a      	strne	r2, [r3, #4]
 8019cd8:	e7ec      	b.n	8019cb4 <_malloc_r+0xa0>
 8019cda:	4623      	mov	r3, r4
 8019cdc:	6864      	ldr	r4, [r4, #4]
 8019cde:	e7b2      	b.n	8019c46 <_malloc_r+0x32>
 8019ce0:	4634      	mov	r4, r6
 8019ce2:	6876      	ldr	r6, [r6, #4]
 8019ce4:	e7b9      	b.n	8019c5a <_malloc_r+0x46>
 8019ce6:	230c      	movs	r3, #12
 8019ce8:	603b      	str	r3, [r7, #0]
 8019cea:	4638      	mov	r0, r7
 8019cec:	f000 fc26 	bl	801a53c <__malloc_unlock>
 8019cf0:	e7a1      	b.n	8019c36 <_malloc_r+0x22>
 8019cf2:	6025      	str	r5, [r4, #0]
 8019cf4:	e7de      	b.n	8019cb4 <_malloc_r+0xa0>
 8019cf6:	bf00      	nop
 8019cf8:	200002d0 	.word	0x200002d0

08019cfc <__ssputs_r>:
 8019cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d00:	688e      	ldr	r6, [r1, #8]
 8019d02:	429e      	cmp	r6, r3
 8019d04:	4682      	mov	sl, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	4690      	mov	r8, r2
 8019d0a:	461f      	mov	r7, r3
 8019d0c:	d838      	bhi.n	8019d80 <__ssputs_r+0x84>
 8019d0e:	898a      	ldrh	r2, [r1, #12]
 8019d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d14:	d032      	beq.n	8019d7c <__ssputs_r+0x80>
 8019d16:	6825      	ldr	r5, [r4, #0]
 8019d18:	6909      	ldr	r1, [r1, #16]
 8019d1a:	eba5 0901 	sub.w	r9, r5, r1
 8019d1e:	6965      	ldr	r5, [r4, #20]
 8019d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d28:	3301      	adds	r3, #1
 8019d2a:	444b      	add	r3, r9
 8019d2c:	106d      	asrs	r5, r5, #1
 8019d2e:	429d      	cmp	r5, r3
 8019d30:	bf38      	it	cc
 8019d32:	461d      	movcc	r5, r3
 8019d34:	0553      	lsls	r3, r2, #21
 8019d36:	d531      	bpl.n	8019d9c <__ssputs_r+0xa0>
 8019d38:	4629      	mov	r1, r5
 8019d3a:	f7ff ff6b 	bl	8019c14 <_malloc_r>
 8019d3e:	4606      	mov	r6, r0
 8019d40:	b950      	cbnz	r0, 8019d58 <__ssputs_r+0x5c>
 8019d42:	230c      	movs	r3, #12
 8019d44:	f8ca 3000 	str.w	r3, [sl]
 8019d48:	89a3      	ldrh	r3, [r4, #12]
 8019d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d4e:	81a3      	strh	r3, [r4, #12]
 8019d50:	f04f 30ff 	mov.w	r0, #4294967295
 8019d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d58:	6921      	ldr	r1, [r4, #16]
 8019d5a:	464a      	mov	r2, r9
 8019d5c:	f7fb fe5a 	bl	8015a14 <memcpy>
 8019d60:	89a3      	ldrh	r3, [r4, #12]
 8019d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d6a:	81a3      	strh	r3, [r4, #12]
 8019d6c:	6126      	str	r6, [r4, #16]
 8019d6e:	6165      	str	r5, [r4, #20]
 8019d70:	444e      	add	r6, r9
 8019d72:	eba5 0509 	sub.w	r5, r5, r9
 8019d76:	6026      	str	r6, [r4, #0]
 8019d78:	60a5      	str	r5, [r4, #8]
 8019d7a:	463e      	mov	r6, r7
 8019d7c:	42be      	cmp	r6, r7
 8019d7e:	d900      	bls.n	8019d82 <__ssputs_r+0x86>
 8019d80:	463e      	mov	r6, r7
 8019d82:	6820      	ldr	r0, [r4, #0]
 8019d84:	4632      	mov	r2, r6
 8019d86:	4641      	mov	r1, r8
 8019d88:	f000 fbb8 	bl	801a4fc <memmove>
 8019d8c:	68a3      	ldr	r3, [r4, #8]
 8019d8e:	1b9b      	subs	r3, r3, r6
 8019d90:	60a3      	str	r3, [r4, #8]
 8019d92:	6823      	ldr	r3, [r4, #0]
 8019d94:	4433      	add	r3, r6
 8019d96:	6023      	str	r3, [r4, #0]
 8019d98:	2000      	movs	r0, #0
 8019d9a:	e7db      	b.n	8019d54 <__ssputs_r+0x58>
 8019d9c:	462a      	mov	r2, r5
 8019d9e:	f000 fbd3 	bl	801a548 <_realloc_r>
 8019da2:	4606      	mov	r6, r0
 8019da4:	2800      	cmp	r0, #0
 8019da6:	d1e1      	bne.n	8019d6c <__ssputs_r+0x70>
 8019da8:	6921      	ldr	r1, [r4, #16]
 8019daa:	4650      	mov	r0, sl
 8019dac:	f7ff fec6 	bl	8019b3c <_free_r>
 8019db0:	e7c7      	b.n	8019d42 <__ssputs_r+0x46>
	...

08019db4 <_svfiprintf_r>:
 8019db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db8:	4698      	mov	r8, r3
 8019dba:	898b      	ldrh	r3, [r1, #12]
 8019dbc:	061b      	lsls	r3, r3, #24
 8019dbe:	b09d      	sub	sp, #116	; 0x74
 8019dc0:	4607      	mov	r7, r0
 8019dc2:	460d      	mov	r5, r1
 8019dc4:	4614      	mov	r4, r2
 8019dc6:	d50e      	bpl.n	8019de6 <_svfiprintf_r+0x32>
 8019dc8:	690b      	ldr	r3, [r1, #16]
 8019dca:	b963      	cbnz	r3, 8019de6 <_svfiprintf_r+0x32>
 8019dcc:	2140      	movs	r1, #64	; 0x40
 8019dce:	f7ff ff21 	bl	8019c14 <_malloc_r>
 8019dd2:	6028      	str	r0, [r5, #0]
 8019dd4:	6128      	str	r0, [r5, #16]
 8019dd6:	b920      	cbnz	r0, 8019de2 <_svfiprintf_r+0x2e>
 8019dd8:	230c      	movs	r3, #12
 8019dda:	603b      	str	r3, [r7, #0]
 8019ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8019de0:	e0d1      	b.n	8019f86 <_svfiprintf_r+0x1d2>
 8019de2:	2340      	movs	r3, #64	; 0x40
 8019de4:	616b      	str	r3, [r5, #20]
 8019de6:	2300      	movs	r3, #0
 8019de8:	9309      	str	r3, [sp, #36]	; 0x24
 8019dea:	2320      	movs	r3, #32
 8019dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019df4:	2330      	movs	r3, #48	; 0x30
 8019df6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019fa0 <_svfiprintf_r+0x1ec>
 8019dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019dfe:	f04f 0901 	mov.w	r9, #1
 8019e02:	4623      	mov	r3, r4
 8019e04:	469a      	mov	sl, r3
 8019e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e0a:	b10a      	cbz	r2, 8019e10 <_svfiprintf_r+0x5c>
 8019e0c:	2a25      	cmp	r2, #37	; 0x25
 8019e0e:	d1f9      	bne.n	8019e04 <_svfiprintf_r+0x50>
 8019e10:	ebba 0b04 	subs.w	fp, sl, r4
 8019e14:	d00b      	beq.n	8019e2e <_svfiprintf_r+0x7a>
 8019e16:	465b      	mov	r3, fp
 8019e18:	4622      	mov	r2, r4
 8019e1a:	4629      	mov	r1, r5
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	f7ff ff6d 	bl	8019cfc <__ssputs_r>
 8019e22:	3001      	adds	r0, #1
 8019e24:	f000 80aa 	beq.w	8019f7c <_svfiprintf_r+0x1c8>
 8019e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e2a:	445a      	add	r2, fp
 8019e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8019e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	f000 80a2 	beq.w	8019f7c <_svfiprintf_r+0x1c8>
 8019e38:	2300      	movs	r3, #0
 8019e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e42:	f10a 0a01 	add.w	sl, sl, #1
 8019e46:	9304      	str	r3, [sp, #16]
 8019e48:	9307      	str	r3, [sp, #28]
 8019e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8019e50:	4654      	mov	r4, sl
 8019e52:	2205      	movs	r2, #5
 8019e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e58:	4851      	ldr	r0, [pc, #324]	; (8019fa0 <_svfiprintf_r+0x1ec>)
 8019e5a:	f7e6 f9e9 	bl	8000230 <memchr>
 8019e5e:	9a04      	ldr	r2, [sp, #16]
 8019e60:	b9d8      	cbnz	r0, 8019e9a <_svfiprintf_r+0xe6>
 8019e62:	06d0      	lsls	r0, r2, #27
 8019e64:	bf44      	itt	mi
 8019e66:	2320      	movmi	r3, #32
 8019e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e6c:	0711      	lsls	r1, r2, #28
 8019e6e:	bf44      	itt	mi
 8019e70:	232b      	movmi	r3, #43	; 0x2b
 8019e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e76:	f89a 3000 	ldrb.w	r3, [sl]
 8019e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8019e7c:	d015      	beq.n	8019eaa <_svfiprintf_r+0xf6>
 8019e7e:	9a07      	ldr	r2, [sp, #28]
 8019e80:	4654      	mov	r4, sl
 8019e82:	2000      	movs	r0, #0
 8019e84:	f04f 0c0a 	mov.w	ip, #10
 8019e88:	4621      	mov	r1, r4
 8019e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e8e:	3b30      	subs	r3, #48	; 0x30
 8019e90:	2b09      	cmp	r3, #9
 8019e92:	d94e      	bls.n	8019f32 <_svfiprintf_r+0x17e>
 8019e94:	b1b0      	cbz	r0, 8019ec4 <_svfiprintf_r+0x110>
 8019e96:	9207      	str	r2, [sp, #28]
 8019e98:	e014      	b.n	8019ec4 <_svfiprintf_r+0x110>
 8019e9a:	eba0 0308 	sub.w	r3, r0, r8
 8019e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8019ea2:	4313      	orrs	r3, r2
 8019ea4:	9304      	str	r3, [sp, #16]
 8019ea6:	46a2      	mov	sl, r4
 8019ea8:	e7d2      	b.n	8019e50 <_svfiprintf_r+0x9c>
 8019eaa:	9b03      	ldr	r3, [sp, #12]
 8019eac:	1d19      	adds	r1, r3, #4
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	9103      	str	r1, [sp, #12]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	bfbb      	ittet	lt
 8019eb6:	425b      	neglt	r3, r3
 8019eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8019ebc:	9307      	strge	r3, [sp, #28]
 8019ebe:	9307      	strlt	r3, [sp, #28]
 8019ec0:	bfb8      	it	lt
 8019ec2:	9204      	strlt	r2, [sp, #16]
 8019ec4:	7823      	ldrb	r3, [r4, #0]
 8019ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8019ec8:	d10c      	bne.n	8019ee4 <_svfiprintf_r+0x130>
 8019eca:	7863      	ldrb	r3, [r4, #1]
 8019ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ece:	d135      	bne.n	8019f3c <_svfiprintf_r+0x188>
 8019ed0:	9b03      	ldr	r3, [sp, #12]
 8019ed2:	1d1a      	adds	r2, r3, #4
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	9203      	str	r2, [sp, #12]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	bfb8      	it	lt
 8019edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ee0:	3402      	adds	r4, #2
 8019ee2:	9305      	str	r3, [sp, #20]
 8019ee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019fb0 <_svfiprintf_r+0x1fc>
 8019ee8:	7821      	ldrb	r1, [r4, #0]
 8019eea:	2203      	movs	r2, #3
 8019eec:	4650      	mov	r0, sl
 8019eee:	f7e6 f99f 	bl	8000230 <memchr>
 8019ef2:	b140      	cbz	r0, 8019f06 <_svfiprintf_r+0x152>
 8019ef4:	2340      	movs	r3, #64	; 0x40
 8019ef6:	eba0 000a 	sub.w	r0, r0, sl
 8019efa:	fa03 f000 	lsl.w	r0, r3, r0
 8019efe:	9b04      	ldr	r3, [sp, #16]
 8019f00:	4303      	orrs	r3, r0
 8019f02:	3401      	adds	r4, #1
 8019f04:	9304      	str	r3, [sp, #16]
 8019f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f0a:	4826      	ldr	r0, [pc, #152]	; (8019fa4 <_svfiprintf_r+0x1f0>)
 8019f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f10:	2206      	movs	r2, #6
 8019f12:	f7e6 f98d 	bl	8000230 <memchr>
 8019f16:	2800      	cmp	r0, #0
 8019f18:	d038      	beq.n	8019f8c <_svfiprintf_r+0x1d8>
 8019f1a:	4b23      	ldr	r3, [pc, #140]	; (8019fa8 <_svfiprintf_r+0x1f4>)
 8019f1c:	bb1b      	cbnz	r3, 8019f66 <_svfiprintf_r+0x1b2>
 8019f1e:	9b03      	ldr	r3, [sp, #12]
 8019f20:	3307      	adds	r3, #7
 8019f22:	f023 0307 	bic.w	r3, r3, #7
 8019f26:	3308      	adds	r3, #8
 8019f28:	9303      	str	r3, [sp, #12]
 8019f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f2c:	4433      	add	r3, r6
 8019f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019f30:	e767      	b.n	8019e02 <_svfiprintf_r+0x4e>
 8019f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f36:	460c      	mov	r4, r1
 8019f38:	2001      	movs	r0, #1
 8019f3a:	e7a5      	b.n	8019e88 <_svfiprintf_r+0xd4>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	3401      	adds	r4, #1
 8019f40:	9305      	str	r3, [sp, #20]
 8019f42:	4619      	mov	r1, r3
 8019f44:	f04f 0c0a 	mov.w	ip, #10
 8019f48:	4620      	mov	r0, r4
 8019f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f4e:	3a30      	subs	r2, #48	; 0x30
 8019f50:	2a09      	cmp	r2, #9
 8019f52:	d903      	bls.n	8019f5c <_svfiprintf_r+0x1a8>
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d0c5      	beq.n	8019ee4 <_svfiprintf_r+0x130>
 8019f58:	9105      	str	r1, [sp, #20]
 8019f5a:	e7c3      	b.n	8019ee4 <_svfiprintf_r+0x130>
 8019f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f60:	4604      	mov	r4, r0
 8019f62:	2301      	movs	r3, #1
 8019f64:	e7f0      	b.n	8019f48 <_svfiprintf_r+0x194>
 8019f66:	ab03      	add	r3, sp, #12
 8019f68:	9300      	str	r3, [sp, #0]
 8019f6a:	462a      	mov	r2, r5
 8019f6c:	4b0f      	ldr	r3, [pc, #60]	; (8019fac <_svfiprintf_r+0x1f8>)
 8019f6e:	a904      	add	r1, sp, #16
 8019f70:	4638      	mov	r0, r7
 8019f72:	f7fb fe05 	bl	8015b80 <_printf_float>
 8019f76:	1c42      	adds	r2, r0, #1
 8019f78:	4606      	mov	r6, r0
 8019f7a:	d1d6      	bne.n	8019f2a <_svfiprintf_r+0x176>
 8019f7c:	89ab      	ldrh	r3, [r5, #12]
 8019f7e:	065b      	lsls	r3, r3, #25
 8019f80:	f53f af2c 	bmi.w	8019ddc <_svfiprintf_r+0x28>
 8019f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f86:	b01d      	add	sp, #116	; 0x74
 8019f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f8c:	ab03      	add	r3, sp, #12
 8019f8e:	9300      	str	r3, [sp, #0]
 8019f90:	462a      	mov	r2, r5
 8019f92:	4b06      	ldr	r3, [pc, #24]	; (8019fac <_svfiprintf_r+0x1f8>)
 8019f94:	a904      	add	r1, sp, #16
 8019f96:	4638      	mov	r0, r7
 8019f98:	f7fc f896 	bl	80160c8 <_printf_i>
 8019f9c:	e7eb      	b.n	8019f76 <_svfiprintf_r+0x1c2>
 8019f9e:	bf00      	nop
 8019fa0:	0801c62c 	.word	0x0801c62c
 8019fa4:	0801c636 	.word	0x0801c636
 8019fa8:	08015b81 	.word	0x08015b81
 8019fac:	08019cfd 	.word	0x08019cfd
 8019fb0:	0801c632 	.word	0x0801c632

08019fb4 <__sfputc_r>:
 8019fb4:	6893      	ldr	r3, [r2, #8]
 8019fb6:	3b01      	subs	r3, #1
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	b410      	push	{r4}
 8019fbc:	6093      	str	r3, [r2, #8]
 8019fbe:	da08      	bge.n	8019fd2 <__sfputc_r+0x1e>
 8019fc0:	6994      	ldr	r4, [r2, #24]
 8019fc2:	42a3      	cmp	r3, r4
 8019fc4:	db01      	blt.n	8019fca <__sfputc_r+0x16>
 8019fc6:	290a      	cmp	r1, #10
 8019fc8:	d103      	bne.n	8019fd2 <__sfputc_r+0x1e>
 8019fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fce:	f7fd bbf7 	b.w	80177c0 <__swbuf_r>
 8019fd2:	6813      	ldr	r3, [r2, #0]
 8019fd4:	1c58      	adds	r0, r3, #1
 8019fd6:	6010      	str	r0, [r2, #0]
 8019fd8:	7019      	strb	r1, [r3, #0]
 8019fda:	4608      	mov	r0, r1
 8019fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe0:	4770      	bx	lr

08019fe2 <__sfputs_r>:
 8019fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	460f      	mov	r7, r1
 8019fe8:	4614      	mov	r4, r2
 8019fea:	18d5      	adds	r5, r2, r3
 8019fec:	42ac      	cmp	r4, r5
 8019fee:	d101      	bne.n	8019ff4 <__sfputs_r+0x12>
 8019ff0:	2000      	movs	r0, #0
 8019ff2:	e007      	b.n	801a004 <__sfputs_r+0x22>
 8019ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ff8:	463a      	mov	r2, r7
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7ff ffda 	bl	8019fb4 <__sfputc_r>
 801a000:	1c43      	adds	r3, r0, #1
 801a002:	d1f3      	bne.n	8019fec <__sfputs_r+0xa>
 801a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a008 <_vfiprintf_r>:
 801a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	460d      	mov	r5, r1
 801a00e:	b09d      	sub	sp, #116	; 0x74
 801a010:	4614      	mov	r4, r2
 801a012:	4698      	mov	r8, r3
 801a014:	4606      	mov	r6, r0
 801a016:	b118      	cbz	r0, 801a020 <_vfiprintf_r+0x18>
 801a018:	6983      	ldr	r3, [r0, #24]
 801a01a:	b90b      	cbnz	r3, 801a020 <_vfiprintf_r+0x18>
 801a01c:	f7fe fc24 	bl	8018868 <__sinit>
 801a020:	4b89      	ldr	r3, [pc, #548]	; (801a248 <_vfiprintf_r+0x240>)
 801a022:	429d      	cmp	r5, r3
 801a024:	d11b      	bne.n	801a05e <_vfiprintf_r+0x56>
 801a026:	6875      	ldr	r5, [r6, #4]
 801a028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a02a:	07d9      	lsls	r1, r3, #31
 801a02c:	d405      	bmi.n	801a03a <_vfiprintf_r+0x32>
 801a02e:	89ab      	ldrh	r3, [r5, #12]
 801a030:	059a      	lsls	r2, r3, #22
 801a032:	d402      	bmi.n	801a03a <_vfiprintf_r+0x32>
 801a034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a036:	f7ff f828 	bl	801908a <__retarget_lock_acquire_recursive>
 801a03a:	89ab      	ldrh	r3, [r5, #12]
 801a03c:	071b      	lsls	r3, r3, #28
 801a03e:	d501      	bpl.n	801a044 <_vfiprintf_r+0x3c>
 801a040:	692b      	ldr	r3, [r5, #16]
 801a042:	b9eb      	cbnz	r3, 801a080 <_vfiprintf_r+0x78>
 801a044:	4629      	mov	r1, r5
 801a046:	4630      	mov	r0, r6
 801a048:	f7fd fc0c 	bl	8017864 <__swsetup_r>
 801a04c:	b1c0      	cbz	r0, 801a080 <_vfiprintf_r+0x78>
 801a04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a050:	07dc      	lsls	r4, r3, #31
 801a052:	d50e      	bpl.n	801a072 <_vfiprintf_r+0x6a>
 801a054:	f04f 30ff 	mov.w	r0, #4294967295
 801a058:	b01d      	add	sp, #116	; 0x74
 801a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05e:	4b7b      	ldr	r3, [pc, #492]	; (801a24c <_vfiprintf_r+0x244>)
 801a060:	429d      	cmp	r5, r3
 801a062:	d101      	bne.n	801a068 <_vfiprintf_r+0x60>
 801a064:	68b5      	ldr	r5, [r6, #8]
 801a066:	e7df      	b.n	801a028 <_vfiprintf_r+0x20>
 801a068:	4b79      	ldr	r3, [pc, #484]	; (801a250 <_vfiprintf_r+0x248>)
 801a06a:	429d      	cmp	r5, r3
 801a06c:	bf08      	it	eq
 801a06e:	68f5      	ldreq	r5, [r6, #12]
 801a070:	e7da      	b.n	801a028 <_vfiprintf_r+0x20>
 801a072:	89ab      	ldrh	r3, [r5, #12]
 801a074:	0598      	lsls	r0, r3, #22
 801a076:	d4ed      	bmi.n	801a054 <_vfiprintf_r+0x4c>
 801a078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a07a:	f7ff f807 	bl	801908c <__retarget_lock_release_recursive>
 801a07e:	e7e9      	b.n	801a054 <_vfiprintf_r+0x4c>
 801a080:	2300      	movs	r3, #0
 801a082:	9309      	str	r3, [sp, #36]	; 0x24
 801a084:	2320      	movs	r3, #32
 801a086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a08a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a08e:	2330      	movs	r3, #48	; 0x30
 801a090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a254 <_vfiprintf_r+0x24c>
 801a094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a098:	f04f 0901 	mov.w	r9, #1
 801a09c:	4623      	mov	r3, r4
 801a09e:	469a      	mov	sl, r3
 801a0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0a4:	b10a      	cbz	r2, 801a0aa <_vfiprintf_r+0xa2>
 801a0a6:	2a25      	cmp	r2, #37	; 0x25
 801a0a8:	d1f9      	bne.n	801a09e <_vfiprintf_r+0x96>
 801a0aa:	ebba 0b04 	subs.w	fp, sl, r4
 801a0ae:	d00b      	beq.n	801a0c8 <_vfiprintf_r+0xc0>
 801a0b0:	465b      	mov	r3, fp
 801a0b2:	4622      	mov	r2, r4
 801a0b4:	4629      	mov	r1, r5
 801a0b6:	4630      	mov	r0, r6
 801a0b8:	f7ff ff93 	bl	8019fe2 <__sfputs_r>
 801a0bc:	3001      	adds	r0, #1
 801a0be:	f000 80aa 	beq.w	801a216 <_vfiprintf_r+0x20e>
 801a0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0c4:	445a      	add	r2, fp
 801a0c6:	9209      	str	r2, [sp, #36]	; 0x24
 801a0c8:	f89a 3000 	ldrb.w	r3, [sl]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	f000 80a2 	beq.w	801a216 <_vfiprintf_r+0x20e>
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 801a0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0dc:	f10a 0a01 	add.w	sl, sl, #1
 801a0e0:	9304      	str	r3, [sp, #16]
 801a0e2:	9307      	str	r3, [sp, #28]
 801a0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0e8:	931a      	str	r3, [sp, #104]	; 0x68
 801a0ea:	4654      	mov	r4, sl
 801a0ec:	2205      	movs	r2, #5
 801a0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0f2:	4858      	ldr	r0, [pc, #352]	; (801a254 <_vfiprintf_r+0x24c>)
 801a0f4:	f7e6 f89c 	bl	8000230 <memchr>
 801a0f8:	9a04      	ldr	r2, [sp, #16]
 801a0fa:	b9d8      	cbnz	r0, 801a134 <_vfiprintf_r+0x12c>
 801a0fc:	06d1      	lsls	r1, r2, #27
 801a0fe:	bf44      	itt	mi
 801a100:	2320      	movmi	r3, #32
 801a102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a106:	0713      	lsls	r3, r2, #28
 801a108:	bf44      	itt	mi
 801a10a:	232b      	movmi	r3, #43	; 0x2b
 801a10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a110:	f89a 3000 	ldrb.w	r3, [sl]
 801a114:	2b2a      	cmp	r3, #42	; 0x2a
 801a116:	d015      	beq.n	801a144 <_vfiprintf_r+0x13c>
 801a118:	9a07      	ldr	r2, [sp, #28]
 801a11a:	4654      	mov	r4, sl
 801a11c:	2000      	movs	r0, #0
 801a11e:	f04f 0c0a 	mov.w	ip, #10
 801a122:	4621      	mov	r1, r4
 801a124:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a128:	3b30      	subs	r3, #48	; 0x30
 801a12a:	2b09      	cmp	r3, #9
 801a12c:	d94e      	bls.n	801a1cc <_vfiprintf_r+0x1c4>
 801a12e:	b1b0      	cbz	r0, 801a15e <_vfiprintf_r+0x156>
 801a130:	9207      	str	r2, [sp, #28]
 801a132:	e014      	b.n	801a15e <_vfiprintf_r+0x156>
 801a134:	eba0 0308 	sub.w	r3, r0, r8
 801a138:	fa09 f303 	lsl.w	r3, r9, r3
 801a13c:	4313      	orrs	r3, r2
 801a13e:	9304      	str	r3, [sp, #16]
 801a140:	46a2      	mov	sl, r4
 801a142:	e7d2      	b.n	801a0ea <_vfiprintf_r+0xe2>
 801a144:	9b03      	ldr	r3, [sp, #12]
 801a146:	1d19      	adds	r1, r3, #4
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	9103      	str	r1, [sp, #12]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	bfbb      	ittet	lt
 801a150:	425b      	neglt	r3, r3
 801a152:	f042 0202 	orrlt.w	r2, r2, #2
 801a156:	9307      	strge	r3, [sp, #28]
 801a158:	9307      	strlt	r3, [sp, #28]
 801a15a:	bfb8      	it	lt
 801a15c:	9204      	strlt	r2, [sp, #16]
 801a15e:	7823      	ldrb	r3, [r4, #0]
 801a160:	2b2e      	cmp	r3, #46	; 0x2e
 801a162:	d10c      	bne.n	801a17e <_vfiprintf_r+0x176>
 801a164:	7863      	ldrb	r3, [r4, #1]
 801a166:	2b2a      	cmp	r3, #42	; 0x2a
 801a168:	d135      	bne.n	801a1d6 <_vfiprintf_r+0x1ce>
 801a16a:	9b03      	ldr	r3, [sp, #12]
 801a16c:	1d1a      	adds	r2, r3, #4
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	9203      	str	r2, [sp, #12]
 801a172:	2b00      	cmp	r3, #0
 801a174:	bfb8      	it	lt
 801a176:	f04f 33ff 	movlt.w	r3, #4294967295
 801a17a:	3402      	adds	r4, #2
 801a17c:	9305      	str	r3, [sp, #20]
 801a17e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a264 <_vfiprintf_r+0x25c>
 801a182:	7821      	ldrb	r1, [r4, #0]
 801a184:	2203      	movs	r2, #3
 801a186:	4650      	mov	r0, sl
 801a188:	f7e6 f852 	bl	8000230 <memchr>
 801a18c:	b140      	cbz	r0, 801a1a0 <_vfiprintf_r+0x198>
 801a18e:	2340      	movs	r3, #64	; 0x40
 801a190:	eba0 000a 	sub.w	r0, r0, sl
 801a194:	fa03 f000 	lsl.w	r0, r3, r0
 801a198:	9b04      	ldr	r3, [sp, #16]
 801a19a:	4303      	orrs	r3, r0
 801a19c:	3401      	adds	r4, #1
 801a19e:	9304      	str	r3, [sp, #16]
 801a1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1a4:	482c      	ldr	r0, [pc, #176]	; (801a258 <_vfiprintf_r+0x250>)
 801a1a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1aa:	2206      	movs	r2, #6
 801a1ac:	f7e6 f840 	bl	8000230 <memchr>
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	d03f      	beq.n	801a234 <_vfiprintf_r+0x22c>
 801a1b4:	4b29      	ldr	r3, [pc, #164]	; (801a25c <_vfiprintf_r+0x254>)
 801a1b6:	bb1b      	cbnz	r3, 801a200 <_vfiprintf_r+0x1f8>
 801a1b8:	9b03      	ldr	r3, [sp, #12]
 801a1ba:	3307      	adds	r3, #7
 801a1bc:	f023 0307 	bic.w	r3, r3, #7
 801a1c0:	3308      	adds	r3, #8
 801a1c2:	9303      	str	r3, [sp, #12]
 801a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1c6:	443b      	add	r3, r7
 801a1c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a1ca:	e767      	b.n	801a09c <_vfiprintf_r+0x94>
 801a1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1d0:	460c      	mov	r4, r1
 801a1d2:	2001      	movs	r0, #1
 801a1d4:	e7a5      	b.n	801a122 <_vfiprintf_r+0x11a>
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	3401      	adds	r4, #1
 801a1da:	9305      	str	r3, [sp, #20]
 801a1dc:	4619      	mov	r1, r3
 801a1de:	f04f 0c0a 	mov.w	ip, #10
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1e8:	3a30      	subs	r2, #48	; 0x30
 801a1ea:	2a09      	cmp	r2, #9
 801a1ec:	d903      	bls.n	801a1f6 <_vfiprintf_r+0x1ee>
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d0c5      	beq.n	801a17e <_vfiprintf_r+0x176>
 801a1f2:	9105      	str	r1, [sp, #20]
 801a1f4:	e7c3      	b.n	801a17e <_vfiprintf_r+0x176>
 801a1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1fa:	4604      	mov	r4, r0
 801a1fc:	2301      	movs	r3, #1
 801a1fe:	e7f0      	b.n	801a1e2 <_vfiprintf_r+0x1da>
 801a200:	ab03      	add	r3, sp, #12
 801a202:	9300      	str	r3, [sp, #0]
 801a204:	462a      	mov	r2, r5
 801a206:	4b16      	ldr	r3, [pc, #88]	; (801a260 <_vfiprintf_r+0x258>)
 801a208:	a904      	add	r1, sp, #16
 801a20a:	4630      	mov	r0, r6
 801a20c:	f7fb fcb8 	bl	8015b80 <_printf_float>
 801a210:	4607      	mov	r7, r0
 801a212:	1c78      	adds	r0, r7, #1
 801a214:	d1d6      	bne.n	801a1c4 <_vfiprintf_r+0x1bc>
 801a216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a218:	07d9      	lsls	r1, r3, #31
 801a21a:	d405      	bmi.n	801a228 <_vfiprintf_r+0x220>
 801a21c:	89ab      	ldrh	r3, [r5, #12]
 801a21e:	059a      	lsls	r2, r3, #22
 801a220:	d402      	bmi.n	801a228 <_vfiprintf_r+0x220>
 801a222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a224:	f7fe ff32 	bl	801908c <__retarget_lock_release_recursive>
 801a228:	89ab      	ldrh	r3, [r5, #12]
 801a22a:	065b      	lsls	r3, r3, #25
 801a22c:	f53f af12 	bmi.w	801a054 <_vfiprintf_r+0x4c>
 801a230:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a232:	e711      	b.n	801a058 <_vfiprintf_r+0x50>
 801a234:	ab03      	add	r3, sp, #12
 801a236:	9300      	str	r3, [sp, #0]
 801a238:	462a      	mov	r2, r5
 801a23a:	4b09      	ldr	r3, [pc, #36]	; (801a260 <_vfiprintf_r+0x258>)
 801a23c:	a904      	add	r1, sp, #16
 801a23e:	4630      	mov	r0, r6
 801a240:	f7fb ff42 	bl	80160c8 <_printf_i>
 801a244:	e7e4      	b.n	801a210 <_vfiprintf_r+0x208>
 801a246:	bf00      	nop
 801a248:	0801c414 	.word	0x0801c414
 801a24c:	0801c434 	.word	0x0801c434
 801a250:	0801c3f4 	.word	0x0801c3f4
 801a254:	0801c62c 	.word	0x0801c62c
 801a258:	0801c636 	.word	0x0801c636
 801a25c:	08015b81 	.word	0x08015b81
 801a260:	08019fe3 	.word	0x08019fe3
 801a264:	0801c632 	.word	0x0801c632

0801a268 <_putc_r>:
 801a268:	b570      	push	{r4, r5, r6, lr}
 801a26a:	460d      	mov	r5, r1
 801a26c:	4614      	mov	r4, r2
 801a26e:	4606      	mov	r6, r0
 801a270:	b118      	cbz	r0, 801a27a <_putc_r+0x12>
 801a272:	6983      	ldr	r3, [r0, #24]
 801a274:	b90b      	cbnz	r3, 801a27a <_putc_r+0x12>
 801a276:	f7fe faf7 	bl	8018868 <__sinit>
 801a27a:	4b1c      	ldr	r3, [pc, #112]	; (801a2ec <_putc_r+0x84>)
 801a27c:	429c      	cmp	r4, r3
 801a27e:	d124      	bne.n	801a2ca <_putc_r+0x62>
 801a280:	6874      	ldr	r4, [r6, #4]
 801a282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a284:	07d8      	lsls	r0, r3, #31
 801a286:	d405      	bmi.n	801a294 <_putc_r+0x2c>
 801a288:	89a3      	ldrh	r3, [r4, #12]
 801a28a:	0599      	lsls	r1, r3, #22
 801a28c:	d402      	bmi.n	801a294 <_putc_r+0x2c>
 801a28e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a290:	f7fe fefb 	bl	801908a <__retarget_lock_acquire_recursive>
 801a294:	68a3      	ldr	r3, [r4, #8]
 801a296:	3b01      	subs	r3, #1
 801a298:	2b00      	cmp	r3, #0
 801a29a:	60a3      	str	r3, [r4, #8]
 801a29c:	da05      	bge.n	801a2aa <_putc_r+0x42>
 801a29e:	69a2      	ldr	r2, [r4, #24]
 801a2a0:	4293      	cmp	r3, r2
 801a2a2:	db1c      	blt.n	801a2de <_putc_r+0x76>
 801a2a4:	b2eb      	uxtb	r3, r5
 801a2a6:	2b0a      	cmp	r3, #10
 801a2a8:	d019      	beq.n	801a2de <_putc_r+0x76>
 801a2aa:	6823      	ldr	r3, [r4, #0]
 801a2ac:	1c5a      	adds	r2, r3, #1
 801a2ae:	6022      	str	r2, [r4, #0]
 801a2b0:	701d      	strb	r5, [r3, #0]
 801a2b2:	b2ed      	uxtb	r5, r5
 801a2b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a2b6:	07da      	lsls	r2, r3, #31
 801a2b8:	d405      	bmi.n	801a2c6 <_putc_r+0x5e>
 801a2ba:	89a3      	ldrh	r3, [r4, #12]
 801a2bc:	059b      	lsls	r3, r3, #22
 801a2be:	d402      	bmi.n	801a2c6 <_putc_r+0x5e>
 801a2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a2c2:	f7fe fee3 	bl	801908c <__retarget_lock_release_recursive>
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	bd70      	pop	{r4, r5, r6, pc}
 801a2ca:	4b09      	ldr	r3, [pc, #36]	; (801a2f0 <_putc_r+0x88>)
 801a2cc:	429c      	cmp	r4, r3
 801a2ce:	d101      	bne.n	801a2d4 <_putc_r+0x6c>
 801a2d0:	68b4      	ldr	r4, [r6, #8]
 801a2d2:	e7d6      	b.n	801a282 <_putc_r+0x1a>
 801a2d4:	4b07      	ldr	r3, [pc, #28]	; (801a2f4 <_putc_r+0x8c>)
 801a2d6:	429c      	cmp	r4, r3
 801a2d8:	bf08      	it	eq
 801a2da:	68f4      	ldreq	r4, [r6, #12]
 801a2dc:	e7d1      	b.n	801a282 <_putc_r+0x1a>
 801a2de:	4629      	mov	r1, r5
 801a2e0:	4622      	mov	r2, r4
 801a2e2:	4630      	mov	r0, r6
 801a2e4:	f7fd fa6c 	bl	80177c0 <__swbuf_r>
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	e7e3      	b.n	801a2b4 <_putc_r+0x4c>
 801a2ec:	0801c414 	.word	0x0801c414
 801a2f0:	0801c434 	.word	0x0801c434
 801a2f4:	0801c3f4 	.word	0x0801c3f4

0801a2f8 <nan>:
 801a2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a300 <nan+0x8>
 801a2fc:	4770      	bx	lr
 801a2fe:	bf00      	nop
 801a300:	00000000 	.word	0x00000000
 801a304:	7ff80000 	.word	0x7ff80000

0801a308 <_sbrk_r>:
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	4d06      	ldr	r5, [pc, #24]	; (801a324 <_sbrk_r+0x1c>)
 801a30c:	2300      	movs	r3, #0
 801a30e:	4604      	mov	r4, r0
 801a310:	4608      	mov	r0, r1
 801a312:	602b      	str	r3, [r5, #0]
 801a314:	f7ea f836 	bl	8004384 <_sbrk>
 801a318:	1c43      	adds	r3, r0, #1
 801a31a:	d102      	bne.n	801a322 <_sbrk_r+0x1a>
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	b103      	cbz	r3, 801a322 <_sbrk_r+0x1a>
 801a320:	6023      	str	r3, [r4, #0]
 801a322:	bd38      	pop	{r3, r4, r5, pc}
 801a324:	200002d8 	.word	0x200002d8

0801a328 <__sread>:
 801a328:	b510      	push	{r4, lr}
 801a32a:	460c      	mov	r4, r1
 801a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a330:	f000 f93a 	bl	801a5a8 <_read_r>
 801a334:	2800      	cmp	r0, #0
 801a336:	bfab      	itete	ge
 801a338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a33a:	89a3      	ldrhlt	r3, [r4, #12]
 801a33c:	181b      	addge	r3, r3, r0
 801a33e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a342:	bfac      	ite	ge
 801a344:	6563      	strge	r3, [r4, #84]	; 0x54
 801a346:	81a3      	strhlt	r3, [r4, #12]
 801a348:	bd10      	pop	{r4, pc}

0801a34a <__swrite>:
 801a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a34e:	461f      	mov	r7, r3
 801a350:	898b      	ldrh	r3, [r1, #12]
 801a352:	05db      	lsls	r3, r3, #23
 801a354:	4605      	mov	r5, r0
 801a356:	460c      	mov	r4, r1
 801a358:	4616      	mov	r6, r2
 801a35a:	d505      	bpl.n	801a368 <__swrite+0x1e>
 801a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a360:	2302      	movs	r3, #2
 801a362:	2200      	movs	r2, #0
 801a364:	f000 f8b8 	bl	801a4d8 <_lseek_r>
 801a368:	89a3      	ldrh	r3, [r4, #12]
 801a36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a36e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a372:	81a3      	strh	r3, [r4, #12]
 801a374:	4632      	mov	r2, r6
 801a376:	463b      	mov	r3, r7
 801a378:	4628      	mov	r0, r5
 801a37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a37e:	f000 b837 	b.w	801a3f0 <_write_r>

0801a382 <__sseek>:
 801a382:	b510      	push	{r4, lr}
 801a384:	460c      	mov	r4, r1
 801a386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a38a:	f000 f8a5 	bl	801a4d8 <_lseek_r>
 801a38e:	1c43      	adds	r3, r0, #1
 801a390:	89a3      	ldrh	r3, [r4, #12]
 801a392:	bf15      	itete	ne
 801a394:	6560      	strne	r0, [r4, #84]	; 0x54
 801a396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a39a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a39e:	81a3      	strheq	r3, [r4, #12]
 801a3a0:	bf18      	it	ne
 801a3a2:	81a3      	strhne	r3, [r4, #12]
 801a3a4:	bd10      	pop	{r4, pc}

0801a3a6 <__sclose>:
 801a3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3aa:	f000 b851 	b.w	801a450 <_close_r>

0801a3ae <strncmp>:
 801a3ae:	b510      	push	{r4, lr}
 801a3b0:	b17a      	cbz	r2, 801a3d2 <strncmp+0x24>
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	3901      	subs	r1, #1
 801a3b6:	1884      	adds	r4, r0, r2
 801a3b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a3bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a3c0:	4290      	cmp	r0, r2
 801a3c2:	d101      	bne.n	801a3c8 <strncmp+0x1a>
 801a3c4:	42a3      	cmp	r3, r4
 801a3c6:	d101      	bne.n	801a3cc <strncmp+0x1e>
 801a3c8:	1a80      	subs	r0, r0, r2
 801a3ca:	bd10      	pop	{r4, pc}
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d1f3      	bne.n	801a3b8 <strncmp+0xa>
 801a3d0:	e7fa      	b.n	801a3c8 <strncmp+0x1a>
 801a3d2:	4610      	mov	r0, r2
 801a3d4:	e7f9      	b.n	801a3ca <strncmp+0x1c>

0801a3d6 <__ascii_wctomb>:
 801a3d6:	b149      	cbz	r1, 801a3ec <__ascii_wctomb+0x16>
 801a3d8:	2aff      	cmp	r2, #255	; 0xff
 801a3da:	bf85      	ittet	hi
 801a3dc:	238a      	movhi	r3, #138	; 0x8a
 801a3de:	6003      	strhi	r3, [r0, #0]
 801a3e0:	700a      	strbls	r2, [r1, #0]
 801a3e2:	f04f 30ff 	movhi.w	r0, #4294967295
 801a3e6:	bf98      	it	ls
 801a3e8:	2001      	movls	r0, #1
 801a3ea:	4770      	bx	lr
 801a3ec:	4608      	mov	r0, r1
 801a3ee:	4770      	bx	lr

0801a3f0 <_write_r>:
 801a3f0:	b538      	push	{r3, r4, r5, lr}
 801a3f2:	4d07      	ldr	r5, [pc, #28]	; (801a410 <_write_r+0x20>)
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	4608      	mov	r0, r1
 801a3f8:	4611      	mov	r1, r2
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	602a      	str	r2, [r5, #0]
 801a3fe:	461a      	mov	r2, r3
 801a400:	f7e9 ff6f 	bl	80042e2 <_write>
 801a404:	1c43      	adds	r3, r0, #1
 801a406:	d102      	bne.n	801a40e <_write_r+0x1e>
 801a408:	682b      	ldr	r3, [r5, #0]
 801a40a:	b103      	cbz	r3, 801a40e <_write_r+0x1e>
 801a40c:	6023      	str	r3, [r4, #0]
 801a40e:	bd38      	pop	{r3, r4, r5, pc}
 801a410:	200002d8 	.word	0x200002d8

0801a414 <__assert_func>:
 801a414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a416:	4614      	mov	r4, r2
 801a418:	461a      	mov	r2, r3
 801a41a:	4b09      	ldr	r3, [pc, #36]	; (801a440 <__assert_func+0x2c>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	4605      	mov	r5, r0
 801a420:	68d8      	ldr	r0, [r3, #12]
 801a422:	b14c      	cbz	r4, 801a438 <__assert_func+0x24>
 801a424:	4b07      	ldr	r3, [pc, #28]	; (801a444 <__assert_func+0x30>)
 801a426:	9100      	str	r1, [sp, #0]
 801a428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a42c:	4906      	ldr	r1, [pc, #24]	; (801a448 <__assert_func+0x34>)
 801a42e:	462b      	mov	r3, r5
 801a430:	f000 f81e 	bl	801a470 <fiprintf>
 801a434:	f000 f8ca 	bl	801a5cc <abort>
 801a438:	4b04      	ldr	r3, [pc, #16]	; (801a44c <__assert_func+0x38>)
 801a43a:	461c      	mov	r4, r3
 801a43c:	e7f3      	b.n	801a426 <__assert_func+0x12>
 801a43e:	bf00      	nop
 801a440:	20000020 	.word	0x20000020
 801a444:	0801c63d 	.word	0x0801c63d
 801a448:	0801c64a 	.word	0x0801c64a
 801a44c:	0801c678 	.word	0x0801c678

0801a450 <_close_r>:
 801a450:	b538      	push	{r3, r4, r5, lr}
 801a452:	4d06      	ldr	r5, [pc, #24]	; (801a46c <_close_r+0x1c>)
 801a454:	2300      	movs	r3, #0
 801a456:	4604      	mov	r4, r0
 801a458:	4608      	mov	r0, r1
 801a45a:	602b      	str	r3, [r5, #0]
 801a45c:	f7e9 ff5d 	bl	800431a <_close>
 801a460:	1c43      	adds	r3, r0, #1
 801a462:	d102      	bne.n	801a46a <_close_r+0x1a>
 801a464:	682b      	ldr	r3, [r5, #0]
 801a466:	b103      	cbz	r3, 801a46a <_close_r+0x1a>
 801a468:	6023      	str	r3, [r4, #0]
 801a46a:	bd38      	pop	{r3, r4, r5, pc}
 801a46c:	200002d8 	.word	0x200002d8

0801a470 <fiprintf>:
 801a470:	b40e      	push	{r1, r2, r3}
 801a472:	b503      	push	{r0, r1, lr}
 801a474:	4601      	mov	r1, r0
 801a476:	ab03      	add	r3, sp, #12
 801a478:	4805      	ldr	r0, [pc, #20]	; (801a490 <fiprintf+0x20>)
 801a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a47e:	6800      	ldr	r0, [r0, #0]
 801a480:	9301      	str	r3, [sp, #4]
 801a482:	f7ff fdc1 	bl	801a008 <_vfiprintf_r>
 801a486:	b002      	add	sp, #8
 801a488:	f85d eb04 	ldr.w	lr, [sp], #4
 801a48c:	b003      	add	sp, #12
 801a48e:	4770      	bx	lr
 801a490:	20000020 	.word	0x20000020

0801a494 <_fstat_r>:
 801a494:	b538      	push	{r3, r4, r5, lr}
 801a496:	4d07      	ldr	r5, [pc, #28]	; (801a4b4 <_fstat_r+0x20>)
 801a498:	2300      	movs	r3, #0
 801a49a:	4604      	mov	r4, r0
 801a49c:	4608      	mov	r0, r1
 801a49e:	4611      	mov	r1, r2
 801a4a0:	602b      	str	r3, [r5, #0]
 801a4a2:	f7e9 ff46 	bl	8004332 <_fstat>
 801a4a6:	1c43      	adds	r3, r0, #1
 801a4a8:	d102      	bne.n	801a4b0 <_fstat_r+0x1c>
 801a4aa:	682b      	ldr	r3, [r5, #0]
 801a4ac:	b103      	cbz	r3, 801a4b0 <_fstat_r+0x1c>
 801a4ae:	6023      	str	r3, [r4, #0]
 801a4b0:	bd38      	pop	{r3, r4, r5, pc}
 801a4b2:	bf00      	nop
 801a4b4:	200002d8 	.word	0x200002d8

0801a4b8 <_isatty_r>:
 801a4b8:	b538      	push	{r3, r4, r5, lr}
 801a4ba:	4d06      	ldr	r5, [pc, #24]	; (801a4d4 <_isatty_r+0x1c>)
 801a4bc:	2300      	movs	r3, #0
 801a4be:	4604      	mov	r4, r0
 801a4c0:	4608      	mov	r0, r1
 801a4c2:	602b      	str	r3, [r5, #0]
 801a4c4:	f7e9 ff45 	bl	8004352 <_isatty>
 801a4c8:	1c43      	adds	r3, r0, #1
 801a4ca:	d102      	bne.n	801a4d2 <_isatty_r+0x1a>
 801a4cc:	682b      	ldr	r3, [r5, #0]
 801a4ce:	b103      	cbz	r3, 801a4d2 <_isatty_r+0x1a>
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	bd38      	pop	{r3, r4, r5, pc}
 801a4d4:	200002d8 	.word	0x200002d8

0801a4d8 <_lseek_r>:
 801a4d8:	b538      	push	{r3, r4, r5, lr}
 801a4da:	4d07      	ldr	r5, [pc, #28]	; (801a4f8 <_lseek_r+0x20>)
 801a4dc:	4604      	mov	r4, r0
 801a4de:	4608      	mov	r0, r1
 801a4e0:	4611      	mov	r1, r2
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	602a      	str	r2, [r5, #0]
 801a4e6:	461a      	mov	r2, r3
 801a4e8:	f7e9 ff3e 	bl	8004368 <_lseek>
 801a4ec:	1c43      	adds	r3, r0, #1
 801a4ee:	d102      	bne.n	801a4f6 <_lseek_r+0x1e>
 801a4f0:	682b      	ldr	r3, [r5, #0]
 801a4f2:	b103      	cbz	r3, 801a4f6 <_lseek_r+0x1e>
 801a4f4:	6023      	str	r3, [r4, #0]
 801a4f6:	bd38      	pop	{r3, r4, r5, pc}
 801a4f8:	200002d8 	.word	0x200002d8

0801a4fc <memmove>:
 801a4fc:	4288      	cmp	r0, r1
 801a4fe:	b510      	push	{r4, lr}
 801a500:	eb01 0402 	add.w	r4, r1, r2
 801a504:	d902      	bls.n	801a50c <memmove+0x10>
 801a506:	4284      	cmp	r4, r0
 801a508:	4623      	mov	r3, r4
 801a50a:	d807      	bhi.n	801a51c <memmove+0x20>
 801a50c:	1e43      	subs	r3, r0, #1
 801a50e:	42a1      	cmp	r1, r4
 801a510:	d008      	beq.n	801a524 <memmove+0x28>
 801a512:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a51a:	e7f8      	b.n	801a50e <memmove+0x12>
 801a51c:	4402      	add	r2, r0
 801a51e:	4601      	mov	r1, r0
 801a520:	428a      	cmp	r2, r1
 801a522:	d100      	bne.n	801a526 <memmove+0x2a>
 801a524:	bd10      	pop	{r4, pc}
 801a526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a52e:	e7f7      	b.n	801a520 <memmove+0x24>

0801a530 <__malloc_lock>:
 801a530:	4801      	ldr	r0, [pc, #4]	; (801a538 <__malloc_lock+0x8>)
 801a532:	f7fe bdaa 	b.w	801908a <__retarget_lock_acquire_recursive>
 801a536:	bf00      	nop
 801a538:	200002cb 	.word	0x200002cb

0801a53c <__malloc_unlock>:
 801a53c:	4801      	ldr	r0, [pc, #4]	; (801a544 <__malloc_unlock+0x8>)
 801a53e:	f7fe bda5 	b.w	801908c <__retarget_lock_release_recursive>
 801a542:	bf00      	nop
 801a544:	200002cb 	.word	0x200002cb

0801a548 <_realloc_r>:
 801a548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a54c:	4680      	mov	r8, r0
 801a54e:	4614      	mov	r4, r2
 801a550:	460e      	mov	r6, r1
 801a552:	b921      	cbnz	r1, 801a55e <_realloc_r+0x16>
 801a554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a558:	4611      	mov	r1, r2
 801a55a:	f7ff bb5b 	b.w	8019c14 <_malloc_r>
 801a55e:	b92a      	cbnz	r2, 801a56c <_realloc_r+0x24>
 801a560:	f7ff faec 	bl	8019b3c <_free_r>
 801a564:	4625      	mov	r5, r4
 801a566:	4628      	mov	r0, r5
 801a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a56c:	f000 f835 	bl	801a5da <_malloc_usable_size_r>
 801a570:	4284      	cmp	r4, r0
 801a572:	4607      	mov	r7, r0
 801a574:	d802      	bhi.n	801a57c <_realloc_r+0x34>
 801a576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a57a:	d812      	bhi.n	801a5a2 <_realloc_r+0x5a>
 801a57c:	4621      	mov	r1, r4
 801a57e:	4640      	mov	r0, r8
 801a580:	f7ff fb48 	bl	8019c14 <_malloc_r>
 801a584:	4605      	mov	r5, r0
 801a586:	2800      	cmp	r0, #0
 801a588:	d0ed      	beq.n	801a566 <_realloc_r+0x1e>
 801a58a:	42bc      	cmp	r4, r7
 801a58c:	4622      	mov	r2, r4
 801a58e:	4631      	mov	r1, r6
 801a590:	bf28      	it	cs
 801a592:	463a      	movcs	r2, r7
 801a594:	f7fb fa3e 	bl	8015a14 <memcpy>
 801a598:	4631      	mov	r1, r6
 801a59a:	4640      	mov	r0, r8
 801a59c:	f7ff face 	bl	8019b3c <_free_r>
 801a5a0:	e7e1      	b.n	801a566 <_realloc_r+0x1e>
 801a5a2:	4635      	mov	r5, r6
 801a5a4:	e7df      	b.n	801a566 <_realloc_r+0x1e>
	...

0801a5a8 <_read_r>:
 801a5a8:	b538      	push	{r3, r4, r5, lr}
 801a5aa:	4d07      	ldr	r5, [pc, #28]	; (801a5c8 <_read_r+0x20>)
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	4608      	mov	r0, r1
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	602a      	str	r2, [r5, #0]
 801a5b6:	461a      	mov	r2, r3
 801a5b8:	f7e9 fe76 	bl	80042a8 <_read>
 801a5bc:	1c43      	adds	r3, r0, #1
 801a5be:	d102      	bne.n	801a5c6 <_read_r+0x1e>
 801a5c0:	682b      	ldr	r3, [r5, #0]
 801a5c2:	b103      	cbz	r3, 801a5c6 <_read_r+0x1e>
 801a5c4:	6023      	str	r3, [r4, #0]
 801a5c6:	bd38      	pop	{r3, r4, r5, pc}
 801a5c8:	200002d8 	.word	0x200002d8

0801a5cc <abort>:
 801a5cc:	b508      	push	{r3, lr}
 801a5ce:	2006      	movs	r0, #6
 801a5d0:	f000 f834 	bl	801a63c <raise>
 801a5d4:	2001      	movs	r0, #1
 801a5d6:	f7e9 fe5d 	bl	8004294 <_exit>

0801a5da <_malloc_usable_size_r>:
 801a5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5de:	1f18      	subs	r0, r3, #4
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	bfbc      	itt	lt
 801a5e4:	580b      	ldrlt	r3, [r1, r0]
 801a5e6:	18c0      	addlt	r0, r0, r3
 801a5e8:	4770      	bx	lr

0801a5ea <_raise_r>:
 801a5ea:	291f      	cmp	r1, #31
 801a5ec:	b538      	push	{r3, r4, r5, lr}
 801a5ee:	4604      	mov	r4, r0
 801a5f0:	460d      	mov	r5, r1
 801a5f2:	d904      	bls.n	801a5fe <_raise_r+0x14>
 801a5f4:	2316      	movs	r3, #22
 801a5f6:	6003      	str	r3, [r0, #0]
 801a5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5fc:	bd38      	pop	{r3, r4, r5, pc}
 801a5fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a600:	b112      	cbz	r2, 801a608 <_raise_r+0x1e>
 801a602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a606:	b94b      	cbnz	r3, 801a61c <_raise_r+0x32>
 801a608:	4620      	mov	r0, r4
 801a60a:	f000 f831 	bl	801a670 <_getpid_r>
 801a60e:	462a      	mov	r2, r5
 801a610:	4601      	mov	r1, r0
 801a612:	4620      	mov	r0, r4
 801a614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a618:	f000 b818 	b.w	801a64c <_kill_r>
 801a61c:	2b01      	cmp	r3, #1
 801a61e:	d00a      	beq.n	801a636 <_raise_r+0x4c>
 801a620:	1c59      	adds	r1, r3, #1
 801a622:	d103      	bne.n	801a62c <_raise_r+0x42>
 801a624:	2316      	movs	r3, #22
 801a626:	6003      	str	r3, [r0, #0]
 801a628:	2001      	movs	r0, #1
 801a62a:	e7e7      	b.n	801a5fc <_raise_r+0x12>
 801a62c:	2400      	movs	r4, #0
 801a62e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a632:	4628      	mov	r0, r5
 801a634:	4798      	blx	r3
 801a636:	2000      	movs	r0, #0
 801a638:	e7e0      	b.n	801a5fc <_raise_r+0x12>
	...

0801a63c <raise>:
 801a63c:	4b02      	ldr	r3, [pc, #8]	; (801a648 <raise+0xc>)
 801a63e:	4601      	mov	r1, r0
 801a640:	6818      	ldr	r0, [r3, #0]
 801a642:	f7ff bfd2 	b.w	801a5ea <_raise_r>
 801a646:	bf00      	nop
 801a648:	20000020 	.word	0x20000020

0801a64c <_kill_r>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	4d07      	ldr	r5, [pc, #28]	; (801a66c <_kill_r+0x20>)
 801a650:	2300      	movs	r3, #0
 801a652:	4604      	mov	r4, r0
 801a654:	4608      	mov	r0, r1
 801a656:	4611      	mov	r1, r2
 801a658:	602b      	str	r3, [r5, #0]
 801a65a:	f7e9 fe0b 	bl	8004274 <_kill>
 801a65e:	1c43      	adds	r3, r0, #1
 801a660:	d102      	bne.n	801a668 <_kill_r+0x1c>
 801a662:	682b      	ldr	r3, [r5, #0]
 801a664:	b103      	cbz	r3, 801a668 <_kill_r+0x1c>
 801a666:	6023      	str	r3, [r4, #0]
 801a668:	bd38      	pop	{r3, r4, r5, pc}
 801a66a:	bf00      	nop
 801a66c:	200002d8 	.word	0x200002d8

0801a670 <_getpid_r>:
 801a670:	f7e9 bdf8 	b.w	8004264 <_getpid>
 801a674:	0000      	movs	r0, r0
	...

0801a678 <cos>:
 801a678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a67a:	ec53 2b10 	vmov	r2, r3, d0
 801a67e:	4826      	ldr	r0, [pc, #152]	; (801a718 <cos+0xa0>)
 801a680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a684:	4281      	cmp	r1, r0
 801a686:	dc06      	bgt.n	801a696 <cos+0x1e>
 801a688:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a710 <cos+0x98>
 801a68c:	b005      	add	sp, #20
 801a68e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a692:	f000 bb89 	b.w	801ada8 <__kernel_cos>
 801a696:	4821      	ldr	r0, [pc, #132]	; (801a71c <cos+0xa4>)
 801a698:	4281      	cmp	r1, r0
 801a69a:	dd09      	ble.n	801a6b0 <cos+0x38>
 801a69c:	ee10 0a10 	vmov	r0, s0
 801a6a0:	4619      	mov	r1, r3
 801a6a2:	f7e5 fe19 	bl	80002d8 <__aeabi_dsub>
 801a6a6:	ec41 0b10 	vmov	d0, r0, r1
 801a6aa:	b005      	add	sp, #20
 801a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6b0:	4668      	mov	r0, sp
 801a6b2:	f000 f8b9 	bl	801a828 <__ieee754_rem_pio2>
 801a6b6:	f000 0003 	and.w	r0, r0, #3
 801a6ba:	2801      	cmp	r0, #1
 801a6bc:	d00b      	beq.n	801a6d6 <cos+0x5e>
 801a6be:	2802      	cmp	r0, #2
 801a6c0:	d016      	beq.n	801a6f0 <cos+0x78>
 801a6c2:	b9e0      	cbnz	r0, 801a6fe <cos+0x86>
 801a6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a6c8:	ed9d 0b00 	vldr	d0, [sp]
 801a6cc:	f000 fb6c 	bl	801ada8 <__kernel_cos>
 801a6d0:	ec51 0b10 	vmov	r0, r1, d0
 801a6d4:	e7e7      	b.n	801a6a6 <cos+0x2e>
 801a6d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a6da:	ed9d 0b00 	vldr	d0, [sp]
 801a6de:	f000 ff7b 	bl	801b5d8 <__kernel_sin>
 801a6e2:	ec53 2b10 	vmov	r2, r3, d0
 801a6e6:	ee10 0a10 	vmov	r0, s0
 801a6ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a6ee:	e7da      	b.n	801a6a6 <cos+0x2e>
 801a6f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a6f4:	ed9d 0b00 	vldr	d0, [sp]
 801a6f8:	f000 fb56 	bl	801ada8 <__kernel_cos>
 801a6fc:	e7f1      	b.n	801a6e2 <cos+0x6a>
 801a6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a702:	ed9d 0b00 	vldr	d0, [sp]
 801a706:	2001      	movs	r0, #1
 801a708:	f000 ff66 	bl	801b5d8 <__kernel_sin>
 801a70c:	e7e0      	b.n	801a6d0 <cos+0x58>
 801a70e:	bf00      	nop
	...
 801a718:	3fe921fb 	.word	0x3fe921fb
 801a71c:	7fefffff 	.word	0x7fefffff

0801a720 <sin>:
 801a720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a722:	ec53 2b10 	vmov	r2, r3, d0
 801a726:	4828      	ldr	r0, [pc, #160]	; (801a7c8 <sin+0xa8>)
 801a728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a72c:	4281      	cmp	r1, r0
 801a72e:	dc07      	bgt.n	801a740 <sin+0x20>
 801a730:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a7c0 <sin+0xa0>
 801a734:	2000      	movs	r0, #0
 801a736:	b005      	add	sp, #20
 801a738:	f85d eb04 	ldr.w	lr, [sp], #4
 801a73c:	f000 bf4c 	b.w	801b5d8 <__kernel_sin>
 801a740:	4822      	ldr	r0, [pc, #136]	; (801a7cc <sin+0xac>)
 801a742:	4281      	cmp	r1, r0
 801a744:	dd09      	ble.n	801a75a <sin+0x3a>
 801a746:	ee10 0a10 	vmov	r0, s0
 801a74a:	4619      	mov	r1, r3
 801a74c:	f7e5 fdc4 	bl	80002d8 <__aeabi_dsub>
 801a750:	ec41 0b10 	vmov	d0, r0, r1
 801a754:	b005      	add	sp, #20
 801a756:	f85d fb04 	ldr.w	pc, [sp], #4
 801a75a:	4668      	mov	r0, sp
 801a75c:	f000 f864 	bl	801a828 <__ieee754_rem_pio2>
 801a760:	f000 0003 	and.w	r0, r0, #3
 801a764:	2801      	cmp	r0, #1
 801a766:	d00c      	beq.n	801a782 <sin+0x62>
 801a768:	2802      	cmp	r0, #2
 801a76a:	d011      	beq.n	801a790 <sin+0x70>
 801a76c:	b9f0      	cbnz	r0, 801a7ac <sin+0x8c>
 801a76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a772:	ed9d 0b00 	vldr	d0, [sp]
 801a776:	2001      	movs	r0, #1
 801a778:	f000 ff2e 	bl	801b5d8 <__kernel_sin>
 801a77c:	ec51 0b10 	vmov	r0, r1, d0
 801a780:	e7e6      	b.n	801a750 <sin+0x30>
 801a782:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a786:	ed9d 0b00 	vldr	d0, [sp]
 801a78a:	f000 fb0d 	bl	801ada8 <__kernel_cos>
 801a78e:	e7f5      	b.n	801a77c <sin+0x5c>
 801a790:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a794:	ed9d 0b00 	vldr	d0, [sp]
 801a798:	2001      	movs	r0, #1
 801a79a:	f000 ff1d 	bl	801b5d8 <__kernel_sin>
 801a79e:	ec53 2b10 	vmov	r2, r3, d0
 801a7a2:	ee10 0a10 	vmov	r0, s0
 801a7a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a7aa:	e7d1      	b.n	801a750 <sin+0x30>
 801a7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7b0:	ed9d 0b00 	vldr	d0, [sp]
 801a7b4:	f000 faf8 	bl	801ada8 <__kernel_cos>
 801a7b8:	e7f1      	b.n	801a79e <sin+0x7e>
 801a7ba:	bf00      	nop
 801a7bc:	f3af 8000 	nop.w
	...
 801a7c8:	3fe921fb 	.word	0x3fe921fb
 801a7cc:	7fefffff 	.word	0x7fefffff

0801a7d0 <sqrt>:
 801a7d0:	b538      	push	{r3, r4, r5, lr}
 801a7d2:	ed2d 8b02 	vpush	{d8}
 801a7d6:	ec55 4b10 	vmov	r4, r5, d0
 801a7da:	f000 fa31 	bl	801ac40 <__ieee754_sqrt>
 801a7de:	4622      	mov	r2, r4
 801a7e0:	462b      	mov	r3, r5
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	4629      	mov	r1, r5
 801a7e6:	eeb0 8a40 	vmov.f32	s16, s0
 801a7ea:	eef0 8a60 	vmov.f32	s17, s1
 801a7ee:	f7e6 f9c5 	bl	8000b7c <__aeabi_dcmpun>
 801a7f2:	b990      	cbnz	r0, 801a81a <sqrt+0x4a>
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	4629      	mov	r1, r5
 801a7fc:	f7e6 f996 	bl	8000b2c <__aeabi_dcmplt>
 801a800:	b158      	cbz	r0, 801a81a <sqrt+0x4a>
 801a802:	f7fb f8dd 	bl	80159c0 <__errno>
 801a806:	2321      	movs	r3, #33	; 0x21
 801a808:	6003      	str	r3, [r0, #0]
 801a80a:	2200      	movs	r2, #0
 801a80c:	2300      	movs	r3, #0
 801a80e:	4610      	mov	r0, r2
 801a810:	4619      	mov	r1, r3
 801a812:	f7e6 f843 	bl	800089c <__aeabi_ddiv>
 801a816:	ec41 0b18 	vmov	d8, r0, r1
 801a81a:	eeb0 0a48 	vmov.f32	s0, s16
 801a81e:	eef0 0a68 	vmov.f32	s1, s17
 801a822:	ecbd 8b02 	vpop	{d8}
 801a826:	bd38      	pop	{r3, r4, r5, pc}

0801a828 <__ieee754_rem_pio2>:
 801a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82c:	ed2d 8b02 	vpush	{d8}
 801a830:	ec55 4b10 	vmov	r4, r5, d0
 801a834:	4bca      	ldr	r3, [pc, #808]	; (801ab60 <__ieee754_rem_pio2+0x338>)
 801a836:	b08b      	sub	sp, #44	; 0x2c
 801a838:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a83c:	4598      	cmp	r8, r3
 801a83e:	4682      	mov	sl, r0
 801a840:	9502      	str	r5, [sp, #8]
 801a842:	dc08      	bgt.n	801a856 <__ieee754_rem_pio2+0x2e>
 801a844:	2200      	movs	r2, #0
 801a846:	2300      	movs	r3, #0
 801a848:	ed80 0b00 	vstr	d0, [r0]
 801a84c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a850:	f04f 0b00 	mov.w	fp, #0
 801a854:	e028      	b.n	801a8a8 <__ieee754_rem_pio2+0x80>
 801a856:	4bc3      	ldr	r3, [pc, #780]	; (801ab64 <__ieee754_rem_pio2+0x33c>)
 801a858:	4598      	cmp	r8, r3
 801a85a:	dc78      	bgt.n	801a94e <__ieee754_rem_pio2+0x126>
 801a85c:	9b02      	ldr	r3, [sp, #8]
 801a85e:	4ec2      	ldr	r6, [pc, #776]	; (801ab68 <__ieee754_rem_pio2+0x340>)
 801a860:	2b00      	cmp	r3, #0
 801a862:	ee10 0a10 	vmov	r0, s0
 801a866:	a3b0      	add	r3, pc, #704	; (adr r3, 801ab28 <__ieee754_rem_pio2+0x300>)
 801a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86c:	4629      	mov	r1, r5
 801a86e:	dd39      	ble.n	801a8e4 <__ieee754_rem_pio2+0xbc>
 801a870:	f7e5 fd32 	bl	80002d8 <__aeabi_dsub>
 801a874:	45b0      	cmp	r8, r6
 801a876:	4604      	mov	r4, r0
 801a878:	460d      	mov	r5, r1
 801a87a:	d01b      	beq.n	801a8b4 <__ieee754_rem_pio2+0x8c>
 801a87c:	a3ac      	add	r3, pc, #688	; (adr r3, 801ab30 <__ieee754_rem_pio2+0x308>)
 801a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a882:	f7e5 fd29 	bl	80002d8 <__aeabi_dsub>
 801a886:	4602      	mov	r2, r0
 801a888:	460b      	mov	r3, r1
 801a88a:	e9ca 2300 	strd	r2, r3, [sl]
 801a88e:	4620      	mov	r0, r4
 801a890:	4629      	mov	r1, r5
 801a892:	f7e5 fd21 	bl	80002d8 <__aeabi_dsub>
 801a896:	a3a6      	add	r3, pc, #664	; (adr r3, 801ab30 <__ieee754_rem_pio2+0x308>)
 801a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a89c:	f7e5 fd1c 	bl	80002d8 <__aeabi_dsub>
 801a8a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a8a4:	f04f 0b01 	mov.w	fp, #1
 801a8a8:	4658      	mov	r0, fp
 801a8aa:	b00b      	add	sp, #44	; 0x2c
 801a8ac:	ecbd 8b02 	vpop	{d8}
 801a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8b4:	a3a0      	add	r3, pc, #640	; (adr r3, 801ab38 <__ieee754_rem_pio2+0x310>)
 801a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ba:	f7e5 fd0d 	bl	80002d8 <__aeabi_dsub>
 801a8be:	a3a0      	add	r3, pc, #640	; (adr r3, 801ab40 <__ieee754_rem_pio2+0x318>)
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	4604      	mov	r4, r0
 801a8c6:	460d      	mov	r5, r1
 801a8c8:	f7e5 fd06 	bl	80002d8 <__aeabi_dsub>
 801a8cc:	4602      	mov	r2, r0
 801a8ce:	460b      	mov	r3, r1
 801a8d0:	e9ca 2300 	strd	r2, r3, [sl]
 801a8d4:	4620      	mov	r0, r4
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	f7e5 fcfe 	bl	80002d8 <__aeabi_dsub>
 801a8dc:	a398      	add	r3, pc, #608	; (adr r3, 801ab40 <__ieee754_rem_pio2+0x318>)
 801a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e2:	e7db      	b.n	801a89c <__ieee754_rem_pio2+0x74>
 801a8e4:	f7e5 fcfa 	bl	80002dc <__adddf3>
 801a8e8:	45b0      	cmp	r8, r6
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	460d      	mov	r5, r1
 801a8ee:	d016      	beq.n	801a91e <__ieee754_rem_pio2+0xf6>
 801a8f0:	a38f      	add	r3, pc, #572	; (adr r3, 801ab30 <__ieee754_rem_pio2+0x308>)
 801a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8f6:	f7e5 fcf1 	bl	80002dc <__adddf3>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	e9ca 2300 	strd	r2, r3, [sl]
 801a902:	4620      	mov	r0, r4
 801a904:	4629      	mov	r1, r5
 801a906:	f7e5 fce7 	bl	80002d8 <__aeabi_dsub>
 801a90a:	a389      	add	r3, pc, #548	; (adr r3, 801ab30 <__ieee754_rem_pio2+0x308>)
 801a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a910:	f7e5 fce4 	bl	80002dc <__adddf3>
 801a914:	f04f 3bff 	mov.w	fp, #4294967295
 801a918:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a91c:	e7c4      	b.n	801a8a8 <__ieee754_rem_pio2+0x80>
 801a91e:	a386      	add	r3, pc, #536	; (adr r3, 801ab38 <__ieee754_rem_pio2+0x310>)
 801a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a924:	f7e5 fcda 	bl	80002dc <__adddf3>
 801a928:	a385      	add	r3, pc, #532	; (adr r3, 801ab40 <__ieee754_rem_pio2+0x318>)
 801a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a92e:	4604      	mov	r4, r0
 801a930:	460d      	mov	r5, r1
 801a932:	f7e5 fcd3 	bl	80002dc <__adddf3>
 801a936:	4602      	mov	r2, r0
 801a938:	460b      	mov	r3, r1
 801a93a:	e9ca 2300 	strd	r2, r3, [sl]
 801a93e:	4620      	mov	r0, r4
 801a940:	4629      	mov	r1, r5
 801a942:	f7e5 fcc9 	bl	80002d8 <__aeabi_dsub>
 801a946:	a37e      	add	r3, pc, #504	; (adr r3, 801ab40 <__ieee754_rem_pio2+0x318>)
 801a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a94c:	e7e0      	b.n	801a910 <__ieee754_rem_pio2+0xe8>
 801a94e:	4b87      	ldr	r3, [pc, #540]	; (801ab6c <__ieee754_rem_pio2+0x344>)
 801a950:	4598      	cmp	r8, r3
 801a952:	f300 80d9 	bgt.w	801ab08 <__ieee754_rem_pio2+0x2e0>
 801a956:	f000 fefd 	bl	801b754 <fabs>
 801a95a:	ec55 4b10 	vmov	r4, r5, d0
 801a95e:	ee10 0a10 	vmov	r0, s0
 801a962:	a379      	add	r3, pc, #484	; (adr r3, 801ab48 <__ieee754_rem_pio2+0x320>)
 801a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a968:	4629      	mov	r1, r5
 801a96a:	f7e5 fe6d 	bl	8000648 <__aeabi_dmul>
 801a96e:	4b80      	ldr	r3, [pc, #512]	; (801ab70 <__ieee754_rem_pio2+0x348>)
 801a970:	2200      	movs	r2, #0
 801a972:	f7e5 fcb3 	bl	80002dc <__adddf3>
 801a976:	f7e6 f917 	bl	8000ba8 <__aeabi_d2iz>
 801a97a:	4683      	mov	fp, r0
 801a97c:	f7e5 fdfa 	bl	8000574 <__aeabi_i2d>
 801a980:	4602      	mov	r2, r0
 801a982:	460b      	mov	r3, r1
 801a984:	ec43 2b18 	vmov	d8, r2, r3
 801a988:	a367      	add	r3, pc, #412	; (adr r3, 801ab28 <__ieee754_rem_pio2+0x300>)
 801a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a98e:	f7e5 fe5b 	bl	8000648 <__aeabi_dmul>
 801a992:	4602      	mov	r2, r0
 801a994:	460b      	mov	r3, r1
 801a996:	4620      	mov	r0, r4
 801a998:	4629      	mov	r1, r5
 801a99a:	f7e5 fc9d 	bl	80002d8 <__aeabi_dsub>
 801a99e:	a364      	add	r3, pc, #400	; (adr r3, 801ab30 <__ieee754_rem_pio2+0x308>)
 801a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a4:	4606      	mov	r6, r0
 801a9a6:	460f      	mov	r7, r1
 801a9a8:	ec51 0b18 	vmov	r0, r1, d8
 801a9ac:	f7e5 fe4c 	bl	8000648 <__aeabi_dmul>
 801a9b0:	f1bb 0f1f 	cmp.w	fp, #31
 801a9b4:	4604      	mov	r4, r0
 801a9b6:	460d      	mov	r5, r1
 801a9b8:	dc0d      	bgt.n	801a9d6 <__ieee754_rem_pio2+0x1ae>
 801a9ba:	4b6e      	ldr	r3, [pc, #440]	; (801ab74 <__ieee754_rem_pio2+0x34c>)
 801a9bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9c4:	4543      	cmp	r3, r8
 801a9c6:	d006      	beq.n	801a9d6 <__ieee754_rem_pio2+0x1ae>
 801a9c8:	4622      	mov	r2, r4
 801a9ca:	462b      	mov	r3, r5
 801a9cc:	4630      	mov	r0, r6
 801a9ce:	4639      	mov	r1, r7
 801a9d0:	f7e5 fc82 	bl	80002d8 <__aeabi_dsub>
 801a9d4:	e00f      	b.n	801a9f6 <__ieee754_rem_pio2+0x1ce>
 801a9d6:	462b      	mov	r3, r5
 801a9d8:	4622      	mov	r2, r4
 801a9da:	4630      	mov	r0, r6
 801a9dc:	4639      	mov	r1, r7
 801a9de:	f7e5 fc7b 	bl	80002d8 <__aeabi_dsub>
 801a9e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a9e6:	9303      	str	r3, [sp, #12]
 801a9e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a9ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801a9f0:	f1b8 0f10 	cmp.w	r8, #16
 801a9f4:	dc02      	bgt.n	801a9fc <__ieee754_rem_pio2+0x1d4>
 801a9f6:	e9ca 0100 	strd	r0, r1, [sl]
 801a9fa:	e039      	b.n	801aa70 <__ieee754_rem_pio2+0x248>
 801a9fc:	a34e      	add	r3, pc, #312	; (adr r3, 801ab38 <__ieee754_rem_pio2+0x310>)
 801a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa02:	ec51 0b18 	vmov	r0, r1, d8
 801aa06:	f7e5 fe1f 	bl	8000648 <__aeabi_dmul>
 801aa0a:	4604      	mov	r4, r0
 801aa0c:	460d      	mov	r5, r1
 801aa0e:	4602      	mov	r2, r0
 801aa10:	460b      	mov	r3, r1
 801aa12:	4630      	mov	r0, r6
 801aa14:	4639      	mov	r1, r7
 801aa16:	f7e5 fc5f 	bl	80002d8 <__aeabi_dsub>
 801aa1a:	4602      	mov	r2, r0
 801aa1c:	460b      	mov	r3, r1
 801aa1e:	4680      	mov	r8, r0
 801aa20:	4689      	mov	r9, r1
 801aa22:	4630      	mov	r0, r6
 801aa24:	4639      	mov	r1, r7
 801aa26:	f7e5 fc57 	bl	80002d8 <__aeabi_dsub>
 801aa2a:	4622      	mov	r2, r4
 801aa2c:	462b      	mov	r3, r5
 801aa2e:	f7e5 fc53 	bl	80002d8 <__aeabi_dsub>
 801aa32:	a343      	add	r3, pc, #268	; (adr r3, 801ab40 <__ieee754_rem_pio2+0x318>)
 801aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa38:	4604      	mov	r4, r0
 801aa3a:	460d      	mov	r5, r1
 801aa3c:	ec51 0b18 	vmov	r0, r1, d8
 801aa40:	f7e5 fe02 	bl	8000648 <__aeabi_dmul>
 801aa44:	4622      	mov	r2, r4
 801aa46:	462b      	mov	r3, r5
 801aa48:	f7e5 fc46 	bl	80002d8 <__aeabi_dsub>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	4604      	mov	r4, r0
 801aa52:	460d      	mov	r5, r1
 801aa54:	4640      	mov	r0, r8
 801aa56:	4649      	mov	r1, r9
 801aa58:	f7e5 fc3e 	bl	80002d8 <__aeabi_dsub>
 801aa5c:	9a03      	ldr	r2, [sp, #12]
 801aa5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801aa62:	1ad3      	subs	r3, r2, r3
 801aa64:	2b31      	cmp	r3, #49	; 0x31
 801aa66:	dc24      	bgt.n	801aab2 <__ieee754_rem_pio2+0x28a>
 801aa68:	e9ca 0100 	strd	r0, r1, [sl]
 801aa6c:	4646      	mov	r6, r8
 801aa6e:	464f      	mov	r7, r9
 801aa70:	e9da 8900 	ldrd	r8, r9, [sl]
 801aa74:	4630      	mov	r0, r6
 801aa76:	4642      	mov	r2, r8
 801aa78:	464b      	mov	r3, r9
 801aa7a:	4639      	mov	r1, r7
 801aa7c:	f7e5 fc2c 	bl	80002d8 <__aeabi_dsub>
 801aa80:	462b      	mov	r3, r5
 801aa82:	4622      	mov	r2, r4
 801aa84:	f7e5 fc28 	bl	80002d8 <__aeabi_dsub>
 801aa88:	9b02      	ldr	r3, [sp, #8]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801aa90:	f6bf af0a 	bge.w	801a8a8 <__ieee754_rem_pio2+0x80>
 801aa94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801aa98:	f8ca 3004 	str.w	r3, [sl, #4]
 801aa9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aaa0:	f8ca 8000 	str.w	r8, [sl]
 801aaa4:	f8ca 0008 	str.w	r0, [sl, #8]
 801aaa8:	f8ca 300c 	str.w	r3, [sl, #12]
 801aaac:	f1cb 0b00 	rsb	fp, fp, #0
 801aab0:	e6fa      	b.n	801a8a8 <__ieee754_rem_pio2+0x80>
 801aab2:	a327      	add	r3, pc, #156	; (adr r3, 801ab50 <__ieee754_rem_pio2+0x328>)
 801aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab8:	ec51 0b18 	vmov	r0, r1, d8
 801aabc:	f7e5 fdc4 	bl	8000648 <__aeabi_dmul>
 801aac0:	4604      	mov	r4, r0
 801aac2:	460d      	mov	r5, r1
 801aac4:	4602      	mov	r2, r0
 801aac6:	460b      	mov	r3, r1
 801aac8:	4640      	mov	r0, r8
 801aaca:	4649      	mov	r1, r9
 801aacc:	f7e5 fc04 	bl	80002d8 <__aeabi_dsub>
 801aad0:	4602      	mov	r2, r0
 801aad2:	460b      	mov	r3, r1
 801aad4:	4606      	mov	r6, r0
 801aad6:	460f      	mov	r7, r1
 801aad8:	4640      	mov	r0, r8
 801aada:	4649      	mov	r1, r9
 801aadc:	f7e5 fbfc 	bl	80002d8 <__aeabi_dsub>
 801aae0:	4622      	mov	r2, r4
 801aae2:	462b      	mov	r3, r5
 801aae4:	f7e5 fbf8 	bl	80002d8 <__aeabi_dsub>
 801aae8:	a31b      	add	r3, pc, #108	; (adr r3, 801ab58 <__ieee754_rem_pio2+0x330>)
 801aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaee:	4604      	mov	r4, r0
 801aaf0:	460d      	mov	r5, r1
 801aaf2:	ec51 0b18 	vmov	r0, r1, d8
 801aaf6:	f7e5 fda7 	bl	8000648 <__aeabi_dmul>
 801aafa:	4622      	mov	r2, r4
 801aafc:	462b      	mov	r3, r5
 801aafe:	f7e5 fbeb 	bl	80002d8 <__aeabi_dsub>
 801ab02:	4604      	mov	r4, r0
 801ab04:	460d      	mov	r5, r1
 801ab06:	e75f      	b.n	801a9c8 <__ieee754_rem_pio2+0x1a0>
 801ab08:	4b1b      	ldr	r3, [pc, #108]	; (801ab78 <__ieee754_rem_pio2+0x350>)
 801ab0a:	4598      	cmp	r8, r3
 801ab0c:	dd36      	ble.n	801ab7c <__ieee754_rem_pio2+0x354>
 801ab0e:	ee10 2a10 	vmov	r2, s0
 801ab12:	462b      	mov	r3, r5
 801ab14:	4620      	mov	r0, r4
 801ab16:	4629      	mov	r1, r5
 801ab18:	f7e5 fbde 	bl	80002d8 <__aeabi_dsub>
 801ab1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ab20:	e9ca 0100 	strd	r0, r1, [sl]
 801ab24:	e694      	b.n	801a850 <__ieee754_rem_pio2+0x28>
 801ab26:	bf00      	nop
 801ab28:	54400000 	.word	0x54400000
 801ab2c:	3ff921fb 	.word	0x3ff921fb
 801ab30:	1a626331 	.word	0x1a626331
 801ab34:	3dd0b461 	.word	0x3dd0b461
 801ab38:	1a600000 	.word	0x1a600000
 801ab3c:	3dd0b461 	.word	0x3dd0b461
 801ab40:	2e037073 	.word	0x2e037073
 801ab44:	3ba3198a 	.word	0x3ba3198a
 801ab48:	6dc9c883 	.word	0x6dc9c883
 801ab4c:	3fe45f30 	.word	0x3fe45f30
 801ab50:	2e000000 	.word	0x2e000000
 801ab54:	3ba3198a 	.word	0x3ba3198a
 801ab58:	252049c1 	.word	0x252049c1
 801ab5c:	397b839a 	.word	0x397b839a
 801ab60:	3fe921fb 	.word	0x3fe921fb
 801ab64:	4002d97b 	.word	0x4002d97b
 801ab68:	3ff921fb 	.word	0x3ff921fb
 801ab6c:	413921fb 	.word	0x413921fb
 801ab70:	3fe00000 	.word	0x3fe00000
 801ab74:	0801c67c 	.word	0x0801c67c
 801ab78:	7fefffff 	.word	0x7fefffff
 801ab7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 801ab80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801ab84:	ee10 0a10 	vmov	r0, s0
 801ab88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801ab8c:	ee10 6a10 	vmov	r6, s0
 801ab90:	460f      	mov	r7, r1
 801ab92:	f7e6 f809 	bl	8000ba8 <__aeabi_d2iz>
 801ab96:	f7e5 fced 	bl	8000574 <__aeabi_i2d>
 801ab9a:	4602      	mov	r2, r0
 801ab9c:	460b      	mov	r3, r1
 801ab9e:	4630      	mov	r0, r6
 801aba0:	4639      	mov	r1, r7
 801aba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801aba6:	f7e5 fb97 	bl	80002d8 <__aeabi_dsub>
 801abaa:	4b23      	ldr	r3, [pc, #140]	; (801ac38 <__ieee754_rem_pio2+0x410>)
 801abac:	2200      	movs	r2, #0
 801abae:	f7e5 fd4b 	bl	8000648 <__aeabi_dmul>
 801abb2:	460f      	mov	r7, r1
 801abb4:	4606      	mov	r6, r0
 801abb6:	f7e5 fff7 	bl	8000ba8 <__aeabi_d2iz>
 801abba:	f7e5 fcdb 	bl	8000574 <__aeabi_i2d>
 801abbe:	4602      	mov	r2, r0
 801abc0:	460b      	mov	r3, r1
 801abc2:	4630      	mov	r0, r6
 801abc4:	4639      	mov	r1, r7
 801abc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801abca:	f7e5 fb85 	bl	80002d8 <__aeabi_dsub>
 801abce:	4b1a      	ldr	r3, [pc, #104]	; (801ac38 <__ieee754_rem_pio2+0x410>)
 801abd0:	2200      	movs	r2, #0
 801abd2:	f7e5 fd39 	bl	8000648 <__aeabi_dmul>
 801abd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801abda:	ad04      	add	r5, sp, #16
 801abdc:	f04f 0803 	mov.w	r8, #3
 801abe0:	46a9      	mov	r9, r5
 801abe2:	2600      	movs	r6, #0
 801abe4:	2700      	movs	r7, #0
 801abe6:	4632      	mov	r2, r6
 801abe8:	463b      	mov	r3, r7
 801abea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801abee:	46c3      	mov	fp, r8
 801abf0:	3d08      	subs	r5, #8
 801abf2:	f108 38ff 	add.w	r8, r8, #4294967295
 801abf6:	f7e5 ff8f 	bl	8000b18 <__aeabi_dcmpeq>
 801abfa:	2800      	cmp	r0, #0
 801abfc:	d1f3      	bne.n	801abe6 <__ieee754_rem_pio2+0x3be>
 801abfe:	4b0f      	ldr	r3, [pc, #60]	; (801ac3c <__ieee754_rem_pio2+0x414>)
 801ac00:	9301      	str	r3, [sp, #4]
 801ac02:	2302      	movs	r3, #2
 801ac04:	9300      	str	r3, [sp, #0]
 801ac06:	4622      	mov	r2, r4
 801ac08:	465b      	mov	r3, fp
 801ac0a:	4651      	mov	r1, sl
 801ac0c:	4648      	mov	r0, r9
 801ac0e:	f000 f993 	bl	801af38 <__kernel_rem_pio2>
 801ac12:	9b02      	ldr	r3, [sp, #8]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	4683      	mov	fp, r0
 801ac18:	f6bf ae46 	bge.w	801a8a8 <__ieee754_rem_pio2+0x80>
 801ac1c:	e9da 2100 	ldrd	r2, r1, [sl]
 801ac20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac24:	e9ca 2300 	strd	r2, r3, [sl]
 801ac28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801ac2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801ac34:	e73a      	b.n	801aaac <__ieee754_rem_pio2+0x284>
 801ac36:	bf00      	nop
 801ac38:	41700000 	.word	0x41700000
 801ac3c:	0801c6fc 	.word	0x0801c6fc

0801ac40 <__ieee754_sqrt>:
 801ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac44:	ec55 4b10 	vmov	r4, r5, d0
 801ac48:	4e55      	ldr	r6, [pc, #340]	; (801ada0 <__ieee754_sqrt+0x160>)
 801ac4a:	43ae      	bics	r6, r5
 801ac4c:	ee10 0a10 	vmov	r0, s0
 801ac50:	ee10 3a10 	vmov	r3, s0
 801ac54:	462a      	mov	r2, r5
 801ac56:	4629      	mov	r1, r5
 801ac58:	d110      	bne.n	801ac7c <__ieee754_sqrt+0x3c>
 801ac5a:	ee10 2a10 	vmov	r2, s0
 801ac5e:	462b      	mov	r3, r5
 801ac60:	f7e5 fcf2 	bl	8000648 <__aeabi_dmul>
 801ac64:	4602      	mov	r2, r0
 801ac66:	460b      	mov	r3, r1
 801ac68:	4620      	mov	r0, r4
 801ac6a:	4629      	mov	r1, r5
 801ac6c:	f7e5 fb36 	bl	80002dc <__adddf3>
 801ac70:	4604      	mov	r4, r0
 801ac72:	460d      	mov	r5, r1
 801ac74:	ec45 4b10 	vmov	d0, r4, r5
 801ac78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac7c:	2d00      	cmp	r5, #0
 801ac7e:	dc10      	bgt.n	801aca2 <__ieee754_sqrt+0x62>
 801ac80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ac84:	4330      	orrs	r0, r6
 801ac86:	d0f5      	beq.n	801ac74 <__ieee754_sqrt+0x34>
 801ac88:	b15d      	cbz	r5, 801aca2 <__ieee754_sqrt+0x62>
 801ac8a:	ee10 2a10 	vmov	r2, s0
 801ac8e:	462b      	mov	r3, r5
 801ac90:	ee10 0a10 	vmov	r0, s0
 801ac94:	f7e5 fb20 	bl	80002d8 <__aeabi_dsub>
 801ac98:	4602      	mov	r2, r0
 801ac9a:	460b      	mov	r3, r1
 801ac9c:	f7e5 fdfe 	bl	800089c <__aeabi_ddiv>
 801aca0:	e7e6      	b.n	801ac70 <__ieee754_sqrt+0x30>
 801aca2:	1512      	asrs	r2, r2, #20
 801aca4:	d074      	beq.n	801ad90 <__ieee754_sqrt+0x150>
 801aca6:	07d4      	lsls	r4, r2, #31
 801aca8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801acac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801acb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801acb4:	bf5e      	ittt	pl
 801acb6:	0fda      	lsrpl	r2, r3, #31
 801acb8:	005b      	lslpl	r3, r3, #1
 801acba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801acbe:	2400      	movs	r4, #0
 801acc0:	0fda      	lsrs	r2, r3, #31
 801acc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801acc6:	107f      	asrs	r7, r7, #1
 801acc8:	005b      	lsls	r3, r3, #1
 801acca:	2516      	movs	r5, #22
 801accc:	4620      	mov	r0, r4
 801acce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801acd2:	1886      	adds	r6, r0, r2
 801acd4:	428e      	cmp	r6, r1
 801acd6:	bfde      	ittt	le
 801acd8:	1b89      	suble	r1, r1, r6
 801acda:	18b0      	addle	r0, r6, r2
 801acdc:	18a4      	addle	r4, r4, r2
 801acde:	0049      	lsls	r1, r1, #1
 801ace0:	3d01      	subs	r5, #1
 801ace2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ace6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801acea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801acee:	d1f0      	bne.n	801acd2 <__ieee754_sqrt+0x92>
 801acf0:	462a      	mov	r2, r5
 801acf2:	f04f 0e20 	mov.w	lr, #32
 801acf6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801acfa:	4281      	cmp	r1, r0
 801acfc:	eb06 0c05 	add.w	ip, r6, r5
 801ad00:	dc02      	bgt.n	801ad08 <__ieee754_sqrt+0xc8>
 801ad02:	d113      	bne.n	801ad2c <__ieee754_sqrt+0xec>
 801ad04:	459c      	cmp	ip, r3
 801ad06:	d811      	bhi.n	801ad2c <__ieee754_sqrt+0xec>
 801ad08:	f1bc 0f00 	cmp.w	ip, #0
 801ad0c:	eb0c 0506 	add.w	r5, ip, r6
 801ad10:	da43      	bge.n	801ad9a <__ieee754_sqrt+0x15a>
 801ad12:	2d00      	cmp	r5, #0
 801ad14:	db41      	blt.n	801ad9a <__ieee754_sqrt+0x15a>
 801ad16:	f100 0801 	add.w	r8, r0, #1
 801ad1a:	1a09      	subs	r1, r1, r0
 801ad1c:	459c      	cmp	ip, r3
 801ad1e:	bf88      	it	hi
 801ad20:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ad24:	eba3 030c 	sub.w	r3, r3, ip
 801ad28:	4432      	add	r2, r6
 801ad2a:	4640      	mov	r0, r8
 801ad2c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ad30:	f1be 0e01 	subs.w	lr, lr, #1
 801ad34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ad38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ad3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ad40:	d1db      	bne.n	801acfa <__ieee754_sqrt+0xba>
 801ad42:	430b      	orrs	r3, r1
 801ad44:	d006      	beq.n	801ad54 <__ieee754_sqrt+0x114>
 801ad46:	1c50      	adds	r0, r2, #1
 801ad48:	bf13      	iteet	ne
 801ad4a:	3201      	addne	r2, #1
 801ad4c:	3401      	addeq	r4, #1
 801ad4e:	4672      	moveq	r2, lr
 801ad50:	f022 0201 	bicne.w	r2, r2, #1
 801ad54:	1063      	asrs	r3, r4, #1
 801ad56:	0852      	lsrs	r2, r2, #1
 801ad58:	07e1      	lsls	r1, r4, #31
 801ad5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ad5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ad62:	bf48      	it	mi
 801ad64:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ad68:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ad6c:	4614      	mov	r4, r2
 801ad6e:	e781      	b.n	801ac74 <__ieee754_sqrt+0x34>
 801ad70:	0ad9      	lsrs	r1, r3, #11
 801ad72:	3815      	subs	r0, #21
 801ad74:	055b      	lsls	r3, r3, #21
 801ad76:	2900      	cmp	r1, #0
 801ad78:	d0fa      	beq.n	801ad70 <__ieee754_sqrt+0x130>
 801ad7a:	02cd      	lsls	r5, r1, #11
 801ad7c:	d50a      	bpl.n	801ad94 <__ieee754_sqrt+0x154>
 801ad7e:	f1c2 0420 	rsb	r4, r2, #32
 801ad82:	fa23 f404 	lsr.w	r4, r3, r4
 801ad86:	1e55      	subs	r5, r2, #1
 801ad88:	4093      	lsls	r3, r2
 801ad8a:	4321      	orrs	r1, r4
 801ad8c:	1b42      	subs	r2, r0, r5
 801ad8e:	e78a      	b.n	801aca6 <__ieee754_sqrt+0x66>
 801ad90:	4610      	mov	r0, r2
 801ad92:	e7f0      	b.n	801ad76 <__ieee754_sqrt+0x136>
 801ad94:	0049      	lsls	r1, r1, #1
 801ad96:	3201      	adds	r2, #1
 801ad98:	e7ef      	b.n	801ad7a <__ieee754_sqrt+0x13a>
 801ad9a:	4680      	mov	r8, r0
 801ad9c:	e7bd      	b.n	801ad1a <__ieee754_sqrt+0xda>
 801ad9e:	bf00      	nop
 801ada0:	7ff00000 	.word	0x7ff00000
 801ada4:	00000000 	.word	0x00000000

0801ada8 <__kernel_cos>:
 801ada8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adac:	ec57 6b10 	vmov	r6, r7, d0
 801adb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801adb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801adb8:	ed8d 1b00 	vstr	d1, [sp]
 801adbc:	da07      	bge.n	801adce <__kernel_cos+0x26>
 801adbe:	ee10 0a10 	vmov	r0, s0
 801adc2:	4639      	mov	r1, r7
 801adc4:	f7e5 fef0 	bl	8000ba8 <__aeabi_d2iz>
 801adc8:	2800      	cmp	r0, #0
 801adca:	f000 8088 	beq.w	801aede <__kernel_cos+0x136>
 801adce:	4632      	mov	r2, r6
 801add0:	463b      	mov	r3, r7
 801add2:	4630      	mov	r0, r6
 801add4:	4639      	mov	r1, r7
 801add6:	f7e5 fc37 	bl	8000648 <__aeabi_dmul>
 801adda:	4b51      	ldr	r3, [pc, #324]	; (801af20 <__kernel_cos+0x178>)
 801addc:	2200      	movs	r2, #0
 801adde:	4604      	mov	r4, r0
 801ade0:	460d      	mov	r5, r1
 801ade2:	f7e5 fc31 	bl	8000648 <__aeabi_dmul>
 801ade6:	a340      	add	r3, pc, #256	; (adr r3, 801aee8 <__kernel_cos+0x140>)
 801ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adec:	4682      	mov	sl, r0
 801adee:	468b      	mov	fp, r1
 801adf0:	4620      	mov	r0, r4
 801adf2:	4629      	mov	r1, r5
 801adf4:	f7e5 fc28 	bl	8000648 <__aeabi_dmul>
 801adf8:	a33d      	add	r3, pc, #244	; (adr r3, 801aef0 <__kernel_cos+0x148>)
 801adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adfe:	f7e5 fa6d 	bl	80002dc <__adddf3>
 801ae02:	4622      	mov	r2, r4
 801ae04:	462b      	mov	r3, r5
 801ae06:	f7e5 fc1f 	bl	8000648 <__aeabi_dmul>
 801ae0a:	a33b      	add	r3, pc, #236	; (adr r3, 801aef8 <__kernel_cos+0x150>)
 801ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae10:	f7e5 fa62 	bl	80002d8 <__aeabi_dsub>
 801ae14:	4622      	mov	r2, r4
 801ae16:	462b      	mov	r3, r5
 801ae18:	f7e5 fc16 	bl	8000648 <__aeabi_dmul>
 801ae1c:	a338      	add	r3, pc, #224	; (adr r3, 801af00 <__kernel_cos+0x158>)
 801ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae22:	f7e5 fa5b 	bl	80002dc <__adddf3>
 801ae26:	4622      	mov	r2, r4
 801ae28:	462b      	mov	r3, r5
 801ae2a:	f7e5 fc0d 	bl	8000648 <__aeabi_dmul>
 801ae2e:	a336      	add	r3, pc, #216	; (adr r3, 801af08 <__kernel_cos+0x160>)
 801ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae34:	f7e5 fa50 	bl	80002d8 <__aeabi_dsub>
 801ae38:	4622      	mov	r2, r4
 801ae3a:	462b      	mov	r3, r5
 801ae3c:	f7e5 fc04 	bl	8000648 <__aeabi_dmul>
 801ae40:	a333      	add	r3, pc, #204	; (adr r3, 801af10 <__kernel_cos+0x168>)
 801ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae46:	f7e5 fa49 	bl	80002dc <__adddf3>
 801ae4a:	4622      	mov	r2, r4
 801ae4c:	462b      	mov	r3, r5
 801ae4e:	f7e5 fbfb 	bl	8000648 <__aeabi_dmul>
 801ae52:	4622      	mov	r2, r4
 801ae54:	462b      	mov	r3, r5
 801ae56:	f7e5 fbf7 	bl	8000648 <__aeabi_dmul>
 801ae5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae5e:	4604      	mov	r4, r0
 801ae60:	460d      	mov	r5, r1
 801ae62:	4630      	mov	r0, r6
 801ae64:	4639      	mov	r1, r7
 801ae66:	f7e5 fbef 	bl	8000648 <__aeabi_dmul>
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	4602      	mov	r2, r0
 801ae6e:	4629      	mov	r1, r5
 801ae70:	4620      	mov	r0, r4
 801ae72:	f7e5 fa31 	bl	80002d8 <__aeabi_dsub>
 801ae76:	4b2b      	ldr	r3, [pc, #172]	; (801af24 <__kernel_cos+0x17c>)
 801ae78:	4598      	cmp	r8, r3
 801ae7a:	4606      	mov	r6, r0
 801ae7c:	460f      	mov	r7, r1
 801ae7e:	dc10      	bgt.n	801aea2 <__kernel_cos+0xfa>
 801ae80:	4602      	mov	r2, r0
 801ae82:	460b      	mov	r3, r1
 801ae84:	4650      	mov	r0, sl
 801ae86:	4659      	mov	r1, fp
 801ae88:	f7e5 fa26 	bl	80002d8 <__aeabi_dsub>
 801ae8c:	460b      	mov	r3, r1
 801ae8e:	4926      	ldr	r1, [pc, #152]	; (801af28 <__kernel_cos+0x180>)
 801ae90:	4602      	mov	r2, r0
 801ae92:	2000      	movs	r0, #0
 801ae94:	f7e5 fa20 	bl	80002d8 <__aeabi_dsub>
 801ae98:	ec41 0b10 	vmov	d0, r0, r1
 801ae9c:	b003      	add	sp, #12
 801ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea2:	4b22      	ldr	r3, [pc, #136]	; (801af2c <__kernel_cos+0x184>)
 801aea4:	4920      	ldr	r1, [pc, #128]	; (801af28 <__kernel_cos+0x180>)
 801aea6:	4598      	cmp	r8, r3
 801aea8:	bfcc      	ite	gt
 801aeaa:	4d21      	ldrgt	r5, [pc, #132]	; (801af30 <__kernel_cos+0x188>)
 801aeac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801aeb0:	2400      	movs	r4, #0
 801aeb2:	4622      	mov	r2, r4
 801aeb4:	462b      	mov	r3, r5
 801aeb6:	2000      	movs	r0, #0
 801aeb8:	f7e5 fa0e 	bl	80002d8 <__aeabi_dsub>
 801aebc:	4622      	mov	r2, r4
 801aebe:	4680      	mov	r8, r0
 801aec0:	4689      	mov	r9, r1
 801aec2:	462b      	mov	r3, r5
 801aec4:	4650      	mov	r0, sl
 801aec6:	4659      	mov	r1, fp
 801aec8:	f7e5 fa06 	bl	80002d8 <__aeabi_dsub>
 801aecc:	4632      	mov	r2, r6
 801aece:	463b      	mov	r3, r7
 801aed0:	f7e5 fa02 	bl	80002d8 <__aeabi_dsub>
 801aed4:	4602      	mov	r2, r0
 801aed6:	460b      	mov	r3, r1
 801aed8:	4640      	mov	r0, r8
 801aeda:	4649      	mov	r1, r9
 801aedc:	e7da      	b.n	801ae94 <__kernel_cos+0xec>
 801aede:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801af18 <__kernel_cos+0x170>
 801aee2:	e7db      	b.n	801ae9c <__kernel_cos+0xf4>
 801aee4:	f3af 8000 	nop.w
 801aee8:	be8838d4 	.word	0xbe8838d4
 801aeec:	bda8fae9 	.word	0xbda8fae9
 801aef0:	bdb4b1c4 	.word	0xbdb4b1c4
 801aef4:	3e21ee9e 	.word	0x3e21ee9e
 801aef8:	809c52ad 	.word	0x809c52ad
 801aefc:	3e927e4f 	.word	0x3e927e4f
 801af00:	19cb1590 	.word	0x19cb1590
 801af04:	3efa01a0 	.word	0x3efa01a0
 801af08:	16c15177 	.word	0x16c15177
 801af0c:	3f56c16c 	.word	0x3f56c16c
 801af10:	5555554c 	.word	0x5555554c
 801af14:	3fa55555 	.word	0x3fa55555
 801af18:	00000000 	.word	0x00000000
 801af1c:	3ff00000 	.word	0x3ff00000
 801af20:	3fe00000 	.word	0x3fe00000
 801af24:	3fd33332 	.word	0x3fd33332
 801af28:	3ff00000 	.word	0x3ff00000
 801af2c:	3fe90000 	.word	0x3fe90000
 801af30:	3fd20000 	.word	0x3fd20000
 801af34:	00000000 	.word	0x00000000

0801af38 <__kernel_rem_pio2>:
 801af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af3c:	ed2d 8b02 	vpush	{d8}
 801af40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801af44:	f112 0f14 	cmn.w	r2, #20
 801af48:	9308      	str	r3, [sp, #32]
 801af4a:	9101      	str	r1, [sp, #4]
 801af4c:	4bc4      	ldr	r3, [pc, #784]	; (801b260 <__kernel_rem_pio2+0x328>)
 801af4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801af50:	900b      	str	r0, [sp, #44]	; 0x2c
 801af52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801af56:	9302      	str	r3, [sp, #8]
 801af58:	9b08      	ldr	r3, [sp, #32]
 801af5a:	f103 33ff 	add.w	r3, r3, #4294967295
 801af5e:	bfa8      	it	ge
 801af60:	1ed4      	subge	r4, r2, #3
 801af62:	9306      	str	r3, [sp, #24]
 801af64:	bfb2      	itee	lt
 801af66:	2400      	movlt	r4, #0
 801af68:	2318      	movge	r3, #24
 801af6a:	fb94 f4f3 	sdivge	r4, r4, r3
 801af6e:	f06f 0317 	mvn.w	r3, #23
 801af72:	fb04 3303 	mla	r3, r4, r3, r3
 801af76:	eb03 0a02 	add.w	sl, r3, r2
 801af7a:	9b02      	ldr	r3, [sp, #8]
 801af7c:	9a06      	ldr	r2, [sp, #24]
 801af7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801b250 <__kernel_rem_pio2+0x318>
 801af82:	eb03 0802 	add.w	r8, r3, r2
 801af86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801af88:	1aa7      	subs	r7, r4, r2
 801af8a:	ae22      	add	r6, sp, #136	; 0x88
 801af8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801af90:	2500      	movs	r5, #0
 801af92:	4545      	cmp	r5, r8
 801af94:	dd13      	ble.n	801afbe <__kernel_rem_pio2+0x86>
 801af96:	9b08      	ldr	r3, [sp, #32]
 801af98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801b250 <__kernel_rem_pio2+0x318>
 801af9c:	aa22      	add	r2, sp, #136	; 0x88
 801af9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801afa2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801afa6:	f04f 0800 	mov.w	r8, #0
 801afaa:	9b02      	ldr	r3, [sp, #8]
 801afac:	4598      	cmp	r8, r3
 801afae:	dc2f      	bgt.n	801b010 <__kernel_rem_pio2+0xd8>
 801afb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 801afb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801afb8:	462f      	mov	r7, r5
 801afba:	2600      	movs	r6, #0
 801afbc:	e01b      	b.n	801aff6 <__kernel_rem_pio2+0xbe>
 801afbe:	42ef      	cmn	r7, r5
 801afc0:	d407      	bmi.n	801afd2 <__kernel_rem_pio2+0x9a>
 801afc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801afc6:	f7e5 fad5 	bl	8000574 <__aeabi_i2d>
 801afca:	e8e6 0102 	strd	r0, r1, [r6], #8
 801afce:	3501      	adds	r5, #1
 801afd0:	e7df      	b.n	801af92 <__kernel_rem_pio2+0x5a>
 801afd2:	ec51 0b18 	vmov	r0, r1, d8
 801afd6:	e7f8      	b.n	801afca <__kernel_rem_pio2+0x92>
 801afd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801afdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801afe0:	f7e5 fb32 	bl	8000648 <__aeabi_dmul>
 801afe4:	4602      	mov	r2, r0
 801afe6:	460b      	mov	r3, r1
 801afe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801afec:	f7e5 f976 	bl	80002dc <__adddf3>
 801aff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aff4:	3601      	adds	r6, #1
 801aff6:	9b06      	ldr	r3, [sp, #24]
 801aff8:	429e      	cmp	r6, r3
 801affa:	f1a7 0708 	sub.w	r7, r7, #8
 801affe:	ddeb      	ble.n	801afd8 <__kernel_rem_pio2+0xa0>
 801b000:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b004:	f108 0801 	add.w	r8, r8, #1
 801b008:	ecab 7b02 	vstmia	fp!, {d7}
 801b00c:	3508      	adds	r5, #8
 801b00e:	e7cc      	b.n	801afaa <__kernel_rem_pio2+0x72>
 801b010:	9b02      	ldr	r3, [sp, #8]
 801b012:	aa0e      	add	r2, sp, #56	; 0x38
 801b014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b018:	930d      	str	r3, [sp, #52]	; 0x34
 801b01a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b01c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b020:	9c02      	ldr	r4, [sp, #8]
 801b022:	930c      	str	r3, [sp, #48]	; 0x30
 801b024:	00e3      	lsls	r3, r4, #3
 801b026:	930a      	str	r3, [sp, #40]	; 0x28
 801b028:	ab9a      	add	r3, sp, #616	; 0x268
 801b02a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b02e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b032:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801b036:	ab72      	add	r3, sp, #456	; 0x1c8
 801b038:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801b03c:	46c3      	mov	fp, r8
 801b03e:	46a1      	mov	r9, r4
 801b040:	f1b9 0f00 	cmp.w	r9, #0
 801b044:	f1a5 0508 	sub.w	r5, r5, #8
 801b048:	dc77      	bgt.n	801b13a <__kernel_rem_pio2+0x202>
 801b04a:	ec47 6b10 	vmov	d0, r6, r7
 801b04e:	4650      	mov	r0, sl
 801b050:	f000 fc0a 	bl	801b868 <scalbn>
 801b054:	ec57 6b10 	vmov	r6, r7, d0
 801b058:	2200      	movs	r2, #0
 801b05a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b05e:	ee10 0a10 	vmov	r0, s0
 801b062:	4639      	mov	r1, r7
 801b064:	f7e5 faf0 	bl	8000648 <__aeabi_dmul>
 801b068:	ec41 0b10 	vmov	d0, r0, r1
 801b06c:	f000 fb7c 	bl	801b768 <floor>
 801b070:	4b7c      	ldr	r3, [pc, #496]	; (801b264 <__kernel_rem_pio2+0x32c>)
 801b072:	ec51 0b10 	vmov	r0, r1, d0
 801b076:	2200      	movs	r2, #0
 801b078:	f7e5 fae6 	bl	8000648 <__aeabi_dmul>
 801b07c:	4602      	mov	r2, r0
 801b07e:	460b      	mov	r3, r1
 801b080:	4630      	mov	r0, r6
 801b082:	4639      	mov	r1, r7
 801b084:	f7e5 f928 	bl	80002d8 <__aeabi_dsub>
 801b088:	460f      	mov	r7, r1
 801b08a:	4606      	mov	r6, r0
 801b08c:	f7e5 fd8c 	bl	8000ba8 <__aeabi_d2iz>
 801b090:	9004      	str	r0, [sp, #16]
 801b092:	f7e5 fa6f 	bl	8000574 <__aeabi_i2d>
 801b096:	4602      	mov	r2, r0
 801b098:	460b      	mov	r3, r1
 801b09a:	4630      	mov	r0, r6
 801b09c:	4639      	mov	r1, r7
 801b09e:	f7e5 f91b 	bl	80002d8 <__aeabi_dsub>
 801b0a2:	f1ba 0f00 	cmp.w	sl, #0
 801b0a6:	4606      	mov	r6, r0
 801b0a8:	460f      	mov	r7, r1
 801b0aa:	dd6d      	ble.n	801b188 <__kernel_rem_pio2+0x250>
 801b0ac:	1e62      	subs	r2, r4, #1
 801b0ae:	ab0e      	add	r3, sp, #56	; 0x38
 801b0b0:	9d04      	ldr	r5, [sp, #16]
 801b0b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b0b6:	f1ca 0118 	rsb	r1, sl, #24
 801b0ba:	fa40 f301 	asr.w	r3, r0, r1
 801b0be:	441d      	add	r5, r3
 801b0c0:	408b      	lsls	r3, r1
 801b0c2:	1ac0      	subs	r0, r0, r3
 801b0c4:	ab0e      	add	r3, sp, #56	; 0x38
 801b0c6:	9504      	str	r5, [sp, #16]
 801b0c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801b0cc:	f1ca 0317 	rsb	r3, sl, #23
 801b0d0:	fa40 fb03 	asr.w	fp, r0, r3
 801b0d4:	f1bb 0f00 	cmp.w	fp, #0
 801b0d8:	dd65      	ble.n	801b1a6 <__kernel_rem_pio2+0x26e>
 801b0da:	9b04      	ldr	r3, [sp, #16]
 801b0dc:	2200      	movs	r2, #0
 801b0de:	3301      	adds	r3, #1
 801b0e0:	9304      	str	r3, [sp, #16]
 801b0e2:	4615      	mov	r5, r2
 801b0e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801b0e8:	4294      	cmp	r4, r2
 801b0ea:	f300 809c 	bgt.w	801b226 <__kernel_rem_pio2+0x2ee>
 801b0ee:	f1ba 0f00 	cmp.w	sl, #0
 801b0f2:	dd07      	ble.n	801b104 <__kernel_rem_pio2+0x1cc>
 801b0f4:	f1ba 0f01 	cmp.w	sl, #1
 801b0f8:	f000 80c0 	beq.w	801b27c <__kernel_rem_pio2+0x344>
 801b0fc:	f1ba 0f02 	cmp.w	sl, #2
 801b100:	f000 80c6 	beq.w	801b290 <__kernel_rem_pio2+0x358>
 801b104:	f1bb 0f02 	cmp.w	fp, #2
 801b108:	d14d      	bne.n	801b1a6 <__kernel_rem_pio2+0x26e>
 801b10a:	4632      	mov	r2, r6
 801b10c:	463b      	mov	r3, r7
 801b10e:	4956      	ldr	r1, [pc, #344]	; (801b268 <__kernel_rem_pio2+0x330>)
 801b110:	2000      	movs	r0, #0
 801b112:	f7e5 f8e1 	bl	80002d8 <__aeabi_dsub>
 801b116:	4606      	mov	r6, r0
 801b118:	460f      	mov	r7, r1
 801b11a:	2d00      	cmp	r5, #0
 801b11c:	d043      	beq.n	801b1a6 <__kernel_rem_pio2+0x26e>
 801b11e:	4650      	mov	r0, sl
 801b120:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801b258 <__kernel_rem_pio2+0x320>
 801b124:	f000 fba0 	bl	801b868 <scalbn>
 801b128:	4630      	mov	r0, r6
 801b12a:	4639      	mov	r1, r7
 801b12c:	ec53 2b10 	vmov	r2, r3, d0
 801b130:	f7e5 f8d2 	bl	80002d8 <__aeabi_dsub>
 801b134:	4606      	mov	r6, r0
 801b136:	460f      	mov	r7, r1
 801b138:	e035      	b.n	801b1a6 <__kernel_rem_pio2+0x26e>
 801b13a:	4b4c      	ldr	r3, [pc, #304]	; (801b26c <__kernel_rem_pio2+0x334>)
 801b13c:	2200      	movs	r2, #0
 801b13e:	4630      	mov	r0, r6
 801b140:	4639      	mov	r1, r7
 801b142:	f7e5 fa81 	bl	8000648 <__aeabi_dmul>
 801b146:	f7e5 fd2f 	bl	8000ba8 <__aeabi_d2iz>
 801b14a:	f7e5 fa13 	bl	8000574 <__aeabi_i2d>
 801b14e:	4602      	mov	r2, r0
 801b150:	460b      	mov	r3, r1
 801b152:	ec43 2b18 	vmov	d8, r2, r3
 801b156:	4b46      	ldr	r3, [pc, #280]	; (801b270 <__kernel_rem_pio2+0x338>)
 801b158:	2200      	movs	r2, #0
 801b15a:	f7e5 fa75 	bl	8000648 <__aeabi_dmul>
 801b15e:	4602      	mov	r2, r0
 801b160:	460b      	mov	r3, r1
 801b162:	4630      	mov	r0, r6
 801b164:	4639      	mov	r1, r7
 801b166:	f7e5 f8b7 	bl	80002d8 <__aeabi_dsub>
 801b16a:	f7e5 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 801b16e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b172:	f84b 0b04 	str.w	r0, [fp], #4
 801b176:	ec51 0b18 	vmov	r0, r1, d8
 801b17a:	f7e5 f8af 	bl	80002dc <__adddf3>
 801b17e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b182:	4606      	mov	r6, r0
 801b184:	460f      	mov	r7, r1
 801b186:	e75b      	b.n	801b040 <__kernel_rem_pio2+0x108>
 801b188:	d106      	bne.n	801b198 <__kernel_rem_pio2+0x260>
 801b18a:	1e63      	subs	r3, r4, #1
 801b18c:	aa0e      	add	r2, sp, #56	; 0x38
 801b18e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b192:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801b196:	e79d      	b.n	801b0d4 <__kernel_rem_pio2+0x19c>
 801b198:	4b36      	ldr	r3, [pc, #216]	; (801b274 <__kernel_rem_pio2+0x33c>)
 801b19a:	2200      	movs	r2, #0
 801b19c:	f7e5 fcda 	bl	8000b54 <__aeabi_dcmpge>
 801b1a0:	2800      	cmp	r0, #0
 801b1a2:	d13d      	bne.n	801b220 <__kernel_rem_pio2+0x2e8>
 801b1a4:	4683      	mov	fp, r0
 801b1a6:	2200      	movs	r2, #0
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	4630      	mov	r0, r6
 801b1ac:	4639      	mov	r1, r7
 801b1ae:	f7e5 fcb3 	bl	8000b18 <__aeabi_dcmpeq>
 801b1b2:	2800      	cmp	r0, #0
 801b1b4:	f000 80c0 	beq.w	801b338 <__kernel_rem_pio2+0x400>
 801b1b8:	1e65      	subs	r5, r4, #1
 801b1ba:	462b      	mov	r3, r5
 801b1bc:	2200      	movs	r2, #0
 801b1be:	9902      	ldr	r1, [sp, #8]
 801b1c0:	428b      	cmp	r3, r1
 801b1c2:	da6c      	bge.n	801b29e <__kernel_rem_pio2+0x366>
 801b1c4:	2a00      	cmp	r2, #0
 801b1c6:	f000 8089 	beq.w	801b2dc <__kernel_rem_pio2+0x3a4>
 801b1ca:	ab0e      	add	r3, sp, #56	; 0x38
 801b1cc:	f1aa 0a18 	sub.w	sl, sl, #24
 801b1d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	f000 80ad 	beq.w	801b334 <__kernel_rem_pio2+0x3fc>
 801b1da:	4650      	mov	r0, sl
 801b1dc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801b258 <__kernel_rem_pio2+0x320>
 801b1e0:	f000 fb42 	bl	801b868 <scalbn>
 801b1e4:	ab9a      	add	r3, sp, #616	; 0x268
 801b1e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b1ea:	ec57 6b10 	vmov	r6, r7, d0
 801b1ee:	00ec      	lsls	r4, r5, #3
 801b1f0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801b1f4:	46aa      	mov	sl, r5
 801b1f6:	f1ba 0f00 	cmp.w	sl, #0
 801b1fa:	f280 80d6 	bge.w	801b3aa <__kernel_rem_pio2+0x472>
 801b1fe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801b250 <__kernel_rem_pio2+0x318>
 801b202:	462e      	mov	r6, r5
 801b204:	2e00      	cmp	r6, #0
 801b206:	f2c0 8104 	blt.w	801b412 <__kernel_rem_pio2+0x4da>
 801b20a:	ab72      	add	r3, sp, #456	; 0x1c8
 801b20c:	ed8d 8b06 	vstr	d8, [sp, #24]
 801b210:	f8df a064 	ldr.w	sl, [pc, #100]	; 801b278 <__kernel_rem_pio2+0x340>
 801b214:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801b218:	f04f 0800 	mov.w	r8, #0
 801b21c:	1baf      	subs	r7, r5, r6
 801b21e:	e0ea      	b.n	801b3f6 <__kernel_rem_pio2+0x4be>
 801b220:	f04f 0b02 	mov.w	fp, #2
 801b224:	e759      	b.n	801b0da <__kernel_rem_pio2+0x1a2>
 801b226:	f8d8 3000 	ldr.w	r3, [r8]
 801b22a:	b955      	cbnz	r5, 801b242 <__kernel_rem_pio2+0x30a>
 801b22c:	b123      	cbz	r3, 801b238 <__kernel_rem_pio2+0x300>
 801b22e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801b232:	f8c8 3000 	str.w	r3, [r8]
 801b236:	2301      	movs	r3, #1
 801b238:	3201      	adds	r2, #1
 801b23a:	f108 0804 	add.w	r8, r8, #4
 801b23e:	461d      	mov	r5, r3
 801b240:	e752      	b.n	801b0e8 <__kernel_rem_pio2+0x1b0>
 801b242:	1acb      	subs	r3, r1, r3
 801b244:	f8c8 3000 	str.w	r3, [r8]
 801b248:	462b      	mov	r3, r5
 801b24a:	e7f5      	b.n	801b238 <__kernel_rem_pio2+0x300>
 801b24c:	f3af 8000 	nop.w
	...
 801b25c:	3ff00000 	.word	0x3ff00000
 801b260:	0801c848 	.word	0x0801c848
 801b264:	40200000 	.word	0x40200000
 801b268:	3ff00000 	.word	0x3ff00000
 801b26c:	3e700000 	.word	0x3e700000
 801b270:	41700000 	.word	0x41700000
 801b274:	3fe00000 	.word	0x3fe00000
 801b278:	0801c808 	.word	0x0801c808
 801b27c:	1e62      	subs	r2, r4, #1
 801b27e:	ab0e      	add	r3, sp, #56	; 0x38
 801b280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b284:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b288:	a90e      	add	r1, sp, #56	; 0x38
 801b28a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b28e:	e739      	b.n	801b104 <__kernel_rem_pio2+0x1cc>
 801b290:	1e62      	subs	r2, r4, #1
 801b292:	ab0e      	add	r3, sp, #56	; 0x38
 801b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b29c:	e7f4      	b.n	801b288 <__kernel_rem_pio2+0x350>
 801b29e:	a90e      	add	r1, sp, #56	; 0x38
 801b2a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b2a4:	3b01      	subs	r3, #1
 801b2a6:	430a      	orrs	r2, r1
 801b2a8:	e789      	b.n	801b1be <__kernel_rem_pio2+0x286>
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801b2b0:	2900      	cmp	r1, #0
 801b2b2:	d0fa      	beq.n	801b2aa <__kernel_rem_pio2+0x372>
 801b2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b2b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801b2ba:	446a      	add	r2, sp
 801b2bc:	3a98      	subs	r2, #152	; 0x98
 801b2be:	920a      	str	r2, [sp, #40]	; 0x28
 801b2c0:	9a08      	ldr	r2, [sp, #32]
 801b2c2:	18e3      	adds	r3, r4, r3
 801b2c4:	18a5      	adds	r5, r4, r2
 801b2c6:	aa22      	add	r2, sp, #136	; 0x88
 801b2c8:	f104 0801 	add.w	r8, r4, #1
 801b2cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801b2d0:	9304      	str	r3, [sp, #16]
 801b2d2:	9b04      	ldr	r3, [sp, #16]
 801b2d4:	4543      	cmp	r3, r8
 801b2d6:	da04      	bge.n	801b2e2 <__kernel_rem_pio2+0x3aa>
 801b2d8:	461c      	mov	r4, r3
 801b2da:	e6a3      	b.n	801b024 <__kernel_rem_pio2+0xec>
 801b2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b2de:	2301      	movs	r3, #1
 801b2e0:	e7e4      	b.n	801b2ac <__kernel_rem_pio2+0x374>
 801b2e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b2e8:	f7e5 f944 	bl	8000574 <__aeabi_i2d>
 801b2ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 801b2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2f2:	46ab      	mov	fp, r5
 801b2f4:	461c      	mov	r4, r3
 801b2f6:	f04f 0900 	mov.w	r9, #0
 801b2fa:	2600      	movs	r6, #0
 801b2fc:	2700      	movs	r7, #0
 801b2fe:	9b06      	ldr	r3, [sp, #24]
 801b300:	4599      	cmp	r9, r3
 801b302:	dd06      	ble.n	801b312 <__kernel_rem_pio2+0x3da>
 801b304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b306:	e8e3 6702 	strd	r6, r7, [r3], #8
 801b30a:	f108 0801 	add.w	r8, r8, #1
 801b30e:	930a      	str	r3, [sp, #40]	; 0x28
 801b310:	e7df      	b.n	801b2d2 <__kernel_rem_pio2+0x39a>
 801b312:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801b316:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801b31a:	f7e5 f995 	bl	8000648 <__aeabi_dmul>
 801b31e:	4602      	mov	r2, r0
 801b320:	460b      	mov	r3, r1
 801b322:	4630      	mov	r0, r6
 801b324:	4639      	mov	r1, r7
 801b326:	f7e4 ffd9 	bl	80002dc <__adddf3>
 801b32a:	f109 0901 	add.w	r9, r9, #1
 801b32e:	4606      	mov	r6, r0
 801b330:	460f      	mov	r7, r1
 801b332:	e7e4      	b.n	801b2fe <__kernel_rem_pio2+0x3c6>
 801b334:	3d01      	subs	r5, #1
 801b336:	e748      	b.n	801b1ca <__kernel_rem_pio2+0x292>
 801b338:	ec47 6b10 	vmov	d0, r6, r7
 801b33c:	f1ca 0000 	rsb	r0, sl, #0
 801b340:	f000 fa92 	bl	801b868 <scalbn>
 801b344:	ec57 6b10 	vmov	r6, r7, d0
 801b348:	4ba0      	ldr	r3, [pc, #640]	; (801b5cc <__kernel_rem_pio2+0x694>)
 801b34a:	ee10 0a10 	vmov	r0, s0
 801b34e:	2200      	movs	r2, #0
 801b350:	4639      	mov	r1, r7
 801b352:	f7e5 fbff 	bl	8000b54 <__aeabi_dcmpge>
 801b356:	b1f8      	cbz	r0, 801b398 <__kernel_rem_pio2+0x460>
 801b358:	4b9d      	ldr	r3, [pc, #628]	; (801b5d0 <__kernel_rem_pio2+0x698>)
 801b35a:	2200      	movs	r2, #0
 801b35c:	4630      	mov	r0, r6
 801b35e:	4639      	mov	r1, r7
 801b360:	f7e5 f972 	bl	8000648 <__aeabi_dmul>
 801b364:	f7e5 fc20 	bl	8000ba8 <__aeabi_d2iz>
 801b368:	4680      	mov	r8, r0
 801b36a:	f7e5 f903 	bl	8000574 <__aeabi_i2d>
 801b36e:	4b97      	ldr	r3, [pc, #604]	; (801b5cc <__kernel_rem_pio2+0x694>)
 801b370:	2200      	movs	r2, #0
 801b372:	f7e5 f969 	bl	8000648 <__aeabi_dmul>
 801b376:	460b      	mov	r3, r1
 801b378:	4602      	mov	r2, r0
 801b37a:	4639      	mov	r1, r7
 801b37c:	4630      	mov	r0, r6
 801b37e:	f7e4 ffab 	bl	80002d8 <__aeabi_dsub>
 801b382:	f7e5 fc11 	bl	8000ba8 <__aeabi_d2iz>
 801b386:	1c65      	adds	r5, r4, #1
 801b388:	ab0e      	add	r3, sp, #56	; 0x38
 801b38a:	f10a 0a18 	add.w	sl, sl, #24
 801b38e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b392:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801b396:	e720      	b.n	801b1da <__kernel_rem_pio2+0x2a2>
 801b398:	4630      	mov	r0, r6
 801b39a:	4639      	mov	r1, r7
 801b39c:	f7e5 fc04 	bl	8000ba8 <__aeabi_d2iz>
 801b3a0:	ab0e      	add	r3, sp, #56	; 0x38
 801b3a2:	4625      	mov	r5, r4
 801b3a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b3a8:	e717      	b.n	801b1da <__kernel_rem_pio2+0x2a2>
 801b3aa:	ab0e      	add	r3, sp, #56	; 0x38
 801b3ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801b3b0:	f7e5 f8e0 	bl	8000574 <__aeabi_i2d>
 801b3b4:	4632      	mov	r2, r6
 801b3b6:	463b      	mov	r3, r7
 801b3b8:	f7e5 f946 	bl	8000648 <__aeabi_dmul>
 801b3bc:	4b84      	ldr	r3, [pc, #528]	; (801b5d0 <__kernel_rem_pio2+0x698>)
 801b3be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	4630      	mov	r0, r6
 801b3c6:	4639      	mov	r1, r7
 801b3c8:	f7e5 f93e 	bl	8000648 <__aeabi_dmul>
 801b3cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3d0:	4606      	mov	r6, r0
 801b3d2:	460f      	mov	r7, r1
 801b3d4:	e70f      	b.n	801b1f6 <__kernel_rem_pio2+0x2be>
 801b3d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801b3da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801b3de:	f7e5 f933 	bl	8000648 <__aeabi_dmul>
 801b3e2:	4602      	mov	r2, r0
 801b3e4:	460b      	mov	r3, r1
 801b3e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b3ea:	f7e4 ff77 	bl	80002dc <__adddf3>
 801b3ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b3f2:	f108 0801 	add.w	r8, r8, #1
 801b3f6:	9b02      	ldr	r3, [sp, #8]
 801b3f8:	4598      	cmp	r8, r3
 801b3fa:	dc01      	bgt.n	801b400 <__kernel_rem_pio2+0x4c8>
 801b3fc:	45b8      	cmp	r8, r7
 801b3fe:	ddea      	ble.n	801b3d6 <__kernel_rem_pio2+0x49e>
 801b400:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b404:	ab4a      	add	r3, sp, #296	; 0x128
 801b406:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801b40a:	ed87 7b00 	vstr	d7, [r7]
 801b40e:	3e01      	subs	r6, #1
 801b410:	e6f8      	b.n	801b204 <__kernel_rem_pio2+0x2cc>
 801b412:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801b414:	2b02      	cmp	r3, #2
 801b416:	dc0b      	bgt.n	801b430 <__kernel_rem_pio2+0x4f8>
 801b418:	2b00      	cmp	r3, #0
 801b41a:	dc35      	bgt.n	801b488 <__kernel_rem_pio2+0x550>
 801b41c:	d059      	beq.n	801b4d2 <__kernel_rem_pio2+0x59a>
 801b41e:	9b04      	ldr	r3, [sp, #16]
 801b420:	f003 0007 	and.w	r0, r3, #7
 801b424:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801b428:	ecbd 8b02 	vpop	{d8}
 801b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b430:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801b432:	2b03      	cmp	r3, #3
 801b434:	d1f3      	bne.n	801b41e <__kernel_rem_pio2+0x4e6>
 801b436:	ab4a      	add	r3, sp, #296	; 0x128
 801b438:	4423      	add	r3, r4
 801b43a:	9306      	str	r3, [sp, #24]
 801b43c:	461c      	mov	r4, r3
 801b43e:	469a      	mov	sl, r3
 801b440:	9502      	str	r5, [sp, #8]
 801b442:	9b02      	ldr	r3, [sp, #8]
 801b444:	2b00      	cmp	r3, #0
 801b446:	f1aa 0a08 	sub.w	sl, sl, #8
 801b44a:	dc6b      	bgt.n	801b524 <__kernel_rem_pio2+0x5ec>
 801b44c:	46aa      	mov	sl, r5
 801b44e:	f1ba 0f01 	cmp.w	sl, #1
 801b452:	f1a4 0408 	sub.w	r4, r4, #8
 801b456:	f300 8085 	bgt.w	801b564 <__kernel_rem_pio2+0x62c>
 801b45a:	9c06      	ldr	r4, [sp, #24]
 801b45c:	2000      	movs	r0, #0
 801b45e:	3408      	adds	r4, #8
 801b460:	2100      	movs	r1, #0
 801b462:	2d01      	cmp	r5, #1
 801b464:	f300 809d 	bgt.w	801b5a2 <__kernel_rem_pio2+0x66a>
 801b468:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801b46c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801b470:	f1bb 0f00 	cmp.w	fp, #0
 801b474:	f040 809b 	bne.w	801b5ae <__kernel_rem_pio2+0x676>
 801b478:	9b01      	ldr	r3, [sp, #4]
 801b47a:	e9c3 5600 	strd	r5, r6, [r3]
 801b47e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801b482:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b486:	e7ca      	b.n	801b41e <__kernel_rem_pio2+0x4e6>
 801b488:	3408      	adds	r4, #8
 801b48a:	ab4a      	add	r3, sp, #296	; 0x128
 801b48c:	441c      	add	r4, r3
 801b48e:	462e      	mov	r6, r5
 801b490:	2000      	movs	r0, #0
 801b492:	2100      	movs	r1, #0
 801b494:	2e00      	cmp	r6, #0
 801b496:	da36      	bge.n	801b506 <__kernel_rem_pio2+0x5ce>
 801b498:	f1bb 0f00 	cmp.w	fp, #0
 801b49c:	d039      	beq.n	801b512 <__kernel_rem_pio2+0x5da>
 801b49e:	4602      	mov	r2, r0
 801b4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4a4:	9c01      	ldr	r4, [sp, #4]
 801b4a6:	e9c4 2300 	strd	r2, r3, [r4]
 801b4aa:	4602      	mov	r2, r0
 801b4ac:	460b      	mov	r3, r1
 801b4ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801b4b2:	f7e4 ff11 	bl	80002d8 <__aeabi_dsub>
 801b4b6:	ae4c      	add	r6, sp, #304	; 0x130
 801b4b8:	2401      	movs	r4, #1
 801b4ba:	42a5      	cmp	r5, r4
 801b4bc:	da2c      	bge.n	801b518 <__kernel_rem_pio2+0x5e0>
 801b4be:	f1bb 0f00 	cmp.w	fp, #0
 801b4c2:	d002      	beq.n	801b4ca <__kernel_rem_pio2+0x592>
 801b4c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4c8:	4619      	mov	r1, r3
 801b4ca:	9b01      	ldr	r3, [sp, #4]
 801b4cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b4d0:	e7a5      	b.n	801b41e <__kernel_rem_pio2+0x4e6>
 801b4d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801b4d6:	eb0d 0403 	add.w	r4, sp, r3
 801b4da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801b4de:	2000      	movs	r0, #0
 801b4e0:	2100      	movs	r1, #0
 801b4e2:	2d00      	cmp	r5, #0
 801b4e4:	da09      	bge.n	801b4fa <__kernel_rem_pio2+0x5c2>
 801b4e6:	f1bb 0f00 	cmp.w	fp, #0
 801b4ea:	d002      	beq.n	801b4f2 <__kernel_rem_pio2+0x5ba>
 801b4ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4f0:	4619      	mov	r1, r3
 801b4f2:	9b01      	ldr	r3, [sp, #4]
 801b4f4:	e9c3 0100 	strd	r0, r1, [r3]
 801b4f8:	e791      	b.n	801b41e <__kernel_rem_pio2+0x4e6>
 801b4fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b4fe:	f7e4 feed 	bl	80002dc <__adddf3>
 801b502:	3d01      	subs	r5, #1
 801b504:	e7ed      	b.n	801b4e2 <__kernel_rem_pio2+0x5aa>
 801b506:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b50a:	f7e4 fee7 	bl	80002dc <__adddf3>
 801b50e:	3e01      	subs	r6, #1
 801b510:	e7c0      	b.n	801b494 <__kernel_rem_pio2+0x55c>
 801b512:	4602      	mov	r2, r0
 801b514:	460b      	mov	r3, r1
 801b516:	e7c5      	b.n	801b4a4 <__kernel_rem_pio2+0x56c>
 801b518:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b51c:	f7e4 fede 	bl	80002dc <__adddf3>
 801b520:	3401      	adds	r4, #1
 801b522:	e7ca      	b.n	801b4ba <__kernel_rem_pio2+0x582>
 801b524:	e9da 8900 	ldrd	r8, r9, [sl]
 801b528:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b52c:	9b02      	ldr	r3, [sp, #8]
 801b52e:	3b01      	subs	r3, #1
 801b530:	9302      	str	r3, [sp, #8]
 801b532:	4632      	mov	r2, r6
 801b534:	463b      	mov	r3, r7
 801b536:	4640      	mov	r0, r8
 801b538:	4649      	mov	r1, r9
 801b53a:	f7e4 fecf 	bl	80002dc <__adddf3>
 801b53e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b542:	4602      	mov	r2, r0
 801b544:	460b      	mov	r3, r1
 801b546:	4640      	mov	r0, r8
 801b548:	4649      	mov	r1, r9
 801b54a:	f7e4 fec5 	bl	80002d8 <__aeabi_dsub>
 801b54e:	4632      	mov	r2, r6
 801b550:	463b      	mov	r3, r7
 801b552:	f7e4 fec3 	bl	80002dc <__adddf3>
 801b556:	ed9d 7b08 	vldr	d7, [sp, #32]
 801b55a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b55e:	ed8a 7b00 	vstr	d7, [sl]
 801b562:	e76e      	b.n	801b442 <__kernel_rem_pio2+0x50a>
 801b564:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b568:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b56c:	4640      	mov	r0, r8
 801b56e:	4632      	mov	r2, r6
 801b570:	463b      	mov	r3, r7
 801b572:	4649      	mov	r1, r9
 801b574:	f7e4 feb2 	bl	80002dc <__adddf3>
 801b578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b57c:	4602      	mov	r2, r0
 801b57e:	460b      	mov	r3, r1
 801b580:	4640      	mov	r0, r8
 801b582:	4649      	mov	r1, r9
 801b584:	f7e4 fea8 	bl	80002d8 <__aeabi_dsub>
 801b588:	4632      	mov	r2, r6
 801b58a:	463b      	mov	r3, r7
 801b58c:	f7e4 fea6 	bl	80002dc <__adddf3>
 801b590:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b598:	ed84 7b00 	vstr	d7, [r4]
 801b59c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b5a0:	e755      	b.n	801b44e <__kernel_rem_pio2+0x516>
 801b5a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b5a6:	f7e4 fe99 	bl	80002dc <__adddf3>
 801b5aa:	3d01      	subs	r5, #1
 801b5ac:	e759      	b.n	801b462 <__kernel_rem_pio2+0x52a>
 801b5ae:	9b01      	ldr	r3, [sp, #4]
 801b5b0:	9a01      	ldr	r2, [sp, #4]
 801b5b2:	601d      	str	r5, [r3, #0]
 801b5b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801b5b8:	605c      	str	r4, [r3, #4]
 801b5ba:	609f      	str	r7, [r3, #8]
 801b5bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801b5c0:	60d3      	str	r3, [r2, #12]
 801b5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b5c6:	6110      	str	r0, [r2, #16]
 801b5c8:	6153      	str	r3, [r2, #20]
 801b5ca:	e728      	b.n	801b41e <__kernel_rem_pio2+0x4e6>
 801b5cc:	41700000 	.word	0x41700000
 801b5d0:	3e700000 	.word	0x3e700000
 801b5d4:	00000000 	.word	0x00000000

0801b5d8 <__kernel_sin>:
 801b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5dc:	ed2d 8b04 	vpush	{d8-d9}
 801b5e0:	eeb0 8a41 	vmov.f32	s16, s2
 801b5e4:	eef0 8a61 	vmov.f32	s17, s3
 801b5e8:	ec55 4b10 	vmov	r4, r5, d0
 801b5ec:	b083      	sub	sp, #12
 801b5ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b5f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b5f6:	9001      	str	r0, [sp, #4]
 801b5f8:	da06      	bge.n	801b608 <__kernel_sin+0x30>
 801b5fa:	ee10 0a10 	vmov	r0, s0
 801b5fe:	4629      	mov	r1, r5
 801b600:	f7e5 fad2 	bl	8000ba8 <__aeabi_d2iz>
 801b604:	2800      	cmp	r0, #0
 801b606:	d051      	beq.n	801b6ac <__kernel_sin+0xd4>
 801b608:	4622      	mov	r2, r4
 801b60a:	462b      	mov	r3, r5
 801b60c:	4620      	mov	r0, r4
 801b60e:	4629      	mov	r1, r5
 801b610:	f7e5 f81a 	bl	8000648 <__aeabi_dmul>
 801b614:	4682      	mov	sl, r0
 801b616:	468b      	mov	fp, r1
 801b618:	4602      	mov	r2, r0
 801b61a:	460b      	mov	r3, r1
 801b61c:	4620      	mov	r0, r4
 801b61e:	4629      	mov	r1, r5
 801b620:	f7e5 f812 	bl	8000648 <__aeabi_dmul>
 801b624:	a341      	add	r3, pc, #260	; (adr r3, 801b72c <__kernel_sin+0x154>)
 801b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62a:	4680      	mov	r8, r0
 801b62c:	4689      	mov	r9, r1
 801b62e:	4650      	mov	r0, sl
 801b630:	4659      	mov	r1, fp
 801b632:	f7e5 f809 	bl	8000648 <__aeabi_dmul>
 801b636:	a33f      	add	r3, pc, #252	; (adr r3, 801b734 <__kernel_sin+0x15c>)
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	f7e4 fe4c 	bl	80002d8 <__aeabi_dsub>
 801b640:	4652      	mov	r2, sl
 801b642:	465b      	mov	r3, fp
 801b644:	f7e5 f800 	bl	8000648 <__aeabi_dmul>
 801b648:	a33c      	add	r3, pc, #240	; (adr r3, 801b73c <__kernel_sin+0x164>)
 801b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b64e:	f7e4 fe45 	bl	80002dc <__adddf3>
 801b652:	4652      	mov	r2, sl
 801b654:	465b      	mov	r3, fp
 801b656:	f7e4 fff7 	bl	8000648 <__aeabi_dmul>
 801b65a:	a33a      	add	r3, pc, #232	; (adr r3, 801b744 <__kernel_sin+0x16c>)
 801b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b660:	f7e4 fe3a 	bl	80002d8 <__aeabi_dsub>
 801b664:	4652      	mov	r2, sl
 801b666:	465b      	mov	r3, fp
 801b668:	f7e4 ffee 	bl	8000648 <__aeabi_dmul>
 801b66c:	a337      	add	r3, pc, #220	; (adr r3, 801b74c <__kernel_sin+0x174>)
 801b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b672:	f7e4 fe33 	bl	80002dc <__adddf3>
 801b676:	9b01      	ldr	r3, [sp, #4]
 801b678:	4606      	mov	r6, r0
 801b67a:	460f      	mov	r7, r1
 801b67c:	b9eb      	cbnz	r3, 801b6ba <__kernel_sin+0xe2>
 801b67e:	4602      	mov	r2, r0
 801b680:	460b      	mov	r3, r1
 801b682:	4650      	mov	r0, sl
 801b684:	4659      	mov	r1, fp
 801b686:	f7e4 ffdf 	bl	8000648 <__aeabi_dmul>
 801b68a:	a325      	add	r3, pc, #148	; (adr r3, 801b720 <__kernel_sin+0x148>)
 801b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b690:	f7e4 fe22 	bl	80002d8 <__aeabi_dsub>
 801b694:	4642      	mov	r2, r8
 801b696:	464b      	mov	r3, r9
 801b698:	f7e4 ffd6 	bl	8000648 <__aeabi_dmul>
 801b69c:	4602      	mov	r2, r0
 801b69e:	460b      	mov	r3, r1
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	4629      	mov	r1, r5
 801b6a4:	f7e4 fe1a 	bl	80002dc <__adddf3>
 801b6a8:	4604      	mov	r4, r0
 801b6aa:	460d      	mov	r5, r1
 801b6ac:	ec45 4b10 	vmov	d0, r4, r5
 801b6b0:	b003      	add	sp, #12
 801b6b2:	ecbd 8b04 	vpop	{d8-d9}
 801b6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ba:	4b1b      	ldr	r3, [pc, #108]	; (801b728 <__kernel_sin+0x150>)
 801b6bc:	ec51 0b18 	vmov	r0, r1, d8
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	f7e4 ffc1 	bl	8000648 <__aeabi_dmul>
 801b6c6:	4632      	mov	r2, r6
 801b6c8:	ec41 0b19 	vmov	d9, r0, r1
 801b6cc:	463b      	mov	r3, r7
 801b6ce:	4640      	mov	r0, r8
 801b6d0:	4649      	mov	r1, r9
 801b6d2:	f7e4 ffb9 	bl	8000648 <__aeabi_dmul>
 801b6d6:	4602      	mov	r2, r0
 801b6d8:	460b      	mov	r3, r1
 801b6da:	ec51 0b19 	vmov	r0, r1, d9
 801b6de:	f7e4 fdfb 	bl	80002d8 <__aeabi_dsub>
 801b6e2:	4652      	mov	r2, sl
 801b6e4:	465b      	mov	r3, fp
 801b6e6:	f7e4 ffaf 	bl	8000648 <__aeabi_dmul>
 801b6ea:	ec53 2b18 	vmov	r2, r3, d8
 801b6ee:	f7e4 fdf3 	bl	80002d8 <__aeabi_dsub>
 801b6f2:	a30b      	add	r3, pc, #44	; (adr r3, 801b720 <__kernel_sin+0x148>)
 801b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f8:	4606      	mov	r6, r0
 801b6fa:	460f      	mov	r7, r1
 801b6fc:	4640      	mov	r0, r8
 801b6fe:	4649      	mov	r1, r9
 801b700:	f7e4 ffa2 	bl	8000648 <__aeabi_dmul>
 801b704:	4602      	mov	r2, r0
 801b706:	460b      	mov	r3, r1
 801b708:	4630      	mov	r0, r6
 801b70a:	4639      	mov	r1, r7
 801b70c:	f7e4 fde6 	bl	80002dc <__adddf3>
 801b710:	4602      	mov	r2, r0
 801b712:	460b      	mov	r3, r1
 801b714:	4620      	mov	r0, r4
 801b716:	4629      	mov	r1, r5
 801b718:	f7e4 fdde 	bl	80002d8 <__aeabi_dsub>
 801b71c:	e7c4      	b.n	801b6a8 <__kernel_sin+0xd0>
 801b71e:	bf00      	nop
 801b720:	55555549 	.word	0x55555549
 801b724:	3fc55555 	.word	0x3fc55555
 801b728:	3fe00000 	.word	0x3fe00000
 801b72c:	5acfd57c 	.word	0x5acfd57c
 801b730:	3de5d93a 	.word	0x3de5d93a
 801b734:	8a2b9ceb 	.word	0x8a2b9ceb
 801b738:	3e5ae5e6 	.word	0x3e5ae5e6
 801b73c:	57b1fe7d 	.word	0x57b1fe7d
 801b740:	3ec71de3 	.word	0x3ec71de3
 801b744:	19c161d5 	.word	0x19c161d5
 801b748:	3f2a01a0 	.word	0x3f2a01a0
 801b74c:	1110f8a6 	.word	0x1110f8a6
 801b750:	3f811111 	.word	0x3f811111

0801b754 <fabs>:
 801b754:	ec51 0b10 	vmov	r0, r1, d0
 801b758:	ee10 2a10 	vmov	r2, s0
 801b75c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b760:	ec43 2b10 	vmov	d0, r2, r3
 801b764:	4770      	bx	lr
	...

0801b768 <floor>:
 801b768:	ec51 0b10 	vmov	r0, r1, d0
 801b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b770:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b774:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b778:	2e13      	cmp	r6, #19
 801b77a:	ee10 5a10 	vmov	r5, s0
 801b77e:	ee10 8a10 	vmov	r8, s0
 801b782:	460c      	mov	r4, r1
 801b784:	dc32      	bgt.n	801b7ec <floor+0x84>
 801b786:	2e00      	cmp	r6, #0
 801b788:	da14      	bge.n	801b7b4 <floor+0x4c>
 801b78a:	a333      	add	r3, pc, #204	; (adr r3, 801b858 <floor+0xf0>)
 801b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b790:	f7e4 fda4 	bl	80002dc <__adddf3>
 801b794:	2200      	movs	r2, #0
 801b796:	2300      	movs	r3, #0
 801b798:	f7e5 f9e6 	bl	8000b68 <__aeabi_dcmpgt>
 801b79c:	b138      	cbz	r0, 801b7ae <floor+0x46>
 801b79e:	2c00      	cmp	r4, #0
 801b7a0:	da57      	bge.n	801b852 <floor+0xea>
 801b7a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b7a6:	431d      	orrs	r5, r3
 801b7a8:	d001      	beq.n	801b7ae <floor+0x46>
 801b7aa:	4c2d      	ldr	r4, [pc, #180]	; (801b860 <floor+0xf8>)
 801b7ac:	2500      	movs	r5, #0
 801b7ae:	4621      	mov	r1, r4
 801b7b0:	4628      	mov	r0, r5
 801b7b2:	e025      	b.n	801b800 <floor+0x98>
 801b7b4:	4f2b      	ldr	r7, [pc, #172]	; (801b864 <floor+0xfc>)
 801b7b6:	4137      	asrs	r7, r6
 801b7b8:	ea01 0307 	and.w	r3, r1, r7
 801b7bc:	4303      	orrs	r3, r0
 801b7be:	d01f      	beq.n	801b800 <floor+0x98>
 801b7c0:	a325      	add	r3, pc, #148	; (adr r3, 801b858 <floor+0xf0>)
 801b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c6:	f7e4 fd89 	bl	80002dc <__adddf3>
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	f7e5 f9cb 	bl	8000b68 <__aeabi_dcmpgt>
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	d0eb      	beq.n	801b7ae <floor+0x46>
 801b7d6:	2c00      	cmp	r4, #0
 801b7d8:	bfbe      	ittt	lt
 801b7da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b7de:	fa43 f606 	asrlt.w	r6, r3, r6
 801b7e2:	19a4      	addlt	r4, r4, r6
 801b7e4:	ea24 0407 	bic.w	r4, r4, r7
 801b7e8:	2500      	movs	r5, #0
 801b7ea:	e7e0      	b.n	801b7ae <floor+0x46>
 801b7ec:	2e33      	cmp	r6, #51	; 0x33
 801b7ee:	dd0b      	ble.n	801b808 <floor+0xa0>
 801b7f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b7f4:	d104      	bne.n	801b800 <floor+0x98>
 801b7f6:	ee10 2a10 	vmov	r2, s0
 801b7fa:	460b      	mov	r3, r1
 801b7fc:	f7e4 fd6e 	bl	80002dc <__adddf3>
 801b800:	ec41 0b10 	vmov	d0, r0, r1
 801b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b808:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b80c:	f04f 33ff 	mov.w	r3, #4294967295
 801b810:	fa23 f707 	lsr.w	r7, r3, r7
 801b814:	4207      	tst	r7, r0
 801b816:	d0f3      	beq.n	801b800 <floor+0x98>
 801b818:	a30f      	add	r3, pc, #60	; (adr r3, 801b858 <floor+0xf0>)
 801b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81e:	f7e4 fd5d 	bl	80002dc <__adddf3>
 801b822:	2200      	movs	r2, #0
 801b824:	2300      	movs	r3, #0
 801b826:	f7e5 f99f 	bl	8000b68 <__aeabi_dcmpgt>
 801b82a:	2800      	cmp	r0, #0
 801b82c:	d0bf      	beq.n	801b7ae <floor+0x46>
 801b82e:	2c00      	cmp	r4, #0
 801b830:	da02      	bge.n	801b838 <floor+0xd0>
 801b832:	2e14      	cmp	r6, #20
 801b834:	d103      	bne.n	801b83e <floor+0xd6>
 801b836:	3401      	adds	r4, #1
 801b838:	ea25 0507 	bic.w	r5, r5, r7
 801b83c:	e7b7      	b.n	801b7ae <floor+0x46>
 801b83e:	2301      	movs	r3, #1
 801b840:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b844:	fa03 f606 	lsl.w	r6, r3, r6
 801b848:	4435      	add	r5, r6
 801b84a:	4545      	cmp	r5, r8
 801b84c:	bf38      	it	cc
 801b84e:	18e4      	addcc	r4, r4, r3
 801b850:	e7f2      	b.n	801b838 <floor+0xd0>
 801b852:	2500      	movs	r5, #0
 801b854:	462c      	mov	r4, r5
 801b856:	e7aa      	b.n	801b7ae <floor+0x46>
 801b858:	8800759c 	.word	0x8800759c
 801b85c:	7e37e43c 	.word	0x7e37e43c
 801b860:	bff00000 	.word	0xbff00000
 801b864:	000fffff 	.word	0x000fffff

0801b868 <scalbn>:
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	ec55 4b10 	vmov	r4, r5, d0
 801b86e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b872:	4606      	mov	r6, r0
 801b874:	462b      	mov	r3, r5
 801b876:	b99a      	cbnz	r2, 801b8a0 <scalbn+0x38>
 801b878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b87c:	4323      	orrs	r3, r4
 801b87e:	d036      	beq.n	801b8ee <scalbn+0x86>
 801b880:	4b39      	ldr	r3, [pc, #228]	; (801b968 <scalbn+0x100>)
 801b882:	4629      	mov	r1, r5
 801b884:	ee10 0a10 	vmov	r0, s0
 801b888:	2200      	movs	r2, #0
 801b88a:	f7e4 fedd 	bl	8000648 <__aeabi_dmul>
 801b88e:	4b37      	ldr	r3, [pc, #220]	; (801b96c <scalbn+0x104>)
 801b890:	429e      	cmp	r6, r3
 801b892:	4604      	mov	r4, r0
 801b894:	460d      	mov	r5, r1
 801b896:	da10      	bge.n	801b8ba <scalbn+0x52>
 801b898:	a32b      	add	r3, pc, #172	; (adr r3, 801b948 <scalbn+0xe0>)
 801b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b89e:	e03a      	b.n	801b916 <scalbn+0xae>
 801b8a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b8a4:	428a      	cmp	r2, r1
 801b8a6:	d10c      	bne.n	801b8c2 <scalbn+0x5a>
 801b8a8:	ee10 2a10 	vmov	r2, s0
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	4629      	mov	r1, r5
 801b8b0:	f7e4 fd14 	bl	80002dc <__adddf3>
 801b8b4:	4604      	mov	r4, r0
 801b8b6:	460d      	mov	r5, r1
 801b8b8:	e019      	b.n	801b8ee <scalbn+0x86>
 801b8ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b8be:	460b      	mov	r3, r1
 801b8c0:	3a36      	subs	r2, #54	; 0x36
 801b8c2:	4432      	add	r2, r6
 801b8c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b8c8:	428a      	cmp	r2, r1
 801b8ca:	dd08      	ble.n	801b8de <scalbn+0x76>
 801b8cc:	2d00      	cmp	r5, #0
 801b8ce:	a120      	add	r1, pc, #128	; (adr r1, 801b950 <scalbn+0xe8>)
 801b8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8d4:	da1c      	bge.n	801b910 <scalbn+0xa8>
 801b8d6:	a120      	add	r1, pc, #128	; (adr r1, 801b958 <scalbn+0xf0>)
 801b8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8dc:	e018      	b.n	801b910 <scalbn+0xa8>
 801b8de:	2a00      	cmp	r2, #0
 801b8e0:	dd08      	ble.n	801b8f4 <scalbn+0x8c>
 801b8e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b8e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b8ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b8ee:	ec45 4b10 	vmov	d0, r4, r5
 801b8f2:	bd70      	pop	{r4, r5, r6, pc}
 801b8f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b8f8:	da19      	bge.n	801b92e <scalbn+0xc6>
 801b8fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b8fe:	429e      	cmp	r6, r3
 801b900:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801b904:	dd0a      	ble.n	801b91c <scalbn+0xb4>
 801b906:	a112      	add	r1, pc, #72	; (adr r1, 801b950 <scalbn+0xe8>)
 801b908:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d1e2      	bne.n	801b8d6 <scalbn+0x6e>
 801b910:	a30f      	add	r3, pc, #60	; (adr r3, 801b950 <scalbn+0xe8>)
 801b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b916:	f7e4 fe97 	bl	8000648 <__aeabi_dmul>
 801b91a:	e7cb      	b.n	801b8b4 <scalbn+0x4c>
 801b91c:	a10a      	add	r1, pc, #40	; (adr r1, 801b948 <scalbn+0xe0>)
 801b91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d0b8      	beq.n	801b898 <scalbn+0x30>
 801b926:	a10e      	add	r1, pc, #56	; (adr r1, 801b960 <scalbn+0xf8>)
 801b928:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b92c:	e7b4      	b.n	801b898 <scalbn+0x30>
 801b92e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b932:	3236      	adds	r2, #54	; 0x36
 801b934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b938:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b93c:	4620      	mov	r0, r4
 801b93e:	4b0c      	ldr	r3, [pc, #48]	; (801b970 <scalbn+0x108>)
 801b940:	2200      	movs	r2, #0
 801b942:	e7e8      	b.n	801b916 <scalbn+0xae>
 801b944:	f3af 8000 	nop.w
 801b948:	c2f8f359 	.word	0xc2f8f359
 801b94c:	01a56e1f 	.word	0x01a56e1f
 801b950:	8800759c 	.word	0x8800759c
 801b954:	7e37e43c 	.word	0x7e37e43c
 801b958:	8800759c 	.word	0x8800759c
 801b95c:	fe37e43c 	.word	0xfe37e43c
 801b960:	c2f8f359 	.word	0xc2f8f359
 801b964:	81a56e1f 	.word	0x81a56e1f
 801b968:	43500000 	.word	0x43500000
 801b96c:	ffff3cb0 	.word	0xffff3cb0
 801b970:	3c900000 	.word	0x3c900000

0801b974 <_init>:
 801b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b976:	bf00      	nop
 801b978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b97a:	bc08      	pop	{r3}
 801b97c:	469e      	mov	lr, r3
 801b97e:	4770      	bx	lr

0801b980 <_fini>:
 801b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b982:	bf00      	nop
 801b984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b986:	bc08      	pop	{r3}
 801b988:	469e      	mov	lr, r3
 801b98a:	4770      	bx	lr


hankyo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  08019288  08019288  00029288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a150  0801a150  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  0801a150  0801a150  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a150  0801a150  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a150  0801a150  0002a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a154  0801a154  0002a154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801a158  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091e0  200001f4  0801a34c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200093d4  0801a34c  000393d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001872d  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404f  00000000  00000000  00048951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0004c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0004dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029244  00000000  00000000  0004f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6bf  00000000  00000000  0007866c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34ed  00000000  00000000  00092d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007384  00000000  00000000  00166268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801926c 	.word	0x0801926c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	0801926c 	.word	0x0801926c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d002      	beq.n	8000d7a <LL_ADC_SetGainCompensation+0x36>
 8000d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d78:	e000      	b.n	8000d7c <LL_ADC_SetGainCompensation+0x38>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	611a      	str	r2, [r3, #16]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3330      	adds	r3, #48	; 0x30
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031f 	and.w	r3, r3, #31
 8000db8:	211f      	movs	r1, #31
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e9b      	lsrs	r3, r3, #26
 8000dc6:	f003 011f 	and.w	r1, r3, #31
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3314      	adds	r3, #20
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	0e5b      	lsrs	r3, r3, #25
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0d1b      	lsrs	r3, r3, #20
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2107      	movs	r1, #7
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	0d1b      	lsrs	r3, r3, #20
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ebe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6093      	str	r3, [r2, #8]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee6:	d101      	bne.n	8000eec <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f36:	d101      	bne.n	8000f3c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f86:	f043 0202 	orr.w	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsEnabled+0x18>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsEnabled+0x1a>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001006:	d101      	bne.n	800100c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	f043 0204 	orr.w	r2, r3, #4
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	b29b      	uxth	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b04      	cmp	r3, #4
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2208      	movs	r2, #8
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80010ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 800112a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800112e:	f7ff ffc3 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff ffc0 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  PA1   ------> ADC1_IN2
  PA2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f010 fe7f 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001150:	2302      	movs	r3, #2
 8001152:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f010 fe73 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f010 fe67 	bl	8011e4e <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800118c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001196:	f010 fc9f 	bl	8011ad8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 800119e:	2305      	movs	r3, #5
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011be:	f010 fcb1 	bl	8011b24 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011c8:	f7ff fdbc 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011cc:	2100      	movs	r1, #0
 80011ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011d2:	f7ff fe57 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80011d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011da:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	484a      	ldr	r0, [pc, #296]	; (8001310 <MX_ADC1_Init+0x228>)
 80011e8:	f010 fc12 	bl	8011a10 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80011ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f0:	f7ff fe5d 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80011f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011f8:	f7ff fe7f 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <MX_ADC1_Init+0x22c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	099b      	lsrs	r3, r3, #6
 8001202:	4a45      	ldr	r2, [pc, #276]	; (8001318 <MX_ADC1_Init+0x230>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	099a      	lsrs	r2, r3, #6
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <MX_ADC1_Init+0x234>)
 8001216:	fba3 2302 	umull	r2, r3, r3, r2
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800121e:	e002      	b.n	8001226 <MX_ADC1_Init+0x13e>
  {
    wait_loop_index--;
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001222:	3b01      	subs	r3, #1
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <MX_ADC1_Init+0x138>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 800122c:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <MX_ADC1_Init+0x238>)
 800122e:	2106      	movs	r1, #6
 8001230:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001234:	f7ff fdab 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001238:	2202      	movs	r2, #2
 800123a:	4939      	ldr	r1, [pc, #228]	; (8001320 <MX_ADC1_Init+0x238>)
 800123c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001240:	f7ff fdd1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001244:	227f      	movs	r2, #127	; 0x7f
 8001246:	4936      	ldr	r1, [pc, #216]	; (8001320 <MX_ADC1_Init+0x238>)
 8001248:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800124c:	f7ff fdf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_ADC1_Init+0x238>)
 8001252:	210c      	movs	r1, #12
 8001254:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001258:	f7ff fd99 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800125c:	2202      	movs	r2, #2
 800125e:	4930      	ldr	r1, [pc, #192]	; (8001320 <MX_ADC1_Init+0x238>)
 8001260:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001264:	f7ff fdbf 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001268:	227f      	movs	r2, #127	; 0x7f
 800126a:	492d      	ldr	r1, [pc, #180]	; (8001320 <MX_ADC1_Init+0x238>)
 800126c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001270:	f7ff fde4 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001276:	2112      	movs	r1, #18
 8001278:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800127c:	f7ff fd87 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 8001280:	2202      	movs	r2, #2
 8001282:	4928      	ldr	r1, [pc, #160]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001284:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001288:	f7ff fdad 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800128c:	227f      	movs	r2, #127	; 0x7f
 800128e:	4925      	ldr	r1, [pc, #148]	; (8001324 <MX_ADC1_Init+0x23c>)
 8001290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001294:	f7ff fdd2 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_ADC1_Init+0x23c>)
 800129a:	2118      	movs	r1, #24
 800129c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012a0:	f7ff fd75 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012a4:	2202      	movs	r2, #2
 80012a6:	491f      	ldr	r1, [pc, #124]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ac:	f7ff fd9b 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80012b0:	227f      	movs	r2, #127	; 0x7f
 80012b2:	491c      	ldr	r1, [pc, #112]	; (8001324 <MX_ADC1_Init+0x23c>)
 80012b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012b8:	f7ff fdc0 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_1);
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <MX_ADC1_Init+0x240>)
 80012be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012c6:	f7ff fd62 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012ca:	2202      	movs	r2, #2
 80012cc:	4916      	ldr	r1, [pc, #88]	; (8001328 <MX_ADC1_Init+0x240>)
 80012ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d2:	f7ff fd88 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012d6:	227f      	movs	r2, #127	; 0x7f
 80012d8:	4913      	ldr	r1, [pc, #76]	; (8001328 <MX_ADC1_Init+0x240>)
 80012da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012de:	f7ff fdad 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_1);
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_ADC1_Init+0x240>)
 80012e4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012ec:	f7ff fd4f 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 80012f0:	2202      	movs	r2, #2
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <MX_ADC1_Init+0x240>)
 80012f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012f8:	f7ff fd75 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012fc:	227f      	movs	r2, #127	; 0x7f
 80012fe:	490a      	ldr	r1, [pc, #40]	; (8001328 <MX_ADC1_Init+0x240>)
 8001300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001304:	f7ff fd9a 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	50000300 	.word	0x50000300
 8001314:	20000004 	.word	0x20000004
 8001318:	053e2d63 	.word	0x053e2d63
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	08600004 	.word	0x08600004
 8001324:	0c900008 	.word	0x0c900008
 8001328:	04300002 	.word	0x04300002

0800132c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 800136e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001372:	f7ff fea1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff fe9e 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB1   ------> ADC3_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800137c:	2302      	movs	r3, #2
 800137e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	483a      	ldr	r0, [pc, #232]	; (8001478 <MX_ADC3_Init+0x14c>)
 800138e:	f010 fd5e 	bl	8011e4e <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800139e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a2:	4619      	mov	r1, r3
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <MX_ADC3_Init+0x150>)
 80013a6:	f010 fb97 	bl	8011ad8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <MX_ADC3_Init+0x150>)
 80013cc:	f010 fbaa 	bl	8011b24 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC3, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_ADC3_Init+0x150>)
 80013d4:	f7ff fcb6 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 80013d8:	2100      	movs	r1, #0
 80013da:	4828      	ldr	r0, [pc, #160]	; (800147c <MX_ADC3_Init+0x150>)
 80013dc:	f7ff fd52 	bl	8000e84 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV8;
 80013e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013e4:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_ADC3_Init+0x154>)
 80013f2:	f010 fb0d 	bl	8011a10 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 80013f6:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_ADC3_Init+0x150>)
 80013f8:	f7ff fd59 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <MX_ADC3_Init+0x150>)
 80013fe:	f7ff fd7c 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC3_Init+0x158>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	099b      	lsrs	r3, r3, #6
 8001408:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <MX_ADC3_Init+0x15c>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	099a      	lsrs	r2, r3, #6
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_ADC3_Init+0x160>)
 800141c:	fba3 2302 	umull	r2, r3, r3, r2
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8001424:	e002      	b.n	800142c <MX_ADC3_Init+0x100>
  {
    wait_loop_index--;
 8001426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001428:	3b01      	subs	r3, #1
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 800142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <MX_ADC3_Init+0xfa>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MX_ADC3_Init+0x164>)
 8001434:	2106      	movs	r1, #6
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_ADC3_Init+0x150>)
 8001438:	f7ff fca9 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800143c:	2202      	movs	r2, #2
 800143e:	4914      	ldr	r1, [pc, #80]	; (8001490 <MX_ADC3_Init+0x164>)
 8001440:	480e      	ldr	r0, [pc, #56]	; (800147c <MX_ADC3_Init+0x150>)
 8001442:	f7ff fcd0 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001446:	227f      	movs	r2, #127	; 0x7f
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <MX_ADC3_Init+0x164>)
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_ADC3_Init+0x150>)
 800144c:	f7ff fcf6 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_ADC3_Init+0x164>)
 8001452:	210c      	movs	r1, #12
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <MX_ADC3_Init+0x150>)
 8001456:	f7ff fc9a 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_12CYCLES_5);
 800145a:	2202      	movs	r2, #2
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <MX_ADC3_Init+0x164>)
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_ADC3_Init+0x150>)
 8001460:	f7ff fcc1 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001464:	227f      	movs	r2, #127	; 0x7f
 8001466:	490a      	ldr	r1, [pc, #40]	; (8001490 <MX_ADC3_Init+0x164>)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_ADC3_Init+0x150>)
 800146a:	f7ff fce7 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	; 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	48000400 	.word	0x48000400
 800147c:	50000400 	.word	0x50000400
 8001480:	50000700 	.word	0x50000700
 8001484:	20000004 	.word	0x20000004
 8001488:	053e2d63 	.word	0x053e2d63
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	04300002 	.word	0x04300002

08001494 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b090      	sub	sp, #64	; 0x40
 8001498:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800149a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC345);
 80014c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014cc:	f7ff fdf4 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f7ff fdf1 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB12   ------> ADC4_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014dc:	2303      	movs	r3, #3
 80014de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	482c      	ldr	r0, [pc, #176]	; (800159c <MX_ADC4_Init+0x108>)
 80014ea:	f010 fcb0 	bl	8011e4e <LL_GPIO_Init>

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 80014fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fe:	4619      	mov	r1, r3
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001502:	f010 fae9 	bl	8011ad8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	481e      	ldr	r0, [pc, #120]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001526:	f010 fafd 	bl	8011b24 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC4, 0);
 800152a:	2100      	movs	r1, #0
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800152e:	f7ff fc09 	bl	8000d44 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC4, LL_ADC_OVS_DISABLE);
 8001532:	2100      	movs	r1, #0
 8001534:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001536:	f7ff fca5 	bl	8000e84 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC4);
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800153c:	f7ff fcb7 	bl	8000eae <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC4);
 8001540:	4817      	ldr	r0, [pc, #92]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001542:	f7ff fcda 	bl	8000efa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_ADC4_Init+0x110>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <MX_ADC4_Init+0x114>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	099a      	lsrs	r2, r3, #6
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	461a      	mov	r2, r3
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_ADC4_Init+0x118>)
 8001560:	fba3 2302 	umull	r2, r3, r3, r2
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001568:	e002      	b.n	8001570 <MX_ADC4_Init+0xdc>
  {
    wait_loop_index--;
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	3b01      	subs	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <MX_ADC4_Init+0xd6>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001578:	2106      	movs	r1, #6
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_ADC4_Init+0x10c>)
 800157c:	f7ff fc07 	bl	8000d8e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8001580:	2203      	movs	r2, #3
 8001582:	490b      	ldr	r1, [pc, #44]	; (80015b0 <MX_ADC4_Init+0x11c>)
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001586:	f7ff fc2e 	bl	8000de6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800158a:	227f      	movs	r2, #127	; 0x7f
 800158c:	4908      	ldr	r1, [pc, #32]	; (80015b0 <MX_ADC4_Init+0x11c>)
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_ADC4_Init+0x10c>)
 8001590:	f7ff fc54 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

}
 8001594:	bf00      	nop
 8001596:	3740      	adds	r7, #64	; 0x40
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48000400 	.word	0x48000400
 80015a0:	50000500 	.word	0x50000500
 80015a4:	20000004 	.word	0x20000004
 80015a8:	053e2d63 	.word	0x053e2d63
 80015ac:	cccccccd 	.word	0xcccccccd
 80015b0:	0c900008 	.word	0x0c900008

080015b4 <ADC1_Calibration>:
#define ADC_CONVERT_DATA_BUFFR_SIZE	((uint32_t)3)

uint16_t adcConvertData[ADC_CONVERT_DATA_BUFFR_SIZE];

void ADC1_Calibration(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 80015b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015bc:	f7ff fc89 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11f      	bne.n	8001606 <ADC1_Calibration+0x52>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 80015c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015ca:	f7ff fcaa 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11a      	bne.n	800160a <ADC1_Calibration+0x56>
	if(LL_ADC_IsEnabled(ADC1) != 0){
 80015d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015d8:	f7ff fcdf 	bl	8000f9a <LL_ADC_IsEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <ADC1_Calibration+0x36>
		LL_ADC_Disable(ADC1);
 80015e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015e6:	f7ff fcc4 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC1,LL_ADC_SINGLE_ENDED);
 80015ea:	217f      	movs	r1, #127	; 0x7f
 80015ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f0:	f7ff fce6 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1)==1);
 80015f4:	bf00      	nop
 80015f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015fa:	f7ff fcfa 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d0f8      	beq.n	80015f6 <ADC1_Calibration+0x42>
 8001604:	e002      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC1) != 0) return;
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <ADC1_Calibration+0x58>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC1) != 1) return;
 800160a:	bf00      	nop
}
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <ADC2_Calibration>:

void ADC2_Calibration(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <ADC2_Calibration+0x50>)
 8001616:	f7ff fc5c 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d11a      	bne.n	8001656 <ADC2_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <ADC2_Calibration+0x50>)
 8001622:	f7ff fc7e 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	d116      	bne.n	800165a <ADC2_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC2) != 0){
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <ADC2_Calibration+0x50>)
 800162e:	f7ff fcb4 	bl	8000f9a <LL_ADC_IsEnabled>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <ADC2_Calibration+0x2e>
		LL_ADC_Disable(ADC2);
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <ADC2_Calibration+0x50>)
 800163a:	f7ff fc9a 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC2,LL_ADC_SINGLE_ENDED);
 800163e:	217f      	movs	r1, #127	; 0x7f
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <ADC2_Calibration+0x50>)
 8001642:	f7ff fcbd 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2)==1);
 8001646:	bf00      	nop
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <ADC2_Calibration+0x50>)
 800164a:	f7ff fcd2 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f9      	beq.n	8001648 <ADC2_Calibration+0x38>
 8001654:	e002      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC2) != 0) return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <ADC2_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC2) != 1) return;
 800165a:	bf00      	nop
}
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	50000100 	.word	0x50000100

08001664 <ADC3_Calibration>:

void ADC3_Calibration(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <ADC3_Calibration+0x50>)
 800166a:	f7ff fc32 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11a      	bne.n	80016aa <ADC3_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <ADC3_Calibration+0x50>)
 8001676:	f7ff fc54 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d116      	bne.n	80016ae <ADC3_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC3) != 0){
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <ADC3_Calibration+0x50>)
 8001682:	f7ff fc8a 	bl	8000f9a <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <ADC3_Calibration+0x2e>
		LL_ADC_Disable(ADC3);
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <ADC3_Calibration+0x50>)
 800168e:	f7ff fc70 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC3,LL_ADC_SINGLE_ENDED);
 8001692:	217f      	movs	r1, #127	; 0x7f
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <ADC3_Calibration+0x50>)
 8001696:	f7ff fc93 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC3)==1);
 800169a:	bf00      	nop
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <ADC3_Calibration+0x50>)
 800169e:	f7ff fca8 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d0f9      	beq.n	800169c <ADC3_Calibration+0x38>
 80016a8:	e002      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC3) != 0) return;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <ADC3_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC3) != 1) return;
 80016ae:	bf00      	nop
}
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	50000400 	.word	0x50000400

080016b8 <ADC4_Calibration>:

void ADC4_Calibration(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016bc:	4812      	ldr	r0, [pc, #72]	; (8001708 <ADC4_Calibration+0x50>)
 80016be:	f7ff fc08 	bl	8000ed2 <LL_ADC_IsDeepPowerDownEnabled>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <ADC4_Calibration+0x46>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <ADC4_Calibration+0x50>)
 80016ca:	f7ff fc2a 	bl	8000f22 <LL_ADC_IsInternalRegulatorEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d116      	bne.n	8001702 <ADC4_Calibration+0x4a>
	if(LL_ADC_IsEnabled(ADC4) != 0){
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <ADC4_Calibration+0x50>)
 80016d6:	f7ff fc60 	bl	8000f9a <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <ADC4_Calibration+0x2e>
		LL_ADC_Disable(ADC4);
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <ADC4_Calibration+0x50>)
 80016e2:	f7ff fc46 	bl	8000f72 <LL_ADC_Disable>
	}
	LL_ADC_StartCalibration(ADC4,LL_ADC_SINGLE_ENDED);
 80016e6:	217f      	movs	r1, #127	; 0x7f
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <ADC4_Calibration+0x50>)
 80016ea:	f7ff fc69 	bl	8000fc0 <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC4)==1);
 80016ee:	bf00      	nop
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <ADC4_Calibration+0x50>)
 80016f2:	f7ff fc7e 	bl	8000ff2 <LL_ADC_IsCalibrationOnGoing>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d0f9      	beq.n	80016f0 <ADC4_Calibration+0x38>
 80016fc:	e002      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsDeepPowerDownEnabled(ADC4) != 0) return;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <ADC4_Calibration+0x4c>
	if(LL_ADC_IsInternalRegulatorEnabled(ADC4) != 1) return;
 8001702:	bf00      	nop
}
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	50000500 	.word	0x50000500

0800170c <ADC4_Start>:

void ADC4_Start(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  ADC4_Calibration();
 8001710:	f7ff ffd2 	bl	80016b8 <ADC4_Calibration>
//	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_7);
	LL_ADC_Enable(ADC4);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <ADC4_Start+0x14>)
 8001716:	f7ff fc18 	bl	8000f4a <LL_ADC_Enable>

//	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_7,ADC_CONVERT_DATA_BUFFR_SIZE);

//	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_7);

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	50000500 	.word	0x50000500

08001724 <ADC3_Start>:

void ADC3_Start(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  ADC3_Calibration();
 8001728:	f7ff ff9c 	bl	8001664 <ADC3_Calibration>
	LL_ADC_Enable(ADC3);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <ADC3_Start+0x14>)
 800172e:	f7ff fc0c 	bl	8000f4a <LL_ADC_Enable>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	50000400 	.word	0x50000400

0800173c <ADC2_Start>:

void ADC2_Start(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  ADC2_Calibration();
 8001740:	f7ff ff66 	bl	8001610 <ADC2_Calibration>
	LL_ADC_Enable(ADC2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <ADC2_Start+0x14>)
 8001746:	f7ff fc00 	bl	8000f4a <LL_ADC_Enable>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	50000100 	.word	0x50000100

08001754 <ADC1_Start>:

void ADC1_Start(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  ADC1_Calibration();
 8001758:	f7ff ff2c 	bl	80015b4 <ADC1_Calibration>
	LL_ADC_Enable(ADC1);
 800175c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001760:	f7ff fbf3 	bl	8000f4a <LL_ADC_Enable>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <GetSensor_FL>:

uint16_t GetSensor_FL(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC3);
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <GetSensor_FL+0x2c>)
 800176e:	f7ff fc54 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC3)==0);
 8001772:	bf00      	nop
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <GetSensor_FL+0x2c>)
 8001776:	f7ff fc71 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <GetSensor_FL+0xc>
	LL_ADC_ClearFlag_EOC(ADC3);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <GetSensor_FL+0x2c>)
 8001782:	f7ff fc7e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC3);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <GetSensor_FL+0x2c>)
 8001788:	f7ff fc5b 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	50000400 	.word	0x50000400

08001798 <ADC3_clearEOS>:

void ADC3_clearEOS(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC3);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <ADC3_clearEOS+0x10>)
 800179e:	f7ff fc7d 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	50000400 	.word	0x50000400

080017ac <ADC2_clearEOS>:

void ADC2_clearEOS(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <ADC2_clearEOS+0x10>)
 80017b2:	f7ff fc73 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	50000100 	.word	0x50000100

080017c0 <ADC1_clearEOS>:

void ADC1_clearEOS(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	LL_ADC_ClearFlag_EOS(ADC1);
 80017c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c8:	f7ff fc68 	bl	800109c <LL_ADC_ClearFlag_EOS>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GetSensor_SL>:


uint16_t GetSensor_SL(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 80017d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d8:	f7ff fc1f 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 80017dc:	bf00      	nop
 80017de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e2:	f7ff fc3b 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <GetSensor_SL+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 80017ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f0:	f7ff fc47 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 80017f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f8:	f7ff fc23 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}

08001802 <GetSensor_SR>:

uint16_t GetSensor_SR(void){
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001806:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800180a:	f7ff fc06 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 800180e:	bf00      	nop
 8001810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001814:	f7ff fc22 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f8      	beq.n	8001810 <GetSensor_SR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 800181e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001822:	f7ff fc2e 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001826:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800182a:	f7ff fc0a 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800182e:	4603      	mov	r3, r0
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}

08001834 <GetSensor_FR>:

uint16_t GetSensor_FR(void){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001838:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800183c:	f7ff fbed 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC1)==0);
 8001840:	bf00      	nop
 8001842:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001846:	f7ff fc09 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f8      	beq.n	8001842 <GetSensor_FR+0xe>
	LL_ADC_ClearFlag_EOC(ADC1);
 8001850:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001854:	f7ff fc15 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC1);
 8001858:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800185c:	f7ff fbf1 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <GetBatVal>:

uint16_t GetBatVal(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC4);
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <GetBatVal+0x2c>)
 800186e:	f7ff fbd4 	bl	800101a <LL_ADC_REG_StartConversion>
	while(LL_ADC_IsActiveFlag_EOC(ADC4)==0);
 8001872:	bf00      	nop
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <GetBatVal+0x2c>)
 8001876:	f7ff fbf1 	bl	800105c <LL_ADC_IsActiveFlag_EOC>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f9      	beq.n	8001874 <GetBatVal+0xc>
	LL_ADC_ClearFlag_EOC(ADC4);
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <GetBatVal+0x2c>)
 8001882:	f7ff fbfe 	bl	8001082 <LL_ADC_ClearFlag_EOC>
	return LL_ADC_REG_ReadConversionData12(ADC4);
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <GetBatVal+0x2c>)
 8001888:	f7ff fbdb 	bl	8001042 <LL_ADC_REG_ReadConversionData12>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	50000500 	.word	0x50000500

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <LL_AHB1_GRP1_EnableClock>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff ffe3 	bl	80019ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff ffe0 	bl	80019ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ec:	f7ff ff54 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffa4 	bl	8001944 <NVIC_EncodePriority>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	200b      	movs	r0, #11
 8001a02:	f7ff ff75 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff ff54 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a0c:	f7ff ff44 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff94 	bl	8001944 <NVIC_EncodePriority>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	200c      	movs	r0, #12
 8001a22:	f7ff ff65 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a26:	200c      	movs	r0, #12
 8001a28:	f7ff ff44 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a2c:	f7ff ff34 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff84 	bl	8001944 <NVIC_EncodePriority>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	200d      	movs	r0, #13
 8001a42:	f7ff ff55 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a46:	200d      	movs	r0, #13
 8001a48:	f7ff ff34 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a4c:	f7ff ff24 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff74 	bl	8001944 <NVIC_EncodePriority>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	200e      	movs	r0, #14
 8001a62:	f7ff ff45 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a66:	200e      	movs	r0, #14
 8001a68:	f7ff ff24 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a6c:	f7ff ff14 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff64 	bl	8001944 <NVIC_EncodePriority>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	200f      	movs	r0, #15
 8001a82:	f7ff ff35 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f7ff ff14 	bl	80018b4 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a8c:	f7ff ff04 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <NVIC_EncodePriority>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	2010      	movs	r0, #16
 8001aa2:	f7ff ff25 	bl	80018f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f7ff ff04 	bl	80018b4 <__NVIC_EnableIRQ>

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <FLASH_Lock>:

#define sta_add_127 0x0807F800
#define end_add_127 0x0807FFFF

__STATIC_INLINE void FLASH_Lock(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <FLASH_Lock+0x1c>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <FLASH_Lock+0x1c>)
 8001aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001abe:	6153      	str	r3, [r2, #20]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_Unlock>:

__STATIC_INLINE void FLASH_Unlock(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <FLASH_Unlock+0x1c>)
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <FLASH_Unlock+0x20>)
 8001ad8:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <FLASH_Unlock+0x1c>)
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <FLASH_Unlock+0x24>)
 8001ade:	609a      	str	r2, [r3, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	45670123 	.word	0x45670123
 8001af4:	cdef89ab 	.word	0xcdef89ab

08001af8 <FLASH_WaitBusy>:
#define FLASH_TYPEPROGRAM_BYTE	0x00000000U

//#define FLASH

void FLASH_WaitBusy(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	while(((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY)==1);
 8001afc:	bf00      	nop
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <FLASH_WaitBusy+0x20>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d0f8      	beq.n	8001afe <FLASH_WaitBusy+0x6>
//	while((FLASH->SR & FLASH_SR_BSY)== FLASH_SR_BSY);
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40022000 	.word	0x40022000

08001b1c <FLASH_Erase>:

void FLASH_Erase(uint8_t page)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
	FLASH_WaitBusy();
 8001b26:	f7ff ffe7 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->SR &= 0x00000000;	//error clear?
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <FLASH_Erase+0x64>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <FLASH_Erase+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <FLASH_Erase+0x64>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <FLASH_Erase+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_BKER);	//set bank2
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <FLASH_Erase+0x64>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <FLASH_Erase+0x64>)
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b48:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_PER;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <FLASH_Erase+0x64>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <FLASH_Erase+0x64>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6153      	str	r3, [r2, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page<<3));
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <FLASH_Erase+0x64>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	f403 737e 	and.w	r3, r3, #1016	; 0x3f8
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <FLASH_Erase+0x64>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	614b      	str	r3, [r1, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <FLASH_Erase+0x64>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6153      	str	r3, [r2, #20]
	FLASH_WaitBusy();
 8001b74:	f7ff ffc0 	bl	8001af8 <FLASH_WaitBusy>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40022000 	.word	0x40022000

08001b84 <FLASH_WriteByte>:

void FLASH_WriteByte(uint32_t address, uint64_t data)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t data2 = (uint32_t)(data >> 32);
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
	FLASH_WaitBusy();
 8001ba4:	f7ff ffa8 	bl	8001af8 <FLASH_WaitBusy>
	FLASH->SR &= 0x00000000;	//error clear
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	FLASH->CR &= FLASH_TYPEPROGRAM_BYTE;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PG;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6153      	str	r3, [r2, #20]

	*(__IO uint32_t*)address = (uint32_t)data;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
	*(__IO uint32_t*)(address+4) = data2;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	6013      	str	r3, [r2, #0]
	FLASH_WaitBusy();
 8001bd8:	f7ff ff8e 	bl	8001af8 <FLASH_WaitBusy>

	FLASH->CR &= ~(FLASH_CR_PG);
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <FLASH_WriteByte+0x6c>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6153      	str	r3, [r2, #20]
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <FLASH_WriteData>:

void FLASH_WriteData(uint8_t page,uint32_t address, uint64_t* data, uint32_t size)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	FLASH_Unlock();
 8001c04:	f7ff ff64 	bl	8001ad0 <FLASH_Unlock>

	FLASH_Erase(page);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff86 	bl	8001b1c <FLASH_Erase>

	do {
		FLASH_WriteByte(address, *data);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7ff ffb4 	bl	8001b84 <FLASH_WriteByte>
		address+=8;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
		data++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3308      	adds	r3, #8
 8001c26:	607b      	str	r3, [r7, #4]
		size -=8;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	603b      	str	r3, [r7, #0]
	}while(size > 0);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ed      	bne.n	8001c10 <FLASH_WriteData+0x1c>

	FLASH_Lock();
 8001c34:	f7ff ff3c 	bl	8001ab0 <FLASH_Lock>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <FLASH_ReadData>:

void FLASH_ReadData(uint32_t address, uint64_t* data, uint32_t size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address,size);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f011 fb5a 	bl	801330c <memcpy>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_AHB2_GRP1_EnableClock>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000

08001c90 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d101      	bne.n	8001cac <LL_GPIO_IsInputPinSet+0x1c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_GPIO_IsInputPinSet+0x1e>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f7ff ffa8 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ffa5 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ffa2 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff ff9f 	bl	8001c60 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SEN3_GPIO_Port, SEN3_Pin);
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	48a5      	ldr	r0, [pc, #660]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d28:	f7ff ffd5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN2_GPIO_Port, SEN2_Pin);
 8001d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d30:	48a2      	ldr	r0, [pc, #648]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d32:	f7ff ffd0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3a:	48a0      	ldr	r0, [pc, #640]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001d3c:	f7ff ffcb 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001d40:	2101      	movs	r1, #1
 8001d42:	489f      	ldr	r0, [pc, #636]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d44:	f7ff ffc7 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001d48:	2102      	movs	r1, #2
 8001d4a:	489d      	ldr	r0, [pc, #628]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001d4c:	f7ff ffc3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN1_GPIO_Port, SEN1_Pin);
 8001d50:	2108      	movs	r1, #8
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f7ff ffbe 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SEN0_GPIO_Port, SEN0_Pin);
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f7ff ffb9 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001d64:	2104      	movs	r1, #4
 8001d66:	4897      	ldr	r0, [pc, #604]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d68:	f7ff ffb5 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port, BAT_LED_Pin);
 8001d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d70:	4894      	ldr	r0, [pc, #592]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d72:	f7ff ffb0 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT0_GPIO_Port, MOT0_Pin);
 8001d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	f7ff ffaa 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MOT1_GPIO_Port, MOT1_Pin);
 8001d82:	2110      	movs	r1, #16
 8001d84:	488f      	ldr	r0, [pc, #572]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d86:	f7ff ffa6 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	488d      	ldr	r0, [pc, #564]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d8e:	f7ff ffa2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8001d92:	2101      	movs	r1, #1
 8001d94:	488b      	ldr	r0, [pc, #556]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001d96:	f7ff ff90 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4889      	ldr	r0, [pc, #548]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da0:	f7ff ff8b 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	4887      	ldr	r0, [pc, #540]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001da8:	f7ff ff87 	bl	8001cba <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SEN3_Pin;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001db2:	2301      	movs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN3_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	487d      	ldr	r0, [pc, #500]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001dc8:	f010 f841 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN2_Pin;
 8001dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN2_GPIO_Port, &GPIO_InitStruct);
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	4875      	ldr	r0, [pc, #468]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001de8:	f010 f831 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001df2:	2301      	movs	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001e02:	463b      	mov	r3, r7
 8001e04:	4619      	mov	r1, r3
 8001e06:	486d      	ldr	r0, [pc, #436]	; (8001fbc <MX_GPIO_Init+0x2c8>)
 8001e08:	f010 f821 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e10:	2301      	movs	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001e20:	463b      	mov	r3, r7
 8001e22:	4619      	mov	r1, r3
 8001e24:	4866      	ldr	r0, [pc, #408]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e26:	f010 f812 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	485f      	ldr	r0, [pc, #380]	; (8001fc0 <MX_GPIO_Init+0x2cc>)
 8001e44:	f010 f803 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN1_Pin;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f00f fff3 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SEN0_Pin;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SEN0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f00f ffe3 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_gyro_Pin;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_gyro_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4848      	ldr	r0, [pc, #288]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ea2:	f00f ffd4 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ec0:	f00f ffc5 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enL_Pin;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enL_GPIO_Port, &GPIO_InitStruct);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4619      	mov	r1, r3
 8001ede:	4839      	ldr	r0, [pc, #228]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001ee0:	f00f ffb5 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BAT_LED_Pin;
 8001ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4619      	mov	r1, r3
 8001efe:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f00:	f00f ffa5 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW0_Pin;
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1a:	f00f ff98 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f00f ff8b 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT0_Pin;
 8001f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT0_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f00f ff7a 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MOT1_Pin;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MOT1_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f74:	f00f ff6b 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001f92:	f00f ff5c 	bl	8011e4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_enR_Pin;
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_enR_GPIO_Port, &GPIO_InitStruct);
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0x2d0>)
 8001fb0:	f00f ff4d 	bl	8011e4e <LL_GPIO_Init>

}
 8001fb4:	bf00      	nop
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	48001400 	.word	0x48001400
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <SetLED>:

/* USER CODE BEGIN 2 */
void SetLED(uint8_t data){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if((data&0x01)==0x01){ 	LL_GPIO_SetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <SetLED+0x1e>
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <SetLED+0xa4>)
 8001fe0:	f7ff fe6b 	bl	8001cba <LL_GPIO_SetOutputPin>
 8001fe4:	e003      	b.n	8001fee <SetLED+0x26>
	}else{					LL_GPIO_ResetOutputPin(LED0_GPIO_Port,LED0_Pin);
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	4820      	ldr	r0, [pc, #128]	; (800206c <SetLED+0xa4>)
 8001fea:	f7ff fe74 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x02)==0x02){ 	LL_GPIO_SetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <SetLED+0x3a>
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	481d      	ldr	r0, [pc, #116]	; (8002070 <SetLED+0xa8>)
 8001ffc:	f7ff fe5d 	bl	8001cba <LL_GPIO_SetOutputPin>
 8002000:	e003      	b.n	800200a <SetLED+0x42>
	}else{					LL_GPIO_ResetOutputPin(LED1_GPIO_Port,LED1_Pin);
 8002002:	2102      	movs	r1, #2
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <SetLED+0xa8>)
 8002006:	f7ff fe66 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x04)==0x04){ 	LL_GPIO_SetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <SetLED+0x56>
 8002014:	2101      	movs	r1, #1
 8002016:	4816      	ldr	r0, [pc, #88]	; (8002070 <SetLED+0xa8>)
 8002018:	f7ff fe4f 	bl	8001cba <LL_GPIO_SetOutputPin>
 800201c:	e003      	b.n	8002026 <SetLED+0x5e>
	}else{					LL_GPIO_ResetOutputPin(LED2_GPIO_Port,LED2_Pin);
 800201e:	2101      	movs	r1, #1
 8002020:	4813      	ldr	r0, [pc, #76]	; (8002070 <SetLED+0xa8>)
 8002022:	f7ff fe58 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x08)==0x08){ 	LL_GPIO_SetOutputPin(LED3_GPIO_Port,LED3_Pin);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <SetLED+0x74>
 8002030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <SetLED+0xac>)
 8002036:	f7ff fe40 	bl	8001cba <LL_GPIO_SetOutputPin>
 800203a:	e004      	b.n	8002046 <SetLED+0x7e>
	}else{					LL_GPIO_ResetOutputPin(LED3_GPIO_Port,LED3_Pin);
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <SetLED+0xac>)
 8002042:	f7ff fe48 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
	}
	if((data&0x10)==0x10){ 	LL_GPIO_SetOutputPin(LED4_GPIO_Port,LED4_Pin);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <SetLED+0x92>
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <SetLED+0xa4>)
 8002054:	f7ff fe31 	bl	8001cba <LL_GPIO_SetOutputPin>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
	}
}
 8002058:	e003      	b.n	8002062 <SetLED+0x9a>
	}else{					LL_GPIO_ResetOutputPin(LED4_GPIO_Port,LED4_Pin);
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <SetLED+0xa4>)
 800205e:	f7ff fe3a 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	48000400 	.word	0x48000400
 8002070:	48001400 	.word	0x48001400
 8002074:	48000800 	.word	0x48000800

08002078 <SetBatLED>:

void SetBatLED(uint8_t data){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <SetBatLED+0x1c>
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <SetBatLED+0x30>)
 800208e:	f7ff fe14 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
}
 8002092:	e004      	b.n	800209e <SetBatLED+0x26>
	else			LL_GPIO_ResetOutputPin(BAT_LED_GPIO_Port,BAT_LED_Pin);
 8002094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <SetBatLED+0x30>)
 800209a:	f7ff fe1c 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	48000400 	.word	0x48000400

080020ac <SW_IsOn_0>:

int8_t SW_IsOn_0(void){//virtical
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW0_GPIO_Port,SW0_Pin);
 80020b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b8:	f7ff fdea 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020bc:	4603      	mov	r3, r0
 80020be:	b25b      	sxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SW_IsOn_1>:

int8_t SW_IsOn_1(void){//horizontal
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(SW1_GPIO_Port,SW1_Pin);
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f7ff fdde 	bl	8001c90 <LL_GPIO_IsInputPinSet>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b25b      	sxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}

080020dc <Set_SenFL>:

void Set_SenFL(uint8_t data){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <Set_SenFL+0x1c>
 80020ec:	2110      	movs	r1, #16
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f7ff fde2 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
}
 80020f6:	e004      	b.n	8002102 <Set_SenFL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN0_GPIO_Port,SEN0_Pin);
 80020f8:	2110      	movs	r1, #16
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7ff fdea 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Set_SenSL>:

void Set_SenSL(uint8_t data){
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <Set_SenSL+0x1c>
 800211a:	2108      	movs	r1, #8
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f7ff fdcb 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
}
 8002124:	e004      	b.n	8002130 <Set_SenSL+0x26>
	else			LL_GPIO_ResetOutputPin(SEN1_GPIO_Port,SEN1_Pin);
 8002126:	2108      	movs	r1, #8
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff fdd3 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <Set_SenSR>:

void Set_SenSR(uint8_t data){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <Set_SenSR+0x1c>
 8002148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <Set_SenSR+0x30>)
 800214e:	f7ff fdb4 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
}
 8002152:	e004      	b.n	800215e <Set_SenSR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN2_GPIO_Port,SEN2_Pin);
 8002154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <Set_SenSR+0x30>)
 800215a:	f7ff fdbc 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	48000800 	.word	0x48000800

0800216c <Set_SenFR>:

void Set_SenFR(uint8_t data){
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <Set_SenFR+0x1c>
 800217c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <Set_SenFR+0x30>)
 8002182:	f7ff fd9a 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
}
 8002186:	e004      	b.n	8002192 <Set_SenFR+0x26>
	else			LL_GPIO_ResetOutputPin(SEN3_GPIO_Port,SEN3_Pin);
 8002188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <Set_SenFR+0x30>)
 800218e:	f7ff fda2 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	48000800 	.word	0x48000800

080021a0 <Set_MOT0>:

void Set_MOT0(uint8_t data){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <Set_MOT0+0x1e>
 80021b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f7ff fd7f 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
}
 80021bc:	e005      	b.n	80021ca <Set_MOT0+0x2a>
	else			LL_GPIO_ResetOutputPin(MOT0_GPIO_Port,MOT0_Pin);
 80021be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f7ff fd86 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <Set_MOT1>:

void Set_MOT1(uint8_t data){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	if(data == 1)	LL_GPIO_SetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <Set_MOT1+0x1a>
 80021e4:	2110      	movs	r1, #16
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <Set_MOT1+0x2c>)
 80021e8:	f7ff fd67 	bl	8001cba <LL_GPIO_SetOutputPin>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
}
 80021ec:	e003      	b.n	80021f6 <Set_MOT1+0x22>
	else			LL_GPIO_ResetOutputPin(MOT1_GPIO_Port,MOT1_Pin);
 80021ee:	2110      	movs	r1, #16
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <Set_MOT1+0x2c>)
 80021f2:	f7ff fd70 	bl	8001cd6 <LL_GPIO_ResetOutputPin>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	48000400 	.word	0x48000400

08002204 <__NVIC_SetPriorityGrouping>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <LL_RCC_HSI_Enable+0x1c>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <LL_RCC_HSI_IsReady+0x24>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d101      	bne.n	8002282 <LL_RCC_HSI_IsReady+0x16>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_HSI_IsReady+0x18>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000

080022c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 0203 	bic.w	r2, r3, #3
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <LL_RCC_SetSysClkSource+0x24>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000

080022e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <LL_RCC_GetSysClkSource+0x18>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <LL_RCC_SetAHBPrescaler+0x24>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000

0800232c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <LL_RCC_SetAPB1Prescaler+0x24>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002386:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	43db      	mvns	r3, r3
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <LL_RCC_SetUSARTClockSource+0x30>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2103      	movs	r1, #3
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <LL_RCC_SetADCClockSource+0x44>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <LL_RCC_PLL_Enable+0x1c>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <LL_RCC_PLL_IsReady+0x24>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002428:	d101      	bne.n	800242e <LL_RCC_PLL_IsReady+0x16>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_RCC_PLL_IsReady+0x18>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002454:	4013      	ands	r3, r2
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	4311      	orrs	r1, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	f9ff800c 	.word	0xf9ff800c

08002480 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000

080024d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80024e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <LL_FLASH_SetLatency+0x24>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40022000 	.word	0x40022000

08002528 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <LL_FLASH_GetLatency+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 030f 	and.w	r3, r3, #15
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000

08002544 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <LL_PWR_EnableRange1BoostMode+0x20>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a04      	ldr	r2, [pc, #16]	; (8002584 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002576:	6093      	str	r3, [r2, #8]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(uint8_t ch){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	USART_TransmitByte(ch);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 f821 	bl	80055dc <USART_TransmitByte>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff ff91 	bl	80024d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80025ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80025b2:	f7ff ff75 	bl	80024a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f7ff fe24 	bl	8002204 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80025bc:	f7ff ffd4 	bl	8002568 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c0:	f000 f85c 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c4:	f7ff fb96 	bl	8001cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c8:	f7ff fa08 	bl	80019dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025cc:	f002 ff2a 	bl	8005424 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80025d0:	f001 f9f4 	bl	80039bc <MX_SPI2_Init>
  MX_ADC1_Init();
 80025d4:	f7fe fd88 	bl	80010e8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80025d8:	f7fe fea8 	bl	800132c <MX_ADC3_Init>
  MX_SPI1_Init();
 80025dc:	f001 f922 	bl	8003824 <MX_SPI1_Init>
  MX_ADC4_Init();
 80025e0:	f7fe ff58 	bl	8001494 <MX_ADC4_Init>
  MX_TIM2_Init();
 80025e4:	f002 f9be 	bl	8004964 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025e8:	f002 fa2c 	bl	8004a44 <MX_TIM3_Init>
  MX_TIM1_Init();
 80025ec:	f002 f962 	bl	80048b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80025f0:	f002 fa94 	bl	8004b1c <MX_TIM4_Init>
  MX_TIM5_Init();
 80025f4:	f002 fad0 	bl	8004b98 <MX_TIM5_Init>
  MX_TIM6_Init();
 80025f8:	f002 fb0c 	bl	8004c14 <MX_TIM6_Init>
  MX_TIM8_Init();
 80025fc:	f002 fb44 	bl	8004c88 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  SetLED(0x0E);
 8002600:	200e      	movs	r0, #14
 8002602:	f7ff fce1 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002606:	20c8      	movs	r0, #200	; 0xc8
 8002608:	f010 fe1e 	bl	8013248 <LL_mDelay>
  SetLED(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fcdb 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 8002612:	20c8      	movs	r0, #200	; 0xc8
 8002614:	f010 fe18 	bl	8013248 <LL_mDelay>
  SetLED(0x0E);
 8002618:	200e      	movs	r0, #14
 800261a:	f7ff fcd5 	bl	8001fc8 <SetLED>
  LL_mDelay(200);
 800261e:	20c8      	movs	r0, #200	; 0xc8
 8002620:	f010 fe12 	bl	8013248 <LL_mDelay>
  SetLED(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fccf 	bl	8001fc8 <SetLED>

  Communication_Initialize();
 800262a:	f002 ffc9 	bl	80055c0 <Communication_Initialize>
  HAL_init();
 800262e:	f005 fe97 	bl	8008360 <HAL_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002632:	f7ff fd47 	bl	80020c4 <SW_IsOn_1>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <main+0xaa>
		MODE_inc();								// モードを1つ進める
 800263c:	f006 f8e8 	bl	8008810 <MODE_inc>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002640:	20c8      	movs	r0, #200	; 0xc8
 8002642:	f010 fe01 	bl	8013248 <LL_mDelay>
		printf("mode selecting\r\n");
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <main+0xd4>)
 8002648:	f011 fd8c 	bl	8014164 <puts>
 800264c:	e00e      	b.n	800266c <main+0xc8>
	}
	else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800264e:	f7ff fd2d 	bl	80020ac <SW_IsOn_0>
 8002652:	4603      	mov	r3, r0
 8002654:	2b01      	cmp	r3, #1
 8002656:	d004      	beq.n	8002662 <main+0xbe>
 8002658:	f007 f843 	bl	80096e2 <MODE_CheckExe>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <main+0xc8>
//		else if ( SW_ON == SW_EXE_PIN ){
		MODE_exe();								// モード実行
 8002662:	f006 fead 	bl	80093c0 <MODE_exe>
		LL_mDelay(200);			// SWが離されるまで待つ
 8002666:	20c8      	movs	r0, #200	; 0xc8
 8002668:	f010 fdee 	bl	8013248 <LL_mDelay>
	}
    LL_mDelay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f010 fdeb 	bl	8013248 <LL_mDelay>
  Get_Sen_Nowdata();
 8002672:	f009 fc1f 	bl	800beb4 <Get_Sen_Nowdata>
    if (( SW_IsOn_1() == SW_ON)/*||(Get_NowSpeed()>100) */){
 8002676:	e7dc      	b.n	8002632 <main+0x8e>
 8002678:	08019288 	.word	0x08019288

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002680:	2004      	movs	r0, #4
 8002682:	f7ff ff3d 	bl	8002500 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8002686:	bf00      	nop
 8002688:	f7ff ff4e 	bl	8002528 <LL_FLASH_GetLatency>
 800268c:	4603      	mov	r3, r0
 800268e:	2b04      	cmp	r3, #4
 8002690:	d1fa      	bne.n	8002688 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8002692:	f7ff ff57 	bl	8002544 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 8002696:	f7ff fdd9 	bl	800224c <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800269a:	bf00      	nop
 800269c:	f7ff fde6 	bl	800226c <LL_RCC_HSI_IsReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d1fa      	bne.n	800269c <SystemClock_Config+0x20>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80026a6:	2040      	movs	r0, #64	; 0x40
 80026a8:	f7ff fdf4 	bl	8002294 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80026ac:	2300      	movs	r3, #0
 80026ae:	2255      	movs	r2, #85	; 0x55
 80026b0:	2130      	movs	r1, #48	; 0x30
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff fec4 	bl	8002440 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80026b8:	f7ff fee2 	bl	8002480 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80026bc:	f7ff fe9c 	bl	80023f8 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026c0:	bf00      	nop
 80026c2:	f7ff fea9 	bl	8002418 <LL_RCC_PLL_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d1fa      	bne.n	80026c2 <SystemClock_Config+0x46>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f7ff fdf7 	bl	80022c0 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80026d2:	2080      	movs	r0, #128	; 0x80
 80026d4:	f7ff fe16 	bl	8002304 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026d8:	bf00      	nop
 80026da:	f7ff fe05 	bl	80022e8 <LL_RCC_GetSysClkSource>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d1fa      	bne.n	80026da <SystemClock_Config+0x5e>
  {
  }

  /* Insure 1��s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <SystemClock_Config+0xc8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <SystemClock_Config+0xc8>)
 80026ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ee:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <SystemClock_Config+0xcc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <SystemClock_Config+0xcc>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <SystemClock_Config+0xcc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 8002702:	bf00      	nop
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <SystemClock_Config+0xcc>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b63      	cmp	r3, #99	; 0x63
 800270a:	d9fb      	bls.n	8002704 <SystemClock_Config+0x88>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fdf9 	bl	8002304 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fe0a 	bl	800232c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fe1b 	bl	8002354 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <SystemClock_Config+0xd0>)
 8002720:	f010 fd84 	bl	801322c <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8002724:	4809      	ldr	r0, [pc, #36]	; (800274c <SystemClock_Config+0xd0>)
 8002726:	f010 fdb7 	bl	8013298 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800272a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800272e:	f7ff fe25 	bl	800237c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <SystemClock_Config+0xd4>)
 8002734:	f7ff fe3c 	bl	80023b0 <LL_RCC_SetADCClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC345_CLKSOURCE_SYSCLK);
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <SystemClock_Config+0xd8>)
 800273a:	f7ff fe39 	bl	80023b0 <LL_RCC_SetADCClockSource>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000edf0 	.word	0xe000edf0
 8002748:	e0001000 	.word	0xe0001000
 800274c:	0a21fe80 	.word	0x0a21fe80
 8002750:	001c0002 	.word	0x001c0002
 8002754:	001e0002 	.word	0x001e0002

08002758 <PARAM_setSpeedType>:
/* ============== */
/*  GainData  */
/* ============== */

void PARAM_setSpeedType( enPARAM_MODE en_mode, enPARAM_MOVE_SPEED en_speed )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	switch( en_mode ){
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	2b17      	cmp	r3, #23
 800276c:	d00e      	beq.n	800278c <PARAM_setSpeedType+0x34>
 800276e:	2b17      	cmp	r3, #23
 8002770:	dc10      	bgt.n	8002794 <PARAM_setSpeedType+0x3c>
 8002772:	2b15      	cmp	r3, #21
 8002774:	d002      	beq.n	800277c <PARAM_setSpeedType+0x24>
 8002776:	2b16      	cmp	r3, #22
 8002778:	d004      	beq.n	8002784 <PARAM_setSpeedType+0x2c>
 800277a:	e00b      	b.n	8002794 <PARAM_setSpeedType+0x3c>
		
		case PARAM_ST:
			en_Speed_st = en_speed;
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <PARAM_setSpeedType+0x4c>)
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	7013      	strb	r3, [r2, #0]
			break;
 8002782:	e00b      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_TRUN:
			en_Speed_trun = en_speed;
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <PARAM_setSpeedType+0x50>)
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	7013      	strb	r3, [r2, #0]
			break;
 800278a:	e007      	b.n	800279c <PARAM_setSpeedType+0x44>
		
		case PARAM_SLA:
			en_Speed_sla = en_speed;
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <PARAM_setSpeedType+0x54>)
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	7013      	strb	r3, [r2, #0]
			break;
 8002792:	e003      	b.n	800279c <PARAM_setSpeedType+0x44>
			
		default:
			printf("Can't find parameter type \n\r");
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <PARAM_setSpeedType+0x58>)
 8002796:	f011 fc49 	bl	801402c <iprintf>
			break;
 800279a:	bf00      	nop
	}
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20000001 	.word	0x20000001
 80027ac:	20000002 	.word	0x20000002
 80027b0:	08019298 	.word	0x08019298

080027b4 <PARAM_getSpeed>:

const stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	const stSPEED* p_adr;
	
	switch( en_mode ){
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	2b16      	cmp	r3, #22
 80027c4:	d845      	bhi.n	8002852 <PARAM_getSpeed+0x9e>
 80027c6:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <PARAM_getSpeed+0x18>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002829 	.word	0x08002829
 80027d0:	08002829 	.word	0x08002829
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002829 	.word	0x08002829
 80027dc:	08002829 	.word	0x08002829
 80027e0:	08002829 	.word	0x08002829
 80027e4:	08002829 	.word	0x08002829
 80027e8:	08002853 	.word	0x08002853
 80027ec:	08002853 	.word	0x08002853
 80027f0:	08002837 	.word	0x08002837
 80027f4:	08002837 	.word	0x08002837
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002853 	.word	0x08002853
 8002800:	08002853 	.word	0x08002853
 8002804:	08002845 	.word	0x08002845
 8002808:	08002845 	.word	0x08002845
 800280c:	08002845 	.word	0x08002845
 8002810:	08002845 	.word	0x08002845
 8002814:	08002845 	.word	0x08002845
 8002818:	08002853 	.word	0x08002853
 800281c:	08002829 	.word	0x08002829
 8002820:	08002837 	.word	0x08002837
 8002824:	08002845 	.word	0x08002845
//		case PARAM_BACK_DEC:											// 減速中(後進)
		case PARAM_SKEW_ACC:											// 加速中(斜め)
		case PARAM_SKEW_CONST:											// 等速中(斜め)
		case PARAM_SKEW_DEC:											// 減速中(斜め)
		case PARAM_HIT_WALL:											// 壁あて制御
			p_adr = &f_StSpeedData[en_Speed_st];
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <PARAM_getSpeed+0xbc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <PARAM_getSpeed+0xc0>)
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
			break;
 8002834:	e017      	b.n	8002866 <PARAM_getSpeed+0xb2>
			
		case PARAM_TRUN:												// 旋回
		case PARAM_ACC_TRUN:											// 加速中(超地信旋回)
		case PARAM_CONST_TRUN:											// 等速中(超地信旋回)
		case PARAM_DEC_TRUN:											// 減速中(超地信旋回)
			p_adr = &f_TurnSpeedData[en_Speed_trun];
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <PARAM_getSpeed+0xc4>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <PARAM_getSpeed+0xc8>)
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
			break;
 8002842:	e010      	b.n	8002866 <PARAM_getSpeed+0xb2>
		case PARAM_ENTRY_SURA:											// スラローム前の前進動作(スラローム)
		case PARAM_ACC_SURA:											// 加速中(スラローム)
		case PARAM_CONST_SURA:											// 等速中(スラローム)
		case PARAM_DEC_SURA:											// 減速中(スラローム)
		case PARAM_EXIT_SURA:											// スラローム後の前進動作(スラローム)
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <PARAM_getSpeed+0xcc>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <PARAM_getSpeed+0xd0>)
 800284c:	4413      	add	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
			break;
 8002850:	e009      	b.n	8002866 <PARAM_getSpeed+0xb2>

		default:														// Err、とりあえず・・・（メモリ破壊を防ぐため）
			printf("Can't find speed type \n\r");
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <PARAM_getSpeed+0xd4>)
 8002854:	f011 fbea 	bl	801402c <iprintf>
			p_adr = &f_SlaSpeedData[en_Speed_sla];
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <PARAM_getSpeed+0xcc>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <PARAM_getSpeed+0xd0>)
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
			break;
 8002864:	bf00      	nop
	}
	
	return p_adr;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000000 	.word	0x20000000
 8002874:	080196bc 	.word	0x080196bc
 8002878:	20000001 	.word	0x20000001
 800287c:	0801970c 	.word	0x0801970c
 8002880:	20000002 	.word	0x20000002
 8002884:	0801975c 	.word	0x0801975c
 8002888:	080192b8 	.word	0x080192b8
 800288c:	00000000 	.word	0x00000000

08002890 <PARAM_makeSra>:
	
	return p_adr;
}
*/
void PARAM_makeSra( float f_speed, float f_angAcc, float f_g , enSLA_TYPE en_mode)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b094      	sub	sp, #80	; 0x50
 8002894:	af00      	add	r7, sp, #0
 8002896:	ed87 0a03 	vstr	s0, [r7, #12]
 800289a:	edc7 0a02 	vstr	s1, [r7, #8]
 800289e:	ed87 1a01 	vstr	s2, [r7, #4]
 80028a2:	4603      	mov	r3, r0
 80028a4:	70fb      	strb	r3, [r7, #3]
	float	f_start_x;					// 開始x位置 [mm]
	float	f_start_y;					// 開始y位置 [mm]
	float	f_final_x;					// 最終x位置 [mm]
	float	f_final_y;					// 最終y位置 [mm]
	float	f_final_ang;				// 角減速時の最終角度 [rad]	
	float	f_maxAngleV		= 0;		// 最大角速度[rad/s]
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float	f_timeAcc		= 0;		// 加速時間[s]
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
	float	f_accAngle		= 0;		// 加速角度[rad]
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
	float	f_timeConst		= 0;		// 等速時間[s]
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
	float	f_constAngle	= 0;		// 等速角度[rad]
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
	float	f_ang			= 0;		// 演算用、角度 [rad]
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
	float	f_time			= 0;		// 演算用、時間 [s]
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
	float	f_x;						// 演算用x位置 [mm]
	float	f_y;						// 演算用y位置 [mm]
	uint16_t	i = 0;						// ループ用
 80028d0:	2300      	movs	r3, #0
 80028d2:	867b      	strh	r3, [r7, #50]	; 0x32
	stSLA* 	p_adr = &st_Sla[en_mode];		// 記録する走行データ
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4aa8      	ldr	r2, [pc, #672]	; (8002b80 <PARAM_makeSra+0x2f0>)
 80028e0:	4413      	add	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

	/* スラロームに応じた設定値からスラロームに必要なパラメータを演算する */
	switch(en_mode){
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d83a      	bhi.n	8002960 <PARAM_makeSra+0xd0>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <PARAM_makeSra+0x60>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002949 	.word	0x08002949
 80028fc:	08002931 	.word	0x08002931

		case SLA_90:
			f_start_x   = HALF_BLOCK;
 8002900:	4ba0      	ldr	r3, [pc, #640]	; (8002b84 <PARAM_makeSra+0x2f4>)
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK;
 800290a:	4b9f      	ldr	r3, [pc, #636]	; (8002b88 <PARAM_makeSra+0x2f8>)
 800290c:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK;
 800290e:	4b9d      	ldr	r3, [pc, #628]	; (8002b84 <PARAM_makeSra+0x2f4>)
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002912:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <PARAM_makeSra+0x2fc>)
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002916:	e024      	b.n	8002962 <PARAM_makeSra+0xd2>

		case SLA_45:
			f_start_x   = HALF_BLOCK;
 8002918:	4b9a      	ldr	r3, [pc, #616]	; (8002b84 <PARAM_makeSra+0x2f4>)
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 0.75f;
 8002922:	4b9b      	ldr	r3, [pc, #620]	; (8002b90 <PARAM_makeSra+0x300>)
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.75f;
 8002926:	4b9a      	ldr	r3, [pc, #616]	; (8002b90 <PARAM_makeSra+0x300>)
 8002928:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 45.0f * DEG_TO_RAD;
 800292a:	4b9a      	ldr	r3, [pc, #616]	; (8002b94 <PARAM_makeSra+0x304>)
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800292e:	e018      	b.n	8002962 <PARAM_makeSra+0xd2>
			
		case SLA_N90:
			f_start_x   = HALF_BLOCK * 0.5f * 1.4142f;
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <PARAM_makeSra+0x308>)
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = HALF_BLOCK * 1.4142f;
 800293a:	4b98      	ldr	r3, [pc, #608]	; (8002b9c <PARAM_makeSra+0x30c>)
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = HALF_BLOCK * 0.5f * 1.4142f;
 800293e:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <PARAM_makeSra+0x308>)
 8002940:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 90.0f * DEG_TO_RAD;
 8002942:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <PARAM_makeSra+0x2fc>)
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8002946:	e00c      	b.n	8002962 <PARAM_makeSra+0xd2>
			
		case SLA_135:
			f_start_x   = HALF_BLOCK;
 8002948:	4b8e      	ldr	r3, [pc, #568]	; (8002b84 <PARAM_makeSra+0x2f4>)
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
			f_start_y   = 0.0f;
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
			f_final_x   = BLOCK * 1.25f;
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <PARAM_makeSra+0x310>)
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
			f_final_y   = BLOCK * 0.25;
 8002956:	4b93      	ldr	r3, [pc, #588]	; (8002ba4 <PARAM_makeSra+0x314>)
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
			f_final_ang = 135.0f * DEG_TO_RAD;
 800295a:	4b93      	ldr	r3, [pc, #588]	; (8002ba8 <PARAM_makeSra+0x318>)
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800295e:	e000      	b.n	8002962 <PARAM_makeSra+0xd2>

		default:
			break;
 8002960:	bf00      	nop
	}

	/* caluculate acc and dec angle speed */
	f_maxAngleV		= f_g / f_speed;							// max angle speed[rad/s] (omega[rad/s] = g[m/s^2] / v[m/s] )
 8002962:	edd7 6a01 	vldr	s13, [r7, #4]
 8002966:	ed97 7a03 	vldr	s14, [r7, #12]
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	f_timeAcc		= f_maxAngleV / f_angAcc;					// acc time[s]
 8002972:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002976:	ed97 7a02 	vldr	s14, [r7, #8]
 800297a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_accAngle		= 0.5f * f_angAcc * f_timeAcc * f_timeAcc;	// acc angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002982:	edd7 7a02 	vldr	s15, [r7, #8]
 8002986:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800298a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800298e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	f_constAngle	= f_final_ang - f_accAngle * 2;				// const angle[rad] (theta[rad] = Totalangle - (acc angle + dec angle) )
 80029a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	edc7 7a07 	vstr	s15, [r7, #28]
	f_timeConst		= f_constAngle / f_maxAngleV;				// max angle speed time[s]( t[s] = theta[rad] / omega[rad/s] )
 80029b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80029ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	edc7 7a08 	vstr	s15, [r7, #32]

	/* -------------------------------- */
	/* sla end position */
	/* -------------------------------- */
	/* start position */
	f_x		= f_start_x;
 80029c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
	f_y		= f_start_y;
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34

	/* ACC */
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 80029ce:	2300      	movs	r3, #0
 80029d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80029d2:	e05b      	b.n	8002a8c <PARAM_makeSra+0x1fc>
	
		f_time	=  0.001f * (float)i;								// time[s]
 80029d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029de:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002bac <PARAM_makeSra+0x31c>
 80029e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	=  0.5f * f_angAcc * f_time * f_time;				// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 80029ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;			// Xposition[m]
 8002a0a:	69b8      	ldr	r0, [r7, #24]
 8002a0c:	f7fd fdc4 	bl	8000598 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	ec43 2b10 	vmov	d0, r2, r3
 8002a18:	f015 fafe 	bl	8018018 <sin>
 8002a1c:	ec53 2b10 	vmov	r2, r3, d0
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f908 	bl	8000c38 <__aeabi_d2f>
 8002a28:	ee07 0a10 	vmov	s14, r0
 8002a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002bac <PARAM_makeSra+0x31c>
 8002a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;			// Yposition[m]
 8002a48:	69b8      	ldr	r0, [r7, #24]
 8002a4a:	f7fd fda5 	bl	8000598 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	ec43 2b10 	vmov	d0, r2, r3
 8002a56:	f015 fa8b 	bl	8017f70 <cos>
 8002a5a:	ec53 2b10 	vmov	r2, r3, d0
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f8e9 	bl	8000c38 <__aeabi_d2f>
 8002a66:	ee07 0a10 	vmov	s14, r0
 8002a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002bac <PARAM_makeSra+0x31c>
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002a86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a88:	3301      	adds	r3, #1
 8002a8a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002bb0 <PARAM_makeSra+0x320>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d395      	bcc.n	80029d4 <PARAM_makeSra+0x144>
	}
	
	/* CONST */
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	867b      	strh	r3, [r7, #50]	; 0x32
 8002aac:	e057      	b.n	8002b5e <PARAM_makeSra+0x2ce>
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002aae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002bac <PARAM_makeSra+0x31c>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_maxAngleV * f_time;			// angle[rad] (theta[rad] = omega[rad/s] * t[s] )
 8002ac4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002adc:	69b8      	ldr	r0, [r7, #24]
 8002ade:	f7fd fd5b 	bl	8000598 <__aeabi_f2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b10 	vmov	d0, r2, r3
 8002aea:	f015 fa95 	bl	8018018 <sin>
 8002aee:	ec53 2b10 	vmov	r2, r3, d0
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f89f 	bl	8000c38 <__aeabi_d2f>
 8002afa:	ee07 0a10 	vmov	s14, r0
 8002afe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002bac <PARAM_makeSra+0x31c>
 8002b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002b1a:	69b8      	ldr	r0, [r7, #24]
 8002b1c:	f7fd fd3c 	bl	8000598 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	ec43 2b10 	vmov	d0, r2, r3
 8002b28:	f015 fa22 	bl	8017f70 <cos>
 8002b2c:	ec53 2b10 	vmov	r2, r3, d0
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f880 	bl	8000c38 <__aeabi_d2f>
 8002b38:	ee07 0a10 	vmov	s14, r0
 8002b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002bac <PARAM_makeSra+0x31c>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeConst*1000); i++ ){				// [msec]
 8002b58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b62:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bb0 <PARAM_makeSra+0x320>
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d399      	bcc.n	8002aae <PARAM_makeSra+0x21e>
	}

	/* DEC*/
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b7e:	e07d      	b.n	8002c7c <PARAM_makeSra+0x3ec>
 8002b80:	20000f1c 	.word	0x20000f1c
 8002b84:	3d3851ec 	.word	0x3d3851ec
 8002b88:	3db851ec 	.word	0x3db851ec
 8002b8c:	3fc90ff9 	.word	0x3fc90ff9
 8002b90:	3d8a3d71 	.word	0x3d8a3d71
 8002b94:	3f490ff9 	.word	0x3f490ff9
 8002b98:	3d02552a 	.word	0x3d02552a
 8002b9c:	3d82552a 	.word	0x3d82552a
 8002ba0:	3de66667 	.word	0x3de66667
 8002ba4:	3cb851ec 	.word	0x3cb851ec
 8002ba8:	4016cbfb 	.word	0x4016cbfb
 8002bac:	3a83126f 	.word	0x3a83126f
 8002bb0:	447a0000 	.word	0x447a0000
	
		f_time	 = 0.001f * (float)i;							// time[s]
 8002bb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8002bac <PARAM_makeSra+0x31c>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	edc7 7a05 	vstr	s15, [r7, #20]
		f_ang	 = f_accAngle + f_constAngle +0.5f * f_angAcc * f_time * f_time;	// angle[rad] (theta[rad] = 1/2 * a[rad/s^2] * t[s]^2 )
 8002bca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bce:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002bde:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc7 7a06 	vstr	s15, [r7, #24]
		f_x		+= f_speed * (float)sin( f_ang ) * 0.001f;		// Xposition[m]
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f7fd fccc 	bl	8000598 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	ec43 2b10 	vmov	d0, r2, r3
 8002c08:	f015 fa06 	bl	8018018 <sin>
 8002c0c:	ec53 2b10 	vmov	r2, r3, d0
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fe f810 	bl	8000c38 <__aeabi_d2f>
 8002c18:	ee07 0a10 	vmov	s14, r0
 8002c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 8002bac <PARAM_makeSra+0x31c>
 8002c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		f_y		+= f_speed * (float)cos( f_ang ) * 0.001f;		// Yposition[m]
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7fd fcad 	bl	8000598 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ec43 2b10 	vmov	d0, r2, r3
 8002c46:	f015 f993 	bl	8017f70 <cos>
 8002c4a:	ec53 2b10 	vmov	r2, r3, d0
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd fff1 	bl	8000c38 <__aeabi_d2f>
 8002c56:	ee07 0a10 	vmov	s14, r0
 8002c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8002bac <PARAM_makeSra+0x31c>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for( i=0; i<(uint16_t)(f_timeAcc*1000); i++ ){				// [msec]
 8002c76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002c78:	3301      	adds	r3, #1
 8002c7a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c80:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8002bb0 <PARAM_makeSra+0x320>
 8002c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8c:	ee17 3a90 	vmov	r3, s15
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d38d      	bcc.n	8002bb4 <PARAM_makeSra+0x324>
	}

	/* ---------------------------- */
	/*  sla parameter  */
	/* ---------------------------- */
	p_adr->f_speed				= f_speed;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]
	printf("enter speed %5.2f\n\r",f_speed);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7fd fc7a 	bl	8000598 <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	48c9      	ldr	r0, [pc, #804]	; (8002fd0 <PARAM_makeSra+0x740>)
 8002caa:	f011 f9bf 	bl	801402c <iprintf>
	p_adr->f_angAcc				= f_angAcc;// * RAD_TO_DEG ;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	605a      	str	r2, [r3, #4]
	printf("angle acc%5.2f\n\r",f_angAcc);// * RAD_TO_DEG);
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f7fd fc6f 	bl	8000598 <__aeabi_f2d>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	48c5      	ldr	r0, [pc, #788]	; (8002fd4 <PARAM_makeSra+0x744>)
 8002cc0:	f011 f9b4 	bl	801402c <iprintf>
	p_adr->f_angvel				= f_maxAngleV;// * RAD_TO_DEG;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	609a      	str	r2, [r3, #8]
	printf("max angle speed%5.2f\n\r",f_maxAngleV);// * RAD_TO_DEG);
 8002cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ccc:	f7fd fc64 	bl	8000598 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	48c0      	ldr	r0, [pc, #768]	; (8002fd8 <PARAM_makeSra+0x748>)
 8002cd6:	f011 f9a9 	bl	801402c <iprintf>
	p_adr->us_accAngvelTime		= (uint16_t)( f_timeAcc * 1000.0f );
 8002cda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cde:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002fdc <PARAM_makeSra+0x74c>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	829a      	strh	r2, [r3, #20]
	printf("time of angle acc %5.2f\n\r",f_timeAcc * 1000.0f);
 8002cf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002cf8:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002fdc <PARAM_makeSra+0x74c>
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	ee17 0a90 	vmov	r0, s15
 8002d04:	f7fd fc48 	bl	8000598 <__aeabi_f2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	48b4      	ldr	r0, [pc, #720]	; (8002fe0 <PARAM_makeSra+0x750>)
 8002d0e:	f011 f98d 	bl	801402c <iprintf>
	p_adr->us_constAngvelTime	= (uint16_t)( f_timeConst * 1000.0f );
 8002d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d16:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002fdc <PARAM_makeSra+0x74c>
 8002d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d22:	ee17 3a90 	vmov	r3, s15
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	82da      	strh	r2, [r3, #22]
	printf("time of constant angle acc %5.2f\n\r",f_timeConst * 1000.0f);
 8002d2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d30:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002fdc <PARAM_makeSra+0x74c>
 8002d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d38:	ee17 0a90 	vmov	r0, s15
 8002d3c:	f7fd fc2c 	bl	8000598 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	48a7      	ldr	r0, [pc, #668]	; (8002fe4 <PARAM_makeSra+0x754>)
 8002d46:	f011 f971 	bl	801402c <iprintf>
	p_adr->f_ang_AccEnd			= f_accAngle;// * RAD_TO_DEG;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	619a      	str	r2, [r3, #24]
	printf("acc angle[deg] %5.2f\n\r",f_accAngle);// * RAD_TO_DEG);
 8002d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d52:	f7fd fc21 	bl	8000598 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	48a3      	ldr	r0, [pc, #652]	; (8002fe8 <PARAM_makeSra+0x758>)
 8002d5c:	f011 f966 	bl	801402c <iprintf>
	p_adr->f_ang_ConstEnd		= ( f_accAngle + f_constAngle );// * RAD_TO_DEG;
 8002d60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d64:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	edc3 7a07 	vstr	s15, [r3, #28]
	printf("const angle[deg] %5.2f\n\r",( f_accAngle + f_constAngle ));// * RAD_TO_DEG);
 8002d72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	ee17 0a90 	vmov	r0, s15
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4898      	ldr	r0, [pc, #608]	; (8002fec <PARAM_makeSra+0x75c>)
 8002d8c:	f011 f94e 	bl	801402c <iprintf>
	p_adr->f_ang_Total			= f_final_ang;// * RAD_TO_DEG;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d94:	621a      	str	r2, [r3, #32]
	printf("angle [deg] %5.2f\n\r",f_final_ang);// * RAD_TO_DEG);
 8002d96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d98:	f7fd fbfe 	bl	8000598 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4893      	ldr	r0, [pc, #588]	; (8002ff0 <PARAM_makeSra+0x760>)
 8002da2:	f011 f943 	bl	801402c <iprintf>
	
	/* calaculate enter and exit length */
	switch(en_mode){
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	f200 80dc 	bhi.w	8002f66 <PARAM_makeSra+0x6d6>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <PARAM_makeSra+0x524>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002e27 	.word	0x08002e27
 8002dbc:	08002eed 	.word	0x08002eed
 8002dc0:	08002e8b 	.word	0x08002e8b
		case SLA_90:
			p_adr->f_escapeLen = f_final_x - f_x+0.003 ;
 8002dc4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002dc8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	ee17 0a90 	vmov	r0, s15
 8002dd4:	f7fd fbe0 	bl	8000598 <__aeabi_f2d>
 8002dd8:	a375      	add	r3, pc, #468	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fa7d 	bl	80002dc <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd ff25 	bl	8000c38 <__aeabi_d2f>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.001 ;
 8002df4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002df8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	ee17 0a90 	vmov	r0, s15
 8002e04:	f7fd fbc8 	bl	8000598 <__aeabi_f2d>
 8002e08:	a36b      	add	r3, pc, #428	; (adr r3, 8002fb8 <PARAM_makeSra+0x728>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fa63 	bl	80002d8 <__aeabi_dsub>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd ff0d 	bl	8000c38 <__aeabi_d2f>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	60da      	str	r2, [r3, #12]
			break;
 8002e24:	e0a0      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_45:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.00;
 8002e26:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002ff4 <PARAM_makeSra+0x764>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002ff8 <PARAM_makeSra+0x768>
 8002e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	edc3 7a04 	vstr	s15, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y - ( f_final_x - f_x )+0.003;
 8002e48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e54:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e64:	ee17 0a90 	vmov	r0, s15
 8002e68:	f7fd fb96 	bl	8000598 <__aeabi_f2d>
 8002e6c:	a350      	add	r3, pc, #320	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fa33 	bl	80002dc <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd fedb 	bl	8000c38 <__aeabi_d2f>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	60da      	str	r2, [r3, #12]
			break;
 8002e88:	e06e      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_N90:
			p_adr->f_escapeLen = f_final_x - f_x+0.002;
 8002e8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f7fd fb7d 	bl	8000598 <__aeabi_f2d>
 8002e9e:	a348      	add	r3, pc, #288	; (adr r3, 8002fc0 <PARAM_makeSra+0x730>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fa1a 	bl	80002dc <__adddf3>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fec2 	bl	8000c38 <__aeabi_d2f>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y-0.002;
 8002eba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ebe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec6:	ee17 0a90 	vmov	r0, s15
 8002eca:	f7fd fb65 	bl	8000598 <__aeabi_f2d>
 8002ece:	a33c      	add	r3, pc, #240	; (adr r3, 8002fc0 <PARAM_makeSra+0x730>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fa00 	bl	80002d8 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd feaa 	bl	8000c38 <__aeabi_d2f>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	60da      	str	r2, [r3, #12]
			break;
 8002eea:	e03d      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		case SLA_135:
			p_adr->f_escapeLen = 1.4142f * ( f_final_x - f_x )+0.005;
 8002eec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ef0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ff4 <PARAM_makeSra+0x764>
 8002efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd fb48 	bl	8000598 <__aeabi_f2d>
 8002f08:	a32f      	add	r3, pc, #188	; (adr r3, 8002fc8 <PARAM_makeSra+0x738>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd f9e5 	bl	80002dc <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7fd fe8d 	bl	8000c38 <__aeabi_d2f>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	611a      	str	r2, [r3, #16]
			p_adr->f_entryLen  = f_final_y - f_y + ( f_final_x - f_x )-0.003;
 8002f24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f30:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002f34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd fb28 	bl	8000598 <__aeabi_f2d>
 8002f48:	a319      	add	r3, pc, #100	; (adr r3, 8002fb0 <PARAM_makeSra+0x720>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd f9c3 	bl	80002d8 <__aeabi_dsub>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fe6d 	bl	8000c38 <__aeabi_d2f>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	60da      	str	r2, [r3, #12]
			break;
 8002f64:	e000      	b.n	8002f68 <PARAM_makeSra+0x6d8>

		default:
			break;
 8002f66:	bf00      	nop
	}
	printf("entry %6.4f\n\r",f_final_x - f_x);
 8002f68:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002f6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f74:	ee17 0a90 	vmov	r0, s15
 8002f78:	f7fd fb0e 	bl	8000598 <__aeabi_f2d>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	481e      	ldr	r0, [pc, #120]	; (8002ffc <PARAM_makeSra+0x76c>)
 8002f82:	f011 f853 	bl	801402c <iprintf>
	printf("escape %6.4f\n\r",f_final_y - f_y);
 8002f86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd faff 	bl	8000598 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4818      	ldr	r0, [pc, #96]	; (8003000 <PARAM_makeSra+0x770>)
 8002fa0:	f011 f844 	bl	801402c <iprintf>
}
 8002fa4:	bf00      	nop
 8002fa6:	3750      	adds	r7, #80	; 0x50
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	f3af 8000 	nop.w
 8002fb0:	bc6a7efa 	.word	0xbc6a7efa
 8002fb4:	3f689374 	.word	0x3f689374
 8002fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fbc:	3f50624d 	.word	0x3f50624d
 8002fc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fc4:	3f60624d 	.word	0x3f60624d
 8002fc8:	47ae147b 	.word	0x47ae147b
 8002fcc:	3f747ae1 	.word	0x3f747ae1
 8002fd0:	080192d4 	.word	0x080192d4
 8002fd4:	080192e8 	.word	0x080192e8
 8002fd8:	080192fc 	.word	0x080192fc
 8002fdc:	447a0000 	.word	0x447a0000
 8002fe0:	08019314 	.word	0x08019314
 8002fe4:	08019330 	.word	0x08019330
 8002fe8:	08019354 	.word	0x08019354
 8002fec:	0801936c 	.word	0x0801936c
 8002ff0:	08019388 	.word	0x08019388
 8002ff4:	3fb50481 	.word	0x3fb50481
 8002ff8:	00000000 	.word	0x00000000
 8002ffc:	0801939c 	.word	0x0801939c
 8003000:	080193ac 	.word	0x080193ac

08003004 <PARAM_getSra>:

stSLA* PARAM_getSra( enSLA_TYPE en_mode )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
	return &st_Sla[en_mode];
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <PARAM_getSra+0x24>)
 800301a:	4413      	add	r3, r2
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000f1c 	.word	0x20000f1c

0800302c <initQueue>:
	}
	printf("\n");
}

//キューの初期化
void initQueue(queue_t* pQueue) {
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	int i;
	//キューの中身を0埋め
	for (i = 0; i <= SIZE - 1; i++) {
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e013      	b.n	8003062 <initQueue+0x36>
		pQueue->data[i].x =  0 ;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	2100      	movs	r1, #0
 8003040:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
		pQueue->data[i].y =  0 ;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
		pQueue->data[i].step =  0 ;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	2200      	movs	r2, #0
 800305a:	805a      	strh	r2, [r3, #2]
	for (i = 0; i <= SIZE - 1; i++) {
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b3f      	cmp	r3, #63	; 0x3f
 8003066:	dde8      	ble.n	800303a <initQueue+0xe>
	}
	//初期化
	pQueue->head = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pQueue->tail = 0;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pQueue->flag = EMPTY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
//	printQueue(pQueue);
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <enqueue>:


//enqueue関数
void enqueue(queue_t* pQueue, stPOSITION value) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
//	printf("enQ(%d)\n", value);
	//キューがFullの処理
	if (pQueue->flag == FULL) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800309c:	2b02      	cmp	r3, #2
 800309e:	d103      	bne.n	80030a8 <enqueue+0x1c>
		printf("Full\n");
 80030a0:	4817      	ldr	r0, [pc, #92]	; (8003100 <enqueue+0x74>)
 80030a2:	f011 f85f 	bl	8014164 <puts>
		return;
 80030a6:	e028      	b.n	80030fa <enqueue+0x6e>
	}
	//キューがFullでないので、enqueue操作
	pQueue->data[pQueue->tail] = value;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	//リングバッファのため、tailが配列の終端だったら0にする
	if (pQueue->tail == SIZE - 1) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030bc:	2b3f      	cmp	r3, #63	; 0x3f
 80030be:	d104      	bne.n	80030ca <enqueue+0x3e>
		pQueue->tail = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80030c8:	e006      	b.n	80030d8 <enqueue+0x4c>
		//終端でなければ、tailをインクリメント
	}
	else {
		pQueue->tail++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d104      	bne.n	80030f2 <enqueue+0x66>
		pQueue->flag = FULL;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80030f0:	e003      	b.n	80030fa <enqueue+0x6e>
	}
	else {
		pQueue->flag = AVAILABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);
}
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	080193c0 	.word	0x080193c0

08003104 <dequeue>:

//dequeue関数
stPOSITION dequeue(queue_t* pQueue) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
//	printf("deQ\n");
	stPOSITION dequeue;
	//キューがEmptyの処理
	if (pQueue->flag == EMPTY) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <dequeue+0x2a>
		printf("Empty\n");
 8003116:	482c      	ldr	r0, [pc, #176]	; (80031c8 <dequeue+0xc4>)
 8003118:	f011 f824 	bl	8014164 <puts>
		dequeue.x = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	723b      	strb	r3, [r7, #8]
		dequeue.y = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	727b      	strb	r3, [r7, #9]
		dequeue.step = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	817b      	strh	r3, [r7, #10]
		return  dequeue ;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e041      	b.n	80031b2 <dequeue+0xae>
	}
	dequeue = pQueue->data[pQueue->head];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313a:	60bb      	str	r3, [r7, #8]
	//キューがEmptyでなければ、dequeue操作
	pQueue->data[pQueue->head].x =  0 ;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2100      	movs	r1, #0
 8003146:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pQueue->data[pQueue->head].y =  0 ;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	705a      	strb	r2, [r3, #1]
	pQueue->data[pQueue->head].step =  0 ;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	805a      	strh	r2, [r3, #2]
	//リングバッファのため、headが配列の終端だったら0にする
	if (pQueue->head == SIZE - 1) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003170:	2b3f      	cmp	r3, #63	; 0x3f
 8003172:	d104      	bne.n	800317e <dequeue+0x7a>
		pQueue->head = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800317c:	e006      	b.n	800318c <dequeue+0x88>
		//終端でなければ、headをインクリメント
	}
	else {
		pQueue->head++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
	//フラグの更新
	if (pQueue->tail == pQueue->head) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003198:	429a      	cmp	r2, r3
 800319a:	d104      	bne.n	80031a6 <dequeue+0xa2>
		pQueue->flag = EMPTY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80031a4:	e003      	b.n	80031ae <dequeue+0xaa>
	}
	else {
		pQueue->flag = AVAILABLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
//	printQueue(pQueue);

	return dequeue;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
}
 80031b2:	2300      	movs	r3, #0
 80031b4:	89ba      	ldrh	r2, [r7, #12]
 80031b6:	f362 030f 	bfi	r3, r2, #0, #16
 80031ba:	89fa      	ldrh	r2, [r7, #14]
 80031bc:	f362 431f 	bfi	r3, r2, #16, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	080193c8 	.word	0x080193c8

080031cc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <LL_DMA_EnableChannel+0x40>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <LL_DMA_EnableChannel+0x40>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	440a      	add	r2, r1
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	4611      	mov	r1, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	440a      	add	r2, r1
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	080197ac 	.word	0x080197ac

08003210 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <LL_DMA_DisableChannel+0x40>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <LL_DMA_DisableChannel+0x40>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	440a      	add	r2, r1
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	440a      	add	r2, r1
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	080197ac 	.word	0x080197ac

08003254 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	4908      	ldr	r1, [pc, #32]	; (80032a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	440a      	add	r2, r1
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4611      	mov	r1, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	440a      	add	r2, r1
 800328a:	4611      	mov	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	080197ac 	.word	0x080197ac

080032a4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <LL_DMA_SetMode+0x48>)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 0220 	bic.w	r2, r3, #32
 80032c8:	4908      	ldr	r1, [pc, #32]	; (80032ec <LL_DMA_SetMode+0x48>)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	440b      	add	r3, r1
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	440b      	add	r3, r1
 80032d6:	4619      	mov	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	080197ac 	.word	0x080197ac

080032f0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <LL_DMA_SetPeriphIncMode+0x48>)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4413      	add	r3, r2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003314:	4908      	ldr	r1, [pc, #32]	; (8003338 <LL_DMA_SetPeriphIncMode+0x48>)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	440b      	add	r3, r1
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	440b      	add	r3, r1
 8003322:	4619      	mov	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	080197ac 	.word	0x080197ac

0800333c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <LL_DMA_SetMemoryIncMode+0x48>)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4413      	add	r3, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003360:	4908      	ldr	r1, [pc, #32]	; (8003384 <LL_DMA_SetMemoryIncMode+0x48>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	440b      	add	r3, r1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	440b      	add	r3, r1
 800336e:	4619      	mov	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	080197ac 	.word	0x080197ac

08003388 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8003398:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <LL_DMA_SetPeriphSize+0x48>)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	4908      	ldr	r1, [pc, #32]	; (80033d0 <LL_DMA_SetPeriphSize+0x48>)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	440b      	add	r3, r1
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	440b      	add	r3, r1
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	080197ac 	.word	0x080197ac

080033d4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <LL_DMA_SetMemorySize+0x48>)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f8:	4908      	ldr	r1, [pc, #32]	; (800341c <LL_DMA_SetMemorySize+0x48>)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	440b      	add	r3, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	440b      	add	r3, r1
 8003406:	4619      	mov	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	080197ac 	.word	0x080197ac

08003420 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8003430:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003444:	4908      	ldr	r1, [pc, #32]	; (8003468 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	440b      	add	r3, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4619      	mov	r1, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	440b      	add	r3, r1
 8003452:	4619      	mov	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
             Priority);
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	080197ac 	.word	0x080197ac

0800346c <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <LL_DMA_SetDataLength+0x48>)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4908      	ldr	r1, [pc, #32]	; (80034b4 <LL_DMA_SetDataLength+0x48>)
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	440a      	add	r2, r1
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	4611      	mov	r1, r2
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	440a      	add	r2, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	080197ac 	.word	0x080197ac

080034b8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d114      	bne.n	80034fa <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4413      	add	r3, r2
 80034de:	461a      	mov	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80034e4:	4a12      	ldr	r2, [pc, #72]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	461a      	mov	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 80034f8:	e013      	b.n	8003522 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4413      	add	r3, r2
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <LL_DMA_ConfigAddresses+0x78>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4413      	add	r3, r2
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4413      	add	r3, r2
 800351c:	461a      	mov	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	60d3      	str	r3, [r2, #12]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	080197ac 	.word	0x080197ac

08003534 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003548:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800355c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003572:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <LL_DMA_EnableIT_TC+0x40>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <LL_DMA_EnableIT_TC+0x40>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	440a      	add	r2, r1
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	4611      	mov	r1, r2
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	440a      	add	r2, r1
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	080197ac 	.word	0x080197ac

080035cc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <LL_DMA_EnableIT_TE+0x40>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <LL_DMA_EnableIT_TE+0x40>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	440a      	add	r2, r1
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	4611      	mov	r1, r2
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	440a      	add	r2, r1
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	080197ac 	.word	0x080197ac

08003610 <LL_AHB2_GRP1_EnableClock>:
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800361a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4313      	orrs	r3, r2
 8003622:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000

08003640 <LL_APB1_GRP1_EnableClock>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 800364a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003656:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40021000 	.word	0x40021000

08003670 <LL_APB2_GRP1_EnableClock>:
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 800367a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4313      	orrs	r3, r2
 8003682:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003686:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000

080036a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d101      	bne.n	80036d8 <LL_SPI_IsEnabled+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_SPI_IsEnabled+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 0210 	bic.w	r2, r3, #16
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_SPI_SetRxFIFOThreshold>:
  *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
  *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f023 0208 	bic.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	605a      	str	r2, [r3, #4]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	605a      	str	r2, [r3, #4]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	330c      	adds	r3, #12
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	b2db      	uxtb	r3, r3
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_GPIO_SetOutputPin>:
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	619a      	str	r2, [r3, #24]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_GPIO_ResetOutputPin>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b090      	sub	sp, #64	; 0x40
 8003828:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800382a:	f107 0318 	add.w	r3, r7, #24
 800382e:	2228      	movs	r2, #40	; 0x28
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f00f fd78 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	463b      	mov	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003848:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800384c:	f7ff ff10 	bl	8003670 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003850:	2001      	movs	r0, #1
 8003852:	f7ff fedd 	bl	8003610 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003856:	2320      	movs	r3, #32
 8003858:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800385a:	2302      	movs	r3, #2
 800385c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800386a:	2305      	movs	r3, #5
 800386c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	463b      	mov	r3, r7
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003876:	f00e faea 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800387a:	2340      	movs	r3, #64	; 0x40
 800387c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800387e:	2302      	movs	r3, #2
 8003880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800388e:	2305      	movs	r3, #5
 8003890:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389a:	f00e fad8 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038a2:	2302      	movs	r3, #2
 80038a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80038b2:	2305      	movs	r3, #5
 80038b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b6:	463b      	mov	r3, r7
 80038b8:	4619      	mov	r1, r3
 80038ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038be:	f00e fac6 	bl	8011e4e <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_SPI1_RX);
 80038c2:	220a      	movs	r2, #10
 80038c4:	2100      	movs	r1, #0
 80038c6:	483b      	ldr	r0, [pc, #236]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038c8:	f7ff fe34 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	4838      	ldr	r0, [pc, #224]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038d2:	f7ff fcbf 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	4836      	ldr	r0, [pc, #216]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038dc:	f7ff fda0 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2100      	movs	r1, #0
 80038e4:	4833      	ldr	r0, [pc, #204]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038e6:	f7ff fcdd 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	4831      	ldr	r0, [pc, #196]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038f0:	f7ff fcfe 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	2100      	movs	r1, #0
 80038f8:	482e      	ldr	r0, [pc, #184]	; (80039b4 <MX_SPI1_Init+0x190>)
 80038fa:	f7ff fd1f 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	482c      	ldr	r0, [pc, #176]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003904:	f7ff fd40 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8003908:	2200      	movs	r2, #0
 800390a:	2100      	movs	r1, #0
 800390c:	4829      	ldr	r0, [pc, #164]	; (80039b4 <MX_SPI1_Init+0x190>)
 800390e:	f7ff fd61 	bl	80033d4 <LL_DMA_SetMemorySize>

  /* SPI1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_SPI1_TX);
 8003912:	220b      	movs	r2, #11
 8003914:	2101      	movs	r1, #1
 8003916:	4827      	ldr	r0, [pc, #156]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003918:	f7ff fe0c 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800391c:	2210      	movs	r2, #16
 800391e:	2101      	movs	r1, #1
 8003920:	4824      	ldr	r0, [pc, #144]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003922:	f7ff fc97 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003926:	2200      	movs	r2, #0
 8003928:	2101      	movs	r1, #1
 800392a:	4822      	ldr	r0, [pc, #136]	; (80039b4 <MX_SPI1_Init+0x190>)
 800392c:	f7ff fd78 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8003930:	2200      	movs	r2, #0
 8003932:	2101      	movs	r1, #1
 8003934:	481f      	ldr	r0, [pc, #124]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003936:	f7ff fcb5 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800393a:	2200      	movs	r2, #0
 800393c:	2101      	movs	r1, #1
 800393e:	481d      	ldr	r0, [pc, #116]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003940:	f7ff fcd6 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	2101      	movs	r1, #1
 8003948:	481a      	ldr	r0, [pc, #104]	; (80039b4 <MX_SPI1_Init+0x190>)
 800394a:	f7ff fcf7 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800394e:	2200      	movs	r2, #0
 8003950:	2101      	movs	r1, #1
 8003952:	4818      	ldr	r0, [pc, #96]	; (80039b4 <MX_SPI1_Init+0x190>)
 8003954:	f7ff fd18 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8003958:	2200      	movs	r2, #0
 800395a:	2101      	movs	r1, #1
 800395c:	4815      	ldr	r0, [pc, #84]	; (80039b4 <MX_SPI1_Init+0x190>)
 800395e:	f7ff fd39 	bl	80033d4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003966:	f44f 7382 	mov.w	r3, #260	; 0x104
 800396a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800396c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003970:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003972:	2302      	movs	r3, #2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003976:	2301      	movs	r3, #1
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800397a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003980:	2318      	movs	r3, #24
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800398c:	2307      	movs	r3, #7
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	4619      	mov	r1, r3
 8003996:	4808      	ldr	r0, [pc, #32]	; (80039b8 <MX_SPI1_Init+0x194>)
 8003998:	f00e fd99 	bl	80124ce <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800399c:	2100      	movs	r1, #0
 800399e:	4806      	ldr	r0, [pc, #24]	; (80039b8 <MX_SPI1_Init+0x194>)
 80039a0:	f7ff fea1 	bl	80036e6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80039a4:	4804      	ldr	r0, [pc, #16]	; (80039b8 <MX_SPI1_Init+0x194>)
 80039a6:	f7ff fec4 	bl	8003732 <LL_SPI_DisableNSSPulseMgt>

}
 80039aa:	bf00      	nop
 80039ac:	3740      	adds	r7, #64	; 0x40
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40013000 	.word	0x40013000

080039bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	; 0x40
 80039c0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039c2:	f107 0318 	add.w	r3, r7, #24
 80039c6:	2228      	movs	r2, #40	; 0x28
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00f fcac 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	463b      	mov	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80039e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039e4:	f7ff fe2c 	bl	8003640 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80039e8:	2002      	movs	r0, #2
 80039ea:	f7ff fe11 	bl	8003610 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80039ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039f4:	2302      	movs	r3, #2
 80039f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a04:	2305      	movs	r3, #5
 8003a06:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	463b      	mov	r3, r7
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	484f      	ldr	r0, [pc, #316]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a0e:	f00e fa1e 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8003a12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a28:	2305      	movs	r3, #5
 8003a2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4846      	ldr	r0, [pc, #280]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a32:	f00e fa0c 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	463b      	mov	r3, r7
 8003a52:	4619      	mov	r1, r3
 8003a54:	483d      	ldr	r0, [pc, #244]	; (8003b4c <MX_SPI2_Init+0x190>)
 8003a56:	f00e f9fa 	bl	8011e4e <LL_GPIO_Init>

  /* SPI2 DMA Init */

  /* SPI2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_SPI2_RX);
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	483c      	ldr	r0, [pc, #240]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a60:	f7ff fd68 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2102      	movs	r1, #2
 8003a68:	4839      	ldr	r0, [pc, #228]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a6a:	f7ff fbf3 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2102      	movs	r1, #2
 8003a72:	4837      	ldr	r0, [pc, #220]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a74:	f7ff fcd4 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	4834      	ldr	r0, [pc, #208]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a7e:	f7ff fc11 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2102      	movs	r1, #2
 8003a86:	4832      	ldr	r0, [pc, #200]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a88:	f7ff fc32 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	2102      	movs	r1, #2
 8003a90:	482f      	ldr	r0, [pc, #188]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a92:	f7ff fc53 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2102      	movs	r1, #2
 8003a9a:	482d      	ldr	r0, [pc, #180]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003a9c:	f7ff fc74 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	482a      	ldr	r0, [pc, #168]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aa6:	f7ff fc95 	bl	80033d4 <LL_DMA_SetMemorySize>

  /* SPI2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_SPI2_TX);
 8003aaa:	220d      	movs	r2, #13
 8003aac:	2103      	movs	r1, #3
 8003aae:	4828      	ldr	r0, [pc, #160]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ab0:	f7ff fd40 	bl	8003534 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	2103      	movs	r1, #3
 8003ab8:	4825      	ldr	r0, [pc, #148]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aba:	f7ff fbcb 	bl	8003254 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	4823      	ldr	r0, [pc, #140]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ac4:	f7ff fcac 	bl	8003420 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2103      	movs	r1, #3
 8003acc:	4820      	ldr	r0, [pc, #128]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ace:	f7ff fbe9 	bl	80032a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	481e      	ldr	r0, [pc, #120]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ad8:	f7ff fc0a 	bl	80032f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	2103      	movs	r1, #3
 8003ae0:	481b      	ldr	r0, [pc, #108]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003ae2:	f7ff fc2b 	bl	800333c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2103      	movs	r1, #3
 8003aea:	4819      	ldr	r0, [pc, #100]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003aec:	f7ff fc4c 	bl	8003388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2103      	movs	r1, #3
 8003af4:	4816      	ldr	r0, [pc, #88]	; (8003b50 <MX_SPI2_Init+0x194>)
 8003af6:	f7ff fc6d 	bl	80033d4 <LL_DMA_SetMemorySize>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003afe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b02:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b08:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003b18:	2318      	movs	r3, #24
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003b24:	2307      	movs	r3, #7
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003b28:	f107 0318 	add.w	r3, r7, #24
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b30:	f00e fccd 	bl	80124ce <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003b34:	2100      	movs	r1, #0
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b38:	f7ff fdd5 	bl	80036e6 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <MX_SPI2_Init+0x198>)
 8003b3e:	f7ff fdf8 	bl	8003732 <LL_SPI_DisableNSSPulseMgt>

}
 8003b42:	bf00      	nop
 8003b44:	3740      	adds	r7, #64	; 0x40
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40003800 	.word	0x40003800

08003b58 <DMA1_Channel1_Init>:

//uint8_t rx_flag = 0;
//uint8_t tx_flag = 0;

void DMA1_Channel1_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_1);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4806      	ldr	r0, [pc, #24]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b60:	f7ff fd12 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_1);
 8003b64:	2100      	movs	r1, #0
 8003b66:	4804      	ldr	r0, [pc, #16]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b68:	f7ff fd30 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4802      	ldr	r0, [pc, #8]	; (8003b78 <DMA1_Channel1_Init+0x20>)
 8003b70:	f7ff fb4e 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40020000 	.word	0x40020000

08003b7c <DMA1_Channel2_Init>:

void DMA1_Channel2_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_2);
 8003b80:	2101      	movs	r1, #1
 8003b82:	4806      	ldr	r0, [pc, #24]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b84:	f7ff fd00 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_2);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b8c:	f7ff fd1e 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003b90:	2101      	movs	r1, #1
 8003b92:	4802      	ldr	r0, [pc, #8]	; (8003b9c <DMA1_Channel2_Init+0x20>)
 8003b94:	f7ff fb3c 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40020000 	.word	0x40020000

08003ba0 <DMA1_Channel3_Init>:

void DMA1_Channel3_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_3);
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4806      	ldr	r0, [pc, #24]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003ba8:	f7ff fcee 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_3);
 8003bac:	2102      	movs	r1, #2
 8003bae:	4804      	ldr	r0, [pc, #16]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003bb0:	f7ff fd0c 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <DMA1_Channel3_Init+0x20>)
 8003bb8:	f7ff fb2a 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <DMA1_Channel4_Init>:

void DMA1_Channel4_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	LL_DMA_EnableIT_TC(DMA1,LL_DMA_CHANNEL_4);
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4806      	ldr	r0, [pc, #24]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bcc:	f7ff fcdc 	bl	8003588 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(DMA1,LL_DMA_CHANNEL_4);
 8003bd0:	2103      	movs	r1, #3
 8003bd2:	4804      	ldr	r0, [pc, #16]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bd4:	f7ff fcfa 	bl	80035cc <LL_DMA_EnableIT_TE>
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003bd8:	2103      	movs	r1, #3
 8003bda:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA1_Channel4_Init+0x20>)
 8003bdc:	f7ff fb18 	bl	8003210 <LL_DMA_DisableChannel>
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40020000 	.word	0x40020000

08003be8 <SPI1_Start>:

void SPI1_Start(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
 8003bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bf0:	4808      	ldr	r0, [pc, #32]	; (8003c14 <SPI1_Start+0x2c>)
 8003bf2:	f7ff fd8b 	bl	800370c <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel1_Init();
 8003bf6:	f7ff ffaf 	bl	8003b58 <DMA1_Channel1_Init>
	DMA1_Channel2_Init();
 8003bfa:	f7ff ffbf 	bl	8003b7c <DMA1_Channel2_Init>
	LL_SPI_EnableDMAReq_RX(SPI1);
 8003bfe:	4805      	ldr	r0, [pc, #20]	; (8003c14 <SPI1_Start+0x2c>)
 8003c00:	f7ff fdba 	bl	8003778 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI1);
 8003c04:	4803      	ldr	r0, [pc, #12]	; (8003c14 <SPI1_Start+0x2c>)
 8003c06:	f7ff fdc7 	bl	8003798 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI1);
 8003c0a:	4802      	ldr	r0, [pc, #8]	; (8003c14 <SPI1_Start+0x2c>)
 8003c0c:	f7ff fd48 	bl	80036a0 <LL_SPI_Enable>
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40013000 	.word	0x40013000

08003c18 <SPI1_DMA_Communication>:

void SPI1_DMA_Communication(uint8_t length)
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003c22:	2101      	movs	r1, #1
 8003c24:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <SPI1_DMA_Communication+0x98>)
 8003c26:	f7ff fdee 	bl	8003806 <LL_GPIO_ResetOutputPin>

	if( LL_SPI_IsActiveFlag_RXNE(SPI1) == SET)LL_SPI_ReceiveData8(SPI1);
 8003c2a:	4822      	ldr	r0, [pc, #136]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c2c:	f7ff fd91 	bl	8003752 <LL_SPI_IsActiveFlag_RXNE>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <SPI1_DMA_Communication+0x24>
 8003c36:	481f      	ldr	r0, [pc, #124]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c38:	f7ff fdca 	bl	80037d0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI1) == RESET) LL_SPI_Enable(SPI1);
 8003c3c:	481d      	ldr	r0, [pc, #116]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c3e:	f7ff fd3f 	bl	80036c0 <LL_SPI_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <SPI1_DMA_Communication+0x36>
 8003c48:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c4a:	f7ff fd29 	bl	80036a0 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_2,(uint32_t)SPI1TransmitData,
 8003c4e:	4c1a      	ldr	r4, [pc, #104]	; (8003cb8 <SPI1_DMA_Communication+0xa0>)
 8003c50:	4818      	ldr	r0, [pc, #96]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c52:	f7ff fdb1 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2210      	movs	r2, #16
 8003c5a:	9200      	str	r2, [sp, #0]
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4816      	ldr	r0, [pc, #88]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c62:	f7ff fc29 	bl	80034b8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI1),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_2,length);
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4813      	ldr	r0, [pc, #76]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c6e:	f7ff fbfd 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_1,LL_SPI_DMA_GetRegAddr(SPI1),
 8003c72:	4810      	ldr	r0, [pc, #64]	; (8003cb4 <SPI1_DMA_Communication+0x9c>)
 8003c74:	f7ff fda0 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4911      	ldr	r1, [pc, #68]	; (8003cc0 <SPI1_DMA_Communication+0xa8>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	2100      	movs	r1, #0
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c86:	f7ff fc17 	bl	80034b8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI1ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,length);
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c92:	f7ff fbeb 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003c96:	2101      	movs	r1, #1
 8003c98:	4808      	ldr	r0, [pc, #32]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003c9a:	f7ff fa97 	bl	80031cc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <SPI1_DMA_Communication+0xa4>)
 8003ca2:	f7ff fa93 	bl	80031cc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	40013000 	.word	0x40013000
 8003cb8:	20000fac 	.word	0x20000fac
 8003cbc:	40020000 	.word	0x40020000
 8003cc0:	20000fb4 	.word	0x20000fb4

08003cc4 <SPI1_DMA1_ReceiveComplete_Callback>:

void SPI1_DMA1_ReceiveComplete_Callback(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4804      	ldr	r0, [pc, #16]	; (8003cdc <SPI1_DMA1_ReceiveComplete_Callback+0x18>)
 8003ccc:	f7ff faa0 	bl	8003210 <LL_DMA_DisableChannel>
	LL_GPIO_SetOutputPin(CS_gyro_GPIO_Port, CS_gyro_Pin);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <SPI1_DMA1_ReceiveComplete_Callback+0x1c>)
 8003cd4:	f7ff fd89 	bl	80037ea <LL_GPIO_SetOutputPin>
//	rx_flag = 1;
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	48000400 	.word	0x48000400

08003ce4 <SPI1_DMA1_TransmitComplete_Callback>:

void SPI1_DMA1_TransmitComplete_Callback(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_2);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <SPI1_DMA1_TransmitComplete_Callback+0x10>)
 8003cec:	f7ff fa90 	bl	8003210 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <Get_SPI1ReciveData>:

uint8_t Get_SPI1ReciveData(uint8_t num){
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	return SPI1ReciveData[num];
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <Get_SPI1ReciveData+0x1c>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20000fb4 	.word	0x20000fb4

08003d18 <SetSPI1TransmitData>:

void SetSPI1TransmitData(uint8_t num, uint8_t data){
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
	SPI1TransmitData[num] = data;
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <SetSPI1TransmitData+0x24>)
 8003d2c:	79ba      	ldrb	r2, [r7, #6]
 8003d2e:	54ca      	strb	r2, [r1, r3]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000fac 	.word	0x20000fac

08003d40 <SPI2_Start>:

uint8_t SPI2ReciveData[SPI2_DATA_BUFFR_SIZE];
uint8_t SPI2TransmitData[SPI2_DATA_BUFFR_SIZE];

void SPI2_Start(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 8003d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <SPI2_Start+0x2c>)
 8003d4a:	f7ff fcdf 	bl	800370c <LL_SPI_SetRxFIFOThreshold>
	DMA1_Channel3_Init();
 8003d4e:	f7ff ff27 	bl	8003ba0 <DMA1_Channel3_Init>
	DMA1_Channel4_Init();
 8003d52:	f7ff ff37 	bl	8003bc4 <DMA1_Channel4_Init>
	LL_SPI_EnableDMAReq_RX(SPI2);
 8003d56:	4805      	ldr	r0, [pc, #20]	; (8003d6c <SPI2_Start+0x2c>)
 8003d58:	f7ff fd0e 	bl	8003778 <LL_SPI_EnableDMAReq_RX>
	LL_SPI_EnableDMAReq_TX(SPI2);
 8003d5c:	4803      	ldr	r0, [pc, #12]	; (8003d6c <SPI2_Start+0x2c>)
 8003d5e:	f7ff fd1b 	bl	8003798 <LL_SPI_EnableDMAReq_TX>

	LL_SPI_Enable(SPI2);
 8003d62:	4802      	ldr	r0, [pc, #8]	; (8003d6c <SPI2_Start+0x2c>)
 8003d64:	f7ff fc9c 	bl	80036a0 <LL_SPI_Enable>
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40003800 	.word	0x40003800

08003d70 <SPI2_DMA_Communication>:

void SPI2_DMA_Communication(uint8_t length,uint8_t dir)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	4603      	mov	r3, r0
 8003d78:	460a      	mov	r2, r1
 8003d7a:	71fb      	strb	r3, [r7, #7]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71bb      	strb	r3, [r7, #6]
  if(dir == enL){
 8003d80:	79bb      	ldrb	r3, [r7, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <SPI2_DMA_Communication+0x22>
	  LL_GPIO_ResetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8a:	4825      	ldr	r0, [pc, #148]	; (8003e20 <SPI2_DMA_Communication+0xb0>)
 8003d8c:	f7ff fd3b 	bl	8003806 <LL_GPIO_ResetOutputPin>
 8003d90:	e003      	b.n	8003d9a <SPI2_DMA_Communication+0x2a>
  }else{
    LL_GPIO_ResetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	4822      	ldr	r0, [pc, #136]	; (8003e20 <SPI2_DMA_Communication+0xb0>)
 8003d96:	f7ff fd36 	bl	8003806 <LL_GPIO_ResetOutputPin>
  }
	if( LL_SPI_IsActiveFlag_RXNE(SPI2) == SET)LL_SPI_ReceiveData8(SPI2);
 8003d9a:	4822      	ldr	r0, [pc, #136]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003d9c:	f7ff fcd9 	bl	8003752 <LL_SPI_IsActiveFlag_RXNE>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <SPI2_DMA_Communication+0x3c>
 8003da6:	481f      	ldr	r0, [pc, #124]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003da8:	f7ff fd12 	bl	80037d0 <LL_SPI_ReceiveData8>
	if( LL_SPI_IsEnabled(SPI2) == RESET) LL_SPI_Enable(SPI2);
 8003dac:	481d      	ldr	r0, [pc, #116]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dae:	f7ff fc87 	bl	80036c0 <LL_SPI_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <SPI2_DMA_Communication+0x4e>
 8003db8:	481a      	ldr	r0, [pc, #104]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dba:	f7ff fc71 	bl	80036a0 <LL_SPI_Enable>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_4,(uint32_t)SPI2TransmitData,
 8003dbe:	4c1a      	ldr	r4, [pc, #104]	; (8003e28 <SPI2_DMA_Communication+0xb8>)
 8003dc0:	4818      	ldr	r0, [pc, #96]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003dc2:	f7ff fcf9 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2210      	movs	r2, #16
 8003dca:	9200      	str	r2, [sp, #0]
 8003dcc:	4622      	mov	r2, r4
 8003dce:	2103      	movs	r1, #3
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003dd2:	f7ff fb71 	bl	80034b8 <LL_DMA_ConfigAddresses>
							LL_SPI_DMA_GetRegAddr(SPI2),LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_4,length);
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2103      	movs	r1, #3
 8003ddc:	4813      	ldr	r0, [pc, #76]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003dde:	f7ff fb45 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_3,LL_SPI_DMA_GetRegAddr(SPI2),
 8003de2:	4810      	ldr	r0, [pc, #64]	; (8003e24 <SPI2_DMA_Communication+0xb4>)
 8003de4:	f7ff fce8 	bl	80037b8 <LL_SPI_DMA_GetRegAddr>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4911      	ldr	r1, [pc, #68]	; (8003e30 <SPI2_DMA_Communication+0xc0>)
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	460b      	mov	r3, r1
 8003df2:	2102      	movs	r1, #2
 8003df4:	480d      	ldr	r0, [pc, #52]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003df6:	f7ff fb5f 	bl	80034b8 <LL_DMA_ConfigAddresses>
							(uint32_t)SPI2ReciveData,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_3,length);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2102      	movs	r1, #2
 8003e00:	480a      	ldr	r0, [pc, #40]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e02:	f7ff fb33 	bl	800346c <LL_DMA_SetDataLength>

	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003e06:	2103      	movs	r1, #3
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e0a:	f7ff f9df 	bl	80031cc <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4806      	ldr	r0, [pc, #24]	; (8003e2c <SPI2_DMA_Communication+0xbc>)
 8003e12:	f7ff f9db 	bl	80031cc <LL_DMA_EnableChannel>
	while(rx_flag != 1);
	rx_flag = 0;
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);
	LL_GPIO_SetOutputPin(GPIOx,CS_Pin);
*/
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	48000400 	.word	0x48000400
 8003e24:	40003800 	.word	0x40003800
 8003e28:	20000fb0 	.word	0x20000fb0
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	20000fb8 	.word	0x20000fb8

08003e34 <SPI2_DMA1_ReceiveComplete_Callback>:

void SPI2_DMA1_ReceiveComplete_Callback(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_3);
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4809      	ldr	r0, [pc, #36]	; (8003e60 <SPI2_DMA1_ReceiveComplete_Callback+0x2c>)
 8003e3c:	f7ff f9e8 	bl	8003210 <LL_DMA_DisableChannel>
  if(encoderdir == enL){
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <SPI2_DMA1_ReceiveComplete_Callback+0x30>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <SPI2_DMA1_ReceiveComplete_Callback+0x20>
	  LL_GPIO_SetOutputPin(CS_enL_GPIO_Port, CS_enL_Pin);
 8003e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e4e:	f7ff fccc 	bl	80037ea <LL_GPIO_SetOutputPin>
  }else{
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
  }
//	rx_flag = 1;
}
 8003e52:	e003      	b.n	8003e5c <SPI2_DMA1_ReceiveComplete_Callback+0x28>
    LL_GPIO_SetOutputPin(CS_enR_GPIO_Port, CS_enR_Pin);
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	4804      	ldr	r0, [pc, #16]	; (8003e68 <SPI2_DMA1_ReceiveComplete_Callback+0x34>)
 8003e58:	f7ff fcc7 	bl	80037ea <LL_GPIO_SetOutputPin>
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020000 	.word	0x40020000
 8003e64:	20000706 	.word	0x20000706
 8003e68:	48000400 	.word	0x48000400

08003e6c <SPI2_DMA1_TransmitComplete_Callback>:

void SPI2_DMA1_TransmitComplete_Callback(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_4);
 8003e70:	2103      	movs	r1, #3
 8003e72:	4802      	ldr	r0, [pc, #8]	; (8003e7c <SPI2_DMA1_TransmitComplete_Callback+0x10>)
 8003e74:	f7ff f9cc 	bl	8003210 <LL_DMA_DisableChannel>
//	tx_flag = 1;
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40020000 	.word	0x40020000

08003e80 <Get_SPI2ReciveData>:

uint8_t Get_SPI2ReciveData(uint8_t num){
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	return SPI2ReciveData[num];
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <Get_SPI2ReciveData+0x1c>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	20000fb8 	.word	0x20000fb8

08003ea0 <SetSPI2TransmitData>:

void SetSPI2TransmitData(uint8_t num, uint8_t data){
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	71fb      	strb	r3, [r7, #7]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71bb      	strb	r3, [r7, #6]
	SPI2TransmitData[num] = data;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4904      	ldr	r1, [pc, #16]	; (8003ec4 <SetSPI2TransmitData+0x24>)
 8003eb4:	79ba      	ldrb	r2, [r7, #6]
 8003eb6:	54ca      	strb	r2, [r1, r3]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	20000fb0 	.word	0x20000fb0

08003ec8 <LL_DMA_IsActiveFlag_TC1>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d101      	bne.n	8003ee0 <LL_DMA_IsActiveFlag_TC1+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_DMA_IsActiveFlag_TC2>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d101      	bne.n	8003f06 <LL_DMA_IsActiveFlag_TC2+0x18>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <LL_DMA_IsActiveFlag_TC2+0x1a>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_DMA_IsActiveFlag_TC3>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d101      	bne.n	8003f2e <LL_DMA_IsActiveFlag_TC3+0x1a>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_DMA_IsActiveFlag_TC3+0x1c>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_DMA_IsActiveFlag_TC4>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d101      	bne.n	8003f56 <LL_DMA_IsActiveFlag_TC4+0x1a>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <LL_DMA_IsActiveFlag_TC4+0x1c>
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <LL_DMA_ClearFlag_GI1>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	605a      	str	r2, [r3, #4]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_DMA_ClearFlag_GI2>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	605a      	str	r2, [r3, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_DMA_ClearFlag_GI3>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa6:	605a      	str	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_DMA_ClearFlag_GI4>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc2:	605a      	str	r2, [r3, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f06f 0201 	mvn.w	r2, #1
 8003fde:	611a      	str	r2, [r3, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <HardFault_Handler+0x4>

08004026 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800402a:	e7fe      	b.n	800402a <MemManage_Handler+0x4>

0800402c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <BusFault_Handler+0x4>

08004032 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <UsageFault_Handler+0x4>

08004038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1){
 8004074:	4806      	ldr	r0, [pc, #24]	; (8004090 <DMA1_Channel1_IRQHandler+0x20>)
 8004076:	f7ff ff27 	bl	8003ec8 <LL_DMA_IsActiveFlag_TC1>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d104      	bne.n	800408a <DMA1_Channel1_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI1(DMA1);
 8004080:	4803      	ldr	r0, [pc, #12]	; (8004090 <DMA1_Channel1_IRQHandler+0x20>)
 8004082:	f7ff ff6f 	bl	8003f64 <LL_DMA_ClearFlag_GI1>
		SPI1_DMA1_ReceiveComplete_Callback();
 8004086:	f7ff fe1d 	bl	8003cc4 <SPI1_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40020000 	.word	0x40020000

08004094 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1) == 1){
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <DMA1_Channel2_IRQHandler+0x20>)
 800409a:	f7ff ff28 	bl	8003eee <LL_DMA_IsActiveFlag_TC2>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d104      	bne.n	80040ae <DMA1_Channel2_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI2(DMA1);
 80040a4:	4803      	ldr	r0, [pc, #12]	; (80040b4 <DMA1_Channel2_IRQHandler+0x20>)
 80040a6:	f7ff ff6a 	bl	8003f7e <LL_DMA_ClearFlag_GI2>
		SPI1_DMA1_TransmitComplete_Callback();
 80040aa:	f7ff fe1b 	bl	8003ce4 <SPI1_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020000 	.word	0x40020000

080040b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1) == 1){
 80040bc:	4806      	ldr	r0, [pc, #24]	; (80040d8 <DMA1_Channel3_IRQHandler+0x20>)
 80040be:	f7ff ff29 	bl	8003f14 <LL_DMA_IsActiveFlag_TC3>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d104      	bne.n	80040d2 <DMA1_Channel3_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI3(DMA1);
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <DMA1_Channel3_IRQHandler+0x20>)
 80040ca:	f7ff ff65 	bl	8003f98 <LL_DMA_ClearFlag_GI3>
		SPI2_DMA1_ReceiveComplete_Callback();
 80040ce:	f7ff feb1 	bl	8003e34 <SPI2_DMA1_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020000 	.word	0x40020000

080040dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1){
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <DMA1_Channel4_IRQHandler+0x20>)
 80040e2:	f7ff ff2b 	bl	8003f3c <LL_DMA_IsActiveFlag_TC4>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d104      	bne.n	80040f6 <DMA1_Channel4_IRQHandler+0x1a>
		LL_DMA_ClearFlag_GI4(DMA1);
 80040ec:	4803      	ldr	r0, [pc, #12]	; (80040fc <DMA1_Channel4_IRQHandler+0x20>)
 80040ee:	f7ff ff61 	bl	8003fb4 <LL_DMA_ClearFlag_GI4>
	  SPI2_DMA1_TransmitComplete_Callback();
 80040f2:	f7ff febb 	bl	8003e6c <SPI2_DMA1_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40020000 	.word	0x40020000

08004100 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM1)==1){
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004122:	f7ff ff63 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <TIM1_UP_TIM16_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM1);
 800412c:	4803      	ldr	r0, [pc, #12]	; (800413c <TIM1_UP_TIM16_IRQHandler+0x20>)
 800412e:	f7ff ff4f 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
  INTC_sys();
 8004132:	f001 fadd 	bl	80056f0 <INTC_sys>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00

08004140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM4)==1){
 8004144:	481e      	ldr	r0, [pc, #120]	; (80041c0 <TIM4_IRQHandler+0x80>)
 8004146:	f7ff ff51 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <TIM4_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8004150:	481b      	ldr	r0, [pc, #108]	; (80041c0 <TIM4_IRQHandler+0x80>)
 8004152:	f7ff ff3d 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
  switch(i){
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <TIM4_IRQHandler+0x84>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d821      	bhi.n	80041a2 <TIM4_IRQHandler+0x62>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <TIM4_IRQHandler+0x24>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004175 	.word	0x08004175
 8004168:	0800417d 	.word	0x0800417d
 800416c:	0800418b 	.word	0x0800418b
 8004170:	08004199 	.word	0x08004199
		case 0:
			recv_spi_encoder(enL);
 8004174:	2000      	movs	r0, #0
 8004176:	f003 fe4f 	bl	8007e18 <recv_spi_encoder>
			break;
 800417a:	e012      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 1:
			Set_encoder_data(enL);
 800417c:	2000      	movs	r0, #0
 800417e:	f003 fe59 	bl	8007e34 <Set_encoder_data>
      recv_spi_encoder(enR);
 8004182:	2001      	movs	r0, #1
 8004184:	f003 fe48 	bl	8007e18 <recv_spi_encoder>
			break;
 8004188:	e00b      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 2:
      Set_encoder_data(enR);
 800418a:	2001      	movs	r0, #1
 800418c:	f003 fe52 	bl	8007e34 <Set_encoder_data>
      ICM_42688_GyroRead_DMA(0x29);
 8004190:	2029      	movs	r0, #41	; 0x29
 8004192:	f003 ffce 	bl	8008132 <ICM_42688_GyroRead_DMA>
			break;
 8004196:	e004      	b.n	80041a2 <TIM4_IRQHandler+0x62>
		case 3:
			ICM_42688_GyroData();
 8004198:	f003 ffda 	bl	8008150 <ICM_42688_GyroData>
			GYRO_Pol();
 800419c:	f004 f888 	bl	80082b0 <GYRO_Pol>
			break;
 80041a0:	bf00      	nop
	}
	i = (i+1)%4;
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <TIM4_IRQHandler+0x84>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	3301      	adds	r3, #1
 80041a8:	425a      	negs	r2, r3
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	f002 0203 	and.w	r2, r2, #3
 80041b2:	bf58      	it	pl
 80041b4:	4253      	negpl	r3, r2
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <TIM4_IRQHandler+0x84>)
 80041ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40000800 	.word	0x40000800
 80041c4:	20000210 	.word	0x20000210

080041c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	static uint8_t i = 0;
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM5)==1){
 80041cc:	4819      	ldr	r0, [pc, #100]	; (8004234 <TIM5_IRQHandler+0x6c>)
 80041ce:	f7ff ff0d 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d102      	bne.n	80041de <TIM5_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM5);
 80041d8:	4816      	ldr	r0, [pc, #88]	; (8004234 <TIM5_IRQHandler+0x6c>)
 80041da:	f7ff fef9 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
	switch(i){
 80041de:	4b16      	ldr	r3, [pc, #88]	; (8004238 <TIM5_IRQHandler+0x70>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d816      	bhi.n	8004214 <TIM5_IRQHandler+0x4c>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <TIM5_IRQHandler+0x24>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	08004209 	.word	0x08004209
 80041f8:	0800420f 	.word	0x0800420f
		case 0:
			DIST_Pol_FL();
 80041fc:	f007 fd7c 	bl	800bcf8 <DIST_Pol_FL>
			break;
 8004200:	e008      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 1:
			DIST_Pol_SR();
 8004202:	f007 fe21 	bl	800be48 <DIST_Pol_SR>
			break;
 8004206:	e005      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 2:
			DIST_Pol_SL();
 8004208:	f007 fde6 	bl	800bdd8 <DIST_Pol_SL>
			break;
 800420c:	e002      	b.n	8004214 <TIM5_IRQHandler+0x4c>
		case 3:
			DIST_Pol_FR();
 800420e:	f007 fdab 	bl	800bd68 <DIST_Pol_FR>
			break;
 8004212:	bf00      	nop
	}
	i = (i+1)%4;
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <TIM5_IRQHandler+0x70>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	425a      	negs	r2, r3
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	f002 0203 	and.w	r2, r2, #3
 8004224:	bf58      	it	pl
 8004226:	4253      	negpl	r3, r2
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <TIM5_IRQHandler+0x70>)
 800422c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM5_IRQn 0 */
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40000c00 	.word	0x40000c00
 8004238:	20000211 	.word	0x20000211

0800423c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ( LL_TIM_IsActiveFlag_UPDATE(TIM6)==1){
 8004240:	4807      	ldr	r0, [pc, #28]	; (8004260 <TIM6_DAC_IRQHandler+0x24>)
 8004242:	f7ff fed3 	bl	8003fec <LL_TIM_IsActiveFlag_UPDATE>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <TIM6_DAC_IRQHandler+0x16>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <TIM6_DAC_IRQHandler+0x24>)
 800424e:	f7ff febf 	bl	8003fd0 <LL_TIM_ClearFlag_UPDATE>
	}
	BAT_Pol();
 8004252:	f007 fa55 	bl	800b700 <BAT_Pol>
	log_interrupt ();
 8004256:	f004 f95b 	bl	8008510 <log_interrupt>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40001000 	.word	0x40001000

08004264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
	return 1;
 8004268:	2301      	movs	r3, #1
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_kill>:

int _kill(int pid, int sig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800427e:	f00f f81b 	bl	80132b8 <__errno>
 8004282:	4603      	mov	r3, r0
 8004284:	2216      	movs	r2, #22
 8004286:	601a      	str	r2, [r3, #0]
	return -1;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_exit>:

void _exit (int status)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800429c:	f04f 31ff 	mov.w	r1, #4294967295
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffe7 	bl	8004274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042a6:	e7fe      	b.n	80042a6 <_exit+0x12>

080042a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e00a      	b.n	80042d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042ba:	f3af 8000 	nop.w
 80042be:	4601      	mov	r1, r0
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	60ba      	str	r2, [r7, #8]
 80042c6:	b2ca      	uxtb	r2, r1
 80042c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3301      	adds	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	dbf0      	blt.n	80042ba <_read+0x12>
	}

return len;
 80042d8:	687b      	ldr	r3, [r7, #4]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e009      	b.n	8004308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	60ba      	str	r2, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe f943 	bl	8002588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	dbf1      	blt.n	80042f4 <_write+0x12>
	}
	return len;
 8004310:	687b      	ldr	r3, [r7, #4]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_close>:

int _close(int file)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
	return -1;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004342:	605a      	str	r2, [r3, #4]
	return 0;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_isatty>:

int _isatty(int file)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
	return 1;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
	return 0;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <_sbrk+0x5c>)
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <_sbrk+0x60>)
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <_sbrk+0x64>)
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <_sbrk+0x68>)
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_sbrk+0x64>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d207      	bcs.n	80043c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b4:	f00e ff80 	bl	80132b8 <__errno>
 80043b8:	4603      	mov	r3, r0
 80043ba:	220c      	movs	r2, #12
 80043bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e009      	b.n	80043d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_sbrk+0x64>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <_sbrk+0x64>)
 80043d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043d6:	68fb      	ldr	r3, [r7, #12]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20020000 	.word	0x20020000
 80043e4:	00000400 	.word	0x00000400
 80043e8:	20000214 	.word	0x20000214
 80043ec:	200093d8 	.word	0x200093d8

080043f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <SystemInit+0x28>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <SystemInit+0x28>)
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <SystemInit+0x28>)
 8004406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800440a:	609a      	str	r2, [r3, #8]
#endif
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_GetPriorityGrouping>:
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4907      	ldr	r1, [pc, #28]	; (8004470 <__NVIC_EnableIRQ+0x38>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e100 	.word	0xe000e100

08004474 <__NVIC_SetPriority>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	; (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <NVIC_EncodePriority>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0307 	rsb	r3, r3, #7
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf28      	it	cs
 80044e6:	2304      	movcs	r3, #4
 80044e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d902      	bls.n	80044f8 <NVIC_EncodePriority+0x30>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3b03      	subs	r3, #3
 80044f6:	e000      	b.n	80044fa <NVIC_EncodePriority+0x32>
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	401a      	ands	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004510:	f04f 31ff 	mov.w	r1, #4294967295
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43d9      	mvns	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	4313      	orrs	r3, r2
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <LL_AHB2_GRP1_EnableClock>:
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800453a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800453c:	4907      	ldr	r1, [pc, #28]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4013      	ands	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40021000 	.word	0x40021000

08004560 <LL_APB1_GRP1_EnableClock>:
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 800456a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4313      	orrs	r3, r2
 8004572:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004576:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40021000 	.word	0x40021000

08004590 <LL_APB2_GRP1_EnableClock>:
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800459a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800459c:	4907      	ldr	r1, [pc, #28]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80045a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4013      	ands	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40021000 	.word	0x40021000

080045c0 <LL_TIM_EnableCounter>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_TIM_EnableARRPreload>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_TIM_DisableARRPreload>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_TIM_CC_EnableChannel>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1a      	ldr	r2, [r3, #32]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <LL_TIM_OC_DisableFast>:
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d02e      	beq.n	80046b2 <LL_TIM_OC_DisableFast+0x6e>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d029      	beq.n	80046ae <LL_TIM_OC_DisableFast+0x6a>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d024      	beq.n	80046aa <LL_TIM_OC_DisableFast+0x66>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d01f      	beq.n	80046a6 <LL_TIM_OC_DisableFast+0x62>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466c:	d019      	beq.n	80046a2 <LL_TIM_OC_DisableFast+0x5e>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d013      	beq.n	800469e <LL_TIM_OC_DisableFast+0x5a>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d00d      	beq.n	800469a <LL_TIM_OC_DisableFast+0x56>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004684:	d007      	beq.n	8004696 <LL_TIM_OC_DisableFast+0x52>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d101      	bne.n	8004692 <LL_TIM_OC_DisableFast+0x4e>
 800468e:	2308      	movs	r3, #8
 8004690:	e010      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 8004692:	2309      	movs	r3, #9
 8004694:	e00e      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 8004696:	2307      	movs	r3, #7
 8004698:	e00c      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 800469a:	2306      	movs	r3, #6
 800469c:	e00a      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 800469e:	2305      	movs	r3, #5
 80046a0:	e008      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <LL_TIM_OC_DisableFast+0x70>
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <LL_TIM_OC_DisableFast+0xa8>)
 80046c0:	5cd3      	ldrb	r3, [r2, r3]
 80046c2:	440b      	add	r3, r1
 80046c4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	4908      	ldr	r1, [pc, #32]	; (80046f0 <LL_TIM_OC_DisableFast+0xac>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	4619      	mov	r1, r3
 80046d2:	2304      	movs	r3, #4
 80046d4:	408b      	lsls	r3, r1
 80046d6:	43db      	mvns	r3, r3
 80046d8:	401a      	ands	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	080197cc 	.word	0x080197cc
 80046f0:	080197d8 	.word	0x080197d8

080046f4 <LL_TIM_OC_EnablePreload>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d02e      	beq.n	8004762 <LL_TIM_OC_EnablePreload+0x6e>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d029      	beq.n	800475e <LL_TIM_OC_EnablePreload+0x6a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b10      	cmp	r3, #16
 800470e:	d024      	beq.n	800475a <LL_TIM_OC_EnablePreload+0x66>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d01f      	beq.n	8004756 <LL_TIM_OC_EnablePreload+0x62>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471c:	d019      	beq.n	8004752 <LL_TIM_OC_EnablePreload+0x5e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d013      	beq.n	800474e <LL_TIM_OC_EnablePreload+0x5a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d00d      	beq.n	800474a <LL_TIM_OC_EnablePreload+0x56>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d007      	beq.n	8004746 <LL_TIM_OC_EnablePreload+0x52>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473c:	d101      	bne.n	8004742 <LL_TIM_OC_EnablePreload+0x4e>
 800473e:	2308      	movs	r3, #8
 8004740:	e010      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004742:	2309      	movs	r3, #9
 8004744:	e00e      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004746:	2307      	movs	r3, #7
 8004748:	e00c      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800474a:	2306      	movs	r3, #6
 800474c:	e00a      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <LL_TIM_OC_EnablePreload+0x70>
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3318      	adds	r3, #24
 800476a:	4619      	mov	r1, r3
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <LL_TIM_OC_EnablePreload+0xa4>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	440b      	add	r3, r1
 8004774:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <LL_TIM_OC_EnablePreload+0xa8>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	4619      	mov	r1, r3
 8004782:	2308      	movs	r3, #8
 8004784:	408b      	lsls	r3, r1
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	080197cc 	.word	0x080197cc
 800479c:	080197d8 	.word	0x080197d8

080047a0 <LL_TIM_OC_SetCompareCH2>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_TIM_OC_SetCompareCH3>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_TIM_SetClockSource>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_TIM_SetTriggerOutput>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_TIM_SetTriggerOutput2>:
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_TIM_DisableMasterSlaveMode>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_TIM_EnableAllOutputs>:
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60da      	str	r2, [r3, #12]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b092      	sub	sp, #72	; 0x48
 80048b8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80048ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	611a      	str	r2, [r3, #16]
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f00e fd29 	bl	8013328 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80048d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048da:	f7ff fe59 	bl	8004590 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80048de:	f7ff fd9d 	bl	800441c <__NVIC_GetPriorityGrouping>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fded 	bl	80044c8 <NVIC_EncodePriority>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4619      	mov	r1, r3
 80048f2:	2019      	movs	r0, #25
 80048f4:	f7ff fdbe 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80048f8:	2019      	movs	r0, #25
 80048fa:	f7ff fd9d 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 80048fe:	23a9      	movs	r3, #169	; 0xa9
 8004900:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004902:	2300      	movs	r3, #0
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 999;
 8004906:	f240 33e7 	movw	r3, #999	; 0x3e7
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800490c:	2300      	movs	r3, #0
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.RepetitionCounter = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004918:	4619      	mov	r1, r3
 800491a:	4811      	ldr	r0, [pc, #68]	; (8004960 <MX_TIM1_Init+0xac>)
 800491c:	f00d febc 	bl	8012698 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8004920:	480f      	ldr	r0, [pc, #60]	; (8004960 <MX_TIM1_Init+0xac>)
 8004922:	f7ff fe6d 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004926:	2100      	movs	r1, #0
 8004928:	480d      	ldr	r0, [pc, #52]	; (8004960 <MX_TIM1_Init+0xac>)
 800492a:	f7ff ff55 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800492e:	2100      	movs	r1, #0
 8004930:	480b      	ldr	r0, [pc, #44]	; (8004960 <MX_TIM1_Init+0xac>)
 8004932:	f7ff ff66 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8004936:	2100      	movs	r1, #0
 8004938:	4809      	ldr	r0, [pc, #36]	; (8004960 <MX_TIM1_Init+0xac>)
 800493a:	f7ff ff77 	bl	800482c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800493e:	4808      	ldr	r0, [pc, #32]	; (8004960 <MX_TIM1_Init+0xac>)
 8004940:	f7ff ff87 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4803      	ldr	r0, [pc, #12]	; (8004960 <MX_TIM1_Init+0xac>)
 8004952:	f00d ffa3 	bl	801289c <LL_TIM_BDTR_Init>

}
 8004956:	bf00      	nop
 8004958:	3748      	adds	r7, #72	; 0x48
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00

08004964 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b094      	sub	sp, #80	; 0x50
 8004968:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800496a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	60da      	str	r2, [r3, #12]
 8004978:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	2220      	movs	r2, #32
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f00e fcd0 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff fde1 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80049a2:	2300      	movs	r3, #0
 80049a4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 80049a6:	f240 3351 	movw	r3, #849	; 0x351
 80049aa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80049ac:	2300      	movs	r3, #0
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80049b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049b4:	4619      	mov	r1, r3
 80049b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049ba:	f00d fe6d 	bl	8012698 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80049be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049c2:	f7ff fe0d 	bl	80045e0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80049c6:	2110      	movs	r1, #16
 80049c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049cc:	f7ff fe92 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80049d0:	2360      	movs	r3, #96	; 0x60
 80049d2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80049e4:	f107 031c 	add.w	r3, r7, #28
 80049e8:	461a      	mov	r2, r3
 80049ea:	2110      	movs	r1, #16
 80049ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049f0:	f00d fef4 	bl	80127dc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80049f4:	2110      	movs	r1, #16
 80049f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049fa:	f7ff fe23 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80049fe:	2100      	movs	r1, #0
 8004a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a04:	f7ff fefd 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004a08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004a0c:	f7ff ff21 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004a10:	2002      	movs	r0, #2
 8004a12:	f7ff fd8d 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004a16:	2308      	movs	r3, #8
 8004a18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <MX_TIM2_Init+0xdc>)
 8004a34:	f00d fa0b 	bl	8011e4e <LL_GPIO_Init>

}
 8004a38:	bf00      	nop
 8004a3a:	3750      	adds	r7, #80	; 0x50
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	48000400 	.word	0x48000400

08004a44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b094      	sub	sp, #80	; 0x50
 8004a48:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004a5a:	f107 031c 	add.w	r3, r7, #28
 8004a5e:	2220      	movs	r2, #32
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f00e fc60 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	60da      	str	r2, [r3, #12]
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f7ff fd71 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a82:	2300      	movs	r3, #0
 8004a84:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 849;
 8004a86:	f240 3351 	movw	r3, #849	; 0x351
 8004a8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004a90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a94:	4619      	mov	r1, r3
 8004a96:	481f      	ldr	r0, [pc, #124]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004a98:	f00d fdfe 	bl	8012698 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8004a9c:	481d      	ldr	r0, [pc, #116]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004a9e:	f7ff fd9f 	bl	80045e0 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	481b      	ldr	r0, [pc, #108]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004aa6:	f7ff fe25 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004aaa:	2360      	movs	r3, #96	; 0x60
 8004aac:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2110      	movs	r1, #16
 8004ac6:	4813      	ldr	r0, [pc, #76]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ac8:	f00d fe88 	bl	80127dc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8004acc:	2110      	movs	r1, #16
 8004ace:	4811      	ldr	r0, [pc, #68]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ad0:	f7ff fdb8 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	480f      	ldr	r0, [pc, #60]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ad8:	f7ff fe93 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004adc:	480d      	ldr	r0, [pc, #52]	; (8004b14 <MX_TIM3_Init+0xd0>)
 8004ade:	f7ff feb8 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f7ff fd24 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004aec:	2302      	movs	r3, #2
 8004aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004afc:	2302      	movs	r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4804      	ldr	r0, [pc, #16]	; (8004b18 <MX_TIM3_Init+0xd4>)
 8004b06:	f00d f9a2 	bl	8011e4e <LL_GPIO_Init>

}
 8004b0a:	bf00      	nop
 8004b0c:	3750      	adds	r7, #80	; 0x50
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40000400 	.word	0x40000400
 8004b18:	48000400 	.word	0x48000400

08004b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8004b30:	2004      	movs	r0, #4
 8004b32:	f7ff fd15 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b36:	f7ff fc71 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fcc1 	bl	80044c8 <NVIC_EncodePriority>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4619      	mov	r1, r3
 8004b4a:	201e      	movs	r0, #30
 8004b4c:	f7ff fc92 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8004b50:	201e      	movs	r0, #30
 8004b52:	f7ff fc71 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004b56:	23a9      	movs	r3, #169	; 0xa9
 8004b58:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004b5e:	23f9      	movs	r3, #249	; 0xf9
 8004b60:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	480a      	ldr	r0, [pc, #40]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b6c:	f00d fd94 	bl	8012698 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8004b70:	4808      	ldr	r0, [pc, #32]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b72:	f7ff fd45 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004b76:	2100      	movs	r1, #0
 8004b78:	4806      	ldr	r0, [pc, #24]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b7a:	f7ff fe2d 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4804      	ldr	r0, [pc, #16]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b82:	f7ff fe3e 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8004b86:	4803      	ldr	r0, [pc, #12]	; (8004b94 <MX_TIM4_Init+0x78>)
 8004b88:	f7ff fe63 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40000800 	.word	0x40000800

08004b98 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004bac:	2008      	movs	r0, #8
 8004bae:	f7ff fcd7 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM5 interrupt Init */
  NVIC_SetPriority(TIM5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004bb2:	f7ff fc33 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fc83 	bl	80044c8 <NVIC_EncodePriority>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	2032      	movs	r0, #50	; 0x32
 8004bc8:	f7ff fc54 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8004bcc:	2032      	movs	r0, #50	; 0x32
 8004bce:	f7ff fc33 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004bd2:	23a9      	movs	r3, #169	; 0xa9
 8004bd4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 249;
 8004bda:	23f9      	movs	r3, #249	; 0xf9
 8004bdc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	480a      	ldr	r0, [pc, #40]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004be8:	f00d fd56 	bl	8012698 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM5);
 8004bec:	4808      	ldr	r0, [pc, #32]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bee:	f7ff fd07 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4806      	ldr	r0, [pc, #24]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bf6:	f7ff fdef 	bl	80047d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4804      	ldr	r0, [pc, #16]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004bfe:	f7ff fe00 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004c02:	4803      	ldr	r0, [pc, #12]	; (8004c10 <MX_TIM5_Init+0x78>)
 8004c04:	f7ff fe25 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40000c00 	.word	0x40000c00

08004c14 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8004c28:	2010      	movs	r0, #16
 8004c2a:	f7ff fc99 	bl	8004560 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c2e:	f7ff fbf5 	bl	800441c <__NVIC_GetPriorityGrouping>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fc45 	bl	80044c8 <NVIC_EncodePriority>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	2036      	movs	r0, #54	; 0x36
 8004c44:	f7ff fc16 	bl	8004474 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c48:	2036      	movs	r0, #54	; 0x36
 8004c4a:	f7ff fbf5 	bl	8004438 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 169;
 8004c4e:	23a9      	movs	r3, #169	; 0xa9
 8004c50:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9999;
 8004c56:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c5a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4808      	ldr	r0, [pc, #32]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c62:	f00d fd19 	bl	8012698 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8004c66:	4807      	ldr	r0, [pc, #28]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c68:	f7ff fcca 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c70:	f7ff fdc7 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8004c74:	4803      	ldr	r0, [pc, #12]	; (8004c84 <MX_TIM6_Init+0x70>)
 8004c76:	f7ff fdec 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>

}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40001000 	.word	0x40001000

08004c88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b0a0      	sub	sp, #128	; 0x80
 8004c8c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	609a      	str	r2, [r3, #8]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004c9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f00e fb3e 	bl	8013328 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004cac:	f107 031c 	add.w	r3, r7, #28
 8004cb0:	2230      	movs	r2, #48	; 0x30
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f00e fb37 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8004cca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cce:	f7ff fc5f 	bl	8004590 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 849;
 8004cdc:	f240 3351 	movw	r3, #849	; 0x351
 8004ce0:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004cea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4837      	ldr	r0, [pc, #220]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004cf2:	f00d fcd1 	bl	8012698 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8004cf6:	4836      	ldr	r0, [pc, #216]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004cf8:	f7ff fc82 	bl	8004600 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
 8004cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d00:	4833      	ldr	r0, [pc, #204]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d02:	f7ff fcf7 	bl	80046f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d16:	2300      	movs	r3, #0
 8004d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004d22:	2300      	movs	r3, #0
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d30:	4827      	ldr	r0, [pc, #156]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d32:	f00d fd53 	bl	80127dc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH3);
 8004d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d3a:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d3c:	f7ff fc82 	bl	8004644 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8004d40:	2100      	movs	r1, #0
 8004d42:	4823      	ldr	r0, [pc, #140]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d44:	f7ff fd5d 	bl	8004802 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4821      	ldr	r0, [pc, #132]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d4c:	f7ff fd6e 	bl	800482c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8004d50:	481f      	ldr	r0, [pc, #124]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d52:	f7ff fd7e 	bl	8004852 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8004d72:	2300      	movs	r3, #0
 8004d74:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8004d84:	2300      	movs	r3, #0
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004d90:	f107 031c 	add.w	r3, r7, #28
 8004d94:	4619      	mov	r1, r3
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <MX_TIM8_Init+0x148>)
 8004d98:	f00d fd80 	bl	801289c <LL_TIM_BDTR_Init>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	f7ff fbc7 	bl	8004530 <LL_AHB2_GRP1_EnableClock>
    /**TIM8 GPIO Configuration
    PB9     ------> TIM8_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004da8:	2302      	movs	r3, #2
 8004daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004db8:	230a      	movs	r3, #10
 8004dba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4804      	ldr	r0, [pc, #16]	; (8004dd4 <MX_TIM8_Init+0x14c>)
 8004dc2:	f00d f844 	bl	8011e4e <LL_GPIO_Init>

}
 8004dc6:	bf00      	nop
 8004dc8:	3780      	adds	r7, #128	; 0x80
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	48000400 	.word	0x48000400

08004dd8 <TIMER_init>:

/* USER CODE BEGIN 1 */
void TIMER_init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  //sensor encode gyro
  LL_TIM_EnableIT_UPDATE(TIM4);
 8004ddc:	481a      	ldr	r0, [pc, #104]	; (8004e48 <TIMER_init+0x70>)
 8004dde:	f7ff fd58 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM4);
 8004de2:	4819      	ldr	r0, [pc, #100]	; (8004e48 <TIMER_init+0x70>)
 8004de4:	f7ff fbec 	bl	80045c0 <LL_TIM_EnableCounter>
  //wall sensor
  LL_TIM_EnableIT_UPDATE(TIM5);
 8004de8:	4818      	ldr	r0, [pc, #96]	; (8004e4c <TIMER_init+0x74>)
 8004dea:	f7ff fd52 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM5);
 8004dee:	4817      	ldr	r0, [pc, #92]	; (8004e4c <TIMER_init+0x74>)
 8004df0:	f7ff fbe6 	bl	80045c0 <LL_TIM_EnableCounter>
  //batt_LV
  LL_TIM_EnableIT_UPDATE(TIM6);
 8004df4:	4816      	ldr	r0, [pc, #88]	; (8004e50 <TIMER_init+0x78>)
 8004df6:	f7ff fd4c 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8004dfa:	4815      	ldr	r0, [pc, #84]	; (8004e50 <TIMER_init+0x78>)
 8004dfc:	f7ff fbe0 	bl	80045c0 <LL_TIM_EnableCounter>
  //motor
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8004e00:	2110      	movs	r1, #16
 8004e02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e06:	f7ff fc0b 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8004e0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e0e:	f7ff fbd7 	bl	80045c0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8004e12:	2110      	movs	r1, #16
 8004e14:	480f      	ldr	r0, [pc, #60]	; (8004e54 <TIMER_init+0x7c>)
 8004e16:	f7ff fc03 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8004e1a:	480e      	ldr	r0, [pc, #56]	; (8004e54 <TIMER_init+0x7c>)
 8004e1c:	f7ff fbd0 	bl	80045c0 <LL_TIM_EnableCounter>
  //fan
  LL_TIM_EnableAllOutputs(TIM8);
 8004e20:	480d      	ldr	r0, [pc, #52]	; (8004e58 <TIMER_init+0x80>)
 8004e22:	f7ff fd26 	bl	8004872 <LL_TIM_EnableAllOutputs>
  LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH3);
 8004e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e2a:	480b      	ldr	r0, [pc, #44]	; (8004e58 <TIMER_init+0x80>)
 8004e2c:	f7ff fbf8 	bl	8004620 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM8);
 8004e30:	4809      	ldr	r0, [pc, #36]	; (8004e58 <TIMER_init+0x80>)
 8004e32:	f7ff fbc5 	bl	80045c0 <LL_TIM_EnableCounter>
  //ctrl
  LL_TIM_EnableIT_UPDATE(TIM1);
 8004e36:	4809      	ldr	r0, [pc, #36]	; (8004e5c <TIMER_init+0x84>)
 8004e38:	f7ff fd2b 	bl	8004892 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8004e3c:	4807      	ldr	r0, [pc, #28]	; (8004e5c <TIMER_init+0x84>)
 8004e3e:	f7ff fbbf 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40001000 	.word	0x40001000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40013400 	.word	0x40013400
 8004e5c:	40012c00 	.word	0x40012c00

08004e60 <Enable_TIM2>:

void Enable_TIM2(void){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM2);
 8004e64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e68:	f7ff fbaa 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <Enable_TIM3>:

void Disable_TIM2(void){
  LL_TIM_DisableCounter(TIM2);
}

void Enable_TIM3(void){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  LL_TIM_EnableCounter(TIM3);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <Enable_TIM3+0x10>)
 8004e76:	f7ff fba3 	bl	80045c0 <LL_TIM_EnableCounter>
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40000400 	.word	0x40000400
 8004e84:	00000000 	.word	0x00000000

08004e88 <Set_DutyTIM2>:

void Disable_TIM3(void){
  LL_TIM_DisableCounter(TIM3);
}

void Set_DutyTIM2(uint16_t duty){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9c:	ee17 0a90 	vmov	r0, s15
 8004ea0:	f7fb fb7a 	bl	8000598 <__aeabi_f2d>
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <Set_DutyTIM2+0x78>)
 8004eaa:	f7fb fcf7 	bl	800089c <__aeabi_ddiv>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	a310      	add	r3, pc, #64	; (adr r3, 8004ef8 <Set_DutyTIM2+0x70>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f7fb fbc4 	bl	8000648 <__aeabi_dmul>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f7fb fe96 	bl	8000bf8 <__aeabi_d2uiz>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f240 3251 	movw	r2, #849	; 0x351
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d902      	bls.n	8004ee0 <Set_DutyTIM2+0x58>
    compare = 849;
 8004eda:	f240 3351 	movw	r3, #849	; 0x351
 8004ede:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM2,compare);
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004ee8:	f7ff fc5a 	bl	80047a0 <LL_TIM_OC_SetCompareCH2>
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	408a8800 	.word	0x408a8800
 8004f00:	408f4000 	.word	0x408f4000
 8004f04:	00000000 	.word	0x00000000

08004f08 <Set_DutyTIM3>:

void Set_DutyTIM3(uint16_t duty){
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	ee17 0a90 	vmov	r0, s15
 8004f20:	f7fb fb3a 	bl	8000598 <__aeabi_f2d>
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <Set_DutyTIM3+0x78>)
 8004f2a:	f7fb fcb7 	bl	800089c <__aeabi_ddiv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	a310      	add	r3, pc, #64	; (adr r3, 8004f78 <Set_DutyTIM3+0x70>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb fb84 	bl	8000648 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fb fe56 	bl	8000bf8 <__aeabi_d2uiz>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	f240 3251 	movw	r2, #849	; 0x351
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d902      	bls.n	8004f60 <Set_DutyTIM3+0x58>
    compare = 849;
 8004f5a:	f240 3351 	movw	r3, #849	; 0x351
 8004f5e:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH2(TIM3,compare);
 8004f60:	89fb      	ldrh	r3, [r7, #14]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4807      	ldr	r0, [pc, #28]	; (8004f84 <Set_DutyTIM3+0x7c>)
 8004f66:	f7ff fc1b 	bl	80047a0 <LL_TIM_OC_SetCompareCH2>
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	408a8800 	.word	0x408a8800
 8004f80:	408f4000 	.word	0x408f4000
 8004f84:	40000400 	.word	0x40000400

08004f88 <Set_DutyTIM8>:

void Disable_TIM8(void){
  LL_TIM_DisableCounter(TIM8);
}

void Set_DutyTIM8(uint16_t duty){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint16_t compare = (float)duty/1000.0*849.0;
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	ee17 0a90 	vmov	r0, s15
 8004fa0:	f7fb fafa 	bl	8000598 <__aeabi_f2d>
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <Set_DutyTIM8+0x78>)
 8004faa:	f7fb fc77 	bl	800089c <__aeabi_ddiv>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	a310      	add	r3, pc, #64	; (adr r3, 8004ff8 <Set_DutyTIM8+0x70>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fb44 	bl	8000648 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f7fb fe16 	bl	8000bf8 <__aeabi_d2uiz>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	81fb      	strh	r3, [r7, #14]
  if(compare>849){
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	f240 3251 	movw	r2, #849	; 0x351
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d902      	bls.n	8004fe0 <Set_DutyTIM8+0x58>
    compare = 849;
 8004fda:	f240 3351 	movw	r3, #849	; 0x351
 8004fde:	81fb      	strh	r3, [r7, #14]
  }
  LL_TIM_OC_SetCompareCH3(TIM8,compare);
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4807      	ldr	r0, [pc, #28]	; (8005004 <Set_DutyTIM8+0x7c>)
 8004fe6:	f7ff fbe9 	bl	80047bc <LL_TIM_OC_SetCompareCH3>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	408a8800 	.word	0x408a8800
 8005000:	408f4000 	.word	0x408f4000
 8005004:	40013400 	.word	0x40013400

08005008 <LL_DMA_SetDataTransferDirection>:
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <LL_DMA_SetDataTransferDirection+0x4c>)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502c:	f023 0310 	bic.w	r3, r3, #16
 8005030:	4908      	ldr	r1, [pc, #32]	; (8005054 <LL_DMA_SetDataTransferDirection+0x4c>)
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	440a      	add	r2, r1
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	4611      	mov	r1, r2
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	4611      	mov	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	080197e4 	.word	0x080197e4

08005058 <LL_DMA_SetMode>:
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005068:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <LL_DMA_SetMode+0x48>)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 0220 	bic.w	r2, r3, #32
 800507c:	4908      	ldr	r1, [pc, #32]	; (80050a0 <LL_DMA_SetMode+0x48>)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	440b      	add	r3, r1
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	440b      	add	r3, r1
 800508a:	4619      	mov	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	080197e4 	.word	0x080197e4

080050a4 <LL_DMA_SetPeriphIncMode>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <LL_DMA_SetPeriphIncMode+0x48>)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4413      	add	r3, r2
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050c8:	4908      	ldr	r1, [pc, #32]	; (80050ec <LL_DMA_SetPeriphIncMode+0x48>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	440b      	add	r3, r1
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	440b      	add	r3, r1
 80050d6:	4619      	mov	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	080197e4 	.word	0x080197e4

080050f0 <LL_DMA_SetMemoryIncMode>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005100:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <LL_DMA_SetMemoryIncMode+0x48>)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005114:	4908      	ldr	r1, [pc, #32]	; (8005138 <LL_DMA_SetMemoryIncMode+0x48>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	440b      	add	r3, r1
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	440b      	add	r3, r1
 8005122:	4619      	mov	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	080197e4 	.word	0x080197e4

0800513c <LL_DMA_SetPeriphSize>:
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <LL_DMA_SetPeriphSize+0x48>)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	4908      	ldr	r1, [pc, #32]	; (8005184 <LL_DMA_SetPeriphSize+0x48>)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	440b      	add	r3, r1
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	4619      	mov	r1, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	440b      	add	r3, r1
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	080197e4 	.word	0x080197e4

08005188 <LL_DMA_SetMemorySize>:
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <LL_DMA_SetMemorySize+0x48>)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ac:	4908      	ldr	r1, [pc, #32]	; (80051d0 <LL_DMA_SetMemorySize+0x48>)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	440b      	add	r3, r1
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	440b      	add	r3, r1
 80051ba:	4619      	mov	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	080197e4 	.word	0x080197e4

080051d4 <LL_DMA_SetChannelPriorityLevel>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f8:	4908      	ldr	r1, [pc, #32]	; (800521c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	440b      	add	r3, r1
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	4619      	mov	r1, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	440b      	add	r3, r1
 8005206:	4619      	mov	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	080197e4 	.word	0x080197e4

08005220 <LL_DMA_SetPeriphRequest>:
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	0a9b      	lsrs	r3, r3, #10
 8005230:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005234:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005248:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800525e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_AHB2_GRP1_EnableClock>:
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800527c:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800527e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4313      	orrs	r3, r2
 8005286:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800528a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40021000 	.word	0x40021000

080052a4 <LL_APB2_GRP1_EnableClock>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052b0:	4907      	ldr	r1, [pc, #28]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80052ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4013      	ands	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40021000 	.word	0x40021000

080052d4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f043 0201 	orr.w	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	075b      	lsls	r3, r3, #29
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	065b      	lsls	r3, r3, #25
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d101      	bne.n	80053a8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ca:	d101      	bne.n	80053d0 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d101      	bne.n	80053f8 <LL_USART_IsActiveFlag_REACK+0x1a>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <LL_USART_IsActiveFlag_REACK+0x1c>
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08e      	sub	sp, #56	; 0x38
 8005428:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800542a:	f107 0318 	add.w	r3, r7, #24
 800542e:	2220      	movs	r2, #32
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f00d ff78 	bl	8013328 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	463b      	mov	r3, r7
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	609a      	str	r2, [r3, #8]
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	611a      	str	r2, [r3, #16]
 8005446:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8005448:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800544c:	f7ff ff2a 	bl	80052a4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005450:	2001      	movs	r0, #1
 8005452:	f7ff ff0f 	bl	8005274 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800545c:	2302      	movs	r3, #2
 800545e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005460:	2300      	movs	r3, #0
 8005462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800546c:	2307      	movs	r3, #7
 800546e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005470:	463b      	mov	r3, r7
 8005472:	4619      	mov	r1, r3
 8005474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005478:	f00c fce9 	bl	8011e4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800547c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005480:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005482:	2302      	movs	r3, #2
 8005484:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005492:	2307      	movs	r3, #7
 8005494:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005496:	463b      	mov	r3, r7
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800549e:	f00c fcd6 	bl	8011e4e <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_5, LL_DMAMUX_REQ_USART1_RX);
 80054a2:	2218      	movs	r2, #24
 80054a4:	2104      	movs	r1, #4
 80054a6:	4844      	ldr	r0, [pc, #272]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054a8:	f7ff feba 	bl	8005220 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80054ac:	2200      	movs	r2, #0
 80054ae:	2104      	movs	r1, #4
 80054b0:	4841      	ldr	r0, [pc, #260]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054b2:	f7ff fda9 	bl	8005008 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2104      	movs	r1, #4
 80054ba:	483f      	ldr	r0, [pc, #252]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054bc:	f7ff fe8a 	bl	80051d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2104      	movs	r1, #4
 80054c4:	483c      	ldr	r0, [pc, #240]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054c6:	f7ff fdc7 	bl	8005058 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2104      	movs	r1, #4
 80054ce:	483a      	ldr	r0, [pc, #232]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054d0:	f7ff fde8 	bl	80050a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80054d4:	2280      	movs	r2, #128	; 0x80
 80054d6:	2104      	movs	r1, #4
 80054d8:	4837      	ldr	r0, [pc, #220]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054da:	f7ff fe09 	bl	80050f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 80054de:	2200      	movs	r2, #0
 80054e0:	2104      	movs	r1, #4
 80054e2:	4835      	ldr	r0, [pc, #212]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054e4:	f7ff fe2a 	bl	800513c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2104      	movs	r1, #4
 80054ec:	4832      	ldr	r0, [pc, #200]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054ee:	f7ff fe4b 	bl	8005188 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMAMUX_REQ_USART1_TX);
 80054f2:	2219      	movs	r2, #25
 80054f4:	2105      	movs	r1, #5
 80054f6:	4830      	ldr	r0, [pc, #192]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 80054f8:	f7ff fe92 	bl	8005220 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80054fc:	2210      	movs	r2, #16
 80054fe:	2105      	movs	r1, #5
 8005500:	482d      	ldr	r0, [pc, #180]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005502:	f7ff fd81 	bl	8005008 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8005506:	2200      	movs	r2, #0
 8005508:	2105      	movs	r1, #5
 800550a:	482b      	ldr	r0, [pc, #172]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800550c:	f7ff fe62 	bl	80051d4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8005510:	2200      	movs	r2, #0
 8005512:	2105      	movs	r1, #5
 8005514:	4828      	ldr	r0, [pc, #160]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005516:	f7ff fd9f 	bl	8005058 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800551a:	2200      	movs	r2, #0
 800551c:	2105      	movs	r1, #5
 800551e:	4826      	ldr	r0, [pc, #152]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005520:	f7ff fdc0 	bl	80050a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	2105      	movs	r1, #5
 8005528:	4823      	ldr	r0, [pc, #140]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800552a:	f7ff fde1 	bl	80050f0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800552e:	2200      	movs	r2, #0
 8005530:	2105      	movs	r1, #5
 8005532:	4821      	ldr	r0, [pc, #132]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 8005534:	f7ff fe02 	bl	800513c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8005538:	2200      	movs	r2, #0
 800553a:	2105      	movs	r1, #5
 800553c:	481e      	ldr	r0, [pc, #120]	; (80055b8 <MX_USART1_UART_Init+0x194>)
 800553e:	f7ff fe23 	bl	8005188 <LL_DMA_SetMemorySize>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8005546:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800554a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005554:	2300      	movs	r3, #0
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005558:	230c      	movs	r3, #12
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800555c:	2300      	movs	r3, #0
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005560:	2300      	movs	r3, #0
 8005562:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8005564:	f107 0318 	add.w	r3, r7, #24
 8005568:	4619      	mov	r1, r3
 800556a:	4814      	ldr	r0, [pc, #80]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800556c:	f00d fdbe 	bl	80130ec <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005570:	2100      	movs	r1, #0
 8005572:	4812      	ldr	r0, [pc, #72]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005574:	f7ff fece 	bl	8005314 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8005578:	2100      	movs	r1, #0
 800557a:	4810      	ldr	r0, [pc, #64]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800557c:	f7ff fede 	bl	800533c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8005580:	480e      	ldr	r0, [pc, #56]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005582:	f7ff feb7 	bl	80052f4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8005586:	480d      	ldr	r0, [pc, #52]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005588:	f7ff feec 	bl	8005364 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 800558c:	480b      	ldr	r0, [pc, #44]	; (80055bc <MX_USART1_UART_Init+0x198>)
 800558e:	f7ff fea1 	bl	80052d4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8005592:	bf00      	nop
 8005594:	4809      	ldr	r0, [pc, #36]	; (80055bc <MX_USART1_UART_Init+0x198>)
 8005596:	f7ff ff0e 	bl	80053b6 <LL_USART_IsActiveFlag_TEACK>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f9      	beq.n	8005594 <MX_USART1_UART_Init+0x170>
 80055a0:	4806      	ldr	r0, [pc, #24]	; (80055bc <MX_USART1_UART_Init+0x198>)
 80055a2:	f7ff ff1c 	bl	80053de <LL_USART_IsActiveFlag_REACK>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f3      	beq.n	8005594 <MX_USART1_UART_Init+0x170>
  {
  }

}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	3738      	adds	r7, #56	; 0x38
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40020000 	.word	0x40020000
 80055bc:	40013800 	.word	0x40013800

080055c0 <Communication_Initialize>:

/* USER CODE BEGIN 1 */
void Communication_Initialize(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
    setbuf(stdout,NULL);
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <Communication_Initialize+0x18>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f00e fdd1 	bl	8014174 <setbuf>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000020 	.word	0x20000020

080055dc <USART_TransmitByte>:

void USART_TransmitByte(uint8_t ch){
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	LL_USART_TransmitData8(USART1,ch);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4807      	ldr	r0, [pc, #28]	; (8005608 <USART_TransmitByte+0x2c>)
 80055ec:	f7ff ff0b 	bl	8005406 <LL_USART_TransmitData8>
	while(LL_USART_IsActiveFlag_TXE(USART1)==0);
 80055f0:	bf00      	nop
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <USART_TransmitByte+0x2c>)
 80055f4:	f7ff fecc 	bl	8005390 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f9      	beq.n	80055f2 <USART_TransmitByte+0x16>
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40013800 	.word	0x40013800

0800560c <Get_NowSpeed>:
float  			f_ErrChkAngle; 			  // ジャイロセンサのエラー検出用の角度
bool   			bl_ErrChk; 				  // ジャイロセンサのエラー検出（FALSE：検知しない、TRUE：検知する）
bool			bl_failsafe		= FALSE;	// マウスがの制御不能（TRUE：制御不能、FALSE：制御可能）


float Get_NowSpeed(void){
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
	return f_NowSpeed;
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <Get_NowSpeed+0x18>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	ee07 3a90 	vmov	s15, r3
}
 8005618:	eeb0 0a67 	vmov.f32	s0, s15
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	2000022c 	.word	0x2000022c

08005628 <Get_NowDist>:

float Get_NowDist(void){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	return f_NowDist;
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <Get_NowDist+0x18>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	ee07 3a90 	vmov	s15, r3
}
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000250 	.word	0x20000250

08005644 <Get_TrgtDist>:

float Get_TrgtDist(void){
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	return f_TrgtDist;
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <Get_TrgtDist+0x18>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	ee07 3a90 	vmov	s15, r3
}
 8005650:	eeb0 0a67 	vmov.f32	s0, s15
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	2000024c 	.word	0x2000024c

08005660 <Get_TrgtSpeed>:

float Get_TrgtSpeed(void){
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
	return f_TrgtSpeed;
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <Get_TrgtSpeed+0x18>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	ee07 3a90 	vmov	s15, r3
}
 800566c:	eeb0 0a67 	vmov.f32	s0, s15
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000230 	.word	0x20000230

0800567c <Set_TrgtSpeed>:

void Set_TrgtSpeed(float speed){
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	ed87 0a01 	vstr	s0, [r7, #4]
	f_TrgtSpeed = speed;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <Set_TrgtSpeed+0x1c>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000230 	.word	0x20000230

0800569c <Get_NowAngle>:

float Get_NowAngle(void){
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
	return f_NowAngle;
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <Get_NowAngle+0x18>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	ee07 3a90 	vmov	s15, r3
}
 80056a8:	eeb0 0a67 	vmov.f32	s0, s15
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000280 	.word	0x20000280

080056b8 <Get_TrgtAngle>:

float Get_TrgtAngle(void){
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
	return f_TrgtAngle;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <Get_TrgtAngle+0x18>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	ee07 3a90 	vmov	s15, r3
}
 80056c4:	eeb0 0a67 	vmov.f32	s0, s15
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000284 	.word	0x20000284

080056d4 <Get_TrgtAngleS>:

float Get_TrgtAngleS(void){
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
	return f_TrgtAngleS;
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <Get_TrgtAngleS+0x18>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	ee07 3a90 	vmov	s15, r3
}
 80056e0:	eeb0 0a67 	vmov.f32	s0, s15
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	2000026c 	.word	0x2000026c

080056f0 <INTC_sys>:

void INTC_sys(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	Msec_in++;					// msec
 80056f4:	4b14      	ldr	r3, [pc, #80]	; (8005748 <INTC_sys+0x58>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <INTC_sys+0x58>)
 8005700:	801a      	strh	r2, [r3, #0]
	if( Msec_in > 999 ){		// msec → sec
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <INTC_sys+0x58>)
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570c:	d309      	bcc.n	8005722 <INTC_sys+0x32>
		Msec_in  = 0;
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <INTC_sys+0x58>)
 8005710:	2200      	movs	r2, #0
 8005712:	801a      	strh	r2, [r3, #0]
		Sec_in++;
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <INTC_sys+0x5c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	3301      	adds	r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <INTC_sys+0x5c>)
 8005720:	701a      	strb	r2, [r3, #0]
	}
	if( Sec_in > 59 ){			// sec → min
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <INTC_sys+0x5c>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b3b      	cmp	r3, #59	; 0x3b
 800572a:	d909      	bls.n	8005740 <INTC_sys+0x50>
		Sec_in = 0;
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <INTC_sys+0x5c>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
		Min_in++;
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <INTC_sys+0x60>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3301      	adds	r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <INTC_sys+0x60>)
 800573e:	701a      	strb	r2, [r3, #0]
	}

	CTRL_pol();
 8005740:	f001 fc52 	bl	8006fe8 <CTRL_pol>
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000704 	.word	0x20000704
 800574c:	200002d8 	.word	0x200002d8
 8005750:	200002d0 	.word	0x200002d0

08005754 <CTRL_sta>:

void CTRL_sta( void )
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
	uc_CtrlFlag = TRUE;
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <CTRL_sta+0x14>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	20000218 	.word	0x20000218

0800576c <CTRL_stop>:

void CTRL_stop( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	uc_CtrlFlag = FALSE;
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <CTRL_stop+0x1c>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	DCM_brakeMot( DCM_R );		// ブレーキ
 8005776:	2000      	movs	r0, #0
 8005778:	f002 fab2 	bl	8007ce0 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800577c:	2001      	movs	r0, #1
 800577e:	f002 faaf 	bl	8007ce0 <DCM_brakeMot>
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000218 	.word	0x20000218

0800578c <CTRL_clrData>:

void CTRL_clrData( void )
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
	s_GyroVal		= 0;						// ジャイロ値クリア
	f_GyroNowAngle	= 0;							// ジャイロ値クリア

	/* 目標値 */
	f_TrgtSpeed		= 0;						// [速度制御]   目標移動速度 [mm/s]			（1[msec]毎に更新される）
 8005790:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <CTRL_clrData+0x68>)
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
	f_TrgtDist 		= 0;						// [距離制御]   目標移動距離				（1[msec]毎に更新される）
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <CTRL_clrData+0x6c>)
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
	f_TrgtAngleS	= 0;							// [角速度制御] 目標角速度 [rad/s]			（1[msec]毎に更新される）
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <CTRL_clrData+0x70>)
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
	f_TrgtAngle		= 0;						// [角度制御]   目標角度					（1[msec]毎に更新される）
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <CTRL_clrData+0x74>)
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	/* 制御データ */
	f_SpeedErrSum	= 0;
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <CTRL_clrData+0x78>)
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
	f_DistErrSum 	= 0;						// [距離制御]   距離積分制御のサム値			（1[msec]毎に更新される）
 80057b8:	4b13      	ldr	r3, [pc, #76]	; (8005808 <CTRL_clrData+0x7c>)
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
	f_AngleSErrSum	= 0;
 80057c0:	4b12      	ldr	r3, [pc, #72]	; (800580c <CTRL_clrData+0x80>)
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
	f_AngleErrSum 	= 0;						// [角度制御]   角度積分制御のサム値			（1[msec]毎に更新される）
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <CTRL_clrData+0x84>)
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
	f_ErrSpeedBuf	= 0;
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <CTRL_clrData+0x88>)
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
	f_ErrDistBuf	= 0;						// [壁制御]     距離センサーエラー値のバッファ		（1[msec]毎に更新される）
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <CTRL_clrData+0x8c>)
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
	f_ErrAngleSBuf  = 0;
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <CTRL_clrData+0x90>)
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000230 	.word	0x20000230
 80057f8:	2000024c 	.word	0x2000024c
 80057fc:	2000026c 	.word	0x2000026c
 8005800:	20000284 	.word	0x20000284
 8005804:	20000238 	.word	0x20000238
 8005808:	2000025c 	.word	0x2000025c
 800580c:	20000274 	.word	0x20000274
 8005810:	20000288 	.word	0x20000288
 8005814:	20000234 	.word	0x20000234
 8005818:	20000290 	.word	0x20000290
 800581c:	20000270 	.word	0x20000270

08005820 <CTRL_clrNowData>:

void CTRL_clrNowData(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
	ENC_setref();
 8005824:	f002 fc0a 	bl	800803c <ENC_setref>
	l_CntR			= 0;						// カウンタクリア
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <CTRL_clrNowData+0x50>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
	l_CntL			= 0;						// カウンタクリア
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <CTRL_clrNowData+0x54>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

	/* 現在値 */
	f_NowDist 		= 0;						// 移動距離リセット
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <CTRL_clrNowData+0x58>)
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
	f_NowDistR 		= 0;
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <CTRL_clrNowData+0x5c>)
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
	f_NowDistL 		= 0;
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <CTRL_clrNowData+0x60>)
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
	f_NowSpeed		= 0;						// [速度制御]   現在の速度 [mm/s]			（1[msec]毎に更新される）
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <CTRL_clrNowData+0x64>)
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
	f_NowAngle		= 0;						// [角度制御]   現在角度					（1[msec]毎に更新される）
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <CTRL_clrNowData+0x68>)
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
	s_GyroVal		= 0;						// ジャイロ値クリア
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <CTRL_clrNowData+0x6c>)
 800585e:	2200      	movs	r2, #0
 8005860:	801a      	strh	r2, [r3, #0]
	f_GyroNowAngle	= 0;							// ジャイロ値クリア
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <CTRL_clrNowData+0x70>)
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000fc0 	.word	0x20000fc0
 8005874:	20000fbc 	.word	0x20000fbc
 8005878:	20000250 	.word	0x20000250
 800587c:	20000254 	.word	0x20000254
 8005880:	20000258 	.word	0x20000258
 8005884:	2000022c 	.word	0x2000022c
 8005888:	20000280 	.word	0x20000280
 800588c:	200002ee 	.word	0x200002ee
 8005890:	200002cc 	.word	0x200002cc

08005894 <CTRL_setData>:

void CTRL_setData( stCTRL_DATA* p_data )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	/* 制御方法 */
	en_Type					= p_data->en_type;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <CTRL_setData+0x84>)
 80058a2:	701a      	strb	r2, [r3, #0]

	/* 速度制御 */
	f_Acc 					= p_data->f_acc;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <CTRL_setData+0x88>)
 80058aa:	6013      	str	r3, [r2, #0]
	f_BaseSpeed				= p_data->f_now;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <CTRL_setData+0x8c>)
 80058b2:	6013      	str	r3, [r2, #0]
	f_LastSpeed				= p_data->f_trgt;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <CTRL_setData+0x90>)
 80058ba:	6013      	str	r3, [r2, #0]

	/* 距離制御 */
	f_BaseDist 				= p_data->f_nowDist;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <CTRL_setData+0x94>)
 80058c2:	6013      	str	r3, [r2, #0]
	f_LastDist 				= p_data->f_dist;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	4a18      	ldr	r2, [pc, #96]	; (800592c <CTRL_setData+0x98>)
 80058ca:	6013      	str	r3, [r2, #0]

	/* 角速度制御 */
	f_AccAngleS 			= p_data->f_accAngleS;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <CTRL_setData+0x9c>)
 80058d2:	6013      	str	r3, [r2, #0]
	f_BaseAngleS			= p_data->f_nowAngleS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <CTRL_setData+0xa0>)
 80058da:	6013      	str	r3, [r2, #0]
	f_LastAngleS			= p_data->f_trgtAngleS;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <CTRL_setData+0xa4>)
 80058e2:	6013      	str	r3, [r2, #0]

	/* 角度制御 */
	f_BaseAngle 			= p_data->f_nowAngle;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	4a14      	ldr	r2, [pc, #80]	; (800593c <CTRL_setData+0xa8>)
 80058ea:	6013      	str	r3, [r2, #0]
	f_LastAngle 			= p_data->f_angle;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <CTRL_setData+0xac>)
 80058f2:	6013      	str	r3, [r2, #0]

	f_Time 					= 0;
 80058f4:	4b13      	ldr	r3, [pc, #76]	; (8005944 <CTRL_setData+0xb0>)
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
	f_TrgtTime				= p_data->f_time;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a11      	ldr	r2, [pc, #68]	; (8005948 <CTRL_setData+0xb4>)
 8005902:	6013      	str	r3, [r2, #0]

	escape_wait			= 0;
 8005904:	4b11      	ldr	r3, [pc, #68]	; (800594c <CTRL_setData+0xb8>)
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

	CTRL_sta();				// 制御開始
 800590c:	f7ff ff22 	bl	8005754 <CTRL_sta>

}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200002da 	.word	0x200002da
 800591c:	20000220 	.word	0x20000220
 8005920:	20000224 	.word	0x20000224
 8005924:	20000228 	.word	0x20000228
 8005928:	20000244 	.word	0x20000244
 800592c:	20000248 	.word	0x20000248
 8005930:	20000260 	.word	0x20000260
 8005934:	20000264 	.word	0x20000264
 8005938:	20000268 	.word	0x20000268
 800593c:	20000278 	.word	0x20000278
 8005940:	2000027c 	.word	0x2000027c
 8005944:	2000021c 	.word	0x2000021c
 8005948:	20000008 	.word	0x20000008
 800594c:	200006f4 	.word	0x200006f4

08005950 <CTRL_refNow>:

void CTRL_refNow( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
	float f_speedR		= 0;							// 右モータ現在速度 [mm/s]
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
	float f_speedL		= 0;							// 左モータ現在速度 [mm/s]
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
	float f_r 			= F_CNT2MM(l_CntR);				// 右モータの進んだ距離 [mm]
 8005962:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <CTRL_refNow+0x104>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005a58 <CTRL_refNow+0x108>
 8005972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005976:	edc7 7a01 	vstr	s15, [r7, #4]
	float f_l 			= F_CNT2MM(l_CntL);				// 左モータの進んだ距離 [mm]
 800597a:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <CTRL_refNow+0x10c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005986:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005a58 <CTRL_refNow+0x108>
 800598a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800598e:	edc7 7a00 	vstr	s15, [r7]

	/* 速度更新 */
	f_speedR = f_r * 1000.0;								// 右モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 8005992:	edd7 7a01 	vldr	s15, [r7, #4]
 8005996:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005a60 <CTRL_refNow+0x110>
 800599a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800599e:	edc7 7a03 	vstr	s15, [r7, #12]
	f_speedL = f_l * 1000.0;								// 左モータ速度 [mm/s] ( 移動距離[カウント] * 1パルスの移動量(0.0509[mm]) * 1000(msec→sec) 
 80059a2:	edd7 7a00 	vldr	s15, [r7]
 80059a6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005a60 <CTRL_refNow+0x110>
 80059aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059ae:	edc7 7a02 	vstr	s15, [r7, #8]
	f_NowSpeed  = ( f_speedR + f_speedL ) / 2;			// マウス（進行方向中心軸） [1mm/s] 
 80059b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80059b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <CTRL_refNow+0x114>)
 80059c8:	edc3 7a00 	vstr	s15, [r3]
	
	/*motor AngleS*/
	f_MotorR_AngleS	= f_speedR /(PI*TIRE_D)/GEAR_RATIO;
 80059cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80059d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005a68 <CTRL_refNow+0x118>
 80059d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80059d8:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005a6c <CTRL_refNow+0x11c>
 80059dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059e0:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <CTRL_refNow+0x120>)
 80059e2:	edc3 7a00 	vstr	s15, [r3]
	f_MotorL_AngleS = f_speedL /(PI*TIRE_D)/GEAR_RATIO;
 80059e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005a68 <CTRL_refNow+0x118>
 80059ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80059f2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005a6c <CTRL_refNow+0x11c>
 80059f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059fa:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <CTRL_refNow+0x124>)
 80059fc:	edc3 7a00 	vstr	s15, [r3]

	/* 距離更新 */
	f_NowDistR += f_r;									// カウント更新
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <CTRL_refNow+0x128>)
 8005a02:	ed93 7a00 	vldr	s14, [r3]
 8005a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <CTRL_refNow+0x128>)
 8005a10:	edc3 7a00 	vstr	s15, [r3]
	f_NowDistL += f_l;									// カウント更新
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <CTRL_refNow+0x12c>)
 8005a16:	ed93 7a00 	vldr	s14, [r3]
 8005a1a:	edd7 7a00 	vldr	s15, [r7]
 8005a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <CTRL_refNow+0x12c>)
 8005a24:	edc3 7a00 	vstr	s15, [r3]
	f_NowDist  = ( f_NowDistR + f_NowDistL ) / 2;		// 平均値更新
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <CTRL_refNow+0x128>)
 8005a2a:	ed93 7a00 	vldr	s14, [r3]
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <CTRL_refNow+0x12c>)
 8005a30:	edd3 7a00 	vldr	s15, [r3]
 8005a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <CTRL_refNow+0x130>)
 8005a42:	edc3 7a00 	vstr	s15, [r3]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000fc0 	.word	0x20000fc0
 8005a58:	372222df 	.word	0x372222df
 8005a5c:	20000fbc 	.word	0x20000fbc
 8005a60:	447a0000 	.word	0x447a0000
 8005a64:	2000022c 	.word	0x2000022c
 8005a68:	3d2222df 	.word	0x3d2222df
 8005a6c:	40666666 	.word	0x40666666
 8005a70:	2000023c 	.word	0x2000023c
 8005a74:	20000240 	.word	0x20000240
 8005a78:	20000254 	.word	0x20000254
 8005a7c:	20000258 	.word	0x20000258
 8005a80:	20000250 	.word	0x20000250
 8005a84:	00000000 	.word	0x00000000

08005a88 <CTRL_refTarget>:

void CTRL_refTarget( void )
{
 8005a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a8c:	af00      	add	r7, sp, #0
	/* mode */
	switch( en_Type ){
 8005a8e:	4ba8      	ldr	r3, [pc, #672]	; (8005d30 <CTRL_refTarget+0x2a8>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b0e      	cmp	r3, #14
 8005a94:	f200 859b 	bhi.w	80065ce <CTRL_refTarget+0xb46>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <CTRL_refTarget+0x18>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005b5b 	.word	0x08005b5b
 8005aa8:	08005b67 	.word	0x08005b67
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005b5b 	.word	0x08005b5b
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	080065cf 	.word	0x080065cf
 8005abc:	08005c1f 	.word	0x08005c1f
 8005ac0:	080065cf 	.word	0x080065cf
 8005ac4:	08005d69 	.word	0x08005d69
 8005ac8:	08005ee1 	.word	0x08005ee1
 8005acc:	08005f5b 	.word	0x08005f5b
 8005ad0:	08006181 	.word	0x08006181
 8005ad4:	0800634d 	.word	0x0800634d
 8005ad8:	08006545 	.word	0x08006545

		/* acc(straight) */
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
			if( f_TrgtSpeed < (f_LastSpeed -(f_Acc * 0.001)) ){								// 加速目標更新区間
 8005adc:	4b95      	ldr	r3, [pc, #596]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fa fd59 	bl	8000598 <__aeabi_f2d>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	460d      	mov	r5, r1
 8005aea:	4b93      	ldr	r3, [pc, #588]	; (8005d38 <CTRL_refTarget+0x2b0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fa fd52 	bl	8000598 <__aeabi_f2d>
 8005af4:	4680      	mov	r8, r0
 8005af6:	4689      	mov	r9, r1
 8005af8:	4b90      	ldr	r3, [pc, #576]	; (8005d3c <CTRL_refTarget+0x2b4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fd4b 	bl	8000598 <__aeabi_f2d>
 8005b02:	a389      	add	r3, pc, #548	; (adr r3, 8005d28 <CTRL_refTarget+0x2a0>)
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fd9e 	bl	8000648 <__aeabi_dmul>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	f7fa fbe0 	bl	80002d8 <__aeabi_dsub>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fb f804 	bl	8000b2c <__aeabi_dcmplt>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <CTRL_refTarget+0xc6>
				f_TrgtSpeed = f_BaseSpeed + f_Acc * f_Time;									// 目標速度
 8005b2a:	4b84      	ldr	r3, [pc, #528]	; (8005d3c <CTRL_refTarget+0x2b4>)
 8005b2c:	ed93 7a00 	vldr	s14, [r3]
 8005b30:	4b83      	ldr	r3, [pc, #524]	; (8005d40 <CTRL_refTarget+0x2b8>)
 8005b32:	edd3 7a00 	vldr	s15, [r3]
 8005b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b3a:	4b82      	ldr	r3, [pc, #520]	; (8005d44 <CTRL_refTarget+0x2bc>)
 8005b3c:	edd3 7a00 	vldr	s15, [r3]
 8005b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b44:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005b46:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtSpeed = f_LastSpeed;
			}
			break;
 8005b4a:	f000 bd41 	b.w	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <CTRL_refTarget+0x2b0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a78      	ldr	r2, [pc, #480]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005b54:	6013      	str	r3, [r2, #0]
			break;
 8005b56:	f000 bd3b 	b.w	80065d0 <CTRL_refTarget+0xb48>

		/* const(straight) */
		case CTRL_CONST:
		case CTRL_SKEW_CONST:
			f_TrgtSpeed = f_BaseSpeed;														// 目標速度
 8005b5a:	4b7a      	ldr	r3, [pc, #488]	; (8005d44 <CTRL_refTarget+0x2bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a75      	ldr	r2, [pc, #468]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005b60:	6013      	str	r3, [r2, #0]
			break;
 8005b62:	f000 bd35 	b.w	80065d0 <CTRL_refTarget+0xb48>

		/* dec(straight) */
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
			/* speed CTRL + position CTRL */
			if( f_TrgtSpeed > (f_LastSpeed +(f_Acc * 0.001))){								// 減速目標更新区間
 8005b66:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fa fd14 	bl	8000598 <__aeabi_f2d>
 8005b70:	4604      	mov	r4, r0
 8005b72:	460d      	mov	r5, r1
 8005b74:	4b70      	ldr	r3, [pc, #448]	; (8005d38 <CTRL_refTarget+0x2b0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fd0d 	bl	8000598 <__aeabi_f2d>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	4689      	mov	r9, r1
 8005b82:	4b6e      	ldr	r3, [pc, #440]	; (8005d3c <CTRL_refTarget+0x2b4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fa fd06 	bl	8000598 <__aeabi_f2d>
 8005b8c:	a366      	add	r3, pc, #408	; (adr r3, 8005d28 <CTRL_refTarget+0x2a0>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fd59 	bl	8000648 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa fb9d 	bl	80002dc <__adddf3>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f7fa ffdd 	bl	8000b68 <__aeabi_dcmpgt>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02a      	beq.n	8005c0a <CTRL_refTarget+0x182>
				f_TrgtSpeed = f_BaseSpeed - f_Acc * f_Time;									// 目標速度
 8005bb4:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <CTRL_refTarget+0x2bc>)
 8005bb6:	ed93 7a00 	vldr	s14, [r3]
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <CTRL_refTarget+0x2b4>)
 8005bbc:	edd3 6a00 	vldr	s13, [r3]
 8005bc0:	4b5f      	ldr	r3, [pc, #380]	; (8005d40 <CTRL_refTarget+0x2b8>)
 8005bc2:	edd3 7a00 	vldr	s15, [r3]
 8005bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bce:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005bd0:	edc3 7a00 	vstr	s15, [r3]
				f_TrgtDist  = f_BaseDist + ( f_BaseSpeed + f_TrgtSpeed ) * f_Time / 2;		// 目標距離
 8005bd4:	4b5b      	ldr	r3, [pc, #364]	; (8005d44 <CTRL_refTarget+0x2bc>)
 8005bd6:	ed93 7a00 	vldr	s14, [r3]
 8005bda:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005bdc:	edd3 7a00 	vldr	s15, [r3]
 8005be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005be4:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <CTRL_refTarget+0x2b8>)
 8005be6:	edd3 7a00 	vldr	s15, [r3]
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005bf2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005bf6:	4b54      	ldr	r3, [pc, #336]	; (8005d48 <CTRL_refTarget+0x2c0>)
 8005bf8:	edd3 7a00 	vldr	s15, [r3]
 8005bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c00:	4b52      	ldr	r3, [pc, #328]	; (8005d4c <CTRL_refTarget+0x2c4>)
 8005c02:	edc3 7a00 	vstr	s15, [r3]
			/* position CTRL */
			else{
				f_TrgtSpeed = f_LastSpeed;
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8005c06:	f000 bce3 	b.w	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtSpeed = f_LastSpeed;
 8005c0a:	4b4b      	ldr	r3, [pc, #300]	; (8005d38 <CTRL_refTarget+0x2b0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a49      	ldr	r2, [pc, #292]	; (8005d34 <CTRL_refTarget+0x2ac>)
 8005c10:	6013      	str	r3, [r2, #0]
				f_TrgtDist  = f_LastDist;													// 目標距離
 8005c12:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <CTRL_refTarget+0x2c8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a4d      	ldr	r2, [pc, #308]	; (8005d4c <CTRL_refTarget+0x2c4>)
 8005c18:	6013      	str	r3, [r2, #0]
			break;
 8005c1a:	f000 bcd9 	b.w	80065d0 <CTRL_refTarget+0xb48>

		/* acc(Turn) */
		case CTRL_ACC_TRUN:

			/* CCW  hidari*/
			if( f_LastAngle > 0 ){
 8005c1e:	4b4d      	ldr	r3, [pc, #308]	; (8005d54 <CTRL_refTarget+0x2cc>)
 8005c20:	edd3 7a00 	vldr	s15, [r3]
 8005c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	dd3d      	ble.n	8005caa <CTRL_refTarget+0x222>
				if ( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 8005c2e:	4b4a      	ldr	r3, [pc, #296]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fa fcb0 	bl	8000598 <__aeabi_f2d>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <CTRL_refTarget+0x2d4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fa fca9 	bl	8000598 <__aeabi_f2d>
 8005c46:	4680      	mov	r8, r0
 8005c48:	4689      	mov	r9, r1
 8005c4a:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <CTRL_refTarget+0x2d8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fca2 	bl	8000598 <__aeabi_f2d>
 8005c54:	a334      	add	r3, pc, #208	; (adr r3, 8005d28 <CTRL_refTarget+0x2a0>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f7fa fcf5 	bl	8000648 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4640      	mov	r0, r8
 8005c64:	4649      	mov	r1, r9
 8005c66:	f7fa fb37 	bl	80002d8 <__aeabi_dsub>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <CTRL_refTarget+0x216>
					f_TrgtAngleS = 0.0 + f_AccAngleS * f_Time;									// 目標角速度
 8005c7c:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <CTRL_refTarget+0x2d8>)
 8005c7e:	ed93 7a00 	vldr	s14, [r3]
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <CTRL_refTarget+0x2b8>)
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005d64 <CTRL_refTarget+0x2dc>
 8005c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c94:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005c96:	edc3 7a00 	vstr	s15, [r3]
				}
				else{
					f_TrgtAngleS = f_LastAngleS;
				}
			}
			break;
 8005c9a:	f000 bc99 	b.w	80065d0 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <CTRL_refTarget+0x2d4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005ca4:	6013      	str	r3, [r2, #0]
			break;
 8005ca6:	f000 bc93 	b.w	80065d0 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){
 8005caa:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fc72 	bl	8000598 <__aeabi_f2d>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <CTRL_refTarget+0x2d4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fa fc6b 	bl	8000598 <__aeabi_f2d>
 8005cc2:	4680      	mov	r8, r0
 8005cc4:	4689      	mov	r9, r1
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <CTRL_refTarget+0x2d8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fc64 	bl	8000598 <__aeabi_f2d>
 8005cd0:	a315      	add	r3, pc, #84	; (adr r3, 8005d28 <CTRL_refTarget+0x2a0>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa fcb7 	bl	8000648 <__aeabi_dmul>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4640      	mov	r0, r8
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	f7fa fafb 	bl	80002dc <__adddf3>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4620      	mov	r0, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	f7fa ff3b 	bl	8000b68 <__aeabi_dcmpgt>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <CTRL_refTarget+0x292>
				f_TrgtAngleS = 0.0 - f_AccAngleS * f_Time;									// 目標角速度
 8005cf8:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <CTRL_refTarget+0x2d8>)
 8005cfa:	ed93 7a00 	vldr	s14, [r3]
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <CTRL_refTarget+0x2b8>)
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005d64 <CTRL_refTarget+0x2dc>
 8005d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005d12:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005d16:	f000 bc5b 	b.w	80065d0 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <CTRL_refTarget+0x2d4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a0e      	ldr	r2, [pc, #56]	; (8005d58 <CTRL_refTarget+0x2d0>)
 8005d20:	6013      	str	r3, [r2, #0]
			break;
 8005d22:	f000 bc55 	b.w	80065d0 <CTRL_refTarget+0xb48>
 8005d26:	bf00      	nop
 8005d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d2c:	3f50624d 	.word	0x3f50624d
 8005d30:	200002da 	.word	0x200002da
 8005d34:	20000230 	.word	0x20000230
 8005d38:	20000228 	.word	0x20000228
 8005d3c:	20000220 	.word	0x20000220
 8005d40:	2000021c 	.word	0x2000021c
 8005d44:	20000224 	.word	0x20000224
 8005d48:	20000244 	.word	0x20000244
 8005d4c:	2000024c 	.word	0x2000024c
 8005d50:	20000248 	.word	0x20000248
 8005d54:	2000027c 	.word	0x2000027c
 8005d58:	2000026c 	.word	0x2000026c
 8005d5c:	20000268 	.word	0x20000268
 8005d60:	20000260 	.word	0x20000260
 8005d64:	00000000 	.word	0x00000000
			break;

		/* dec(Turn) */
		case CTRL_DEC_TRUN:
			/* CCW */
			if( f_LastAngle > 0 ){
 8005d68:	4baf      	ldr	r3, [pc, #700]	; (8006028 <CTRL_refTarget+0x5a0>)
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	dd59      	ble.n	8005e2c <CTRL_refTarget+0x3a4>

				/* Angle speed CTRL + Angle CTRL */
				if( f_TrgtAngleS > (f_LastAngleS +(f_AccAngleS * 0.001)) ){						// 減速目標更新区間
 8005d78:	4bac      	ldr	r3, [pc, #688]	; (800602c <CTRL_refTarget+0x5a4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fc0b 	bl	8000598 <__aeabi_f2d>
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	4baa      	ldr	r3, [pc, #680]	; (8006030 <CTRL_refTarget+0x5a8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fc04 	bl	8000598 <__aeabi_f2d>
 8005d90:	4680      	mov	r8, r0
 8005d92:	4689      	mov	r9, r1
 8005d94:	4ba7      	ldr	r3, [pc, #668]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fa fbfd 	bl	8000598 <__aeabi_f2d>
 8005d9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006020 <CTRL_refTarget+0x598>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fc50 	bl	8000648 <__aeabi_dmul>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fa94 	bl	80002dc <__adddf3>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fed4 	bl	8000b68 <__aeabi_dcmpgt>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d029      	beq.n	8005e1a <CTRL_refTarget+0x392>
					f_TrgtAngleS = f_BaseAngleS - f_AccAngleS * f_Time;							// 目標角速度
 8005dc6:	4b9c      	ldr	r3, [pc, #624]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005dc8:	ed93 7a00 	vldr	s14, [r3]
 8005dcc:	4b99      	ldr	r3, [pc, #612]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005dce:	edd3 6a00 	vldr	s13, [r3]
 8005dd2:	4b9a      	ldr	r3, [pc, #616]	; (800603c <CTRL_refTarget+0x5b4>)
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de0:	4b92      	ldr	r3, [pc, #584]	; (800602c <CTRL_refTarget+0x5a4>)
 8005de2:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005de6:	4b94      	ldr	r3, [pc, #592]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005de8:	ed93 7a00 	vldr	s14, [r3]
 8005dec:	4b8f      	ldr	r3, [pc, #572]	; (800602c <CTRL_refTarget+0x5a4>)
 8005dee:	edd3 7a00 	vldr	s15, [r3]
 8005df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005df6:	4b91      	ldr	r3, [pc, #580]	; (800603c <CTRL_refTarget+0x5b4>)
 8005df8:	edd3 7a00 	vldr	s15, [r3]
 8005dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e08:	4b8d      	ldr	r3, [pc, #564]	; (8006040 <CTRL_refTarget+0x5b8>)
 8005e0a:	edd3 7a00 	vldr	s15, [r3]
 8005e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e12:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <CTRL_refTarget+0x5bc>)
 8005e14:	edc3 7a00 	vstr	s15, [r3]
				else{
					f_TrgtAngleS = f_LastAngleS;
					f_TrgtAngle  = f_LastAngle;													// 目標距離
				}
			}
			break;
 8005e18:	e3da      	b.n	80065d0 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005e1a:	4b85      	ldr	r3, [pc, #532]	; (8006030 <CTRL_refTarget+0x5a8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a83      	ldr	r2, [pc, #524]	; (800602c <CTRL_refTarget+0x5a4>)
 8005e20:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005e22:	4b81      	ldr	r3, [pc, #516]	; (8006028 <CTRL_refTarget+0x5a0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a87      	ldr	r2, [pc, #540]	; (8006044 <CTRL_refTarget+0x5bc>)
 8005e28:	6013      	str	r3, [r2, #0]
			break;
 8005e2a:	e3d1      	b.n	80065d0 <CTRL_refTarget+0xb48>
				if( f_TrgtAngleS < (f_LastAngleS -(f_AccAngleS * 0.001))){						// 減速目標更新区間
 8005e2c:	4b7f      	ldr	r3, [pc, #508]	; (800602c <CTRL_refTarget+0x5a4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa fbb1 	bl	8000598 <__aeabi_f2d>
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4b7d      	ldr	r3, [pc, #500]	; (8006030 <CTRL_refTarget+0x5a8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fa fbaa 	bl	8000598 <__aeabi_f2d>
 8005e44:	4680      	mov	r8, r0
 8005e46:	4689      	mov	r9, r1
 8005e48:	4b7a      	ldr	r3, [pc, #488]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fa fba3 	bl	8000598 <__aeabi_f2d>
 8005e52:	a373      	add	r3, pc, #460	; (adr r3, 8006020 <CTRL_refTarget+0x598>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa fbf6 	bl	8000648 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4640      	mov	r0, r8
 8005e62:	4649      	mov	r1, r9
 8005e64:	f7fa fa38 	bl	80002d8 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fe5c 	bl	8000b2c <__aeabi_dcmplt>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d029      	beq.n	8005ece <CTRL_refTarget+0x446>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8005e7a:	4b6e      	ldr	r3, [pc, #440]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005e7c:	ed93 7a00 	vldr	s14, [r3]
 8005e80:	4b6e      	ldr	r3, [pc, #440]	; (800603c <CTRL_refTarget+0x5b4>)
 8005e82:	edd3 7a00 	vldr	s15, [r3]
 8005e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e8a:	4b6b      	ldr	r3, [pc, #428]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005e8c:	edd3 7a00 	vldr	s15, [r3]
 8005e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e94:	4b65      	ldr	r3, [pc, #404]	; (800602c <CTRL_refTarget+0x5a4>)
 8005e96:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005e9a:	4b67      	ldr	r3, [pc, #412]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005e9c:	ed93 7a00 	vldr	s14, [r3]
 8005ea0:	4b62      	ldr	r3, [pc, #392]	; (800602c <CTRL_refTarget+0x5a4>)
 8005ea2:	edd3 7a00 	vldr	s15, [r3]
 8005ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005eaa:	4b64      	ldr	r3, [pc, #400]	; (800603c <CTRL_refTarget+0x5b4>)
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005eb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ebc:	4b60      	ldr	r3, [pc, #384]	; (8006040 <CTRL_refTarget+0x5b8>)
 8005ebe:	edd3 7a00 	vldr	s15, [r3]
 8005ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec6:	4b5f      	ldr	r3, [pc, #380]	; (8006044 <CTRL_refTarget+0x5bc>)
 8005ec8:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005ecc:	e380      	b.n	80065d0 <CTRL_refTarget+0xb48>
					f_TrgtAngleS = f_LastAngleS;
 8005ece:	4b58      	ldr	r3, [pc, #352]	; (8006030 <CTRL_refTarget+0x5a8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a56      	ldr	r2, [pc, #344]	; (800602c <CTRL_refTarget+0x5a4>)
 8005ed4:	6013      	str	r3, [r2, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8005ed6:	4b54      	ldr	r3, [pc, #336]	; (8006028 <CTRL_refTarget+0x5a0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a5a      	ldr	r2, [pc, #360]	; (8006044 <CTRL_refTarget+0x5bc>)
 8005edc:	6013      	str	r3, [r2, #0]
			break;
 8005ede:	e377      	b.n	80065d0 <CTRL_refTarget+0xb48>

		/* entry(sura) */
		case CTRL_ENTRY_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8005ee0:	4b59      	ldr	r3, [pc, #356]	; (8006048 <CTRL_refTarget+0x5c0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a59      	ldr	r2, [pc, #356]	; (800604c <CTRL_refTarget+0x5c4>)
 8005ee6:	6013      	str	r3, [r2, #0]
			if( f_TrgtDist <= f_LastDist - (f_TrgtSpeed * 0.001) ){
 8005ee8:	4b59      	ldr	r3, [pc, #356]	; (8006050 <CTRL_refTarget+0x5c8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa fb53 	bl	8000598 <__aeabi_f2d>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	4b57      	ldr	r3, [pc, #348]	; (8006054 <CTRL_refTarget+0x5cc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa fb4c 	bl	8000598 <__aeabi_f2d>
 8005f00:	4680      	mov	r8, r0
 8005f02:	4689      	mov	r9, r1
 8005f04:	4b51      	ldr	r3, [pc, #324]	; (800604c <CTRL_refTarget+0x5c4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa fb45 	bl	8000598 <__aeabi_f2d>
 8005f0e:	a344      	add	r3, pc, #272	; (adr r3, 8006020 <CTRL_refTarget+0x598>)
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f7fa fb98 	bl	8000648 <__aeabi_dmul>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa f9da 	bl	80002d8 <__aeabi_dsub>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4620      	mov	r0, r4
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	f7fa fe08 	bl	8000b40 <__aeabi_dcmple>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d100      	bne.n	8005f38 <CTRL_refTarget+0x4b0>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
			}
			break;
 8005f36:	e34b      	b.n	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 8005f38:	4b44      	ldr	r3, [pc, #272]	; (800604c <CTRL_refTarget+0x5c4>)
 8005f3a:	ed93 7a00 	vldr	s14, [r3]
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <CTRL_refTarget+0x5b4>)
 8005f40:	edd3 7a00 	vldr	s15, [r3]
 8005f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f48:	4b43      	ldr	r3, [pc, #268]	; (8006058 <CTRL_refTarget+0x5d0>)
 8005f4a:	edd3 7a00 	vldr	s15, [r3]
 8005f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <CTRL_refTarget+0x5c8>)
 8005f54:	edc3 7a00 	vstr	s15, [r3]
			break;
 8005f58:	e33a      	b.n	80065d0 <CTRL_refTarget+0xb48>

		/* acc(スラローム) */
		case CTRL_ACC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <CTRL_refTarget+0x5c0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3b      	ldr	r2, [pc, #236]	; (800604c <CTRL_refTarget+0x5c4>)
 8005f60:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8005f62:	4b31      	ldr	r3, [pc, #196]	; (8006028 <CTRL_refTarget+0x5a0>)
 8005f64:	edd3 7a00 	vldr	s15, [r3]
 8005f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	dd74      	ble.n	800605c <CTRL_refTarget+0x5d4>
				if( f_TrgtAngleS < (f_LastAngleS +(f_AccAngleS * 0.001))){
 8005f72:	4b2e      	ldr	r3, [pc, #184]	; (800602c <CTRL_refTarget+0x5a4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fa fb0e 	bl	8000598 <__aeabi_f2d>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
 8005f80:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <CTRL_refTarget+0x5a8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fa fb07 	bl	8000598 <__aeabi_f2d>
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fa fb00 	bl	8000598 <__aeabi_f2d>
 8005f98:	a321      	add	r3, pc, #132	; (adr r3, 8006020 <CTRL_refTarget+0x598>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fb53 	bl	8000648 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f997 	bl	80002dc <__adddf3>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa fdb9 	bl	8000b2c <__aeabi_dcmplt>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d029      	beq.n	8006014 <CTRL_refTarget+0x58c>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8005fc0:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <CTRL_refTarget+0x5ac>)
 8005fc2:	ed93 7a00 	vldr	s14, [r3]
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <CTRL_refTarget+0x5b4>)
 8005fc8:	edd3 7a00 	vldr	s15, [r3]
 8005fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005fd2:	edd3 7a00 	vldr	s15, [r3]
 8005fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <CTRL_refTarget+0x5a4>)
 8005fdc:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8005fe0:	4b15      	ldr	r3, [pc, #84]	; (8006038 <CTRL_refTarget+0x5b0>)
 8005fe2:	ed93 7a00 	vldr	s14, [r3]
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <CTRL_refTarget+0x5a4>)
 8005fe8:	edd3 7a00 	vldr	s15, [r3]
 8005fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <CTRL_refTarget+0x5b4>)
 8005ff2:	edd3 7a00 	vldr	s15, [r3]
 8005ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005ffe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <CTRL_refTarget+0x5b8>)
 8006004:	edd3 7a00 	vldr	s15, [r3]
 8006008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <CTRL_refTarget+0x5bc>)
 800600e:	edc3 7a00 	vstr	s15, [r3]
 8006012:	e078      	b.n	8006106 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <CTRL_refTarget+0x5a0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <CTRL_refTarget+0x5bc>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e073      	b.n	8006106 <CTRL_refTarget+0x67e>
 800601e:	bf00      	nop
 8006020:	d2f1a9fc 	.word	0xd2f1a9fc
 8006024:	3f50624d 	.word	0x3f50624d
 8006028:	2000027c 	.word	0x2000027c
 800602c:	2000026c 	.word	0x2000026c
 8006030:	20000268 	.word	0x20000268
 8006034:	20000260 	.word	0x20000260
 8006038:	20000264 	.word	0x20000264
 800603c:	2000021c 	.word	0x2000021c
 8006040:	20000278 	.word	0x20000278
 8006044:	20000284 	.word	0x20000284
 8006048:	20000224 	.word	0x20000224
 800604c:	20000230 	.word	0x20000230
 8006050:	2000024c 	.word	0x2000024c
 8006054:	20000248 	.word	0x20000248
 8006058:	20000244 	.word	0x20000244
				}
			}
			/* CW */
			else{
				if( f_TrgtAngleS > (f_LastAngleS -(f_AccAngleS * 0.001)) ){
 800605c:	4bae      	ldr	r3, [pc, #696]	; (8006318 <CTRL_refTarget+0x890>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa fa99 	bl	8000598 <__aeabi_f2d>
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	4bac      	ldr	r3, [pc, #688]	; (800631c <CTRL_refTarget+0x894>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fa fa92 	bl	8000598 <__aeabi_f2d>
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	4ba9      	ldr	r3, [pc, #676]	; (8006320 <CTRL_refTarget+0x898>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa fa8b 	bl	8000598 <__aeabi_f2d>
 8006082:	a3a3      	add	r3, pc, #652	; (adr r3, 8006310 <CTRL_refTarget+0x888>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa fade 	bl	8000648 <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4640      	mov	r0, r8
 8006092:	4649      	mov	r1, r9
 8006094:	f7fa f920 	bl	80002d8 <__aeabi_dsub>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa fd62 	bl	8000b68 <__aeabi_dcmpgt>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d029      	beq.n	80060fe <CTRL_refTarget+0x676>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 80060aa:	4b9d      	ldr	r3, [pc, #628]	; (8006320 <CTRL_refTarget+0x898>)
 80060ac:	ed93 7a00 	vldr	s14, [r3]
 80060b0:	4b9c      	ldr	r3, [pc, #624]	; (8006324 <CTRL_refTarget+0x89c>)
 80060b2:	edd3 7a00 	vldr	s15, [r3]
 80060b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ba:	4b9b      	ldr	r3, [pc, #620]	; (8006328 <CTRL_refTarget+0x8a0>)
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c4:	4b94      	ldr	r3, [pc, #592]	; (8006318 <CTRL_refTarget+0x890>)
 80060c6:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 80060ca:	4b97      	ldr	r3, [pc, #604]	; (8006328 <CTRL_refTarget+0x8a0>)
 80060cc:	ed93 7a00 	vldr	s14, [r3]
 80060d0:	4b91      	ldr	r3, [pc, #580]	; (8006318 <CTRL_refTarget+0x890>)
 80060d2:	edd3 7a00 	vldr	s15, [r3]
 80060d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060da:	4b92      	ldr	r3, [pc, #584]	; (8006324 <CTRL_refTarget+0x89c>)
 80060dc:	edd3 7a00 	vldr	s15, [r3]
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80060e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060ec:	4b8f      	ldr	r3, [pc, #572]	; (800632c <CTRL_refTarget+0x8a4>)
 80060ee:	edd3 7a00 	vldr	s15, [r3]
 80060f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f6:	4b8e      	ldr	r3, [pc, #568]	; (8006330 <CTRL_refTarget+0x8a8>)
 80060f8:	edc3 7a00 	vstr	s15, [r3]
 80060fc:	e003      	b.n	8006106 <CTRL_refTarget+0x67e>
//					printf("%5.2f %5.2f %5.4f %5.2f %5.2f\n\r",f_TrgtAngleS,f_AccAngleS,f_Time,f_TrgtAngle,f_LastAngleS);
				}
				else{
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80060fe:	4b8d      	ldr	r3, [pc, #564]	; (8006334 <CTRL_refTarget+0x8ac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a8b      	ldr	r2, [pc, #556]	; (8006330 <CTRL_refTarget+0x8a8>)
 8006104:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8006106:	4b8c      	ldr	r3, [pc, #560]	; (8006338 <CTRL_refTarget+0x8b0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fa fa44 	bl	8000598 <__aeabi_f2d>
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
 8006114:	4b89      	ldr	r3, [pc, #548]	; (800633c <CTRL_refTarget+0x8b4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa fa3d 	bl	8000598 <__aeabi_f2d>
 800611e:	4680      	mov	r8, r0
 8006120:	4689      	mov	r9, r1
 8006122:	4b87      	ldr	r3, [pc, #540]	; (8006340 <CTRL_refTarget+0x8b8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa fa36 	bl	8000598 <__aeabi_f2d>
 800612c:	a378      	add	r3, pc, #480	; (adr r3, 8006310 <CTRL_refTarget+0x888>)
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f7fa fa89 	bl	8000648 <__aeabi_dmul>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa f8cb 	bl	80002d8 <__aeabi_dsub>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa fd0d 	bl	8000b68 <__aeabi_dcmpgt>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d010      	beq.n	8006176 <CTRL_refTarget+0x6ee>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 8006154:	4b7a      	ldr	r3, [pc, #488]	; (8006340 <CTRL_refTarget+0x8b8>)
 8006156:	ed93 7a00 	vldr	s14, [r3]
 800615a:	4b72      	ldr	r3, [pc, #456]	; (8006324 <CTRL_refTarget+0x89c>)
 800615c:	edd3 7a00 	vldr	s15, [r3]
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	4b77      	ldr	r3, [pc, #476]	; (8006344 <CTRL_refTarget+0x8bc>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800616e:	4b73      	ldr	r3, [pc, #460]	; (800633c <CTRL_refTarget+0x8b4>)
 8006170:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006174:	e22c      	b.n	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006176:	4b70      	ldr	r3, [pc, #448]	; (8006338 <CTRL_refTarget+0x8b0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a70      	ldr	r2, [pc, #448]	; (800633c <CTRL_refTarget+0x8b4>)
 800617c:	6013      	str	r3, [r2, #0]
			break;
 800617e:	e227      	b.n	80065d0 <CTRL_refTarget+0xb48>

		/* const(sura) */
		case CTRL_CONST_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8006180:	4b71      	ldr	r3, [pc, #452]	; (8006348 <CTRL_refTarget+0x8c0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a6e      	ldr	r2, [pc, #440]	; (8006340 <CTRL_refTarget+0x8b8>)
 8006186:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = f_BaseAngleS;							// 目標角速度
 8006188:	4b67      	ldr	r3, [pc, #412]	; (8006328 <CTRL_refTarget+0x8a0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a62      	ldr	r2, [pc, #392]	; (8006318 <CTRL_refTarget+0x890>)
 800618e:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006190:	4b68      	ldr	r3, [pc, #416]	; (8006334 <CTRL_refTarget+0x8ac>)
 8006192:	edd3 7a00 	vldr	s15, [r3]
 8006196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	dd3c      	ble.n	800621a <CTRL_refTarget+0x792>
				if( f_TrgtAngle < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 80061a0:	4b63      	ldr	r3, [pc, #396]	; (8006330 <CTRL_refTarget+0x8a8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fa f9f7 	bl	8000598 <__aeabi_f2d>
 80061aa:	4604      	mov	r4, r0
 80061ac:	460d      	mov	r5, r1
 80061ae:	4b61      	ldr	r3, [pc, #388]	; (8006334 <CTRL_refTarget+0x8ac>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fa f9f0 	bl	8000598 <__aeabi_f2d>
 80061b8:	4680      	mov	r8, r0
 80061ba:	4689      	mov	r9, r1
 80061bc:	4b58      	ldr	r3, [pc, #352]	; (8006320 <CTRL_refTarget+0x898>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa f9e9 	bl	8000598 <__aeabi_f2d>
 80061c6:	a352      	add	r3, pc, #328	; (adr r3, 8006310 <CTRL_refTarget+0x888>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa fa3c 	bl	8000648 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4640      	mov	r0, r8
 80061d6:	4649      	mov	r1, r9
 80061d8:	f7fa f880 	bl	80002dc <__adddf3>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	f7fa fca2 	bl	8000b2c <__aeabi_dcmplt>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d010      	beq.n	8006210 <CTRL_refTarget+0x788>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 80061ee:	4b4a      	ldr	r3, [pc, #296]	; (8006318 <CTRL_refTarget+0x890>)
 80061f0:	ed93 7a00 	vldr	s14, [r3]
 80061f4:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <CTRL_refTarget+0x89c>)
 80061f6:	edd3 7a00 	vldr	s15, [r3]
 80061fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061fe:	4b4b      	ldr	r3, [pc, #300]	; (800632c <CTRL_refTarget+0x8a4>)
 8006200:	edd3 7a00 	vldr	s15, [r3]
 8006204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006208:	4b49      	ldr	r3, [pc, #292]	; (8006330 <CTRL_refTarget+0x8a8>)
 800620a:	edc3 7a00 	vstr	s15, [r3]
 800620e:	e040      	b.n	8006292 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 8006210:	4b48      	ldr	r3, [pc, #288]	; (8006334 <CTRL_refTarget+0x8ac>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a46      	ldr	r2, [pc, #280]	; (8006330 <CTRL_refTarget+0x8a8>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e03b      	b.n	8006292 <CTRL_refTarget+0x80a>
				}
			}
			/* CW */
			else{
				if( f_TrgtAngle > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 800621a:	4b45      	ldr	r3, [pc, #276]	; (8006330 <CTRL_refTarget+0x8a8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fa f9ba 	bl	8000598 <__aeabi_f2d>
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	4b42      	ldr	r3, [pc, #264]	; (8006334 <CTRL_refTarget+0x8ac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa f9b3 	bl	8000598 <__aeabi_f2d>
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	4b3a      	ldr	r3, [pc, #232]	; (8006320 <CTRL_refTarget+0x898>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa f9ac 	bl	8000598 <__aeabi_f2d>
 8006240:	a333      	add	r3, pc, #204	; (adr r3, 8006310 <CTRL_refTarget+0x888>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9ff 	bl	8000648 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4640      	mov	r0, r8
 8006250:	4649      	mov	r1, r9
 8006252:	f7fa f841 	bl	80002d8 <__aeabi_dsub>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <CTRL_refTarget+0x802>
					f_TrgtAngle  = f_BaseAngle + f_TrgtAngleS * f_Time;			// 目標角度
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <CTRL_refTarget+0x890>)
 800626a:	ed93 7a00 	vldr	s14, [r3]
 800626e:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <CTRL_refTarget+0x89c>)
 8006270:	edd3 7a00 	vldr	s15, [r3]
 8006274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006278:	4b2c      	ldr	r3, [pc, #176]	; (800632c <CTRL_refTarget+0x8a4>)
 800627a:	edd3 7a00 	vldr	s15, [r3]
 800627e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006282:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <CTRL_refTarget+0x8a8>)
 8006284:	edc3 7a00 	vstr	s15, [r3]
 8006288:	e003      	b.n	8006292 <CTRL_refTarget+0x80a>
				}
				else{
					f_TrgtAngle  = f_LastAngle;									// 目標角度
 800628a:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <CTRL_refTarget+0x8ac>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a28      	ldr	r2, [pc, #160]	; (8006330 <CTRL_refTarget+0x8a8>)
 8006290:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 8006292:	4b29      	ldr	r3, [pc, #164]	; (8006338 <CTRL_refTarget+0x8b0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa f97e 	bl	8000598 <__aeabi_f2d>
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	4b26      	ldr	r3, [pc, #152]	; (800633c <CTRL_refTarget+0x8b4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fa f977 	bl	8000598 <__aeabi_f2d>
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <CTRL_refTarget+0x8b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fa f970 	bl	8000598 <__aeabi_f2d>
 80062b8:	a315      	add	r3, pc, #84	; (adr r3, 8006310 <CTRL_refTarget+0x888>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f7fa f9c3 	bl	8000648 <__aeabi_dmul>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4640      	mov	r0, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	f7fa f805 	bl	80002d8 <__aeabi_dsub>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa fc47 	bl	8000b68 <__aeabi_dcmpgt>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <CTRL_refTarget+0x87a>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 80062e0:	4b17      	ldr	r3, [pc, #92]	; (8006340 <CTRL_refTarget+0x8b8>)
 80062e2:	ed93 7a00 	vldr	s14, [r3]
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <CTRL_refTarget+0x89c>)
 80062e8:	edd3 7a00 	vldr	s15, [r3]
 80062ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <CTRL_refTarget+0x8bc>)
 80062f2:	edd3 7a00 	vldr	s15, [r3]
 80062f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <CTRL_refTarget+0x8b4>)
 80062fc:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006300:	e166      	b.n	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <CTRL_refTarget+0x8b0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0d      	ldr	r2, [pc, #52]	; (800633c <CTRL_refTarget+0x8b4>)
 8006308:	6013      	str	r3, [r2, #0]
			break;
 800630a:	e161      	b.n	80065d0 <CTRL_refTarget+0xb48>
 800630c:	f3af 8000 	nop.w
 8006310:	d2f1a9fc 	.word	0xd2f1a9fc
 8006314:	3f50624d 	.word	0x3f50624d
 8006318:	2000026c 	.word	0x2000026c
 800631c:	20000268 	.word	0x20000268
 8006320:	20000260 	.word	0x20000260
 8006324:	2000021c 	.word	0x2000021c
 8006328:	20000264 	.word	0x20000264
 800632c:	20000278 	.word	0x20000278
 8006330:	20000284 	.word	0x20000284
 8006334:	2000027c 	.word	0x2000027c
 8006338:	20000248 	.word	0x20000248
 800633c:	2000024c 	.word	0x2000024c
 8006340:	20000230 	.word	0x20000230
 8006344:	20000244 	.word	0x20000244
 8006348:	20000224 	.word	0x20000224

		/* dec(sura) */
		case CTRL_DEC_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 800634c:	4ba4      	ldr	r3, [pc, #656]	; (80065e0 <CTRL_refTarget+0xb58>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4aa4      	ldr	r2, [pc, #656]	; (80065e4 <CTRL_refTarget+0xb5c>)
 8006352:	6013      	str	r3, [r2, #0]

			/* CCW */
			if( f_LastAngle > 0 ){
 8006354:	4ba4      	ldr	r3, [pc, #656]	; (80065e8 <CTRL_refTarget+0xb60>)
 8006356:	edd3 7a00 	vldr	s15, [r3]
 800635a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	dd59      	ble.n	8006418 <CTRL_refTarget+0x990>
				if( f_TrgtAngleS > (f_LastAngle -(f_AccAngleS * 0.001)) ){
 8006364:	4ba1      	ldr	r3, [pc, #644]	; (80065ec <CTRL_refTarget+0xb64>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa f915 	bl	8000598 <__aeabi_f2d>
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	4b9d      	ldr	r3, [pc, #628]	; (80065e8 <CTRL_refTarget+0xb60>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fa f90e 	bl	8000598 <__aeabi_f2d>
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	4b9b      	ldr	r3, [pc, #620]	; (80065f0 <CTRL_refTarget+0xb68>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa f907 	bl	8000598 <__aeabi_f2d>
 800638a:	a393      	add	r3, pc, #588	; (adr r3, 80065d8 <CTRL_refTarget+0xb50>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7fa f95a 	bl	8000648 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7f9 ff9c 	bl	80002d8 <__aeabi_dsub>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4620      	mov	r0, r4
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7fa fbde 	bl	8000b68 <__aeabi_dcmpgt>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d029      	beq.n	8006406 <CTRL_refTarget+0x97e>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 80063b2:	4b8f      	ldr	r3, [pc, #572]	; (80065f0 <CTRL_refTarget+0xb68>)
 80063b4:	ed93 7a00 	vldr	s14, [r3]
 80063b8:	4b8e      	ldr	r3, [pc, #568]	; (80065f4 <CTRL_refTarget+0xb6c>)
 80063ba:	edd3 7a00 	vldr	s15, [r3]
 80063be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063c2:	4b8d      	ldr	r3, [pc, #564]	; (80065f8 <CTRL_refTarget+0xb70>)
 80063c4:	edd3 7a00 	vldr	s15, [r3]
 80063c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063cc:	4b87      	ldr	r3, [pc, #540]	; (80065ec <CTRL_refTarget+0xb64>)
 80063ce:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 80063d2:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <CTRL_refTarget+0xb70>)
 80063d4:	ed93 7a00 	vldr	s14, [r3]
 80063d8:	4b84      	ldr	r3, [pc, #528]	; (80065ec <CTRL_refTarget+0xb64>)
 80063da:	edd3 7a00 	vldr	s15, [r3]
 80063de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063e2:	4b84      	ldr	r3, [pc, #528]	; (80065f4 <CTRL_refTarget+0xb6c>)
 80063e4:	edd3 7a00 	vldr	s15, [r3]
 80063e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80063f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80063f4:	4b81      	ldr	r3, [pc, #516]	; (80065fc <CTRL_refTarget+0xb74>)
 80063f6:	edd3 7a00 	vldr	s15, [r3]
 80063fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063fe:	4b80      	ldr	r3, [pc, #512]	; (8006600 <CTRL_refTarget+0xb78>)
 8006400:	edc3 7a00 	vstr	s15, [r3]
 8006404:	e061      	b.n	80064ca <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 8006406:	4b79      	ldr	r3, [pc, #484]	; (80065ec <CTRL_refTarget+0xb64>)
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 800640e:	4b76      	ldr	r3, [pc, #472]	; (80065e8 <CTRL_refTarget+0xb60>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7b      	ldr	r2, [pc, #492]	; (8006600 <CTRL_refTarget+0xb78>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e058      	b.n	80064ca <CTRL_refTarget+0xa42>
				}
			}
			/*CW*/
			else{
				if( f_TrgtAngleS < (f_LastAngle +(f_AccAngleS * 0.001)) ){
 8006418:	4b74      	ldr	r3, [pc, #464]	; (80065ec <CTRL_refTarget+0xb64>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7fa f8bb 	bl	8000598 <__aeabi_f2d>
 8006422:	4604      	mov	r4, r0
 8006424:	460d      	mov	r5, r1
 8006426:	4b70      	ldr	r3, [pc, #448]	; (80065e8 <CTRL_refTarget+0xb60>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fa f8b4 	bl	8000598 <__aeabi_f2d>
 8006430:	4680      	mov	r8, r0
 8006432:	4689      	mov	r9, r1
 8006434:	4b6e      	ldr	r3, [pc, #440]	; (80065f0 <CTRL_refTarget+0xb68>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7fa f8ad 	bl	8000598 <__aeabi_f2d>
 800643e:	a366      	add	r3, pc, #408	; (adr r3, 80065d8 <CTRL_refTarget+0xb50>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa f900 	bl	8000648 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4640      	mov	r0, r8
 800644e:	4649      	mov	r1, r9
 8006450:	f7f9 ff44 	bl	80002dc <__adddf3>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7fa fb66 	bl	8000b2c <__aeabi_dcmplt>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d029      	beq.n	80064ba <CTRL_refTarget+0xa32>
					f_TrgtAngleS = f_BaseAngleS + f_AccAngleS * f_Time;							// 目標角速度
 8006466:	4b62      	ldr	r3, [pc, #392]	; (80065f0 <CTRL_refTarget+0xb68>)
 8006468:	ed93 7a00 	vldr	s14, [r3]
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <CTRL_refTarget+0xb6c>)
 800646e:	edd3 7a00 	vldr	s15, [r3]
 8006472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006476:	4b60      	ldr	r3, [pc, #384]	; (80065f8 <CTRL_refTarget+0xb70>)
 8006478:	edd3 7a00 	vldr	s15, [r3]
 800647c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006480:	4b5a      	ldr	r3, [pc, #360]	; (80065ec <CTRL_refTarget+0xb64>)
 8006482:	edc3 7a00 	vstr	s15, [r3]
					f_TrgtAngle  = f_BaseAngle + ( f_BaseAngleS + f_TrgtAngleS ) * f_Time / 2;	// 目標角度
 8006486:	4b5c      	ldr	r3, [pc, #368]	; (80065f8 <CTRL_refTarget+0xb70>)
 8006488:	ed93 7a00 	vldr	s14, [r3]
 800648c:	4b57      	ldr	r3, [pc, #348]	; (80065ec <CTRL_refTarget+0xb64>)
 800648e:	edd3 7a00 	vldr	s15, [r3]
 8006492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006496:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <CTRL_refTarget+0xb6c>)
 8006498:	edd3 7a00 	vldr	s15, [r3]
 800649c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80064a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064a8:	4b54      	ldr	r3, [pc, #336]	; (80065fc <CTRL_refTarget+0xb74>)
 80064aa:	edd3 7a00 	vldr	s15, [r3]
 80064ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b2:	4b53      	ldr	r3, [pc, #332]	; (8006600 <CTRL_refTarget+0xb78>)
 80064b4:	edc3 7a00 	vstr	s15, [r3]
 80064b8:	e007      	b.n	80064ca <CTRL_refTarget+0xa42>
				}
				else{
					f_TrgtAngleS = 0.0;
 80064ba:	4b4c      	ldr	r3, [pc, #304]	; (80065ec <CTRL_refTarget+0xb64>)
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
					f_TrgtAngle  = f_LastAngle;													// 目標距離
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <CTRL_refTarget+0xb60>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a4e      	ldr	r2, [pc, #312]	; (8006600 <CTRL_refTarget+0xb78>)
 80064c8:	6013      	str	r3, [r2, #0]
				}
			}

			/* Position CTRL */
			if( f_LastDist > (f_TrgtDist - (f_TrgtSpeed * 0.001)) ){						// 目標更新区間
 80064ca:	4b4e      	ldr	r3, [pc, #312]	; (8006604 <CTRL_refTarget+0xb7c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fa f862 	bl	8000598 <__aeabi_f2d>
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	4b4b      	ldr	r3, [pc, #300]	; (8006608 <CTRL_refTarget+0xb80>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa f85b 	bl	8000598 <__aeabi_f2d>
 80064e2:	4680      	mov	r8, r0
 80064e4:	4689      	mov	r9, r1
 80064e6:	4b3f      	ldr	r3, [pc, #252]	; (80065e4 <CTRL_refTarget+0xb5c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fa f854 	bl	8000598 <__aeabi_f2d>
 80064f0:	a339      	add	r3, pc, #228	; (adr r3, 80065d8 <CTRL_refTarget+0xb50>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f8a7 	bl	8000648 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fee9 	bl	80002d8 <__aeabi_dsub>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7fa fb2b 	bl	8000b68 <__aeabi_dcmpgt>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <CTRL_refTarget+0xab2>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;							// 目標位置
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <CTRL_refTarget+0xb5c>)
 800651a:	ed93 7a00 	vldr	s14, [r3]
 800651e:	4b35      	ldr	r3, [pc, #212]	; (80065f4 <CTRL_refTarget+0xb6c>)
 8006520:	edd3 7a00 	vldr	s15, [r3]
 8006524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006528:	4b38      	ldr	r3, [pc, #224]	; (800660c <CTRL_refTarget+0xb84>)
 800652a:	edd3 7a00 	vldr	s15, [r3]
 800652e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006532:	4b35      	ldr	r3, [pc, #212]	; (8006608 <CTRL_refTarget+0xb80>)
 8006534:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;													// 目標距離
			}
			break;
 8006538:	e04a      	b.n	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;													// 目標距離
 800653a:	4b32      	ldr	r3, [pc, #200]	; (8006604 <CTRL_refTarget+0xb7c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a32      	ldr	r2, [pc, #200]	; (8006608 <CTRL_refTarget+0xb80>)
 8006540:	6013      	str	r3, [r2, #0]
			break;
 8006542:	e045      	b.n	80065d0 <CTRL_refTarget+0xb48>

		/* escape(sura) */
		case CTRL_EXIT_SURA:
			f_TrgtSpeed = f_BaseSpeed;
 8006544:	4b26      	ldr	r3, [pc, #152]	; (80065e0 <CTRL_refTarget+0xb58>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <CTRL_refTarget+0xb5c>)
 800654a:	6013      	str	r3, [r2, #0]
			f_TrgtAngleS = 0;
 800654c:	4b27      	ldr	r3, [pc, #156]	; (80065ec <CTRL_refTarget+0xb64>)
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
			if( f_TrgtDist <= (f_LastDist -f_TrgtSpeed * 0.001)){
 8006554:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <CTRL_refTarget+0xb80>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fa f81d 	bl	8000598 <__aeabi_f2d>
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	4b28      	ldr	r3, [pc, #160]	; (8006604 <CTRL_refTarget+0xb7c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa f816 	bl	8000598 <__aeabi_f2d>
 800656c:	4680      	mov	r8, r0
 800656e:	4689      	mov	r9, r1
 8006570:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <CTRL_refTarget+0xb5c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f7fa f80f 	bl	8000598 <__aeabi_f2d>
 800657a:	a317      	add	r3, pc, #92	; (adr r3, 80065d8 <CTRL_refTarget+0xb50>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7fa f862 	bl	8000648 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7f9 fea4 	bl	80002d8 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7fa fad2 	bl	8000b40 <__aeabi_dcmple>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <CTRL_refTarget+0xb3c>
				f_TrgtDist  = f_BaseDist + f_TrgtSpeed * f_Time;								// 目標距離
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <CTRL_refTarget+0xb5c>)
 80065a4:	ed93 7a00 	vldr	s14, [r3]
 80065a8:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <CTRL_refTarget+0xb6c>)
 80065aa:	edd3 7a00 	vldr	s15, [r3]
 80065ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065b2:	4b16      	ldr	r3, [pc, #88]	; (800660c <CTRL_refTarget+0xb84>)
 80065b4:	edd3 7a00 	vldr	s15, [r3]
 80065b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065bc:	4b12      	ldr	r3, [pc, #72]	; (8006608 <CTRL_refTarget+0xb80>)
 80065be:	edc3 7a00 	vstr	s15, [r3]
			}
			else{
				f_TrgtDist  = f_LastDist;														// 目標距離
			}
			break;
 80065c2:	e005      	b.n	80065d0 <CTRL_refTarget+0xb48>
				f_TrgtDist  = f_LastDist;														// 目標距離
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <CTRL_refTarget+0xb7c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <CTRL_refTarget+0xb80>)
 80065ca:	6013      	str	r3, [r2, #0]
			break;
 80065cc:	e000      	b.n	80065d0 <CTRL_refTarget+0xb48>

		/* etc */
		default:
			break;
 80065ce:	bf00      	nop
	}
}
 80065d0:	bf00      	nop
 80065d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065d6:	bf00      	nop
 80065d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80065dc:	3f50624d 	.word	0x3f50624d
 80065e0:	20000224 	.word	0x20000224
 80065e4:	20000230 	.word	0x20000230
 80065e8:	2000027c 	.word	0x2000027c
 80065ec:	2000026c 	.word	0x2000026c
 80065f0:	20000260 	.word	0x20000260
 80065f4:	2000021c 	.word	0x2000021c
 80065f8:	20000264 	.word	0x20000264
 80065fc:	20000278 	.word	0x20000278
 8006600:	20000284 	.word	0x20000284
 8006604:	20000248 	.word	0x20000248
 8006608:	2000024c 	.word	0x2000024c
 800660c:	20000244 	.word	0x20000244

08006610 <CTRL_getFF_speed>:
		default:			return PARAM_NC;
	}
}

void CTRL_getFF_speed( float* p_err )
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 8006618:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <CTRL_getFF_speed+0x88>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b0e      	cmp	r3, #14
 800661e:	d82f      	bhi.n	8006680 <CTRL_getFF_speed+0x70>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <CTRL_getFF_speed+0x18>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006665 	.word	0x08006665
 800662c:	0800668b 	.word	0x0800668b
 8006630:	0800666f 	.word	0x0800666f
 8006634:	08006665 	.word	0x08006665
 8006638:	0800668b 	.word	0x0800668b
 800663c:	0800666f 	.word	0x0800666f
 8006640:	0800666f 	.word	0x0800666f
 8006644:	08006665 	.word	0x08006665
 8006648:	0800668b 	.word	0x0800668b
 800664c:	0800666f 	.word	0x0800666f
 8006650:	0800668b 	.word	0x0800668b
 8006654:	08006665 	.word	0x08006665
 8006658:	0800668b 	.word	0x0800668b
 800665c:	0800666f 	.word	0x0800666f
 8006660:	0800668b 	.word	0x0800668b
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err = f_Acc;
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <CTRL_getFF_speed+0x8c>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]
			break;
 800666c:	e00e      	b.n	800668c <CTRL_getFF_speed+0x7c>
		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
		case CTRL_HIT_WALL:
			*p_err = f_Acc * (-1);
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <CTRL_getFF_speed+0x8c>)
 8006670:	edd3 7a00 	vldr	s15, [r3]
 8006674:	eef1 7a67 	vneg.f32	s15, s15
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800667e:	e005      	b.n	800668c <CTRL_getFF_speed+0x7c>

		// 加速以外 
		default:
			*p_err = 0;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006688:	e000      	b.n	800668c <CTRL_getFF_speed+0x7c>
			break;
 800668a:	bf00      	nop
	}

}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	200002da 	.word	0x200002da
 800669c:	20000220 	.word	0x20000220

080066a0 <CTRL_getFF_angle>:

void CTRL_getFF_angle( float* p_err )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	/* 動作モードに応じる */
	switch( en_Type ){
 80066a8:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <CTRL_getFF_angle+0xc0>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b0e      	cmp	r3, #14
 80066ae:	d84b      	bhi.n	8006748 <CTRL_getFF_angle+0xa8>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <CTRL_getFF_angle+0x18>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066f5 	.word	0x080066f5
 80066bc:	08006753 	.word	0x08006753
 80066c0:	0800671f 	.word	0x0800671f
 80066c4:	080066f5 	.word	0x080066f5
 80066c8:	08006753 	.word	0x08006753
 80066cc:	0800671f 	.word	0x0800671f
 80066d0:	08006749 	.word	0x08006749
 80066d4:	080066f5 	.word	0x080066f5
 80066d8:	08006753 	.word	0x08006753
 80066dc:	0800671f 	.word	0x0800671f
 80066e0:	08006753 	.word	0x08006753
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	08006753 	.word	0x08006753
 80066ec:	0800671f 	.word	0x0800671f
 80066f0:	08006753 	.word	0x08006753
		// 加速 
		case CTRL_ACC:
		case CTRL_SKEW_ACC:
		case CTRL_ACC_TRUN:
		case CTRL_ACC_SURA:
			*p_err =FABS(f_AccAngleS);
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <CTRL_getFF_angle+0xc4>)
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006702:	db03      	blt.n	800670c <CTRL_getFF_angle+0x6c>
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <CTRL_getFF_angle+0xc4>)
 8006706:	edd3 7a00 	vldr	s15, [r3]
 800670a:	e004      	b.n	8006716 <CTRL_getFF_angle+0x76>
 800670c:	4b15      	ldr	r3, [pc, #84]	; (8006764 <CTRL_getFF_angle+0xc4>)
 800670e:	edd3 7a00 	vldr	s15, [r3]
 8006712:	eef1 7a67 	vneg.f32	s15, s15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	edc3 7a00 	vstr	s15, [r3]
			break;
 800671c:	e01a      	b.n	8006754 <CTRL_getFF_angle+0xb4>

		case CTRL_DEC:
		case CTRL_SKEW_DEC:
		case CTRL_DEC_TRUN:
		case CTRL_DEC_SURA:
			*p_err = FABS(f_AccAngleS) *(-1);
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <CTRL_getFF_angle+0xc4>)
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672c:	db05      	blt.n	800673a <CTRL_getFF_angle+0x9a>
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <CTRL_getFF_angle+0xc4>)
 8006730:	edd3 7a00 	vldr	s15, [r3]
 8006734:	eef1 7a67 	vneg.f32	s15, s15
 8006738:	e002      	b.n	8006740 <CTRL_getFF_angle+0xa0>
 800673a:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <CTRL_getFF_angle+0xc4>)
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006746:	e005      	b.n	8006754 <CTRL_getFF_angle+0xb4>

		// 加速以外 
		default:
			*p_err = 0;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
			break;										// 何もしない
 8006750:	e000      	b.n	8006754 <CTRL_getFF_angle+0xb4>
			break;
 8006752:	bf00      	nop
	}

}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	200002da 	.word	0x200002da
 8006764:	20000260 	.word	0x20000260

08006768 <CTRL_getSpeedFB>:

void CTRL_getSpeedFB( float* p_err )
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	float		f_speedErr;					// [速度制御] 速度偏差
	float		f_kp = 0.0f;
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
	float		f_ki = 0.0f;
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
	float		f_kd = 0.0f;
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
	/* 速度制御 */
	f_speedErr  = f_TrgtSpeed - f_NowSpeed;					// 速度偏差[mm/s]
 8006782:	4b28      	ldr	r3, [pc, #160]	; (8006824 <CTRL_getSpeedFB+0xbc>)
 8006784:	ed93 7a00 	vldr	s14, [r3]
 8006788:	4b27      	ldr	r3, [pc, #156]	; (8006828 <CTRL_getSpeedFB+0xc0>)
 800678a:	edd3 7a00 	vldr	s15, [r3]
 800678e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006792:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_speed_kp;
 8006796:	4b25      	ldr	r3, [pc, #148]	; (800682c <CTRL_getSpeedFB+0xc4>)
 8006798:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_speed_ki;
 800679a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800679e:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_speed_kd;
 80067a0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80067a4:	60fb      	str	r3, [r7, #12]

	/* I成分演算 */
	f_SpeedErrSum += f_speedErr;// * f_ki;			// I成分更新
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <CTRL_getSpeedFB+0xc8>)
 80067a8:	ed93 7a00 	vldr	s14, [r3]
 80067ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80067b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b4:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <CTRL_getSpeedFB+0xc8>)
 80067b6:	edc3 7a00 	vstr	s15, [r3]
	if( f_SpeedErrSum > 10000.0 ){
 80067ba:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <CTRL_getSpeedFB+0xc8>)
 80067bc:	edd3 7a00 	vldr	s15, [r3]
 80067c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006834 <CTRL_getSpeedFB+0xcc>
 80067c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	dd02      	ble.n	80067d4 <CTRL_getSpeedFB+0x6c>
		f_SpeedErrSum = 10000.0;			// 上限リミッター
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <CTRL_getSpeedFB+0xc8>)
 80067d0:	4a19      	ldr	r2, [pc, #100]	; (8006838 <CTRL_getSpeedFB+0xd0>)
 80067d2:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_speedErr * f_kp + f_SpeedErrSum* f_ki + ( f_speedErr - f_ErrSpeedBuf ) * f_kd;				// PI制御量算出
 80067d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80067d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80067dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067e0:	4b13      	ldr	r3, [pc, #76]	; (8006830 <CTRL_getSpeedFB+0xc8>)
 80067e2:	edd3 6a00 	vldr	s13, [r3]
 80067e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80067ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <CTRL_getSpeedFB+0xd4>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80067fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006800:	edd7 7a03 	vldr	s15, [r7, #12]
 8006804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	edc3 7a00 	vstr	s15, [r3]

	f_ErrSpeedBuf = f_speedErr;		// 偏差をバッファリング	
 8006812:	4a0a      	ldr	r2, [pc, #40]	; (800683c <CTRL_getSpeedFB+0xd4>)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6013      	str	r3, [r2, #0]
/*	if((f_speedErr>1.5)||(f_speedErr<-1.5)){
		Failsafe_flag();
	}
*/
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20000230 	.word	0x20000230
 8006828:	2000022c 	.word	0x2000022c
 800682c:	420c0000 	.word	0x420c0000
 8006830:	20000238 	.word	0x20000238
 8006834:	461c4000 	.word	0x461c4000
 8006838:	461c4000 	.word	0x461c4000
 800683c:	20000234 	.word	0x20000234

08006840 <CTRL_getAngleSpeedFB>:

void CTRL_getAngleSpeedFB( float* p_err )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	ed2d 8b02 	vpush	{d8}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	float f_err;					// [入力] ジャイロセンサーエラー値､
	float f_kp = 0.0f;				// 比例ゲイン
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
	float f_ki = 0.0f;
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
	float f_kd = 0.0f;
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]


	f_err = f_TrgtAngleS - GYRO_getSpeedErr();			// 目標角度 - ジャイロセンサ[deg/s]
 800685e:	4b3b      	ldr	r3, [pc, #236]	; (800694c <CTRL_getAngleSpeedFB+0x10c>)
 8006860:	ed93 8a00 	vldr	s16, [r3]
 8006864:	f001 fcb8 	bl	80081d8 <GYRO_getSpeedErr>
 8006868:	eef0 7a40 	vmov.f32	s15, s0
 800686c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006870:	edc7 7a02 	vstr	s15, [r7, #8]
	f_kp = f_FB_angleS_kp;
 8006874:	4b36      	ldr	r3, [pc, #216]	; (8006950 <CTRL_getAngleSpeedFB+0x110>)
 8006876:	617b      	str	r3, [r7, #20]
	f_ki = f_FB_angleS_ki;
 8006878:	4b36      	ldr	r3, [pc, #216]	; (8006954 <CTRL_getAngleSpeedFB+0x114>)
 800687a:	613b      	str	r3, [r7, #16]
	f_kd = f_FB_angleS_kd;
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <CTRL_getAngleSpeedFB+0x118>)
 800687e:	60fb      	str	r3, [r7, #12]

	f_AngleSErrSum += f_err;//*f_ki;
 8006880:	4b36      	ldr	r3, [pc, #216]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 8006882:	ed93 7a00 	vldr	s14, [r3]
 8006886:	edd7 7a02 	vldr	s15, [r7, #8]
 800688a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800688e:	4b33      	ldr	r3, [pc, #204]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 8006890:	edc3 7a00 	vstr	s15, [r3]

	if(f_AngleSErrSum > 10000.0){
 8006894:	4b31      	ldr	r3, [pc, #196]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 8006896:	edd3 7a00 	vldr	s15, [r3]
 800689a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006960 <CTRL_getAngleSpeedFB+0x120>
 800689e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a6:	dd03      	ble.n	80068b0 <CTRL_getAngleSpeedFB+0x70>
		f_AngleSErrSum = 10000.0;			//上限リミッター
 80068a8:	4b2c      	ldr	r3, [pc, #176]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 80068aa:	4a2e      	ldr	r2, [pc, #184]	; (8006964 <CTRL_getAngleSpeedFB+0x124>)
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e00c      	b.n	80068ca <CTRL_getAngleSpeedFB+0x8a>
	}
	else if(f_AngleSErrSum <-10000.0){
 80068b0:	4b2a      	ldr	r3, [pc, #168]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006968 <CTRL_getAngleSpeedFB+0x128>
 80068ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	d502      	bpl.n	80068ca <CTRL_getAngleSpeedFB+0x8a>
		f_AngleSErrSum = -10000.0;
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 80068c6:	4a29      	ldr	r2, [pc, #164]	; (800696c <CTRL_getAngleSpeedFB+0x12c>)
 80068c8:	601a      	str	r2, [r3, #0]
	}

	*p_err = f_err * f_kp + f_AngleSErrSum*f_ki + ( f_err - f_ErrAngleSBuf ) * f_kd;		// PID制御
 80068ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80068ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80068d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068d6:	4b21      	ldr	r3, [pc, #132]	; (800695c <CTRL_getAngleSpeedFB+0x11c>)
 80068d8:	edd3 6a00 	vldr	s13, [r3]
 80068dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80068e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068e8:	4b21      	ldr	r3, [pc, #132]	; (8006970 <CTRL_getAngleSpeedFB+0x130>)
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	edd7 6a02 	vldr	s13, [r7, #8]
 80068f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80068fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	edc3 7a00 	vstr	s15, [r3]

	f_ErrAngleSBuf = f_err;		// 偏差をバッファリング	
 8006908:	4a19      	ldr	r2, [pc, #100]	; (8006970 <CTRL_getAngleSpeedFB+0x130>)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6013      	str	r3, [r2, #0]
	if((f_err>14.0)||(f_err<-14.0)){
 800690e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006912:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8006916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691e:	dc09      	bgt.n	8006934 <CTRL_getAngleSpeedFB+0xf4>
 8006920:	edd7 7a02 	vldr	s15, [r7, #8]
 8006924:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8006928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	d400      	bmi.n	8006934 <CTRL_getAngleSpeedFB+0xf4>
		if(!(en_Type == CTRL_HIT_WALL)){
			Failsafe_flag();
		}
	}
}
 8006932:	e005      	b.n	8006940 <CTRL_getAngleSpeedFB+0x100>
		if(!(en_Type == CTRL_HIT_WALL)){
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <CTRL_getAngleSpeedFB+0x134>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b06      	cmp	r3, #6
 800693a:	d001      	beq.n	8006940 <CTRL_getAngleSpeedFB+0x100>
			Failsafe_flag();
 800693c:	f001 f986 	bl	8007c4c <Failsafe_flag>
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	ecbd 8b02 	vpop	{d8}
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000026c 	.word	0x2000026c
 8006950:	42c80000 	.word	0x42c80000
 8006954:	40d00000 	.word	0x40d00000
 8006958:	3dcccccd 	.word	0x3dcccccd
 800695c:	20000274 	.word	0x20000274
 8006960:	461c4000 	.word	0x461c4000
 8006964:	461c4000 	.word	0x461c4000
 8006968:	c61c4000 	.word	0xc61c4000
 800696c:	c61c4000 	.word	0xc61c4000
 8006970:	20000270 	.word	0x20000270
 8006974:	200002da 	.word	0x200002da

08006978 <CTRL_getAngleFB>:

void CTRL_getAngleFB( float* p_err )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	ed2d 8b02 	vpush	{d8}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
    float f_err;                    // [入力] 角度偏差[deg]
    float f_kp = 0.0f;              // 比例ゲイン
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
    float f_ki = 0.0f;
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	613b      	str	r3, [r7, #16]

    f_err = f_TrgtAngle - GYRO_getNowAngle();          // 現在角度[deg]
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <CTRL_getAngleFB+0xb0>)
 8006992:	ed93 8a00 	vldr	s16, [r3]
 8006996:	f001 fc6d 	bl	8008274 <GYRO_getNowAngle>
 800699a:	eef0 7a40 	vmov.f32	s15, s0
 800699e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80069a2:	edc7 7a03 	vstr	s15, [r7, #12]
    f_kp = f_FB_angle_kp;
 80069a6:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <CTRL_getAngleFB+0xb4>)
 80069a8:	617b      	str	r3, [r7, #20]
    f_ki = f_FB_angle_ki;
 80069aa:	4b21      	ldr	r3, [pc, #132]	; (8006a30 <CTRL_getAngleFB+0xb8>)
 80069ac:	613b      	str	r3, [r7, #16]
    f_AngleErrSum += f_err;//*f_ki;
 80069ae:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069b0:	ed93 7a00 	vldr	s14, [r3]
 80069b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069be:	edc3 7a00 	vstr	s15, [r3]
    if(f_AngleErrSum > 100.0){
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069c4:	edd3 7a00 	vldr	s15, [r3]
 80069c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006a38 <CTRL_getAngleFB+0xc0>
 80069cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	dd03      	ble.n	80069de <CTRL_getAngleFB+0x66>
        f_AngleErrSum = 100.0;           //上限リミッター
 80069d6:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <CTRL_getAngleFB+0xc4>)
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e00c      	b.n	80069f8 <CTRL_getAngleFB+0x80>
    }
    else if(f_AngleErrSum <-100.0){
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069e0:	edd3 7a00 	vldr	s15, [r3]
 80069e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006a40 <CTRL_getAngleFB+0xc8>
 80069e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f0:	d502      	bpl.n	80069f8 <CTRL_getAngleFB+0x80>
        f_AngleErrSum = -100.0;
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 80069f4:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <CTRL_getAngleFB+0xcc>)
 80069f6:	601a      	str	r2, [r3, #0]
    }
    *p_err = f_err * f_kp + f_AngleErrSum*f_ki;        // PID制御｡
 80069f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80069fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <CTRL_getAngleFB+0xbc>)
 8006a06:	edd3 6a00 	vldr	s13, [r3]
 8006a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	edc3 7a00 	vstr	s15, [r3]

}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	ecbd 8b02 	vpop	{d8}
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000284 	.word	0x20000284
 8006a2c:	3e4ccccd 	.word	0x3e4ccccd
 8006a30:	3dcccccd 	.word	0x3dcccccd
 8006a34:	20000288 	.word	0x20000288
 8006a38:	42c80000 	.word	0x42c80000
 8006a3c:	42c80000 	.word	0x42c80000
 8006a40:	c2c80000 	.word	0xc2c80000
 8006a44:	c2c80000 	.word	0xc2c80000

08006a48 <CTRL_getSenFB>:


void CTRL_getSenFB( float* p_err )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	float f_err 	= 0;
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
	float f_kp 		= 0.0f;				// 比例ゲイン
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	613b      	str	r3, [r7, #16]
	float f_kd 		= 0.0f;				// 微分ゲイン
 8006a5c:	f04f 0300 	mov.w	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]
	float gyro		= 0.0f;
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]

	/* 直進時 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006a68:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00f      	beq.n	8006a90 <CTRL_getSenFB+0x48>
 8006a70:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d00b      	beq.n	8006a90 <CTRL_getSenFB+0x48>
 8006a78:	4b29      	ldr	r3, [pc, #164]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d007      	beq.n	8006a90 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC )||
 8006a84:	2b0a      	cmp	r3, #10
 8006a86:	d003      	beq.n	8006a90 <CTRL_getSenFB+0x48>
			 ( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ){
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b0e      	cmp	r3, #14
 8006a8e:	d128      	bne.n	8006ae2 <CTRL_getSenFB+0x9a>

		f_kp = f_FB_wall_kp;
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <CTRL_getSenFB+0xdc>)
 8006a92:	613b      	str	r3, [r7, #16]
		f_kd = f_FB_wall_kd;
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <CTRL_getSenFB+0xe0>)
 8006a96:	60fb      	str	r3, [r7, #12]

		/* 偏差取得 */
		DIST_getErr( &l_WallErr );
 8006a98:	4824      	ldr	r0, [pc, #144]	; (8006b2c <CTRL_getSenFB+0xe4>)
 8006a9a:	f004 ff45 	bl	800b928 <DIST_getErr>
		f_err = (float)l_WallErr;
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <CTRL_getSenFB+0xe4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aaa:	edc7 7a05 	vstr	s15, [r7, #20]
//		templog2 = f_err;
		/* PD制御 */

		f_ErrDistBuf = f_err;		// 偏差をバッファリング
 8006aae:	4a20      	ldr	r2, [pc, #128]	; (8006b30 <CTRL_getSenFB+0xe8>)
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6013      	str	r3, [r2, #0]

		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
 8006ab4:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8006abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <CTRL_getSenFB+0xe8>)
 8006ac2:	edd3 7a00 	vldr	s15, [r3]
 8006ac6:	edd7 6a05 	vldr	s13, [r7, #20]
 8006aca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	edc3 7a00 	vstr	s15, [r3]

//		*p_err = f_err * f_kp + ( f_err - f_ErrDistBuf ) * f_kd;		// PD制御
		*p_err = f_err;
	}

}
 8006ae0:	e019      	b.n	8006b16 <CTRL_getSenFB+0xce>
	else if( ( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC ) ){
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d007      	beq.n	8006afa <CTRL_getSenFB+0xb2>
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d003      	beq.n	8006afa <CTRL_getSenFB+0xb2>
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <CTRL_getSenFB+0xd8>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d10d      	bne.n	8006b16 <CTRL_getSenFB+0xce>
		DIST_getErrSkew( &l_WallErr );
 8006afa:	480c      	ldr	r0, [pc, #48]	; (8006b2c <CTRL_getSenFB+0xe4>)
 8006afc:	f005 f8aa 	bl	800bc54 <DIST_getErrSkew>
		f_err = (float)l_WallErr;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <CTRL_getSenFB+0xe4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0c:	edc7 7a05 	vstr	s15, [r7, #20]
		*p_err = f_err;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200002da 	.word	0x200002da
 8006b24:	3f19999a 	.word	0x3f19999a
 8006b28:	3e99999a 	.word	0x3e99999a
 8006b2c:	2000028c 	.word	0x2000028c
 8006b30:	20000290 	.word	0x20000290
 8006b34:	00000000 	.word	0x00000000

08006b38 <CTRL_getFloorFriction>:

void CTRL_getFloorFriction(float* p_err){
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	float tread;
	if(( en_Type == CTRL_ACC_TRUN) || (en_Type == CTRL_CONST_TRUN)||( en_Type == CTRL_DEC_TRUN )){
 8006b40:	4bb3      	ldr	r3, [pc, #716]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b07      	cmp	r3, #7
 8006b46:	d007      	beq.n	8006b58 <CTRL_getFloorFriction+0x20>
 8006b48:	4bb1      	ldr	r3, [pc, #708]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d003      	beq.n	8006b58 <CTRL_getFloorFriction+0x20>
 8006b50:	4baf      	ldr	r3, [pc, #700]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d102      	bne.n	8006b5e <CTRL_getFloorFriction+0x26>
		tread = TREAD_imagin;
 8006b58:	4bae      	ldr	r3, [pc, #696]	; (8006e14 <CTRL_getFloorFriction+0x2dc>)
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e001      	b.n	8006b62 <CTRL_getFloorFriction+0x2a>
	}else{
		tread = TREAD;
 8006b5e:	4bae      	ldr	r3, [pc, #696]	; (8006e18 <CTRL_getFloorFriction+0x2e0>)
 8006b60:	60fb      	str	r3, [r7, #12]
	}
//	*p_err = 0;
	if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8006b62:	4bab      	ldr	r3, [pc, #684]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b0b      	cmp	r3, #11
 8006b68:	d008      	beq.n	8006b7c <CTRL_getFloorFriction+0x44>
 8006b6a:	4ba9      	ldr	r3, [pc, #676]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b0c      	cmp	r3, #12
 8006b70:	d004      	beq.n	8006b7c <CTRL_getFloorFriction+0x44>
 8006b72:	4ba7      	ldr	r3, [pc, #668]	; (8006e10 <CTRL_getFloorFriction+0x2d8>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b0d      	cmp	r3, #13
 8006b78:	f040 80b7 	bne.w	8006cea <CTRL_getFloorFriction+0x1b2>
		if(f_TrgtAngleS<0){
 8006b7c:	4ba7      	ldr	r3, [pc, #668]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006b7e:	edd3 7a00 	vldr	s15, [r3]
 8006b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8a:	d550      	bpl.n	8006c2e <CTRL_getFloorFriction+0xf6>
			if(Get_NowAngle() < -0.002)
 8006b8c:	f7fe fd86 	bl	800569c <Get_NowAngle>
 8006b90:	ee10 3a10 	vmov	r3, s0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fcff 	bl	8000598 <__aeabi_f2d>
 8006b9a:	a393      	add	r3, pc, #588	; (adr r3, 8006de8 <CTRL_getFloorFriction+0x2b0>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03d      	beq.n	8006c26 <CTRL_getFloorFriction+0xee>
				*p_err = (-1)*0.38/1000.0 + (-1)*0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/2300.0;
 8006baa:	4b9c      	ldr	r3, [pc, #624]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006bac:	edd3 7a00 	vldr	s15, [r3]
 8006bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	db03      	blt.n	8006bc2 <CTRL_getFloorFriction+0x8a>
 8006bba:	4b98      	ldr	r3, [pc, #608]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006bbc:	edd3 7a00 	vldr	s15, [r3]
 8006bc0:	e004      	b.n	8006bcc <CTRL_getFloorFriction+0x94>
 8006bc2:	4b96      	ldr	r3, [pc, #600]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006bc4:	edd3 7a00 	vldr	s15, [r3]
 8006bc8:	eef1 7a67 	vneg.f32	s15, s15
 8006bcc:	4b93      	ldr	r3, [pc, #588]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006bce:	ed93 7a00 	vldr	s14, [r3]
 8006bd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bde:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006be6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8006e20 <CTRL_getFloorFriction+0x2e8>
 8006bea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bee:	ee16 0a90 	vmov	r0, s13
 8006bf2:	f7f9 fcd1 	bl	8000598 <__aeabi_f2d>
 8006bf6:	a37e      	add	r3, pc, #504	; (adr r3, 8006df0 <CTRL_getFloorFriction+0x2b8>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 fe4e 	bl	800089c <__aeabi_ddiv>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4610      	mov	r0, r2
 8006c06:	4619      	mov	r1, r3
 8006c08:	a37b      	add	r3, pc, #492	; (adr r3, 8006df8 <CTRL_getFloorFriction+0x2c0>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fb63 	bl	80002d8 <__aeabi_dsub>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f7fa f80d 	bl	8000c38 <__aeabi_d2f>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006c24:	e13f      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
	//			*p_err = (-1)*0.35/1000.0 + (-1)*0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = (-1)*0.37/1000.0;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a7e      	ldr	r2, [pc, #504]	; (8006e24 <CTRL_getFloorFriction+0x2ec>)
 8006c2a:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006c2c:	e13b      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
			}
		else if(f_TrgtAngleS>0){
 8006c2e:	4b7b      	ldr	r3, [pc, #492]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006c30:	edd3 7a00 	vldr	s15, [r3]
 8006c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3c:	dd50      	ble.n	8006ce0 <CTRL_getFloorFriction+0x1a8>
			if(Get_NowAngle() > 0.002)
 8006c3e:	f7fe fd2d 	bl	800569c <Get_NowAngle>
 8006c42:	ee10 3a10 	vmov	r3, s0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7f9 fca6 	bl	8000598 <__aeabi_f2d>
 8006c4c:	a36c      	add	r3, pc, #432	; (adr r3, 8006e00 <CTRL_getFloorFriction+0x2c8>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	f7f9 ff89 	bl	8000b68 <__aeabi_dcmpgt>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d03d      	beq.n	8006cd8 <CTRL_getFloorFriction+0x1a0>
				*p_err = 0.38/1000.0 + 0.43/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/2300.0;
 8006c5c:	4b6f      	ldr	r3, [pc, #444]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6a:	db03      	blt.n	8006c74 <CTRL_getFloorFriction+0x13c>
 8006c6c:	4b6b      	ldr	r3, [pc, #428]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006c6e:	edd3 7a00 	vldr	s15, [r3]
 8006c72:	e004      	b.n	8006c7e <CTRL_getFloorFriction+0x146>
 8006c74:	4b69      	ldr	r3, [pc, #420]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006c76:	edd3 7a00 	vldr	s15, [r3]
 8006c7a:	eef1 7a67 	vneg.f32	s15, s15
 8006c7e:	4b67      	ldr	r3, [pc, #412]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006c80:	ed93 7a00 	vldr	s14, [r3]
 8006c84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c98:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006e20 <CTRL_getFloorFriction+0x2e8>
 8006c9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ca0:	ee16 0a90 	vmov	r0, s13
 8006ca4:	f7f9 fc78 	bl	8000598 <__aeabi_f2d>
 8006ca8:	a351      	add	r3, pc, #324	; (adr r3, 8006df0 <CTRL_getFloorFriction+0x2b8>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fdf5 	bl	800089c <__aeabi_ddiv>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	a34f      	add	r3, pc, #316	; (adr r3, 8006df8 <CTRL_getFloorFriction+0x2c0>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fb0c 	bl	80002dc <__adddf3>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f7f9 ffb4 	bl	8000c38 <__aeabi_d2f>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006cd6:	e0e6      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
	//			*p_err = 0.35/1000.0 + 0.45/1000.0+f_TrgtAngleS*tread/2/PI/109.0;
			else
				*p_err = 0.37/1000.0;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a53      	ldr	r2, [pc, #332]	; (8006e28 <CTRL_getFloorFriction+0x2f0>)
 8006cdc:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006cde:	e0e2      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
		}else{
			*p_err = 0;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
		if(f_TrgtAngleS<0){
 8006ce8:	e0dd      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
		}
	}
	else{
		if(f_TrgtAngleS<0){
 8006cea:	4b4c      	ldr	r3, [pc, #304]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006cec:	edd3 7a00 	vldr	s15, [r3]
 8006cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d550      	bpl.n	8006d9c <CTRL_getFloorFriction+0x264>
			if(Get_NowAngle() < -0.002)
 8006cfa:	f7fe fccf 	bl	800569c <Get_NowAngle>
 8006cfe:	ee10 3a10 	vmov	r3, s0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7f9 fc48 	bl	8000598 <__aeabi_f2d>
 8006d08:	a337      	add	r3, pc, #220	; (adr r3, 8006de8 <CTRL_getFloorFriction+0x2b0>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 ff0d 	bl	8000b2c <__aeabi_dcmplt>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d03d      	beq.n	8006d94 <CTRL_getFloorFriction+0x25c>
				*p_err = (-1)*0.43/1000.0 + (-1)*0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/740.0;
 8006d18:	4b40      	ldr	r3, [pc, #256]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006d1a:	edd3 7a00 	vldr	s15, [r3]
 8006d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	db03      	blt.n	8006d30 <CTRL_getFloorFriction+0x1f8>
 8006d28:	4b3c      	ldr	r3, [pc, #240]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006d2a:	edd3 7a00 	vldr	s15, [r3]
 8006d2e:	e004      	b.n	8006d3a <CTRL_getFloorFriction+0x202>
 8006d30:	4b3a      	ldr	r3, [pc, #232]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006d32:	edd3 7a00 	vldr	s15, [r3]
 8006d36:	eef1 7a67 	vneg.f32	s15, s15
 8006d3a:	4b38      	ldr	r3, [pc, #224]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006d3c:	ed93 7a00 	vldr	s14, [r3]
 8006d40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006e20 <CTRL_getFloorFriction+0x2e8>
 8006d58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d5c:	ee16 0a90 	vmov	r0, s13
 8006d60:	f7f9 fc1a 	bl	8000598 <__aeabi_f2d>
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <CTRL_getFloorFriction+0x2f4>)
 8006d6a:	f7f9 fd97 	bl	800089c <__aeabi_ddiv>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	a324      	add	r3, pc, #144	; (adr r3, 8006e08 <CTRL_getFloorFriction+0x2d0>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f7f9 faac 	bl	80002d8 <__aeabi_dsub>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	f7f9 ff56 	bl	8000c38 <__aeabi_d2f>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
/*	if(*p_err>0.0014)
		*p_err = 0.0014;
	if(*p_err<-0.0014)
		*p_err = -0.0014;
*/
}
 8006d92:	e088      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
				*p_err = (-1)*0.37/1000.0;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a23      	ldr	r2, [pc, #140]	; (8006e24 <CTRL_getFloorFriction+0x2ec>)
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	e084      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
		else if(f_TrgtAngleS>0){
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006d9e:	edd3 7a00 	vldr	s15, [r3]
 8006da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006daa:	dd77      	ble.n	8006e9c <CTRL_getFloorFriction+0x364>
			if(Get_NowAngle() > 0.002)
 8006dac:	f7fe fc76 	bl	800569c <Get_NowAngle>
 8006db0:	ee10 3a10 	vmov	r3, s0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7f9 fbef 	bl	8000598 <__aeabi_f2d>
 8006dba:	a311      	add	r3, pc, #68	; (adr r3, 8006e00 <CTRL_getFloorFriction+0x2c8>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fed2 	bl	8000b68 <__aeabi_dcmpgt>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d064      	beq.n	8006e94 <CTRL_getFloorFriction+0x35c>
				*p_err = 0.43/1000.0 + 0.46/1000.0+f_TrgtAngleS*FABS(f_TrgtAngleS)*tread/2/PI/740.0;
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006dcc:	edd3 7a00 	vldr	s15, [r3]
 8006dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	db2a      	blt.n	8006e30 <CTRL_getFloorFriction+0x2f8>
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <CTRL_getFloorFriction+0x2e4>)
 8006ddc:	edd3 7a00 	vldr	s15, [r3]
 8006de0:	e02b      	b.n	8006e3a <CTRL_getFloorFriction+0x302>
 8006de2:	bf00      	nop
 8006de4:	f3af 8000 	nop.w
 8006de8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006dec:	bf60624d 	.word	0xbf60624d
 8006df0:	00000000 	.word	0x00000000
 8006df4:	40a1f800 	.word	0x40a1f800
 8006df8:	c13fd0d0 	.word	0xc13fd0d0
 8006dfc:	3f4a8ac5 	.word	0x3f4a8ac5
 8006e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e04:	3f60624d 	.word	0x3f60624d
 8006e08:	725c3dee 	.word	0x725c3dee
 8006e0c:	3f4d29dc 	.word	0x3f4d29dc
 8006e10:	200002da 	.word	0x200002da
 8006e14:	3d1e1b09 	.word	0x3d1e1b09
 8006e18:	3d09374c 	.word	0x3d09374c
 8006e1c:	2000026c 	.word	0x2000026c
 8006e20:	40490fd0 	.word	0x40490fd0
 8006e24:	b9c1fc8f 	.word	0xb9c1fc8f
 8006e28:	39c1fc8f 	.word	0x39c1fc8f
 8006e2c:	40872000 	.word	0x40872000
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <CTRL_getFloorFriction+0x380>)
 8006e32:	edd3 7a00 	vldr	s15, [r3]
 8006e36:	eef1 7a67 	vneg.f32	s15, s15
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <CTRL_getFloorFriction+0x380>)
 8006e3c:	ed93 7a00 	vldr	s14, [r3]
 8006e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e54:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006ebc <CTRL_getFloorFriction+0x384>
 8006e58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e5c:	ee16 0a90 	vmov	r0, s13
 8006e60:	f7f9 fb9a 	bl	8000598 <__aeabi_f2d>
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <CTRL_getFloorFriction+0x388>)
 8006e6a:	f7f9 fd17 	bl	800089c <__aeabi_ddiv>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	a30e      	add	r3, pc, #56	; (adr r3, 8006eb0 <CTRL_getFloorFriction+0x378>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f7f9 fa2e 	bl	80002dc <__adddf3>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4610      	mov	r0, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	f7f9 fed6 	bl	8000c38 <__aeabi_d2f>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	e008      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
				*p_err = 0.37/1000.0;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <CTRL_getFloorFriction+0x38c>)
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	e004      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
			*p_err = 0;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	e7ff      	b.n	8006ea6 <CTRL_getFloorFriction+0x36e>
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	725c3dee 	.word	0x725c3dee
 8006eb4:	3f4d29dc 	.word	0x3f4d29dc
 8006eb8:	2000026c 	.word	0x2000026c
 8006ebc:	40490fd0 	.word	0x40490fd0
 8006ec0:	40872000 	.word	0x40872000
 8006ec4:	39c1fc8f 	.word	0x39c1fc8f

08006ec8 <CTRL_outMot>:

void CTRL_outMot( float f_duty10_R, float f_duty10_L )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	ed87 0a01 	vstr	s0, [r7, #4]
 8006ed2:	edc7 0a00 	vstr	s1, [r7]
	float	f_temp;			// 計算用

	/* 電圧に応じてPWM出力を変更する */
	f_duty10_R = f_duty10_R*1000;
 8006ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006eda:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006fe4 <CTRL_outMot+0x11c>
 8006ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ee2:	edc7 7a01 	vstr	s15, [r7, #4]
	f_duty10_L = f_duty10_L*1000;
 8006ee6:	edd7 7a00 	vldr	s15, [r7]
 8006eea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006fe4 <CTRL_outMot+0x11c>
 8006eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ef2:	edc7 7a00 	vstr	s15, [r7]

	/* 右モータ */
	if( 20 < f_duty10_R ){									// 前進
 8006ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006efa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f06:	dd0e      	ble.n	8006f26 <CTRL_outMot+0x5e>
		DCM_setDirCw( DCM_R );
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f000 fec3 	bl	8007c94 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_duty10_R );
 8006f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f16:	ee17 3a90 	vmov	r3, s15
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f000 ff0c 	bl	8007d3c <DCM_setPwmDuty>
 8006f24:	e020      	b.n	8006f68 <CTRL_outMot+0xa0>
	}
	else if( f_duty10_R < -20 ){							// 後退
 8006f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f2a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f36:	d514      	bpl.n	8006f62 <CTRL_outMot+0x9a>
		f_temp = f_duty10_R * -1;
 8006f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f3c:	eef1 7a67 	vneg.f32	s15, s15
 8006f40:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_R );
 8006f44:	2000      	movs	r0, #0
 8006f46:	f000 feb8 	bl	8007cba <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_R, (uint16_t)f_temp );
 8006f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f52:	ee17 3a90 	vmov	r3, s15
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f000 feee 	bl	8007d3c <DCM_setPwmDuty>
 8006f60:	e002      	b.n	8006f68 <CTRL_outMot+0xa0>
	}
	else{
		DCM_brakeMot( DCM_R );								// ブレーキ
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 febc 	bl	8007ce0 <DCM_brakeMot>
	}

	/* 左モータ */
	if( 20 < f_duty10_L ){									// 前進
 8006f68:	edd7 7a00 	vldr	s15, [r7]
 8006f6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f78:	dd0e      	ble.n	8006f98 <CTRL_outMot+0xd0>
		DCM_setDirCw( DCM_L );
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	f000 fe8a 	bl	8007c94 <DCM_setDirCw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_duty10_L );
 8006f80:	edd7 7a00 	vldr	s15, [r7]
 8006f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f88:	ee17 3a90 	vmov	r3, s15
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4619      	mov	r1, r3
 8006f90:	2001      	movs	r0, #1
 8006f92:	f000 fed3 	bl	8007d3c <DCM_setPwmDuty>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
	}
	else{
		DCM_brakeMot( DCM_L );								// ブレーキ
	}
}
 8006f96:	e020      	b.n	8006fda <CTRL_outMot+0x112>
	else if( f_duty10_L < -20 ){							// 後退
 8006f98:	edd7 7a00 	vldr	s15, [r7]
 8006f9c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa8:	d514      	bpl.n	8006fd4 <CTRL_outMot+0x10c>
		f_temp = f_duty10_L * -1;
 8006faa:	edd7 7a00 	vldr	s15, [r7]
 8006fae:	eef1 7a67 	vneg.f32	s15, s15
 8006fb2:	edc7 7a03 	vstr	s15, [r7, #12]
		DCM_setDirCcw( DCM_L );
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	f000 fe7f 	bl	8007cba <DCM_setDirCcw>
		DCM_setPwmDuty( DCM_L, (uint16_t)f_temp );
 8006fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc4:	ee17 3a90 	vmov	r3, s15
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f000 feb5 	bl	8007d3c <DCM_setPwmDuty>
}
 8006fd2:	e002      	b.n	8006fda <CTRL_outMot+0x112>
		DCM_brakeMot( DCM_L );								// ブレーキ
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	f000 fe83 	bl	8007ce0 <DCM_brakeMot>
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	447a0000 	.word	0x447a0000

08006fe8 <CTRL_pol>:

void CTRL_pol( void )
{
 8006fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fec:	b08e      	sub	sp, #56	; 0x38
 8006fee:	af00      	add	r7, sp, #0
	float f_feedFoard_speed		= 0;		// [制御] フィードフォワード速度制御
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
	float f_feedFoard_angle		= 0;		// [制御] フィードフォワード角度制御
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
	float f_speedCtrl			= 0;		// [制御] 速度制御量
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
	float f_angleSpeedCtrl			= 0;	// [制御] 角速度制御量
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
	float f_angleCtrl			= 0;		// [制御] 角度制御量
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
	float f_distSenCtrl			= 0;		// [制御] 距離センサー制御量
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]
	float f_floorfriction		= 0;
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
	float f_duty10_R;						// [出力] 右モータPWM-DUTY比[0.1%]
	float f_duty10_L;						// [出力] 左モータPWM-DUTY比[0.1%]

	float TR = 0.0;
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float TL = 0.0;
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
	float Ir = 0.0;
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
	float Il = 0.0;
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	633b      	str	r3, [r7, #48]	; 0x30

	/* 制御を行うかのチェック */
	if( uc_CtrlFlag != TRUE ){
 8007032:	4bc9      	ldr	r3, [pc, #804]	; (8007358 <CTRL_pol+0x370>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b01      	cmp	r3, #1
 8007038:	f040 85db 	bne.w	8007bf2 <CTRL_pol+0xc0a>
		 return;		// 制御無効状態
	}
	if(SW_ON == SW_IsOn_0()){
 800703c:	f7fb f836 	bl	80020ac <SW_IsOn_0>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <CTRL_pol+0x62>
		Failsafe_flag();
 8007046:	f000 fe01 	bl	8007c4c <Failsafe_flag>
	}

	/* 制御不能 */
	if (SYS_isOutOfCtrl() == TRUE ){
 800704a:	f000 fe17 	bl	8007c7c <SYS_isOutOfCtrl>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d019      	beq.n	8007088 <CTRL_pol+0xa0>

		f_DistErrSum = 0;				// 累積偏差クリア
 8007054:	4bc1      	ldr	r3, [pc, #772]	; (800735c <CTRL_pol+0x374>)
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
		f_NowDist = f_LastDist;			// 強制的に最終目標位置に変更
 800705c:	4bc0      	ldr	r3, [pc, #768]	; (8007360 <CTRL_pol+0x378>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4ac0      	ldr	r2, [pc, #768]	; (8007364 <CTRL_pol+0x37c>)
 8007062:	6013      	str	r3, [r2, #0]
		f_NowAngle = f_LastAngle;		// 強制的に最終目標時間に変更
 8007064:	4bc0      	ldr	r3, [pc, #768]	; (8007368 <CTRL_pol+0x380>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4ac0      	ldr	r2, [pc, #768]	; (800736c <CTRL_pol+0x384>)
 800706a:	6013      	str	r3, [r2, #0]
		f_Time = f_TrgtTime;			// 強制的に最終目標時間に変更
 800706c:	4bc0      	ldr	r3, [pc, #768]	; (8007370 <CTRL_pol+0x388>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4ac0      	ldr	r2, [pc, #768]	; (8007374 <CTRL_pol+0x38c>)
 8007072:	6013      	str	r3, [r2, #0]

	 	CTRL_stop();				// 制御停止
 8007074:	f7fe fb7a 	bl	800576c <CTRL_stop>
		CTRL_clrData();					// データクリア
 8007078:	f7fe fb88 	bl	800578c <CTRL_clrData>
		DCM_brakeMot( DCM_R );			// ブレーキ
 800707c:	2000      	movs	r0, #0
 800707e:	f000 fe2f 	bl	8007ce0 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );			// ブレーキ
 8007082:	2001      	movs	r0, #1
 8007084:	f000 fe2c 	bl	8007ce0 <DCM_brakeMot>
	}

	/* 各種センサ入力 */
	ENC_GetDiv( &l_CntR, &l_CntL );					// 移動量[カウント値]を取得
 8007088:	49bb      	ldr	r1, [pc, #748]	; (8007378 <CTRL_pol+0x390>)
 800708a:	48bc      	ldr	r0, [pc, #752]	; (800737c <CTRL_pol+0x394>)
 800708c:	f000 ff4a 	bl	8007f24 <ENC_GetDiv>
	//add get_motor_omega(l_CntR,l_CntL);
	CTRL_refNow();									// 制御に使用する値を現在の状態に更新
 8007090:	f7fe fc5e 	bl	8005950 <CTRL_refNow>
	CTRL_refTarget();								// 制御に使用する値を目標値に更新
 8007094:	f7fe fcf8 	bl	8005a88 <CTRL_refTarget>

	f_NowAngle = GYRO_getNowAngle();					// 現在角度[deg]
 8007098:	f001 f8ec 	bl	8008274 <GYRO_getNowAngle>
 800709c:	eef0 7a40 	vmov.f32	s15, s0
 80070a0:	4bb2      	ldr	r3, [pc, #712]	; (800736c <CTRL_pol+0x384>)
 80070a2:	edc3 7a00 	vstr	s15, [r3]

	/* 制御値取得 */
	CTRL_getFF_speed( &f_feedFoard_speed );					// [制御] フィードフォワード
 80070a6:	f107 031c 	add.w	r3, r7, #28
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fab0 	bl	8006610 <CTRL_getFF_speed>
	CTRL_getFF_angle( &f_feedFoard_angle );					// [制御] フィードフォワード
 80070b0:	f107 0318 	add.w	r3, r7, #24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff faf3 	bl	80066a0 <CTRL_getFF_angle>
	CTRL_getSpeedFB( &f_speedCtrl );				// [制御] 速度
 80070ba:	f107 0314 	add.w	r3, r7, #20
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fb52 	bl	8006768 <CTRL_getSpeedFB>
	CTRL_getAngleSpeedFB( &f_angleSpeedCtrl );		// [制御] 角速度
 80070c4:	f107 0310 	add.w	r3, r7, #16
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fbb9 	bl	8006840 <CTRL_getAngleSpeedFB>
	CTRL_getAngleFB( &f_angleCtrl );		//angle ctrl
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fc50 	bl	8006978 <CTRL_getAngleFB>
	CTRL_getSenFB( &f_distSenCtrl );				// [制御] 壁
 80070d8:	f107 0308 	add.w	r3, r7, #8
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fcb3 	bl	8006a48 <CTRL_getSenFB>
	CTRL_getFloorFriction( &f_floorfriction );
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fd27 	bl	8006b38 <CTRL_getFloorFriction>

	/* 直進制御 */
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 80070ea:	4ba5      	ldr	r3, [pc, #660]	; (8007380 <CTRL_pol+0x398>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01c      	beq.n	800712c <CTRL_pol+0x144>
 80070f2:	4ba3      	ldr	r3, [pc, #652]	; (8007380 <CTRL_pol+0x398>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d018      	beq.n	800712c <CTRL_pol+0x144>
 80070fa:	4ba1      	ldr	r3, [pc, #644]	; (8007380 <CTRL_pol+0x398>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d014      	beq.n	800712c <CTRL_pol+0x144>
 8007102:	4b9f      	ldr	r3, [pc, #636]	; (8007380 <CTRL_pol+0x398>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b0a      	cmp	r3, #10
 8007108:	d010      	beq.n	800712c <CTRL_pol+0x144>
 800710a:	4b9d      	ldr	r3, [pc, #628]	; (8007380 <CTRL_pol+0x398>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b0e      	cmp	r3, #14
 8007110:	d00c      	beq.n	800712c <CTRL_pol+0x144>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 8007112:	4b9b      	ldr	r3, [pc, #620]	; (8007380 <CTRL_pol+0x398>)
 8007114:	781b      	ldrb	r3, [r3, #0]
	if( ( en_Type == CTRL_ACC ) || ( en_Type == CTRL_CONST ) || ( en_Type == CTRL_DEC ) ||( en_Type == CTRL_ENTRY_SURA ) || ( en_Type == CTRL_EXIT_SURA ) ||
 8007116:	2b03      	cmp	r3, #3
 8007118:	d008      	beq.n	800712c <CTRL_pol+0x144>
		( en_Type == CTRL_SKEW_ACC ) || ( en_Type == CTRL_SKEW_CONST ) || ( en_Type == CTRL_SKEW_DEC )
 800711a:	4b99      	ldr	r3, [pc, #612]	; (8007380 <CTRL_pol+0x398>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d004      	beq.n	800712c <CTRL_pol+0x144>
 8007122:	4b97      	ldr	r3, [pc, #604]	; (8007380 <CTRL_pol+0x398>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b05      	cmp	r3, #5
 8007128:	f040 8083 	bne.w	8007232 <CTRL_pol+0x24a>
	){
		TR = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))+(TIRE_D/2/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 800712c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007130:	edd7 7a05 	vldr	s15, [r7, #20]
 8007134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007138:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8007384 <CTRL_pol+0x39c>
 800713c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007140:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8007388 <CTRL_pol+0x3a0>
 8007144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007148:	edd7 6a06 	vldr	s13, [r7, #24]
 800714c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007150:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007154:	edd7 7a02 	vldr	s15, [r7, #8]
 8007158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715c:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800738c <CTRL_pol+0x3a4>
 8007160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007164:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8007390 <CTRL_pol+0x3a8>
 8007168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800716c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007170:	eddf 6a88 	vldr	s13, [pc, #544]	; 8007394 <CTRL_pol+0x3ac>
 8007174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007178:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		TL = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))-(TIRE_D/2/TREAD)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+ f_distSenCtrl)))/GEAR_RATIO;
 800717c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007180:	edd7 7a05 	vldr	s15, [r7, #20]
 8007184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007188:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007384 <CTRL_pol+0x39c>
 800718c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007190:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007388 <CTRL_pol+0x3a0>
 8007194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007198:	edd7 6a06 	vldr	s13, [r7, #24]
 800719c:	edd7 7a04 	vldr	s15, [r7, #16]
 80071a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80071a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80071a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ac:	eddf 6a77 	vldr	s13, [pc, #476]	; 800738c <CTRL_pol+0x3a4>
 80071b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071b4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8007390 <CTRL_pol+0x3a8>
 80071b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80071c0:	eddf 6a74 	vldr	s13, [pc, #464]	; 8007394 <CTRL_pol+0x3ac>
 80071c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		Ir = (TR+0.0255/1000.0)/Torque_constant;
 80071cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071ce:	f7f9 f9e3 	bl	8000598 <__aeabi_f2d>
 80071d2:	a357      	add	r3, pc, #348	; (adr r3, 8007330 <CTRL_pol+0x348>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 f880 	bl	80002dc <__adddf3>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	a354      	add	r3, pc, #336	; (adr r3, 8007338 <CTRL_pol+0x350>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 fb57 	bl	800089c <__aeabi_ddiv>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	f7f9 fd1f 	bl	8000c38 <__aeabi_d2f>
 80071fa:	4603      	mov	r3, r0
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
		Il = (TL+0.0255/1000.0)/Torque_constant;
 80071fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007200:	f7f9 f9ca 	bl	8000598 <__aeabi_f2d>
 8007204:	a34a      	add	r3, pc, #296	; (adr r3, 8007330 <CTRL_pol+0x348>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f867 	bl	80002dc <__adddf3>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	a348      	add	r3, pc, #288	; (adr r3, 8007338 <CTRL_pol+0x350>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f7f9 fb3e 	bl	800089c <__aeabi_ddiv>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	f7f9 fd06 	bl	8000c38 <__aeabi_d2f>
 800722c:	4603      	mov	r3, r0
 800722e:	633b      	str	r3, [r7, #48]	; 0x30
 8007230:	e3e0      	b.n	80079f4 <CTRL_pol+0xa0c>
	}

	/* 壁あて制御 */
	else if( en_Type == CTRL_HIT_WALL ){
 8007232:	4b53      	ldr	r3, [pc, #332]	; (8007380 <CTRL_pol+0x398>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b06      	cmp	r3, #6
 8007238:	f040 80ae 	bne.w	8007398 <CTRL_pol+0x3b0>
		TR = (TIRE_D/2/2)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/2500.0 ));		
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4618      	mov	r0, r3
 8007240:	f7f9 f9aa 	bl	8000598 <__aeabi_f2d>
 8007244:	a33e      	add	r3, pc, #248	; (adr r3, 8007340 <CTRL_pol+0x358>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f9 fb27 	bl	800089c <__aeabi_ddiv>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	a33c      	add	r3, pc, #240	; (adr r3, 8007348 <CTRL_pol+0x360>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	f7f9 f9f4 	bl	8000648 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	a339      	add	r3, pc, #228	; (adr r3, 8007350 <CTRL_pol+0x368>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f9eb 	bl	8000648 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4610      	mov	r0, r2
 8007278:	4619      	mov	r1, r3
 800727a:	f7f9 fcdd 	bl	8000c38 <__aeabi_d2f>
 800727e:	4603      	mov	r3, r0
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c
		TL = (TIRE_D/2/2)*(Weight*(f_feedFoard_speed * FF_HIT_BALANCE_R/2500.0 ));
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4618      	mov	r0, r3
 8007286:	f7f9 f987 	bl	8000598 <__aeabi_f2d>
 800728a:	a32d      	add	r3, pc, #180	; (adr r3, 8007340 <CTRL_pol+0x358>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f9 fb04 	bl	800089c <__aeabi_ddiv>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4610      	mov	r0, r2
 800729a:	4619      	mov	r1, r3
 800729c:	a32a      	add	r3, pc, #168	; (adr r3, 8007348 <CTRL_pol+0x360>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f9d1 	bl	8000648 <__aeabi_dmul>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4610      	mov	r0, r2
 80072ac:	4619      	mov	r1, r3
 80072ae:	a328      	add	r3, pc, #160	; (adr r3, 8007350 <CTRL_pol+0x368>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f7f9 f9c8 	bl	8000648 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	f7f9 fcba 	bl	8000c38 <__aeabi_d2f>
 80072c4:	4603      	mov	r3, r0
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
		Ir = (TR-0.0255/1000.0)/Torque_constant;
 80072c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ca:	f7f9 f965 	bl	8000598 <__aeabi_f2d>
 80072ce:	a318      	add	r3, pc, #96	; (adr r3, 8007330 <CTRL_pol+0x348>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 f800 	bl	80002d8 <__aeabi_dsub>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	a315      	add	r3, pc, #84	; (adr r3, 8007338 <CTRL_pol+0x350>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 fad9 	bl	800089c <__aeabi_ddiv>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7f9 fca1 	bl	8000c38 <__aeabi_d2f>
 80072f6:	4603      	mov	r3, r0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
		Il = (TL-0.0255/1000.0)/Torque_constant;
 80072fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fc:	f7f9 f94c 	bl	8000598 <__aeabi_f2d>
 8007300:	a30b      	add	r3, pc, #44	; (adr r3, 8007330 <CTRL_pol+0x348>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ffe7 	bl	80002d8 <__aeabi_dsub>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	a309      	add	r3, pc, #36	; (adr r3, 8007338 <CTRL_pol+0x350>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f9 fac0 	bl	800089c <__aeabi_ddiv>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	f7f9 fc88 	bl	8000c38 <__aeabi_d2f>
 8007328:	4603      	mov	r3, r0
 800732a:	633b      	str	r3, [r7, #48]	; 0x30
 800732c:	e362      	b.n	80079f4 <CTRL_pol+0xa0c>
 800732e:	bf00      	nop
 8007330:	a821f299 	.word	0xa821f299
 8007334:	3efabd1a 	.word	0x3efabd1a
 8007338:	40000000 	.word	0x40000000
 800733c:	3f4376d5 	.word	0x3f4376d5
 8007340:	00000000 	.word	0x00000000
 8007344:	40a38800 	.word	0x40a38800
 8007348:	80000000 	.word	0x80000000
 800734c:	3f926e97 	.word	0x3f926e97
 8007350:	60000000 	.word	0x60000000
 8007354:	3f69ce07 	.word	0x3f69ce07
 8007358:	20000218 	.word	0x20000218
 800735c:	2000025c 	.word	0x2000025c
 8007360:	20000248 	.word	0x20000248
 8007364:	20000250 	.word	0x20000250
 8007368:	2000027c 	.word	0x2000027c
 800736c:	20000280 	.word	0x20000280
 8007370:	20000008 	.word	0x20000008
 8007374:	2000021c 	.word	0x2000021c
 8007378:	20000fbc 	.word	0x20000fbc
 800737c:	20000fc0 	.word	0x20000fc0
 8007380:	200002da 	.word	0x200002da
 8007384:	3c9374bc 	.word	0x3c9374bc
 8007388:	3b4e703b 	.word	0x3b4e703b
 800738c:	369a59b3 	.word	0x369a59b3
 8007390:	3e4092b9 	.word	0x3e4092b9
 8007394:	40666666 	.word	0x40666666
	}

	/* スラローム制御 */
	else if( ( en_Type == CTRL_ACC_SURA ) || (en_Type == CTRL_CONST_SURA)||( en_Type == CTRL_DEC_SURA ) ){
 8007398:	4b83      	ldr	r3, [pc, #524]	; (80075a8 <CTRL_pol+0x5c0>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b0b      	cmp	r3, #11
 800739e:	d008      	beq.n	80073b2 <CTRL_pol+0x3ca>
 80073a0:	4b81      	ldr	r3, [pc, #516]	; (80075a8 <CTRL_pol+0x5c0>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d004      	beq.n	80073b2 <CTRL_pol+0x3ca>
 80073a8:	4b7f      	ldr	r3, [pc, #508]	; (80075a8 <CTRL_pol+0x5c0>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b0d      	cmp	r3, #13
 80073ae:	f040 81e0 	bne.w	8007772 <CTRL_pol+0x78a>
		/* 左旋回 */
		if( f_LastAngle > 0 ){
 80073b2:	4b7e      	ldr	r3, [pc, #504]	; (80075ac <CTRL_pol+0x5c4>)
 80073b4:	edd3 7a00 	vldr	s15, [r3]
 80073b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c0:	f340 80fa 	ble.w	80075b8 <CTRL_pol+0x5d0>
			TR = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))+(TIRE_D/2/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80073c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80073c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80073cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073d0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80075b0 <CTRL_pol+0x5c8>
 80073d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073d8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80075b4 <CTRL_pol+0x5cc>
 80073dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073e0:	ee17 0a90 	vmov	r0, s15
 80073e4:	f7f9 f8d8 	bl	8000598 <__aeabi_f2d>
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80073f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80073f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80073fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007400:	ee17 0a90 	vmov	r0, s15
 8007404:	f7f9 f8c8 	bl	8000598 <__aeabi_f2d>
 8007408:	a35d      	add	r3, pc, #372	; (adr r3, 8007580 <CTRL_pol+0x598>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 f91b 	bl	8000648 <__aeabi_dmul>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4690      	mov	r8, r2
 8007418:	4699      	mov	r9, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 f8bb 	bl	8000598 <__aeabi_f2d>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f8 ff57 	bl	80002dc <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	a354      	add	r3, pc, #336	; (adr r3, 8007588 <CTRL_pol+0x5a0>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 f904 	bl	8000648 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f8 ff48 	bl	80002dc <__adddf3>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	a34e      	add	r3, pc, #312	; (adr r3, 8007590 <CTRL_pol+0x5a8>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f9 fa1f 	bl	800089c <__aeabi_ddiv>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	f7f9 fbe7 	bl	8000c38 <__aeabi_d2f>
 800746a:	4603      	mov	r3, r0
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))-(TIRE_D/2/TREAD)*(4.6/1000000.0*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 800746e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007472:	edd7 7a05 	vldr	s15, [r7, #20]
 8007476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800747a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80075b0 <CTRL_pol+0x5c8>
 800747e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007482:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80075b4 <CTRL_pol+0x5cc>
 8007486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800748a:	ee17 0a90 	vmov	r0, s15
 800748e:	f7f9 f883 	bl	8000598 <__aeabi_f2d>
 8007492:	4604      	mov	r4, r0
 8007494:	460d      	mov	r5, r1
 8007496:	ed97 7a06 	vldr	s14, [r7, #24]
 800749a:	edd7 7a04 	vldr	s15, [r7, #16]
 800749e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80074a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074aa:	ee17 0a90 	vmov	r0, s15
 80074ae:	f7f9 f873 	bl	8000598 <__aeabi_f2d>
 80074b2:	a333      	add	r3, pc, #204	; (adr r3, 8007580 <CTRL_pol+0x598>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f7f9 f8c6 	bl	8000648 <__aeabi_dmul>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4690      	mov	r8, r2
 80074c2:	4699      	mov	r9, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f9 f866 	bl	8000598 <__aeabi_f2d>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f8 ff02 	bl	80002dc <__adddf3>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	a329      	add	r3, pc, #164	; (adr r3, 8007588 <CTRL_pol+0x5a0>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f7f9 f8af 	bl	8000648 <__aeabi_dmul>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f8 fef1 	bl	80002d8 <__aeabi_dsub>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	a324      	add	r3, pc, #144	; (adr r3, 8007590 <CTRL_pol+0x5a8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f9 f9ca 	bl	800089c <__aeabi_ddiv>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f7f9 fb92 	bl	8000c38 <__aeabi_d2f>
 8007514:	4603      	mov	r3, r0
 8007516:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 8007518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800751a:	f7f9 f83d 	bl	8000598 <__aeabi_f2d>
 800751e:	a31e      	add	r3, pc, #120	; (adr r3, 8007598 <CTRL_pol+0x5b0>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f7f8 feda 	bl	80002dc <__adddf3>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	a31b      	add	r3, pc, #108	; (adr r3, 80075a0 <CTRL_pol+0x5b8>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f7f9 f9b1 	bl	800089c <__aeabi_ddiv>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	f7f9 fb79 	bl	8000c38 <__aeabi_d2f>
 8007546:	4603      	mov	r3, r0
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL+0.0255/1000.0)/Torque_constant;
 800754a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754c:	f7f9 f824 	bl	8000598 <__aeabi_f2d>
 8007550:	a311      	add	r3, pc, #68	; (adr r3, 8007598 <CTRL_pol+0x5b0>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 fec1 	bl	80002dc <__adddf3>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	a30f      	add	r3, pc, #60	; (adr r3, 80075a0 <CTRL_pol+0x5b8>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f9 f998 	bl	800089c <__aeabi_ddiv>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4610      	mov	r0, r2
 8007572:	4619      	mov	r1, r3
 8007574:	f7f9 fb60 	bl	8000c38 <__aeabi_d2f>
 8007578:	4603      	mov	r3, r0
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
		if( f_LastAngle > 0 ){
 800757c:	e23a      	b.n	80079f4 <CTRL_pol+0xa0c>
 800757e:	bf00      	nop
 8007580:	5f379dfc 	.word	0x5f379dfc
 8007584:	3ed34b36 	.word	0x3ed34b36
 8007588:	20000000 	.word	0x20000000
 800758c:	3fc81257 	.word	0x3fc81257
 8007590:	c0000000 	.word	0xc0000000
 8007594:	400ccccc 	.word	0x400ccccc
 8007598:	a821f299 	.word	0xa821f299
 800759c:	3efabd1a 	.word	0x3efabd1a
 80075a0:	40000000 	.word	0x40000000
 80075a4:	3f4376d5 	.word	0x3f4376d5
 80075a8:	200002da 	.word	0x200002da
 80075ac:	2000027c 	.word	0x2000027c
 80075b0:	3c9374bc 	.word	0x3c9374bc
 80075b4:	3b4e703b 	.word	0x3b4e703b
		}
		/*右旋回 */
		else{			
			TR = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))+(TIRE_D/2/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80075b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80075bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80075c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075c4:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80075b0 <CTRL_pol+0x5c8>
 80075c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075cc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80075b4 <CTRL_pol+0x5cc>
 80075d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075d4:	ee17 0a90 	vmov	r0, s15
 80075d8:	f7f8 ffde 	bl	8000598 <__aeabi_f2d>
 80075dc:	4604      	mov	r4, r0
 80075de:	460d      	mov	r5, r1
 80075e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80075e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80075e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80075f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075f4:	ee17 0a90 	vmov	r0, s15
 80075f8:	f7f8 ffce 	bl	8000598 <__aeabi_f2d>
 80075fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80078a0 <CTRL_pol+0x8b8>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4690      	mov	r8, r2
 800760c:	4699      	mov	r9, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7f8 ffc1 	bl	8000598 <__aeabi_f2d>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4640      	mov	r0, r8
 800761c:	4649      	mov	r1, r9
 800761e:	f7f8 fe5d 	bl	80002dc <__adddf3>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	a39f      	add	r3, pc, #636	; (adr r3, 80078a8 <CTRL_pol+0x8c0>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f9 f80a 	bl	8000648 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4620      	mov	r0, r4
 800763a:	4629      	mov	r1, r5
 800763c:	f7f8 fe4e 	bl	80002dc <__adddf3>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4610      	mov	r0, r2
 8007646:	4619      	mov	r1, r3
 8007648:	a399      	add	r3, pc, #612	; (adr r3, 80078b0 <CTRL_pol+0x8c8>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 f925 	bl	800089c <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f7f9 faed 	bl	8000c38 <__aeabi_d2f>
 800765e:	4603      	mov	r3, r0
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))-(TIRE_D/2/TREAD)*(4.6/1000000.0*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007662:	ed97 7a07 	vldr	s14, [r7, #28]
 8007666:	edd7 7a05 	vldr	s15, [r7, #20]
 800766a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800766e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80078cc <CTRL_pol+0x8e4>
 8007672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007676:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80078d0 <CTRL_pol+0x8e8>
 800767a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800767e:	ee17 0a90 	vmov	r0, s15
 8007682:	f7f8 ff89 	bl	8000598 <__aeabi_f2d>
 8007686:	4604      	mov	r4, r0
 8007688:	460d      	mov	r5, r1
 800768a:	ed97 7a04 	vldr	s14, [r7, #16]
 800768e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007696:	edd7 7a03 	vldr	s15, [r7, #12]
 800769a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769e:	ee17 0a90 	vmov	r0, s15
 80076a2:	f7f8 ff79 	bl	8000598 <__aeabi_f2d>
 80076a6:	a37e      	add	r3, pc, #504	; (adr r3, 80078a0 <CTRL_pol+0x8b8>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 ffcc 	bl	8000648 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4690      	mov	r8, r2
 80076b6:	4699      	mov	r9, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 ff6c 	bl	8000598 <__aeabi_f2d>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f8 fe08 	bl	80002dc <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	a374      	add	r3, pc, #464	; (adr r3, 80078a8 <CTRL_pol+0x8c0>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 ffb5 	bl	8000648 <__aeabi_dmul>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4620      	mov	r0, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7f8 fdf7 	bl	80002d8 <__aeabi_dsub>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4610      	mov	r0, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	a36f      	add	r3, pc, #444	; (adr r3, 80078b0 <CTRL_pol+0x8c8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f9 f8d0 	bl	800089c <__aeabi_ddiv>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f9 fa98 	bl	8000c38 <__aeabi_d2f>
 8007708:	4603      	mov	r3, r0
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 800770c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800770e:	f7f8 ff43 	bl	8000598 <__aeabi_f2d>
 8007712:	a369      	add	r3, pc, #420	; (adr r3, 80078b8 <CTRL_pol+0x8d0>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 fde0 	bl	80002dc <__adddf3>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4610      	mov	r0, r2
 8007722:	4619      	mov	r1, r3
 8007724:	a366      	add	r3, pc, #408	; (adr r3, 80078c0 <CTRL_pol+0x8d8>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f7f9 f8b7 	bl	800089c <__aeabi_ddiv>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	f7f9 fa7f 	bl	8000c38 <__aeabi_d2f>
 800773a:	4603      	mov	r3, r0
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL+0.0255/1000.0)/Torque_constant;
 800773e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007740:	f7f8 ff2a 	bl	8000598 <__aeabi_f2d>
 8007744:	a35c      	add	r3, pc, #368	; (adr r3, 80078b8 <CTRL_pol+0x8d0>)
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f8 fdc7 	bl	80002dc <__adddf3>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	a35a      	add	r3, pc, #360	; (adr r3, 80078c0 <CTRL_pol+0x8d8>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f9 f89e 	bl	800089c <__aeabi_ddiv>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4610      	mov	r0, r2
 8007766:	4619      	mov	r1, r3
 8007768:	f7f9 fa66 	bl	8000c38 <__aeabi_d2f>
 800776c:	4603      	mov	r3, r0
 800776e:	633b      	str	r3, [r7, #48]	; 0x30
		if( f_LastAngle > 0 ){
 8007770:	e140      	b.n	80079f4 <CTRL_pol+0xa0c>
	}

	/* 超信地旋回 */
	else{
		/* 左旋回 */
		if( f_LastAngle > 0 ){			
 8007772:	4b55      	ldr	r3, [pc, #340]	; (80078c8 <CTRL_pol+0x8e0>)
 8007774:	edd3 7a00 	vldr	s15, [r3]
 8007778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800777c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007780:	f340 80ae 	ble.w	80078e0 <CTRL_pol+0x8f8>
			TR = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))+(TIRE_D/2/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007784:	ed97 7a07 	vldr	s14, [r7, #28]
 8007788:	edd7 7a05 	vldr	s15, [r7, #20]
 800778c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007790:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80078cc <CTRL_pol+0x8e4>
 8007794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007798:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80078d0 <CTRL_pol+0x8e8>
 800779c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80077a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80077a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80077ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80077b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80078d4 <CTRL_pol+0x8ec>
 80077b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80077bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80077c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80078d8 <CTRL_pol+0x8f0>
 80077c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80077cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077d0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80078dc <CTRL_pol+0x8f4>
 80077d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))-(TIRE_D/2/TREAD_imagin)*(Inertia*(f_feedFoard_angle + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80077dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80077e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80077e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80078cc <CTRL_pol+0x8e4>
 80077ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077f0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80078d0 <CTRL_pol+0x8e8>
 80077f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80077fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8007800:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007804:	edd7 7a03 	vldr	s15, [r7, #12]
 8007808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780c:	eddf 6a31 	vldr	s13, [pc, #196]	; 80078d4 <CTRL_pol+0x8ec>
 8007810:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007814:	edd7 7a01 	vldr	s15, [r7, #4]
 8007818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80078d8 <CTRL_pol+0x8f0>
 8007820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007828:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80078dc <CTRL_pol+0x8f4>
 800782c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007830:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Ir = (TR+0.0255/1000.0)/Torque_constant;
 8007834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007836:	f7f8 feaf 	bl	8000598 <__aeabi_f2d>
 800783a:	a31f      	add	r3, pc, #124	; (adr r3, 80078b8 <CTRL_pol+0x8d0>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd4c 	bl	80002dc <__adddf3>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4610      	mov	r0, r2
 800784a:	4619      	mov	r1, r3
 800784c:	a31c      	add	r3, pc, #112	; (adr r3, 80078c0 <CTRL_pol+0x8d8>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f9 f823 	bl	800089c <__aeabi_ddiv>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	f7f9 f9eb 	bl	8000c38 <__aeabi_d2f>
 8007862:	4603      	mov	r3, r0
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL-0.0255/1000.0)/Torque_constant;
 8007866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007868:	f7f8 fe96 	bl	8000598 <__aeabi_f2d>
 800786c:	a312      	add	r3, pc, #72	; (adr r3, 80078b8 <CTRL_pol+0x8d0>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 fd31 	bl	80002d8 <__aeabi_dsub>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	a310      	add	r3, pc, #64	; (adr r3, 80078c0 <CTRL_pol+0x8d8>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f9 f80a 	bl	800089c <__aeabi_ddiv>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4610      	mov	r0, r2
 800788e:	4619      	mov	r1, r3
 8007890:	f7f9 f9d2 	bl	8000c38 <__aeabi_d2f>
 8007894:	4603      	mov	r3, r0
 8007896:	633b      	str	r3, [r7, #48]	; 0x30
 8007898:	e0ac      	b.n	80079f4 <CTRL_pol+0xa0c>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
 80078a0:	5f379dfc 	.word	0x5f379dfc
 80078a4:	3ed34b36 	.word	0x3ed34b36
 80078a8:	20000000 	.word	0x20000000
 80078ac:	3fc81257 	.word	0x3fc81257
 80078b0:	c0000000 	.word	0xc0000000
 80078b4:	400ccccc 	.word	0x400ccccc
 80078b8:	a821f299 	.word	0xa821f299
 80078bc:	3efabd1a 	.word	0x3efabd1a
 80078c0:	40000000 	.word	0x40000000
 80078c4:	3f4376d5 	.word	0x3f4376d5
 80078c8:	2000027c 	.word	0x2000027c
 80078cc:	3c9374bc 	.word	0x3c9374bc
 80078d0:	3b4e703b 	.word	0x3b4e703b
 80078d4:	369a59b3 	.word	0x369a59b3
 80078d8:	3e272129 	.word	0x3e272129
 80078dc:	40666666 	.word	0x40666666
		}
		/* 右旋回 */
		else{			
			TR = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))+(TIRE_D/2/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 80078e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80078e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80078e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078ec:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80078cc <CTRL_pol+0x8e4>
 80078f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078f4:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80078d0 <CTRL_pol+0x8e8>
 80078f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8007900:	edd7 7a06 	vldr	s15, [r7, #24]
 8007904:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007908:	edd7 7a03 	vldr	s15, [r7, #12]
 800790c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007910:	ed5f 6a10 	vldr	s13, [pc, #-64]	; 80078d4 <CTRL_pol+0x8ec>
 8007914:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007918:	edd7 7a01 	vldr	s15, [r7, #4]
 800791c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007920:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 80078d8 <CTRL_pol+0x8f0>
 8007924:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800792c:	ed5f 6a15 	vldr	s13, [pc, #-84]	; 80078dc <CTRL_pol+0x8f4>
 8007930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007934:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			TL = ((TIRE_D/2/2)*(Weight*(f_feedFoard_speed + f_speedCtrl))-(TIRE_D/2/TREAD_imagin)*(Inertia*(f_feedFoard_angle*(-1) + f_angleSpeedCtrl+f_angleCtrl)+f_floorfriction))/GEAR_RATIO;
 8007938:	ed97 7a07 	vldr	s14, [r7, #28]
 800793c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007944:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 80078cc <CTRL_pol+0x8e4>
 8007948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800794c:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 80078d0 <CTRL_pol+0x8e8>
 8007950:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007954:	edd7 6a04 	vldr	s13, [r7, #16]
 8007958:	edd7 7a06 	vldr	s15, [r7, #24]
 800795c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007960:	edd7 7a03 	vldr	s15, [r7, #12]
 8007964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007968:	ed5f 6a26 	vldr	s13, [pc, #-152]	; 80078d4 <CTRL_pol+0x8ec>
 800796c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007970:	edd7 7a01 	vldr	s15, [r7, #4]
 8007974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007978:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 80078d8 <CTRL_pol+0x8f0>
 800797c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007984:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 80078dc <CTRL_pol+0x8f4>
 8007988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800798c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			Ir = (TR-0.0255/1000.0)/Torque_constant;
 8007990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007992:	f7f8 fe01 	bl	8000598 <__aeabi_f2d>
 8007996:	a3a9      	add	r3, pc, #676	; (adr r3, 8007c3c <CTRL_pol+0xc54>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fc9c 	bl	80002d8 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4610      	mov	r0, r2
 80079a6:	4619      	mov	r1, r3
 80079a8:	a3a6      	add	r3, pc, #664	; (adr r3, 8007c44 <CTRL_pol+0xc5c>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 ff75 	bl	800089c <__aeabi_ddiv>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4610      	mov	r0, r2
 80079b8:	4619      	mov	r1, r3
 80079ba:	f7f9 f93d 	bl	8000c38 <__aeabi_d2f>
 80079be:	4603      	mov	r3, r0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
			Il = (TL+0.0255/1000.0)/Torque_constant;
 80079c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c4:	f7f8 fde8 	bl	8000598 <__aeabi_f2d>
 80079c8:	a39c      	add	r3, pc, #624	; (adr r3, 8007c3c <CTRL_pol+0xc54>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fc85 	bl	80002dc <__adddf3>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4610      	mov	r0, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	a39a      	add	r3, pc, #616	; (adr r3, 8007c44 <CTRL_pol+0xc5c>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 ff5c 	bl	800089c <__aeabi_ddiv>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4610      	mov	r0, r2
 80079ea:	4619      	mov	r1, r3
 80079ec:	f7f9 f924 	bl	8000c38 <__aeabi_d2f>
 80079f0:	4603      	mov	r3, r0
 80079f2:	633b      	str	r3, [r7, #48]	; 0x30
		}
	}
	f_duty10_R = FF_BALANCE_R*(Motor_Register*Ir+f_MotorR_AngleS*0.001033/1000.0/2.0/PI)/get_battLv();	
 80079f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80079f8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8007c18 <CTRL_pol+0xc30>
 80079fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a00:	ee17 0a90 	vmov	r0, s15
 8007a04:	f7f8 fdc8 	bl	8000598 <__aeabi_f2d>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	4b83      	ldr	r3, [pc, #524]	; (8007c1c <CTRL_pol+0xc34>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f8 fdc1 	bl	8000598 <__aeabi_f2d>
 8007a16:	a37a      	add	r3, pc, #488	; (adr r3, 8007c00 <CTRL_pol+0xc18>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 fe14 	bl	8000648 <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	4b7c      	ldr	r3, [pc, #496]	; (8007c20 <CTRL_pol+0xc38>)
 8007a2e:	f7f8 ff35 	bl	800089c <__aeabi_ddiv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a42:	f7f8 ff2b 	bl	800089c <__aeabi_ddiv>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	a36e      	add	r3, pc, #440	; (adr r3, 8007c08 <CTRL_pol+0xc20>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 ff22 	bl	800089c <__aeabi_ddiv>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f8 fc3c 	bl	80002dc <__adddf3>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	f003 feb0 	bl	800b7d0 <get_battLv>
 8007a70:	ee10 3a10 	vmov	r3, s0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7f8 fd8f 	bl	8000598 <__aeabi_f2d>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 ff0b 	bl	800089c <__aeabi_ddiv>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7f9 f8d3 	bl	8000c38 <__aeabi_d2f>
 8007a92:	4603      	mov	r3, r0
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
	f_duty10_L = FF_BALANCE_L*(Motor_Register*Il+f_MotorL_AngleS*0.001033/1000.0/2.0/PI)/get_battLv();	
 8007a96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007a9a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007c18 <CTRL_pol+0xc30>
 8007a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aa2:	ee17 0a90 	vmov	r0, s15
 8007aa6:	f7f8 fd77 	bl	8000598 <__aeabi_f2d>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	4b5d      	ldr	r3, [pc, #372]	; (8007c24 <CTRL_pol+0xc3c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7f8 fd70 	bl	8000598 <__aeabi_f2d>
 8007ab8:	a351      	add	r3, pc, #324	; (adr r3, 8007c00 <CTRL_pol+0xc18>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fdc3 	bl	8000648 <__aeabi_dmul>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	4b54      	ldr	r3, [pc, #336]	; (8007c20 <CTRL_pol+0xc38>)
 8007ad0:	f7f8 fee4 	bl	800089c <__aeabi_ddiv>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ae4:	f7f8 feda 	bl	800089c <__aeabi_ddiv>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4610      	mov	r0, r2
 8007aee:	4619      	mov	r1, r3
 8007af0:	a345      	add	r3, pc, #276	; (adr r3, 8007c08 <CTRL_pol+0xc20>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fed1 	bl	800089c <__aeabi_ddiv>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fbeb 	bl	80002dc <__adddf3>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	4b45      	ldr	r3, [pc, #276]	; (8007c28 <CTRL_pol+0xc40>)
 8007b14:	f7f8 fd98 	bl	8000648 <__aeabi_dmul>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	461d      	mov	r5, r3
 8007b20:	f003 fe56 	bl	800b7d0 <get_battLv>
 8007b24:	ee10 3a10 	vmov	r3, s0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f8 fd35 	bl	8000598 <__aeabi_f2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f8 feb1 	bl	800089c <__aeabi_ddiv>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7f9 f879 	bl	8000c38 <__aeabi_d2f>
 8007b46:	4603      	mov	r3, r0
 8007b48:	623b      	str	r3, [r7, #32]

	templog1 = f_floorfriction;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a37      	ldr	r2, [pc, #220]	; (8007c2c <CTRL_pol+0xc44>)
 8007b4e:	6013      	str	r3, [r2, #0]
	templog2 = f_duty10_R;
 8007b50:	4a37      	ldr	r2, [pc, #220]	; (8007c30 <CTRL_pol+0xc48>)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	6013      	str	r3, [r2, #0]

	escape_wait = escape_wait+0.001;
 8007b56:	4b37      	ldr	r3, [pc, #220]	; (8007c34 <CTRL_pol+0xc4c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f8 fd1c 	bl	8000598 <__aeabi_f2d>
 8007b60:	a32b      	add	r3, pc, #172	; (adr r3, 8007c10 <CTRL_pol+0xc28>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fbb9 	bl	80002dc <__adddf3>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	f7f9 f861 	bl	8000c38 <__aeabi_d2f>
 8007b76:	4603      	mov	r3, r0
 8007b78:	4a2e      	ldr	r2, [pc, #184]	; (8007c34 <CTRL_pol+0xc4c>)
 8007b7a:	6013      	str	r3, [r2, #0]
	CTRL_outMot( f_duty10_R, f_duty10_L );				// モータへ出力
 8007b7c:	edd7 0a08 	vldr	s1, [r7, #32]
 8007b80:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8007b84:	f7ff f9a0 	bl	8006ec8 <CTRL_outMot>

	f_Time += 0.001;
 8007b88:	4b2b      	ldr	r3, [pc, #172]	; (8007c38 <CTRL_pol+0xc50>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fd03 	bl	8000598 <__aeabi_f2d>
 8007b92:	a31f      	add	r3, pc, #124	; (adr r3, 8007c10 <CTRL_pol+0xc28>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fba0 	bl	80002dc <__adddf3>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f7f9 f848 	bl	8000c38 <__aeabi_d2f>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	4a23      	ldr	r2, [pc, #140]	; (8007c38 <CTRL_pol+0xc50>)
 8007bac:	6013      	str	r3, [r2, #0]

	/* 壁切れチェック */
	if( MOT_getWallEdgeType() == MOT_WALL_EDGE_RIGHT ){
 8007bae:	f003 fd37 	bl	800b620 <MOT_getWallEdgeType>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10b      	bne.n	8007bd0 <CTRL_pol+0xbe8>

		/* 壁抜け */
		if( DIST_isWall_R_SIDE() == FALSE ){
 8007bb8:	f004 f9b2 	bl	800bf20 <DIST_isWall_R_SIDE>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f083 0301 	eor.w	r3, r3, #1
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <CTRL_pol+0xc0c>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f003 fd35 	bl	800b638 <MOT_setWallEdge>
 8007bce:	e011      	b.n	8007bf4 <CTRL_pol+0xc0c>
		}
	}
	else if( MOT_getWallEdgeType() == MOT_WALL_EDGE_LEFT ){
 8007bd0:	f003 fd26 	bl	800b620 <MOT_getWallEdgeType>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d10c      	bne.n	8007bf4 <CTRL_pol+0xc0c>

		/* 壁抜け */
		if( DIST_isWall_L_SIDE() == FALSE ){
 8007bda:	f004 f9b7 	bl	800bf4c <DIST_isWall_L_SIDE>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f083 0301 	eor.w	r3, r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <CTRL_pol+0xc0c>
			MOT_setWallEdge( TRUE );		// 壁の切れ目を検知
 8007bea:	2001      	movs	r0, #1
 8007bec:	f003 fd24 	bl	800b638 <MOT_setWallEdge>
 8007bf0:	e000      	b.n	8007bf4 <CTRL_pol+0xc0c>
		 return;		// 制御無効状態
 8007bf2:	bf00      	nop
		}
	}
}
 8007bf4:	3738      	adds	r7, #56	; 0x38
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bfc:	f3af 8000 	nop.w
 8007c00:	4ddf86e4 	.word	0x4ddf86e4
 8007c04:	3f50ecb7 	.word	0x3f50ecb7
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	400921fa 	.word	0x400921fa
 8007c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8007c14:	3f50624d 	.word	0x3f50624d
 8007c18:	4099999a 	.word	0x4099999a
 8007c1c:	2000023c 	.word	0x2000023c
 8007c20:	408f4000 	.word	0x408f4000
 8007c24:	20000240 	.word	0x20000240
 8007c28:	3ff80000 	.word	0x3ff80000
 8007c2c:	2000070c 	.word	0x2000070c
 8007c30:	200002d4 	.word	0x200002d4
 8007c34:	200006f4 	.word	0x200006f4
 8007c38:	2000021c 	.word	0x2000021c
 8007c3c:	a821f299 	.word	0xa821f299
 8007c40:	3efabd1a 	.word	0x3efabd1a
 8007c44:	40000000 	.word	0x40000000
 8007c48:	3f4376d5 	.word	0x3f4376d5

08007c4c <Failsafe_flag>:

void Failsafe_flag(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
	bl_failsafe = TRUE;
 8007c50:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <Failsafe_flag+0x14>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
	SetLED(0x1F);
 8007c56:	201f      	movs	r0, #31
 8007c58:	f7fa f9b6 	bl	8001fc8 <SetLED>
}
 8007c5c:	bf00      	nop
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000294 	.word	0x20000294

08007c64 <Failsafe_flag_off>:

void Failsafe_flag_off(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
	bl_failsafe = FALSE;
 8007c68:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <Failsafe_flag_off+0x14>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000294 	.word	0x20000294

08007c7c <SYS_isOutOfCtrl>:

bool SYS_isOutOfCtrl( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
	return bl_failsafe;
 8007c80:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <SYS_isOutOfCtrl+0x14>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000294 	.word	0x20000294

08007c94 <DCM_setDirCw>:
 */

#include "hal/DCM.h"

void DCM_setDirCw( enDCM_ID en_id )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <DCM_setDirCw+0x18>
		Set_MOT0(1);	//tmp
 8007ca4:	2001      	movs	r0, #1
 8007ca6:	f7fa fa7b 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(0);	//tmp

	}
}
 8007caa:	e002      	b.n	8007cb2 <DCM_setDirCw+0x1e>
		Set_MOT1(0);	//tmp
 8007cac:	2000      	movs	r0, #0
 8007cae:	f7fa fa91 	bl	80021d4 <Set_MOT1>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <DCM_setDirCcw>:

void DCM_setDirCcw( enDCM_ID en_id )
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	71fb      	strb	r3, [r7, #7]
	/* 回転方向設定 */
	if( en_id == DCM_R ){			// 右
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <DCM_setDirCcw+0x18>
		Set_MOT0(0);	//tmp
 8007cca:	2000      	movs	r0, #0
 8007ccc:	f7fa fa68 	bl	80021a0 <Set_MOT0>
	}
	else{							// 左
		Set_MOT1(1);	//tmp
	}
}
 8007cd0:	e002      	b.n	8007cd8 <DCM_setDirCcw+0x1e>
		Set_MOT1(1);	//tmp
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	f7fa fa7e 	bl	80021d4 <Set_MOT1>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <DCM_brakeMot>:

void DCM_brakeMot( enDCM_ID en_id )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	71fb      	strb	r3, [r7, #7]
	/* 停止設定 */
	if( en_id == DCM_R ){			// 右
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <DCM_brakeMot+0x18>
		Set_DutyTIM2(0);
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7fd f8c9 	bl	8004e88 <Set_DutyTIM2>
	}
	else{							// 左
		Set_DutyTIM3(0);
	}
}
 8007cf6:	e002      	b.n	8007cfe <DCM_brakeMot+0x1e>
		Set_DutyTIM3(0);
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f7fd f905 	bl	8004f08 <Set_DutyTIM3>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <DCM_staMot>:

void DCM_staMot( enDCM_ID en_id )
{	
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
	/* タイマスタート */
	if( en_id == DCM_R ){			// 右
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <DCM_staMot+0x16>
		Enable_TIM2();
 8007d16:	f7fd f8a3 	bl	8004e60 <Enable_TIM2>
	}
	else{							// 左
	   Enable_TIM3();
	}
}
 8007d1a:	e001      	b.n	8007d20 <DCM_staMot+0x1a>
	   Enable_TIM3();
 8007d1c:	f7fd f8a8 	bl	8004e70 <Enable_TIM3>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <DCM_staMotAll>:

void DCM_staMotAll( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
	DCM_staMot(DCM_R);									// 右モータON
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f7ff ffea 	bl	8007d06 <DCM_staMot>
	DCM_staMot(DCM_L);									// 左モータON
 8007d32:	2001      	movs	r0, #1
 8007d34:	f7ff ffe7 	bl	8007d06 <DCM_staMot>
}
 8007d38:	bf00      	nop
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <DCM_setPwmDuty>:

void DCM_setPwmDuty( enDCM_ID en_id, uint16_t us_duty10 )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	460a      	mov	r2, r1
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80bb      	strh	r3, [r7, #4]
	/* PWM設定 */
	if( en_id == DCM_R ){				// 右
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d115      	bne.n	8007d7e <DCM_setPwmDuty+0x42>

		if( 0 == us_duty10 ){			// Duty0%設定
 8007d52:	88bb      	ldrh	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <DCM_setPwmDuty+0x26>
			DCM_brakeMot( en_id );
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ffc0 	bl	8007ce0 <DCM_brakeMot>
			}
			Set_DutyTIM3(us_duty10);
			DCM_staMot( en_id );		// 回転開始
		}
	}
}
 8007d60:	e022      	b.n	8007da8 <DCM_setPwmDuty+0x6c>
			if(us_duty10<50){
 8007d62:	88bb      	ldrh	r3, [r7, #4]
 8007d64:	2b31      	cmp	r3, #49	; 0x31
 8007d66:	d801      	bhi.n	8007d6c <DCM_setPwmDuty+0x30>
				us_duty10 = 50;
 8007d68:	2332      	movs	r3, #50	; 0x32
 8007d6a:	80bb      	strh	r3, [r7, #4]
			Set_DutyTIM2(us_duty10);
 8007d6c:	88bb      	ldrh	r3, [r7, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fd f88a 	bl	8004e88 <Set_DutyTIM2>
			DCM_staMot( en_id );		// 回転開始
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ffc5 	bl	8007d06 <DCM_staMot>
}
 8007d7c:	e014      	b.n	8007da8 <DCM_setPwmDuty+0x6c>
		if( 0 == us_duty10 ){			// Duty0%
 8007d7e:	88bb      	ldrh	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <DCM_setPwmDuty+0x52>
			DCM_brakeMot( en_id );
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ffaa 	bl	8007ce0 <DCM_brakeMot>
}
 8007d8c:	e00c      	b.n	8007da8 <DCM_setPwmDuty+0x6c>
			if(us_duty10<50){
 8007d8e:	88bb      	ldrh	r3, [r7, #4]
 8007d90:	2b31      	cmp	r3, #49	; 0x31
 8007d92:	d801      	bhi.n	8007d98 <DCM_setPwmDuty+0x5c>
				us_duty10 = 50;
 8007d94:	2332      	movs	r3, #50	; 0x32
 8007d96:	80bb      	strh	r3, [r7, #4]
			Set_DutyTIM3(us_duty10);
 8007d98:	88bb      	ldrh	r3, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fd f8b4 	bl	8004f08 <Set_DutyTIM3>
			DCM_staMot( en_id );		// 回転開始
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff ffaf 	bl	8007d06 <DCM_staMot>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <Get_encoder_value>:
uint16_t ENC_R_CNT;
uint16_t ENC_L_CNT_old;
uint16_t ENC_R_CNT_old;

uint16_t Get_encoder_value(en_endir dir)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) return ENC_L_CNT;
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <Get_encoder_value+0x16>
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <Get_encoder_value+0x28>)
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	e001      	b.n	8007dca <Get_encoder_value+0x1a>
	else return ENC_R_CNT;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <Get_encoder_value+0x2c>)
 8007dc8:	881b      	ldrh	r3, [r3, #0]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20000fc4 	.word	0x20000fc4
 8007ddc:	20000fc8 	.word	0x20000fc8

08007de0 <MA702_ReadByte>:

void MA702_ReadByte(en_endir dir)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
	encoderdir = dir;
 8007dea:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <MA702_ReadByte+0x34>)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	7013      	strb	r3, [r2, #0]
	SetSPI2TransmitData(0,0x00);
 8007df0:	2100      	movs	r1, #0
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7fc f854 	bl	8003ea0 <SetSPI2TransmitData>
	SetSPI2TransmitData(1,0x00);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	f7fc f850 	bl	8003ea0 <SetSPI2TransmitData>

	SPI2_DMA_Communication(2,encoderdir);
 8007e00:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <MA702_ReadByte+0x34>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	2002      	movs	r0, #2
 8007e08:	f7fb ffb2 	bl	8003d70 <SPI2_DMA_Communication>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000706 	.word	0x20000706

08007e18 <recv_spi_encoder>:

void recv_spi_encoder(en_endir dir)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	71fb      	strb	r3, [r7, #7]
	MA702_ReadByte(dir);
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff ffdb 	bl	8007de0 <MA702_ReadByte>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <Set_encoder_data>:

void Set_encoder_data(en_endir dir)
{
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
	if(dir == enL) ENC_L_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d112      	bne.n	8007e6a <Set_encoder_data+0x36>
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7fc f81b 	bl	8003e80 <Get_SPI2ReciveData>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	b21c      	sxth	r4, r3
 8007e50:	2001      	movs	r0, #1
 8007e52:	f7fc f815 	bl	8003e80 <Get_SPI2ReciveData>
 8007e56:	4603      	mov	r3, r0
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	4323      	orrs	r3, r4
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <Set_encoder_data+0x64>)
 8007e66:	801a      	strh	r2, [r3, #0]
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
}
 8007e68:	e011      	b.n	8007e8e <Set_encoder_data+0x5a>
	else ENC_R_CNT = ((uint16_t)Get_SPI2ReciveData(0)<<4|Get_SPI2ReciveData(1)>>4);
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	f7fc f808 	bl	8003e80 <Get_SPI2ReciveData>
 8007e70:	4603      	mov	r3, r0
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	b21c      	sxth	r4, r3
 8007e76:	2001      	movs	r0, #1
 8007e78:	f7fc f802 	bl	8003e80 <Get_SPI2ReciveData>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	4323      	orrs	r3, r4
 8007e86:	b21b      	sxth	r3, r3
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <Set_encoder_data+0x68>)
 8007e8c:	801a      	strh	r2, [r3, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd90      	pop	{r4, r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000fc4 	.word	0x20000fc4
 8007e9c:	20000fc8 	.word	0x20000fc8

08007ea0 <Runmode_check>:


uint8_t Runmode_check( enDCM_ID en_id )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
	if(en_id == DCM_R){
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d117      	bne.n	8007ee0 <Runmode_check+0x40>
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Right)) ){
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <Runmode_check+0x7c>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b06      	cmp	r3, #6
 8007eb6:	d00f      	beq.n	8007ed8 <Runmode_check+0x38>
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <Runmode_check+0x7c>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b07      	cmp	r3, #7
 8007ebe:	d007      	beq.n	8007ed0 <Runmode_check+0x30>
 8007ec0:	4b16      	ldr	r3, [pc, #88]	; (8007f1c <Runmode_check+0x7c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d003      	beq.n	8007ed0 <Runmode_check+0x30>
 8007ec8:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <Runmode_check+0x7c>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d105      	bne.n	8007edc <Runmode_check+0x3c>
 8007ed0:	4b13      	ldr	r3, [pc, #76]	; (8007f20 <Runmode_check+0x80>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <Runmode_check+0x3c>
			return(0);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e018      	b.n	8007f0e <Runmode_check+0x6e>
		}
		else{
			return(1);
 8007edc:	2301      	movs	r3, #1
 8007ede:	e016      	b.n	8007f0e <Runmode_check+0x6e>
		}
	}
	else{
		if((en_Type == 6)||(((en_Type == 7)||(en_Type == 8)||(en_Type == 9))&&(en_Turntype == Left)) ){
 8007ee0:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <Runmode_check+0x7c>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d00f      	beq.n	8007f08 <Runmode_check+0x68>
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <Runmode_check+0x7c>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b07      	cmp	r3, #7
 8007eee:	d007      	beq.n	8007f00 <Runmode_check+0x60>
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <Runmode_check+0x7c>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d003      	beq.n	8007f00 <Runmode_check+0x60>
 8007ef8:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <Runmode_check+0x7c>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d105      	bne.n	8007f0c <Runmode_check+0x6c>
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <Runmode_check+0x80>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <Runmode_check+0x6c>
			return(0);
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <Runmode_check+0x6e>
		}
		else{
			return(1);
 8007f0c:	2301      	movs	r3, #1
		}
	}
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	200002da 	.word	0x200002da
 8007f20:	200002ec 	.word	0x200002ec

08007f24 <ENC_GetDiv>:

void ENC_GetDiv( int32_t* p_r, int32_t* p_l )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
	int32_t cntR;
	int32_t cntL;
	int32_t cntR_dif;
	int32_t cntL_dif;
//	recv_spi_encoder();
	cntR_dif = ENC_R_CNT - ENC_R_CNT_old;
 8007f2e:	4b3f      	ldr	r3, [pc, #252]	; (800802c <ENC_GetDiv+0x108>)
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <ENC_GetDiv+0x10c>)
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	60fb      	str	r3, [r7, #12]
	cntL_dif = ENC_L_CNT_old - ENC_L_CNT;
 8007f3c:	4b3d      	ldr	r3, [pc, #244]	; (8008034 <ENC_GetDiv+0x110>)
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b3d      	ldr	r3, [pc, #244]	; (8008038 <ENC_GetDiv+0x114>)
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	60bb      	str	r3, [r7, #8]

	//モードを使って正逆をチェックして加算方法を決める
	if(Runmode_check(DCM_R) == 1){	//正方向カウント
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f7ff ffa8 	bl	8007ea0 <Runmode_check>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d114      	bne.n	8007f80 <ENC_GetDiv+0x5c>
		//右
		if(cntR_dif<(-32768>>4)){
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8007f5c:	da04      	bge.n	8007f68 <ENC_GetDiv+0x44>
			cntR = cntR_dif + (65536>>4);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e01f      	b.n	8007fa8 <ENC_GetDiv+0x84>
		}
		else if (cntR_dif>(32768>>4)){
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6e:	dd04      	ble.n	8007f7a <ENC_GetDiv+0x56>
			cntR = cntR_dif - (65536>>4);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e016      	b.n	8007fa8 <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	e013      	b.n	8007fa8 <ENC_GetDiv+0x84>
		}
	}
	else{
		if(cntR_dif>(32768>>4)){
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f86:	dd04      	ble.n	8007f92 <ENC_GetDiv+0x6e>
			cntR = cntR_dif - (65536>>4);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e00a      	b.n	8007fa8 <ENC_GetDiv+0x84>
		}
		else if(cntR_dif<(-32768>>4)){
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8007f98:	da04      	bge.n	8007fa4 <ENC_GetDiv+0x80>
			cntR = cntR_dif + (65536>>4);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e001      	b.n	8007fa8 <ENC_GetDiv+0x84>
		}
		else{
			cntR = cntR_dif;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	617b      	str	r3, [r7, #20]
		}
	}

	if(Runmode_check(DCM_L) == 1){
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7ff ff79 	bl	8007ea0 <Runmode_check>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d114      	bne.n	8007fde <ENC_GetDiv+0xba>
		//左
		if(cntL_dif<(-32768>>4)){
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8007fba:	da04      	bge.n	8007fc6 <ENC_GetDiv+0xa2>
			cntL = cntL_dif + (65536>>4);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e01f      	b.n	8008006 <ENC_GetDiv+0xe2>
		}
		else if (cntL_dif >(32768>>4)){
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fcc:	dd04      	ble.n	8007fd8 <ENC_GetDiv+0xb4>
			cntL = cntL_dif -(65536>>4);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e016      	b.n	8008006 <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e013      	b.n	8008006 <ENC_GetDiv+0xe2>
		}
	}
	else{
		if(cntL_dif>(32768>>4)){
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe4:	dd04      	ble.n	8007ff0 <ENC_GetDiv+0xcc>
			cntL = cntL_dif - (65536>>4);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	e00a      	b.n	8008006 <ENC_GetDiv+0xe2>
		}
		else if(cntL_dif<(-32768>>4)){
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8007ff6:	da04      	bge.n	8008002 <ENC_GetDiv+0xde>
			cntL = cntL_dif + (65536>>4);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	e001      	b.n	8008006 <ENC_GetDiv+0xe2>
		}
		else{
			cntL = cntL_dif;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	613b      	str	r3, [r7, #16]
		}
	}

	*p_r = cntR;		//2^12(4096) LSB/1回転
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	601a      	str	r2, [r3, #0]
	*p_l = cntL;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	601a      	str	r2, [r3, #0]

	ENC_R_CNT_old = ENC_R_CNT;
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <ENC_GetDiv+0x108>)
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	4b06      	ldr	r3, [pc, #24]	; (8008030 <ENC_GetDiv+0x10c>)
 8008018:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <ENC_GetDiv+0x114>)
 800801c:	881a      	ldrh	r2, [r3, #0]
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <ENC_GetDiv+0x110>)
 8008020:	801a      	strh	r2, [r3, #0]
}
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000fc8 	.word	0x20000fc8
 8008030:	20000fca 	.word	0x20000fca
 8008034:	20000fc6 	.word	0x20000fc6
 8008038:	20000fc4 	.word	0x20000fc4

0800803c <ENC_setref>:

void ENC_setref(void)
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
	ENC_R_CNT_old = ENC_R_CNT;
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <ENC_setref+0x20>)
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <ENC_setref+0x24>)
 8008046:	801a      	strh	r2, [r3, #0]
	ENC_L_CNT_old = ENC_L_CNT;
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <ENC_setref+0x28>)
 800804a:	881a      	ldrh	r2, [r3, #0]
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <ENC_setref+0x2c>)
 800804e:	801a      	strh	r2, [r3, #0]
}
 8008050:	bf00      	nop
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000fc8 	.word	0x20000fc8
 8008060:	20000fca 	.word	0x20000fca
 8008064:	20000fc4 	.word	0x20000fc4
 8008068:	20000fc6 	.word	0x20000fc6

0800806c <ICM_42688_whoami>:
uint16_t Get_s_gyro(void)
{
	return s_GyroVal;
}
void ICM_42688_whoami(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
	SetSPI1TransmitData(0,(0x75 | 0x80));
 8008070:	21f5      	movs	r1, #245	; 0xf5
 8008072:	2000      	movs	r0, #0
 8008074:	f7fb fe50 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, 0x00);
 8008078:	2100      	movs	r1, #0
 800807a:	2001      	movs	r0, #1
 800807c:	f7fb fe4c 	bl	8003d18 <SetSPI1TransmitData>
	SPI1_DMA_Communication(2);
 8008080:	2002      	movs	r0, #2
 8008082:	f7fb fdc9 	bl	8003c18 <SPI1_DMA_Communication>
	printf("who am i = %x\r\n",Get_SPI1ReciveData(1));
 8008086:	2001      	movs	r0, #1
 8008088:	f7fb fe36 	bl	8003cf8 <Get_SPI1ReciveData>
 800808c:	4603      	mov	r3, r0
 800808e:	4619      	mov	r1, r3
 8008090:	4802      	ldr	r0, [pc, #8]	; (800809c <ICM_42688_whoami+0x30>)
 8008092:	f00b ffcb 	bl	801402c <iprintf>

}
 8008096:	bf00      	nop
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	080193d0 	.word	0x080193d0

080080a0 <ICM_42688_WriteByte>:

void ICM_42688_WriteByte(uint8_t reg,uint8_t data)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	460a      	mov	r2, r1
 80080aa:	71fb      	strb	r3, [r7, #7]
 80080ac:	4613      	mov	r3, r2
 80080ae:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0, reg);
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	4619      	mov	r1, r3
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7fb fe2f 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1, data);
 80080ba:	79bb      	ldrb	r3, [r7, #6]
 80080bc:	4619      	mov	r1, r3
 80080be:	2001      	movs	r0, #1
 80080c0:	f7fb fe2a 	bl	8003d18 <SetSPI1TransmitData>

	SPI1_DMA_Communication(2);
 80080c4:	2002      	movs	r0, #2
 80080c6:	f7fb fda7 	bl	8003c18 <SPI1_DMA_Communication>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <ICM_42688_ReadByte>:

void ICM_42688_ReadByte(uint8_t reg,uint8_t length)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	4603      	mov	r3, r0
 80080da:	460a      	mov	r2, r1
 80080dc:	71fb      	strb	r3, [r7, #7]
 80080de:	4613      	mov	r3, r2
 80080e0:	71bb      	strb	r3, [r7, #6]
	SetSPI1TransmitData(0,(reg | 0x80));
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	4619      	mov	r1, r3
 80080ec:	2000      	movs	r0, #0
 80080ee:	f7fb fe13 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(1,0x00);
 80080f2:	2100      	movs	r1, #0
 80080f4:	2001      	movs	r0, #1
 80080f6:	f7fb fe0f 	bl	8003d18 <SetSPI1TransmitData>
	SetSPI1TransmitData(2,0x00);
 80080fa:	2100      	movs	r1, #0
 80080fc:	2002      	movs	r0, #2
 80080fe:	f7fb fe0b 	bl	8003d18 <SetSPI1TransmitData>

	SPI1_DMA_Communication(3);
 8008102:	2003      	movs	r0, #3
 8008104:	f7fb fd88 	bl	8003c18 <SPI1_DMA_Communication>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <ICM_42688_init>:


void ICM_42688_init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
	uint8_t reg78 = 0x4E;	//pwr_mgmt0
 8008116:	234e      	movs	r3, #78	; 0x4e
 8008118:	71fb      	strb	r3, [r7, #7]
	uint16_t reg107 = 0x6B;
	uint16_t reg106 = 0x6A;
	uint16_t reg27 = 0x1B;
	uint16_t reg28 = 0x1C;
*/
	ICM_42688_WriteByte(reg78,0x0F);
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	210f      	movs	r1, #15
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff ffbe 	bl	80080a0 <ICM_42688_WriteByte>
	LL_mDelay(1);
 8008124:	2001      	movs	r0, #1
 8008126:	f00b f88f 	bl	8013248 <LL_mDelay>
	ICM_42688_WriteByte(reg27,0x18);
	LL_mDelay(1);
	ICM_42688_WriteByte(reg28,0x18);
	LL_mDelay(1);
*/
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <ICM_42688_GyroRead_DMA>:

void ICM_42688_GyroRead_DMA(uint8_t reg) //reg 29 2A
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	4603      	mov	r3, r0
 800813a:	71fb      	strb	r3, [r7, #7]
	ICM_42688_ReadByte(reg,3);
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2103      	movs	r1, #3
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff ffc6 	bl	80080d2 <ICM_42688_ReadByte>
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <ICM_42688_GyroData>:

void ICM_42688_GyroData(void)
{
 8008150:	b598      	push	{r3, r4, r7, lr}
 8008152:	af00      	add	r7, sp, #0
	s_GyroVal=((uint16_t)Get_SPI1ReciveData(1)<<8|Get_SPI1ReciveData(2));
 8008154:	2001      	movs	r0, #1
 8008156:	f7fb fdcf 	bl	8003cf8 <Get_SPI1ReciveData>
 800815a:	4603      	mov	r3, r0
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	b21c      	sxth	r4, r3
 8008160:	2002      	movs	r0, #2
 8008162:	f7fb fdc9 	bl	8003cf8 <Get_SPI1ReciveData>
 8008166:	4603      	mov	r3, r0
 8008168:	b21b      	sxth	r3, r3
 800816a:	4323      	orrs	r3, r4
 800816c:	b21a      	sxth	r2, r3
 800816e:	4b02      	ldr	r3, [pc, #8]	; (8008178 <ICM_42688_GyroData+0x28>)
 8008170:	801a      	strh	r2, [r3, #0]
}
 8008172:	bf00      	nop
 8008174:	bd98      	pop	{r3, r4, r7, pc}
 8008176:	bf00      	nop
 8008178:	200002ee 	.word	0x200002ee

0800817c <GYRO_SetRef>:

void GYRO_SetRef( void )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
	uint16_t i;
	uint32_t ul_ref = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	603b      	str	r3, [r7, #0]

	/* データサンプリング */
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 8008186:	2300      	movs	r3, #0
 8008188:	80fb      	strh	r3, [r7, #6]
 800818a:	e00c      	b.n	80081a6 <GYRO_SetRef+0x2a>
		ul_ref += (uint32_t)s_GyroVal;
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <GYRO_SetRef+0x50>)
 800818e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008192:	461a      	mov	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	4413      	add	r3, r2
 8008198:	603b      	str	r3, [r7, #0]
		LL_mDelay(1);
 800819a:	2001      	movs	r0, #1
 800819c:	f00b f854 	bl	8013248 <LL_mDelay>
	for( i=0; i<GYRO_REF_NUM; i++){			// 100回サンプリングした平均値を基準の値とする。
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	3301      	adds	r3, #1
 80081a4:	80fb      	strh	r3, [r7, #6]
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	2bc7      	cmp	r3, #199	; 0xc7
 80081aa:	d9ef      	bls.n	800818c <GYRO_SetRef+0x10>
	}

	/* 基準値算出（平均値） */
	l_GyroRef = (ul_ref * 100) / GYRO_REF_NUM ;		// 精度を100倍にする
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2264      	movs	r2, #100	; 0x64
 80081b0:	fb02 f303 	mul.w	r3, r2, r3
 80081b4:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <GYRO_SetRef+0x54>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	099b      	lsrs	r3, r3, #6
 80081bc:	461a      	mov	r2, r3
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <GYRO_SetRef+0x58>)
 80081c0:	601a      	str	r2, [r3, #0]
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200002ee 	.word	0x200002ee
 80081d0:	51eb851f 	.word	0x51eb851f
 80081d4:	20000708 	.word	0x20000708

080081d8 <GYRO_getSpeedErr>:

float GYRO_getSpeedErr( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
	int32_t  l_val = (int32_t)s_GyroVal * 100 ;				// 精度を100倍にする
 80081de:	4b22      	ldr	r3, [pc, #136]	; (8008268 <GYRO_getSpeedErr+0x90>)
 80081e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081e4:	461a      	mov	r2, r3
 80081e6:	2364      	movs	r3, #100	; 0x64
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	60fb      	str	r3, [r7, #12]
	int32_t  l_err = l_val - l_GyroRef ;
 80081ee:	4b1f      	ldr	r3, [pc, #124]	; (800826c <GYRO_getSpeedErr+0x94>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	60bb      	str	r3, [r7, #8]
	float f_res;

	/* 角速度の偏差算出 */
//	if( ( l_err < -0.01 * 100 ) || ( 0.01 * 100 < l_err ) ){
		f_res = (float)l_err /16.4 / 100 * DEG_TO_RAD;		
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008202:	ee17 0a90 	vmov	r0, s15
 8008206:	f7f8 f9c7 	bl	8000598 <__aeabi_f2d>
 800820a:	a313      	add	r3, pc, #76	; (adr r3, 8008258 <GYRO_getSpeedErr+0x80>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f7f8 fb44 	bl	800089c <__aeabi_ddiv>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	4b13      	ldr	r3, [pc, #76]	; (8008270 <GYRO_getSpeedErr+0x98>)
 8008222:	f7f8 fb3b 	bl	800089c <__aeabi_ddiv>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	a30c      	add	r3, pc, #48	; (adr r3, 8008260 <GYRO_getSpeedErr+0x88>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 fa08 	bl	8000648 <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	f7f8 fcfa 	bl	8000c38 <__aeabi_d2f>
 8008244:	4603      	mov	r3, r0
 8008246:	607b      	str	r3, [r7, #4]
//	}
/*	else{
		f_res = 0;									// [deg/s]
	}
*/
	return f_res;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	ee07 3a90 	vmov	s15, r3
}
 800824e:	eeb0 0a67 	vmov.f32	s0, s15
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	66666666 	.word	0x66666666
 800825c:	40306666 	.word	0x40306666
 8008260:	60000000 	.word	0x60000000
 8008264:	3f91df49 	.word	0x3f91df49
 8008268:	200002ee 	.word	0x200002ee
 800826c:	20000708 	.word	0x20000708
 8008270:	40590000 	.word	0x40590000

08008274 <GYRO_getNowAngle>:

float GYRO_getNowAngle( void )
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
	return f_GyroNowAngle;
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <GYRO_getNowAngle+0x18>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	ee07 3a90 	vmov	s15, r3
}
 8008280:	eeb0 0a67 	vmov.f32	s0, s15
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	200002cc 	.word	0x200002cc

08008290 <GYRO_getRef>:

float GYRO_getRef( void )
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
	return l_GyroRef;
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <GYRO_getRef+0x1c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80082a0:	eeb0 0a67 	vmov.f32	s0, s15
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	20000708 	.word	0x20000708

080082b0 <GYRO_Pol>:

void GYRO_Pol( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
	float f_speed;

	/* 現在の角度を更新する */
	f_speed = GYRO_getSpeedErr();			// 角速度取得 (0.001sec毎の角速度)
 80082b6:	f7ff ff8f 	bl	80081d8 <GYRO_getSpeedErr>
 80082ba:	ed87 0a01 	vstr	s0, [r7, #4]
	f_GyroNowAngle += f_speed / 1000;		// 角度設定   (0.001sec毎に加算するため)
 80082be:	edd7 7a01 	vldr	s15, [r7, #4]
 80082c2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8008308 <GYRO_Pol+0x58>
 80082c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80082ca:	4b10      	ldr	r3, [pc, #64]	; (800830c <GYRO_Pol+0x5c>)
 80082cc:	edd3 7a00 	vldr	s15, [r3]
 80082d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082d4:	4b0d      	ldr	r3, [pc, #52]	; (800830c <GYRO_Pol+0x5c>)
 80082d6:	edc3 7a00 	vstr	s15, [r3]

	/* エラーチェック */
	if( bl_ErrChk == TRUE ){
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <GYRO_Pol+0x60>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <GYRO_Pol+0x4e>

		f_ErrChkAngle += f_speed/1000;		// 角度設定   (0.001sec毎に加算するため)
 80082e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80082e6:	eddf 6a08 	vldr	s13, [pc, #32]	; 8008308 <GYRO_Pol+0x58>
 80082ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <GYRO_Pol+0x64>)
 80082f0:	edd3 7a00 	vldr	s15, [r3]
 80082f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <GYRO_Pol+0x64>)
 80082fa:	edc3 7a00 	vstr	s15, [r3]

			Failsafe_flag();
		}
*/
	}
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	447a0000 	.word	0x447a0000
 800830c:	200002cc 	.word	0x200002cc
 8008310:	200002db 	.word	0x200002db
 8008314:	200006f8 	.word	0x200006f8

08008318 <GYRO_staErrChkAngle>:
//	f_NowAccel = Accel_getSpeedErr();			// 加速度取得 (0.001sec毎の加速度)

}

void GYRO_staErrChkAngle( void )
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <GYRO_staErrChkAngle+0x1c>)
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
	bl_ErrChk = TRUE;
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <GYRO_staErrChkAngle+0x20>)
 8008326:	2201      	movs	r2, #1
 8008328:	701a      	strb	r2, [r3, #0]

}
 800832a:	bf00      	nop
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	200006f8 	.word	0x200006f8
 8008338:	200002db 	.word	0x200002db

0800833c <GYRO_endErrChkAngle>:

void GYRO_endErrChkAngle( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	f_ErrChkAngle = 0;
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <GYRO_endErrChkAngle+0x1c>)
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <GYRO_endErrChkAngle+0x20>)
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]

}
 800834e:	bf00      	nop
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	200006f8 	.word	0x200006f8
 800835c:	200002db 	.word	0x200002db

08008360 <HAL_init>:
#include "hal/init.h"



void HAL_init( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
	TIME_init();
 8008364:	f000 f834 	bl	80083d0 <TIME_init>
	/* ジャイロセンサ */
	f_GyroNowAngle = 0;			// ジャイロセンサの現在角度(0にしても探索他は動くが、宴会とかtestrunとかは動かない)修正済みと思われる
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <HAL_init+0x60>)
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
	l_GyroRef  = 0;				// ジャイロセンサの基準値
 8008370:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <HAL_init+0x64>)
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

	f_ErrChkAngle = 0;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <HAL_init+0x68>)
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
	bl_ErrChk = FALSE;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <HAL_init+0x6c>)
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
	DIST_init();
 8008384:	f003 fa6e 	bl	800b864 <DIST_init>
	MAP_Goal_init();
 8008388:	f006 ff4e 	bl	800f228 <MAP_Goal_init>
	ADC4_Start();
 800838c:	f7f9 f9be 	bl	800170c <ADC4_Start>
  	ADC3_Start();
 8008390:	f7f9 f9c8 	bl	8001724 <ADC3_Start>
  	ADC2_Start();
 8008394:	f7f9 f9d2 	bl	800173c <ADC2_Start>
  	ADC1_Start();
 8008398:	f7f9 f9dc 	bl	8001754 <ADC1_Start>

  	SPI1_Start();
 800839c:	f7fb fc24 	bl	8003be8 <SPI1_Start>
  	SPI2_Start();
 80083a0:	f7fb fcce 	bl	8003d40 <SPI2_Start>
  	ICM_42688_init();
 80083a4:	f7ff feb4 	bl	8008110 <ICM_42688_init>
  	ICM_42688_whoami();
 80083a8:	f7ff fe60 	bl	800806c <ICM_42688_whoami>
	TIMER_init();
 80083ac:	f7fc fd14 	bl	8004dd8 <TIMER_init>
	SYS_start();
 80083b0:	f000 f9ce 	bl	8008750 <SYS_start>
	MAP_init();
 80083b4:	f006 ff18 	bl	800f1e8 <MAP_init>
	GYRO_SetRef();
 80083b8:	f7ff fee0 	bl	800817c <GYRO_SetRef>
}
 80083bc:	bf00      	nop
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	200002cc 	.word	0x200002cc
 80083c4:	20000708 	.word	0x20000708
 80083c8:	200006f8 	.word	0x200006f8
 80083cc:	200002db 	.word	0x200002db

080083d0 <TIME_init>:

void TIME_init( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
	/* 初期化 */
	Msec_in = 0;		// 内部時計[msec]
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <TIME_init+0x20>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	801a      	strh	r2, [r3, #0]
	Sec_in  = 0;		// 内部時計[sec]
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <TIME_init+0x24>)
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
	Min_in  = 0;		// 内部時計[min]
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <TIME_init+0x28>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000704 	.word	0x20000704
 80083f4:	200002d8 	.word	0x200002d8
 80083f8:	200002d0 	.word	0x200002d0

080083fc <log_in2>:
			float log5,float log6,
			float log7,float log8,
			float log9,float log10)/*,
			float log11,float log12)
*/
{
 80083fc:	b480      	push	{r7}
 80083fe:	b08b      	sub	sp, #44	; 0x2c
 8008400:	af00      	add	r7, sp, #0
 8008402:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8008406:	edc7 0a08 	vstr	s1, [r7, #32]
 800840a:	ed87 1a07 	vstr	s2, [r7, #28]
 800840e:	edc7 1a06 	vstr	s3, [r7, #24]
 8008412:	ed87 2a05 	vstr	s4, [r7, #20]
 8008416:	edc7 2a04 	vstr	s5, [r7, #16]
 800841a:	ed87 3a03 	vstr	s6, [r7, #12]
 800841e:	edc7 3a02 	vstr	s7, [r7, #8]
 8008422:	ed87 4a01 	vstr	s8, [r7, #4]
 8008426:	edc7 4a00 	vstr	s9, [r7]
	if((b_logflag == TRUE)&&(log_count < log_num)){
 800842a:	4b2d      	ldr	r3, [pc, #180]	; (80084e0 <log_in2+0xe4>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d050      	beq.n	80084d4 <log_in2+0xd8>
 8008432:	4b2c      	ldr	r3, [pc, #176]	; (80084e4 <log_in2+0xe8>)
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800843a:	d24b      	bcs.n	80084d4 <log_in2+0xd8>
		Log_1[log_count] = log1;
 800843c:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <log_in2+0xe8>)
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	4a29      	ldr	r2, [pc, #164]	; (80084e8 <log_in2+0xec>)
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	601a      	str	r2, [r3, #0]
		Log_2[log_count] = log2;
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <log_in2+0xe8>)
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	4a27      	ldr	r2, [pc, #156]	; (80084ec <log_in2+0xf0>)
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	6a3a      	ldr	r2, [r7, #32]
 8008456:	601a      	str	r2, [r3, #0]
		Log_3[log_count] = log3;
 8008458:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <log_in2+0xe8>)
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	4a24      	ldr	r2, [pc, #144]	; (80084f0 <log_in2+0xf4>)
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	601a      	str	r2, [r3, #0]
		Log_4[log_count] = log4;
 8008466:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <log_in2+0xe8>)
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	4a22      	ldr	r2, [pc, #136]	; (80084f4 <log_in2+0xf8>)
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	601a      	str	r2, [r3, #0]
		Log_5[log_count] = log5;
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <log_in2+0xe8>)
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	4a1f      	ldr	r2, [pc, #124]	; (80084f8 <log_in2+0xfc>)
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	601a      	str	r2, [r3, #0]
		Log_6[log_count] = log6;
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <log_in2+0xe8>)
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <log_in2+0x100>)
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	601a      	str	r2, [r3, #0]
		Log_7[log_count] = log7;
 8008490:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <log_in2+0xe8>)
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	4a1a      	ldr	r2, [pc, #104]	; (8008500 <log_in2+0x104>)
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	601a      	str	r2, [r3, #0]
		Log_8[log_count] = log8;
 800849e:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <log_in2+0xe8>)
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	4a18      	ldr	r2, [pc, #96]	; (8008504 <log_in2+0x108>)
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	601a      	str	r2, [r3, #0]
		Log_9[log_count] = log9;
 80084ac:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <log_in2+0xe8>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	4a15      	ldr	r2, [pc, #84]	; (8008508 <log_in2+0x10c>)
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
		Log_10[log_count] = log10;
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <log_in2+0xe8>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	4a13      	ldr	r2, [pc, #76]	; (800850c <log_in2+0x110>)
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	601a      	str	r2, [r3, #0]
/*		Log_11[log_count] = log11;
		Log_12[log_count] = log12;
*/
		log_count++;
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <log_in2+0xe8>)
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <log_in2+0xe8>)
 80084d2:	801a      	strh	r2, [r3, #0]
	}
}
 80084d4:	bf00      	nop
 80084d6:	372c      	adds	r7, #44	; 0x2c
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20000298 	.word	0x20000298
 80084e4:	20000296 	.word	0x20000296
 80084e8:	20004e4c 	.word	0x20004e4c
 80084ec:	200036dc 	.word	0x200036dc
 80084f0:	20002f0c 	.word	0x20002f0c
 80084f4:	2000179c 	.word	0x2000179c
 80084f8:	20003eac 	.word	0x20003eac
 80084fc:	2000467c 	.word	0x2000467c
 8008500:	2000273c 	.word	0x2000273c
 8008504:	2000561c 	.word	0x2000561c
 8008508:	20000fcc 	.word	0x20000fcc
 800850c:	20001f6c 	.word	0x20001f6c

08008510 <log_interrupt>:

void log_interrupt ( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	ed2d 8b08 	vpush	{d8-d11}
 8008516:	af00      	add	r7, sp, #0
//			Get_NowDist(), Get_TrgtDist(),templog2);
/*
	log_in2(DIST_getNowVal( DIST_SEN_R_FRONT ), DIST_getNowVal( DIST_SEN_L_FRONT ),
		DIST_getNowVal( DIST_SEN_R_SIDE ), DIST_getNowVal( DIST_SEN_L_SIDE ));
*/
	log_in2(GYRO_getSpeedErr(), Get_TrgtAngleS(),
 8008518:	f7ff fe5e 	bl	80081d8 <GYRO_getSpeedErr>
 800851c:	eeb0 8a40 	vmov.f32	s16, s0
 8008520:	f7fd f8d8 	bl	80056d4 <Get_TrgtAngleS>
 8008524:	eef0 8a40 	vmov.f32	s17, s0
 8008528:	f7fd f8b8 	bl	800569c <Get_NowAngle>
 800852c:	eeb0 9a40 	vmov.f32	s18, s0
 8008530:	f7fd f8c2 	bl	80056b8 <Get_TrgtAngle>
 8008534:	eef0 9a40 	vmov.f32	s19, s0
 8008538:	f7fd f868 	bl	800560c <Get_NowSpeed>
 800853c:	eeb0 aa40 	vmov.f32	s20, s0
 8008540:	f7fd f88e 	bl	8005660 <Get_TrgtSpeed>
 8008544:	eef0 aa40 	vmov.f32	s21, s0
 8008548:	f7fd f86e 	bl	8005628 <Get_NowDist>
 800854c:	eeb0 ba40 	vmov.f32	s22, s0
 8008550:	f7fd f878 	bl	8005644 <Get_TrgtDist>
 8008554:	eef0 6a40 	vmov.f32	s13, s0
 8008558:	4b10      	ldr	r3, [pc, #64]	; (800859c <log_interrupt+0x8c>)
 800855a:	edd3 7a00 	vldr	s15, [r3]
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <log_interrupt+0x90>)
 8008560:	ed93 7a00 	vldr	s14, [r3]
 8008564:	eef0 4a47 	vmov.f32	s9, s14
 8008568:	eeb0 4a67 	vmov.f32	s8, s15
 800856c:	eef0 3a66 	vmov.f32	s7, s13
 8008570:	eeb0 3a4b 	vmov.f32	s6, s22
 8008574:	eef0 2a6a 	vmov.f32	s5, s21
 8008578:	eeb0 2a4a 	vmov.f32	s4, s20
 800857c:	eef0 1a69 	vmov.f32	s3, s19
 8008580:	eeb0 1a49 	vmov.f32	s2, s18
 8008584:	eef0 0a68 	vmov.f32	s1, s17
 8008588:	eeb0 0a48 	vmov.f32	s0, s16
 800858c:	f7ff ff36 	bl	80083fc <log_in2>
			Get_NowAngle(),Get_TrgtAngle(),
			Get_NowSpeed(), Get_TrgtSpeed(),
			Get_NowDist(), Get_TrgtDist(),templog1,templog2);
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	ecbd 8b08 	vpop	{d8-d11}
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	2000070c 	.word	0x2000070c
 80085a0:	200002d4 	.word	0x200002d4

080085a4 <log_flag_on>:

void log_flag_on(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
	b_logflag = TRUE;
 80085a8:	4b03      	ldr	r3, [pc, #12]	; (80085b8 <log_flag_on+0x14>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	20000298 	.word	0x20000298

080085bc <log_flag_off>:

void log_flag_off(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
	b_logflag = FALSE;
 80085c0:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <log_flag_off+0x14>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000298 	.word	0x20000298

080085d4 <log_read2>:

void log_read2(void)
{
 80085d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d8:	b0a0      	sub	sp, #128	; 0x80
 80085da:	af12      	add	r7, sp, #72	; 0x48
	int16_t i=0;
 80085dc:	2300      	movs	r3, #0
 80085de:	86fb      	strh	r3, [r7, #54]	; 0x36
		printf("%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i]);
		i++;
	}
*/
	while(i<log_num){
 80085e0:	e094      	b.n	800870c <log_read2+0x138>
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 80085e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80085e6:	4a4f      	ldr	r2, [pc, #316]	; (8008724 <log_read2+0x150>)
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f7 ffd2 	bl	8000598 <__aeabi_f2d>
 80085f4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 80085f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80085fc:	4a4a      	ldr	r2, [pc, #296]	; (8008728 <log_read2+0x154>)
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008604:	4618      	mov	r0, r3
 8008606:	f7f7 ffc7 	bl	8000598 <__aeabi_f2d>
 800860a:	e9c7 0108 	strd	r0, r1, [r7, #32]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 800860e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008612:	4a46      	ldr	r2, [pc, #280]	; (800872c <log_read2+0x158>)
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 800861a:	4618      	mov	r0, r3
 800861c:	f7f7 ffbc 	bl	8000598 <__aeabi_f2d>
 8008620:	e9c7 0106 	strd	r0, r1, [r7, #24]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008624:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008628:	4a41      	ldr	r2, [pc, #260]	; (8008730 <log_read2+0x15c>)
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008630:	4618      	mov	r0, r3
 8008632:	f7f7 ffb1 	bl	8000598 <__aeabi_f2d>
 8008636:	e9c7 0104 	strd	r0, r1, [r7, #16]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 800863a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800863e:	4a3d      	ldr	r2, [pc, #244]	; (8008734 <log_read2+0x160>)
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008646:	4618      	mov	r0, r3
 8008648:	f7f7 ffa6 	bl	8000598 <__aeabi_f2d>
 800864c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008650:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008654:	4a38      	ldr	r2, [pc, #224]	; (8008738 <log_read2+0x164>)
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 ff9b 	bl	8000598 <__aeabi_f2d>
 8008662:	e9c7 0100 	strd	r0, r1, [r7]
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008666:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800866a:	4a34      	ldr	r2, [pc, #208]	; (800873c <log_read2+0x168>)
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008672:	4618      	mov	r0, r3
 8008674:	f7f7 ff90 	bl	8000598 <__aeabi_f2d>
 8008678:	4682      	mov	sl, r0
 800867a:	468b      	mov	fp, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 800867c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008680:	4a2f      	ldr	r2, [pc, #188]	; (8008740 <log_read2+0x16c>)
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 8008688:	4618      	mov	r0, r3
 800868a:	f7f7 ff85 	bl	8000598 <__aeabi_f2d>
 800868e:	4680      	mov	r8, r0
 8008690:	4689      	mov	r9, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 8008692:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008696:	4a2b      	ldr	r2, [pc, #172]	; (8008744 <log_read2+0x170>)
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 800869e:	4618      	mov	r0, r3
 80086a0:	f7f7 ff7a 	bl	8000598 <__aeabi_f2d>
 80086a4:	4604      	mov	r4, r0
 80086a6:	460d      	mov	r5, r1
		Log_1[i],Log_2[i],Log_3[i],Log_4[i],Log_5[i],Log_6[i],Log_7[i],Log_8[i],Log_9[i],Log_10[i]);
 80086a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80086ac:	4a26      	ldr	r2, [pc, #152]	; (8008748 <log_read2+0x174>)
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	681b      	ldr	r3, [r3, #0]
		printf("%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f,%5.4f\n\r",
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7f7 ff6f 	bl	8000598 <__aeabi_f2d>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80086c2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80086c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80086ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80086ce:	ed97 7b00 	vldr	d7, [r7]
 80086d2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80086d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80086da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086de:	ed97 7b04 	vldr	d7, [r7, #16]
 80086e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80086ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086ee:	ed97 7b08 	vldr	d7, [r7, #32]
 80086f2:	ed8d 7b00 	vstr	d7, [sp]
 80086f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086fa:	4814      	ldr	r0, [pc, #80]	; (800874c <log_read2+0x178>)
 80086fc:	f00b fc96 	bl	801402c <iprintf>
		i++;
 8008700:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008704:	b29b      	uxth	r3, r3
 8008706:	3301      	adds	r3, #1
 8008708:	b29b      	uxth	r3, r3
 800870a:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(i<log_num){
 800870c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008714:	f6ff af65 	blt.w	80085e2 <log_read2+0xe>
	}

}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	3738      	adds	r7, #56	; 0x38
 800871e:	46bd      	mov	sp, r7
 8008720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008724:	20004e4c 	.word	0x20004e4c
 8008728:	200036dc 	.word	0x200036dc
 800872c:	20002f0c 	.word	0x20002f0c
 8008730:	2000179c 	.word	0x2000179c
 8008734:	20003eac 	.word	0x20003eac
 8008738:	2000467c 	.word	0x2000467c
 800873c:	2000273c 	.word	0x2000273c
 8008740:	2000561c 	.word	0x2000561c
 8008744:	20000fcc 	.word	0x20000fcc
 8008748:	20001f6c 	.word	0x20001f6c
 800874c:	080193e0 	.word	0x080193e0

08008750 <SYS_start>:
enMODE		en_Mode;		//現在のモード

extern uint8_t			SLA_count;

void SYS_start( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
	/* タイトル表示 */
	printf(" ------------------------------\r\n");
 8008754:	4821      	ldr	r0, [pc, #132]	; (80087dc <SYS_start+0x8c>)
 8008756:	f00b fd05 	bl	8014164 <puts>
	printf(" | Robo Name  : hankyo2       |\r\n");
 800875a:	4821      	ldr	r0, [pc, #132]	; (80087e0 <SYS_start+0x90>)
 800875c:	f00b fd02 	bl	8014164 <puts>
	printf(" | Developer  : sho sato      |\r\n");
 8008760:	4820      	ldr	r0, [pc, #128]	; (80087e4 <SYS_start+0x94>)
 8008762:	f00b fcff 	bl	8014164 <puts>
	printf(" | Version    : ver1          |\r\n");
 8008766:	4820      	ldr	r0, [pc, #128]	; (80087e8 <SYS_start+0x98>)
 8008768:	f00b fcfc 	bl	8014164 <puts>
	printf(" | Project By : RT Corporation|\r\n");
 800876c:	481f      	ldr	r0, [pc, #124]	; (80087ec <SYS_start+0x9c>)
 800876e:	f00b fcf9 	bl	8014164 <puts>
	printf(" ------------------------------\r\n");
 8008772:	481a      	ldr	r0, [pc, #104]	; (80087dc <SYS_start+0x8c>)
 8008774:	f00b fcf6 	bl	8014164 <puts>

	printf("\r\n turn 45 \r\r");
 8008778:	481d      	ldr	r0, [pc, #116]	; (80087f0 <SYS_start+0xa0>)
 800877a:	f00b fc57 	bl	801402c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 100.0f, 2.50f, SLA_45 );
 800877e:	2001      	movs	r0, #1
 8008780:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 8008784:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80087f4 <SYS_start+0xa4>
 8008788:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80087f8 <SYS_start+0xa8>
 800878c:	f7fa f880 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn 90 \r\r");		
 8008790:	481a      	ldr	r0, [pc, #104]	; (80087fc <SYS_start+0xac>)
 8008792:	f00b fc4b 	bl	801402c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 3.50f, SLA_90 );	
 8008796:	2000      	movs	r0, #0
 8008798:	eeb0 1a0c 	vmov.f32	s2, #12	; 0x40600000  3.5
 800879c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008800 <SYS_start+0xb0>
 80087a0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80087f8 <SYS_start+0xa8>
 80087a4:	f7fa f874 	bl	8002890 <PARAM_makeSra>
//	PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
	printf("\r\n turn 135 \r\r");	
 80087a8:	4816      	ldr	r0, [pc, #88]	; (8008804 <SYS_start+0xb4>)
 80087aa:	f00b fc3f 	bl	801402c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 200.0f, 4.00f, SLA_135 );	
 80087ae:	2002      	movs	r0, #2
 80087b0:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80087b4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8008800 <SYS_start+0xb0>
 80087b8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80087f8 <SYS_start+0xa8>
 80087bc:	f7fa f868 	bl	8002890 <PARAM_makeSra>
	printf("\r\n turn N90 \r\r");	
 80087c0:	4811      	ldr	r0, [pc, #68]	; (8008808 <SYS_start+0xb8>)
 80087c2:	f00b fc33 	bl	801402c <iprintf>
	PARAM_makeSra( (float)SEARCH_SPEED, 300.0f, 4.00f, SLA_N90 );		
 80087c6:	2003      	movs	r0, #3
 80087c8:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80087cc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800880c <SYS_start+0xbc>
 80087d0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80087f8 <SYS_start+0xa8>
 80087d4:	f7fa f85c 	bl	8002890 <PARAM_makeSra>


}
 80087d8:	bf00      	nop
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	08019420 	.word	0x08019420
 80087e0:	08019444 	.word	0x08019444
 80087e4:	08019468 	.word	0x08019468
 80087e8:	0801948c 	.word	0x0801948c
 80087ec:	080194b0 	.word	0x080194b0
 80087f0:	080194d4 	.word	0x080194d4
 80087f4:	42c80000 	.word	0x42c80000
 80087f8:	3e99999a 	.word	0x3e99999a
 80087fc:	080194e4 	.word	0x080194e4
 8008800:	43480000 	.word	0x43480000
 8008804:	080194f4 	.word	0x080194f4
 8008808:	08019504 	.word	0x08019504
 800880c:	43960000 	.word	0x43960000

08008810 <MODE_inc>:

void MODE_inc( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
	en_Mode++;		// モードを加算
 8008814:	4b35      	ldr	r3, [pc, #212]	; (80088ec <MODE_inc+0xdc>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	3301      	adds	r3, #1
 800881a:	b2da      	uxtb	r2, r3
 800881c:	4b33      	ldr	r3, [pc, #204]	; (80088ec <MODE_inc+0xdc>)
 800881e:	701a      	strb	r2, [r3, #0]

	/* 最大値チェック */
	if( MODE_MAX == en_Mode ){
 8008820:	4b32      	ldr	r3, [pc, #200]	; (80088ec <MODE_inc+0xdc>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b08      	cmp	r3, #8
 8008826:	d102      	bne.n	800882e <MODE_inc+0x1e>
		en_Mode = MODE_0;
 8008828:	4b30      	ldr	r3, [pc, #192]	; (80088ec <MODE_inc+0xdc>)
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
	}

	/* モード表示 */
	switch( en_Mode ){
 800882e:	4b2f      	ldr	r3, [pc, #188]	; (80088ec <MODE_inc+0xdc>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b07      	cmp	r3, #7
 8008834:	d857      	bhi.n	80088e6 <MODE_inc+0xd6>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <MODE_inc+0x2c>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800885d 	.word	0x0800885d
 8008840:	08008869 	.word	0x08008869
 8008844:	0800887b 	.word	0x0800887b
 8008848:	0800888d 	.word	0x0800888d
 800884c:	0800889f 	.word	0x0800889f
 8008850:	080088b1 	.word	0x080088b1
 8008854:	080088c3 	.word	0x080088c3
 8008858:	080088d5 	.word	0x080088d5

		case MODE_0:
			SetLED(0x00 | now_mode);
 800885c:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <MODE_inc+0xe0>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f7f9 fbb1 	bl	8001fc8 <SetLED>
			break;
 8008866:	e03f      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_1:
			SetLED((0x01<<1) | now_mode);
 8008868:	4b21      	ldr	r3, [pc, #132]	; (80088f0 <MODE_inc+0xe0>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f043 0302 	orr.w	r3, r3, #2
 8008870:	b2db      	uxtb	r3, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f7f9 fba8 	bl	8001fc8 <SetLED>
			break;
 8008878:	e036      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_2:
			SetLED((0x02<<1) | now_mode);
 800887a:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <MODE_inc+0xe0>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f043 0304 	orr.w	r3, r3, #4
 8008882:	b2db      	uxtb	r3, r3
 8008884:	4618      	mov	r0, r3
 8008886:	f7f9 fb9f 	bl	8001fc8 <SetLED>
			break;
 800888a:	e02d      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_3:
			SetLED((0x03<<1) | now_mode);
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <MODE_inc+0xe0>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	f043 0306 	orr.w	r3, r3, #6
 8008894:	b2db      	uxtb	r3, r3
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 fb96 	bl	8001fc8 <SetLED>
			break;
 800889c:	e024      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_4:
			SetLED((0x04<<1) | now_mode);
 800889e:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <MODE_inc+0xe0>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	f043 0308 	orr.w	r3, r3, #8
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f9 fb8d 	bl	8001fc8 <SetLED>
			break;
 80088ae:	e01b      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_5:
			SetLED((0x05<<1) | now_mode);
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <MODE_inc+0xe0>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f043 030a 	orr.w	r3, r3, #10
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fb84 	bl	8001fc8 <SetLED>
			break;
 80088c0:	e012      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_6:
			SetLED((0x06<<1) | now_mode);
 80088c2:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <MODE_inc+0xe0>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f043 030c 	orr.w	r3, r3, #12
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f9 fb7b 	bl	8001fc8 <SetLED>
			break;
 80088d2:	e009      	b.n	80088e8 <MODE_inc+0xd8>

		case MODE_7:
			SetLED((0x07<<1) | now_mode);
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <MODE_inc+0xe0>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f043 030e 	orr.w	r3, r3, #14
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 fb72 	bl	8001fc8 <SetLED>
			break;
 80088e4:	e000      	b.n	80088e8 <MODE_inc+0xd8>

		default:
			break;
 80088e6:	bf00      	nop
	}
}
 80088e8:	bf00      	nop
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20005dec 	.word	0x20005dec
 80088f0:	2000000c 	.word	0x2000000c

080088f4 <MODE_exe_m0>:

void MODE_exe_m0( void )
{
 80088f4:	b5b0      	push	{r4, r5, r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;
	GYRO_SetRef();
 80088fa:	f7ff fc3f 	bl	800817c <GYRO_SetRef>
	/* モード表示 */
	switch( en_Mode ){
 80088fe:	4b8b      	ldr	r3, [pc, #556]	; (8008b2c <MODE_exe_m0+0x238>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b07      	cmp	r3, #7
 8008904:	f200 810d 	bhi.w	8008b22 <MODE_exe_m0+0x22e>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <MODE_exe_m0+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008931 	.word	0x08008931
 8008914:	0800898d 	.word	0x0800898d
 8008918:	080089cd 	.word	0x080089cd
 800891c:	080089d9 	.word	0x080089d9
 8008920:	080089e9 	.word	0x080089e9
 8008924:	08008a43 	.word	0x08008a43
 8008928:	08008aa5 	.word	0x08008aa5
 800892c:	08008b1b 	.word	0x08008b1b

		case MODE_0:
			SetLED(0x0e);
 8008930:	200e      	movs	r0, #14
 8008932:	f7f9 fb49 	bl	8001fc8 <SetLED>
			CTRL_clrNowData();
 8008936:	f7fc ff73 	bl	8005820 <CTRL_clrNowData>
			CTRL_clrData();
 800893a:	f7fc ff27 	bl	800578c <CTRL_clrData>
//			LL_TIM_EnableIT_UPDATE(TIM4);
//			LL_TIM_EnableCounter(TIM4);
			printf("\n");
 800893e:	200a      	movs	r0, #10
 8008940:	f00b fb8c 	bl	801405c <putchar>
			LL_mDelay(1000);
 8008944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008948:	f00a fc7e 	bl	8013248 <LL_mDelay>
			GYRO_SetRef();
 800894c:	f7ff fc16 	bl	800817c <GYRO_SetRef>
			while(1){
				printf("  gyro%5.2f ref%5.2f \r", 
					GYRO_getNowAngle(),GYRO_getRef()
 8008950:	f7ff fc90 	bl	8008274 <GYRO_getNowAngle>
 8008954:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fe1d 	bl	8000598 <__aeabi_f2d>
 800895e:	4604      	mov	r4, r0
 8008960:	460d      	mov	r5, r1
					GYRO_getNowAngle(),GYRO_getRef()
 8008962:	f7ff fc95 	bl	8008290 <GYRO_getRef>
 8008966:	ee10 3a10 	vmov	r3, s0
				printf("  gyro%5.2f ref%5.2f \r", 
 800896a:	4618      	mov	r0, r3
 800896c:	f7f7 fe14 	bl	8000598 <__aeabi_f2d>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e9cd 2300 	strd	r2, r3, [sp]
 8008978:	4622      	mov	r2, r4
 800897a:	462b      	mov	r3, r5
 800897c:	486c      	ldr	r0, [pc, #432]	; (8008b30 <MODE_exe_m0+0x23c>)
 800897e:	f00b fb55 	bl	801402c <iprintf>
				);
				LL_mDelay( 500 );
 8008982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008986:	f00a fc5f 	bl	8013248 <LL_mDelay>
				printf("  gyro%5.2f ref%5.2f \r", 
 800898a:	e7e1      	b.n	8008950 <MODE_exe_m0+0x5c>
			}
			break;

		case MODE_1:
			SetLED(0x0e);
 800898c:	200e      	movs	r0, #14
 800898e:	f7f9 fb1b 	bl	8001fc8 <SetLED>
			printf("\n");
 8008992:	200a      	movs	r0, #10
 8008994:	f00b fb62 	bl	801405c <putchar>
			LL_mDelay(1000);
 8008998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800899c:	f00a fc54 	bl	8013248 <LL_mDelay>
			SetLED(0x00);
 80089a0:	2000      	movs	r0, #0
 80089a2:	f7f9 fb11 	bl	8001fc8 <SetLED>
			while(1){
				printf("  ENC_R%5d ENC_L%5d \r", 
					Get_encoder_value(enR),Get_encoder_value(enL)
 80089a6:	2001      	movs	r0, #1
 80089a8:	f7ff fa02 	bl	8007db0 <Get_encoder_value>
 80089ac:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 80089ae:	461c      	mov	r4, r3
					Get_encoder_value(enR),Get_encoder_value(enL)
 80089b0:	2000      	movs	r0, #0
 80089b2:	f7ff f9fd 	bl	8007db0 <Get_encoder_value>
 80089b6:	4603      	mov	r3, r0
				printf("  ENC_R%5d ENC_L%5d \r", 
 80089b8:	461a      	mov	r2, r3
 80089ba:	4621      	mov	r1, r4
 80089bc:	485d      	ldr	r0, [pc, #372]	; (8008b34 <MODE_exe_m0+0x240>)
 80089be:	f00b fb35 	bl	801402c <iprintf>
				);
				LL_mDelay( 500 );
 80089c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089c6:	f00a fc3f 	bl	8013248 <LL_mDelay>
				printf("  ENC_R%5d ENC_L%5d \r", 
 80089ca:	e7ec      	b.n	80089a6 <MODE_exe_m0+0xb2>
			}
			break;

		case MODE_2:
			SetLED(0x0e);
 80089cc:	200e      	movs	r0, #14
 80089ce:	f7f9 fafb 	bl	8001fc8 <SetLED>
			log_read2();
 80089d2:	f7ff fdff 	bl	80085d4 <log_read2>
			break;
 80089d6:	e0a5      	b.n	8008b24 <MODE_exe_m0+0x230>

		case MODE_3:
			SetLED(0x0e);
 80089d8:	200e      	movs	r0, #14
 80089da:	f7f9 faf5 	bl	8001fc8 <SetLED>
			Set_DutyTIM8(600);
 80089de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80089e2:	f7fc fad1 	bl	8004f88 <Set_DutyTIM8>
			break;
 80089e6:	e09d      	b.n	8008b24 <MODE_exe_m0+0x230>

		case MODE_4:
			SetLED(0x0e);
 80089e8:	200e      	movs	r0, #14
 80089ea:	f7f9 faed 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 80089ee:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8008b38 <MODE_exe_m0+0x244>
 80089f2:	f002 f9a9 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラローム開始速度設定
 80089f6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8008b38 <MODE_exe_m0+0x244>
 80089fa:	f002 f987 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普通
 80089fe:	2100      	movs	r1, #0
 8008a00:	2015      	movs	r0, #21
 8008a02:	f7f9 fea9 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普通
 8008a06:	2100      	movs	r1, #0
 8008a08:	2016      	movs	r0, #22
 8008a0a:	f7f9 fea5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普通
 8008a0e:	2100      	movs	r1, #0
 8008a10:	2017      	movs	r0, #23
 8008a12:	f7f9 fea1 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008a16:	2000      	movs	r0, #0
 8008a18:	f7f9 fad6 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8008a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a20:	f00a fc12 	bl	8013248 <LL_mDelay>
			CTRL_clrNowData();
 8008a24:	f7fc fefc 	bl	8005820 <CTRL_clrNowData>
			CTRL_clrData();
 8008a28:	f7fc feb0 	bl	800578c <CTRL_clrData>
			log_flag_on();
 8008a2c:	f7ff fdba 	bl	80085a4 <log_flag_on>
			MOT_goBlock_FinSpeed(3.0, 0.0);
 8008a30:	eddf 0a42 	vldr	s1, [pc, #264]	; 8008b3c <MODE_exe_m0+0x248>
 8008a34:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8008a38:	f001 fdd2 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			log_flag_off();
 8008a3c:	f7ff fdbe 	bl	80085bc <log_flag_off>
			break;
 8008a40:	e070      	b.n	8008b24 <MODE_exe_m0+0x230>

		case MODE_5:
			SetLED(0x0e);
 8008a42:	200e      	movs	r0, #14
 8008a44:	f7f9 fac0 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8008a48:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8008b38 <MODE_exe_m0+0x244>
 8008a4c:	f002 f97c 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラローム開始速度設定
 8008a50:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8008b38 <MODE_exe_m0+0x244>
 8008a54:	f002 f95a 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普通
 8008a58:	2100      	movs	r1, #0
 8008a5a:	2015      	movs	r0, #21
 8008a5c:	f7f9 fe7c 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普通
 8008a60:	2100      	movs	r1, #0
 8008a62:	2016      	movs	r0, #22
 8008a64:	f7f9 fe78 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普通
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2017      	movs	r0, #23
 8008a6c:	f7f9 fe74 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008a70:	2000      	movs	r0, #0
 8008a72:	f7f9 faa9 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8008a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a7a:	f00a fbe5 	bl	8013248 <LL_mDelay>
			log_flag_on();
 8008a7e:	f7ff fd91 	bl	80085a4 <log_flag_on>
			CTRL_clrNowData();
 8008a82:	f7fc fecd 	bl	8005820 <CTRL_clrNowData>
			CTRL_clrData();
 8008a86:	f7fc fe81 	bl	800578c <CTRL_clrData>
//			log_flag_on();
			MOT_turn(MOT_L90);
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f001 fe4c 	bl	800a728 <MOT_turn>
			LL_mDelay(500);
 8008a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a94:	f00a fbd8 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R90);
 8008a98:	2000      	movs	r0, #0
 8008a9a:	f001 fe45 	bl	800a728 <MOT_turn>
			log_flag_off();
 8008a9e:	f7ff fd8d 	bl	80085bc <log_flag_off>
			break;
 8008aa2:	e03f      	b.n	8008b24 <MODE_exe_m0+0x230>

		case MODE_6:
			SetLED(0x0e);
 8008aa4:	200e      	movs	r0, #14
 8008aa6:	f7f9 fa8f 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8008aaa:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8008b38 <MODE_exe_m0+0x244>
 8008aae:	f002 f94b 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							// スラローム開始速度設定
 8008ab2:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8008b38 <MODE_exe_m0+0x244>
 8008ab6:	f002 f929 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_SLOW );							// [直進] 速度普通
 8008aba:	2100      	movs	r1, #0
 8008abc:	2015      	movs	r0, #21
 8008abe:	f7f9 fe4b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_SLOW );							// [旋回] 速度普通
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2016      	movs	r0, #22
 8008ac6:	f7f9 fe47 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_SLOW );							// [スラ] 速度普通
 8008aca:	2100      	movs	r1, #0
 8008acc:	2017      	movs	r0, #23
 8008ace:	f7f9 fe43 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f7f9 fa78 	bl	8001fc8 <SetLED>
			LL_mDelay(500);
 8008ad8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008adc:	f00a fbb4 	bl	8013248 <LL_mDelay>
			CTRL_clrNowData();
 8008ae0:	f7fc fe9e 	bl	8005820 <CTRL_clrNowData>
			CTRL_clrData();
 8008ae4:	f7fc fe52 	bl	800578c <CTRL_clrData>
			log_flag_on();
 8008ae8:	f7ff fd5c 	bl	80085a4 <log_flag_on>
			
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
 8008aec:	eddf 0a12 	vldr	s1, [pc, #72]	; 8008b38 <MODE_exe_m0+0x244>
 8008af0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008af4:	f001 fd74 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_90 ));
 8008af8:	2000      	movs	r0, #0
 8008afa:	f7fa fa83 	bl	8003004 <PARAM_getSra>
 8008afe:	4603      	mov	r3, r0
 8008b00:	4619      	mov	r1, r3
 8008b02:	2000      	movs	r0, #0
 8008b04:	f002 f998 	bl	800ae38 <MOT_goSla>
			MOT_goBlock_FinSpeed(0.5, 0);
 8008b08:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8008b3c <MODE_exe_m0+0x248>
 8008b0c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008b10:	f001 fd66 	bl	800a5e0 <MOT_goBlock_FinSpeed>
/*
			MOT_goBlock_FinSpeed(0.5, SEARCH_SPEED);
			MOT_goSla(MOT_R90S, PARAM_getSra( SLA_135 ));
			MOT_goSkewBlock_FinSpeed(0.5, 0);
*/
			log_flag_off();
 8008b14:	f7ff fd52 	bl	80085bc <log_flag_off>
			break;
 8008b18:	e004      	b.n	8008b24 <MODE_exe_m0+0x230>

		case MODE_7:
			SetLED(0x0e);
 8008b1a:	200e      	movs	r0, #14
 8008b1c:	f7f9 fa54 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8008b20:	e000      	b.n	8008b24 <MODE_exe_m0+0x230>

		default:
			break;
 8008b22:	bf00      	nop
	}
}
 8008b24:	bf00      	nop
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bdb0      	pop	{r4, r5, r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20005dec 	.word	0x20005dec
 8008b30:	08019514 	.word	0x08019514
 8008b34:	0801952c 	.word	0x0801952c
 8008b38:	3e99999a 	.word	0x3e99999a
 8008b3c:	00000000 	.word	0x00000000

08008b40 <MODE_exe_m1>:

void MODE_exe_m1( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 8008b52:	f7ff fb13 	bl	800817c <GYRO_SetRef>

	switch( en_Mode ){
 8008b56:	4b30      	ldr	r3, [pc, #192]	; (8008c18 <MODE_exe_m1+0xd8>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b07      	cmp	r3, #7
 8008b5c:	d857      	bhi.n	8008c0e <MODE_exe_m1+0xce>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <MODE_exe_m1+0x24>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b85 	.word	0x08008b85
 8008b68:	08008b8d 	.word	0x08008b8d
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	08008ba5 	.word	0x08008ba5
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bbd 	.word	0x08008bbd
 8008b7c:	08008bff 	.word	0x08008bff
 8008b80:	08008c07 	.word	0x08008c07

		case MODE_0:
			SetLED(0x0e);
 8008b84:	200e      	movs	r0, #14
 8008b86:	f7f9 fa1f 	bl	8001fc8 <SetLED>
			break;
 8008b8a:	e041      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_1:
			SetLED(0x0e);
 8008b8c:	200e      	movs	r0, #14
 8008b8e:	f7f9 fa1b 	bl	8001fc8 <SetLED>
			map_erase();
 8008b92:	f006 fb1d 	bl	800f1d0 <map_erase>
			break;
 8008b96:	e03b      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_2:
			SetLED(0x0e);
 8008b98:	200e      	movs	r0, #14
 8008b9a:	f7f9 fa15 	bl	8001fc8 <SetLED>
			MAP_showLog();
 8008b9e:	f006 fb77 	bl	800f290 <MAP_showLog>
			break;
 8008ba2:	e035      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_3:
			SetLED(0x0e);
 8008ba4:	200e      	movs	r0, #14
 8008ba6:	f7f9 fa0f 	bl	8001fc8 <SetLED>
			map_copy();
 8008baa:	f006 faeb 	bl	800f184 <map_copy>
			break;
 8008bae:	e02f      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_4:
			SetLED(0x0e);
 8008bb0:	200e      	movs	r0, #14
 8008bb2:	f7f9 fa09 	bl	8001fc8 <SetLED>
			map_write();
 8008bb6:	f006 fad1 	bl	800f15c <map_write>
			break;
 8008bba:	e029      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_5:
			SetLED(0x0e);
 8008bbc:	200e      	movs	r0, #14
 8008bbe:	f7f9 fa03 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f006 fb40 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8008bcc:	2001      	movs	r0, #1
 8008bce:	f007 fe93 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2109      	movs	r1, #9
 8008bd6:	2009      	movs	r0, #9
 8008bd8:	f006 ffd8 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8008bdc:	1dfb      	adds	r3, r7, #7
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	2309      	movs	r3, #9
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2309      	movs	r3, #9
 8008be6:	2200      	movs	r2, #0
 8008be8:	2100      	movs	r1, #0
 8008bea:	2000      	movs	r0, #0
 8008bec:	f004 f9b6 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8008bf0:	f004 fc0c 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8008bf4:	f004 fd86 	bl	800d704 <MAP_makeSkewCmdList>
			MAP_showCmdLog();
 8008bf8:	f004 f960 	bl	800cebc <MAP_showCmdLog>
			break;
 8008bfc:	e008      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_6:
			SetLED(0x0e);
 8008bfe:	200e      	movs	r0, #14
 8008c00:	f7f9 f9e2 	bl	8001fc8 <SetLED>
			break;
 8008c04:	e004      	b.n	8008c10 <MODE_exe_m1+0xd0>

		case MODE_7:
			SetLED(0x0e);
 8008c06:	200e      	movs	r0, #14
 8008c08:	f7f9 f9de 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8008c0c:	e000      	b.n	8008c10 <MODE_exe_m1+0xd0>

		default:
			break;
 8008c0e:	bf00      	nop
	}
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20005dec 	.word	0x20005dec

08008c1c <MODE_exe_m2>:

void MODE_exe_m2( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 8008c2e:	f7ff faa5 	bl	800817c <GYRO_SetRef>

	switch( en_Mode ){
 8008c32:	4bc3      	ldr	r3, [pc, #780]	; (8008f40 <MODE_exe_m2+0x324>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	f200 8176 	bhi.w	8008f28 <MODE_exe_m2+0x30c>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <MODE_exe_m2+0x28>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008d45 	.word	0x08008d45
 8008c4c:	08008e25 	.word	0x08008e25
 8008c50:	08008f01 	.word	0x08008f01
 8008c54:	08008f09 	.word	0x08008f09
 8008c58:	08008f11 	.word	0x08008f11
 8008c5c:	08008f19 	.word	0x08008f19
 8008c60:	08008f21 	.word	0x08008f21

		case MODE_0:
			SetLED(0x0e);
 8008c64:	200e      	movs	r0, #14
 8008c66:	f7f9 f9af 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8008c6a:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8008f44 <MODE_exe_m2+0x328>
 8008c6e:	f002 f86b 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8008c72:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8008f44 <MODE_exe_m2+0x328>
 8008c76:	f002 f849 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	2015      	movs	r0, #21
 8008c7e:	f7f9 fd6b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8008c82:	2101      	movs	r1, #1
 8008c84:	2016      	movs	r0, #22
 8008c86:	f7f9 fd67 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	2017      	movs	r0, #23
 8008c8e:	f7f9 fd63 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008c92:	2000      	movs	r0, #0
 8008c94:	f7f9 f998 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8008c98:	2064      	movs	r0, #100	; 0x64
 8008c9a:	f00a fad5 	bl	8013248 <LL_mDelay>
			MAP_Goalsize(1);
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f007 fe2a 	bl	80108f8 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );						
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f006 facf 	bl	800f24c <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8008cae:	2301      	movs	r3, #1
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2109      	movs	r1, #9
 8008cb4:	2009      	movs	r0, #9
 8008cb6:	f008 fb9b 	bl	80113f0 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008cba:	f7f9 fa03 	bl	80020c4 <SW_IsOn_1>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d006      	beq.n	8008cd2 <MODE_exe_m2+0xb6>
 8008cc4:	f7fe ffda 	bl	8007c7c <SYS_isOutOfCtrl>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <MODE_exe_m2+0xb6>
			else{
				map_write();
 8008cce:	f006 fa45 	bl	800f15c <map_write>
			}
			
			SetLED(0x0e);
 8008cd2:	200e      	movs	r0, #14
 8008cd4:	f7f9 f978 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f007 fe0d 	bl	80108f8 <MAP_Goalsize>
			SetLED(0x00);
 8008cde:	2000      	movs	r0, #0
 8008ce0:	f7f9 f972 	bl	8001fc8 <SetLED>

			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	2000      	movs	r0, #0
 8008cec:	f008 fb80 	bl	80113f0 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008cf0:	f7f9 f9e8 	bl	80020c4 <SW_IsOn_1>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	f000 8118 	beq.w	8008f2c <MODE_exe_m2+0x310>
 8008cfc:	f7fe ffbe 	bl	8007c7c <SYS_isOutOfCtrl>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 8112 	bne.w	8008f2c <MODE_exe_m2+0x310>
			else{
				map_write();
 8008d08:	f006 fa28 	bl	800f15c <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	2000      	movs	r0, #0
 8008d12:	f006 fa9b 	bl	800f24c <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8008d16:	2201      	movs	r2, #1
 8008d18:	2109      	movs	r1, #9
 8008d1a:	2009      	movs	r0, #9
 8008d1c:	f006 ff36 	bl	800fb8c <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8008d20:	1dfb      	adds	r3, r7, #7
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	2309      	movs	r3, #9
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	2309      	movs	r3, #9
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f004 f914 	bl	800cf5c <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロームコマンド作成
 8008d34:	f004 fb6a 	bl	800d40c <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8008d38:	f004 fce4 	bl	800d704 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	f7f9 f943 	bl	8001fc8 <SetLED>
			}
			break;
 8008d42:	e0f3      	b.n	8008f2c <MODE_exe_m2+0x310>

		case MODE_1:
			SetLED(0x0e);
 8008d44:	200e      	movs	r0, #14
 8008d46:	f7f9 f93f 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8008d4a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8008f44 <MODE_exe_m2+0x328>
 8008d4e:	f001 fffb 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8008d52:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8008f44 <MODE_exe_m2+0x328>
 8008d56:	f001 ffd9 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	2015      	movs	r0, #21
 8008d5e:	f7f9 fcfb 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8008d62:	2101      	movs	r1, #1
 8008d64:	2016      	movs	r0, #22
 8008d66:	f7f9 fcf7 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	2017      	movs	r0, #23
 8008d6e:	f7f9 fcf3 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008d72:	2000      	movs	r0, #0
 8008d74:	f7f9 f928 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8008d78:	2064      	movs	r0, #100	; 0x64
 8008d7a:	f00a fa65 	bl	8013248 <LL_mDelay>
			MAP_Goalsize(1);
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f007 fdba 	bl	80108f8 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8008d84:	2200      	movs	r2, #0
 8008d86:	2100      	movs	r1, #0
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f006 fa5f 	bl	800f24c <MAP_setPos>

			MAP_searchGoal(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8008d8e:	2301      	movs	r3, #1
 8008d90:	2200      	movs	r2, #0
 8008d92:	2109      	movs	r1, #9
 8008d94:	2009      	movs	r0, #9
 8008d96:	f008 fb2b 	bl	80113f0 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008d9a:	f7f9 f993 	bl	80020c4 <SW_IsOn_1>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d006      	beq.n	8008db2 <MODE_exe_m2+0x196>
 8008da4:	f7fe ff6a 	bl	8007c7c <SYS_isOutOfCtrl>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <MODE_exe_m2+0x196>
			else{
				map_write();
 8008dae:	f006 f9d5 	bl	800f15c <map_write>
			}
			
			SetLED(0x0e);
 8008db2:	200e      	movs	r0, #14
 8008db4:	f7f9 f908 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8008db8:	2001      	movs	r0, #1
 8008dba:	f007 fd9d 	bl	80108f8 <MAP_Goalsize>
			SetLED(0x00);
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f7f9 f902 	bl	8001fc8 <SetLED>

//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
			MAP_searchGoal( 0, 0, SEARCH, SEARCH_RETURN );
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f008 fb10 	bl	80113f0 <MAP_searchGoal>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008dd0:	f7f9 f978 	bl	80020c4 <SW_IsOn_1>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	f000 80aa 	beq.w	8008f30 <MODE_exe_m2+0x314>
 8008ddc:	f7fe ff4e 	bl	8007c7c <SYS_isOutOfCtrl>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f040 80a4 	bne.w	8008f30 <MODE_exe_m2+0x314>
			else{
				map_write();
 8008de8:	f006 f9b8 	bl	800f15c <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8008dec:	2200      	movs	r2, #0
 8008dee:	2100      	movs	r1, #0
 8008df0:	2000      	movs	r0, #0
 8008df2:	f006 fa2b 	bl	800f24c <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8008df6:	2201      	movs	r2, #1
 8008df8:	2109      	movs	r1, #9
 8008dfa:	2009      	movs	r0, #9
 8008dfc:	f006 fec6 	bl	800fb8c <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8008e00:	1dfb      	adds	r3, r7, #7
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	2309      	movs	r3, #9
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2309      	movs	r3, #9
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f004 f8a4 	bl	800cf5c <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロームコマンド作成
 8008e14:	f004 fafa 	bl	800d40c <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8008e18:	f004 fc74 	bl	800d704 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7f9 f8d3 	bl	8001fc8 <SetLED>
			}
			break;
 8008e22:	e085      	b.n	8008f30 <MODE_exe_m2+0x314>

		case MODE_2:
			SetLED(0x0e);
 8008e24:	200e      	movs	r0, #14
 8008e26:	f7f9 f8cf 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED);
 8008e2a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8008f44 <MODE_exe_m2+0x328>
 8008e2e:	f001 ff8b 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8008e32:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8008f44 <MODE_exe_m2+0x328>
 8008e36:	f001 ff69 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	2015      	movs	r0, #21
 8008e3e:	f7f9 fc8b 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8008e42:	2101      	movs	r1, #1
 8008e44:	2016      	movs	r0, #22
 8008e46:	f7f9 fc87 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	2017      	movs	r0, #23
 8008e4e:	f7f9 fc83 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008e52:	2000      	movs	r0, #0
 8008e54:	f7f9 f8b8 	bl	8001fc8 <SetLED>
			LL_mDelay(100);
 8008e58:	2064      	movs	r0, #100	; 0x64
 8008e5a:	f00a f9f5 	bl	8013248 <LL_mDelay>
//			PARAM_makeSra( (float)SEARCH_SPEED, 150.0f, 3.00f, SLA_90 );
			MAP_Goalsize(1);
 8008e5e:	2001      	movs	r0, #1
 8008e60:	f007 fd4a 	bl	80108f8 <MAP_Goalsize>
			MAP_setPos( 0, 0, NORTH );							
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f006 f9ef 	bl	800f24c <MAP_setPos>

			MAP_searchGoalKnown(GOAL_MAP_X_def, GOAL_MAP_Y_def, SEARCH, SEARCH_SURA );			
 8008e6e:	2301      	movs	r3, #1
 8008e70:	2200      	movs	r2, #0
 8008e72:	2109      	movs	r1, #9
 8008e74:	2009      	movs	r0, #9
 8008e76:	f008 fc13 	bl	80116a0 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008e7a:	f7f9 f923 	bl	80020c4 <SW_IsOn_1>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d006      	beq.n	8008e92 <MODE_exe_m2+0x276>
 8008e84:	f7fe fefa 	bl	8007c7c <SYS_isOutOfCtrl>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <MODE_exe_m2+0x276>
			else{
				map_write();
 8008e8e:	f006 f965 	bl	800f15c <map_write>
			}
			
			SetLED(0x0e);
 8008e92:	200e      	movs	r0, #14
 8008e94:	f7f9 f898 	bl	8001fc8 <SetLED>
			MAP_Goalsize(1);
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f007 fd2d 	bl	80108f8 <MAP_Goalsize>
			SetLED(0x00);
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f7f9 f892 	bl	8001fc8 <SetLED>

//			MAP_searchGoal( 0, 0, SEARCH, SEARCH_SURA );
			MAP_searchGoalKnown( 0, 0, SEARCH, SEARCH_RETURN );
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f008 fbf8 	bl	80116a0 <MAP_searchGoalKnown>

			if (( SW_IsOn_1() == SW_ON)||(SYS_isOutOfCtrl() == TRUE)){}
 8008eb0:	f7f9 f908 	bl	80020c4 <SW_IsOn_1>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d03c      	beq.n	8008f34 <MODE_exe_m2+0x318>
 8008eba:	f7fe fedf 	bl	8007c7c <SYS_isOutOfCtrl>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d137      	bne.n	8008f34 <MODE_exe_m2+0x318>
			else{
				map_write();
 8008ec4:	f006 f94a 	bl	800f15c <map_write>
				MAP_setPos( 0, 0, NORTH );								// スタート位置
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2100      	movs	r1, #0
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f006 f9bd 	bl	800f24c <MAP_setPos>
				MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	2109      	movs	r1, #9
 8008ed6:	2009      	movs	r0, #9
 8008ed8:	f006 fe58 	bl	800fb8c <MAP_makeContourMap_run>
				MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8008edc:	1dfb      	adds	r3, r7, #7
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	2309      	movs	r3, #9
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2309      	movs	r3, #9
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	2000      	movs	r0, #0
 8008eec:	f004 f836 	bl	800cf5c <MAP_makeCmdList>
				MAP_makeSuraCmdList();													// スラロームコマンド作成
 8008ef0:	f004 fa8c 	bl	800d40c <MAP_makeSuraCmdList>
				MAP_makeSkewCmdList();
 8008ef4:	f004 fc06 	bl	800d704 <MAP_makeSkewCmdList>
				SetLED(0x00);
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f7f9 f865 	bl	8001fc8 <SetLED>
			}
			break;
 8008efe:	e019      	b.n	8008f34 <MODE_exe_m2+0x318>

		case MODE_3:
			SetLED(0x0e);
 8008f00:	200e      	movs	r0, #14
 8008f02:	f7f9 f861 	bl	8001fc8 <SetLED>
			
			break;
 8008f06:	e016      	b.n	8008f36 <MODE_exe_m2+0x31a>

		case MODE_4:
			SetLED(0x0e);
 8008f08:	200e      	movs	r0, #14
 8008f0a:	f7f9 f85d 	bl	8001fc8 <SetLED>
			break;
 8008f0e:	e012      	b.n	8008f36 <MODE_exe_m2+0x31a>

		case MODE_5:
			SetLED(0x0e);
 8008f10:	200e      	movs	r0, #14
 8008f12:	f7f9 f859 	bl	8001fc8 <SetLED>
			break;
 8008f16:	e00e      	b.n	8008f36 <MODE_exe_m2+0x31a>

		case MODE_6:
			SetLED(0x0e);
 8008f18:	200e      	movs	r0, #14
 8008f1a:	f7f9 f855 	bl	8001fc8 <SetLED>
			break;
 8008f1e:	e00a      	b.n	8008f36 <MODE_exe_m2+0x31a>

		case MODE_7:
			SetLED(0x0e);
 8008f20:	200e      	movs	r0, #14
 8008f22:	f7f9 f851 	bl	8001fc8 <SetLED>
			//cant use
			break;
 8008f26:	e006      	b.n	8008f36 <MODE_exe_m2+0x31a>

		default:
			break;
 8008f28:	bf00      	nop
 8008f2a:	e004      	b.n	8008f36 <MODE_exe_m2+0x31a>
			break;
 8008f2c:	bf00      	nop
 8008f2e:	e002      	b.n	8008f36 <MODE_exe_m2+0x31a>
			break;
 8008f30:	bf00      	nop
 8008f32:	e000      	b.n	8008f36 <MODE_exe_m2+0x31a>
			break;
 8008f34:	bf00      	nop
	}
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20005dec 	.word	0x20005dec
 8008f44:	3e99999a 	.word	0x3e99999a

08008f48 <MODE_exe_m3>:

void MODE_exe_m3( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af02      	add	r7, sp, #8
	enMAP_HEAD_DIR		en_endDir2;

	uint64_t data =0;
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	e9c7 2302 	strd	r2, r3, [r7, #8]

	GYRO_SetRef();
 8008f5a:	f7ff f90f 	bl	800817c <GYRO_SetRef>

	switch( en_Mode ){
 8008f5e:	4be2      	ldr	r3, [pc, #904]	; (80092e8 <MODE_exe_m3+0x3a0>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b07      	cmp	r3, #7
 8008f64:	f200 8226 	bhi.w	80093b4 <MODE_exe_m3+0x46c>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <MODE_exe_m3+0x28>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08009037 	.word	0x08009037
 8008f78:	080090e3 	.word	0x080090e3
 8008f7c:	0800918f 	.word	0x0800918f
 8008f80:	0800923b 	.word	0x0800923b
 8008f84:	080092f9 	.word	0x080092f9
 8008f88:	080093a5 	.word	0x080093a5
 8008f8c:	080093ad 	.word	0x080093ad

		case MODE_0:
			SetLED(0x0e);
 8008f90:	200e      	movs	r0, #14
 8008f92:	f7f9 f819 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 8008f96:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80092ec <MODE_exe_m3+0x3a4>
 8008f9a:	f001 fed5 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8008f9e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80092f4 <MODE_exe_m3+0x3ac>
 8008fa2:	f001 feb3 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	2015      	movs	r0, #21
 8008faa:	f7f9 fbd5 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 8008fae:	2101      	movs	r1, #1
 8008fb0:	2016      	movs	r0, #22
 8008fb2:	f7f9 fbd1 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	2017      	movs	r0, #23
 8008fba:	f7f9 fbcd 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f7f9 f802 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f006 f93f 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8008fce:	2001      	movs	r0, #1
 8008fd0:	f007 fc92 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	2109      	movs	r1, #9
 8008fd8:	2009      	movs	r0, #9
 8008fda:	f006 fdd7 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8008fde:	1dfb      	adds	r3, r7, #7
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	2309      	movs	r3, #9
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	2309      	movs	r3, #9
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	2000      	movs	r0, #0
 8008fee:	f003 ffb5 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8008ff2:	f004 fa0b 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8008ff6:	f004 fb85 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8008ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ffe:	f00a f923 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 8009002:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009006:	f7fb ffbf 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 800900a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800900e:	f00a f91b 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(0);
 8009012:	2000      	movs	r0, #0
 8009014:	f7fb ffb8 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800901c:	f00a f914 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009020:	2002      	movs	r0, #2
 8009022:	f001 fb81 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 8009026:	f007 fc31 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800902a:	2000      	movs	r0, #0
 800902c:	f7fb ffac 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009030:	f7fe fe18 	bl	8007c64 <Failsafe_flag_off>
			break;
 8009034:	e1bf      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_1:
			SetLED(0x0e);
 8009036:	200e      	movs	r0, #14
 8009038:	f7f8 ffc6 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 800903c:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009040:	f001 fe82 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009044:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80092f4 <MODE_exe_m3+0x3ac>
 8009048:	f001 fe60 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 800904c:	2102      	movs	r1, #2
 800904e:	2015      	movs	r0, #21
 8009050:	f7f9 fb82 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009054:	2102      	movs	r1, #2
 8009056:	2016      	movs	r0, #22
 8009058:	f7f9 fb7e 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 800905c:	2102      	movs	r1, #2
 800905e:	2017      	movs	r0, #23
 8009060:	f7f9 fb7a 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009064:	2000      	movs	r0, #0
 8009066:	f7f8 ffaf 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	2000      	movs	r0, #0
 8009070:	f006 f8ec 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8009074:	2001      	movs	r0, #1
 8009076:	f007 fc3f 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 800907a:	2201      	movs	r2, #1
 800907c:	2109      	movs	r1, #9
 800907e:	2009      	movs	r0, #9
 8009080:	f006 fd84 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8009084:	1dfb      	adds	r3, r7, #7
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2309      	movs	r3, #9
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2309      	movs	r3, #9
 800908e:	2200      	movs	r2, #0
 8009090:	2100      	movs	r1, #0
 8009092:	2000      	movs	r0, #0
 8009094:	f003 ff62 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8009098:	f004 f9b8 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800909c:	f004 fb32 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 80090a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090a4:	f00a f8d0 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 80090a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80090ac:	f7fb ff6c 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 80090b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80090b4:	f00a f8c8 	bl	8013248 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 80090b8:	2001      	movs	r0, #1
 80090ba:	f005 fad9 	bl	800e670 <MAP_drive>
			Set_DutyTIM8(0);
 80090be:	2000      	movs	r0, #0
 80090c0:	f7fb ff62 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 80090c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090c8:	f00a f8be 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 80090cc:	2002      	movs	r0, #2
 80090ce:	f001 fb2b 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 80090d2:	f007 fbdb 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 80090d6:	2000      	movs	r0, #0
 80090d8:	f7fb ff56 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 80090dc:	f7fe fdc2 	bl	8007c64 <Failsafe_flag_off>
			break;
 80090e0:	e169      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_2:
			SetLED(0x0e);
 80090e2:	200e      	movs	r0, #14
 80090e4:	f7f8 ff70 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 80090e8:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80092f0 <MODE_exe_m3+0x3a8>
 80090ec:	f001 fe2c 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 80090f0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80092f4 <MODE_exe_m3+0x3ac>
 80090f4:	f001 fe0a 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 80090f8:	2104      	movs	r1, #4
 80090fa:	2015      	movs	r0, #21
 80090fc:	f7f9 fb2c 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 8009100:	2104      	movs	r1, #4
 8009102:	2016      	movs	r0, #22
 8009104:	f7f9 fb28 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 8009108:	2104      	movs	r1, #4
 800910a:	2017      	movs	r0, #23
 800910c:	f7f9 fb24 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009110:	2000      	movs	r0, #0
 8009112:	f7f8 ff59 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	2000      	movs	r0, #0
 800911c:	f006 f896 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8009120:	2001      	movs	r0, #1
 8009122:	f007 fbe9 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 8009126:	2201      	movs	r2, #1
 8009128:	2109      	movs	r1, #9
 800912a:	2009      	movs	r0, #9
 800912c:	f006 fd2e 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8009130:	1dfb      	adds	r3, r7, #7
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	2309      	movs	r3, #9
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	2309      	movs	r3, #9
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	2000      	movs	r0, #0
 8009140:	f003 ff0c 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 8009144:	f004 f962 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 8009148:	f004 fadc 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 800914c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009150:	f00a f87a 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 8009154:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009158:	f7fb ff16 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);												
 800915c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009160:	f00a f872 	bl	8013248 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SURA );
 8009164:	2001      	movs	r0, #1
 8009166:	f005 fa83 	bl	800e670 <MAP_drive>
			Set_DutyTIM8(0);
 800916a:	2000      	movs	r0, #0
 800916c:	f7fb ff0c 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009174:	f00a f868 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009178:	2002      	movs	r0, #2
 800917a:	f001 fad5 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 800917e:	f007 fb85 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);			
 8009182:	2000      	movs	r0, #0
 8009184:	f7fb ff00 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009188:	f7fe fd6c 	bl	8007c64 <Failsafe_flag_off>
			break;
 800918c:	e113      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_3:
			SetLED(0x0e);
 800918e:	200e      	movs	r0, #14
 8009190:	f7f8 ff1a 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*4.0);
 8009194:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80092ec <MODE_exe_m3+0x3a4>
 8009198:	f001 fdd6 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 800919c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80092f4 <MODE_exe_m3+0x3ac>
 80091a0:	f001 fdb4 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_SLOW );							
 80091a4:	2101      	movs	r1, #1
 80091a6:	2015      	movs	r0, #21
 80091a8:	f7f9 fad6 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_SLOW );							
 80091ac:	2101      	movs	r1, #1
 80091ae:	2016      	movs	r0, #22
 80091b0:	f7f9 fad2 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_SLOW );							
 80091b4:	2101      	movs	r1, #1
 80091b6:	2017      	movs	r0, #23
 80091b8:	f7f9 face 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 80091bc:	2000      	movs	r0, #0
 80091be:	f7f8 ff03 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 80091c2:	2200      	movs	r2, #0
 80091c4:	2100      	movs	r1, #0
 80091c6:	2000      	movs	r0, #0
 80091c8:	f006 f840 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 80091cc:	2001      	movs	r0, #1
 80091ce:	f007 fb93 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 80091d2:	2201      	movs	r2, #1
 80091d4:	2109      	movs	r1, #9
 80091d6:	2009      	movs	r0, #9
 80091d8:	f006 fcd8 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 80091dc:	1dfb      	adds	r3, r7, #7
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2309      	movs	r3, #9
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2309      	movs	r3, #9
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	2000      	movs	r0, #0
 80091ec:	f003 feb6 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 80091f0:	f004 f90c 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 80091f4:	f004 fa86 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 80091f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091fc:	f00a f824 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 8009200:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009204:	f7fb fec0 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800920c:	f00a f81c 	bl	8013248 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 8009210:	2002      	movs	r0, #2
 8009212:	f005 fa2d 	bl	800e670 <MAP_drive>
			Set_DutyTIM8(0);
 8009216:	2000      	movs	r0, #0
 8009218:	f7fb feb6 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 800921c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009220:	f00a f812 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 8009224:	2002      	movs	r0, #2
 8009226:	f001 fa7f 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 800922a:	f007 fb2f 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 800922e:	2000      	movs	r0, #0
 8009230:	f7fb feaa 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 8009234:	f7fe fd16 	bl	8007c64 <Failsafe_flag_off>
			break;
 8009238:	e0bd      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_4:
			SetLED(0x0e);
 800923a:	200e      	movs	r0, #14
 800923c:	f7f8 fec4 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*5.0);
 8009240:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8009244:	f001 fd80 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009248:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80092f4 <MODE_exe_m3+0x3ac>
 800924c:	f001 fd5e 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_NORMAL );							
 8009250:	2102      	movs	r1, #2
 8009252:	2015      	movs	r0, #21
 8009254:	f7f9 fa80 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_NORMAL );							
 8009258:	2102      	movs	r1, #2
 800925a:	2016      	movs	r0, #22
 800925c:	f7f9 fa7c 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_NORMAL );							
 8009260:	2102      	movs	r1, #2
 8009262:	2017      	movs	r0, #23
 8009264:	f7f9 fa78 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009268:	2000      	movs	r0, #0
 800926a:	f7f8 fead 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	2000      	movs	r0, #0
 8009274:	f005 ffea 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8009278:	2001      	movs	r0, #1
 800927a:	f007 fb3d 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 800927e:	2201      	movs	r2, #1
 8009280:	2109      	movs	r1, #9
 8009282:	2009      	movs	r0, #9
 8009284:	f006 fc82 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8009288:	1dfb      	adds	r3, r7, #7
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	2309      	movs	r3, #9
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	2309      	movs	r3, #9
 8009292:	2200      	movs	r2, #0
 8009294:	2100      	movs	r1, #0
 8009296:	2000      	movs	r0, #0
 8009298:	f003 fe60 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 800929c:	f004 f8b6 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 80092a0:	f004 fa30 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 80092a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092a8:	f009 ffce 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 80092ac:	f44f 7016 	mov.w	r0, #600	; 0x258
 80092b0:	f7fb fe6a 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 80092b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80092b8:	f009 ffc6 	bl	8013248 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 80092bc:	2002      	movs	r0, #2
 80092be:	f005 f9d7 	bl	800e670 <MAP_drive>
			Set_DutyTIM8(0);
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7fb fe60 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 80092c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092cc:	f009 ffbc 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 80092d0:	2002      	movs	r0, #2
 80092d2:	f001 fa29 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 80092d6:	f007 fad9 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 80092da:	2000      	movs	r0, #0
 80092dc:	f7fb fe54 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 80092e0:	f7fe fcc0 	bl	8007c64 <Failsafe_flag_off>
			break;
 80092e4:	e067      	b.n	80093b6 <MODE_exe_m3+0x46e>
 80092e6:	bf00      	nop
 80092e8:	20005dec 	.word	0x20005dec
 80092ec:	3f99999a 	.word	0x3f99999a
 80092f0:	3fe66666 	.word	0x3fe66666
 80092f4:	3e99999a 	.word	0x3e99999a

		case MODE_5:
			SetLED(0x0e);
 80092f8:	200e      	movs	r0, #14
 80092fa:	f7f8 fe65 	bl	8001fc8 <SetLED>
			MOT_setTrgtSpeed(SEARCH_SPEED*6.0);
 80092fe:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 80092f0 <MODE_exe_m3+0x3a8>
 8009302:	f001 fd21 	bl	800ad48 <MOT_setTrgtSpeed>
			MOT_setSuraStaSpeed( SEARCH_SPEED );							
 8009306:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 80092f4 <MODE_exe_m3+0x3ac>
 800930a:	f001 fcff 	bl	800ad0c <MOT_setSuraStaSpeed>
			PARAM_setSpeedType( PARAM_ST,   PARAM_VERY_FAST );							
 800930e:	2104      	movs	r1, #4
 8009310:	2015      	movs	r0, #21
 8009312:	f7f9 fa21 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_TRUN, PARAM_VERY_FAST );							
 8009316:	2104      	movs	r1, #4
 8009318:	2016      	movs	r0, #22
 800931a:	f7f9 fa1d 	bl	8002758 <PARAM_setSpeedType>
			PARAM_setSpeedType( PARAM_SLA,  PARAM_VERY_FAST );							
 800931e:	2104      	movs	r1, #4
 8009320:	2017      	movs	r0, #23
 8009322:	f7f9 fa19 	bl	8002758 <PARAM_setSpeedType>
			SetLED(0x00);
 8009326:	2000      	movs	r0, #0
 8009328:	f7f8 fe4e 	bl	8001fc8 <SetLED>
			MAP_setPos( 0, 0, NORTH );												// スタート位置
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	2000      	movs	r0, #0
 8009332:	f005 ff8b 	bl	800f24c <MAP_setPos>
			MAP_Goalsize(1);
 8009336:	2001      	movs	r0, #1
 8009338:	f007 fade 	bl	80108f8 <MAP_Goalsize>
			MAP_makeContourMap_run( GOAL_MAP_X_def, GOAL_MAP_Y_def, BEST_WAY );					// 等高線マップを作る
 800933c:	2201      	movs	r2, #1
 800933e:	2109      	movs	r1, #9
 8009340:	2009      	movs	r0, #9
 8009342:	f006 fc23 	bl	800fb8c <MAP_makeContourMap_run>
			MAP_makeCmdList( 0, 0, NORTH, GOAL_MAP_X_def, GOAL_MAP_Y_def, &en_endDir2 );		// ドライブコマンド作成
 8009346:	1dfb      	adds	r3, r7, #7
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	2309      	movs	r3, #9
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	2309      	movs	r3, #9
 8009350:	2200      	movs	r2, #0
 8009352:	2100      	movs	r1, #0
 8009354:	2000      	movs	r0, #0
 8009356:	f003 fe01 	bl	800cf5c <MAP_makeCmdList>
			MAP_makeSuraCmdList();													// スラロームコマンド作成
 800935a:	f004 f857 	bl	800d40c <MAP_makeSuraCmdList>
			MAP_makeSkewCmdList();													
 800935e:	f004 f9d1 	bl	800d704 <MAP_makeSkewCmdList>
			LL_mDelay(500);
 8009362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009366:	f009 ff6f 	bl	8013248 <LL_mDelay>
			Set_DutyTIM8(600);
 800936a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800936e:	f7fb fe0b 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(2000);													
 8009372:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009376:	f009 ff67 	bl	8013248 <LL_mDelay>
			MAP_drive( MAP_DRIVE_SKEW );
 800937a:	2002      	movs	r0, #2
 800937c:	f005 f978 	bl	800e670 <MAP_drive>
			Set_DutyTIM8(0);
 8009380:	2000      	movs	r0, #0
 8009382:	f7fb fe01 	bl	8004f88 <Set_DutyTIM8>
			LL_mDelay(500);
 8009386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800938a:	f009 ff5d 	bl	8013248 <LL_mDelay>
			MOT_turn(MOT_R180);
 800938e:	2002      	movs	r0, #2
 8009390:	f001 f9ca 	bl	800a728 <MOT_turn>
			MAP_actGoalLED();
 8009394:	f007 fa7a 	bl	801088c <MAP_actGoalLED>
			Set_DutyTIM8(0);
 8009398:	2000      	movs	r0, #0
 800939a:	f7fb fdf5 	bl	8004f88 <Set_DutyTIM8>
			Failsafe_flag_off();
 800939e:	f7fe fc61 	bl	8007c64 <Failsafe_flag_off>
			break;
 80093a2:	e008      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_6:
			SetLED(0x0e);
 80093a4:	200e      	movs	r0, #14
 80093a6:	f7f8 fe0f 	bl	8001fc8 <SetLED>
			break;
 80093aa:	e004      	b.n	80093b6 <MODE_exe_m3+0x46e>

		case MODE_7:
			SetLED(0x0e);
 80093ac:	200e      	movs	r0, #14
 80093ae:	f7f8 fe0b 	bl	8001fc8 <SetLED>
			//cant use
			break;
 80093b2:	e000      	b.n	80093b6 <MODE_exe_m3+0x46e>

		default:
			break;
 80093b4:	bf00      	nop
	}
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop

080093c0 <MODE_exe>:

void MODE_exe( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
//	uint16_t *read;
	enMAP_HEAD_DIR		en_endDir;

	now_mode = mode_1;
 80093c4:	4b96      	ldr	r3, [pc, #600]	; (8009620 <MODE_exe+0x260>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	LL_mDelay(300);
 80093ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093ce:	f009 ff3b 	bl	8013248 <LL_mDelay>
	GYRO_SetRef();
 80093d2:	f7fe fed3 	bl	800817c <GYRO_SetRef>
	ENC_setref();
 80093d6:	f7fe fe31 	bl	800803c <ENC_setref>
	Failsafe_flag_off();
 80093da:	f7fe fc43 	bl	8007c64 <Failsafe_flag_off>
//	log_flag_on();	

	switch( en_Mode ){
 80093de:	4b91      	ldr	r3, [pc, #580]	; (8009624 <MODE_exe+0x264>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b07      	cmp	r3, #7
 80093e4:	f200 8118 	bhi.w	8009618 <MODE_exe+0x258>
 80093e8:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <MODE_exe+0x30>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009481 	.word	0x08009481
 80093f8:	080094f1 	.word	0x080094f1
 80093fc:	08009561 	.word	0x08009561
 8009400:	080095d1 	.word	0x080095d1
 8009404:	080095ed 	.word	0x080095ed
 8009408:	08009609 	.word	0x08009609
 800940c:	08009611 	.word	0x08009611

		case MODE_0://tune	
			SetLED(0x0e);
 8009410:	200e      	movs	r0, #14
 8009412:	f7f8 fdd9 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 8009416:	4b83      	ldr	r3, [pc, #524]	; (8009624 <MODE_exe+0x264>)
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800941c:	2064      	movs	r0, #100	; 0x64
 800941e:	f009 ff13 	bl	8013248 <LL_mDelay>
			SetLED(0x00);
 8009422:	2000      	movs	r0, #0
 8009424:	f7f8 fdd0 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 8009428:	4b7d      	ldr	r3, [pc, #500]	; (8009620 <MODE_exe+0x260>)
 800942a:	2210      	movs	r2, #16
 800942c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800942e:	f7f8 fe49 	bl	80020c4 <SW_IsOn_1>
 8009432:	4603      	mov	r3, r0
 8009434:	2b01      	cmp	r3, #1
 8009436:	d108      	bne.n	800944a <MODE_exe+0x8a>
					MODE_inc();								
 8009438:	f7ff f9ea 	bl	8008810 <MODE_inc>
					LL_mDelay(200);			
 800943c:	20c8      	movs	r0, #200	; 0xc8
 800943e:	f009 ff03 	bl	8013248 <LL_mDelay>
					printf("mode selecting_0\r\n");
 8009442:	4879      	ldr	r0, [pc, #484]	; (8009628 <MODE_exe+0x268>)
 8009444:	f00a fe8e 	bl	8014164 <puts>
 8009448:	e7f1      	b.n	800942e <MODE_exe+0x6e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800944a:	f7f8 fe2f 	bl	80020ac <SW_IsOn_0>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d004      	beq.n	800945e <MODE_exe+0x9e>
 8009454:	f000 f945 	bl	80096e2 <MODE_CheckExe>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0e7      	beq.n	800942e <MODE_exe+0x6e>
					MODE_exe_m0();								
 800945e:	f7ff fa49 	bl	80088f4 <MODE_exe_m0>
					LL_mDelay(200);				
 8009462:	20c8      	movs	r0, #200	; 0xc8
 8009464:	f009 fef0 	bl	8013248 <LL_mDelay>
					if (en_Mode == MODE_7){
 8009468:	4b6e      	ldr	r3, [pc, #440]	; (8009624 <MODE_exe+0x264>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b07      	cmp	r3, #7
 800946e:	d1de      	bne.n	800942e <MODE_exe+0x6e>
						now_mode = mode_1;
 8009470:	4b6b      	ldr	r3, [pc, #428]	; (8009620 <MODE_exe+0x260>)
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
						break;
 8009476:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_0;
 8009478:	4b6a      	ldr	r3, [pc, #424]	; (8009624 <MODE_exe+0x264>)
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
			break;
 800947e:	e0cc      	b.n	800961a <MODE_exe+0x25a>

		case MODE_1://flash
			SetLED(0x0e);
 8009480:	200e      	movs	r0, #14
 8009482:	f7f8 fda1 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 8009486:	4b67      	ldr	r3, [pc, #412]	; (8009624 <MODE_exe+0x264>)
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800948c:	2064      	movs	r0, #100	; 0x64
 800948e:	f009 fedb 	bl	8013248 <LL_mDelay>
			SetLED(0x00);
 8009492:	2000      	movs	r0, #0
 8009494:	f7f8 fd98 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 8009498:	4b61      	ldr	r3, [pc, #388]	; (8009620 <MODE_exe+0x260>)
 800949a:	2210      	movs	r2, #16
 800949c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800949e:	f7f8 fe11 	bl	80020c4 <SW_IsOn_1>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d108      	bne.n	80094ba <MODE_exe+0xfa>
					MODE_inc();								
 80094a8:	f7ff f9b2 	bl	8008810 <MODE_inc>
					LL_mDelay(200);			
 80094ac:	20c8      	movs	r0, #200	; 0xc8
 80094ae:	f009 fecb 	bl	8013248 <LL_mDelay>
					printf("mode selecting_1\r\n");
 80094b2:	485e      	ldr	r0, [pc, #376]	; (800962c <MODE_exe+0x26c>)
 80094b4:	f00a fe56 	bl	8014164 <puts>
 80094b8:	e7f1      	b.n	800949e <MODE_exe+0xde>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 80094ba:	f7f8 fdf7 	bl	80020ac <SW_IsOn_0>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d004      	beq.n	80094ce <MODE_exe+0x10e>
 80094c4:	f000 f90d 	bl	80096e2 <MODE_CheckExe>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0e7      	beq.n	800949e <MODE_exe+0xde>
					MODE_exe_m1();								
 80094ce:	f7ff fb37 	bl	8008b40 <MODE_exe_m1>
					LL_mDelay(200);				
 80094d2:	20c8      	movs	r0, #200	; 0xc8
 80094d4:	f009 feb8 	bl	8013248 <LL_mDelay>
					if (en_Mode == MODE_7){
 80094d8:	4b52      	ldr	r3, [pc, #328]	; (8009624 <MODE_exe+0x264>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b07      	cmp	r3, #7
 80094de:	d1de      	bne.n	800949e <MODE_exe+0xde>
						now_mode = mode_1;
 80094e0:	4b4f      	ldr	r3, [pc, #316]	; (8009620 <MODE_exe+0x260>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	701a      	strb	r2, [r3, #0]
						break;
 80094e6:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_1;
 80094e8:	4b4e      	ldr	r3, [pc, #312]	; (8009624 <MODE_exe+0x264>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
			break;
 80094ee:	e094      	b.n	800961a <MODE_exe+0x25a>

		case MODE_2://search
			SetLED(0x0e);
 80094f0:	200e      	movs	r0, #14
 80094f2:	f7f8 fd69 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 80094f6:	4b4b      	ldr	r3, [pc, #300]	; (8009624 <MODE_exe+0x264>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 80094fc:	2064      	movs	r0, #100	; 0x64
 80094fe:	f009 fea3 	bl	8013248 <LL_mDelay>
			SetLED(0x00);
 8009502:	2000      	movs	r0, #0
 8009504:	f7f8 fd60 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 8009508:	4b45      	ldr	r3, [pc, #276]	; (8009620 <MODE_exe+0x260>)
 800950a:	2210      	movs	r2, #16
 800950c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800950e:	f7f8 fdd9 	bl	80020c4 <SW_IsOn_1>
 8009512:	4603      	mov	r3, r0
 8009514:	2b01      	cmp	r3, #1
 8009516:	d108      	bne.n	800952a <MODE_exe+0x16a>
					MODE_inc();								
 8009518:	f7ff f97a 	bl	8008810 <MODE_inc>
					LL_mDelay(200);			
 800951c:	20c8      	movs	r0, #200	; 0xc8
 800951e:	f009 fe93 	bl	8013248 <LL_mDelay>
					printf("mode selecting_1\r\n");
 8009522:	4842      	ldr	r0, [pc, #264]	; (800962c <MODE_exe+0x26c>)
 8009524:	f00a fe1e 	bl	8014164 <puts>
 8009528:	e7f1      	b.n	800950e <MODE_exe+0x14e>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800952a:	f7f8 fdbf 	bl	80020ac <SW_IsOn_0>
 800952e:	4603      	mov	r3, r0
 8009530:	2b01      	cmp	r3, #1
 8009532:	d004      	beq.n	800953e <MODE_exe+0x17e>
 8009534:	f000 f8d5 	bl	80096e2 <MODE_CheckExe>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0e7      	beq.n	800950e <MODE_exe+0x14e>
					MODE_exe_m2();								
 800953e:	f7ff fb6d 	bl	8008c1c <MODE_exe_m2>
					LL_mDelay(200);				
 8009542:	20c8      	movs	r0, #200	; 0xc8
 8009544:	f009 fe80 	bl	8013248 <LL_mDelay>
					if (en_Mode == MODE_7){
 8009548:	4b36      	ldr	r3, [pc, #216]	; (8009624 <MODE_exe+0x264>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b07      	cmp	r3, #7
 800954e:	d1de      	bne.n	800950e <MODE_exe+0x14e>
						now_mode = mode_1;
 8009550:	4b33      	ldr	r3, [pc, #204]	; (8009620 <MODE_exe+0x260>)
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]
						break;
 8009556:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_2;
 8009558:	4b32      	ldr	r3, [pc, #200]	; (8009624 <MODE_exe+0x264>)
 800955a:	2202      	movs	r2, #2
 800955c:	701a      	strb	r2, [r3, #0]
			break;
 800955e:	e05c      	b.n	800961a <MODE_exe+0x25a>

		case MODE_3://drive
			SetLED(0x0e);
 8009560:	200e      	movs	r0, #14
 8009562:	f7f8 fd31 	bl	8001fc8 <SetLED>
			en_Mode = MODE_0;	
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <MODE_exe+0x264>)
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
			LL_mDelay(100);
 800956c:	2064      	movs	r0, #100	; 0x64
 800956e:	f009 fe6b 	bl	8013248 <LL_mDelay>
			SetLED(0x00);
 8009572:	2000      	movs	r0, #0
 8009574:	f7f8 fd28 	bl	8001fc8 <SetLED>
			now_mode = mode_2;
 8009578:	4b29      	ldr	r3, [pc, #164]	; (8009620 <MODE_exe+0x260>)
 800957a:	2210      	movs	r2, #16
 800957c:	701a      	strb	r2, [r3, #0]
			while(1){
				if ( SW_IsOn_1() == SW_ON ){
 800957e:	f7f8 fda1 	bl	80020c4 <SW_IsOn_1>
 8009582:	4603      	mov	r3, r0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d108      	bne.n	800959a <MODE_exe+0x1da>
					MODE_inc();								
 8009588:	f7ff f942 	bl	8008810 <MODE_inc>
					LL_mDelay(200);			
 800958c:	20c8      	movs	r0, #200	; 0xc8
 800958e:	f009 fe5b 	bl	8013248 <LL_mDelay>
					printf("mode selecting_1\r\n");
 8009592:	4826      	ldr	r0, [pc, #152]	; (800962c <MODE_exe+0x26c>)
 8009594:	f00a fde6 	bl	8014164 <puts>
 8009598:	e7f1      	b.n	800957e <MODE_exe+0x1be>
				}
				else if (( SW_IsOn_0() == SW_ON )||(TRUE == MODE_CheckExe())){
 800959a:	f7f8 fd87 	bl	80020ac <SW_IsOn_0>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d004      	beq.n	80095ae <MODE_exe+0x1ee>
 80095a4:	f000 f89d 	bl	80096e2 <MODE_CheckExe>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0e7      	beq.n	800957e <MODE_exe+0x1be>
					MODE_exe_m3();								
 80095ae:	f7ff fccb 	bl	8008f48 <MODE_exe_m3>
					LL_mDelay(200);				
 80095b2:	20c8      	movs	r0, #200	; 0xc8
 80095b4:	f009 fe48 	bl	8013248 <LL_mDelay>
					if (en_Mode == MODE_7){
 80095b8:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <MODE_exe+0x264>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b07      	cmp	r3, #7
 80095be:	d1de      	bne.n	800957e <MODE_exe+0x1be>
						now_mode = mode_1;
 80095c0:	4b17      	ldr	r3, [pc, #92]	; (8009620 <MODE_exe+0x260>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
						break;
 80095c6:	bf00      	nop
					}
				}

			}
			en_Mode = MODE_3;
 80095c8:	4b16      	ldr	r3, [pc, #88]	; (8009624 <MODE_exe+0x264>)
 80095ca:	2203      	movs	r2, #3
 80095cc:	701a      	strb	r2, [r3, #0]
			break;
 80095ce:	e024      	b.n	800961a <MODE_exe+0x25a>

		case MODE_4:
			SetLED(0x0e);
 80095d0:	200e      	movs	r0, #14
 80095d2:	f7f8 fcf9 	bl	8001fc8 <SetLED>
			SLA_count = 20;
 80095d6:	4b16      	ldr	r3, [pc, #88]	; (8009630 <MODE_exe+0x270>)
 80095d8:	2214      	movs	r2, #20
 80095da:	701a      	strb	r2, [r3, #0]
			LL_mDelay(500);
 80095dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095e0:	f009 fe32 	bl	8013248 <LL_mDelay>
			SetLED(0x0e);
 80095e4:	200e      	movs	r0, #14
 80095e6:	f7f8 fcef 	bl	8001fc8 <SetLED>
			break;
 80095ea:	e016      	b.n	800961a <MODE_exe+0x25a>

		case MODE_5:
			SetLED(0x0e);
 80095ec:	200e      	movs	r0, #14
 80095ee:	f7f8 fceb 	bl	8001fc8 <SetLED>
			SLA_count = 30;
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <MODE_exe+0x270>)
 80095f4:	221e      	movs	r2, #30
 80095f6:	701a      	strb	r2, [r3, #0]
			LL_mDelay(500);
 80095f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095fc:	f009 fe24 	bl	8013248 <LL_mDelay>
			SetLED(0x0e);
 8009600:	200e      	movs	r0, #14
 8009602:	f7f8 fce1 	bl	8001fc8 <SetLED>
			break;
 8009606:	e008      	b.n	800961a <MODE_exe+0x25a>

		case MODE_6:
			SetLED(0x0e);
 8009608:	200e      	movs	r0, #14
 800960a:	f7f8 fcdd 	bl	8001fc8 <SetLED>

			break;
 800960e:	e004      	b.n	800961a <MODE_exe+0x25a>

		case MODE_7:
			SetLED(0x0e);
 8009610:	200e      	movs	r0, #14
 8009612:	f7f8 fcd9 	bl	8001fc8 <SetLED>
			
			break;
 8009616:	e000      	b.n	800961a <MODE_exe+0x25a>


		default:
			break;
 8009618:	bf00      	nop
	}
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	2000000c 	.word	0x2000000c
 8009624:	20005dec 	.word	0x20005dec
 8009628:	08019544 	.word	0x08019544
 800962c:	08019558 	.word	0x08019558
 8009630:	2000001c 	.word	0x2000001c

08009634 <MODE_DistRightCheck>:

bool MODE_DistRightCheck(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
	int16_t s_rightval;
	bool bl_check;

	s_rightval = DIST_getNowVal(DIST_SEN_R_FRONT);
 800963a:	2000      	movs	r0, #0
 800963c:	f002 f95c 	bl	800b8f8 <DIST_getNowVal>
 8009640:	4603      	mov	r3, r0
 8009642:	80bb      	strh	r3, [r7, #4]

	if( s_rightval >= 300 ){
 8009644:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009648:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800964c:	db02      	blt.n	8009654 <MODE_DistRightCheck+0x20>
		bl_check=TRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	71fb      	strb	r3, [r7, #7]
 8009652:	e001      	b.n	8009658 <MODE_DistRightCheck+0x24>
	}
	else{
		bl_check=FALSE;
 8009654:	2300      	movs	r3, #0
 8009656:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 8009658:	79fb      	ldrb	r3, [r7, #7]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <MODE_DistLeftCheck>:

bool MODE_DistLeftCheck(void){
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0

	int16_t 	s_leftval;
	bool	bl_check;

	s_leftval 	= DIST_getNowVal(DIST_SEN_L_FRONT);
 8009668:	2001      	movs	r0, #1
 800966a:	f002 f945 	bl	800b8f8 <DIST_getNowVal>
 800966e:	4603      	mov	r3, r0
 8009670:	80bb      	strh	r3, [r7, #4]

	if( s_leftval >= 200 ){
 8009672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009676:	2bc7      	cmp	r3, #199	; 0xc7
 8009678:	dd02      	ble.n	8009680 <MODE_DistLeftCheck+0x1e>
		bl_check = TRUE;
 800967a:	2301      	movs	r3, #1
 800967c:	71fb      	strb	r3, [r7, #7]
 800967e:	e001      	b.n	8009684 <MODE_DistLeftCheck+0x22>

	}else{
		bl_check = FALSE;
 8009680:	2300      	movs	r3, #0
 8009682:	71fb      	strb	r3, [r7, #7]

	}

	return bl_check;
 8009684:	79fb      	ldrb	r3, [r7, #7]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <MODE_setWaitCheck>:

bool MODE_setWaitCheck(void){
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_DistRightCheck() ){	// 右だけ検知
 8009694:	f7ff ffce 	bl	8009634 <MODE_DistRightCheck>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d002      	beq.n	80096a4 <MODE_setWaitCheck+0x16>
		SetLED(0x08);
 800969e:	2008      	movs	r0, #8
 80096a0:	f7f8 fc92 	bl	8001fc8 <SetLED>
	}
	if( TRUE == MODE_DistLeftCheck() ){		// 左だけ検知
 80096a4:	f7ff ffdd 	bl	8009662 <MODE_DistLeftCheck>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <MODE_setWaitCheck+0x26>
		SetLED(0x02);
 80096ae:	2002      	movs	r0, #2
 80096b0:	f7f8 fc8a 	bl	8001fc8 <SetLED>
	}

	if( ( TRUE == MODE_DistRightCheck() ) && ( TRUE == MODE_DistLeftCheck() ) ){
 80096b4:	f7ff ffbe 	bl	8009634 <MODE_DistRightCheck>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <MODE_setWaitCheck+0x46>
 80096be:	f7ff ffd0 	bl	8009662 <MODE_DistLeftCheck>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <MODE_setWaitCheck+0x46>
		SetLED(0x0e);
 80096c8:	200e      	movs	r0, #14
 80096ca:	f7f8 fc7d 	bl	8001fc8 <SetLED>
		bl_check = TRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	71fb      	strb	r3, [r7, #7]
 80096d2:	e001      	b.n	80096d8 <MODE_setWaitCheck+0x4a>

	}else{
		bl_check = FALSE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	71fb      	strb	r3, [r7, #7]
	}
	return bl_check;
 80096d8:	79fb      	ldrb	r3, [r7, #7]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <MODE_CheckExe>:

bool MODE_CheckExe(void){
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0

	bool bl_check;

	if( TRUE == MODE_setWaitCheck() ){
 80096e8:	f7ff ffd1 	bl	800968e <MODE_setWaitCheck>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d018      	beq.n	8009724 <MODE_CheckExe+0x42>
		LL_mDelay(500);
 80096f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80096f6:	f009 fda7 	bl	8013248 <LL_mDelay>

		if( FALSE == MODE_setWaitCheck() ){
 80096fa:	f7ff ffc8 	bl	800968e <MODE_setWaitCheck>
 80096fe:	4603      	mov	r3, r0
 8009700:	f083 0301 	eor.w	r3, r3, #1
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <MODE_CheckExe+0x3c>
			SetLED(0x00);
 800970a:	2000      	movs	r0, #0
 800970c:	f7f8 fc5c 	bl	8001fc8 <SetLED>
			LL_mDelay(1000);
 8009710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009714:	f009 fd98 	bl	8013248 <LL_mDelay>
			bl_check = TRUE;
 8009718:	2301      	movs	r3, #1
 800971a:	71fb      	strb	r3, [r7, #7]
 800971c:	e004      	b.n	8009728 <MODE_CheckExe+0x46>

		}else{
			bl_check = FALSE;
 800971e:	2300      	movs	r3, #0
 8009720:	71fb      	strb	r3, [r7, #7]
 8009722:	e001      	b.n	8009728 <MODE_CheckExe+0x46>

		}

	}else{

		bl_check = FALSE;
 8009724:	2300      	movs	r3, #0
 8009726:	71fb      	strb	r3, [r7, #7]
	}

	return bl_check;
 8009728:	79fb      	ldrb	r3, [r7, #7]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <MOT_getAcc1>:
float			f_WallEdgeAddDist = 0;				// 壁切れ補正の移動距離



float MOT_getAcc1( void )
{
 8009732:	b580      	push	{r7, lr}
 8009734:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_acc;
 8009736:	2015      	movs	r0, #21
 8009738:	f7f9 f83c 	bl	80027b4 <PARAM_getSpeed>
 800973c:	4603      	mov	r3, r0
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	ee07 3a90 	vmov	s15, r3
}
 8009744:	eeb0 0a67 	vmov.f32	s0, s15
 8009748:	bd80      	pop	{r7, pc}

0800974a <MOT_getAcc3>:

float MOT_getAcc3( void )
{
 800974a:	b580      	push	{r7, lr}
 800974c:	af00      	add	r7, sp, #0
	return PARAM_getSpeed( PARAM_ST )->f_dec;
 800974e:	2015      	movs	r0, #21
 8009750:	f7f9 f830 	bl	80027b4 <PARAM_getSpeed>
 8009754:	4603      	mov	r3, r0
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	ee07 3a90 	vmov	s15, r3
}
 800975c:	eeb0 0a67 	vmov.f32	s0, s15
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <MOT_goBlock_AccConstDec>:

void MOT_goBlock_AccConstDec( float f_fin, enMOT_ST_TYPE en_type, enMOT_GO_ST_TYPE en_goType )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08e      	sub	sp, #56	; 0x38
 8009768:	af00      	add	r7, sp, #0
 800976a:	ed87 0a01 	vstr	s0, [r7, #4]
 800976e:	4603      	mov	r3, r0
 8009770:	460a      	mov	r2, r1
 8009772:	70fb      	strb	r3, [r7, #3]
 8009774:	4613      	mov	r3, r2
 8009776:	70bb      	strb	r3, [r7, #2]

	stCTRL_DATA		st_data;					// CTRLdata
	GYRO_staErrChkAngle();
 8009778:	f7fe fdce 	bl	8008318 <GYRO_staErrChkAngle>
	/*      motion      */
	/* ================ */
	/* ------ */
	/*  acc   */
	/* ------ */
	if( ( en_type != MOT_CONST_DEC ) && ( en_type != MOT_CONST_DEC_CUSTOM ) ){
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	2b05      	cmp	r3, #5
 8009780:	d051      	beq.n	8009826 <MOT_goBlock_AccConstDec+0xc2>
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	2b06      	cmp	r3, #6
 8009786:	d04e      	beq.n	8009826 <MOT_goBlock_AccConstDec+0xc2>

		if( MOT_GO_ST_NORMAL == en_goType ){
 8009788:	78bb      	ldrb	r3, [r7, #2]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <MOT_goBlock_AccConstDec+0x30>
			st_data.en_type		= CTRL_ACC;
 800978e:	2300      	movs	r3, #0
 8009790:	723b      	strb	r3, [r7, #8]
 8009792:	e001      	b.n	8009798 <MOT_goBlock_AccConstDec+0x34>
		}
		else{
			st_data.en_type		= CTRL_SKEW_ACC;
 8009794:	2303      	movs	r3, #3
 8009796:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc1;		// 加速度指定
 8009798:	4bad      	ldr	r3, [pc, #692]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_now;		// 現在速度
 800979e:	4bac      	ldr	r3, [pc, #688]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_trgt;		// 目標速度
 80097a4:	4baa      	ldr	r3, [pc, #680]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;				// 進んでいない
 80097aa:	f04f 0300 	mov.w	r3, #0
 80097ae:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_l1;			// 加速距離
 80097b0:	4ba7      	ldr	r3, [pc, #668]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;				// 角加速度
 80097b6:	f04f 0300 	mov.w	r3, #0
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;				// 現在角速度
 80097bc:	f04f 0300 	mov.w	r3, #0
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;				// 目標角度
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;				// 現在角度
 80097c8:	f04f 0300 	mov.w	r3, #0
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;				// 目標角度
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;				// 目標時間 [sec] ← 指定しない
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();								// 設定データをクリア
 80097da:	f7fb ffd7 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );						// データセット
 80097de:	f107 0308 	add.w	r3, r7, #8
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fc f856 	bl	8005894 <CTRL_setData>
		DCM_staMotAll();							// モータON
 80097e8:	f7fe fa9e 	bl	8007d28 <DCM_staMotAll>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 80097ec:	e00f      	b.n	800980e <MOT_goBlock_AccConstDec+0xaa>
			if( SYS_isOutOfCtrl() == TRUE ){
 80097ee:	f7fe fa45 	bl	8007c7c <SYS_isOutOfCtrl>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d008      	beq.n	800980a <MOT_goBlock_AccConstDec+0xa6>
				CTRL_stop();
 80097f8:	f7fb ffb8 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 80097fc:	2000      	movs	r0, #0
 80097fe:	f7fe fa6f 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 8009802:	2001      	movs	r0, #1
 8009804:	f7fe fa6c 	bl	8007ce0 <DCM_brakeMot>
				break;
 8009808:	e00d      	b.n	8009826 <MOT_goBlock_AccConstDec+0xc2>
			}				
			MOT_setWallEdgeDist();
 800980a:	f001 ff25 	bl	800b658 <MOT_setWallEdgeDist>
		while( Get_NowDist() < st_Info.f_l1 ){					// 指定距離到達待ち
 800980e:	f7fb ff0b 	bl	8005628 <Get_NowDist>
 8009812:	eeb0 7a40 	vmov.f32	s14, s0
 8009816:	4b8e      	ldr	r3, [pc, #568]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 8009818:	edd3 7a07 	vldr	s15, [r3, #28]
 800981c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	d4e3      	bmi.n	80097ee <MOT_goBlock_AccConstDec+0x8a>
	}

	/* ------ */
	/*  const */
	/* ------ */
	if( MOT_GO_ST_NORMAL == en_goType ){
 8009826:	78bb      	ldrb	r3, [r7, #2]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <MOT_goBlock_AccConstDec+0xce>
		st_data.en_type		= CTRL_CONST;
 800982c:	2301      	movs	r3, #1
 800982e:	723b      	strb	r3, [r7, #8]
 8009830:	e001      	b.n	8009836 <MOT_goBlock_AccConstDec+0xd2>
	}
	else{
		st_data.en_type		= CTRL_SKEW_CONST;
 8009832:	2304      	movs	r3, #4
 8009834:	723b      	strb	r3, [r7, #8]
	}
	st_data.f_acc			= 0;					// 加速度指定
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	613b      	str	r3, [r7, #16]
	st_data.f_now			= st_Info.f_trgt;			// 現在速度
 800983c:	4b84      	ldr	r3, [pc, #528]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= st_Info.f_trgt;			// 目標速度
 8009842:	4b83      	ldr	r3, [pc, #524]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= st_Info.f_l1;				// 現在位置
 8009848:	4b81      	ldr	r3, [pc, #516]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= st_Info.f_l1_2;			// 等速完了位置
 800984e:	4b80      	ldr	r3, [pc, #512]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;					// 角加速度
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;					// 目標角度
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;					// 現在角度
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= 0;					// 目標角度
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 8009872:	f04f 0300 	mov.w	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]
	if( ( en_type == MOT_CONST_DEC ) || ( en_type == MOT_CONST_DEC_CUSTOM ) ){
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b05      	cmp	r3, #5
 800987c:	d002      	beq.n	8009884 <MOT_goBlock_AccConstDec+0x120>
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	2b06      	cmp	r3, #6
 8009882:	d101      	bne.n	8009888 <MOT_goBlock_AccConstDec+0x124>
		CTRL_clrData();										// 設定データをクリア
 8009884:	f7fb ff82 	bl	800578c <CTRL_clrData>
	}
	CTRL_setData( &st_data );						// データセット
 8009888:	f107 0308 	add.w	r3, r7, #8
 800988c:	4618      	mov	r0, r3
 800988e:	f7fc f801 	bl	8005894 <CTRL_setData>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 8009892:	e00f      	b.n	80098b4 <MOT_goBlock_AccConstDec+0x150>
		if( SYS_isOutOfCtrl() == TRUE ){
 8009894:	f7fe f9f2 	bl	8007c7c <SYS_isOutOfCtrl>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d008      	beq.n	80098b0 <MOT_goBlock_AccConstDec+0x14c>
			CTRL_stop();
 800989e:	f7fb ff65 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		
 80098a2:	2000      	movs	r0, #0
 80098a4:	f7fe fa1c 	bl	8007ce0 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		
 80098a8:	2001      	movs	r0, #1
 80098aa:	f7fe fa19 	bl	8007ce0 <DCM_brakeMot>
			break;
 80098ae:	e00d      	b.n	80098cc <MOT_goBlock_AccConstDec+0x168>
		}				
		MOT_setWallEdgeDist();
 80098b0:	f001 fed2 	bl	800b658 <MOT_setWallEdgeDist>
	while( Get_NowDist() < st_Info.f_l1_2 ){				// 指定距離到達待ち
 80098b4:	f7fb feb8 	bl	8005628 <Get_NowDist>
 80098b8:	eeb0 7a40 	vmov.f32	s14, s0
 80098bc:	4b64      	ldr	r3, [pc, #400]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80098be:	edd3 7a08 	vldr	s15, [r3, #32]
 80098c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	d4e3      	bmi.n	8009894 <MOT_goBlock_AccConstDec+0x130>
	}

	/* ------ */
	/*  dec   */
	/* ------ */
	if( ( en_type != MOT_ACC_CONST ) && ( en_type != MOT_ACC_CONST_CUSTOM ) ){
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d05e      	beq.n	8009990 <MOT_goBlock_AccConstDec+0x22c>
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	2b04      	cmp	r3, #4
 80098d6:	d05b      	beq.n	8009990 <MOT_goBlock_AccConstDec+0x22c>

		if( MOT_GO_ST_NORMAL == en_goType ){
 80098d8:	78bb      	ldrb	r3, [r7, #2]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <MOT_goBlock_AccConstDec+0x180>
			st_data.en_type		= CTRL_DEC;
 80098de:	2302      	movs	r3, #2
 80098e0:	723b      	strb	r3, [r7, #8]
 80098e2:	e001      	b.n	80098e8 <MOT_goBlock_AccConstDec+0x184>
		}
		else{
			st_data.en_type		= CTRL_SKEW_DEC;
 80098e4:	2305      	movs	r3, #5
 80098e6:	723b      	strb	r3, [r7, #8]
		}
		st_data.f_acc			= st_Info.f_acc3;			// 減速
 80098e8:	4b59      	ldr	r3, [pc, #356]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_trgt;			// 現在速度
 80098ee:	4b58      	ldr	r3, [pc, #352]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 最終速度
 80098f4:	4b56      	ldr	r3, [pc, #344]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= st_Info.f_l1_2;			// 等速完了位置
 80098fa:	4b55      	ldr	r3, [pc, #340]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= st_Info.f_dist;			// 全移動完了位置
 8009900:	4b53      	ldr	r3, [pc, #332]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 8009906:	f04f 0300 	mov.w	r3, #0
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 800990c:	f04f 0300 	mov.w	r3, #0
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS		= 0;						// 目標角度
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 8009918:	f04f 0300 	mov.w	r3, #0
 800991c:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
		CTRL_setData( &st_data );							// データセット
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	4618      	mov	r0, r3
 8009930:	f7fb ffb0 	bl	8005894 <CTRL_setData>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 8009934:	e01e      	b.n	8009974 <MOT_goBlock_AccConstDec+0x210>
			if( SYS_isOutOfCtrl() == TRUE ){
 8009936:	f7fe f9a1 	bl	8007c7c <SYS_isOutOfCtrl>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <MOT_goBlock_AccConstDec+0x1ee>
				CTRL_stop();
 8009940:	f7fb ff14 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 8009944:	2000      	movs	r0, #0
 8009946:	f7fe f9cb 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 800994a:	2001      	movs	r0, #1
 800994c:	f7fe f9c8 	bl	8007ce0 <DCM_brakeMot>
				break;
 8009950:	e01e      	b.n	8009990 <MOT_goBlock_AccConstDec+0x22c>
			}				
			MOT_setWallEdgeDist();
 8009952:	f001 fe81 	bl	800b658 <MOT_setWallEdgeDist>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 8009956:	4b3f      	ldr	r3, [pc, #252]	; (8009a54 <MOT_goBlock_AccConstDec+0x2f0>)
 8009958:	edd3 7a00 	vldr	s15, [r3]
 800995c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009968:	dc00      	bgt.n	800996c <MOT_goBlock_AccConstDec+0x208>
 800996a:	e003      	b.n	8009974 <MOT_goBlock_AccConstDec+0x210>
 800996c:	4b3a      	ldr	r3, [pc, #232]	; (8009a58 <MOT_goBlock_AccConstDec+0x2f4>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10c      	bne.n	800998e <MOT_goBlock_AccConstDec+0x22a>
		while( Get_NowDist() < ( st_Info.f_dist ) ){		// 指定距離到達待ち
 8009974:	f7fb fe58 	bl	8005628 <Get_NowDist>
 8009978:	eeb0 7a40 	vmov.f32	s14, s0
 800997c:	4b34      	ldr	r3, [pc, #208]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 800997e:	edd3 7a06 	vldr	s15, [r3, #24]
 8009982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998a:	d4d4      	bmi.n	8009936 <MOT_goBlock_AccConstDec+0x1d2>
 800998c:	e000      	b.n	8009990 <MOT_goBlock_AccConstDec+0x22c>
			if((escape_wait>2.0)&&(search_flag == TRUE))break;
 800998e:	bf00      	nop

	/* -------------------- */
	/*  const walledge      */
	/* -------------------- */
	/* not found edge */
	if( ( en_WallEdge != MOT_WALL_EDGE_NONE ) && ( bl_IsWallEdge == FALSE )  ){
 8009990:	4b32      	ldr	r3, [pc, #200]	; (8009a5c <MOT_goBlock_AccConstDec+0x2f8>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d068      	beq.n	8009a6a <MOT_goBlock_AccConstDec+0x306>
 8009998:	4b31      	ldr	r3, [pc, #196]	; (8009a60 <MOT_goBlock_AccConstDec+0x2fc>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f083 0301 	eor.w	r3, r3, #1
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d061      	beq.n	8009a6a <MOT_goBlock_AccConstDec+0x306>
		st_data.en_type			= CTRL_CONST;
 80099a6:	2301      	movs	r3, #1
 80099a8:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 80099aa:	f04f 0300 	mov.w	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 80099b0:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 80099b6:	4b26      	ldr	r3, [pc, #152]	; (8009a50 <MOT_goBlock_AccConstDec+0x2ec>)
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= Get_NowDist();				// 現在位置
 80099bc:	f7fb fe34 	bl	8005628 <Get_NowDist>
 80099c0:	eef0 7a40 	vmov.f32	s15, s0
 80099c4:	edc7 7a07 	vstr	s15, [r7, #28]
		st_data.f_dist			= Get_NowDist() + 0.045f;	// 等速完了位置（90.0f：壁切れをどこまで救うかの距離）、ここではf_NowDistをクリアしてはいけない。
 80099c8:	f7fb fe2e 	bl	8005628 <Get_NowDist>
 80099cc:	eef0 7a40 	vmov.f32	s15, s0
 80099d0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009a64 <MOT_goBlock_AccConstDec+0x300>
 80099d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099d8:	edc7 7a08 	vstr	s15, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 80099dc:	f04f 0300 	mov.w	r3, #0
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 80099f4:	f04f 0300 	mov.w	r3, #0
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 80099fa:	f04f 0300 	mov.w	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 8009a00:	f7fb fec4 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 8009a04:	f107 0308 	add.w	r3, r7, #8
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fb ff43 	bl	8005894 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 8009a0e:	e012      	b.n	8009a36 <MOT_goBlock_AccConstDec+0x2d2>
			if( SYS_isOutOfCtrl() == TRUE ){
 8009a10:	f7fe f934 	bl	8007c7c <SYS_isOutOfCtrl>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <MOT_goBlock_AccConstDec+0x2c8>
				CTRL_stop();
 8009a1a:	f7fb fea7 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f7fe f95e 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 8009a24:	2001      	movs	r0, #1
 8009a26:	f7fe f95b 	bl	8007ce0 <DCM_brakeMot>
				break;
 8009a2a:	e01e      	b.n	8009a6a <MOT_goBlock_AccConstDec+0x306>
			}				
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 8009a2c:	f001 fe4e 	bl	800b6cc <MOT_setWallEdgeDist_LoopWait>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d118      	bne.n	8009a68 <MOT_goBlock_AccConstDec+0x304>
		while( Get_NowDist() < st_data.f_dist ){				// 指定距離到達待ち
 8009a36:	f7fb fdf7 	bl	8005628 <Get_NowDist>
 8009a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8009a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4a:	d4e1      	bmi.n	8009a10 <MOT_goBlock_AccConstDec+0x2ac>
 8009a4c:	e00d      	b.n	8009a6a <MOT_goBlock_AccConstDec+0x306>
 8009a4e:	bf00      	nop
 8009a50:	20005df0 	.word	0x20005df0
 8009a54:	200006f4 	.word	0x200006f4
 8009a58:	200002f0 	.word	0x200002f0
 8009a5c:	200002a8 	.word	0x200002a8
 8009a60:	200002a9 	.word	0x200002a9
 8009a64:	3d3851ec 	.word	0x3d3851ec
			if( MOT_setWallEdgeDist_LoopWait() == TRUE ) break;	// 壁切れ補正を実行する距離を設定
 8009a68:	bf00      	nop
		}
	}
	/* straight for edge */
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 8009a6a:	78bb      	ldrb	r3, [r7, #2]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d152      	bne.n	8009b16 <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 8009a70:	4b37      	ldr	r3, [pc, #220]	; (8009b50 <MOT_goBlock_AccConstDec+0x3ec>)
 8009a72:	edd3 7a00 	vldr	s15, [r3]
	if( ( MOT_GO_ST_NORMAL == en_goType ) &&				// 直進時に追加動作が必要な場合にしか実施しない
 8009a76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7e:	d04a      	beq.n	8009b16 <MOT_goBlock_AccConstDec+0x3b2>
		( f_WallEdgeAddDist != 0.0f ) &&
 8009a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	d043      	beq.n	8009b16 <MOT_goBlock_AccConstDec+0x3b2>
		( f_fin != 0.0f )
	){
		st_data.en_type			= CTRL_CONST;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	723b      	strb	r3, [r7, #8]
		st_data.f_acc			= 0;						// 加速度指定
 8009a92:	f04f 0300 	mov.w	r3, #0
 8009a96:	613b      	str	r3, [r7, #16]
		st_data.f_now			= st_Info.f_last;			// 現在速度
 8009a98:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <MOT_goBlock_AccConstDec+0x3f0>)
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	617b      	str	r3, [r7, #20]
		st_data.f_trgt			= st_Info.f_last;			// 目標速度
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <MOT_goBlock_AccConstDec+0x3f0>)
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	61bb      	str	r3, [r7, #24]
		st_data.f_nowDist		= 0;						// 現在位置
 8009aa4:	f04f 0300 	mov.w	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
		st_data.f_dist			= f_WallEdgeAddDist;		// 等速完了位置
 8009aaa:	4b29      	ldr	r3, [pc, #164]	; (8009b50 <MOT_goBlock_AccConstDec+0x3ec>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	623b      	str	r3, [r7, #32]
		st_data.f_accAngleS		= 0;						// 角加速度
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
		st_data.f_nowAngleS		= 0;						// 現在角速度
 8009ab6:	f04f 0300 	mov.w	r3, #0
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
		st_data.f_trgtAngleS	= 0;						// 目標角度
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_data.f_nowAngle		= 0;						// 現在角度
 8009ac2:	f04f 0300 	mov.w	r3, #0
 8009ac6:	633b      	str	r3, [r7, #48]	; 0x30
		st_data.f_angle			= 0;						// 目標角度
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
		st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]
		CTRL_clrData();										// マウスの現在位置/角度をクリア
 8009ad4:	f7fb fe5a 	bl	800578c <CTRL_clrData>
		CTRL_setData( &st_data );							// データセット
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fb fed9 	bl	8005894 <CTRL_setData>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 8009ae2:	e00d      	b.n	8009b00 <MOT_goBlock_AccConstDec+0x39c>
			if( SYS_isOutOfCtrl() == TRUE ){
 8009ae4:	f7fe f8ca 	bl	8007c7c <SYS_isOutOfCtrl>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d008      	beq.n	8009b00 <MOT_goBlock_AccConstDec+0x39c>
				CTRL_stop();
 8009aee:	f7fb fe3d 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		
 8009af2:	2000      	movs	r0, #0
 8009af4:	f7fe f8f4 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		
 8009af8:	2001      	movs	r0, #1
 8009afa:	f7fe f8f1 	bl	8007ce0 <DCM_brakeMot>
				break;
 8009afe:	e00a      	b.n	8009b16 <MOT_goBlock_AccConstDec+0x3b2>
		while( Get_NowDist() < st_data.f_dist ){			// 指定距離到達待ち
 8009b00:	f7fb fd92 	bl	8005628 <Get_NowDist>
 8009b04:	eeb0 7a40 	vmov.f32	s14, s0
 8009b08:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b14:	d4e6      	bmi.n	8009ae4 <MOT_goBlock_AccConstDec+0x380>
			}				
		}
	}

	/* stop */
	if( 0.0f == f_fin ){
 8009b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b22:	d10a      	bne.n	8009b3a <MOT_goBlock_AccConstDec+0x3d6>
		LL_mDelay(100);			
 8009b24:	2064      	movs	r0, #100	; 0x64
 8009b26:	f009 fb8f 	bl	8013248 <LL_mDelay>
	 	CTRL_stop();				
 8009b2a:	f7fb fe1f 	bl	800576c <CTRL_stop>
		DCM_brakeMot( DCM_R );	
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f7fe f8d6 	bl	8007ce0 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );	
 8009b34:	2001      	movs	r0, #1
 8009b36:	f7fe f8d3 	bl	8007ce0 <DCM_brakeMot>
	}

	f_MotNowSpeed = f_fin;		
 8009b3a:	4a07      	ldr	r2, [pc, #28]	; (8009b58 <MOT_goBlock_AccConstDec+0x3f4>)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6013      	str	r3, [r2, #0]
	GYRO_endErrChkAngle();
 8009b40:	f7fe fbfc 	bl	800833c <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 8009b44:	f7fb fe6c 	bl	8005820 <CTRL_clrNowData>
}
 8009b48:	bf00      	nop
 8009b4a:	3738      	adds	r7, #56	; 0x38
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	200002ac 	.word	0x200002ac
 8009b54:	20005df0 	.word	0x20005df0
 8009b58:	2000029c 	.word	0x2000029c

08009b5c <MOT_setData_ACC_CONST_DEC>:

void MOT_setData_ACC_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	ed87 0a03 	vstr	s0, [r7, #12]
 8009b66:	edc7 0a02 	vstr	s1, [r7, #8]
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <MOT_setData_ACC_CONST_DEC+0x1e>
		f_1blockDist = BLOCK;
 8009b74:	4b34      	ldr	r3, [pc, #208]	; (8009c48 <MOT_setData_ACC_CONST_DEC+0xec>)
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e001      	b.n	8009b7e <MOT_setData_ACC_CONST_DEC+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 8009b7a:	4b34      	ldr	r3, [pc, #208]	; (8009c4c <MOT_setData_ACC_CONST_DEC+0xf0>)
 8009b7c:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 8009b7e:	f7ff fdd8 	bl	8009732 <MOT_getAcc1>
 8009b82:	eef0 7a40 	vmov.f32	s15, s0
 8009b86:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009b88:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 8009b8c:	f7ff fddd 	bl	800974a <MOT_getAcc3>
 8009b90:	eef0 7a40 	vmov.f32	s15, s0
 8009b94:	4b2e      	ldr	r3, [pc, #184]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009b96:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;								// 現在速度
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	; (8009c54 <MOT_setData_ACC_CONST_DEC+0xf8>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a2c      	ldr	r2, [pc, #176]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009ba0:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotTrgtSpeed;								// 目標速度
 8009ba2:	4b2d      	ldr	r3, [pc, #180]	; (8009c58 <MOT_setData_ACC_CONST_DEC+0xfc>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a2a      	ldr	r2, [pc, #168]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009ba8:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;									// 最終速度
 8009baa:	4a29      	ldr	r2, [pc, #164]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 8009bb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8009bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009bbe:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_MotTrgtSpeed * f_MotTrgtSpeed - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 8009bc2:	4b25      	ldr	r3, [pc, #148]	; (8009c58 <MOT_setData_ACC_CONST_DEC+0xfc>)
 8009bc4:	ed93 7a00 	vldr	s14, [r3]
 8009bc8:	4b23      	ldr	r3, [pc, #140]	; (8009c58 <MOT_setData_ACC_CONST_DEC+0xfc>)
 8009bca:	edd3 7a00 	vldr	s15, [r3]
 8009bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bd2:	4b20      	ldr	r3, [pc, #128]	; (8009c54 <MOT_setData_ACC_CONST_DEC+0xf8>)
 8009bd4:	edd3 6a00 	vldr	s13, [r3]
 8009bd8:	4b1e      	ldr	r3, [pc, #120]	; (8009c54 <MOT_setData_ACC_CONST_DEC+0xf8>)
 8009bda:	edd3 7a00 	vldr	s15, [r3]
 8009bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009be2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009bec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf4:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009bf6:	edc3 7a07 	vstr	s15, [r3, #28]
	f_l3			= ( f_fin * f_fin - f_MotTrgtSpeed * f_MotTrgtSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第3移動距離[m]
 8009bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <MOT_setData_ACC_CONST_DEC+0xfc>)
 8009c04:	edd3 6a00 	vldr	s13, [r3]
 8009c08:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <MOT_setData_ACC_CONST_DEC+0xfc>)
 8009c0a:	edd3 7a00 	vldr	s15, [r3]
 8009c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009c16:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009c18:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c1c:	eef1 7a67 	vneg.f32	s15, s15
 8009c20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c28:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 8009c2c:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009c2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8009c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <MOT_setData_ACC_CONST_DEC+0xf4>)
 8009c3c:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("1 %f,%f\r",st_Info.f_trgt,st_Info.f_l1);
}
 8009c40:	bf00      	nop
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	3db851ec 	.word	0x3db851ec
 8009c4c:	3e0255b0 	.word	0x3e0255b0
 8009c50:	20005df0 	.word	0x20005df0
 8009c54:	2000029c 	.word	0x2000029c
 8009c58:	200002a0 	.word	0x200002a0
 8009c5c:	00000000 	.word	0x00000000

08009c60 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 8009c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	ed87 0a03 	vstr	s0, [r7, #12]
 8009c6c:	edc7 0a02 	vstr	s1, [r7, #8]
 8009c70:	4603      	mov	r3, r0
 8009c72:	71fb      	strb	r3, [r7, #7]
	float			f_l3;						// 第3移動距離[m]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20>
		f_1blockDist = BLOCK;
 8009c7a:	4b79      	ldr	r3, [pc, #484]	; (8009e60 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x200>)
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e001      	b.n	8009c84 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x24>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 8009c80:	4b78      	ldr	r3, [pc, #480]	; (8009e64 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x204>)
 8009c82:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();								// 加速度1[mm/s^2]
 8009c84:	f7ff fd55 	bl	8009732 <MOT_getAcc1>
 8009c88:	eef0 7a40 	vmov.f32	s15, s0
 8009c8c:	4b76      	ldr	r3, [pc, #472]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009c8e:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();								// 加速度3[mm/s^2]
 8009c92:	f7ff fd5a 	bl	800974a <MOT_getAcc3>
 8009c96:	eef0 7a40 	vmov.f32	s15, s0
 8009c9a:	4b73      	ldr	r3, [pc, #460]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009c9c:	edc3 7a02 	vstr	s15, [r3, #8]


	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 8009ca0:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cac:	4b6e      	ldr	r3, [pc, #440]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cae:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;												// 現在速度
 8009cb2:	4b6e      	ldr	r3, [pc, #440]	; (8009e6c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a6c      	ldr	r2, [pc, #432]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cb8:	60d3      	str	r3, [r2, #12]
	st_Info.f_last		= f_fin;													// 最終速度
 8009cba:	4a6b      	ldr	r2, [pc, #428]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6153      	str	r3, [r2, #20]
	st_Info.f_trgt		= sqrt( 1 / ( ( st_Info.f_acc3 * -1 ) - st_Info.f_acc1 ) *
 8009cc0:	4b69      	ldr	r3, [pc, #420]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8009cc6:	eeb1 7a67 	vneg.f32	s14, s15
 8009cca:	4b67      	ldr	r3, [pc, #412]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8009cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009cdc:	ee16 0a90 	vmov	r0, s13
 8009ce0:	f7f6 fc5a 	bl	8000598 <__aeabi_f2d>
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	460d      	mov	r5, r1
					( 2 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 8009ce8:	4b5f      	ldr	r3, [pc, #380]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8009cee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009cf2:	4b5d      	ldr	r3, [pc, #372]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009cf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8009cf8:	eef1 7a67 	vneg.f32	s15, s15
 8009cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d00:	ee17 0a90 	vmov	r0, s15
 8009d04:	f7f6 fc48 	bl	8000598 <__aeabi_f2d>
 8009d08:	4680      	mov	r8, r0
 8009d0a:	4689      	mov	r9, r1
 8009d0c:	4b56      	ldr	r3, [pc, #344]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7f6 fc41 	bl	8000598 <__aeabi_f2d>
 8009d16:	a350      	add	r3, pc, #320	; (adr r3, 8009e58 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x1f8>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f7f6 fadc 	bl	80002d8 <__aeabi_dsub>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4640      	mov	r0, r8
 8009d26:	4649      	mov	r1, r9
 8009d28:	f7f6 fc8e 	bl	8000648 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4690      	mov	r8, r2
 8009d32:	4699      	mov	r9, r3
					( st_Info.f_acc3 * -1 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 8009d34:	4b4c      	ldr	r3, [pc, #304]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009d36:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d3a:	eeb1 7a67 	vneg.f32	s14, s15
 8009d3e:	4b4b      	ldr	r3, [pc, #300]	; (8009e6c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 8009d40:	edd3 7a00 	vldr	s15, [r3]
 8009d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d48:	4b48      	ldr	r3, [pc, #288]	; (8009e6c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 8009d4a:	edd3 7a00 	vldr	s15, [r3]
 8009d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d52:	ee17 0a90 	vmov	r0, s15
 8009d56:	f7f6 fc1f 	bl	8000598 <__aeabi_f2d>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
					( 2 * st_Info.f_acc1 * ( st_Info.f_acc3 * -1 ) * ( st_Info.f_dist - MOT_MOVE_ST_MIN ) +
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fabb 	bl	80002dc <__adddf3>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4690      	mov	r8, r2
 8009d6c:	4699      	mov	r9, r3
					( st_Info.f_acc3 * -1 ) * f_MotNowSpeed * f_MotNowSpeed - st_Info.f_acc1 * f_fin * f_fin ) );
 8009d6e:	4b3e      	ldr	r3, [pc, #248]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009d70:	ed93 7a01 	vldr	s14, [r3, #4]
 8009d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d84:	ee17 0a90 	vmov	r0, s15
 8009d88:	f7f6 fc06 	bl	8000598 <__aeabi_f2d>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 faa0 	bl	80002d8 <__aeabi_dsub>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
	st_Info.f_trgt		= sqrt( 1 / ( ( st_Info.f_acc3 * -1 ) - st_Info.f_acc1 ) *
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fc52 	bl	8000648 <__aeabi_dmul>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	ec43 2b17 	vmov	d7, r2, r3
 8009dac:	eeb0 0a47 	vmov.f32	s0, s14
 8009db0:	eef0 0a67 	vmov.f32	s1, s15
 8009db4:	f00e f988 	bl	80180c8 <sqrt>
 8009db8:	ec53 2b10 	vmov	r2, r3, d0
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f7f6 ff3a 	bl	8000c38 <__aeabi_d2f>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	4a28      	ldr	r2, [pc, #160]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009dc8:	6113      	str	r3, [r2, #16]

	st_Info.f_l1		= ( st_Info.f_trgt * st_Info.f_trgt - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 8009dca:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009dcc:	ed93 7a04 	vldr	s14, [r3, #16]
 8009dd0:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8009dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 8009ddc:	edd3 6a00 	vldr	s13, [r3]
 8009de0:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x20c>)
 8009de2:	edd3 7a00 	vldr	s15, [r3]
 8009de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dea:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009dee:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009df0:	edd3 7a01 	vldr	s15, [r3, #4]
 8009df4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dfc:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009dfe:	edc3 7a07 	vstr	s15, [r3, #28]
	f_l3			= ( f_fin * f_fin - st_Info.f_trgt * st_Info.f_trgt ) / ( ( st_Info.f_acc3  * -1 ) * 2 );			// 第3移動距離[m]
 8009e02:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009e0c:	edd3 6a04 	vldr	s13, [r3, #16]
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009e12:	edd3 7a04 	vldr	s15, [r3, #16]
 8009e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009e20:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e24:	eef1 7a67 	vneg.f32	s15, s15
 8009e28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e30:	edc7 7a04 	vstr	s15, [r7, #16]
	st_Info.f_l1_2		= st_Info.f_dist - f_l3;											// 第1+2移動距離[m]
 8009e34:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009e36:	ed93 7a06 	vldr	s14, [r3, #24]
 8009e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM+0x208>)
 8009e44:	edc3 7a08 	vstr	s15, [r3, #32]

//	printf("2 %f,%f,%f,%f\r",st_Info.f_trgt,st_Info.f_l1,f_fin,f_MotNowSpeed);
}
 8009e48:	bf00      	nop
 8009e4a:	3718      	adds	r7, #24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	47ae147b 	.word	0x47ae147b
 8009e5c:	3f847ae1 	.word	0x3f847ae1
 8009e60:	3db851ec 	.word	0x3db851ec
 8009e64:	3e0255b0 	.word	0x3e0255b0
 8009e68:	20005df0 	.word	0x20005df0
 8009e6c:	2000029c 	.word	0x2000029c

08009e70 <MOT_setData_MOT_ACC_CONST>:

void MOT_setData_MOT_ACC_CONST( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	ed87 0a03 	vstr	s0, [r7, #12]
 8009e7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <MOT_setData_MOT_ACC_CONST+0x1e>
		f_1blockDist = BLOCK;
 8009e88:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <MOT_setData_MOT_ACC_CONST+0xa0>)
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e001      	b.n	8009e92 <MOT_setData_MOT_ACC_CONST+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 8009e8e:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <MOT_setData_MOT_ACC_CONST+0xa4>)
 8009e90:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= MOT_getAcc1();													// 加速度1[mm/s^2]
 8009e92:	f7ff fc4e 	bl	8009732 <MOT_getAcc1>
 8009e96:	eef0 7a40 	vmov.f32	s15, s0
 8009e9a:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009e9c:	edc3 7a01 	vstr	s15, [r3, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[mm/s^2](未使用)
 8009ea0:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009ea2:	f04f 0200 	mov.w	r2, #0
 8009ea6:	609a      	str	r2, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <MOT_setData_MOT_ACC_CONST+0xac>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1a      	ldr	r2, [pc, #104]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009eae:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 8009eb0:	4a19      	ldr	r2, [pc, #100]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 8009eb6:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009eb8:	f04f 0200 	mov.w	r2, #0
 8009ebc:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 8009ebe:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	4b13      	ldr	r3, [pc, #76]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009ecc:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 8009ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ed4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009ed8:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <MOT_setData_MOT_ACC_CONST+0xac>)
 8009eda:	edd3 6a00 	vldr	s13, [r3]
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <MOT_setData_MOT_ACC_CONST+0xac>)
 8009ee0:	edd3 7a00 	vldr	s15, [r3]
 8009ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ee8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ef2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efa:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009efc:	edc3 7a07 	vstr	s15, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 8009f00:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	4a04      	ldr	r2, [pc, #16]	; (8009f18 <MOT_setData_MOT_ACC_CONST+0xa8>)
 8009f06:	6213      	str	r3, [r2, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	3db851ec 	.word	0x3db851ec
 8009f14:	3e0255b0 	.word	0x3e0255b0
 8009f18:	20005df0 	.word	0x20005df0
 8009f1c:	2000029c 	.word	0x2000029c

08009f20 <MOT_setData_MOT_ACC_CONST_CUSTOM>:

void MOT_setData_MOT_ACC_CONST_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 8009f20:	b5b0      	push	{r4, r5, r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	ed87 0a03 	vstr	s0, [r7, #12]
 8009f2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <MOT_setData_MOT_ACC_CONST_CUSTOM+0x1e>
		f_1blockDist = BLOCK;
 8009f38:	4b3b      	ldr	r3, [pc, #236]	; (800a028 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x108>)
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e001      	b.n	8009f42 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 8009f3e:	4b3b      	ldr	r3, [pc, #236]	; (800a02c <MOT_setData_MOT_ACC_CONST_CUSTOM+0x10c>)
 8009f40:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 8009f42:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a3b      	ldr	r2, [pc, #236]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009f48:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_fin;															// 目標速度
 8009f4a:	4a3a      	ldr	r2, [pc, #232]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= 0;																// 最終速度(未使用)
 8009f50:	4b38      	ldr	r3, [pc, #224]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009f52:	f04f 0200 	mov.w	r2, #0
 8009f56:	615a      	str	r2, [r3, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 8009f58:	ed97 7a03 	vldr	s14, [r7, #12]
 8009f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f64:	4b33      	ldr	r3, [pc, #204]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009f66:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0f );	// 加速度1[mm/s^2]（強制的に書き換え）
 8009f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f6e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009f72:	4b2f      	ldr	r3, [pc, #188]	; (800a030 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 8009f74:	edd3 6a00 	vldr	s13, [r3]
 8009f78:	4b2d      	ldr	r3, [pc, #180]	; (800a030 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 8009f7a:	edd3 7a00 	vldr	s15, [r3]
 8009f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f86:	ee17 0a90 	vmov	r0, s15
 8009f8a:	f7f6 fb05 	bl	8000598 <__aeabi_f2d>
 8009f8e:	4604      	mov	r4, r0
 8009f90:	460d      	mov	r5, r1
 8009f92:	4b28      	ldr	r3, [pc, #160]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7f6 fafe 	bl	8000598 <__aeabi_f2d>
 8009f9c:	a320      	add	r3, pc, #128	; (adr r3, 800a020 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x100>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 f999 	bl	80002d8 <__aeabi_dsub>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4610      	mov	r0, r2
 8009fac:	4619      	mov	r1, r3
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	f7f6 f993 	bl	80002dc <__adddf3>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4620      	mov	r0, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	f7f6 fc6d 	bl	800089c <__aeabi_ddiv>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f7f6 fe35 	bl	8000c38 <__aeabi_d2f>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4a18      	ldr	r2, [pc, #96]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009fd2:	6053      	str	r3, [r2, #4]
	st_Info.f_acc3 		= 0;																// 加速度3[m/s^2](未使用)
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	609a      	str	r2, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( st_Info.f_acc1 * 2 );			// 第1移動距離[m]
 8009fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8009fe0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009fe4:	4b12      	ldr	r3, [pc, #72]	; (800a030 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 8009fe6:	edd3 6a00 	vldr	s13, [r3]
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x110>)
 8009fec:	edd3 7a00 	vldr	s15, [r3]
 8009ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ff4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 8009ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ffe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a006:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800a008:	edc3 7a07 	vstr	s15, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist;													// 第1+2移動距離[m]
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	4a08      	ldr	r2, [pc, #32]	; (800a034 <MOT_setData_MOT_ACC_CONST_CUSTOM+0x114>)
 800a012:	6213      	str	r3, [r2, #32]
}
 800a014:	bf00      	nop
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bdb0      	pop	{r4, r5, r7, pc}
 800a01c:	f3af 8000 	nop.w
 800a020:	47ae147b 	.word	0x47ae147b
 800a024:	3f847ae1 	.word	0x3f847ae1
 800a028:	3db851ec 	.word	0x3db851ec
 800a02c:	3e0255b0 	.word	0x3e0255b0
 800a030:	2000029c 	.word	0x2000029c
 800a034:	20005df0 	.word	0x20005df0

0800a038 <MOT_setData_MOT_CONST_DEC>:

void MOT_setData_MOT_CONST_DEC( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a042:	edc7 0a02 	vstr	s1, [r7, #8]
 800a046:	4603      	mov	r3, r0
 800a048:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[mm]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800a04a:	79fb      	ldrb	r3, [r7, #7]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <MOT_setData_MOT_CONST_DEC+0x1e>
		f_1blockDist = BLOCK;
 800a050:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <MOT_setData_MOT_CONST_DEC+0xac>)
 800a052:	617b      	str	r3, [r7, #20]
 800a054:	e001      	b.n	800a05a <MOT_setData_MOT_CONST_DEC+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <MOT_setData_MOT_CONST_DEC+0xb0>)
 800a058:	617b      	str	r3, [r7, #20]
	}

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= MOT_getAcc3();													// 加速度3[mm/s^2]
 800a062:	f7ff fb72 	bl	800974a <MOT_getAcc3>
 800a066:	eef0 7a40 	vmov.f32	s15, s0
 800a06a:	4b20      	ldr	r3, [pc, #128]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a06c:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;													// 現在速度
 800a070:	4b1f      	ldr	r3, [pc, #124]	; (800a0f0 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1d      	ldr	r2, [pc, #116]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a076:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;													// 目標速度
 800a078:	4b1d      	ldr	r3, [pc, #116]	; (800a0f0 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a1b      	ldr	r2, [pc, #108]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a07e:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度(未使用)
 800a080:	4a1a      	ldr	r2, [pc, #104]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;												// 移動距離[m]
 800a086:	ed97 7a03 	vldr	s14, [r7, #12]
 800a08a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a094:	edc3 7a06 	vstr	s15, [r3, #24]
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800a098:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第1-2移動距離[m]
 800a0a0:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a0a2:	ed93 7a06 	vldr	s14, [r3, #24]
 800a0a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0aa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800a0b0:	ed93 6a00 	vldr	s12, [r3]
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <MOT_setData_MOT_CONST_DEC+0xb8>)
 800a0b6:	edd3 7a00 	vldr	s15, [r3]
 800a0ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a0be:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a0c4:	edd3 7a02 	vldr	s15, [r3, #8]
 800a0c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a0cc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a0d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0d4:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <MOT_setData_MOT_CONST_DEC+0xb4>)
 800a0d6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800a0da:	bf00      	nop
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	3db851ec 	.word	0x3db851ec
 800a0e8:	3e0255b0 	.word	0x3e0255b0
 800a0ec:	20005df0 	.word	0x20005df0
 800a0f0:	2000029c 	.word	0x2000029c
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <MOT_setData_MOT_CONST_DEC_CUSTOM>:

void MOT_setData_MOT_CONST_DEC_CUSTOM( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800a0f8:	b5b0      	push	{r4, r5, r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	ed87 0a03 	vstr	s0, [r7, #12]
 800a102:	edc7 0a02 	vstr	s1, [r7, #8]
 800a106:	4603      	mov	r3, r0
 800a108:	71fb      	strb	r3, [r7, #7]
	float			f_1blockDist;				// 1区画の距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x1e>
		f_1blockDist = BLOCK;
 800a110:	4b3f      	ldr	r3, [pc, #252]	; (800a210 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x118>)
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	e001      	b.n	800a11a <MOT_setData_MOT_CONST_DEC_CUSTOM+0x22>
	}
	else{									// 斜めの直進
		f_1blockDist = BLOCK_SKEW;
 800a116:	4b3f      	ldr	r3, [pc, #252]	; (800a214 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x11c>)
 800a118:	617b      	str	r3, [r7, #20]
	}

	/* 速度 */
	st_Info.f_now		= f_MotNowSpeed;									// 現在速度
 800a11a:	4b3f      	ldr	r3, [pc, #252]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a3f      	ldr	r2, [pc, #252]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a120:	60d3      	str	r3, [r2, #12]
	st_Info.f_trgt		= f_MotNowSpeed;									// 目標速度
 800a122:	4b3d      	ldr	r3, [pc, #244]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a3d      	ldr	r2, [pc, #244]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a128:	6113      	str	r3, [r2, #16]
	st_Info.f_last		= f_fin;															// 最終速度
 800a12a:	4a3c      	ldr	r2, [pc, #240]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6153      	str	r3, [r2, #20]

	/* 距離 */
	st_Info.f_dist		= f_num * f_1blockDist;									// 移動距離[mm]
 800a130:	ed97 7a03 	vldr	s14, [r7, #12]
 800a134:	edd7 7a05 	vldr	s15, [r7, #20]
 800a138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13c:	4b37      	ldr	r3, [pc, #220]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a13e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* 加速度 */
	st_Info.f_acc1 		= 0;																// 加速度1[mm/s^2](未使用)
 800a142:	4b36      	ldr	r3, [pc, #216]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	605a      	str	r2, [r3, #4]
	st_Info.f_acc3 		= ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_dist - MOT_MOVE_ST_MIN ) * 2.0f ) * -1;	// 加速度3[mm/s^2]（強制的に書き換え）
 800a14a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a14e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a152:	4b31      	ldr	r3, [pc, #196]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a154:	edd3 6a00 	vldr	s13, [r3]
 800a158:	4b2f      	ldr	r3, [pc, #188]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a15a:	edd3 7a00 	vldr	s15, [r3]
 800a15e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a162:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a166:	ee17 0a90 	vmov	r0, s15
 800a16a:	f7f6 fa15 	bl	8000598 <__aeabi_f2d>
 800a16e:	4604      	mov	r4, r0
 800a170:	460d      	mov	r5, r1
 800a172:	4b2a      	ldr	r3, [pc, #168]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	4618      	mov	r0, r3
 800a178:	f7f6 fa0e 	bl	8000598 <__aeabi_f2d>
 800a17c:	a322      	add	r3, pc, #136	; (adr r3, 800a208 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x110>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f8a9 	bl	80002d8 <__aeabi_dsub>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4610      	mov	r0, r2
 800a18c:	4619      	mov	r1, r3
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	f7f6 f8a3 	bl	80002dc <__adddf3>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4620      	mov	r0, r4
 800a19c:	4629      	mov	r1, r5
 800a19e:	f7f6 fb7d 	bl	800089c <__aeabi_ddiv>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	f7f6 fd45 	bl	8000c38 <__aeabi_d2f>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	ee07 3a90 	vmov	s15, r3
 800a1b4:	eef1 7a67 	vneg.f32	s15, s15
 800a1b8:	4b18      	ldr	r3, [pc, #96]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a1ba:	edc3 7a02 	vstr	s15, [r3, #8]

	/* 距離 */
	st_Info.f_l1		= 0;																// 第1移動距離[m]
 800a1be:	4b17      	ldr	r3, [pc, #92]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a1c0:	f04f 0200 	mov.w	r2, #0
 800a1c4:	61da      	str	r2, [r3, #28]
	st_Info.f_l1_2		= st_Info.f_dist - ( f_fin * f_fin - f_MotNowSpeed * f_MotNowSpeed ) / ( ( st_Info.f_acc3 * -1 ) * 2 );			// 第1-2移動距離[m]
 800a1c6:	4b15      	ldr	r3, [pc, #84]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a1c8:	ed93 7a06 	vldr	s14, [r3, #24]
 800a1cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a1d4:	4b10      	ldr	r3, [pc, #64]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a1d6:	ed93 6a00 	vldr	s12, [r3]
 800a1da:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <MOT_setData_MOT_CONST_DEC_CUSTOM+0x120>)
 800a1dc:	edd3 7a00 	vldr	s15, [r3]
 800a1e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a1e4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a1ea:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a1f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <MOT_setData_MOT_CONST_DEC_CUSTOM+0x124>)
 800a1fc:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bdb0      	pop	{r4, r5, r7, pc}
 800a208:	47ae147b 	.word	0x47ae147b
 800a20c:	3f847ae1 	.word	0x3f847ae1
 800a210:	3db851ec 	.word	0x3db851ec
 800a214:	3e0255b0 	.word	0x3e0255b0
 800a218:	2000029c 	.word	0x2000029c
 800a21c:	20005df0 	.word	0x20005df0

0800a220 <MOT_getStType>:

enMOT_ST_TYPE MOT_getStType( float f_num, float f_fin, enMOT_GO_ST_TYPE en_type )
{
 800a220:	b5b0      	push	{r4, r5, r7, lr}
 800a222:	b08e      	sub	sp, #56	; 0x38
 800a224:	af00      	add	r7, sp, #0
 800a226:	ed87 0a03 	vstr	s0, [r7, #12]
 800a22a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a22e:	4603      	mov	r3, r0
 800a230:	71fb      	strb	r3, [r7, #7]
	float f_l1;							//加速距離
	float f_l3;							//減速距離
	float f_total;							// 移動距離[m]

	/* 1区画の距離 */
	if( MOT_GO_ST_NORMAL == en_type ){		// 通常の直進
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d108      	bne.n	800a24a <MOT_getStType+0x2a>
		f_total	= f_num * BLOCK;
 800a238:	edd7 7a03 	vldr	s15, [r7, #12]
 800a23c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800a4b0 <MOT_getStType+0x290>
 800a240:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a244:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800a248:	e007      	b.n	800a25a <MOT_getStType+0x3a>
	}
	else{									// 斜めの直進
		f_total	= f_num * BLOCK_SKEW;
 800a24a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a24e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800a4b4 <MOT_getStType+0x294>
 800a252:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a256:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34


	/* ================ */
	/*   加速＋等速動作  */
	/* ================ */
	f_v1Div		= f_fin - f_MotNowSpeed;
 800a25a:	4b97      	ldr	r3, [pc, #604]	; (800a4b8 <MOT_getStType+0x298>)
 800a25c:	edd3 7a00 	vldr	s15, [r3]
 800a260:	ed97 7a02 	vldr	s14, [r7, #8]
 800a264:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a268:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_acc1		= MOT_getAcc1();				// 加速度1[mm/s^2]
 800a26c:	f7ff fa61 	bl	8009732 <MOT_getAcc1>
 800a270:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	f_t1		= f_v1Div / f_acc1;
 800a274:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a278:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a27c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a280:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	f_l1 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t1;
 800a284:	4b8c      	ldr	r3, [pc, #560]	; (800a4b8 <MOT_getStType+0x298>)
 800a286:	ed93 7a00 	vldr	s14, [r3]
 800a28a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a292:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a29a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	/*  加速＋等速動作 */
	if( f_total <= ( f_l1 + MOT_MOVE_ST_THRESHOLD ) ){
 800a2a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a2a8:	f7f6 f976 	bl	8000598 <__aeabi_f2d>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2b2:	f7f6 f971 	bl	8000598 <__aeabi_f2d>
 800a2b6:	a37a      	add	r3, pc, #488	; (adr r3, 800a4a0 <MOT_getStType+0x280>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f6 f80e 	bl	80002dc <__adddf3>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 fc3a 	bl	8000b40 <__aeabi_dcmple>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d019      	beq.n	800a306 <MOT_getStType+0xe6>

		/* 加速が最終速度に対して完了しない */
		if( f_total < ( f_l1 + MOT_MOVE_ST_MIN ) ){
 800a2d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a2d4:	f7f6 f960 	bl	8000598 <__aeabi_f2d>
 800a2d8:	4604      	mov	r4, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2de:	f7f6 f95b 	bl	8000598 <__aeabi_f2d>
 800a2e2:	a371      	add	r3, pc, #452	; (adr r3, 800a4a8 <MOT_getStType+0x288>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f5 fff8 	bl	80002dc <__adddf3>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 fc1a 	bl	8000b2c <__aeabi_dcmplt>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <MOT_getStType+0xe2>
//			printf("パターン4\n\r");
			return MOT_ACC_CONST_CUSTOM;		// パターン4（強制的に加速度を変更する）
 800a2fe:	2304      	movs	r3, #4
 800a300:	e0c8      	b.n	800a494 <MOT_getStType+0x274>
		}
		else{
//			printf("パターン3\n\r");
			return MOT_ACC_CONST;				// パターン3（加速＋等速）
 800a302:	2303      	movs	r3, #3
 800a304:	e0c6      	b.n	800a494 <MOT_getStType+0x274>
	}

	/* ================ */
	/*  等速＋減速動作   */
	/* ================ */
	f_v3Div		= f_fin - f_MotNowSpeed;
 800a306:	4b6c      	ldr	r3, [pc, #432]	; (800a4b8 <MOT_getStType+0x298>)
 800a308:	edd3 7a00 	vldr	s15, [r3]
 800a30c:	ed97 7a02 	vldr	s14, [r7, #8]
 800a310:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a314:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();				// 加速度3[mm/s^2]
 800a318:	f7ff fa17 	bl	800974a <MOT_getAcc3>
 800a31c:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= f_v3Div / ( f_acc3 * -1 );
 800a320:	edd7 7a08 	vldr	s15, [r7, #32]
 800a324:	eef1 6a67 	vneg.f32	s13, s15
 800a328:	ed97 7a07 	vldr	s14, [r7, #28]
 800a32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a330:	edc7 7a06 	vstr	s15, [r7, #24]

	f_l3 = ( f_MotNowSpeed + f_fin ) * 0.5f * f_t3;
 800a334:	4b60      	ldr	r3, [pc, #384]	; (800a4b8 <MOT_getStType+0x298>)
 800a336:	ed93 7a00 	vldr	s14, [r3]
 800a33a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a33e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a342:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a34a:	ed97 7a06 	vldr	s14, [r7, #24]
 800a34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a352:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 等速＋減速動作 */
	if( f_total <= ( f_l3 + MOT_MOVE_ST_THRESHOLD ) ){
 800a356:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a358:	f7f6 f91e 	bl	8000598 <__aeabi_f2d>
 800a35c:	4604      	mov	r4, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	6978      	ldr	r0, [r7, #20]
 800a362:	f7f6 f919 	bl	8000598 <__aeabi_f2d>
 800a366:	a34e      	add	r3, pc, #312	; (adr r3, 800a4a0 <MOT_getStType+0x280>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ffb6 	bl	80002dc <__adddf3>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f6 fbe2 	bl	8000b40 <__aeabi_dcmple>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d019      	beq.n	800a3b6 <MOT_getStType+0x196>

		/* 減速が最終速度に対して完了しない */
		if( f_total < ( f_l3 + MOT_MOVE_ST_MIN ) ){
 800a382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a384:	f7f6 f908 	bl	8000598 <__aeabi_f2d>
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	6978      	ldr	r0, [r7, #20]
 800a38e:	f7f6 f903 	bl	8000598 <__aeabi_f2d>
 800a392:	a345      	add	r3, pc, #276	; (adr r3, 800a4a8 <MOT_getStType+0x288>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ffa0 	bl	80002dc <__adddf3>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f6 fbc2 	bl	8000b2c <__aeabi_dcmplt>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <MOT_getStType+0x192>
//			printf("パターン6\n\r");
			return MOT_CONST_DEC_CUSTOM;		// パターン6（強制的に加速度を変更する）
 800a3ae:	2306      	movs	r3, #6
 800a3b0:	e070      	b.n	800a494 <MOT_getStType+0x274>
		}
		else{
//			printf("パターン5\n\r");
			return MOT_CONST_DEC;				// パターン5（等速＋減速）
 800a3b2:	2305      	movs	r3, #5
 800a3b4:	e06e      	b.n	800a494 <MOT_getStType+0x274>
	}

	/* ========== */
	/*  台形動作  */
	/* ========== */
	f_v1Div		= f_MotTrgtSpeed - f_MotNowSpeed;					// 台形時の速度差
 800a3b6:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <MOT_getStType+0x29c>)
 800a3b8:	ed93 7a00 	vldr	s14, [r3]
 800a3bc:	4b3e      	ldr	r3, [pc, #248]	; (800a4b8 <MOT_getStType+0x298>)
 800a3be:	edd3 7a00 	vldr	s15, [r3]
 800a3c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	f_t1		= f_v1Div / f_acc1;
 800a3ca:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800a3ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	f_l1		= ( f_MotNowSpeed + f_MotTrgtSpeed ) * 0.5f * f_t1;
 800a3da:	4b37      	ldr	r3, [pc, #220]	; (800a4b8 <MOT_getStType+0x298>)
 800a3dc:	ed93 7a00 	vldr	s14, [r3]
 800a3e0:	4b36      	ldr	r3, [pc, #216]	; (800a4bc <MOT_getStType+0x29c>)
 800a3e2:	edd3 7a00 	vldr	s15, [r3]
 800a3e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	f_v3Div		= f_fin - f_MotTrgtSpeed;							// 台形時の速度差
 800a3fe:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <MOT_getStType+0x29c>)
 800a400:	edd3 7a00 	vldr	s15, [r3]
 800a404:	ed97 7a02 	vldr	s14, [r7, #8]
 800a408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a40c:	edc7 7a08 	vstr	s15, [r7, #32]
	f_acc3		= MOT_getAcc3();									// 加速度3[mm/s^2]
 800a410:	f7ff f99b 	bl	800974a <MOT_getAcc3>
 800a414:	ed87 0a07 	vstr	s0, [r7, #28]
	f_t3		= -1.0f * f_v3Div / f_acc3;							// 減速時の所要時間
 800a418:	edd7 7a08 	vldr	s15, [r7, #32]
 800a41c:	eef1 6a67 	vneg.f32	s13, s15
 800a420:	ed97 7a07 	vldr	s14, [r7, #28]
 800a424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a428:	edc7 7a06 	vstr	s15, [r7, #24]
	f_l3		= ( f_MotTrgtSpeed + f_fin ) * 0.5f * f_t3;
 800a42c:	4b23      	ldr	r3, [pc, #140]	; (800a4bc <MOT_getStType+0x29c>)
 800a42e:	ed93 7a00 	vldr	s14, [r3]
 800a432:	edd7 7a02 	vldr	s15, [r7, #8]
 800a436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a43a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a43e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a442:	ed97 7a06 	vldr	s14, [r7, #24]
 800a446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44a:	edc7 7a05 	vstr	s15, [r7, #20]

	/* 通常の台形動作 */
	if( ( f_total - f_l1 - f_l3 - MOT_MOVE_ST_MIN) >= 0 ){
 800a44e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a452:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a45a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a45e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a462:	ee17 0a90 	vmov	r0, s15
 800a466:	f7f6 f897 	bl	8000598 <__aeabi_f2d>
 800a46a:	a30f      	add	r3, pc, #60	; (adr r3, 800a4a8 <MOT_getStType+0x288>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f5 ff32 	bl	80002d8 <__aeabi_dsub>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	f04f 0300 	mov.w	r3, #0
 800a484:	f7f6 fb66 	bl	8000b54 <__aeabi_dcmpge>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <MOT_getStType+0x272>
//		printf("パターン1\n\r");
		return MOT_ACC_CONST_DEC;				// パターン1（通常）
 800a48e:	2301      	movs	r3, #1
 800a490:	e000      	b.n	800a494 <MOT_getStType+0x274>
	}
	/* 等速値を変更する */
	else{
//		printf("パターン2\n\r");
		return MOT_ACC_CONST_DEC_CUSTOM;		// パターン2（目標速度を変更）
 800a492:	2302      	movs	r3, #2
	}
}
 800a494:	4618      	mov	r0, r3
 800a496:	3738      	adds	r7, #56	; 0x38
 800a498:	46bd      	mov	sp, r7
 800a49a:	bdb0      	pop	{r4, r5, r7, pc}
 800a49c:	f3af 8000 	nop.w
 800a4a0:	76c8b439 	.word	0x76c8b439
 800a4a4:	3f8a9fbe 	.word	0x3f8a9fbe
 800a4a8:	47ae147b 	.word	0x47ae147b
 800a4ac:	3f847ae1 	.word	0x3f847ae1
 800a4b0:	3db851ec 	.word	0x3db851ec
 800a4b4:	3e0255b0 	.word	0x3e0255b0
 800a4b8:	2000029c 	.word	0x2000029c
 800a4bc:	200002a0 	.word	0x200002a0

0800a4c0 <MOT_go_FinSpeed>:

void MOT_go_FinSpeed( float f_num, float f_fin, enMOT_GO_ST_TYPE en_goStType )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a4ca:	edc7 0a02 	vstr	s1, [r7, #8]
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
	enMOT_ST_TYPE 		en_type 		= MOT_getStType( f_num, f_fin, en_goStType);			// 動作パターン取得
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	edd7 0a02 	vldr	s1, [r7, #8]
 800a4da:	ed97 0a03 	vldr	s0, [r7, #12]
 800a4de:	f7ff fe9f 	bl	800a220 <MOT_getStType>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	75fb      	strb	r3, [r7, #23]

	/* 移動距離と指定値に応じで動作を変える */
	switch( en_type ){
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	2b05      	cmp	r3, #5
 800a4ec:	d873      	bhi.n	800a5d6 <MOT_go_FinSpeed+0x116>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <MOT_go_FinSpeed+0x34>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a50d 	.word	0x0800a50d
 800a4f8:	0800a52f 	.word	0x0800a52f
 800a4fc:	0800a551 	.word	0x0800a551
 800a500:	0800a573 	.word	0x0800a573
 800a504:	0800a593 	.word	0x0800a593
 800a508:	0800a5b5 	.word	0x0800a5b5

		case MOT_ACC_CONST_DEC:				// [01] 台形加速
			MOT_setData_ACC_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	4618      	mov	r0, r3
 800a510:	edd7 0a02 	vldr	s1, [r7, #8]
 800a514:	ed97 0a03 	vldr	s0, [r7, #12]
 800a518:	f7ff fb20 	bl	8009b5c <MOT_setData_ACC_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800a51c:	79fa      	ldrb	r2, [r7, #7]
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	ed97 0a02 	vldr	s0, [r7, #8]
 800a528:	f7ff f91c 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a52c:	e054      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_DEC_CUSTOM:		// [02] 台形加速（等速）
			MOT_setData_MOT_ACC_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );		// 動作データ作成
 800a52e:	79fb      	ldrb	r3, [r7, #7]
 800a530:	4618      	mov	r0, r3
 800a532:	edd7 0a02 	vldr	s1, [r7, #8]
 800a536:	ed97 0a03 	vldr	s0, [r7, #12]
 800a53a:	f7ff fb91 	bl	8009c60 <MOT_setData_MOT_ACC_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	7dfb      	ldrb	r3, [r7, #23]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	ed97 0a02 	vldr	s0, [r7, #8]
 800a54a:	f7ff f90b 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a54e:	e043      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST:				// [03] 加速＋等速
			MOT_setData_MOT_ACC_CONST( f_num, f_fin, en_goStType );					// 動作データ作成
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	4618      	mov	r0, r3
 800a554:	edd7 0a02 	vldr	s1, [r7, #8]
 800a558:	ed97 0a03 	vldr	s0, [r7, #12]
 800a55c:	f7ff fc88 	bl	8009e70 <MOT_setData_MOT_ACC_CONST>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800a560:	79fa      	ldrb	r2, [r7, #7]
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	ed97 0a02 	vldr	s0, [r7, #8]
 800a56c:	f7ff f8fa 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a570:	e032      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		case MOT_ACC_CONST_CUSTOM:		// [04] 加速＋等速（等速）
			MOT_setData_MOT_ACC_CONST_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	4618      	mov	r0, r3
 800a576:	edd7 0a02 	vldr	s1, [r7, #8]
 800a57a:	ed97 0a03 	vldr	s0, [r7, #12]
 800a57e:	f7ff fccf 	bl	8009f20 <MOT_setData_MOT_ACC_CONST_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, MOT_GO_ST_NORMAL );			// 動作
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	ed97 0a02 	vldr	s0, [r7, #8]
 800a58c:	f7ff f8ea 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a590:	e022      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC:				// [05] 等速＋減速
			MOT_setData_MOT_CONST_DEC( f_num, f_fin, en_goStType );					// 動作データ作成
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	4618      	mov	r0, r3
 800a596:	edd7 0a02 	vldr	s1, [r7, #8]
 800a59a:	ed97 0a03 	vldr	s0, [r7, #12]
 800a59e:	f7ff fd4b 	bl	800a038 <MOT_setData_MOT_CONST_DEC>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800a5a2:	79fa      	ldrb	r2, [r7, #7]
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	ed97 0a02 	vldr	s0, [r7, #8]
 800a5ae:	f7ff f8d9 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a5b2:	e011      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		case MOT_CONST_DEC_CUSTOM:		// [06] 等速＋減速（減速値変更）
			MOT_setData_MOT_CONST_DEC_CUSTOM( f_num, f_fin, en_goStType );			// 動作データ作成
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	edd7 0a02 	vldr	s1, [r7, #8]
 800a5bc:	ed97 0a03 	vldr	s0, [r7, #12]
 800a5c0:	f7ff fd9a 	bl	800a0f8 <MOT_setData_MOT_CONST_DEC_CUSTOM>
			MOT_goBlock_AccConstDec( f_fin, en_type, en_goStType );					// 動作
 800a5c4:	79fa      	ldrb	r2, [r7, #7]
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	ed97 0a02 	vldr	s0, [r7, #8]
 800a5d0:	f7ff f8c8 	bl	8009764 <MOT_goBlock_AccConstDec>
			break;
 800a5d4:	e000      	b.n	800a5d8 <MOT_go_FinSpeed+0x118>

		default:
			break;
 800a5d6:	bf00      	nop
	}

}
 800a5d8:	bf00      	nop
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <MOT_goBlock_FinSpeed>:

void MOT_goBlock_FinSpeed( float f_num, float f_fin )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a5ea:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_NORMAL );		// 通常の直進
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	edd7 0a00 	vldr	s1, [r7]
 800a5f4:	ed97 0a01 	vldr	s0, [r7, #4]
 800a5f8:	f7ff ff62 	bl	800a4c0 <MOT_go_FinSpeed>
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <MOT_goSkewBlock_FinSpeed>:

void MOT_goSkewBlock_FinSpeed( float f_num, float f_fin )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	ed87 0a01 	vstr	s0, [r7, #4]
 800a60e:	edc7 0a00 	vstr	s1, [r7]
	MOT_go_FinSpeed( f_num, f_fin, MOT_GO_ST_SKEW );		// 通常の直進
 800a612:	2001      	movs	r0, #1
 800a614:	edd7 0a00 	vldr	s1, [r7]
 800a618:	ed97 0a01 	vldr	s0, [r7, #4]
 800a61c:	f7ff ff50 	bl	800a4c0 <MOT_go_FinSpeed>
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <MOT_goBlock_Const>:

void MOT_goBlock_Const(float f_num)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b0a0      	sub	sp, #128	; 0x80
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	ed87 0a01 	vstr	s0, [r7, #4]
	stCTRL_DATA		st_data;
	stMOT_DATA		st_info;

	GYRO_staErrChkAngle();
 800a632:	f7fd fe71 	bl	8008318 <GYRO_staErrChkAngle>

	/* ---------------- */
	/*  動作データ計算   */
	/* ---------------- */
	/* 距離 */
	st_info.f_dist		= f_num * BLOCK;													// 移動距離[m]
 800a636:	edd7 7a01 	vldr	s15, [r7, #4]
 800a63a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800a6ec <MOT_goBlock_Const+0xc4>
 800a63e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a642:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	/* ------ */
	/*  等速  */
	/* ------ */
	st_data.en_type			= CTRL_CONST;
 800a646:	2301      	movs	r3, #1
 800a648:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	st_data.f_acc			= 0;					// 加速度指定
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	65bb      	str	r3, [r7, #88]	; 0x58
	st_data.f_now			= f_MotNowSpeed;			// 現在速度
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <MOT_goBlock_Const+0xc8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	65fb      	str	r3, [r7, #92]	; 0x5c
	st_data.f_trgt			= f_MotNowSpeed;			// 目標速度
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <MOT_goBlock_Const+0xc8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	663b      	str	r3, [r7, #96]	; 0x60
	st_data.f_nowDist		= 0;				// 現在位置
 800a65e:	f04f 0300 	mov.w	r3, #0
 800a662:	667b      	str	r3, [r7, #100]	; 0x64
	st_data.f_dist			= st_info.f_dist;			// 等速完了位置
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	66bb      	str	r3, [r7, #104]	; 0x68
	st_data.f_accAngleS		= 0;					// 角加速度
 800a668:	f04f 0300 	mov.w	r3, #0
 800a66c:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_data.f_nowAngleS		= 0;					// 現在角速度
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	673b      	str	r3, [r7, #112]	; 0x70
	st_data.f_trgtAngleS		= 0;					// 目標角度
 800a674:	f04f 0300 	mov.w	r3, #0
 800a678:	677b      	str	r3, [r7, #116]	; 0x74
	st_data.f_nowAngle		= 0;					// 現在角度
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	67bb      	str	r3, [r7, #120]	; 0x78
	st_data.f_angle			= 0;					// 目標角度
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	67fb      	str	r3, [r7, #124]	; 0x7c
	st_data.f_time 			= 0;					// 目標時間 [sec] ← 指定しない
 800a686:	f04f 0300 	mov.w	r3, #0
 800a68a:	657b      	str	r3, [r7, #84]	; 0x54
	CTRL_clrData();										// 設定データをクリア
 800a68c:	f7fb f87e 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );						// データセット
 800a690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a694:	4618      	mov	r0, r3
 800a696:	f7fb f8fd 	bl	8005894 <CTRL_setData>
	Set_TrgtSpeed(f_MotNowSpeed);
 800a69a:	4b15      	ldr	r3, [pc, #84]	; (800a6f0 <MOT_goBlock_Const+0xc8>)
 800a69c:	edd3 7a00 	vldr	s15, [r3]
 800a6a0:	eeb0 0a67 	vmov.f32	s0, s15
 800a6a4:	f7fa ffea 	bl	800567c <Set_TrgtSpeed>
//	printf("目標速度 %f 目標位置 %f \r\n",st_data.f_trgt,st_data.f_dist);
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800a6a8:	e00d      	b.n	800a6c6 <MOT_goBlock_Const+0x9e>
		if( SYS_isOutOfCtrl() == TRUE ){
 800a6aa:	f7fd fae7 	bl	8007c7c <SYS_isOutOfCtrl>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <MOT_goBlock_Const+0x9e>
				CTRL_stop();
 800a6b4:	f7fb f85a 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f7fd fb11 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f7fd fb0e 	bl	8007ce0 <DCM_brakeMot>
				break;
 800a6c4:	e00a      	b.n	800a6dc <MOT_goBlock_Const+0xb4>
	while( Get_NowDist() < st_info.f_dist ){				// 指定距離到達待ち
 800a6c6:	f7fa ffaf 	bl	8005628 <Get_NowDist>
 800a6ca:	eeb0 7a40 	vmov.f32	s14, s0
 800a6ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	d4e6      	bmi.n	800a6aa <MOT_goBlock_Const+0x82>
			}				// 途中で制御不能になった
	}

	GYRO_endErrChkAngle();
 800a6dc:	f7fd fe2e 	bl	800833c <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800a6e0:	f7fb f89e 	bl	8005820 <CTRL_clrNowData>
}
 800a6e4:	bf00      	nop
 800a6e6:	3780      	adds	r7, #128	; 0x80
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	3db851ec 	.word	0x3db851ec
 800a6f0:	2000029c 	.word	0x2000029c

0800a6f4 <MOT_getAccAngle1>:
	CTRL_clrData();
	CTRL_setData(&test);
}

float MOT_getAccAngle1( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_accAngle;
 800a6f8:	2016      	movs	r0, #22
 800a6fa:	f7f8 f85b 	bl	80027b4 <PARAM_getSpeed>
 800a6fe:	4603      	mov	r3, r0
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	ee07 3a90 	vmov	s15, r3
}
 800a706:	eeb0 0a67 	vmov.f32	s0, s15
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <MOT_getAccAngle3>:

float MOT_getAccAngle3( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
//	return ( 1800 );
	return PARAM_getSpeed( PARAM_TRUN )->f_decAngle;
 800a710:	2016      	movs	r0, #22
 800a712:	f7f8 f84f 	bl	80027b4 <PARAM_getSpeed>
 800a716:	4603      	mov	r3, r0
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	ee07 3a90 	vmov	s15, r3
}
 800a71e:	eeb0 0a67 	vmov.f32	s0, s15
 800a722:	bd80      	pop	{r7, pc}
 800a724:	0000      	movs	r0, r0
	...

0800a728 <MOT_turn>:

void MOT_turn( enMOT_TURN_CMD en_type )
{
 800a728:	b5b0      	push	{r4, r5, r7, lr}
 800a72a:	ed2d 8b02 	vpush	{d8}
 800a72e:	b0a2      	sub	sp, #136	; 0x88
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
//	float		f_angle2 = A2_MIN;	//最低第2移動角度[rad]
	float		f_angle1;	//第1移動角度[rad]
	float		f_angle3;	//第3移動角度[rad]
	float		us_trgtAngleS;	//目標角度[rad/s]

	us_trgtAngleS = 2.8*PI;//500;
 800a736:	4bb3      	ldr	r3, [pc, #716]	; (800aa04 <MOT_turn+0x2dc>)
 800a738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	/* ---------------- */
	/*  動作データ計計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_accAngleS1= MOT_getAccAngle1();												// 角加速度1[rad/s^2]
 800a73c:	f7ff ffda 	bl	800a6f4 <MOT_getAccAngle1>
 800a740:	eef0 7a40 	vmov.f32	s15, s0
 800a744:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	st_info.f_accAngleS3= MOT_getAccAngle3();												// 角加速度3[rad/s^2]
 800a748:	f7ff ffe0 	bl	800a70c <MOT_getAccAngle3>
 800a74c:	eef0 7a40 	vmov.f32	s15, s0
 800a750:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度
 800a754:	f04f 0300 	mov.w	r3, #0
 800a758:	667b      	str	r3, [r7, #100]	; 0x64
	st_info.f_trgtAngleS= (float)us_trgtAngleS;												// 目標角速度
 800a75a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a75e:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_lastAngleS= 0;																// 最終角速度
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* 角度 */
	switch( en_type ){
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	2b05      	cmp	r3, #5
 800a76a:	d821      	bhi.n	800a7b0 <MOT_turn+0x88>
 800a76c:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <MOT_turn+0x4c>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a78d 	.word	0x0800a78d
 800a778:	0800a793 	.word	0x0800a793
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a79f 	.word	0x0800a79f
 800a784:	0800a7a5 	.word	0x0800a7a5
 800a788:	0800a7ab 	.word	0x0800a7ab
		case MOT_R90:	st_info.f_angle =  -PI/2 - ANGLE_OFFSET1_R;	break;					// 回転角度[rad]
 800a78c:	4b9e      	ldr	r3, [pc, #632]	; (800aa08 <MOT_turn+0x2e0>)
 800a78e:	673b      	str	r3, [r7, #112]	; 0x70
 800a790:	e012      	b.n	800a7b8 <MOT_turn+0x90>
		case MOT_L90:	st_info.f_angle =   PI/2 + ANGLE_OFFSET1;		break;					// 回転角度[rad]
 800a792:	4b9e      	ldr	r3, [pc, #632]	; (800aa0c <MOT_turn+0x2e4>)
 800a794:	673b      	str	r3, [r7, #112]	; 0x70
 800a796:	e00f      	b.n	800a7b8 <MOT_turn+0x90>
		case MOT_R180:	st_info.f_angle = -PI - ANGLE_OFFSET2_R;	break;					// 回転角度[rad]
 800a798:	4b9d      	ldr	r3, [pc, #628]	; (800aa10 <MOT_turn+0x2e8>)
 800a79a:	673b      	str	r3, [r7, #112]	; 0x70
 800a79c:	e00c      	b.n	800a7b8 <MOT_turn+0x90>
		case MOT_L180:	st_info.f_angle =  PI + ANGLE_OFFSET2;		break;					// 回転角度[rad]
 800a79e:	4b9d      	ldr	r3, [pc, #628]	; (800aa14 <MOT_turn+0x2ec>)
 800a7a0:	673b      	str	r3, [r7, #112]	; 0x70
 800a7a2:	e009      	b.n	800a7b8 <MOT_turn+0x90>
		case MOT_R360:	st_info.f_angle = -2*PI - ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800a7a4:	4b9c      	ldr	r3, [pc, #624]	; (800aa18 <MOT_turn+0x2f0>)
 800a7a6:	673b      	str	r3, [r7, #112]	; 0x70
 800a7a8:	e006      	b.n	800a7b8 <MOT_turn+0x90>
		case MOT_L360:	st_info.f_angle =  2*PI + ANGLE_OFFSET3;		break;					// 回転角度[rad]
 800a7aa:	4b9c      	ldr	r3, [pc, #624]	; (800aa1c <MOT_turn+0x2f4>)
 800a7ac:	673b      	str	r3, [r7, #112]	; 0x70
 800a7ae:	e003      	b.n	800a7b8 <MOT_turn+0x90>
		default:
			printf("error\r\n");
 800a7b0:	489b      	ldr	r0, [pc, #620]	; (800aa20 <MOT_turn+0x2f8>)
 800a7b2:	f009 fcd7 	bl	8014164 <puts>
			break;
 800a7b6:	bf00      	nop
	}
	f_angle3 = ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / 2 * ( st_info.f_trgtAngleS - st_info.f_lastAngleS ) / st_info.f_accAngleS3;						// 第3移動角度[rad]
 800a7b8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a7bc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a7c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7cc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800a7d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a7d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a7dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a7e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7e4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	f_angle1 = ( 0 - st_info.f_trgtAngleS) / 2 * ( 0 - st_info.f_trgtAngleS ) / st_info.f_accAngleS1;
 800a7e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a7ec:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800aa24 <MOT_turn+0x2fc>
 800a7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a7f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7fc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a800:	eddf 6a88 	vldr	s13, [pc, #544]	; 800aa24 <MOT_turn+0x2fc>
 800a804:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a808:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a80c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a814:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c


	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <MOT_turn+0x102>
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d002      	beq.n	800a82a <MOT_turn+0x102>
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	2b04      	cmp	r3, #4
 800a828:	d12a      	bne.n	800a880 <MOT_turn+0x158>
		st_info.f_trgtAngleS*= -1;															// 回転方向を逆にする
 800a82a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a82e:	eef1 7a67 	vneg.f32	s15, s15
 800a832:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		f_angle1			*= -1;
 800a836:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a83a:	eef1 7a67 	vneg.f32	s15, s15
 800a83e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
//		f_angle2 			*= -1;															// 回転方向を逆にする
		f_angle3 			*= -1;															// 回転方向を逆にする
 800a842:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a846:	eef1 7a67 	vneg.f32	s15, s15
 800a84a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800a84e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a850:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800a852:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a856:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a85a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a85e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Right;
 800a862:	4b71      	ldr	r3, [pc, #452]	; (800aa28 <MOT_turn+0x300>)
 800a864:	2200      	movs	r2, #0
 800a866:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 > ( A1_MIN * -1 ) ){
 800a868:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a86c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800aa2c <MOT_turn+0x304>
 800a870:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a878:	dd1a      	ble.n	800a8b0 <MOT_turn+0x188>
			st_info.f_angle1 = A1_MIN * -1;
 800a87a:	4b6d      	ldr	r3, [pc, #436]	; (800aa30 <MOT_turn+0x308>)
 800a87c:	677b      	str	r3, [r7, #116]	; 0x74
		if( st_info.f_angle1 > ( A1_MIN * -1 ) ){
 800a87e:	e017      	b.n	800a8b0 <MOT_turn+0x188>
		}
	}
	else{
		st_info.f_angle1	= f_angle1;						// 第1移動角度[rad]
 800a880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a882:	677b      	str	r3, [r7, #116]	; 0x74
		st_info.f_angle1_2	= st_info.f_angle - f_angle3;									// 第1+2移動角度[rad]
 800a884:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a888:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a88c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a890:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		en_Turntype			= Left;
 800a894:	4b64      	ldr	r3, [pc, #400]	; (800aa28 <MOT_turn+0x300>)
 800a896:	2201      	movs	r2, #1
 800a898:	701a      	strb	r2, [r3, #0]

		/* 最小移動距離を上書き */
		if( st_info.f_angle1 < A1_MIN ){
 800a89a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a89e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800aa34 <MOT_turn+0x30c>
 800a8a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8aa:	d501      	bpl.n	800a8b0 <MOT_turn+0x188>
			st_info.f_angle1 = A1_MIN;
 800a8ac:	4b62      	ldr	r3, [pc, #392]	; (800aa38 <MOT_turn+0x310>)
 800a8ae:	677b      	str	r3, [r7, #116]	; 0x74
		}
	}


	GYRO_staErrChkAngle();			// エラー検出開始
 800a8b0:	f7fd fd32 	bl	8008318 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_TRUN;
 800a8b4:	2307      	movs	r3, #7
 800a8b6:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800a8b8:	f04f 0300 	mov.w	r3, #0
 800a8bc:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800a8be:	f04f 0300 	mov.w	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800a8c4:	f04f 0300 	mov.w	r3, #0
 800a8c8:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 加速距離
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800a8d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800a8da:	f04f 0300 	mov.w	r3, #0
 800a8de:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角度
 800a8e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= 0;						// 現在角度
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800a8ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ec:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800a8f4:	f7fa ff4a 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800a8f8:	f107 0308 	add.w	r3, r7, #8
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fa ffc9 	bl	8005894 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800a902:	f7fd fa11 	bl	8007d28 <DCM_staMotAll>

	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d015      	beq.n	800a938 <MOT_turn+0x210>
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d012      	beq.n	800a938 <MOT_turn+0x210>
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	2b04      	cmp	r3, #4
 800a916:	d129      	bne.n	800a96c <MOT_turn+0x244>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800a918:	e00e      	b.n	800a938 <MOT_turn+0x210>
			if( SYS_isOutOfCtrl() == TRUE ){
 800a91a:	f7fd f9af 	bl	8007c7c <SYS_isOutOfCtrl>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <MOT_turn+0x210>
				CTRL_stop();
 800a924:	f7fa ff22 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800a928:	2000      	movs	r0, #0
 800a92a:	f7fd f9d9 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800a92e:	2001      	movs	r0, #1
 800a930:	f7fd f9d6 	bl	8007ce0 <DCM_brakeMot>
				break;
 800a934:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800a936:	e024      	b.n	800a982 <MOT_turn+0x25a>
		while( Get_NowAngle() > st_info.f_angle1 ){			// 指定角度到達待ち
 800a938:	f7fa feb0 	bl	800569c <Get_NowAngle>
 800a93c:	eeb0 7a40 	vmov.f32	s14, s0
 800a940:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	dce5      	bgt.n	800a91a <MOT_turn+0x1f2>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800a94e:	e018      	b.n	800a982 <MOT_turn+0x25a>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800a950:	f7fd f994 	bl	8007c7c <SYS_isOutOfCtrl>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d008      	beq.n	800a96c <MOT_turn+0x244>
				CTRL_stop();
 800a95a:	f7fa ff07 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800a95e:	2000      	movs	r0, #0
 800a960:	f7fd f9be 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800a964:	2001      	movs	r0, #1
 800a966:	f7fd f9bb 	bl	8007ce0 <DCM_brakeMot>
				break;
 800a96a:	e00a      	b.n	800a982 <MOT_turn+0x25a>
		while( Get_NowAngle() < st_info.f_angle1 ){			// 指定角度到達待ち
 800a96c:	f7fa fe96 	bl	800569c <Get_NowAngle>
 800a970:	eeb0 7a40 	vmov.f32	s14, s0
 800a974:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a980:	d4e6      	bmi.n	800a950 <MOT_turn+0x228>
//	printf("finish\n");

	/* ------ */
	/*  等速  */
	/* ------ */
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <MOT_turn+0x26c>
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d002      	beq.n	800a994 <MOT_turn+0x26c>
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	2b04      	cmp	r3, #4
 800a992:	d159      	bne.n	800aa48 <MOT_turn+0x320>
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800a994:	f7fa fe9e 	bl	80056d4 <Get_TrgtAngleS>
 800a998:	eeb0 7a40 	vmov.f32	s14, s0
 800a99c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9a8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800a9ac:	f7fa fe92 	bl	80056d4 <Get_TrgtAngleS>
 800a9b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a9b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800a9b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9bc:	ee68 6a27 	vmul.f32	s13, s16, s15
 800a9c0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		f_angle3			= -1 * f_angle3;
 800a9cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a9d0:	eef1 7a67 	vneg.f32	s15, s15
 800a9d4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		if( f_angle3 > A3_MIN*-1 ) f_angle3 = A3_MIN * -1;																	// 減速最低角度に書き換え
 800a9d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a9dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800aa3c <MOT_turn+0x314>
 800a9e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e8:	dd02      	ble.n	800a9f0 <MOT_turn+0x2c8>
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <MOT_turn+0x318>)
 800a9ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;// 第1+2移動角度[rad]
 800a9f0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a9f4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a9f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9fc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 800aa00:	e052      	b.n	800aaa8 <MOT_turn+0x380>
 800aa02:	bf00      	nop
 800aa04:	410cbe45 	.word	0x410cbe45
 800aa08:	bfc90fd0 	.word	0xbfc90fd0
 800aa0c:	3fc90fd0 	.word	0x3fc90fd0
 800aa10:	c0490fd0 	.word	0xc0490fd0
 800aa14:	40490fd0 	.word	0x40490fd0
 800aa18:	c0c90fd0 	.word	0xc0c90fd0
 800aa1c:	40c90fd0 	.word	0x40c90fd0
 800aa20:	0801956c 	.word	0x0801956c
 800aa24:	00000000 	.word	0x00000000
 800aa28:	200002ec 	.word	0x200002ec
 800aa2c:	bedf66e8 	.word	0xbedf66e8
 800aa30:	bedf66e8 	.word	0xbedf66e8
 800aa34:	3edf66e8 	.word	0x3edf66e8
 800aa38:	3edf66e8 	.word	0x3edf66e8
 800aa3c:	beb2b8b9 	.word	0xbeb2b8b9
 800aa40:	beb2b8b9 	.word	0xbeb2b8b9
 800aa44:	3eb2b8b9 	.word	0x3eb2b8b9

	}
	else{
		f_angle3			= ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / 2 * ( Get_TrgtAngleS() - st_info.f_lastAngleS ) / st_info.f_accAngleS3;		// 第3移動角度[rad]
 800aa48:	f7fa fe44 	bl	80056d4 <Get_TrgtAngleS>
 800aa4c:	eeb0 7a40 	vmov.f32	s14, s0
 800aa50:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800aa54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa5c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800aa60:	f7fa fe38 	bl	80056d4 <Get_TrgtAngleS>
 800aa64:	eeb0 7a40 	vmov.f32	s14, s0
 800aa68:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800aa6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa70:	ee68 6a27 	vmul.f32	s13, s16, s15
 800aa74:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800aa78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa7c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		if( f_angle3 < A3_MIN ) f_angle3 = A3_MIN;																			// 減速最低角度に書き換え
 800aa80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aa84:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800aa44 <MOT_turn+0x31c>
 800aa88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa90:	d502      	bpl.n	800aa98 <MOT_turn+0x370>
 800aa92:	4b9b      	ldr	r3, [pc, #620]	; (800ad00 <MOT_turn+0x5d8>)
 800aa94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st_info.f_angle1_2		= st_info.f_angle - f_angle3;																// 第1+2移動角度[rad]
 800aa98:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800aa9c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aaa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaa4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
//		printf("   [f_angle3]%d [f_angle1_2]%d\n\r", (int32_t)f_angle3, (int32_t)	st_info.f_angle1_2 );
	}
//	printf("[f_TrgtAngleS] %5.2f,st_info.f_angle1_2%5.2f,f_angle2%5.2f\n\r",f_TrgtAngleS,st_info.f_angle1_2,f_angle3);
	st_data.en_type			= CTRL_CONST_TRUN;
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 加速度指定
 800aaac:	f04f 0300 	mov.w	r3, #0
 800aab0:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800aab2:	f04f 0300 	mov.w	r3, #0
 800aab6:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 目標速度
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 進んでいない
 800aabe:	f04f 0300 	mov.w	r3, #0
 800aac2:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 等速完了位置
 800aac4:	f04f 0300 	mov.w	r3, #0
 800aac8:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= 0;						// 角加速度
 800aaca:	f04f 0300 	mov.w	r3, #0
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800aad0:	f7fa fe00 	bl	80056d4 <Get_TrgtAngleS>
 800aad4:	eef0 7a40 	vmov.f32	s15, s0
 800aad8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= Get_TrgtAngleS();				// 目標角度
 800aadc:	f7fa fdfa 	bl	80056d4 <Get_TrgtAngleS>
 800aae0:	eef0 7a40 	vmov.f32	s15, s0
 800aae4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800aae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaea:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle1_2;			// 目標角度
 800aaec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fa feca 	bl	8005894 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d015      	beq.n	800ab32 <MOT_turn+0x40a>
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d012      	beq.n	800ab32 <MOT_turn+0x40a>
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d129      	bne.n	800ab66 <MOT_turn+0x43e>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800ab12:	e00e      	b.n	800ab32 <MOT_turn+0x40a>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800ab14:	f7fd f8b2 	bl	8007c7c <SYS_isOutOfCtrl>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d009      	beq.n	800ab32 <MOT_turn+0x40a>
				CTRL_stop();
 800ab1e:	f7fa fe25 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ab22:	2000      	movs	r0, #0
 800ab24:	f7fd f8dc 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ab28:	2001      	movs	r0, #1
 800ab2a:	f7fd f8d9 	bl	8007ce0 <DCM_brakeMot>
				break;
 800ab2e:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800ab30:	e024      	b.n	800ab7c <MOT_turn+0x454>
		while( Get_NowAngle() > st_info.f_angle1_2 ){			// 指定距離到達待ち
 800ab32:	f7fa fdb3 	bl	800569c <Get_NowAngle>
 800ab36:	eeb0 7a40 	vmov.f32	s14, s0
 800ab3a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ab3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab46:	dce5      	bgt.n	800ab14 <MOT_turn+0x3ec>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800ab48:	e018      	b.n	800ab7c <MOT_turn+0x454>
	}
	else{
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800ab4a:	f7fd f897 	bl	8007c7c <SYS_isOutOfCtrl>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d008      	beq.n	800ab66 <MOT_turn+0x43e>
				CTRL_stop();
 800ab54:	f7fa fe0a 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ab58:	2000      	movs	r0, #0
 800ab5a:	f7fd f8c1 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ab5e:	2001      	movs	r0, #1
 800ab60:	f7fd f8be 	bl	8007ce0 <DCM_brakeMot>
				break;
 800ab64:	e00a      	b.n	800ab7c <MOT_turn+0x454>
		while( Get_NowAngle() < st_info.f_angle1_2 ){			// 指定距離到達待ち
 800ab66:	f7fa fd99 	bl	800569c <Get_NowAngle>
 800ab6a:	eeb0 7a40 	vmov.f32	s14, s0
 800ab6e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800ab72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7a:	d4e6      	bmi.n	800ab4a <MOT_turn+0x422>
//	printf("finish2\n");

	/* ------ */
	/*  // 減速  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_TRUN;
 800ab7c:	2309      	movs	r3, #9
 800ab7e:	723b      	strb	r3, [r7, #8]
	st_data.f_acc			= 0;						// 減速
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	613b      	str	r3, [r7, #16]
	st_data.f_now			= 0;						// 現在速度
 800ab86:	f04f 0300 	mov.w	r3, #0
 800ab8a:	617b      	str	r3, [r7, #20]
	st_data.f_trgt			= 0;						// 最終速度
 800ab8c:	f04f 0300 	mov.w	r3, #0
 800ab90:	61bb      	str	r3, [r7, #24]
	st_data.f_nowDist		= 0;						// 等速完了位置
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	61fb      	str	r3, [r7, #28]
	st_data.f_dist			= 0;						// 全移動完了位置
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	623b      	str	r3, [r7, #32]
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800ab9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_nowAngleS		= Get_TrgtAngleS();				// 現在角速度
 800aba2:	f7fa fd97 	bl	80056d4 <Get_TrgtAngleS>
 800aba6:	eef0 7a40 	vmov.f32	s15, s0
 800abaa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800abae:	f04f 0300 	mov.w	r3, #0
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800abb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800abb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800abbc:	f04f 0300 	mov.w	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
	CTRL_setData( &st_data );							// データセット
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fa fe64 	bl	8005894 <CTRL_setData>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d023      	beq.n	800ac1a <MOT_turn+0x4f2>
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d020      	beq.n	800ac1a <MOT_turn+0x4f2>
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b04      	cmp	r3, #4
 800abdc:	d158      	bne.n	800ac90 <MOT_turn+0x568>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800abde:	e01c      	b.n	800ac1a <MOT_turn+0x4f2>
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS );
			if( SYS_isOutOfCtrl() == TRUE ){
 800abe0:	f7fd f84c 	bl	8007c7c <SYS_isOutOfCtrl>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d008      	beq.n	800abfc <MOT_turn+0x4d4>
				CTRL_stop();
 800abea:	f7fa fdbf 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800abee:	2000      	movs	r0, #0
 800abf0:	f7fd f876 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7fd f873 	bl	8007ce0 <DCM_brakeMot>
				break;
 800abfa:	e02b      	b.n	800ac54 <MOT_turn+0x52c>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800abfc:	4b41      	ldr	r3, [pc, #260]	; (800ad04 <MOT_turn+0x5dc>)
 800abfe:	edd3 7a00 	vldr	s15, [r3]
 800ac02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ac06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0e:	dc00      	bgt.n	800ac12 <MOT_turn+0x4ea>
 800ac10:	e003      	b.n	800ac1a <MOT_turn+0x4f2>
 800ac12:	4b3d      	ldr	r3, [pc, #244]	; (800ad08 <MOT_turn+0x5e0>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d11b      	bne.n	800ac52 <MOT_turn+0x52a>
		while( Get_NowAngle() > ( st_info.f_angle-0.004) ){		// 指定距離到達待ち
 800ac1a:	f7fa fd3f 	bl	800569c <Get_NowAngle>
 800ac1e:	ee10 3a10 	vmov	r3, s0
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f5 fcb8 	bl	8000598 <__aeabi_f2d>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f5 fcb2 	bl	8000598 <__aeabi_f2d>
 800ac34:	a330      	add	r3, pc, #192	; (adr r3, 800acf8 <MOT_turn+0x5d0>)
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f7f5 fb4d 	bl	80002d8 <__aeabi_dsub>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4620      	mov	r0, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7f5 ff8f 	bl	8000b68 <__aeabi_dcmpgt>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1c7      	bne.n	800abe0 <MOT_turn+0x4b8>
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800ac50:	e03b      	b.n	800acca <MOT_turn+0x5a2>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800ac52:	bf00      	nop
	if( ( en_type == MOT_R90 ) || ( en_type == MOT_R180 ) || ( en_type == MOT_R360 ) ){		// -方向
 800ac54:	e039      	b.n	800acca <MOT_turn+0x5a2>
	}
	else{
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
//			DCMC_getAngleSpeedFB(&f_err);
//			printf("[NOW]%d [Trgt]%d [TrgtS]%d  \n\r", (int32_t)f_NowAngle, (int32_t)f_TrgtAngle, (int32_t)f_TrgtAngleS);
			if( SYS_isOutOfCtrl() == TRUE ){
 800ac56:	f7fd f811 	bl	8007c7c <SYS_isOutOfCtrl>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <MOT_turn+0x54a>
				CTRL_stop();
 800ac60:	f7fa fd84 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ac64:	2000      	movs	r0, #0
 800ac66:	f7fd f83b 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f7fd f838 	bl	8007ce0 <DCM_brakeMot>
				break;
 800ac70:	e02b      	b.n	800acca <MOT_turn+0x5a2>
			}				// 途中で制御不能になった
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800ac72:	4b24      	ldr	r3, [pc, #144]	; (800ad04 <MOT_turn+0x5dc>)
 800ac74:	edd3 7a00 	vldr	s15, [r3]
 800ac78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ac7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac84:	dc00      	bgt.n	800ac88 <MOT_turn+0x560>
 800ac86:	e003      	b.n	800ac90 <MOT_turn+0x568>
 800ac88:	4b1f      	ldr	r3, [pc, #124]	; (800ad08 <MOT_turn+0x5e0>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d11b      	bne.n	800acc8 <MOT_turn+0x5a0>
		while( Get_NowAngle() < ( st_info.f_angle+0.004 ) ){		// 指定距離到達待ち
 800ac90:	f7fa fd04 	bl	800569c <Get_NowAngle>
 800ac94:	ee10 3a10 	vmov	r3, s0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7f5 fc7d 	bl	8000598 <__aeabi_f2d>
 800ac9e:	4604      	mov	r4, r0
 800aca0:	460d      	mov	r5, r1
 800aca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7f5 fc77 	bl	8000598 <__aeabi_f2d>
 800acaa:	a313      	add	r3, pc, #76	; (adr r3, 800acf8 <MOT_turn+0x5d0>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fb14 	bl	80002dc <__adddf3>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f7f5 ff36 	bl	8000b2c <__aeabi_dcmplt>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1c7      	bne.n	800ac56 <MOT_turn+0x52e>
 800acc6:	e000      	b.n	800acca <MOT_turn+0x5a2>
			if((escape_wait>0.5)&&(search_flag == TRUE))break;
 800acc8:	bf00      	nop
//			log_in(f_TrgtAngle);
		}
	}
//	printf("finish3\n");
	/* 停止 */
	LL_mDelay(200);				// 安定待ち
 800acca:	20c8      	movs	r0, #200	; 0xc8
 800accc:	f008 fabc 	bl	8013248 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800acd0:	f7fa fd4c 	bl	800576c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800acd4:	2000      	movs	r0, #0
 800acd6:	f7fd f803 	bl	8007ce0 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800acda:	2001      	movs	r0, #1
 800acdc:	f7fd f800 	bl	8007ce0 <DCM_brakeMot>
	GYRO_endErrChkAngle();					// エラー検出終了
 800ace0:	f7fd fb2c 	bl	800833c <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800ace4:	f7fa fd9c 	bl	8005820 <CTRL_clrNowData>
}
 800ace8:	bf00      	nop
 800acea:	3788      	adds	r7, #136	; 0x88
 800acec:	46bd      	mov	sp, r7
 800acee:	ecbd 8b02 	vpop	{d8}
 800acf2:	bdb0      	pop	{r4, r5, r7, pc}
 800acf4:	f3af 8000 	nop.w
 800acf8:	d2f1a9fc 	.word	0xd2f1a9fc
 800acfc:	3f70624d 	.word	0x3f70624d
 800ad00:	3eb2b8b9 	.word	0x3eb2b8b9
 800ad04:	200006f4 	.word	0x200006f4
 800ad08:	200002f0 	.word	0x200002f0

0800ad0c <MOT_setSuraStaSpeed>:

void MOT_setSuraStaSpeed( float f_speed )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotSuraStaSpeed = f_speed;
 800ad16:	4a04      	ldr	r2, [pc, #16]	; (800ad28 <MOT_setSuraStaSpeed+0x1c>)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6013      	str	r3, [r2, #0]

}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	200002a4 	.word	0x200002a4

0800ad2c <MOT_getSuraStaSpeed>:

float MOT_getSuraStaSpeed( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
	return f_MotSuraStaSpeed;
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <MOT_getSuraStaSpeed+0x18>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	ee07 3a90 	vmov	s15, r3
}
 800ad38:	eeb0 0a67 	vmov.f32	s0, s15
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	200002a4 	.word	0x200002a4

0800ad48 <MOT_setTrgtSpeed>:

float MOT_setTrgtSpeed(float f_speed)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotTrgtSpeed = f_speed;
 800ad52:	4a07      	ldr	r2, [pc, #28]	; (800ad70 <MOT_setTrgtSpeed+0x28>)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6013      	str	r3, [r2, #0]
	return f_MotTrgtSpeed;
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <MOT_setTrgtSpeed+0x28>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	ee07 3a90 	vmov	s15, r3
}
 800ad60:	eeb0 0a67 	vmov.f32	s0, s15
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	200002a0 	.word	0x200002a0

0800ad74 <MOT_setNowSpeed>:

void MOT_setNowSpeed(float f_speed)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	ed87 0a01 	vstr	s0, [r7, #4]
	f_MotNowSpeed = f_speed;
 800ad7e:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <MOT_setNowSpeed+0x1c>)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6013      	str	r3, [r2, #0]
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	2000029c 	.word	0x2000029c

0800ad94 <MOT_goHitBackWall>:

void MOT_goHitBackWall(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b09e      	sub	sp, #120	; 0x78
 800ad98:	af00      	add	r7, sp, #0

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1= 1200;												// 角加速度1[rad/s^2]												// 角加速度3[rad/s^2]
 800ad9a:	4b24      	ldr	r3, [pc, #144]	; (800ae2c <MOT_goHitBackWall+0x98>)
 800ad9c:	63bb      	str	r3, [r7, #56]	; 0x38

	GYRO_staErrChkAngle();			// エラー検出開始
 800ad9e:	f7fd fabb 	bl	8008318 <GYRO_staErrChkAngle>
	/*      実動作       */
	/* ================ */
	/* ------ */
	/*  加速  */
	/* ------ */
	st_data.en_type			= CTRL_HIT_WALL;
 800ada2:	2306      	movs	r3, #6
 800ada4:	713b      	strb	r3, [r7, #4]
	st_data.f_acc			= st_info.f_acc1;						// 加速度指定
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	60fb      	str	r3, [r7, #12]
	st_data.f_now			= 0;						// 現在速度
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	613b      	str	r3, [r7, #16]
	st_data.f_trgt			= 0;						// 目標速度
 800adb0:	f04f 0300 	mov.w	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
	st_data.f_nowDist		= 0;						// 進んでいない
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	61bb      	str	r3, [r7, #24]
	st_data.f_dist			= 0;						// 加速距離
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	61fb      	str	r3, [r7, #28]
	st_data.f_accAngleS		= 0;		// 角加速度
 800adc2:	f04f 0300 	mov.w	r3, #0
 800adc6:	623b      	str	r3, [r7, #32]
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800adc8:	f04f 0300 	mov.w	r3, #0
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_trgtAngleS		= 0;		// 目標角度
 800adce:	f04f 0300 	mov.w	r3, #0
 800add2:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngle		= 0;						// 現在角度
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_angle			= 0;			// 目標角度
 800adda:	f04f 0300 	mov.w	r3, #0
 800adde:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800ade0:	f04f 0300 	mov.w	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800ade6:	f7fa fcd1 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800adea:	1d3b      	adds	r3, r7, #4
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa fd51 	bl	8005894 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800adf2:	f7fc ff99 	bl	8007d28 <DCM_staMotAll>
//	printf("目標速度 %f 目標位置 %f\r\n",st_data.f_trgt,st_data.f_dist);

	/*停止*/
	LL_mDelay(400);				// 安定待ち
 800adf6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800adfa:	f008 fa25 	bl	8013248 <LL_mDelay>
	CTRL_stop();			// 制御停止
 800adfe:	f7fa fcb5 	bl	800576c <CTRL_stop>
	DCM_brakeMot( DCM_R );		// ブレーキ
 800ae02:	2000      	movs	r0, #0
 800ae04:	f7fc ff6c 	bl	8007ce0 <DCM_brakeMot>
	DCM_brakeMot( DCM_L );		// ブレーキ
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7fc ff69 	bl	8007ce0 <DCM_brakeMot>

	LL_mDelay(100);
 800ae0e:	2064      	movs	r0, #100	; 0x64
 800ae10:	f008 fa1a 	bl	8013248 <LL_mDelay>

	f_MotNowSpeed = 0.0f;		//現在速度更新
 800ae14:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <MOT_goHitBackWall+0x9c>)
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]

	GYRO_endErrChkAngle();					// エラー検出終了
 800ae1c:	f7fd fa8e 	bl	800833c <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800ae20:	f7fa fcfe 	bl	8005820 <CTRL_clrNowData>

}
 800ae24:	bf00      	nop
 800ae26:	3778      	adds	r7, #120	; 0x78
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	44960000 	.word	0x44960000
 800ae30:	2000029c 	.word	0x2000029c
 800ae34:	00000000 	.word	0x00000000

0800ae38 <MOT_goSla>:

void MOT_goSla( enMOT_SURA_CMD en_type, stSLA* p_sla )
{
 800ae38:	b5b0      	push	{r4, r5, r7, lr}
 800ae3a:	b0a2      	sub	sp, #136	; 0x88
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	6039      	str	r1, [r7, #0]
 800ae42:	71fb      	strb	r3, [r7, #7]

	/* ---------------- */
	/*  動作データ計算  */
	/* ---------------- */
	/* 加速度 */
	st_info.f_acc1 		= 0;																// 加速度1[mm/s^2]
 800ae44:	f04f 0300 	mov.w	r3, #0
 800ae48:	643b      	str	r3, [r7, #64]	; 0x40
	st_info.f_acc3 		= 0;																// 加速度3[mm/s^2]
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	647b      	str	r3, [r7, #68]	; 0x44

	/* 速度 */
	st_info.f_now		= p_sla->f_speed;													// 現在速度
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	64bb      	str	r3, [r7, #72]	; 0x48
	st_info.f_trgt		= p_sla->f_speed;													// 目標速度
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	st_info.f_last		= p_sla->f_speed;													// 最終速度
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	653b      	str	r3, [r7, #80]	; 0x50

	/* 距離 */
	st_info.f_dist		= 0;																// 移動距離
 800ae62:	f04f 0300 	mov.w	r3, #0
 800ae66:	657b      	str	r3, [r7, #84]	; 0x54
	st_info.f_l1		= 0;																// 第1移動距離[mm]
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	65bb      	str	r3, [r7, #88]	; 0x58
	st_info.f_l1_2		= 0;																// 第1+2移動距離[mm]
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* 角加速度 */
	st_info.f_accAngleS1= p_sla->f_angAcc;													// 角加速度1[deg/s^2]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	663b      	str	r3, [r7, #96]	; 0x60
	st_info.f_accAngleS3= p_sla->f_angAcc;													// 角加速度3[deg/s^2]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	667b      	str	r3, [r7, #100]	; 0x64

	/* 角速度 */
	st_info.f_nowAngleS	= 0;																// 現在角速度[deg/s]
 800ae80:	f04f 0300 	mov.w	r3, #0
 800ae84:	66bb      	str	r3, [r7, #104]	; 0x68
	st_info.f_trgtAngleS= p_sla->f_angvel;													// 目標角速度
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	66fb      	str	r3, [r7, #108]	; 0x6c
	st_info.f_lastAngleS= 0;																// 最終角速度
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	673b      	str	r3, [r7, #112]	; 0x70

	/* 角度 */
	st_info.f_angle		= p_sla->f_ang_Total;												// 旋回角度[deg]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	677b      	str	r3, [r7, #116]	; 0x74
	st_info.f_angle1	= p_sla->f_ang_AccEnd;												// 第1移動角度[deg]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	67bb      	str	r3, [r7, #120]	; 0x78
	st_info.f_angle1_2	= p_sla->f_ang_ConstEnd;											// 第1+2移動角度[deg]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* 方向に応じて符号を変更 */
	if( ( en_type == MOT_R90S ) ||
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00e      	beq.n	800aec8 <MOT_goSla+0x90>
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d00b      	beq.n	800aec8 <MOT_goSla+0x90>
		( en_type == MOT_R45S_S2N ) || ( en_type == MOT_R45S_N2S ) ||
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d008      	beq.n	800aec8 <MOT_goSla+0x90>
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	2b06      	cmp	r3, #6
 800aeba:	d005      	beq.n	800aec8 <MOT_goSla+0x90>
		( en_type == MOT_R90S_N ) ||
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d002      	beq.n	800aec8 <MOT_goSla+0x90>
		( en_type == MOT_R135S_S2N ) || ( en_type == MOT_R135S_N2S )
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	2b0a      	cmp	r3, #10
 800aec6:	d11e      	bne.n	800af06 <MOT_goSla+0xce>
	){
		st_info.f_accAngleS1 *= -1;
 800aec8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aecc:	eef1 7a67 	vneg.f32	s15, s15
 800aed0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		st_info.f_trgtAngleS *= -1;
 800aed4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800aed8:	eef1 7a67 	vneg.f32	s15, s15
 800aedc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		st_info.f_angle      *= -1;
 800aee0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800aee4:	eef1 7a67 	vneg.f32	s15, s15
 800aee8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		st_info.f_angle1     *= -1;
 800aeec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800aef0:	eef1 7a67 	vneg.f32	s15, s15
 800aef4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		st_info.f_angle1_2   *= -1;
 800aef8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800aefc:	eef1 7a67 	vneg.f32	s15, s15
 800af00:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 800af04:	e005      	b.n	800af12 <MOT_goSla+0xda>
	}
	else{
		st_info.f_accAngleS3 *= -1;
 800af06:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800af0a:	eef1 7a67 	vneg.f32	s15, s15
 800af0e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	}

	/* 斜め走行のタイプに応じて、スラローム前の距離とスラローム後の退避距離を入れ替える */
	if( ( en_type == MOT_R45S_N2S ) || ( en_type == MOT_L45S_N2S ) || ( en_type == MOT_R135S_N2S ) || ( en_type == MOT_L135S_N2S ) ){ 		// 逆にするもの
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	2b04      	cmp	r3, #4
 800af16:	d008      	beq.n	800af2a <MOT_goSla+0xf2>
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	d005      	beq.n	800af2a <MOT_goSla+0xf2>
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	2b0a      	cmp	r3, #10
 800af22:	d002      	beq.n	800af2a <MOT_goSla+0xf2>
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b0b      	cmp	r3, #11
 800af28:	d108      	bne.n	800af3c <MOT_goSla+0x104>
		f_entryLen  = p_sla->f_escapeLen;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_entryLen;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af3a:	e007      	b.n	800af4c <MOT_goSla+0x114>
	}
	else{		// 通常
		f_entryLen  = p_sla->f_entryLen;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		f_escapeLen = p_sla->f_escapeLen;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	}

	GYRO_staErrChkAngle();			// エラー検出開始
 800af4c:	f7fd f9e4 	bl	8008318 <GYRO_staErrChkAngle>
	/*      entry      */
	/* ================ */
	/* ------------------------ */
	/*  スラローム前の前進動作  */
	/* ------------------------ */
	st_data.en_type			= CTRL_ENTRY_SURA;
 800af50:	230a      	movs	r3, #10
 800af52:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800af54:	f04f 0300 	mov.w	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800af5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5c:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800af5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af60:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= 0;						// 進んでいない
 800af62:	f04f 0300 	mov.w	r3, #0
 800af66:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen;				// スラローム前の前進距離
 800af68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800af6e:	f04f 0300 	mov.w	r3, #0
 800af72:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800af74:	f04f 0300 	mov.w	r3, #0
 800af78:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= 0;						// 目標角度
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800af80:	f04f 0300 	mov.w	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800af86:	f04f 0300 	mov.w	r3, #0
 800af8a:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800af8c:	f04f 0300 	mov.w	r3, #0
 800af90:	613b      	str	r3, [r7, #16]
	CTRL_clrData();										// マウスの現在位置/角度をクリア
 800af92:	f7fa fbfb 	bl	800578c <CTRL_clrData>
	CTRL_setData( &st_data );							// データセット
 800af96:	f107 030c 	add.w	r3, r7, #12
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fa fc7a 	bl	8005894 <CTRL_setData>
	DCM_staMotAll();									// モータON
 800afa0:	f7fc fec2 	bl	8007d28 <DCM_staMotAll>

	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800afa4:	e019      	b.n	800afda <MOT_goSla+0x1a2>
		if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800afa6:	2000      	movs	r0, #0
 800afa8:	f000 fca6 	bl	800b8f8 <DIST_getNowVal>
 800afac:	4603      	mov	r3, r0
 800afae:	2ba0      	cmp	r3, #160	; 0xa0
 800afb0:	dd05      	ble.n	800afbe <MOT_goSla+0x186>
 800afb2:	2001      	movs	r0, #1
 800afb4:	f000 fca0 	bl	800b8f8 <DIST_getNowVal>
 800afb8:	4603      	mov	r3, r0
 800afba:	2ba0      	cmp	r3, #160	; 0xa0
 800afbc:	dc21      	bgt.n	800b002 <MOT_goSla+0x1ca>
		if( SYS_isOutOfCtrl() == TRUE ){
 800afbe:	f7fc fe5d 	bl	8007c7c <SYS_isOutOfCtrl>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <MOT_goSla+0x1a2>
			CTRL_stop();
 800afc8:	f7fa fbd0 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800afcc:	2000      	movs	r0, #0
 800afce:	f7fc fe87 	bl	8007ce0 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800afd2:	2001      	movs	r0, #1
 800afd4:	f7fc fe84 	bl	8007ce0 <DCM_brakeMot>
			break;
 800afd8:	e014      	b.n	800b004 <MOT_goSla+0x1cc>
	while( Get_NowDist() < f_entryLen + uc_dist_control ){				// 指定距離到達待ち
 800afda:	f7fa fb25 	bl	8005628 <Get_NowDist>
 800afde:	eef0 6a40 	vmov.f32	s13, s0
 800afe2:	4bb9      	ldr	r3, [pc, #740]	; (800b2c8 <MOT_goSla+0x490>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800afee:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aff6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800affa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affe:	d4d2      	bmi.n	800afa6 <MOT_goSla+0x16e>
 800b000:	e000      	b.n	800b004 <MOT_goSla+0x1cc>
		if((DIST_getNowVal( DIST_SEN_R_FRONT )>R_FRONT_CTRL)&&(DIST_getNowVal( DIST_SEN_L_FRONT )>L_FRONT_CTRL))break;
 800b002:	bf00      	nop
//	LED_off(LED1);
//	log_in(0);
	/* ------ */
	/*  acc  */
	/* ------ */
	st_data.en_type			= CTRL_ACC_SURA;
 800b004:	230b      	movs	r3, #11
 800b006:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800b00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b010:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800b012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b014:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen;				//
 800b016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b01a:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;		// 加速距離
 800b01c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b020:	f7f5 faba 	bl	8000598 <__aeabi_f2d>
 800b024:	4604      	mov	r4, r0
 800b026:	460d      	mov	r5, r1
 800b028:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	8a9b      	ldrh	r3, [r3, #20]
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03c:	ee17 0a90 	vmov	r0, s15
 800b040:	f7f5 faaa 	bl	8000598 <__aeabi_f2d>
 800b044:	a39e      	add	r3, pc, #632	; (adr r3, 800b2c0 <MOT_goSla+0x488>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 fafd 	bl	8000648 <__aeabi_dmul>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4620      	mov	r0, r4
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 f941 	bl	80002dc <__adddf3>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4610      	mov	r0, r2
 800b060:	4619      	mov	r1, r3
 800b062:	f7f5 fde9 	bl	8000c38 <__aeabi_d2f>
 800b066:	4603      	mov	r3, r0
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS1;		// 角加速度
 800b06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b06c:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= st_info.f_trgtAngleS;		// 目標角速度
 800b074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b076:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800b078:	f04f 0300 	mov.w	r3, #0
 800b07c:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1;			// 目標角度
 800b07e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b080:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	8a9b      	ldrh	r3, [r3, #20]
 800b086:	4618      	mov	r0, r3
 800b088:	f7f5 fa74 	bl	8000574 <__aeabi_i2d>
 800b08c:	a38c      	add	r3, pc, #560	; (adr r3, 800b2c0 <MOT_goSla+0x488>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f7f5 fad9 	bl	8000648 <__aeabi_dmul>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4610      	mov	r0, r2
 800b09c:	4619      	mov	r1, r3
 800b09e:	f7f5 fdcb 	bl	8000c38 <__aeabi_d2f>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fa fbf2 	bl	8005894 <CTRL_setData>
//	printf("trgtangleS %5.2f\n\r",st_data.f_trgtAngleS);
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d133      	bne.n	800b124 <MOT_goSla+0x2ec>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b0bc:	e00d      	b.n	800b0da <MOT_goSla+0x2a2>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b0be:	f7fc fddd 	bl	8007c7c <SYS_isOutOfCtrl>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <MOT_goSla+0x2a2>
				CTRL_stop();
 800b0c8:	f7fa fb50 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f7fc fe07 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	f7fc fe04 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b0d8:	e03a      	b.n	800b150 <MOT_goSla+0x318>
		while( ( Get_NowAngle() > st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b0da:	f7fa fadf 	bl	800569c <Get_NowAngle>
 800b0de:	eeb0 7a40 	vmov.f32	s14, s0
 800b0e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800b0e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ee:	dd2f      	ble.n	800b150 <MOT_goSla+0x318>
 800b0f0:	f7fa fa9a 	bl	8005628 <Get_NowDist>
 800b0f4:	eeb0 7a40 	vmov.f32	s14, s0
 800b0f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b104:	d4db      	bmi.n	800b0be <MOT_goSla+0x286>
 800b106:	e023      	b.n	800b150 <MOT_goSla+0x318>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800b108:	f7fc fdb8 	bl	8007c7c <SYS_isOutOfCtrl>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d008      	beq.n	800b124 <MOT_goSla+0x2ec>
				CTRL_stop();
 800b112:	f7fa fb2b 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b116:	2000      	movs	r0, #0
 800b118:	f7fc fde2 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b11c:	2001      	movs	r0, #1
 800b11e:	f7fc fddf 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b122:	e015      	b.n	800b150 <MOT_goSla+0x318>
		while( ( Get_NowAngle() < st_info.f_angle1 ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b124:	f7fa faba 	bl	800569c <Get_NowAngle>
 800b128:	eeb0 7a40 	vmov.f32	s14, s0
 800b12c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800b130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b138:	d50a      	bpl.n	800b150 <MOT_goSla+0x318>
 800b13a:	f7fa fa75 	bl	8005628 <Get_NowDist>
 800b13e:	eeb0 7a40 	vmov.f32	s14, s0
 800b142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14e:	d4db      	bmi.n	800b108 <MOT_goSla+0x2d0>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  const  */
	/* ------ */
	st_data.en_type			= CTRL_CONST_SURA;
 800b150:	230c      	movs	r3, #12
 800b152:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800b15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b15c:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800b15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b160:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * p_sla->us_accAngvelTime * 0.001;
 800b162:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b166:	f7f5 fa17 	bl	8000598 <__aeabi_f2d>
 800b16a:	4604      	mov	r4, r0
 800b16c:	460d      	mov	r5, r1
 800b16e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	8a9b      	ldrh	r3, [r3, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b182:	ee17 0a90 	vmov	r0, s15
 800b186:	f7f5 fa07 	bl	8000598 <__aeabi_f2d>
 800b18a:	a34d      	add	r3, pc, #308	; (adr r3, 800b2c0 <MOT_goSla+0x488>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa5a 	bl	8000648 <__aeabi_dmul>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	4620      	mov	r0, r4
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 f89e 	bl	80002dc <__adddf3>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f7f5 fd46 	bl	8000c38 <__aeabi_d2f>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;		// 等速距離
 800b1b0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b1b4:	f7f5 f9f0 	bl	8000598 <__aeabi_f2d>
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	8adb      	ldrh	r3, [r3, #22]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	8a9b      	ldrh	r3, [r3, #20]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d8:	ee17 0a90 	vmov	r0, s15
 800b1dc:	f7f5 f9dc 	bl	8000598 <__aeabi_f2d>
 800b1e0:	a337      	add	r3, pc, #220	; (adr r3, 800b2c0 <MOT_goSla+0x488>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 fa2f 	bl	8000648 <__aeabi_dmul>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 f873 	bl	80002dc <__adddf3>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7f5 fd1b 	bl	8000c38 <__aeabi_d2f>
 800b202:	4603      	mov	r3, r0
 800b204:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800b206:	f04f 0300 	mov.w	r3, #0
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800b20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS	= st_info.f_trgtAngleS;		// 目標角速度
 800b210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b212:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1;			// 現在角度
 800b214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle1_2;		// 目標角度
 800b218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b21a:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= p_sla->us_constAngvelTime * 0.001;		// [msec] → [sec]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	8adb      	ldrh	r3, [r3, #22]
 800b220:	4618      	mov	r0, r3
 800b222:	f7f5 f9a7 	bl	8000574 <__aeabi_i2d>
 800b226:	a326      	add	r3, pc, #152	; (adr r3, 800b2c0 <MOT_goSla+0x488>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 fa0c 	bl	8000648 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4610      	mov	r0, r2
 800b236:	4619      	mov	r1, r3
 800b238:	f7f5 fcfe 	bl	8000c38 <__aeabi_d2f>
 800b23c:	4603      	mov	r3, r0
 800b23e:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800b240:	f107 030c 	add.w	r3, r7, #12
 800b244:	4618      	mov	r0, r3
 800b246:	f7fa fb25 	bl	8005894 <CTRL_setData>

	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d13a      	bne.n	800b2cc <MOT_goSla+0x494>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800b256:	e00d      	b.n	800b274 <MOT_goSla+0x43c>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b258:	f7fc fd10 	bl	8007c7c <SYS_isOutOfCtrl>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d008      	beq.n	800b274 <MOT_goSla+0x43c>
				CTRL_stop();
 800b262:	f7fa fa83 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b266:	2000      	movs	r0, #0
 800b268:	f7fc fd3a 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b26c:	2001      	movs	r0, #1
 800b26e:	f7fc fd37 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b272:	e041      	b.n	800b2f8 <MOT_goSla+0x4c0>
		while( ( Get_NowAngle() > st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800b274:	f7fa fa12 	bl	800569c <Get_NowAngle>
 800b278:	eeb0 7a40 	vmov.f32	s14, s0
 800b27c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800b280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b288:	dd36      	ble.n	800b2f8 <MOT_goSla+0x4c0>
 800b28a:	f7fa f9cd 	bl	8005628 <Get_NowDist>
 800b28e:	eeb0 7a40 	vmov.f32	s14, s0
 800b292:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29e:	d4db      	bmi.n	800b258 <MOT_goSla+0x420>
 800b2a0:	e02a      	b.n	800b2f8 <MOT_goSla+0x4c0>
			}				// 途中で制御不能になった
		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800b2a2:	f7fc fceb 	bl	8007c7c <SYS_isOutOfCtrl>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00f      	beq.n	800b2cc <MOT_goSla+0x494>
				CTRL_stop();
 800b2ac:	f7fa fa5e 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	f7fc fd15 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	f7fc fd12 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b2bc:	e01c      	b.n	800b2f8 <MOT_goSla+0x4c0>
 800b2be:	bf00      	nop
 800b2c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b2c4:	3f50624d 	.word	0x3f50624d
 800b2c8:	20000f18 	.word	0x20000f18
		while( ( Get_NowAngle() < st_info.f_angle1_2 ) && ( Get_NowDist() < st_data.f_dist ) ){		// 指定角度＋距離到達待ち
 800b2cc:	f7fa f9e6 	bl	800569c <Get_NowAngle>
 800b2d0:	eeb0 7a40 	vmov.f32	s14, s0
 800b2d4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800b2d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e0:	d50a      	bpl.n	800b2f8 <MOT_goSla+0x4c0>
 800b2e2:	f7fa f9a1 	bl	8005628 <Get_NowDist>
 800b2e6:	eeb0 7a40 	vmov.f32	s14, s0
 800b2ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b2ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f6:	d4d4      	bmi.n	800b2a2 <MOT_goSla+0x46a>
//	log_in(0);
//	log_in(f_NowAngle);
	/* ------ */
	/*  dec  */
	/* ------ */
	st_data.en_type			= CTRL_DEC_SURA;
 800b2f8:	230d      	movs	r3, #13
 800b2fa:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800b2fc:	f04f 0300 	mov.w	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800b302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b304:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800b306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b308:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime ) * 0.001;
 800b30a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b30e:	f7f5 f943 	bl	8000598 <__aeabi_f2d>
 800b312:	4604      	mov	r4, r0
 800b314:	460d      	mov	r5, r1
 800b316:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	8adb      	ldrh	r3, [r3, #22]
 800b31e:	461a      	mov	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	8a9b      	ldrh	r3, [r3, #20]
 800b324:	4413      	add	r3, r2
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b332:	ee17 0a90 	vmov	r0, s15
 800b336:	f7f5 f92f 	bl	8000598 <__aeabi_f2d>
 800b33a:	a3ac      	add	r3, pc, #688	; (adr r3, 800b5ec <MOT_goSla+0x7b4>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 f982 	bl	8000648 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f4 ffc6 	bl	80002dc <__adddf3>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4610      	mov	r0, r2
 800b356:	4619      	mov	r1, r3
 800b358:	f7f5 fc6e 	bl	8000c38 <__aeabi_d2f>
 800b35c:	4603      	mov	r3, r0
 800b35e:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2 ) * 0.001;		// 減速距離
 800b360:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b364:	f7f5 f918 	bl	8000598 <__aeabi_f2d>
 800b368:	4604      	mov	r4, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	8adb      	ldrh	r3, [r3, #22]
 800b374:	461a      	mov	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	8a9b      	ldrh	r3, [r3, #20]
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	4413      	add	r3, r2
 800b37e:	ee07 3a90 	vmov	s15, r3
 800b382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	ee17 0a90 	vmov	r0, s15
 800b38e:	f7f5 f903 	bl	8000598 <__aeabi_f2d>
 800b392:	a396      	add	r3, pc, #600	; (adr r3, 800b5ec <MOT_goSla+0x7b4>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f5 f956 	bl	8000648 <__aeabi_dmul>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f4 ff9a 	bl	80002dc <__adddf3>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	f7f5 fc42 	bl	8000c38 <__aeabi_d2f>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= st_info.f_accAngleS3;		// 角加速度
 800b3b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= st_info.f_trgtAngleS;		// 現在角速度
 800b3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;				// 目標角速度
 800b3c0:	f04f 0300 	mov.w	r3, #0
 800b3c4:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= st_info.f_angle1_2;		// 現在角度
 800b3c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3c8:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= st_info.f_angle;			// 目標角度
 800b3ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3cc:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time			= p_sla->us_accAngvelTime * 0.001;			// [msec] → [sec]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	8a9b      	ldrh	r3, [r3, #20]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f5 f8ce 	bl	8000574 <__aeabi_i2d>
 800b3d8:	a384      	add	r3, pc, #528	; (adr r3, 800b5ec <MOT_goSla+0x7b4>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 f933 	bl	8000648 <__aeabi_dmul>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f7f5 fc25 	bl	8000c38 <__aeabi_d2f>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fa fa4c 	bl	8005894 <CTRL_setData>
//	LED = LED_ALL_ON;
	if( IS_R_SLA( en_type ) == TRUE ) {		// -方向
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d133      	bne.n	800b470 <MOT_goSla+0x638>
		while( ( Get_NowAngle() > st_info.f_angle ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b408:	e00d      	b.n	800b426 <MOT_goSla+0x5ee>
			if( SYS_isOutOfCtrl() == TRUE ){
 800b40a:	f7fc fc37 	bl	8007c7c <SYS_isOutOfCtrl>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d008      	beq.n	800b426 <MOT_goSla+0x5ee>
				CTRL_stop();
 800b414:	f7fa f9aa 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b418:	2000      	movs	r0, #0
 800b41a:	f7fc fc61 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b41e:	2001      	movs	r0, #1
 800b420:	f7fc fc5e 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b424:	e03a      	b.n	800b49c <MOT_goSla+0x664>
		while( ( Get_NowAngle() > st_info.f_angle ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b426:	f7fa f939 	bl	800569c <Get_NowAngle>
 800b42a:	eeb0 7a40 	vmov.f32	s14, s0
 800b42e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800b432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b43a:	dd2f      	ble.n	800b49c <MOT_goSla+0x664>
 800b43c:	f7fa f8f4 	bl	8005628 <Get_NowDist>
 800b440:	eeb0 7a40 	vmov.f32	s14, s0
 800b444:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b450:	d4db      	bmi.n	800b40a <MOT_goSla+0x5d2>
 800b452:	e023      	b.n	800b49c <MOT_goSla+0x664>

		}
	}
	else{
		while( ( Get_NowAngle() < st_info.f_angle ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
			if( SYS_isOutOfCtrl() == TRUE ){
 800b454:	f7fc fc12 	bl	8007c7c <SYS_isOutOfCtrl>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d008      	beq.n	800b470 <MOT_goSla+0x638>
				CTRL_stop();
 800b45e:	f7fa f985 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800b462:	2000      	movs	r0, #0
 800b464:	f7fc fc3c 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800b468:	2001      	movs	r0, #1
 800b46a:	f7fc fc39 	bl	8007ce0 <DCM_brakeMot>
				break;
 800b46e:	e015      	b.n	800b49c <MOT_goSla+0x664>
		while( ( Get_NowAngle() < st_info.f_angle ) && ( Get_NowDist() < st_data.f_dist ) ){			// 指定角度＋距離到達待ち
 800b470:	f7fa f914 	bl	800569c <Get_NowAngle>
 800b474:	eeb0 7a40 	vmov.f32	s14, s0
 800b478:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800b47c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b484:	d50a      	bpl.n	800b49c <MOT_goSla+0x664>
 800b486:	f7fa f8cf 	bl	8005628 <Get_NowDist>
 800b48a:	eeb0 7a40 	vmov.f32	s14, s0
 800b48e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49a:	d4db      	bmi.n	800b454 <MOT_goSla+0x61c>

//	LED_on(LED1);
	/* ------------------------ */
	/*  escape  */
	/* ------------------------ */
	st_data.en_type			= CTRL_EXIT_SURA;
 800b49c:	230e      	movs	r3, #14
 800b49e:	733b      	strb	r3, [r7, #12]
	st_data.f_acc			= 0;						// 加速度指定
 800b4a0:	f04f 0300 	mov.w	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
	st_data.f_now			= st_info.f_now;			// 現在速度
 800b4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a8:	61bb      	str	r3, [r7, #24]
	st_data.f_trgt			= st_info.f_now;			// 目標速度
 800b4aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ac:	61fb      	str	r3, [r7, #28]
	st_data.f_nowDist		= f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2  ) * 0.001;
 800b4ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800b4b2:	f7f5 f871 	bl	8000598 <__aeabi_f2d>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	8adb      	ldrh	r3, [r3, #22]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	8a9b      	ldrh	r3, [r3, #20]
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	4413      	add	r3, r2
 800b4cc:	ee07 3a90 	vmov	s15, r3
 800b4d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d8:	ee17 0a90 	vmov	r0, s15
 800b4dc:	f7f5 f85c 	bl	8000598 <__aeabi_f2d>
 800b4e0:	a342      	add	r3, pc, #264	; (adr r3, 800b5ec <MOT_goSla+0x7b4>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	f7f5 f8af 	bl	8000648 <__aeabi_dmul>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f4 fef3 	bl	80002dc <__adddf3>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4610      	mov	r0, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f7f5 fb9b 	bl	8000c38 <__aeabi_d2f>
 800b502:	4603      	mov	r3, r0
 800b504:	623b      	str	r3, [r7, #32]
	st_data.f_dist			= f_escapeLen + f_entryLen + st_info.f_now * ( p_sla->us_constAngvelTime + p_sla->us_accAngvelTime * 2 ) * 0.001;	// スラローム後の前進距離
 800b506:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b50a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b512:	ee17 0a90 	vmov	r0, s15
 800b516:	f7f5 f83f 	bl	8000598 <__aeabi_f2d>
 800b51a:	4604      	mov	r4, r0
 800b51c:	460d      	mov	r5, r1
 800b51e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	8adb      	ldrh	r3, [r3, #22]
 800b526:	461a      	mov	r2, r3
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	8a9b      	ldrh	r3, [r3, #20]
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	4413      	add	r3, r2
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53c:	ee17 0a90 	vmov	r0, s15
 800b540:	f7f5 f82a 	bl	8000598 <__aeabi_f2d>
 800b544:	a329      	add	r3, pc, #164	; (adr r3, 800b5ec <MOT_goSla+0x7b4>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7f5 f87d 	bl	8000648 <__aeabi_dmul>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f4 fec1 	bl	80002dc <__adddf3>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4610      	mov	r0, r2
 800b560:	4619      	mov	r1, r3
 800b562:	f7f5 fb69 	bl	8000c38 <__aeabi_d2f>
 800b566:	4603      	mov	r3, r0
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
	st_data.f_accAngleS		= 0;						// 角加速度
 800b56a:	f04f 0300 	mov.w	r3, #0
 800b56e:	62bb      	str	r3, [r7, #40]	; 0x28
	st_data.f_nowAngleS		= 0;						// 現在角速度
 800b570:	f04f 0300 	mov.w	r3, #0
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
	st_data.f_trgtAngleS		= 0;						// 目標角度
 800b576:	f04f 0300 	mov.w	r3, #0
 800b57a:	633b      	str	r3, [r7, #48]	; 0x30
	st_data.f_nowAngle		= 0;						// 現在角度
 800b57c:	f04f 0300 	mov.w	r3, #0
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
	st_data.f_angle			= 0;						// 目標角度
 800b582:	f04f 0300 	mov.w	r3, #0
 800b586:	63bb      	str	r3, [r7, #56]	; 0x38
	st_data.f_time 			= 0;						// 目標時間 [sec] ← 指定しない
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	613b      	str	r3, [r7, #16]
	CTRL_setData( &st_data );							// データセット
 800b58e:	f107 030c 	add.w	r3, r7, #12
 800b592:	4618      	mov	r0, r3
 800b594:	f7fa f97e 	bl	8005894 <CTRL_setData>
//	LED =LED_ALL_OFF;
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800b598:	e00d      	b.n	800b5b6 <MOT_goSla+0x77e>
		if( SYS_isOutOfCtrl() == TRUE ){
 800b59a:	f7fc fb6f 	bl	8007c7c <SYS_isOutOfCtrl>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d008      	beq.n	800b5b6 <MOT_goSla+0x77e>
			CTRL_stop();
 800b5a4:	f7fa f8e2 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f7fc fb99 	bl	8007ce0 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	f7fc fb96 	bl	8007ce0 <DCM_brakeMot>
			break;
 800b5b4:	e00a      	b.n	800b5cc <MOT_goSla+0x794>
	while( Get_NowDist() < ( st_data.f_dist ) ){	// 指定距離到達待ち
 800b5b6:	f7fa f837 	bl	8005628 <Get_NowDist>
 800b5ba:	eeb0 7a40 	vmov.f32	s14, s0
 800b5be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b5c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ca:	d4e6      	bmi.n	800b59a <MOT_goSla+0x762>
		}				// 途中で制御不能になった
	}
//	LED_off(LED1);
//	log_in(f_NowAngle);
	f_MotNowSpeed = st_info.f_now;			// 現在速度更新
 800b5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ce:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <MOT_goSla+0x7b0>)
 800b5d0:	6013      	str	r3, [r2, #0]
//	LED =LED_ALL_OFF;
	GYRO_endErrChkAngle();					// エラー検出終了
 800b5d2:	f7fc feb3 	bl	800833c <GYRO_endErrChkAngle>
	CTRL_clrNowData();
 800b5d6:	f7fa f923 	bl	8005820 <CTRL_clrNowData>

}
 800b5da:	bf00      	nop
 800b5dc:	3788      	adds	r7, #136	; 0x88
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	f3af 8000 	nop.w
 800b5e8:	2000029c 	.word	0x2000029c
 800b5ec:	d2f1a9fc 	.word	0xd2f1a9fc
 800b5f0:	3f50624d 	.word	0x3f50624d

0800b5f4 <MOT_setWallEdgeType>:
		}
	}
}

void MOT_setWallEdgeType( enMOT_WALL_EDGE_TYPE en_type )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	71fb      	strb	r3, [r7, #7]
	en_WallEdge = en_type;
 800b5fe:	4a06      	ldr	r2, [pc, #24]	; (800b618 <MOT_setWallEdgeType+0x24>)
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	7013      	strb	r3, [r2, #0]
	bl_IsWallEdge = FALSE;			// 非検知
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <MOT_setWallEdgeType+0x28>)
 800b606:	2200      	movs	r2, #0
 800b608:	701a      	strb	r2, [r3, #0]

}
 800b60a:	bf00      	nop
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	200002a8 	.word	0x200002a8
 800b61c:	200002a9 	.word	0x200002a9

0800b620 <MOT_getWallEdgeType>:

enMOT_WALL_EDGE_TYPE MOT_getWallEdgeType( void )
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
	return en_WallEdge;
 800b624:	4b03      	ldr	r3, [pc, #12]	; (800b634 <MOT_getWallEdgeType+0x14>)
 800b626:	781b      	ldrb	r3, [r3, #0]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	200002a8 	.word	0x200002a8

0800b638 <MOT_setWallEdge>:

void MOT_setWallEdge( bool bl_val )
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	4603      	mov	r3, r0
 800b640:	71fb      	strb	r3, [r7, #7]
	bl_IsWallEdge = bl_val;
 800b642:	4a04      	ldr	r2, [pc, #16]	; (800b654 <MOT_setWallEdge+0x1c>)
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	7013      	strb	r3, [r2, #0]

}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	200002a9 	.word	0x200002a9

0800b658 <MOT_setWallEdgeDist>:

bool MOT_setWallEdgeDist( void )
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
	float f_addDist;

//	f_addDist = Get_NowDist() + MOT_WALL_EDGE_DIST;		// 旋回開始位置

	/* 壁の切れ目を検知していない */
	if( ( bl_IsWallEdge == FALSE ) || ( en_WallEdge == MOT_WALL_EDGE_NONE ) ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800b65e:	4b17      	ldr	r3, [pc, #92]	; (800b6bc <MOT_setWallEdgeDist+0x64>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	f083 0301 	eor.w	r3, r3, #1
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <MOT_setWallEdgeDist+0x1c>
 800b66c:	4b14      	ldr	r3, [pc, #80]	; (800b6c0 <MOT_setWallEdgeDist+0x68>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <MOT_setWallEdgeDist+0x20>
		return FALSE;
 800b674:	2300      	movs	r3, #0
 800b676:	e01a      	b.n	800b6ae <MOT_setWallEdgeDist+0x56>
	}

	/* 多く走る必要がある */
	if( f_addDist > st_Info.f_dist ){
 800b678:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <MOT_setWallEdgeDist+0x6c>)
 800b67a:	edd3 7a06 	vldr	s15, [r3, #24]
 800b67e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68a:	dd09      	ble.n	800b6a0 <MOT_setWallEdgeDist+0x48>

		f_WallEdgeAddDist = f_addDist - st_Info.f_dist;
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <MOT_setWallEdgeDist+0x6c>)
 800b68e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b692:	ed97 7a01 	vldr	s14, [r7, #4]
 800b696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <MOT_setWallEdgeDist+0x70>)
 800b69c:	edc3 7a00 	vstr	s15, [r3]
	}

	/* 壁の切れ目補正の変数を初期化 */
	en_WallEdge   = MOT_WALL_EDGE_NONE;		// 壁の切れ目タイプ
 800b6a0:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <MOT_setWallEdgeDist+0x68>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
	bl_IsWallEdge = FALSE;					// 壁の切れ目検知
 800b6a6:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <MOT_setWallEdgeDist+0x64>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800b6ac:	2301      	movs	r3, #1
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	200002a9 	.word	0x200002a9
 800b6c0:	200002a8 	.word	0x200002a8
 800b6c4:	20005df0 	.word	0x20005df0
 800b6c8:	200002ac 	.word	0x200002ac

0800b6cc <MOT_setWallEdgeDist_LoopWait>:
bool MOT_setWallEdgeDist_LoopWait( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
	SetLED(0x11);
 800b6d0:	2011      	movs	r0, #17
 800b6d2:	f7f6 fc79 	bl	8001fc8 <SetLED>
	/* 壁の切れ目を検知していない */
	if( bl_IsWallEdge == FALSE ){		// 壁切れ設定されていないか、検出していない場合は処理を抜ける
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <MOT_setWallEdgeDist_LoopWait+0x28>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f083 0301 	eor.w	r3, r3, #1
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <MOT_setWallEdgeDist_LoopWait+0x1c>

		return FALSE;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e003      	b.n	800b6f0 <MOT_setWallEdgeDist_LoopWait+0x24>
	}

	f_WallEdgeAddDist = MOT_WALL_EDGE_DIST;		// 旋回開始位置
 800b6e8:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <MOT_setWallEdgeDist_LoopWait+0x2c>)
 800b6ea:	4a04      	ldr	r2, [pc, #16]	; (800b6fc <MOT_setWallEdgeDist_LoopWait+0x30>)
 800b6ec:	601a      	str	r2, [r3, #0]

	return TRUE;
 800b6ee:	2301      	movs	r3, #1
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200002a9 	.word	0x200002a9
 800b6f8:	200002ac 	.word	0x200002ac
 800b6fc:	3d23d70a 	.word	0x3d23d70a

0800b700 <BAT_Pol>:

uint16_t	us_BatLvAve = 4095;							// バッテリ平均値（AD変換の最大値で初期化）


void BAT_Pol( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
	static uint16_t 	us_batLv[5] = { 4095, 4095, 4095, 4095, 4095 };
	static uint8_t		i = 0;

	us_batLv[4] = us_batLv[3];
 800b704:	4b2d      	ldr	r3, [pc, #180]	; (800b7bc <BAT_Pol+0xbc>)
 800b706:	88da      	ldrh	r2, [r3, #6]
 800b708:	4b2c      	ldr	r3, [pc, #176]	; (800b7bc <BAT_Pol+0xbc>)
 800b70a:	811a      	strh	r2, [r3, #8]
	us_batLv[3] = us_batLv[2];
 800b70c:	4b2b      	ldr	r3, [pc, #172]	; (800b7bc <BAT_Pol+0xbc>)
 800b70e:	889a      	ldrh	r2, [r3, #4]
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <BAT_Pol+0xbc>)
 800b712:	80da      	strh	r2, [r3, #6]
	us_batLv[2] = us_batLv[1];
 800b714:	4b29      	ldr	r3, [pc, #164]	; (800b7bc <BAT_Pol+0xbc>)
 800b716:	885a      	ldrh	r2, [r3, #2]
 800b718:	4b28      	ldr	r3, [pc, #160]	; (800b7bc <BAT_Pol+0xbc>)
 800b71a:	809a      	strh	r2, [r3, #4]
	us_batLv[1] = us_batLv[0];
 800b71c:	4b27      	ldr	r3, [pc, #156]	; (800b7bc <BAT_Pol+0xbc>)
 800b71e:	881a      	ldrh	r2, [r3, #0]
 800b720:	4b26      	ldr	r3, [pc, #152]	; (800b7bc <BAT_Pol+0xbc>)
 800b722:	805a      	strh	r2, [r3, #2]

	us_batLv[0] = GetBatVal();
 800b724:	f7f6 f8a0 	bl	8001868 <GetBatVal>
 800b728:	4603      	mov	r3, r0
 800b72a:	461a      	mov	r2, r3
 800b72c:	4b23      	ldr	r3, [pc, #140]	; (800b7bc <BAT_Pol+0xbc>)
 800b72e:	801a      	strh	r2, [r3, #0]

	us_BatLvAve = ( us_batLv[0] + us_batLv[1] + us_batLv[2] + us_batLv[3] + us_batLv[4] ) / 5;
 800b730:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <BAT_Pol+0xbc>)
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	461a      	mov	r2, r3
 800b736:	4b21      	ldr	r3, [pc, #132]	; (800b7bc <BAT_Pol+0xbc>)
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	4413      	add	r3, r2
 800b73c:	4a1f      	ldr	r2, [pc, #124]	; (800b7bc <BAT_Pol+0xbc>)
 800b73e:	8892      	ldrh	r2, [r2, #4]
 800b740:	4413      	add	r3, r2
 800b742:	4a1e      	ldr	r2, [pc, #120]	; (800b7bc <BAT_Pol+0xbc>)
 800b744:	88d2      	ldrh	r2, [r2, #6]
 800b746:	4413      	add	r3, r2
 800b748:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <BAT_Pol+0xbc>)
 800b74a:	8912      	ldrh	r2, [r2, #8]
 800b74c:	4413      	add	r3, r2
 800b74e:	4a1c      	ldr	r2, [pc, #112]	; (800b7c0 <BAT_Pol+0xc0>)
 800b750:	fb82 1203 	smull	r1, r2, r2, r3
 800b754:	1052      	asrs	r2, r2, #1
 800b756:	17db      	asrs	r3, r3, #31
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	4b19      	ldr	r3, [pc, #100]	; (800b7c4 <BAT_Pol+0xc4>)
 800b75e:	801a      	strh	r2, [r3, #0]


	if( us_BatLvAve < BAT_LOW ) {
 800b760:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <BAT_Pol+0xc4>)
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800b768:	4293      	cmp	r3, r2
 800b76a:	d803      	bhi.n	800b774 <BAT_Pol+0x74>
		SetBatLED(0);
 800b76c:	2000      	movs	r0, #0
 800b76e:	f7f6 fc83 	bl	8002078 <SetBatLED>
		i++;
	}
	else{
		SetBatLED(1);
	}
}
 800b772:	e021      	b.n	800b7b8 <BAT_Pol+0xb8>
	else if( us_BatLvAve < BAT_GOOD ) {
 800b774:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <BAT_Pol+0xc4>)
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	f640 32f3 	movw	r2, #3059	; 0xbf3
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d818      	bhi.n	800b7b2 <BAT_Pol+0xb2>
		if( i>=100){
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <BAT_Pol+0xc8>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b63      	cmp	r3, #99	; 0x63
 800b786:	d906      	bls.n	800b796 <BAT_Pol+0x96>
			SetBatLED(1);
 800b788:	2001      	movs	r0, #1
 800b78a:	f7f6 fc75 	bl	8002078 <SetBatLED>
			i=0;
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <BAT_Pol+0xc8>)
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e006      	b.n	800b7a4 <BAT_Pol+0xa4>
		else if(i>=50){
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <BAT_Pol+0xc8>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b31      	cmp	r3, #49	; 0x31
 800b79c:	d902      	bls.n	800b7a4 <BAT_Pol+0xa4>
			SetBatLED(0);
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f7f6 fc6a 	bl	8002078 <SetBatLED>
		i++;
 800b7a4:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <BAT_Pol+0xc8>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <BAT_Pol+0xc8>)
 800b7ae:	701a      	strb	r2, [r3, #0]
}
 800b7b0:	e002      	b.n	800b7b8 <BAT_Pol+0xb8>
		SetBatLED(1);
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	f7f6 fc60 	bl	8002078 <SetBatLED>
}
 800b7b8:	bf00      	nop
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20000010 	.word	0x20000010
 800b7c0:	66666667 	.word	0x66666667
 800b7c4:	2000000e 	.word	0x2000000e
 800b7c8:	200002b0 	.word	0x200002b0
 800b7cc:	00000000 	.word	0x00000000

0800b7d0 <get_battLv>:

float get_battLv(void){
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
	return (float)us_BatLvAve*(1.990+1.005)/1.990/4095.000*3.300;
 800b7d4:	4b22      	ldr	r3, [pc, #136]	; (800b860 <get_battLv+0x90>)
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	ee07 3a90 	vmov	s15, r3
 800b7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e0:	ee17 0a90 	vmov	r0, s15
 800b7e4:	f7f4 fed8 	bl	8000598 <__aeabi_f2d>
 800b7e8:	a315      	add	r3, pc, #84	; (adr r3, 800b840 <get_battLv+0x70>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7f4 ff2b 	bl	8000648 <__aeabi_dmul>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	a313      	add	r3, pc, #76	; (adr r3, 800b848 <get_battLv+0x78>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f7f5 f84c 	bl	800089c <__aeabi_ddiv>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4610      	mov	r0, r2
 800b80a:	4619      	mov	r1, r3
 800b80c:	a310      	add	r3, pc, #64	; (adr r3, 800b850 <get_battLv+0x80>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f7f5 f843 	bl	800089c <__aeabi_ddiv>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4610      	mov	r0, r2
 800b81c:	4619      	mov	r1, r3
 800b81e:	a30e      	add	r3, pc, #56	; (adr r3, 800b858 <get_battLv+0x88>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 ff10 	bl	8000648 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4610      	mov	r0, r2
 800b82e:	4619      	mov	r1, r3
 800b830:	f7f5 fa02 	bl	8000c38 <__aeabi_d2f>
 800b834:	4603      	mov	r3, r0
 800b836:	ee07 3a90 	vmov	s15, r3
}
 800b83a:	eeb0 0a67 	vmov.f32	s0, s15
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	8f5c28f6 	.word	0x8f5c28f6
 800b844:	4007f5c2 	.word	0x4007f5c2
 800b848:	3d70a3d7 	.word	0x3d70a3d7
 800b84c:	3fffd70a 	.word	0x3fffd70a
 800b850:	00000000 	.word	0x00000000
 800b854:	40affe00 	.word	0x40affe00
 800b858:	66666666 	.word	0x66666666
 800b85c:	400a6666 	.word	0x400a6666
 800b860:	2000000e 	.word	0x2000000e

0800b864 <DIST_init>:
stDIST_SEN		st_sen[DIST_SEN_NUM];					// 距離センサ
stDIST_FRONT_SEN		st_senF[DIST_SEN_NUM];


void DIST_init( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
	memset( st_sen, 0, sizeof(st_sen) );				// 距離センサ(全センサ共通)
 800b868:	2238      	movs	r2, #56	; 0x38
 800b86a:	2100      	movs	r1, #0
 800b86c:	4820      	ldr	r0, [pc, #128]	; (800b8f0 <DIST_init+0x8c>)
 800b86e:	f007 fd5b 	bl	8013328 <memset>
	st_sen[DIST_SEN_R_FRONT].s_ref       = R_FRONT_REF;
 800b872:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <DIST_init+0x8c>)
 800b874:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b878:	80da      	strh	r2, [r3, #6]
	st_sen[DIST_SEN_L_FRONT].s_ref       = L_FRONT_REF;
 800b87a:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <DIST_init+0x8c>)
 800b87c:	f44f 721b 	mov.w	r2, #620	; 0x26c
 800b880:	829a      	strh	r2, [r3, #20]
	st_sen[DIST_SEN_R_SIDE].s_ref        = R_SIDE_REF;
 800b882:	4b1b      	ldr	r3, [pc, #108]	; (800b8f0 <DIST_init+0x8c>)
 800b884:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b888:	845a      	strh	r2, [r3, #34]	; 0x22
	st_sen[DIST_SEN_L_SIDE].s_ref        = L_SIDE_REF;
 800b88a:	4b19      	ldr	r3, [pc, #100]	; (800b8f0 <DIST_init+0x8c>)
 800b88c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b890:	861a      	strh	r2, [r3, #48]	; 0x30
	st_sen[DIST_SEN_R_FRONT].s_limit     = R_FRONT_WALL;
 800b892:	4b17      	ldr	r3, [pc, #92]	; (800b8f0 <DIST_init+0x8c>)
 800b894:	224b      	movs	r2, #75	; 0x4b
 800b896:	809a      	strh	r2, [r3, #4]
	st_sen[DIST_SEN_L_FRONT].s_limit     = L_FRONT_WALL;
 800b898:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <DIST_init+0x8c>)
 800b89a:	224b      	movs	r2, #75	; 0x4b
 800b89c:	825a      	strh	r2, [r3, #18]
	st_sen[DIST_SEN_R_SIDE].s_limit      = R_SIDE_WALL;
 800b89e:	4b14      	ldr	r3, [pc, #80]	; (800b8f0 <DIST_init+0x8c>)
 800b8a0:	225f      	movs	r2, #95	; 0x5f
 800b8a2:	841a      	strh	r2, [r3, #32]
	st_sen[DIST_SEN_L_SIDE].s_limit      = L_SIDE_WALL;
 800b8a4:	4b12      	ldr	r3, [pc, #72]	; (800b8f0 <DIST_init+0x8c>)
 800b8a6:	2255      	movs	r2, #85	; 0x55
 800b8a8:	85da      	strh	r2, [r3, #46]	; 0x2e
	st_senF[DIST_SEN_R_FRONT].s_skewErr1	= R_FRONT_SKEW_ERR1;
 800b8aa:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <DIST_init+0x90>)
 800b8ac:	2250      	movs	r2, #80	; 0x50
 800b8ae:	805a      	strh	r2, [r3, #2]
	st_senF[DIST_SEN_L_FRONT].s_skewErr1	= L_FRONT_SKEW_ERR1;
 800b8b0:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <DIST_init+0x90>)
 800b8b2:	2246      	movs	r2, #70	; 0x46
 800b8b4:	815a      	strh	r2, [r3, #10]
	st_senF[DIST_SEN_R_FRONT].s_skewErr2	= R_FRONT_SKEW_ERR2;
 800b8b6:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <DIST_init+0x90>)
 800b8b8:	22c0      	movs	r2, #192	; 0xc0
 800b8ba:	809a      	strh	r2, [r3, #4]
	st_senF[DIST_SEN_L_FRONT].s_skewErr2	= L_FRONT_SKEW_ERR2;
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <DIST_init+0x90>)
 800b8be:	22a0      	movs	r2, #160	; 0xa0
 800b8c0:	819a      	strh	r2, [r3, #12]
	st_senF[DIST_SEN_R_FRONT].s_skewErr3	= R_FRONT_SKEW_ERR3;
 800b8c2:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <DIST_init+0x90>)
 800b8c4:	22fa      	movs	r2, #250	; 0xfa
 800b8c6:	80da      	strh	r2, [r3, #6]
	st_senF[DIST_SEN_L_FRONT].s_skewErr3	= L_FRONT_SKEW_ERR3;
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <DIST_init+0x90>)
 800b8ca:	22fa      	movs	r2, #250	; 0xfa
 800b8cc:	81da      	strh	r2, [r3, #14]
	st_sen[DIST_SEN_R_FRONT].s_noCtrl = R_FRONT_NOCTRL;
 800b8ce:	4b08      	ldr	r3, [pc, #32]	; (800b8f0 <DIST_init+0x8c>)
 800b8d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8d4:	819a      	strh	r2, [r3, #12]
	st_sen[DIST_SEN_L_FRONT].s_noCtrl = L_FRONT_NOCTRL;
 800b8d6:	4b06      	ldr	r3, [pc, #24]	; (800b8f0 <DIST_init+0x8c>)
 800b8d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b8dc:	835a      	strh	r2, [r3, #26]
	st_sen[DIST_SEN_R_FRONT].s_ctrl = R_FRONT_CTRL;
 800b8de:	4b04      	ldr	r3, [pc, #16]	; (800b8f0 <DIST_init+0x8c>)
 800b8e0:	22a0      	movs	r2, #160	; 0xa0
 800b8e2:	815a      	strh	r2, [r3, #10]
	st_sen[DIST_SEN_L_FRONT].s_ctrl = L_FRONT_CTRL;
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <DIST_init+0x8c>)
 800b8e6:	22a0      	movs	r2, #160	; 0xa0
 800b8e8:	831a      	strh	r2, [r3, #24]

}
 800b8ea:	bf00      	nop
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20005e54 	.word	0x20005e54
 800b8f4:	20005e34 	.word	0x20005e34

0800b8f8 <DIST_getNowVal>:

int16_t DIST_getNowVal( enDIST_SEN_ID en_id )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
	return st_sen[en_id].s_now;
 800b902:	79fa      	ldrb	r2, [r7, #7]
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <DIST_getNowVal+0x28>)
 800b906:	4613      	mov	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	1a9b      	subs	r3, r3, r2
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	440b      	add	r3, r1
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	b21b      	sxth	r3, r3
}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	20005e54 	.word	0x20005e54
 800b924:	00000000 	.word	0x00000000

0800b928 <DIST_getErr>:


void DIST_getErr( int32_t* p_err )
{
 800b928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
	volatile int16_t	s_threshold_R = 0;		// 右センサの閾値
 800b932:	2300      	movs	r3, #0
 800b934:	81bb      	strh	r3, [r7, #12]
	volatile int16_t	s_threshold_L = 0;		// 左センサの閾値
 800b936:	2300      	movs	r3, #0
 800b938:	817b      	strh	r3, [r7, #10]
	/* ---------- */
	/*  右壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_old;
 800b93a:	4ba5      	ldr	r3, [pc, #660]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b93c:	8b9a      	ldrh	r2, [r3, #28]
 800b93e:	4ba4      	ldr	r3, [pc, #656]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b940:	8bdb      	ldrh	r3, [r3, #30]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800b948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b94c:	f113 0f19 	cmn.w	r3, #25
 800b950:	db03      	blt.n	800b95a <DIST_getErr+0x32>
 800b952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b956:	2b19      	cmp	r3, #25
 800b958:	dd06      	ble.n	800b968 <DIST_getErr+0x40>
	){
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800b95a:	4b9d      	ldr	r3, [pc, #628]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b95c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b95e:	3323      	adds	r3, #35	; 0x23
 800b960:	b29b      	uxth	r3, r3
 800b962:	b21b      	sxth	r3, r3
 800b964:	81bb      	strh	r3, [r7, #12]
 800b966:	e003      	b.n	800b970 <DIST_getErr+0x48>
	}
	else{
		s_threshold_R = st_sen[DIST_SEN_R_SIDE].s_limit;		// 通常通り
 800b968:	4b99      	ldr	r3, [pc, #612]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b96a:	8c1b      	ldrh	r3, [r3, #32]
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	81bb      	strh	r3, [r7, #12]
	/* ---------- */
	/*  左壁制御  */
	/* ---------- */
	/* 壁の切れ目対策 */
	// 急激にセンサの値が変化した場合は、壁の有無の基準値を閾値に変更する
	s_temp = st_sen[DIST_SEN_L_SIDE].s_now - st_sen[DIST_SEN_L_SIDE].s_old;
 800b970:	4b97      	ldr	r3, [pc, #604]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b972:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b974:	4b96      	ldr	r3, [pc, #600]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	81fb      	strh	r3, [r7, #14]
	if( ( s_temp < -1 * DIST_NO_WALL_DIV_FILTER ) || ( DIST_NO_WALL_DIV_FILTER < s_temp )
 800b97e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b982:	f113 0f19 	cmn.w	r3, #25
 800b986:	db03      	blt.n	800b990 <DIST_getErr+0x68>
 800b988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b98c:	2b19      	cmp	r3, #25
 800b98e:	dd06      	ble.n	800b99e <DIST_getErr+0x76>
	){
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_ref + DIST_REF_UP;		// 基準値＋αを壁の存在する閾値にする
 800b990:	4b8f      	ldr	r3, [pc, #572]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b992:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b994:	3323      	adds	r3, #35	; 0x23
 800b996:	b29b      	uxth	r3, r3
 800b998:	b21b      	sxth	r3, r3
 800b99a:	817b      	strh	r3, [r7, #10]
 800b99c:	e003      	b.n	800b9a6 <DIST_getErr+0x7e>
	}
	else{
		s_threshold_L = st_sen[DIST_SEN_L_SIDE].s_limit;		// 通常通り
 800b99e:	4b8c      	ldr	r3, [pc, #560]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	817b      	strh	r3, [r7, #10]
	}

	/* ------------ */
	/*  制御値算出  */
	/* ------------ */
	*p_err = 0;		// クリア
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]

	/* 前壁がものすごく近い時 */
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800b9ac:	4b88      	ldr	r3, [pc, #544]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9ae:	881a      	ldrh	r2, [r3, #0]
 800b9b0:	4b87      	ldr	r3, [pc, #540]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9b2:	899b      	ldrh	r3, [r3, #12]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d909      	bls.n	800b9cc <DIST_getErr+0xa4>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_noCtrl )
 800b9b8:	4b85      	ldr	r3, [pc, #532]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9ba:	89da      	ldrh	r2, [r3, #14]
 800b9bc:	4b84      	ldr	r3, [pc, #528]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9be:	8b5b      	ldrh	r3, [r3, #26]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_noCtrl ) &&
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <DIST_getErr+0xa4>
	){
//		printf("[Val]%6d 前壁がものすごい近い 	\n\r", *p_err);
		*p_err = 0;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e05a      	b.n	800ba82 <DIST_getErr+0x15a>
	}
	/* 前壁 */
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800b9cc:	4b80      	ldr	r3, [pc, #512]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9ce:	881a      	ldrh	r2, [r3, #0]
 800b9d0:	4b7f      	ldr	r3, [pc, #508]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9d2:	895b      	ldrh	r3, [r3, #10]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d915      	bls.n	800ba04 <DIST_getErr+0xdc>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_ctrl )
 800b9d8:	4b7d      	ldr	r3, [pc, #500]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9da:	89da      	ldrh	r2, [r3, #14]
 800b9dc:	4b7c      	ldr	r3, [pc, #496]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9de:	8b1b      	ldrh	r3, [r3, #24]
	else if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_ctrl ) &&
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d90f      	bls.n	800ba04 <DIST_getErr+0xdc>
	){
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800b9e4:	4b7a      	ldr	r3, [pc, #488]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9e6:	89db      	ldrh	r3, [r3, #14]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4b79      	ldr	r3, [pc, #484]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9ec:	8a9b      	ldrh	r3, [r3, #20]
 800b9ee:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_R_FRONT].s_now - st_sen[DIST_SEN_R_FRONT].s_ref );
 800b9f0:	4b77      	ldr	r3, [pc, #476]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4b76      	ldr	r3, [pc, #472]	; (800bbd0 <DIST_getErr+0x2a8>)
 800b9f8:	88db      	ldrh	r3, [r3, #6]
 800b9fa:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_L_FRONT].s_now - st_sen[DIST_SEN_L_FRONT].s_ref ) -
 800b9fc:	1ad2      	subs	r2, r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	e03e      	b.n	800ba82 <DIST_getErr+0x15a>
//		printf("[Val]%6d 前壁制御 	\n\r", *p_err);
	}
	/* 右壁と左壁あり */
	else if( ( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ) && ( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now )
 800ba04:	89bb      	ldrh	r3, [r7, #12]
 800ba06:	b21b      	sxth	r3, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b71      	ldr	r3, [pc, #452]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba0c:	8b9b      	ldrh	r3, [r3, #28]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	da16      	bge.n	800ba40 <DIST_getErr+0x118>
 800ba12:	897b      	ldrh	r3, [r7, #10]
 800ba14:	b21b      	sxth	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	4b6d      	ldr	r3, [pc, #436]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	da0f      	bge.n	800ba40 <DIST_getErr+0x118>
	){
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800ba20:	4b6b      	ldr	r3, [pc, #428]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba22:	8b9b      	ldrh	r3, [r3, #28]
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b6a      	ldr	r3, [pc, #424]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba28:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ba2a:	1ad2      	subs	r2, r2, r3
				 ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now );
 800ba2c:	4b68      	ldr	r3, [pc, #416]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba30:	4619      	mov	r1, r3
 800ba32:	4b67      	ldr	r3, [pc, #412]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba36:	1acb      	subs	r3, r1, r3
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) +
 800ba38:	441a      	add	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e020      	b.n	800ba82 <DIST_getErr+0x15a>
//		printf("[Val]%6d 両壁制御 	\n\r", *p_err);
	}
	/* 右壁あり */
	else if( s_threshold_R < st_sen[DIST_SEN_R_SIDE].s_now ){
 800ba40:	89bb      	ldrh	r3, [r7, #12]
 800ba42:	b21b      	sxth	r3, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b62      	ldr	r3, [pc, #392]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba48:	8b9b      	ldrh	r3, [r3, #28]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	da09      	bge.n	800ba62 <DIST_getErr+0x13a>
		*p_err = ( st_sen[DIST_SEN_R_SIDE].s_now - st_sen[DIST_SEN_R_SIDE].s_ref ) * 2;
 800ba4e:	4b60      	ldr	r3, [pc, #384]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba50:	8b9b      	ldrh	r3, [r3, #28]
 800ba52:	461a      	mov	r2, r3
 800ba54:	4b5e      	ldr	r3, [pc, #376]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	005a      	lsls	r2, r3, #1
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	e00f      	b.n	800ba82 <DIST_getErr+0x15a>
//		printf("[Val]%6d 右壁制御 	\n\r", *p_err);
	}
	/* 左壁あり */
	else if( s_threshold_L < st_sen[DIST_SEN_L_SIDE].s_now ){
 800ba62:	897b      	ldrh	r3, [r7, #10]
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	461a      	mov	r2, r3
 800ba68:	4b59      	ldr	r3, [pc, #356]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	da08      	bge.n	800ba82 <DIST_getErr+0x15a>
		*p_err = ( st_sen[DIST_SEN_L_SIDE].s_ref - st_sen[DIST_SEN_L_SIDE].s_now ) * 2;
 800ba70:	4b57      	ldr	r3, [pc, #348]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba72:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b56      	ldr	r3, [pc, #344]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	005a      	lsls	r2, r3, #1
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	601a      	str	r2, [r3, #0]
//		printf("[Val]%6d 左壁制御 	\n\r", *p_err);
	}

	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800ba82:	4b53      	ldr	r3, [pc, #332]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba84:	89db      	ldrh	r3, [r3, #14]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f4 fd74 	bl	8000574 <__aeabi_i2d>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	4b4f      	ldr	r3, [pc, #316]	; (800bbd0 <DIST_getErr+0x2a8>)
 800ba92:	8a5b      	ldrh	r3, [r3, #18]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7f4 fd6d 	bl	8000574 <__aeabi_i2d>
 800ba9a:	a34b      	add	r3, pc, #300	; (adr r3, 800bbc8 <DIST_getErr+0x2a0>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fefc 	bl	800089c <__aeabi_ddiv>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4620      	mov	r0, r4
 800baaa:	4629      	mov	r1, r5
 800baac:	f7f5 f85c 	bl	8000b68 <__aeabi_dcmpgt>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d051      	beq.n	800bb5a <DIST_getErr+0x232>
		(st_sen[DIST_SEN_R_FRONT].s_now <st_sen[DIST_SEN_R_FRONT].s_limit/0.7)){
 800bab6:	4b46      	ldr	r3, [pc, #280]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7f4 fd5a 	bl	8000574 <__aeabi_i2d>
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	4b42      	ldr	r3, [pc, #264]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bac6:	889b      	ldrh	r3, [r3, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7f4 fd53 	bl	8000574 <__aeabi_i2d>
 800bace:	a33e      	add	r3, pc, #248	; (adr r3, 800bbc8 <DIST_getErr+0x2a0>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f7f4 fee2 	bl	800089c <__aeabi_ddiv>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
	if((st_sen[DIST_SEN_L_FRONT].s_now >st_sen[DIST_SEN_L_FRONT].s_limit/0.7)&&
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f5 f824 	bl	8000b2c <__aeabi_dcmplt>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d037      	beq.n	800bb5a <DIST_getErr+0x232>
			*p_err += 2*(st_sen[DIST_SEN_L_FRONT].s_limit/0.7-st_sen[DIST_SEN_L_FRONT].s_now);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f4 fd40 	bl	8000574 <__aeabi_i2d>
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	4b35      	ldr	r3, [pc, #212]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bafa:	8a5b      	ldrh	r3, [r3, #18]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f4 fd39 	bl	8000574 <__aeabi_i2d>
 800bb02:	a331      	add	r3, pc, #196	; (adr r3, 800bbc8 <DIST_getErr+0x2a0>)
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	f7f4 fec8 	bl	800089c <__aeabi_ddiv>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4690      	mov	r8, r2
 800bb12:	4699      	mov	r9, r3
 800bb14:	4b2e      	ldr	r3, [pc, #184]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bb16:	89db      	ldrh	r3, [r3, #14]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f4 fd2b 	bl	8000574 <__aeabi_i2d>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4640      	mov	r0, r8
 800bb24:	4649      	mov	r1, r9
 800bb26:	f7f4 fbd7 	bl	80002d8 <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4619      	mov	r1, r3
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	f7f4 fbd1 	bl	80002dc <__adddf3>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fbcb 	bl	80002dc <__adddf3>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f7f5 f82b 	bl	8000ba8 <__aeabi_d2iz>
 800bb52:	4602      	mov	r2, r0
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
	}

}
 800bb58:	e071      	b.n	800bc3e <DIST_getErr+0x316>
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f4 fd08 	bl	8000574 <__aeabi_i2d>
 800bb64:	4604      	mov	r4, r0
 800bb66:	460d      	mov	r5, r1
 800bb68:	4b19      	ldr	r3, [pc, #100]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bb6a:	889b      	ldrh	r3, [r3, #4]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7f4 fd01 	bl	8000574 <__aeabi_i2d>
 800bb72:	a315      	add	r3, pc, #84	; (adr r3, 800bbc8 <DIST_getErr+0x2a0>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fe90 	bl	800089c <__aeabi_ddiv>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4620      	mov	r0, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7f4 fff0 	bl	8000b68 <__aeabi_dcmpgt>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d100      	bne.n	800bb90 <DIST_getErr+0x268>
}
 800bb8e:	e056      	b.n	800bc3e <DIST_getErr+0x316>
		(st_sen[DIST_SEN_L_FRONT].s_now <st_sen[DIST_SEN_L_FRONT].s_limit/0.7)){
 800bb90:	4b0f      	ldr	r3, [pc, #60]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bb92:	89db      	ldrh	r3, [r3, #14]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f4 fced 	bl	8000574 <__aeabi_i2d>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	4b0c      	ldr	r3, [pc, #48]	; (800bbd0 <DIST_getErr+0x2a8>)
 800bba0:	8a5b      	ldrh	r3, [r3, #18]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f4 fce6 	bl	8000574 <__aeabi_i2d>
 800bba8:	a307      	add	r3, pc, #28	; (adr r3, 800bbc8 <DIST_getErr+0x2a0>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fe75 	bl	800089c <__aeabi_ddiv>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
	}else if((st_sen[DIST_SEN_R_FRONT].s_now >st_sen[DIST_SEN_R_FRONT].s_limit/0.7)&&
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 ffb7 	bl	8000b2c <__aeabi_dcmplt>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d107      	bne.n	800bbd4 <DIST_getErr+0x2ac>
}
 800bbc4:	e03b      	b.n	800bc3e <DIST_getErr+0x316>
 800bbc6:	bf00      	nop
 800bbc8:	66666666 	.word	0x66666666
 800bbcc:	3fe66666 	.word	0x3fe66666
 800bbd0:	20005e54 	.word	0x20005e54
			*p_err += 2*(st_sen[DIST_SEN_R_FRONT].s_now-st_sen[DIST_SEN_R_FRONT].s_limit/0.7);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f4 fccb 	bl	8000574 <__aeabi_i2d>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	4b1b      	ldr	r3, [pc, #108]	; (800bc50 <DIST_getErr+0x328>)
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7f4 fcc4 	bl	8000574 <__aeabi_i2d>
 800bbec:	4680      	mov	r8, r0
 800bbee:	4689      	mov	r9, r1
 800bbf0:	4b17      	ldr	r3, [pc, #92]	; (800bc50 <DIST_getErr+0x328>)
 800bbf2:	889b      	ldrh	r3, [r3, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f4 fcbd 	bl	8000574 <__aeabi_i2d>
 800bbfa:	a313      	add	r3, pc, #76	; (adr r3, 800bc48 <DIST_getErr+0x320>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fe4c 	bl	800089c <__aeabi_ddiv>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4640      	mov	r0, r8
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	f7f4 fb64 	bl	80002d8 <__aeabi_dsub>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4610      	mov	r0, r2
 800bc16:	4619      	mov	r1, r3
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	f7f4 fb5e 	bl	80002dc <__adddf3>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fb58 	bl	80002dc <__adddf3>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4610      	mov	r0, r2
 800bc32:	4619      	mov	r1, r3
 800bc34:	f7f4 ffb8 	bl	8000ba8 <__aeabi_d2iz>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bc48:	66666666 	.word	0x66666666
 800bc4c:	3fe66666 	.word	0x3fe66666
 800bc50:	20005e54 	.word	0x20005e54

0800bc54 <DIST_getErrSkew>:

void DIST_getErrSkew( int32_t* p_err )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	*p_err =0;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]

	/* 進行方向に壁が存在する場合によける動作を行う */
	if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr3 ){
 800bc62:	4b22      	ldr	r3, [pc, #136]	; (800bcec <DIST_getErrSkew+0x98>)
 800bc64:	881a      	ldrh	r2, [r3, #0]
 800bc66:	4b22      	ldr	r3, [pc, #136]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bc68:	88db      	ldrh	r3, [r3, #6]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d904      	bls.n	800bc78 <DIST_getErrSkew+0x24>
		*p_err = 300;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bc74:	601a      	str	r2, [r3, #0]
//		printf("左前が近い  [NOW]%d > [ERR1]%d", st_sen[DIST_SEN_L_FRONT].s_now, st_senF[DIST_SEN_L_FRONT].s_skewErr1 );
	}
	else{
	}

}
 800bc76:	e032      	b.n	800bcde <DIST_getErrSkew+0x8a>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr3 ){
 800bc78:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <DIST_getErrSkew+0x98>)
 800bc7a:	89da      	ldrh	r2, [r3, #14]
 800bc7c:	4b1c      	ldr	r3, [pc, #112]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bc7e:	89db      	ldrh	r3, [r3, #14]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <DIST_getErrSkew+0x38>
		*p_err = -300;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a1b      	ldr	r2, [pc, #108]	; (800bcf4 <DIST_getErrSkew+0xa0>)
 800bc88:	601a      	str	r2, [r3, #0]
}
 800bc8a:	e028      	b.n	800bcde <DIST_getErrSkew+0x8a>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr2 ){
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <DIST_getErrSkew+0x98>)
 800bc8e:	881a      	ldrh	r2, [r3, #0]
 800bc90:	4b17      	ldr	r3, [pc, #92]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bc92:	889b      	ldrh	r3, [r3, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d903      	bls.n	800bca0 <DIST_getErrSkew+0x4c>
		*p_err = 200;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	22c8      	movs	r2, #200	; 0xc8
 800bc9c:	601a      	str	r2, [r3, #0]
}
 800bc9e:	e01e      	b.n	800bcde <DIST_getErrSkew+0x8a>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr2 ){
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <DIST_getErrSkew+0x98>)
 800bca2:	89da      	ldrh	r2, [r3, #14]
 800bca4:	4b12      	ldr	r3, [pc, #72]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bca6:	899b      	ldrh	r3, [r3, #12]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d904      	bls.n	800bcb6 <DIST_getErrSkew+0x62>
		*p_err = -200;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 800bcb2:	601a      	str	r2, [r3, #0]
}
 800bcb4:	e013      	b.n	800bcde <DIST_getErrSkew+0x8a>
	else if( st_sen[DIST_SEN_R_FRONT].s_now > st_senF[DIST_SEN_R_FRONT].s_skewErr1 ){
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <DIST_getErrSkew+0x98>)
 800bcb8:	881a      	ldrh	r2, [r3, #0]
 800bcba:	4b0d      	ldr	r3, [pc, #52]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bcbc:	885b      	ldrh	r3, [r3, #2]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d903      	bls.n	800bcca <DIST_getErrSkew+0x76>
		*p_err = 100;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2264      	movs	r2, #100	; 0x64
 800bcc6:	601a      	str	r2, [r3, #0]
}
 800bcc8:	e009      	b.n	800bcde <DIST_getErrSkew+0x8a>
	else if( st_sen[DIST_SEN_L_FRONT].s_now > st_senF[DIST_SEN_L_FRONT].s_skewErr1 ){
 800bcca:	4b08      	ldr	r3, [pc, #32]	; (800bcec <DIST_getErrSkew+0x98>)
 800bccc:	89da      	ldrh	r2, [r3, #14]
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <DIST_getErrSkew+0x9c>)
 800bcd0:	895b      	ldrh	r3, [r3, #10]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d903      	bls.n	800bcde <DIST_getErrSkew+0x8a>
		*p_err = -100;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800bcdc:	601a      	str	r2, [r3, #0]
}
 800bcde:	bf00      	nop
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	20005e54 	.word	0x20005e54
 800bcf0:	20005e34 	.word	0x20005e34
 800bcf4:	fffffed4 	.word	0xfffffed4

0800bcf8 <DIST_Pol_FL>:

void DIST_Pol_FL( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
	st_sen[DIST_SEN_L_FRONT].s_offset = GetSensor_FL();
 800bcfe:	f7f5 fd33 	bl	8001768 <GetSensor_FL>
 800bd02:	4603      	mov	r3, r0
 800bd04:	461a      	mov	r2, r3
 800bd06:	4b17      	ldr	r3, [pc, #92]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd08:	82da      	strh	r2, [r3, #22]

	Set_SenFL(1);
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	f7f6 f9e6 	bl	80020dc <Set_SenFL>

	for(uint16_t i=0;i<1000;i++);
 800bd10:	2300      	movs	r3, #0
 800bd12:	80fb      	strh	r3, [r7, #6]
 800bd14:	e002      	b.n	800bd1c <DIST_Pol_FL+0x24>
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	80fb      	strh	r3, [r7, #6]
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd22:	d3f8      	bcc.n	800bd16 <DIST_Pol_FL+0x1e>

	st_sen[DIST_SEN_L_FRONT].s_old = st_sen[DIST_SEN_L_FRONT].s_now;
 800bd24:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd26:	89da      	ldrh	r2, [r3, #14]
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd2a:	821a      	strh	r2, [r3, #16]
	st_sen[DIST_SEN_L_FRONT].s_now = GetSensor_FL()- st_sen[DIST_SEN_L_FRONT].s_offset;
 800bd2c:	f7f5 fd1c 	bl	8001768 <GetSensor_FL>
 800bd30:	4603      	mov	r3, r0
 800bd32:	461a      	mov	r2, r3
 800bd34:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd36:	8adb      	ldrh	r3, [r3, #22]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd3e:	81da      	strh	r2, [r3, #14]
	if(st_sen[DIST_SEN_L_FRONT].s_now>(65535/2))st_sen[DIST_SEN_L_FRONT].s_now =0;
 800bd40:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd42:	89db      	ldrh	r3, [r3, #14]
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da02      	bge.n	800bd50 <DIST_Pol_FL+0x58>
 800bd4a:	4b06      	ldr	r3, [pc, #24]	; (800bd64 <DIST_Pol_FL+0x6c>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	81da      	strh	r2, [r3, #14]
	ADC3_clearEOS();
 800bd50:	f7f5 fd22 	bl	8001798 <ADC3_clearEOS>

	Set_SenFL(0);
 800bd54:	2000      	movs	r0, #0
 800bd56:	f7f6 f9c1 	bl	80020dc <Set_SenFL>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20005e54 	.word	0x20005e54

0800bd68 <DIST_Pol_FR>:

void DIST_Pol_FR( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_FRONT].s_offset = GetSensor_FR();
 800bd6e:	f7f5 fd61 	bl	8001834 <GetSensor_FR>
 800bd72:	4603      	mov	r3, r0
 800bd74:	461a      	mov	r2, r3
 800bd76:	4b17      	ldr	r3, [pc, #92]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bd78:	811a      	strh	r2, [r3, #8]

	Set_SenFR(1);
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	f7f6 f9f6 	bl	800216c <Set_SenFR>

	for(uint16_t i=0;i<1000;i++);
 800bd80:	2300      	movs	r3, #0
 800bd82:	80fb      	strh	r3, [r7, #6]
 800bd84:	e002      	b.n	800bd8c <DIST_Pol_FR+0x24>
 800bd86:	88fb      	ldrh	r3, [r7, #6]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	80fb      	strh	r3, [r7, #6]
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd92:	d3f8      	bcc.n	800bd86 <DIST_Pol_FR+0x1e>

	st_sen[DIST_SEN_R_FRONT].s_old = st_sen[DIST_SEN_R_FRONT].s_now;
 800bd94:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bd96:	881a      	ldrh	r2, [r3, #0]
 800bd98:	4b0e      	ldr	r3, [pc, #56]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bd9a:	805a      	strh	r2, [r3, #2]
	st_sen[DIST_SEN_R_FRONT].s_now = GetSensor_FR()- st_sen[DIST_SEN_R_FRONT].s_offset;
 800bd9c:	f7f5 fd4a 	bl	8001834 <GetSensor_FR>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bda6:	891b      	ldrh	r3, [r3, #8]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bdae:	801a      	strh	r2, [r3, #0]
	if(st_sen[DIST_SEN_R_FRONT].s_now>(65535/2))st_sen[DIST_SEN_R_FRONT].s_now =0;
 800bdb0:	4b08      	ldr	r3, [pc, #32]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b21b      	sxth	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	da02      	bge.n	800bdc0 <DIST_Pol_FR+0x58>
 800bdba:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <DIST_Pol_FR+0x6c>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	801a      	strh	r2, [r3, #0]
	ADC2_clearEOS();
 800bdc0:	f7f5 fcf4 	bl	80017ac <ADC2_clearEOS>

	Set_SenFR(0);
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f7f6 f9d1 	bl	800216c <Set_SenFR>

}
 800bdca:	bf00      	nop
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20005e54 	.word	0x20005e54

0800bdd8 <DIST_Pol_SL>:


void DIST_Pol_SL( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_L_SIDE].s_offset = GetSensor_SL();
 800bdde:	f7f5 fcf7 	bl	80017d0 <GetSensor_SL>
 800bde2:	4603      	mov	r3, r0
 800bde4:	461a      	mov	r2, r3
 800bde6:	4b17      	ldr	r3, [pc, #92]	; (800be44 <DIST_Pol_SL+0x6c>)
 800bde8:	865a      	strh	r2, [r3, #50]	; 0x32

	Set_SenSL(1);
 800bdea:	2001      	movs	r0, #1
 800bdec:	f7f6 f98d 	bl	800210a <Set_SenSL>

	for(uint16_t i=0;i<1000;i++);
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	80fb      	strh	r3, [r7, #6]
 800bdf4:	e002      	b.n	800bdfc <DIST_Pol_SL+0x24>
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	80fb      	strh	r3, [r7, #6]
 800bdfc:	88fb      	ldrh	r3, [r7, #6]
 800bdfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be02:	d3f8      	bcc.n	800bdf6 <DIST_Pol_SL+0x1e>

	st_sen[DIST_SEN_L_SIDE].s_old = st_sen[DIST_SEN_L_SIDE].s_now;
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be06:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800be08:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be0a:	859a      	strh	r2, [r3, #44]	; 0x2c
	st_sen[DIST_SEN_L_SIDE].s_now = GetSensor_SL()- st_sen[DIST_SEN_L_SIDE].s_offset;
 800be0c:	f7f5 fce0 	bl	80017d0 <GetSensor_SL>
 800be10:	4603      	mov	r3, r0
 800be12:	461a      	mov	r2, r3
 800be14:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	4b09      	ldr	r3, [pc, #36]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be1e:	855a      	strh	r2, [r3, #42]	; 0x2a
	if(st_sen[DIST_SEN_L_SIDE].s_now>(65535/2))st_sen[DIST_SEN_L_SIDE].s_now =0;
 800be20:	4b08      	ldr	r3, [pc, #32]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be24:	b21b      	sxth	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	da02      	bge.n	800be30 <DIST_Pol_SL+0x58>
 800be2a:	4b06      	ldr	r3, [pc, #24]	; (800be44 <DIST_Pol_SL+0x6c>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	855a      	strh	r2, [r3, #42]	; 0x2a
	ADC1_clearEOS();
 800be30:	f7f5 fcc6 	bl	80017c0 <ADC1_clearEOS>

	Set_SenSL(0);
 800be34:	2000      	movs	r0, #0
 800be36:	f7f6 f968 	bl	800210a <Set_SenSL>

}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20005e54 	.word	0x20005e54

0800be48 <DIST_Pol_SR>:

void DIST_Pol_SR( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0

	st_sen[DIST_SEN_R_SIDE].s_offset = GetSensor_SR();
 800be4e:	f7f5 fcd8 	bl	8001802 <GetSensor_SR>
 800be52:	4603      	mov	r3, r0
 800be54:	461a      	mov	r2, r3
 800be56:	4b16      	ldr	r3, [pc, #88]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be58:	849a      	strh	r2, [r3, #36]	; 0x24

	Set_SenSR(1);
 800be5a:	2001      	movs	r0, #1
 800be5c:	f7f6 f96c 	bl	8002138 <Set_SenSR>

	for(uint16_t i=0;i<1000;i++);
 800be60:	2300      	movs	r3, #0
 800be62:	80fb      	strh	r3, [r7, #6]
 800be64:	e002      	b.n	800be6c <DIST_Pol_SR+0x24>
 800be66:	88fb      	ldrh	r3, [r7, #6]
 800be68:	3301      	adds	r3, #1
 800be6a:	80fb      	strh	r3, [r7, #6]
 800be6c:	88fb      	ldrh	r3, [r7, #6]
 800be6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be72:	d3f8      	bcc.n	800be66 <DIST_Pol_SR+0x1e>

	st_sen[DIST_SEN_R_SIDE].s_old = st_sen[DIST_SEN_R_SIDE].s_now;
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be76:	8b9a      	ldrh	r2, [r3, #28]
 800be78:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be7a:	83da      	strh	r2, [r3, #30]
	st_sen[DIST_SEN_R_SIDE].s_now = GetSensor_SR()- st_sen[DIST_SEN_R_SIDE].s_offset;
 800be7c:	f7f5 fcc1 	bl	8001802 <GetSensor_SR>
 800be80:	4603      	mov	r3, r0
 800be82:	461a      	mov	r2, r3
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	4b08      	ldr	r3, [pc, #32]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be8e:	839a      	strh	r2, [r3, #28]
	if(st_sen[DIST_SEN_R_SIDE].s_now>(65535/2))st_sen[DIST_SEN_R_SIDE].s_now =0;
 800be90:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be92:	8b9b      	ldrh	r3, [r3, #28]
 800be94:	b21b      	sxth	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	da02      	bge.n	800bea0 <DIST_Pol_SR+0x58>
 800be9a:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <DIST_Pol_SR+0x68>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	839a      	strh	r2, [r3, #28]

	Set_SenSR(0);
 800bea0:	2000      	movs	r0, #0
 800bea2:	f7f6 f949 	bl	8002138 <Set_SenSR>

}
 800bea6:	bf00      	nop
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20005e54 	.word	0x20005e54

0800beb4 <Get_Sen_Nowdata>:

void Get_Sen_Nowdata(void){
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af02      	add	r7, sp, #8
	printf("FL %4d SL %4d SR %4d FR %4d\r",
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <Get_Sen_Nowdata+0x2c>)
 800bebc:	89db      	ldrh	r3, [r3, #14]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800bebe:	4619      	mov	r1, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800bec0:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <Get_Sen_Nowdata+0x2c>)
 800bec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800bec4:	461a      	mov	r2, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800bec6:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <Get_Sen_Nowdata+0x2c>)
 800bec8:	8b9b      	ldrh	r3, [r3, #28]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800beca:	4618      	mov	r0, r3
			st_sen[DIST_SEN_L_FRONT].s_now,st_sen[DIST_SEN_L_SIDE].s_now,st_sen[DIST_SEN_R_SIDE].s_now,st_sen[DIST_SEN_R_FRONT].s_now);
 800becc:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <Get_Sen_Nowdata+0x2c>)
 800bece:	881b      	ldrh	r3, [r3, #0]
	printf("FL %4d SL %4d SR %4d FR %4d\r",
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	4603      	mov	r3, r0
 800bed4:	4803      	ldr	r0, [pc, #12]	; (800bee4 <Get_Sen_Nowdata+0x30>)
 800bed6:	f008 f8a9 	bl	801402c <iprintf>
}
 800beda:	bf00      	nop
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20005e54 	.word	0x20005e54
 800bee4:	08019574 	.word	0x08019574

0800bee8 <DIST_isWall_FRONT>:

bool DIST_isWall_FRONT( void )
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800beee:	2300      	movs	r3, #0
 800bef0:	71fb      	strb	r3, [r7, #7]
//	printf("DIST_SEN_R_FRONT %5d \r\n",st_sen[DIST_SEN_R_FRONT].s_limit);
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800bef2:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <DIST_isWall_FRONT+0x34>)
 800bef4:	881a      	ldrh	r2, [r3, #0]
 800bef6:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <DIST_isWall_FRONT+0x34>)
 800bef8:	889b      	ldrh	r3, [r3, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d805      	bhi.n	800bf0a <DIST_isWall_FRONT+0x22>
		( st_sen[DIST_SEN_L_FRONT].s_now > st_sen[DIST_SEN_L_FRONT].s_limit )
 800befe:	4b07      	ldr	r3, [pc, #28]	; (800bf1c <DIST_isWall_FRONT+0x34>)
 800bf00:	89da      	ldrh	r2, [r3, #14]
 800bf02:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <DIST_isWall_FRONT+0x34>)
 800bf04:	8a5b      	ldrh	r3, [r3, #18]
	if( ( st_sen[DIST_SEN_R_FRONT].s_now > st_sen[DIST_SEN_R_FRONT].s_limit ) ||
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d901      	bls.n	800bf0e <DIST_isWall_FRONT+0x26>
	){
		bl_res = true;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	20005e54 	.word	0x20005e54

0800bf20 <DIST_isWall_R_SIDE>:

bool DIST_isWall_R_SIDE( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800bf26:	2300      	movs	r3, #0
 800bf28:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_R_SIDE].s_now > st_sen[DIST_SEN_R_SIDE].s_limit ){
 800bf2a:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <DIST_isWall_R_SIDE+0x28>)
 800bf2c:	8b9a      	ldrh	r2, [r3, #28]
 800bf2e:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <DIST_isWall_R_SIDE+0x28>)
 800bf30:	8c1b      	ldrh	r3, [r3, #32]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d901      	bls.n	800bf3a <DIST_isWall_R_SIDE+0x1a>
		bl_res = true;
 800bf36:	2301      	movs	r3, #1
 800bf38:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	20005e54 	.word	0x20005e54

0800bf4c <DIST_isWall_L_SIDE>:

bool DIST_isWall_L_SIDE( void )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
	bool bl_res 		= false;
 800bf52:	2300      	movs	r3, #0
 800bf54:	71fb      	strb	r3, [r7, #7]

	if( st_sen[DIST_SEN_L_SIDE].s_now > st_sen[DIST_SEN_L_SIDE].s_limit ){
 800bf56:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <DIST_isWall_L_SIDE+0x28>)
 800bf58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bf5a:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <DIST_isWall_L_SIDE+0x28>)
 800bf5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d901      	bls.n	800bf66 <DIST_isWall_L_SIDE+0x1a>
		bl_res = true;
 800bf62:	2301      	movs	r3, #1
 800bf64:	71fb      	strb	r3, [r7, #7]
	}

	return bl_res;
 800bf66:	79fb      	ldrb	r3, [r7, #7]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20005e54 	.word	0x20005e54

0800bf78 <MAP_refPos>:
uint16_t us_LogIndex = 0;
uint16_t us_LogWallCut[30];
uint16_t us_LogIndexWallCut = 0;

void MAP_refPos( uint8_t uc_cmd )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	4603      	mov	r3, r0
 800bf80:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_index = 0;			// テーブルのインデックス番号
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
	
	/* ------------------------------------------ */
	/*  コマンドからテーブルのインデックスを取得  */
	/* ------------------------------------------ */
	/* 直進 */
	if( ( uc_cmd <=  GO71 ) && ( uc_cmd >=  GO1) ){
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	2b47      	cmp	r3, #71	; 0x47
 800bf8a:	d805      	bhi.n	800bf98 <MAP_refPos+0x20>
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <MAP_refPos+0x20>
		
		uc_index = 14;		// st_PosDataテーブルの直進のインデックス番号
 800bf92:	230e      	movs	r3, #14
 800bf94:	73fb      	strb	r3, [r7, #15]
 800bf96:	e023      	b.n	800bfe0 <MAP_refPos+0x68>
	}
	/* 斜め直進 */
	else if( ( uc_cmd <=  NGO71 ) && ( uc_cmd >=  NGO1) ){
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2b98      	cmp	r3, #152	; 0x98
 800bf9c:	d805      	bhi.n	800bfaa <MAP_refPos+0x32>
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	2b51      	cmp	r3, #81	; 0x51
 800bfa2:	d902      	bls.n	800bfaa <MAP_refPos+0x32>
		
		uc_index = 15;		// st_PosDataテーブルの斜め直進のインデックス番号
 800bfa4:	230f      	movs	r3, #15
 800bfa6:	73fb      	strb	r3, [r7, #15]
 800bfa8:	e01a      	b.n	800bfe0 <MAP_refPos+0x68>
	}
	/* その他のコマンド */
	else{
		while(1){
			
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800bfaa:	7bfa      	ldrb	r2, [r7, #15]
 800bfac:	49c7      	ldr	r1, [pc, #796]	; (800c2cc <MAP_refPos+0x354>)
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	440b      	add	r3, r1
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	79fa      	ldrb	r2, [r7, #7]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d00e      	beq.n	800bfde <MAP_refPos+0x66>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800bfc0:	7bfa      	ldrb	r2, [r7, #15]
 800bfc2:	49c2      	ldr	r1, [pc, #776]	; (800c2cc <MAP_refPos+0x354>)
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	440b      	add	r3, r1
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2bfb      	cmp	r3, #251	; 0xfb
 800bfd2:	f000 82cb 	beq.w	800c56c <MAP_refPos+0x5f4>
			uc_index++;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
			if( st_PosData[uc_index].en_cmd == uc_cmd )      break;			// コマンド発見
 800bfdc:	e7e5      	b.n	800bfaa <MAP_refPos+0x32>
 800bfde:	bf00      	nop
		}
	}
	
		/* 位置更新 */
	switch( s_PosDir ){
 800bfe0:	4bbb      	ldr	r3, [pc, #748]	; (800c2d0 <MAP_refPos+0x358>)
 800bfe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfe6:	2b07      	cmp	r3, #7
 800bfe8:	f200 8268 	bhi.w	800c4bc <MAP_refPos+0x544>
 800bfec:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <MAP_refPos+0x7c>)
 800bfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff2:	bf00      	nop
 800bff4:	0800c015 	.word	0x0800c015
 800bff8:	0800c015 	.word	0x0800c015
 800bffc:	0800c13b 	.word	0x0800c13b
 800c000:	0800c13b 	.word	0x0800c13b
 800c004:	0800c261 	.word	0x0800c261
 800c008:	0800c261 	.word	0x0800c261
 800c00c:	0800c397 	.word	0x0800c397
 800c010:	0800c397 	.word	0x0800c397
		/* [0]北 [1]北東 */
		case 0:
		case 1:
		
			/* 直進 */
			if( uc_index == 14 ){
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	2b0e      	cmp	r3, #14
 800c018:	d132      	bne.n	800c080 <MAP_refPos+0x108>
				
				f_PosX += st_PosData[uc_index].f_x0_x1 * uc_cmd;
 800c01a:	7bfa      	ldrb	r2, [r7, #15]
 800c01c:	49ab      	ldr	r1, [pc, #684]	; (800c2cc <MAP_refPos+0x354>)
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	440b      	add	r3, r1
 800c028:	3304      	adds	r3, #4
 800c02a:	ed93 7a00 	vldr	s14, [r3]
 800c02e:	79fb      	ldrb	r3, [r7, #7]
 800c030:	ee07 3a90 	vmov	s15, r3
 800c034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c03c:	4ba5      	ldr	r3, [pc, #660]	; (800c2d4 <MAP_refPos+0x35c>)
 800c03e:	edd3 7a00 	vldr	s15, [r3]
 800c042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c046:	4ba3      	ldr	r3, [pc, #652]	; (800c2d4 <MAP_refPos+0x35c>)
 800c048:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * uc_cmd;
 800c04c:	7bfa      	ldrb	r2, [r7, #15]
 800c04e:	499f      	ldr	r1, [pc, #636]	; (800c2cc <MAP_refPos+0x354>)
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	440b      	add	r3, r1
 800c05a:	3308      	adds	r3, #8
 800c05c:	ed93 7a00 	vldr	s14, [r3]
 800c060:	79fb      	ldrb	r3, [r7, #7]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c06a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c06e:	4b9a      	ldr	r3, [pc, #616]	; (800c2d8 <MAP_refPos+0x360>)
 800c070:	edd3 7a00 	vldr	s15, [r3]
 800c074:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c078:	4b97      	ldr	r3, [pc, #604]	; (800c2d8 <MAP_refPos+0x360>)
 800c07a:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x0_x1;
				f_PosY += st_PosData[uc_index].f_y0_y1;
			}
			break;
 800c07e:	e21d      	b.n	800c4bc <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b0f      	cmp	r3, #15
 800c084:	d134      	bne.n	800c0f0 <MAP_refPos+0x178>
				f_PosX += st_PosData[uc_index].f_x0_x1 * ( uc_cmd - 81 );
 800c086:	7bfa      	ldrb	r2, [r7, #15]
 800c088:	4990      	ldr	r1, [pc, #576]	; (800c2cc <MAP_refPos+0x354>)
 800c08a:	4613      	mov	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	440b      	add	r3, r1
 800c094:	3304      	adds	r3, #4
 800c096:	ed93 7a00 	vldr	s14, [r3]
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	3b51      	subs	r3, #81	; 0x51
 800c09e:	ee07 3a90 	vmov	s15, r3
 800c0a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0aa:	4b8a      	ldr	r3, [pc, #552]	; (800c2d4 <MAP_refPos+0x35c>)
 800c0ac:	edd3 7a00 	vldr	s15, [r3]
 800c0b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0b4:	4b87      	ldr	r3, [pc, #540]	; (800c2d4 <MAP_refPos+0x35c>)
 800c0b6:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1 * ( uc_cmd - 81 );
 800c0ba:	7bfa      	ldrb	r2, [r7, #15]
 800c0bc:	4983      	ldr	r1, [pc, #524]	; (800c2cc <MAP_refPos+0x354>)
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	440b      	add	r3, r1
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	ed93 7a00 	vldr	s14, [r3]
 800c0ce:	79fb      	ldrb	r3, [r7, #7]
 800c0d0:	3b51      	subs	r3, #81	; 0x51
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0de:	4b7e      	ldr	r3, [pc, #504]	; (800c2d8 <MAP_refPos+0x360>)
 800c0e0:	edd3 7a00 	vldr	s15, [r3]
 800c0e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e8:	4b7b      	ldr	r3, [pc, #492]	; (800c2d8 <MAP_refPos+0x360>)
 800c0ea:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c0ee:	e1e5      	b.n	800c4bc <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x0_x1;
 800c0f0:	7bfa      	ldrb	r2, [r7, #15]
 800c0f2:	4976      	ldr	r1, [pc, #472]	; (800c2cc <MAP_refPos+0x354>)
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	440b      	add	r3, r1
 800c0fe:	3304      	adds	r3, #4
 800c100:	ed93 7a00 	vldr	s14, [r3]
 800c104:	4b73      	ldr	r3, [pc, #460]	; (800c2d4 <MAP_refPos+0x35c>)
 800c106:	edd3 7a00 	vldr	s15, [r3]
 800c10a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c10e:	4b71      	ldr	r3, [pc, #452]	; (800c2d4 <MAP_refPos+0x35c>)
 800c110:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y0_y1;
 800c114:	7bfa      	ldrb	r2, [r7, #15]
 800c116:	496d      	ldr	r1, [pc, #436]	; (800c2cc <MAP_refPos+0x354>)
 800c118:	4613      	mov	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	440b      	add	r3, r1
 800c122:	3308      	adds	r3, #8
 800c124:	ed93 7a00 	vldr	s14, [r3]
 800c128:	4b6b      	ldr	r3, [pc, #428]	; (800c2d8 <MAP_refPos+0x360>)
 800c12a:	edd3 7a00 	vldr	s15, [r3]
 800c12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c132:	4b69      	ldr	r3, [pc, #420]	; (800c2d8 <MAP_refPos+0x360>)
 800c134:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c138:	e1c0      	b.n	800c4bc <MAP_refPos+0x544>
		/* [2]東 [3]南東 */
		case 2:
		case 3:

			/* 直進 */
			if( uc_index == 14 ){
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b0e      	cmp	r3, #14
 800c13e:	d132      	bne.n	800c1a6 <MAP_refPos+0x22e>
				
				f_PosX += st_PosData[uc_index].f_x2_x3 * uc_cmd;
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	4962      	ldr	r1, [pc, #392]	; (800c2cc <MAP_refPos+0x354>)
 800c144:	4613      	mov	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	00db      	lsls	r3, r3, #3
 800c14c:	440b      	add	r3, r1
 800c14e:	330c      	adds	r3, #12
 800c150:	ed93 7a00 	vldr	s14, [r3]
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c15e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c162:	4b5c      	ldr	r3, [pc, #368]	; (800c2d4 <MAP_refPos+0x35c>)
 800c164:	edd3 7a00 	vldr	s15, [r3]
 800c168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c16c:	4b59      	ldr	r3, [pc, #356]	; (800c2d4 <MAP_refPos+0x35c>)
 800c16e:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * uc_cmd;
 800c172:	7bfa      	ldrb	r2, [r7, #15]
 800c174:	4955      	ldr	r1, [pc, #340]	; (800c2cc <MAP_refPos+0x354>)
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	3310      	adds	r3, #16
 800c182:	ed93 7a00 	vldr	s14, [r3]
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	ee07 3a90 	vmov	s15, r3
 800c18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c190:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c194:	4b50      	ldr	r3, [pc, #320]	; (800c2d8 <MAP_refPos+0x360>)
 800c196:	edd3 7a00 	vldr	s15, [r3]
 800c19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c19e:	4b4e      	ldr	r3, [pc, #312]	; (800c2d8 <MAP_refPos+0x360>)
 800c1a0:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x2_x3;
				f_PosY += st_PosData[uc_index].f_y2_y3;
			}
			break;
 800c1a4:	e18a      	b.n	800c4bc <MAP_refPos+0x544>
			else if( uc_index == 15 ){
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b0f      	cmp	r3, #15
 800c1aa:	d134      	bne.n	800c216 <MAP_refPos+0x29e>
				f_PosX += st_PosData[uc_index].f_x2_x3 * ( uc_cmd - 81 );
 800c1ac:	7bfa      	ldrb	r2, [r7, #15]
 800c1ae:	4947      	ldr	r1, [pc, #284]	; (800c2cc <MAP_refPos+0x354>)
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	440b      	add	r3, r1
 800c1ba:	330c      	adds	r3, #12
 800c1bc:	ed93 7a00 	vldr	s14, [r3]
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	3b51      	subs	r3, #81	; 0x51
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1d0:	4b40      	ldr	r3, [pc, #256]	; (800c2d4 <MAP_refPos+0x35c>)
 800c1d2:	edd3 7a00 	vldr	s15, [r3]
 800c1d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1da:	4b3e      	ldr	r3, [pc, #248]	; (800c2d4 <MAP_refPos+0x35c>)
 800c1dc:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3 * ( uc_cmd - 81 );
 800c1e0:	7bfa      	ldrb	r2, [r7, #15]
 800c1e2:	493a      	ldr	r1, [pc, #232]	; (800c2cc <MAP_refPos+0x354>)
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4413      	add	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	440b      	add	r3, r1
 800c1ee:	3310      	adds	r3, #16
 800c1f0:	ed93 7a00 	vldr	s14, [r3]
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	3b51      	subs	r3, #81	; 0x51
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c200:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c204:	4b34      	ldr	r3, [pc, #208]	; (800c2d8 <MAP_refPos+0x360>)
 800c206:	edd3 7a00 	vldr	s15, [r3]
 800c20a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c20e:	4b32      	ldr	r3, [pc, #200]	; (800c2d8 <MAP_refPos+0x360>)
 800c210:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c214:	e152      	b.n	800c4bc <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x2_x3;
 800c216:	7bfa      	ldrb	r2, [r7, #15]
 800c218:	492c      	ldr	r1, [pc, #176]	; (800c2cc <MAP_refPos+0x354>)
 800c21a:	4613      	mov	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4413      	add	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	440b      	add	r3, r1
 800c224:	330c      	adds	r3, #12
 800c226:	ed93 7a00 	vldr	s14, [r3]
 800c22a:	4b2a      	ldr	r3, [pc, #168]	; (800c2d4 <MAP_refPos+0x35c>)
 800c22c:	edd3 7a00 	vldr	s15, [r3]
 800c230:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c234:	4b27      	ldr	r3, [pc, #156]	; (800c2d4 <MAP_refPos+0x35c>)
 800c236:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y2_y3;
 800c23a:	7bfa      	ldrb	r2, [r7, #15]
 800c23c:	4923      	ldr	r1, [pc, #140]	; (800c2cc <MAP_refPos+0x354>)
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	440b      	add	r3, r1
 800c248:	3310      	adds	r3, #16
 800c24a:	ed93 7a00 	vldr	s14, [r3]
 800c24e:	4b22      	ldr	r3, [pc, #136]	; (800c2d8 <MAP_refPos+0x360>)
 800c250:	edd3 7a00 	vldr	s15, [r3]
 800c254:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c258:	4b1f      	ldr	r3, [pc, #124]	; (800c2d8 <MAP_refPos+0x360>)
 800c25a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c25e:	e12d      	b.n	800c4bc <MAP_refPos+0x544>
		/* [4]南 [5]南西 */
		case 4:
		case 5:

			/* 直進 */
			if( uc_index == 14 ){
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	2b0e      	cmp	r3, #14
 800c264:	d13a      	bne.n	800c2dc <MAP_refPos+0x364>
				
				f_PosX += st_PosData[uc_index].f_x4_x5 * uc_cmd;
 800c266:	7bfa      	ldrb	r2, [r7, #15]
 800c268:	4918      	ldr	r1, [pc, #96]	; (800c2cc <MAP_refPos+0x354>)
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	440b      	add	r3, r1
 800c274:	3314      	adds	r3, #20
 800c276:	ed93 7a00 	vldr	s14, [r3]
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	ee07 3a90 	vmov	s15, r3
 800c280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c284:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c288:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <MAP_refPos+0x35c>)
 800c28a:	edd3 7a00 	vldr	s15, [r3]
 800c28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c292:	4b10      	ldr	r3, [pc, #64]	; (800c2d4 <MAP_refPos+0x35c>)
 800c294:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * uc_cmd;
 800c298:	7bfa      	ldrb	r2, [r7, #15]
 800c29a:	490c      	ldr	r1, [pc, #48]	; (800c2cc <MAP_refPos+0x354>)
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	440b      	add	r3, r1
 800c2a6:	3318      	adds	r3, #24
 800c2a8:	ed93 7a00 	vldr	s14, [r3]
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	ee07 3a90 	vmov	s15, r3
 800c2b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <MAP_refPos+0x360>)
 800c2bc:	edd3 7a00 	vldr	s15, [r3]
 800c2c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2c4:	4b04      	ldr	r3, [pc, #16]	; (800c2d8 <MAP_refPos+0x360>)
 800c2c6:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x4_x5;
				f_PosY += st_PosData[uc_index].f_y4_y5;
			}
			break;
 800c2ca:	e0f7      	b.n	800c4bc <MAP_refPos+0x544>
 800c2cc:	080197ec 	.word	0x080197ec
 800c2d0:	20006f04 	.word	0x20006f04
 800c2d4:	20006f08 	.word	0x20006f08
 800c2d8:	20008fc4 	.word	0x20008fc4
			else if( uc_index == 15 ){
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b0f      	cmp	r3, #15
 800c2e0:	d134      	bne.n	800c34c <MAP_refPos+0x3d4>
				f_PosX += st_PosData[uc_index].f_x4_x5 * ( uc_cmd - 81 );
 800c2e2:	7bfa      	ldrb	r2, [r7, #15]
 800c2e4:	49a4      	ldr	r1, [pc, #656]	; (800c578 <MAP_refPos+0x600>)
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3314      	adds	r3, #20
 800c2f2:	ed93 7a00 	vldr	s14, [r3]
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	3b51      	subs	r3, #81	; 0x51
 800c2fa:	ee07 3a90 	vmov	s15, r3
 800c2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c302:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c306:	4b9d      	ldr	r3, [pc, #628]	; (800c57c <MAP_refPos+0x604>)
 800c308:	edd3 7a00 	vldr	s15, [r3]
 800c30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c310:	4b9a      	ldr	r3, [pc, #616]	; (800c57c <MAP_refPos+0x604>)
 800c312:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5 * ( uc_cmd - 81 );
 800c316:	7bfa      	ldrb	r2, [r7, #15]
 800c318:	4997      	ldr	r1, [pc, #604]	; (800c578 <MAP_refPos+0x600>)
 800c31a:	4613      	mov	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4413      	add	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	440b      	add	r3, r1
 800c324:	3318      	adds	r3, #24
 800c326:	ed93 7a00 	vldr	s14, [r3]
 800c32a:	79fb      	ldrb	r3, [r7, #7]
 800c32c:	3b51      	subs	r3, #81	; 0x51
 800c32e:	ee07 3a90 	vmov	s15, r3
 800c332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c33a:	4b91      	ldr	r3, [pc, #580]	; (800c580 <MAP_refPos+0x608>)
 800c33c:	edd3 7a00 	vldr	s15, [r3]
 800c340:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c344:	4b8e      	ldr	r3, [pc, #568]	; (800c580 <MAP_refPos+0x608>)
 800c346:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c34a:	e0b7      	b.n	800c4bc <MAP_refPos+0x544>
				f_PosX += st_PosData[uc_index].f_x4_x5;
 800c34c:	7bfa      	ldrb	r2, [r7, #15]
 800c34e:	498a      	ldr	r1, [pc, #552]	; (800c578 <MAP_refPos+0x600>)
 800c350:	4613      	mov	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	3314      	adds	r3, #20
 800c35c:	ed93 7a00 	vldr	s14, [r3]
 800c360:	4b86      	ldr	r3, [pc, #536]	; (800c57c <MAP_refPos+0x604>)
 800c362:	edd3 7a00 	vldr	s15, [r3]
 800c366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c36a:	4b84      	ldr	r3, [pc, #528]	; (800c57c <MAP_refPos+0x604>)
 800c36c:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y4_y5;
 800c370:	7bfa      	ldrb	r2, [r7, #15]
 800c372:	4981      	ldr	r1, [pc, #516]	; (800c578 <MAP_refPos+0x600>)
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	440b      	add	r3, r1
 800c37e:	3318      	adds	r3, #24
 800c380:	ed93 7a00 	vldr	s14, [r3]
 800c384:	4b7e      	ldr	r3, [pc, #504]	; (800c580 <MAP_refPos+0x608>)
 800c386:	edd3 7a00 	vldr	s15, [r3]
 800c38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c38e:	4b7c      	ldr	r3, [pc, #496]	; (800c580 <MAP_refPos+0x608>)
 800c390:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c394:	e092      	b.n	800c4bc <MAP_refPos+0x544>
		/* [6]西 [7]北西 */
		case 6:
		case 7:

			/* 直進 */
			if( uc_index == 14 ){
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b0e      	cmp	r3, #14
 800c39a:	d132      	bne.n	800c402 <MAP_refPos+0x48a>
				
				f_PosX += st_PosData[uc_index].f_x6_x7 * uc_cmd;
 800c39c:	7bfa      	ldrb	r2, [r7, #15]
 800c39e:	4976      	ldr	r1, [pc, #472]	; (800c578 <MAP_refPos+0x600>)
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	331c      	adds	r3, #28
 800c3ac:	ed93 7a00 	vldr	s14, [r3]
 800c3b0:	79fb      	ldrb	r3, [r7, #7]
 800c3b2:	ee07 3a90 	vmov	s15, r3
 800c3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3be:	4b6f      	ldr	r3, [pc, #444]	; (800c57c <MAP_refPos+0x604>)
 800c3c0:	edd3 7a00 	vldr	s15, [r3]
 800c3c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c8:	4b6c      	ldr	r3, [pc, #432]	; (800c57c <MAP_refPos+0x604>)
 800c3ca:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * uc_cmd;
 800c3ce:	7bfa      	ldrb	r2, [r7, #15]
 800c3d0:	4969      	ldr	r1, [pc, #420]	; (800c578 <MAP_refPos+0x600>)
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	440b      	add	r3, r1
 800c3dc:	3320      	adds	r3, #32
 800c3de:	ed93 7a00 	vldr	s14, [r3]
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	ee07 3a90 	vmov	s15, r3
 800c3e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f0:	4b63      	ldr	r3, [pc, #396]	; (800c580 <MAP_refPos+0x608>)
 800c3f2:	edd3 7a00 	vldr	s15, [r3]
 800c3f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3fa:	4b61      	ldr	r3, [pc, #388]	; (800c580 <MAP_refPos+0x608>)
 800c3fc:	edc3 7a00 	vstr	s15, [r3]
			/* その他のカーブ */
			else{
				f_PosX += st_PosData[uc_index].f_x6_x7;
				f_PosY += st_PosData[uc_index].f_y6_y7;
			}
			break;
 800c400:	e05b      	b.n	800c4ba <MAP_refPos+0x542>
			else if( uc_index == 15 ){
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	2b0f      	cmp	r3, #15
 800c406:	d134      	bne.n	800c472 <MAP_refPos+0x4fa>
				f_PosX += st_PosData[uc_index].f_x6_x7 * ( uc_cmd - 81 );
 800c408:	7bfa      	ldrb	r2, [r7, #15]
 800c40a:	495b      	ldr	r1, [pc, #364]	; (800c578 <MAP_refPos+0x600>)
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	331c      	adds	r3, #28
 800c418:	ed93 7a00 	vldr	s14, [r3]
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	3b51      	subs	r3, #81	; 0x51
 800c420:	ee07 3a90 	vmov	s15, r3
 800c424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c42c:	4b53      	ldr	r3, [pc, #332]	; (800c57c <MAP_refPos+0x604>)
 800c42e:	edd3 7a00 	vldr	s15, [r3]
 800c432:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c436:	4b51      	ldr	r3, [pc, #324]	; (800c57c <MAP_refPos+0x604>)
 800c438:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7 * ( uc_cmd - 81 );
 800c43c:	7bfa      	ldrb	r2, [r7, #15]
 800c43e:	494e      	ldr	r1, [pc, #312]	; (800c578 <MAP_refPos+0x600>)
 800c440:	4613      	mov	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	440b      	add	r3, r1
 800c44a:	3320      	adds	r3, #32
 800c44c:	ed93 7a00 	vldr	s14, [r3]
 800c450:	79fb      	ldrb	r3, [r7, #7]
 800c452:	3b51      	subs	r3, #81	; 0x51
 800c454:	ee07 3a90 	vmov	s15, r3
 800c458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c45c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c460:	4b47      	ldr	r3, [pc, #284]	; (800c580 <MAP_refPos+0x608>)
 800c462:	edd3 7a00 	vldr	s15, [r3]
 800c466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c46a:	4b45      	ldr	r3, [pc, #276]	; (800c580 <MAP_refPos+0x608>)
 800c46c:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c470:	e023      	b.n	800c4ba <MAP_refPos+0x542>
				f_PosX += st_PosData[uc_index].f_x6_x7;
 800c472:	7bfa      	ldrb	r2, [r7, #15]
 800c474:	4940      	ldr	r1, [pc, #256]	; (800c578 <MAP_refPos+0x600>)
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	440b      	add	r3, r1
 800c480:	331c      	adds	r3, #28
 800c482:	ed93 7a00 	vldr	s14, [r3]
 800c486:	4b3d      	ldr	r3, [pc, #244]	; (800c57c <MAP_refPos+0x604>)
 800c488:	edd3 7a00 	vldr	s15, [r3]
 800c48c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c490:	4b3a      	ldr	r3, [pc, #232]	; (800c57c <MAP_refPos+0x604>)
 800c492:	edc3 7a00 	vstr	s15, [r3]
				f_PosY += st_PosData[uc_index].f_y6_y7;
 800c496:	7bfa      	ldrb	r2, [r7, #15]
 800c498:	4937      	ldr	r1, [pc, #220]	; (800c578 <MAP_refPos+0x600>)
 800c49a:	4613      	mov	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	440b      	add	r3, r1
 800c4a4:	3320      	adds	r3, #32
 800c4a6:	ed93 7a00 	vldr	s14, [r3]
 800c4aa:	4b35      	ldr	r3, [pc, #212]	; (800c580 <MAP_refPos+0x608>)
 800c4ac:	edd3 7a00 	vldr	s15, [r3]
 800c4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b4:	4b32      	ldr	r3, [pc, #200]	; (800c580 <MAP_refPos+0x608>)
 800c4b6:	edc3 7a00 	vstr	s15, [r3]
			break;
 800c4ba:	bf00      	nop
	}
	
	/* 進行方向更新 */
	s_PosDir += st_PosData[uc_index].s_dir;
 800c4bc:	7bfa      	ldrb	r2, [r7, #15]
 800c4be:	492e      	ldr	r1, [pc, #184]	; (800c578 <MAP_refPos+0x600>)
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	440b      	add	r3, r1
 800c4ca:	3324      	adds	r3, #36	; 0x24
 800c4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	4b2c      	ldr	r3, [pc, #176]	; (800c584 <MAP_refPos+0x60c>)
 800c4d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	4413      	add	r3, r2
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	b21a      	sxth	r2, r3
 800c4e0:	4b28      	ldr	r3, [pc, #160]	; (800c584 <MAP_refPos+0x60c>)
 800c4e2:	801a      	strh	r2, [r3, #0]
	if( s_PosDir < 0 ) s_PosDir += 8;				// [0]～[7]にしたい
 800c4e4:	4b27      	ldr	r3, [pc, #156]	; (800c584 <MAP_refPos+0x60c>)
 800c4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	da09      	bge.n	800c502 <MAP_refPos+0x58a>
 800c4ee:	4b25      	ldr	r3, [pc, #148]	; (800c584 <MAP_refPos+0x60c>)
 800c4f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	b21a      	sxth	r2, r3
 800c4fc:	4b21      	ldr	r3, [pc, #132]	; (800c584 <MAP_refPos+0x60c>)
 800c4fe:	801a      	strh	r2, [r3, #0]
 800c500:	e00d      	b.n	800c51e <MAP_refPos+0x5a6>
	else if( s_PosDir > 7 ) s_PosDir -= 8;
 800c502:	4b20      	ldr	r3, [pc, #128]	; (800c584 <MAP_refPos+0x60c>)
 800c504:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c508:	2b07      	cmp	r3, #7
 800c50a:	dd08      	ble.n	800c51e <MAP_refPos+0x5a6>
 800c50c:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <MAP_refPos+0x60c>)
 800c50e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c512:	b29b      	uxth	r3, r3
 800c514:	3b08      	subs	r3, #8
 800c516:	b29b      	uxth	r3, r3
 800c518:	b21a      	sxth	r2, r3
 800c51a:	4b1a      	ldr	r3, [pc, #104]	; (800c584 <MAP_refPos+0x60c>)
 800c51c:	801a      	strh	r2, [r3, #0]
	
	f_LogPosX[us_LogIndex] = f_PosX;
 800c51e:	4b1a      	ldr	r3, [pc, #104]	; (800c588 <MAP_refPos+0x610>)
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	4618      	mov	r0, r3
 800c524:	4b15      	ldr	r3, [pc, #84]	; (800c57c <MAP_refPos+0x604>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	4918      	ldr	r1, [pc, #96]	; (800c58c <MAP_refPos+0x614>)
 800c52a:	0083      	lsls	r3, r0, #2
 800c52c:	440b      	add	r3, r1
 800c52e:	601a      	str	r2, [r3, #0]
	f_LogPosY[us_LogIndex] = f_PosY;
 800c530:	4b15      	ldr	r3, [pc, #84]	; (800c588 <MAP_refPos+0x610>)
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	4b12      	ldr	r3, [pc, #72]	; (800c580 <MAP_refPos+0x608>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4915      	ldr	r1, [pc, #84]	; (800c590 <MAP_refPos+0x618>)
 800c53c:	0083      	lsls	r3, r0, #2
 800c53e:	440b      	add	r3, r1
 800c540:	601a      	str	r2, [r3, #0]
	
	us_LogIndex++;
 800c542:	4b11      	ldr	r3, [pc, #68]	; (800c588 <MAP_refPos+0x610>)
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	3301      	adds	r3, #1
 800c548:	b29a      	uxth	r2, r3
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <MAP_refPos+0x610>)
 800c54c:	801a      	strh	r2, [r3, #0]
	us_LogIndex %= 30;
 800c54e:	4b0e      	ldr	r3, [pc, #56]	; (800c588 <MAP_refPos+0x610>)
 800c550:	881a      	ldrh	r2, [r3, #0]
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <MAP_refPos+0x61c>)
 800c554:	fba3 1302 	umull	r1, r3, r3, r2
 800c558:	0919      	lsrs	r1, r3, #4
 800c55a:	460b      	mov	r3, r1
 800c55c:	011b      	lsls	r3, r3, #4
 800c55e:	1a5b      	subs	r3, r3, r1
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	b29a      	uxth	r2, r3
 800c566:	4b08      	ldr	r3, [pc, #32]	; (800c588 <MAP_refPos+0x610>)
 800c568:	801a      	strh	r2, [r3, #0]
 800c56a:	e000      	b.n	800c56e <MAP_refPos+0x5f6>
			if( st_PosData[uc_index].en_cmd == MAP_CMD_MAX ) return;		// コマンド未発見
 800c56c:	bf00      	nop
}
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	080197ec 	.word	0x080197ec
 800c57c:	20006f08 	.word	0x20006f08
 800c580:	20008fc4 	.word	0x20008fc4
 800c584:	20006f04 	.word	0x20006f04
 800c588:	200002b2 	.word	0x200002b2
 800c58c:	20008f48 	.word	0x20008f48
 800c590:	20005e8c 	.word	0x20005e8c
 800c594:	88888889 	.word	0x88888889

0800c598 <MAP_setWallCut>:

bool MAP_setWallCut( uint8_t uc_cmd )
{
 800c598:	b590      	push	{r4, r7, lr}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_val = 0;			// 1区画前のコーナー側の壁があるか（0以外なら壁あり）
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_valPrev = 0;		// 2区画前のコーナー側の壁があるか（0以外なら壁あり）
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73bb      	strb	r3, [r7, #14]
	bool bl_wallCut = FALSE;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	737b      	strb	r3, [r7, #13]
	
	/* 位置更新 */
	switch( uc_cmd ){
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	2b9c      	cmp	r3, #156	; 0x9c
 800c5b2:	f000 822a 	beq.w	800ca0a <MAP_setWallCut+0x472>
 800c5b6:	2b9c      	cmp	r3, #156	; 0x9c
 800c5b8:	f300 843f 	bgt.w	800ce3a <MAP_setWallCut+0x8a2>
 800c5bc:	2b9b      	cmp	r3, #155	; 0x9b
 800c5be:	d009      	beq.n	800c5d4 <MAP_setWallCut+0x3c>
 800c5c0:	2b9b      	cmp	r3, #155	; 0x9b
 800c5c2:	f300 843a 	bgt.w	800ce3a <MAP_setWallCut+0x8a2>
 800c5c6:	2b4c      	cmp	r3, #76	; 0x4c
 800c5c8:	d004      	beq.n	800c5d4 <MAP_setWallCut+0x3c>
 800c5ca:	2b4d      	cmp	r3, #77	; 0x4d
 800c5cc:	f000 821d 	beq.w	800ca0a <MAP_setWallCut+0x472>
				bl_wallCut = TRUE;
			}
			break;
			
		default:
			break;
 800c5d0:	f000 bc33 	b.w	800ce3a <MAP_setWallCut+0x8a2>
			switch( s_PosDir ){
 800c5d4:	4bc1      	ldr	r3, [pc, #772]	; (800c8dc <MAP_setWallCut+0x344>)
 800c5d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5da:	2b06      	cmp	r3, #6
 800c5dc:	f200 8204 	bhi.w	800c9e8 <MAP_setWallCut+0x450>
 800c5e0:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <MAP_setWallCut+0x50>)
 800c5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e6:	bf00      	nop
 800c5e8:	0800c605 	.word	0x0800c605
 800c5ec:	0800c9e9 	.word	0x0800c9e9
 800c5f0:	0800c6f9 	.word	0x0800c6f9
 800c5f4:	0800c9e9 	.word	0x0800c9e9
 800c5f8:	0800c7ed 	.word	0x0800c7ed
 800c5fc:	0800c9e9 	.word	0x0800c9e9
 800c600:	0800c8f9 	.word	0x0800c8f9
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800c604:	4bb6      	ldr	r3, [pc, #728]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7f3 ffc5 	bl	8000598 <__aeabi_f2d>
 800c60e:	f04f 0200 	mov.w	r2, #0
 800c612:	4bb4      	ldr	r3, [pc, #720]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c614:	f7f3 fe60 	bl	80002d8 <__aeabi_dsub>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4610      	mov	r0, r2
 800c61e:	4619      	mov	r1, r3
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	f7f4 fa9e 	bl	8000b68 <__aeabi_dcmpgt>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d024      	beq.n	800c67c <MAP_setWallCut+0xe4>
 800c632:	4bab      	ldr	r3, [pc, #684]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f7f3 ffae 	bl	8000598 <__aeabi_f2d>
 800c63c:	f04f 0200 	mov.w	r2, #0
 800c640:	4ba8      	ldr	r3, [pc, #672]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c642:	f7f3 fe49 	bl	80002d8 <__aeabi_dsub>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4610      	mov	r0, r2
 800c64c:	4619      	mov	r1, r3
 800c64e:	f7f4 fad3 	bl	8000bf8 <__aeabi_d2uiz>
 800c652:	4603      	mov	r3, r0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	4618      	mov	r0, r3
 800c658:	4ba3      	ldr	r3, [pc, #652]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c65a:	edd3 7a00 	vldr	s15, [r3]
 800c65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c662:	edc7 7a00 	vstr	s15, [r7]
 800c666:	783b      	ldrb	r3, [r7, #0]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	4619      	mov	r1, r3
 800c66c:	4a9f      	ldr	r2, [pc, #636]	; (800c8ec <MAP_setWallCut+0x354>)
 800c66e:	0143      	lsls	r3, r0, #5
 800c670:	4413      	add	r3, r2
 800c672:	440b      	add	r3, r1
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800c67c:	4b98      	ldr	r3, [pc, #608]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f7f3 ff89 	bl	8000598 <__aeabi_f2d>
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	4b99      	ldr	r3, [pc, #612]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c68c:	f7f3 fe24 	bl	80002d8 <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4610      	mov	r0, r2
 800c696:	4619      	mov	r1, r3
 800c698:	f04f 0200 	mov.w	r2, #0
 800c69c:	f04f 0300 	mov.w	r3, #0
 800c6a0:	f7f4 fa62 	bl	8000b68 <__aeabi_dcmpgt>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d100      	bne.n	800c6ac <MAP_setWallCut+0x114>
					break;	
 800c6aa:	e19d      	b.n	800c9e8 <MAP_setWallCut+0x450>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x02;		// 北を向いているので東側の壁があるか
 800c6ac:	4b8c      	ldr	r3, [pc, #560]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7f3 ff71 	bl	8000598 <__aeabi_f2d>
 800c6b6:	f04f 0200 	mov.w	r2, #0
 800c6ba:	4b8d      	ldr	r3, [pc, #564]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c6bc:	f7f3 fe0c 	bl	80002d8 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	f7f4 fa96 	bl	8000bf8 <__aeabi_d2uiz>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	4b85      	ldr	r3, [pc, #532]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c6d4:	edd3 7a00 	vldr	s15, [r3]
 800c6d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6dc:	edc7 7a00 	vstr	s15, [r7]
 800c6e0:	783b      	ldrb	r3, [r7, #0]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4a81      	ldr	r2, [pc, #516]	; (800c8ec <MAP_setWallCut+0x354>)
 800c6e8:	0143      	lsls	r3, r0, #5
 800c6ea:	4413      	add	r3, r2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	73bb      	strb	r3, [r7, #14]
					break;	
 800c6f6:	e177      	b.n	800c9e8 <MAP_setWallCut+0x450>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800c6f8:	4b7b      	ldr	r3, [pc, #492]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7f3 ff4b 	bl	8000598 <__aeabi_f2d>
 800c702:	f04f 0200 	mov.w	r2, #0
 800c706:	4b77      	ldr	r3, [pc, #476]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c708:	f7f3 fde6 	bl	80002d8 <__aeabi_dsub>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4610      	mov	r0, r2
 800c712:	4619      	mov	r1, r3
 800c714:	f04f 0200 	mov.w	r2, #0
 800c718:	f04f 0300 	mov.w	r3, #0
 800c71c:	f7f4 fa24 	bl	8000b68 <__aeabi_dcmpgt>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d024      	beq.n	800c770 <MAP_setWallCut+0x1d8>
 800c726:	4b6e      	ldr	r3, [pc, #440]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c728:	edd3 7a00 	vldr	s15, [r3]
 800c72c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c730:	edc7 7a00 	vstr	s15, [r7]
 800c734:	783b      	ldrb	r3, [r7, #0]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	461c      	mov	r4, r3
 800c73a:	4b6b      	ldr	r3, [pc, #428]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4618      	mov	r0, r3
 800c740:	f7f3 ff2a 	bl	8000598 <__aeabi_f2d>
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	4b66      	ldr	r3, [pc, #408]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c74a:	f7f3 fdc5 	bl	80002d8 <__aeabi_dsub>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f4 fa4f 	bl	8000bf8 <__aeabi_d2uiz>
 800c75a:	4603      	mov	r3, r0
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	4619      	mov	r1, r3
 800c760:	4a62      	ldr	r2, [pc, #392]	; (800c8ec <MAP_setWallCut+0x354>)
 800c762:	0163      	lsls	r3, r4, #5
 800c764:	4413      	add	r3, r2
 800c766:	440b      	add	r3, r1
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	f003 0304 	and.w	r3, r3, #4
 800c76e:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800c770:	4b5d      	ldr	r3, [pc, #372]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f7f3 ff0f 	bl	8000598 <__aeabi_f2d>
 800c77a:	f04f 0200 	mov.w	r2, #0
 800c77e:	4b5c      	ldr	r3, [pc, #368]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c780:	f7f3 fdaa 	bl	80002d8 <__aeabi_dsub>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4610      	mov	r0, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	f04f 0200 	mov.w	r2, #0
 800c790:	f04f 0300 	mov.w	r3, #0
 800c794:	f7f4 f9e8 	bl	8000b68 <__aeabi_dcmpgt>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d100      	bne.n	800c7a0 <MAP_setWallCut+0x208>
					break;
 800c79e:	e123      	b.n	800c9e8 <MAP_setWallCut+0x450>
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x04;		// 東を向いているので南側の壁があるか
 800c7a0:	4b4f      	ldr	r3, [pc, #316]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c7a2:	edd3 7a00 	vldr	s15, [r3]
 800c7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7aa:	edc7 7a00 	vstr	s15, [r7]
 800c7ae:	783b      	ldrb	r3, [r7, #0]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	461c      	mov	r4, r3
 800c7b4:	4b4c      	ldr	r3, [pc, #304]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f3 feed 	bl	8000598 <__aeabi_f2d>
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	4b4b      	ldr	r3, [pc, #300]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c7c4:	f7f3 fd88 	bl	80002d8 <__aeabi_dsub>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f7f4 fa12 	bl	8000bf8 <__aeabi_d2uiz>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4a44      	ldr	r2, [pc, #272]	; (800c8ec <MAP_setWallCut+0x354>)
 800c7dc:	0163      	lsls	r3, r4, #5
 800c7de:	4413      	add	r3, r2
 800c7e0:	440b      	add	r3, r1
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	73bb      	strb	r3, [r7, #14]
					break;
 800c7ea:	e0fd      	b.n	800c9e8 <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800c7ec:	4b3c      	ldr	r3, [pc, #240]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f3 fed1 	bl	8000598 <__aeabi_f2d>
 800c7f6:	f04f 0200 	mov.w	r2, #0
 800c7fa:	4b3a      	ldr	r3, [pc, #232]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c7fc:	f7f3 fd6e 	bl	80002dc <__adddf3>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	4610      	mov	r0, r2
 800c806:	4619      	mov	r1, r3
 800c808:	f04f 0200 	mov.w	r2, #0
 800c80c:	4b39      	ldr	r3, [pc, #228]	; (800c8f4 <MAP_setWallCut+0x35c>)
 800c80e:	f7f4 f98d 	bl	8000b2c <__aeabi_dcmplt>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d024      	beq.n	800c862 <MAP_setWallCut+0x2ca>
 800c818:	4b31      	ldr	r3, [pc, #196]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7f3 febb 	bl	8000598 <__aeabi_f2d>
 800c822:	f04f 0200 	mov.w	r2, #0
 800c826:	4b2f      	ldr	r3, [pc, #188]	; (800c8e4 <MAP_setWallCut+0x34c>)
 800c828:	f7f3 fd58 	bl	80002dc <__adddf3>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	4610      	mov	r0, r2
 800c832:	4619      	mov	r1, r3
 800c834:	f7f4 f9e0 	bl	8000bf8 <__aeabi_d2uiz>
 800c838:	4603      	mov	r3, r0
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	4618      	mov	r0, r3
 800c83e:	4b2a      	ldr	r3, [pc, #168]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c840:	edd3 7a00 	vldr	s15, [r3]
 800c844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c848:	edc7 7a00 	vstr	s15, [r7]
 800c84c:	783b      	ldrb	r3, [r7, #0]
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4619      	mov	r1, r3
 800c852:	4a26      	ldr	r2, [pc, #152]	; (800c8ec <MAP_setWallCut+0x354>)
 800c854:	0143      	lsls	r3, r0, #5
 800c856:	4413      	add	r3, r2
 800c858:	440b      	add	r3, r1
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	f003 0308 	and.w	r3, r3, #8
 800c860:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4618      	mov	r0, r3
 800c868:	f7f3 fe96 	bl	8000598 <__aeabi_f2d>
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	4b1f      	ldr	r3, [pc, #124]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c872:	f7f3 fd33 	bl	80002dc <__adddf3>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4610      	mov	r0, r2
 800c87c:	4619      	mov	r1, r3
 800c87e:	f04f 0200 	mov.w	r2, #0
 800c882:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <MAP_setWallCut+0x35c>)
 800c884:	f7f4 f952 	bl	8000b2c <__aeabi_dcmplt>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d100      	bne.n	800c890 <MAP_setWallCut+0x2f8>
					break;
 800c88e:	e0ab      	b.n	800c9e8 <MAP_setWallCut+0x450>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x08;		// 南を向いているので西側の壁があるか
 800c890:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <MAP_setWallCut+0x348>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f7f3 fe7f 	bl	8000598 <__aeabi_f2d>
 800c89a:	f04f 0200 	mov.w	r2, #0
 800c89e:	4b14      	ldr	r3, [pc, #80]	; (800c8f0 <MAP_setWallCut+0x358>)
 800c8a0:	f7f3 fd1c 	bl	80002dc <__adddf3>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	f7f4 f9a4 	bl	8000bf8 <__aeabi_d2uiz>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <MAP_setWallCut+0x350>)
 800c8b8:	edd3 7a00 	vldr	s15, [r3]
 800c8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c0:	edc7 7a00 	vstr	s15, [r7]
 800c8c4:	783b      	ldrb	r3, [r7, #0]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4a08      	ldr	r2, [pc, #32]	; (800c8ec <MAP_setWallCut+0x354>)
 800c8cc:	0143      	lsls	r3, r0, #5
 800c8ce:	4413      	add	r3, r2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	f003 0308 	and.w	r3, r3, #8
 800c8d8:	73bb      	strb	r3, [r7, #14]
					break;
 800c8da:	e085      	b.n	800c9e8 <MAP_setWallCut+0x450>
 800c8dc:	20006f04 	.word	0x20006f04
 800c8e0:	20008fc4 	.word	0x20008fc4
 800c8e4:	3fe00000 	.word	0x3fe00000
 800c8e8:	20006f08 	.word	0x20006f08
 800c8ec:	200002f4 	.word	0x200002f4
 800c8f0:	3ff80000 	.word	0x3ff80000
 800c8f4:	40400000 	.word	0x40400000
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800c8f8:	4bb6      	ldr	r3, [pc, #728]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f3 fe4b 	bl	8000598 <__aeabi_f2d>
 800c902:	f04f 0200 	mov.w	r2, #0
 800c906:	4bb4      	ldr	r3, [pc, #720]	; (800cbd8 <MAP_setWallCut+0x640>)
 800c908:	f7f3 fce8 	bl	80002dc <__adddf3>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4610      	mov	r0, r2
 800c912:	4619      	mov	r1, r3
 800c914:	f04f 0200 	mov.w	r2, #0
 800c918:	4bb0      	ldr	r3, [pc, #704]	; (800cbdc <MAP_setWallCut+0x644>)
 800c91a:	f7f4 f907 	bl	8000b2c <__aeabi_dcmplt>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d024      	beq.n	800c96e <MAP_setWallCut+0x3d6>
 800c924:	4bae      	ldr	r3, [pc, #696]	; (800cbe0 <MAP_setWallCut+0x648>)
 800c926:	edd3 7a00 	vldr	s15, [r3]
 800c92a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c92e:	edc7 7a00 	vstr	s15, [r7]
 800c932:	783b      	ldrb	r3, [r7, #0]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	461c      	mov	r4, r3
 800c938:	4ba6      	ldr	r3, [pc, #664]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7f3 fe2b 	bl	8000598 <__aeabi_f2d>
 800c942:	f04f 0200 	mov.w	r2, #0
 800c946:	4ba4      	ldr	r3, [pc, #656]	; (800cbd8 <MAP_setWallCut+0x640>)
 800c948:	f7f3 fcc8 	bl	80002dc <__adddf3>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	4610      	mov	r0, r2
 800c952:	4619      	mov	r1, r3
 800c954:	f7f4 f950 	bl	8000bf8 <__aeabi_d2uiz>
 800c958:	4603      	mov	r3, r0
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	4619      	mov	r1, r3
 800c95e:	4aa1      	ldr	r2, [pc, #644]	; (800cbe4 <MAP_setWallCut+0x64c>)
 800c960:	0163      	lsls	r3, r4, #5
 800c962:	4413      	add	r3, r2
 800c964:	440b      	add	r3, r1
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800c96e:	4b99      	ldr	r3, [pc, #612]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f7f3 fe10 	bl	8000598 <__aeabi_f2d>
 800c978:	f04f 0200 	mov.w	r2, #0
 800c97c:	4b9a      	ldr	r3, [pc, #616]	; (800cbe8 <MAP_setWallCut+0x650>)
 800c97e:	f7f3 fcad 	bl	80002dc <__adddf3>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4610      	mov	r0, r2
 800c988:	4619      	mov	r1, r3
 800c98a:	f04f 0200 	mov.w	r2, #0
 800c98e:	4b93      	ldr	r3, [pc, #588]	; (800cbdc <MAP_setWallCut+0x644>)
 800c990:	f7f4 f8cc 	bl	8000b2c <__aeabi_dcmplt>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d100      	bne.n	800c99c <MAP_setWallCut+0x404>
					break;
 800c99a:	e024      	b.n	800c9e6 <MAP_setWallCut+0x44e>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x01;		// 西を向いているので北側の壁があるか
 800c99c:	4b90      	ldr	r3, [pc, #576]	; (800cbe0 <MAP_setWallCut+0x648>)
 800c99e:	edd3 7a00 	vldr	s15, [r3]
 800c9a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9a6:	edc7 7a00 	vstr	s15, [r7]
 800c9aa:	783b      	ldrb	r3, [r7, #0]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	461c      	mov	r4, r3
 800c9b0:	4b88      	ldr	r3, [pc, #544]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f3 fdef 	bl	8000598 <__aeabi_f2d>
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4b8a      	ldr	r3, [pc, #552]	; (800cbe8 <MAP_setWallCut+0x650>)
 800c9c0:	f7f3 fc8c 	bl	80002dc <__adddf3>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	f7f4 f914 	bl	8000bf8 <__aeabi_d2uiz>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4a83      	ldr	r2, [pc, #524]	; (800cbe4 <MAP_setWallCut+0x64c>)
 800c9d8:	0163      	lsls	r3, r4, #5
 800c9da:	4413      	add	r3, r2
 800c9dc:	440b      	add	r3, r1
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	73bb      	strb	r3, [r7, #14]
					break;
 800c9e6:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d107      	bne.n	800c9fe <MAP_setWallCut+0x466>
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 8224 	beq.w	800ce3e <MAP_setWallCut+0x8a6>
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 8220 	beq.w	800ce3e <MAP_setWallCut+0x8a6>
				MOT_setWallEdgeType( MOT_WALL_EDGE_RIGHT );		// 壁切れ補正を実施する
 800c9fe:	2001      	movs	r0, #1
 800ca00:	f7fe fdf8 	bl	800b5f4 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800ca04:	2301      	movs	r3, #1
 800ca06:	737b      	strb	r3, [r7, #13]
			break;
 800ca08:	e219      	b.n	800ce3e <MAP_setWallCut+0x8a6>
			switch( s_PosDir ){
 800ca0a:	4b78      	ldr	r3, [pc, #480]	; (800cbec <MAP_setWallCut+0x654>)
 800ca0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca10:	2b06      	cmp	r3, #6
 800ca12:	f200 8203 	bhi.w	800ce1c <MAP_setWallCut+0x884>
 800ca16:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <MAP_setWallCut+0x484>)
 800ca18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1c:	0800ca39 	.word	0x0800ca39
 800ca20:	0800ce1d 	.word	0x0800ce1d
 800ca24:	0800cb2d 	.word	0x0800cb2d
 800ca28:	0800ce1d 	.word	0x0800ce1d
 800ca2c:	0800cc3d 	.word	0x0800cc3d
 800ca30:	0800ce1d 	.word	0x0800ce1d
 800ca34:	0800cd2d 	.word	0x0800cd2d
					if( 0 < f_PosY-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY-0.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800ca38:	4b69      	ldr	r3, [pc, #420]	; (800cbe0 <MAP_setWallCut+0x648>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f3 fdab 	bl	8000598 <__aeabi_f2d>
 800ca42:	f04f 0200 	mov.w	r2, #0
 800ca46:	4b64      	ldr	r3, [pc, #400]	; (800cbd8 <MAP_setWallCut+0x640>)
 800ca48:	f7f3 fc46 	bl	80002d8 <__aeabi_dsub>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4610      	mov	r0, r2
 800ca52:	4619      	mov	r1, r3
 800ca54:	f04f 0200 	mov.w	r2, #0
 800ca58:	f04f 0300 	mov.w	r3, #0
 800ca5c:	f7f4 f884 	bl	8000b68 <__aeabi_dcmpgt>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d024      	beq.n	800cab0 <MAP_setWallCut+0x518>
 800ca66:	4b5e      	ldr	r3, [pc, #376]	; (800cbe0 <MAP_setWallCut+0x648>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f3 fd94 	bl	8000598 <__aeabi_f2d>
 800ca70:	f04f 0200 	mov.w	r2, #0
 800ca74:	4b58      	ldr	r3, [pc, #352]	; (800cbd8 <MAP_setWallCut+0x640>)
 800ca76:	f7f3 fc2f 	bl	80002d8 <__aeabi_dsub>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	4610      	mov	r0, r2
 800ca80:	4619      	mov	r1, r3
 800ca82:	f7f4 f8b9 	bl	8000bf8 <__aeabi_d2uiz>
 800ca86:	4603      	mov	r3, r0
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	4b51      	ldr	r3, [pc, #324]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800ca8e:	edd3 7a00 	vldr	s15, [r3]
 800ca92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca96:	edc7 7a00 	vstr	s15, [r7]
 800ca9a:	783b      	ldrb	r3, [r7, #0]
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4a50      	ldr	r2, [pc, #320]	; (800cbe4 <MAP_setWallCut+0x64c>)
 800caa2:	0143      	lsls	r3, r0, #5
 800caa4:	4413      	add	r3, r2
 800caa6:	440b      	add	r3, r1
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800cab0:	4b4b      	ldr	r3, [pc, #300]	; (800cbe0 <MAP_setWallCut+0x648>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7f3 fd6f 	bl	8000598 <__aeabi_f2d>
 800caba:	f04f 0200 	mov.w	r2, #0
 800cabe:	4b4a      	ldr	r3, [pc, #296]	; (800cbe8 <MAP_setWallCut+0x650>)
 800cac0:	f7f3 fc0a 	bl	80002d8 <__aeabi_dsub>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4610      	mov	r0, r2
 800caca:	4619      	mov	r1, r3
 800cacc:	f04f 0200 	mov.w	r2, #0
 800cad0:	f04f 0300 	mov.w	r3, #0
 800cad4:	f7f4 f848 	bl	8000b68 <__aeabi_dcmpgt>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d100      	bne.n	800cae0 <MAP_setWallCut+0x548>
					break;
 800cade:	e19d      	b.n	800ce1c <MAP_setWallCut+0x884>
					if( 0 < f_PosY-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY-1.5)][(uint8_t)(f_PosX)] & 0x08;			// 北を向いているので西側の壁があるか
 800cae0:	4b3f      	ldr	r3, [pc, #252]	; (800cbe0 <MAP_setWallCut+0x648>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7f3 fd57 	bl	8000598 <__aeabi_f2d>
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	4b3e      	ldr	r3, [pc, #248]	; (800cbe8 <MAP_setWallCut+0x650>)
 800caf0:	f7f3 fbf2 	bl	80002d8 <__aeabi_dsub>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4610      	mov	r0, r2
 800cafa:	4619      	mov	r1, r3
 800cafc:	f7f4 f87c 	bl	8000bf8 <__aeabi_d2uiz>
 800cb00:	4603      	mov	r3, r0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	4618      	mov	r0, r3
 800cb06:	4b33      	ldr	r3, [pc, #204]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800cb08:	edd3 7a00 	vldr	s15, [r3]
 800cb0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb10:	edc7 7a00 	vstr	s15, [r7]
 800cb14:	783b      	ldrb	r3, [r7, #0]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	4619      	mov	r1, r3
 800cb1a:	4a32      	ldr	r2, [pc, #200]	; (800cbe4 <MAP_setWallCut+0x64c>)
 800cb1c:	0143      	lsls	r3, r0, #5
 800cb1e:	4413      	add	r3, r2
 800cb20:	440b      	add	r3, r1
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	73bb      	strb	r3, [r7, #14]
					break;
 800cb2a:	e177      	b.n	800ce1c <MAP_setWallCut+0x884>
					if( 0 < f_PosX-0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-0.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800cb2c:	4b29      	ldr	r3, [pc, #164]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f3 fd31 	bl	8000598 <__aeabi_f2d>
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	4b27      	ldr	r3, [pc, #156]	; (800cbd8 <MAP_setWallCut+0x640>)
 800cb3c:	f7f3 fbcc 	bl	80002d8 <__aeabi_dsub>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4610      	mov	r0, r2
 800cb46:	4619      	mov	r1, r3
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	f7f4 f80a 	bl	8000b68 <__aeabi_dcmpgt>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d024      	beq.n	800cba4 <MAP_setWallCut+0x60c>
 800cb5a:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <MAP_setWallCut+0x648>)
 800cb5c:	edd3 7a00 	vldr	s15, [r3]
 800cb60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb64:	edc7 7a00 	vstr	s15, [r7]
 800cb68:	783b      	ldrb	r3, [r7, #0]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	461c      	mov	r4, r3
 800cb6e:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f3 fd10 	bl	8000598 <__aeabi_f2d>
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	4b16      	ldr	r3, [pc, #88]	; (800cbd8 <MAP_setWallCut+0x640>)
 800cb7e:	f7f3 fbab 	bl	80002d8 <__aeabi_dsub>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4610      	mov	r0, r2
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7f4 f835 	bl	8000bf8 <__aeabi_d2uiz>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	4619      	mov	r1, r3
 800cb94:	4a13      	ldr	r2, [pc, #76]	; (800cbe4 <MAP_setWallCut+0x64c>)
 800cb96:	0163      	lsls	r3, r4, #5
 800cb98:	4413      	add	r3, r2
 800cb9a:	440b      	add	r3, r1
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	73fb      	strb	r3, [r7, #15]
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800cba4:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <MAP_setWallCut+0x63c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7f3 fcf5 	bl	8000598 <__aeabi_f2d>
 800cbae:	f04f 0200 	mov.w	r2, #0
 800cbb2:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <MAP_setWallCut+0x650>)
 800cbb4:	f7f3 fb90 	bl	80002d8 <__aeabi_dsub>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	f04f 0300 	mov.w	r3, #0
 800cbc8:	f7f3 ffce 	bl	8000b68 <__aeabi_dcmpgt>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10e      	bne.n	800cbf0 <MAP_setWallCut+0x658>
					break;
 800cbd2:	e123      	b.n	800ce1c <MAP_setWallCut+0x884>
 800cbd4:	20006f08 	.word	0x20006f08
 800cbd8:	3fe00000 	.word	0x3fe00000
 800cbdc:	40400000 	.word	0x40400000
 800cbe0:	20008fc4 	.word	0x20008fc4
 800cbe4:	200002f4 	.word	0x200002f4
 800cbe8:	3ff80000 	.word	0x3ff80000
 800cbec:	20006f04 	.word	0x20006f04
					if( 0 < f_PosX-1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX-1.5)] & 0x01;			// 東を向いているので北側の壁があるか
 800cbf0:	4b97      	ldr	r3, [pc, #604]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cbf2:	edd3 7a00 	vldr	s15, [r3]
 800cbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfa:	edc7 7a00 	vstr	s15, [r7]
 800cbfe:	783b      	ldrb	r3, [r7, #0]
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	461c      	mov	r4, r3
 800cc04:	4b93      	ldr	r3, [pc, #588]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7f3 fcc5 	bl	8000598 <__aeabi_f2d>
 800cc0e:	f04f 0200 	mov.w	r2, #0
 800cc12:	4b91      	ldr	r3, [pc, #580]	; (800ce58 <MAP_setWallCut+0x8c0>)
 800cc14:	f7f3 fb60 	bl	80002d8 <__aeabi_dsub>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4619      	mov	r1, r3
 800cc20:	f7f3 ffea 	bl	8000bf8 <__aeabi_d2uiz>
 800cc24:	4603      	mov	r3, r0
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4a8c      	ldr	r2, [pc, #560]	; (800ce5c <MAP_setWallCut+0x8c4>)
 800cc2c:	0163      	lsls	r3, r4, #5
 800cc2e:	4413      	add	r3, r2
 800cc30:	440b      	add	r3, r1
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	73bb      	strb	r3, [r7, #14]
					break;
 800cc3a:	e0ef      	b.n	800ce1c <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY+0.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800cc3c:	4b84      	ldr	r3, [pc, #528]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f3 fca9 	bl	8000598 <__aeabi_f2d>
 800cc46:	f04f 0200 	mov.w	r2, #0
 800cc4a:	4b85      	ldr	r3, [pc, #532]	; (800ce60 <MAP_setWallCut+0x8c8>)
 800cc4c:	f7f3 fb46 	bl	80002dc <__adddf3>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4610      	mov	r0, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	f04f 0200 	mov.w	r2, #0
 800cc5c:	4b81      	ldr	r3, [pc, #516]	; (800ce64 <MAP_setWallCut+0x8cc>)
 800cc5e:	f7f3 ff65 	bl	8000b2c <__aeabi_dcmplt>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d024      	beq.n	800ccb2 <MAP_setWallCut+0x71a>
 800cc68:	4b79      	ldr	r3, [pc, #484]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7f3 fc93 	bl	8000598 <__aeabi_f2d>
 800cc72:	f04f 0200 	mov.w	r2, #0
 800cc76:	4b7a      	ldr	r3, [pc, #488]	; (800ce60 <MAP_setWallCut+0x8c8>)
 800cc78:	f7f3 fb30 	bl	80002dc <__adddf3>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	4610      	mov	r0, r2
 800cc82:	4619      	mov	r1, r3
 800cc84:	f7f3 ffb8 	bl	8000bf8 <__aeabi_d2uiz>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	4b71      	ldr	r3, [pc, #452]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cc90:	edd3 7a00 	vldr	s15, [r3]
 800cc94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc98:	edc7 7a00 	vstr	s15, [r7]
 800cc9c:	783b      	ldrb	r3, [r7, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	4619      	mov	r1, r3
 800cca2:	4a6e      	ldr	r2, [pc, #440]	; (800ce5c <MAP_setWallCut+0x8c4>)
 800cca4:	0143      	lsls	r3, r0, #5
 800cca6:	4413      	add	r3, r2
 800cca8:	440b      	add	r3, r1
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 0302 	and.w	r3, r3, #2
 800ccb0:	73fb      	strb	r3, [r7, #15]
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800ccb2:	4b67      	ldr	r3, [pc, #412]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f3 fc6e 	bl	8000598 <__aeabi_f2d>
 800ccbc:	f04f 0200 	mov.w	r2, #0
 800ccc0:	4b65      	ldr	r3, [pc, #404]	; (800ce58 <MAP_setWallCut+0x8c0>)
 800ccc2:	f7f3 fb0b 	bl	80002dc <__adddf3>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4610      	mov	r0, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	4b64      	ldr	r3, [pc, #400]	; (800ce64 <MAP_setWallCut+0x8cc>)
 800ccd4:	f7f3 ff2a 	bl	8000b2c <__aeabi_dcmplt>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d100      	bne.n	800cce0 <MAP_setWallCut+0x748>
					break;
 800ccde:	e09d      	b.n	800ce1c <MAP_setWallCut+0x884>
					if( MAP_Y_SIZE_REAL > f_PosY+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY+1.5)][(uint8_t)(f_PosX)] & 0x02;			// 南を向いているので東側の壁があるか
 800cce0:	4b5b      	ldr	r3, [pc, #364]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7f3 fc57 	bl	8000598 <__aeabi_f2d>
 800ccea:	f04f 0200 	mov.w	r2, #0
 800ccee:	4b5a      	ldr	r3, [pc, #360]	; (800ce58 <MAP_setWallCut+0x8c0>)
 800ccf0:	f7f3 faf4 	bl	80002dc <__adddf3>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f7f3 ff7c 	bl	8000bf8 <__aeabi_d2uiz>
 800cd00:	4603      	mov	r3, r0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	4618      	mov	r0, r3
 800cd06:	4b53      	ldr	r3, [pc, #332]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cd08:	edd3 7a00 	vldr	s15, [r3]
 800cd0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd10:	edc7 7a00 	vstr	s15, [r7]
 800cd14:	783b      	ldrb	r3, [r7, #0]
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4a50      	ldr	r2, [pc, #320]	; (800ce5c <MAP_setWallCut+0x8c4>)
 800cd1c:	0143      	lsls	r3, r0, #5
 800cd1e:	4413      	add	r3, r2
 800cd20:	440b      	add	r3, r1
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	73bb      	strb	r3, [r7, #14]
					break;
 800cd2a:	e077      	b.n	800ce1c <MAP_setWallCut+0x884>
					if( MAP_X_SIZE_REAL > f_PosX+0.5 ) uc_val     = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+0.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800cd2c:	4b49      	ldr	r3, [pc, #292]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7f3 fc31 	bl	8000598 <__aeabi_f2d>
 800cd36:	f04f 0200 	mov.w	r2, #0
 800cd3a:	4b49      	ldr	r3, [pc, #292]	; (800ce60 <MAP_setWallCut+0x8c8>)
 800cd3c:	f7f3 face 	bl	80002dc <__adddf3>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4610      	mov	r0, r2
 800cd46:	4619      	mov	r1, r3
 800cd48:	f04f 0200 	mov.w	r2, #0
 800cd4c:	4b45      	ldr	r3, [pc, #276]	; (800ce64 <MAP_setWallCut+0x8cc>)
 800cd4e:	f7f3 feed 	bl	8000b2c <__aeabi_dcmplt>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d024      	beq.n	800cda2 <MAP_setWallCut+0x80a>
 800cd58:	4b3d      	ldr	r3, [pc, #244]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cd5a:	edd3 7a00 	vldr	s15, [r3]
 800cd5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd62:	edc7 7a00 	vstr	s15, [r7]
 800cd66:	783b      	ldrb	r3, [r7, #0]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	461c      	mov	r4, r3
 800cd6c:	4b39      	ldr	r3, [pc, #228]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f3 fc11 	bl	8000598 <__aeabi_f2d>
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	4b39      	ldr	r3, [pc, #228]	; (800ce60 <MAP_setWallCut+0x8c8>)
 800cd7c:	f7f3 faae 	bl	80002dc <__adddf3>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4610      	mov	r0, r2
 800cd86:	4619      	mov	r1, r3
 800cd88:	f7f3 ff36 	bl	8000bf8 <__aeabi_d2uiz>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	4619      	mov	r1, r3
 800cd92:	4a32      	ldr	r2, [pc, #200]	; (800ce5c <MAP_setWallCut+0x8c4>)
 800cd94:	0163      	lsls	r3, r4, #5
 800cd96:	4413      	add	r3, r2
 800cd98:	440b      	add	r3, r1
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	f003 0304 	and.w	r3, r3, #4
 800cda0:	73fb      	strb	r3, [r7, #15]
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800cda2:	4b2c      	ldr	r3, [pc, #176]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f3 fbf6 	bl	8000598 <__aeabi_f2d>
 800cdac:	f04f 0200 	mov.w	r2, #0
 800cdb0:	4b29      	ldr	r3, [pc, #164]	; (800ce58 <MAP_setWallCut+0x8c0>)
 800cdb2:	f7f3 fa93 	bl	80002dc <__adddf3>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	4610      	mov	r0, r2
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	f04f 0200 	mov.w	r2, #0
 800cdc2:	4b28      	ldr	r3, [pc, #160]	; (800ce64 <MAP_setWallCut+0x8cc>)
 800cdc4:	f7f3 feb2 	bl	8000b2c <__aeabi_dcmplt>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d100      	bne.n	800cdd0 <MAP_setWallCut+0x838>
					break;
 800cdce:	e024      	b.n	800ce1a <MAP_setWallCut+0x882>
					if( MAP_X_SIZE_REAL > f_PosX+1.5 ) uc_valPrev = g_sysMap[(uint8_t)(f_PosY)][(uint8_t)(f_PosX+1.5)] & 0x04;			// 西を向いているので南側の壁があるか
 800cdd0:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <MAP_setWallCut+0x8b8>)
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdda:	edc7 7a00 	vstr	s15, [r7]
 800cdde:	783b      	ldrb	r3, [r7, #0]
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	461c      	mov	r4, r3
 800cde4:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <MAP_setWallCut+0x8bc>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f3 fbd5 	bl	8000598 <__aeabi_f2d>
 800cdee:	f04f 0200 	mov.w	r2, #0
 800cdf2:	4b19      	ldr	r3, [pc, #100]	; (800ce58 <MAP_setWallCut+0x8c0>)
 800cdf4:	f7f3 fa72 	bl	80002dc <__adddf3>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	f7f3 fefa 	bl	8000bf8 <__aeabi_d2uiz>
 800ce04:	4603      	mov	r3, r0
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4a14      	ldr	r2, [pc, #80]	; (800ce5c <MAP_setWallCut+0x8c4>)
 800ce0c:	0163      	lsls	r3, r4, #5
 800ce0e:	4413      	add	r3, r2
 800ce10:	440b      	add	r3, r1
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	73bb      	strb	r3, [r7, #14]
					break;
 800ce1a:	bf00      	nop
			if( ( uc_val != 0 ) || ( ( uc_val != 0 ) && ( uc_valPrev != 0 ) ) ){
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d105      	bne.n	800ce2e <MAP_setWallCut+0x896>
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00c      	beq.n	800ce42 <MAP_setWallCut+0x8aa>
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <MAP_setWallCut+0x8aa>
				MOT_setWallEdgeType( MOT_WALL_EDGE_LEFT );		// 壁切れ補正を実施する
 800ce2e:	2002      	movs	r0, #2
 800ce30:	f7fe fbe0 	bl	800b5f4 <MOT_setWallEdgeType>
				bl_wallCut = TRUE;
 800ce34:	2301      	movs	r3, #1
 800ce36:	737b      	strb	r3, [r7, #13]
			break;
 800ce38:	e003      	b.n	800ce42 <MAP_setWallCut+0x8aa>
			break;
 800ce3a:	bf00      	nop
 800ce3c:	e002      	b.n	800ce44 <MAP_setWallCut+0x8ac>
			break;
 800ce3e:	bf00      	nop
 800ce40:	e000      	b.n	800ce44 <MAP_setWallCut+0x8ac>
			break;
 800ce42:	bf00      	nop
	}
	
	return bl_wallCut;
 800ce44:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd90      	pop	{r4, r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	20008fc4 	.word	0x20008fc4
 800ce54:	20006f08 	.word	0x20006f08
 800ce58:	3ff80000 	.word	0x3ff80000
 800ce5c:	200002f4 	.word	0x200002f4
 800ce60:	3fe00000 	.word	0x3fe00000
 800ce64:	40400000 	.word	0x40400000

0800ce68 <MAP_setCmdPos>:

void MAP_setCmdPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	71fb      	strb	r3, [r7, #7]
 800ce72:	460b      	mov	r3, r1
 800ce74:	71bb      	strb	r3, [r7, #6]
 800ce76:	4613      	mov	r3, r2
 800ce78:	717b      	strb	r3, [r7, #5]
	f_PosX   = (float)uc_x;
 800ce7a:	79fb      	ldrb	r3, [r7, #7]
 800ce7c:	ee07 3a90 	vmov	s15, r3
 800ce80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce84:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <MAP_setCmdPos+0x4c>)
 800ce86:	edc3 7a00 	vstr	s15, [r3]
	f_PosX   = (float)uc_y;
 800ce8a:	79bb      	ldrb	r3, [r7, #6]
 800ce8c:	ee07 3a90 	vmov	s15, r3
 800ce90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <MAP_setCmdPos+0x4c>)
 800ce96:	edc3 7a00 	vstr	s15, [r3]
	s_PosDir = (int16_t)(en_dir * 2);	// 進行方向（[0]北 [1]北東 [2]東 [3]南東 [4]南 [5]南西 [6]西 [7]北西 ）、2倍すると丁度値が合致する
 800ce9a:	797b      	ldrb	r3, [r7, #5]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	b21a      	sxth	r2, r3
 800cea4:	4b04      	ldr	r3, [pc, #16]	; (800ceb8 <MAP_setCmdPos+0x50>)
 800cea6:	801a      	strh	r2, [r3, #0]
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr
 800ceb4:	20006f08 	.word	0x20006f08
 800ceb8:	20006f04 	.word	0x20006f04

0800cebc <MAP_showCmdLog>:

void MAP_showCmdLog( void )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	80fb      	strh	r3, [r7, #6]
	
	/* 超信地旋回コマンド */
	while(1){
		
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800cec6:	88f9      	ldrh	r1, [r7, #6]
 800cec8:	88fb      	ldrh	r3, [r7, #6]
 800ceca:	4a1e      	ldr	r2, [pc, #120]	; (800cf44 <MAP_showCmdLog+0x88>)
 800cecc:	5cd3      	ldrb	r3, [r2, r3]
 800cece:	461a      	mov	r2, r3
 800ced0:	481d      	ldr	r0, [pc, #116]	; (800cf48 <MAP_showCmdLog+0x8c>)
 800ced2:	f007 f8ab 	bl	801402c <iprintf>
		if( dcom[i] == CEND ) break;
 800ced6:	88fb      	ldrh	r3, [r7, #6]
 800ced8:	4a1a      	ldr	r2, [pc, #104]	; (800cf44 <MAP_showCmdLog+0x88>)
 800ceda:	5cd3      	ldrb	r3, [r2, r3]
 800cedc:	2bfa      	cmp	r3, #250	; 0xfa
 800cede:	d003      	beq.n	800cee8 <MAP_showCmdLog+0x2c>
		i++;
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	3301      	adds	r3, #1
 800cee4:	80fb      	strh	r3, [r7, #6]
		printf("dcom[%4d] = %02d  \n\r",i,dcom[i]);
 800cee6:	e7ee      	b.n	800cec6 <MAP_showCmdLog+0xa>
		if( dcom[i] == CEND ) break;
 800cee8:	bf00      	nop
	}
	i=0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	80fb      	strh	r3, [r7, #6]
	
	/* スラロームコマンド */
	while(1){
		
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800ceee:	88f9      	ldrh	r1, [r7, #6]
 800cef0:	88fb      	ldrh	r3, [r7, #6]
 800cef2:	4a16      	ldr	r2, [pc, #88]	; (800cf4c <MAP_showCmdLog+0x90>)
 800cef4:	5cd3      	ldrb	r3, [r2, r3]
 800cef6:	461a      	mov	r2, r3
 800cef8:	4815      	ldr	r0, [pc, #84]	; (800cf50 <MAP_showCmdLog+0x94>)
 800cefa:	f007 f897 	bl	801402c <iprintf>
		if( scom[i] == CEND ) break;
 800cefe:	88fb      	ldrh	r3, [r7, #6]
 800cf00:	4a12      	ldr	r2, [pc, #72]	; (800cf4c <MAP_showCmdLog+0x90>)
 800cf02:	5cd3      	ldrb	r3, [r2, r3]
 800cf04:	2bfa      	cmp	r3, #250	; 0xfa
 800cf06:	d003      	beq.n	800cf10 <MAP_showCmdLog+0x54>
		i++;
 800cf08:	88fb      	ldrh	r3, [r7, #6]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	80fb      	strh	r3, [r7, #6]
		printf("scom[%4d] = %02d  \n\r",i,scom[i]);
 800cf0e:	e7ee      	b.n	800ceee <MAP_showCmdLog+0x32>
		if( scom[i] == CEND ) break;
 800cf10:	bf00      	nop
	}
	i=0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	80fb      	strh	r3, [r7, #6]

	/* 斜め走行コマンド */
	while(1){
		
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800cf16:	88f9      	ldrh	r1, [r7, #6]
 800cf18:	88fb      	ldrh	r3, [r7, #6]
 800cf1a:	4a0e      	ldr	r2, [pc, #56]	; (800cf54 <MAP_showCmdLog+0x98>)
 800cf1c:	5cd3      	ldrb	r3, [r2, r3]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	480d      	ldr	r0, [pc, #52]	; (800cf58 <MAP_showCmdLog+0x9c>)
 800cf22:	f007 f883 	bl	801402c <iprintf>
		if( tcom[i] == CEND ) break;
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	4a0a      	ldr	r2, [pc, #40]	; (800cf54 <MAP_showCmdLog+0x98>)
 800cf2a:	5cd3      	ldrb	r3, [r2, r3]
 800cf2c:	2bfa      	cmp	r3, #250	; 0xfa
 800cf2e:	d003      	beq.n	800cf38 <MAP_showCmdLog+0x7c>
		i++;
 800cf30:	88fb      	ldrh	r3, [r7, #6]
 800cf32:	3301      	adds	r3, #1
 800cf34:	80fb      	strh	r3, [r7, #6]
		printf("tcom[%4d] = %02d  \n\r",i,tcom[i]);
 800cf36:	e7ee      	b.n	800cf16 <MAP_showCmdLog+0x5a>
		if( tcom[i] == CEND ) break;
 800cf38:	bf00      	nop
	}
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	20005f04 	.word	0x20005f04
 800cf48:	08019594 	.word	0x08019594
 800cf4c:	20006f0c 	.word	0x20006f0c
 800cf50:	080195ac 	.word	0x080195ac
 800cf54:	20007f48 	.word	0x20007f48
 800cf58:	080195c4 	.word	0x080195c4

0800cf5c <MAP_makeCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
){
 800cf5c:	b490      	push	{r4, r7}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	4611      	mov	r1, r2
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4623      	mov	r3, r4
 800cf6c:	71fb      	strb	r3, [r7, #7]
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71bb      	strb	r3, [r7, #6]
 800cf72:	460b      	mov	r3, r1
 800cf74:	717b      	strb	r3, [r7, #5]
 800cf76:	4613      	mov	r3, r2
 800cf78:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop
	
	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	75fb      	strb	r3, [r7, #23]
	us_pt = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	82bb      	strh	r3, [r7, #20]

	/* 迷路情報からコマンド作成 */
	while(1){	
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800cf82:	79ba      	ldrb	r2, [r7, #6]
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	499f      	ldr	r1, [pc, #636]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800cf88:	0152      	lsls	r2, r2, #5
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	823b      	strh	r3, [r7, #16]
		if (en_staDir == NORTH){
 800cf94:	797b      	ldrb	r3, [r7, #5]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d164      	bne.n	800d064 <MAP_makeCmdList+0x108>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800cf9a:	79ba      	ldrb	r2, [r7, #6]
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	499a      	ldr	r1, [pc, #616]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800cfa0:	0152      	lsls	r2, r2, #5
 800cfa2:	440a      	add	r2, r1
 800cfa4:	4413      	add	r3, r2
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 0311 	and.w	r3, r3, #17
 800cfac:	2b10      	cmp	r3, #16
 800cfae:	d10d      	bne.n	800cfcc <MAP_makeCmdList+0x70>
 800cfb0:	79bb      	ldrb	r3, [r7, #6]
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	4993      	ldr	r1, [pc, #588]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800cfb8:	0152      	lsls	r2, r2, #5
 800cfba:	4413      	add	r3, r2
 800cfbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cfc0:	8a3a      	ldrh	r2, [r7, #16]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d102      	bne.n	800cfcc <MAP_makeCmdList+0x70>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	74fb      	strb	r3, [r7, #19]
 800cfca:	e187      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800cfcc:	79ba      	ldrb	r2, [r7, #6]
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	498d      	ldr	r1, [pc, #564]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800cfd2:	0152      	lsls	r2, r2, #5
 800cfd4:	440a      	add	r2, r1
 800cfd6:	4413      	add	r3, r2
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800cfde:	2b20      	cmp	r3, #32
 800cfe0:	d10d      	bne.n	800cffe <MAP_makeCmdList+0xa2>
 800cfe2:	79ba      	ldrb	r2, [r7, #6]
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	4986      	ldr	r1, [pc, #536]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800cfea:	0152      	lsls	r2, r2, #5
 800cfec:	4413      	add	r3, r2
 800cfee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800cff2:	8a3a      	ldrh	r2, [r7, #16]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d102      	bne.n	800cffe <MAP_makeCmdList+0xa2>
 800cff8:	2301      	movs	r3, #1
 800cffa:	74fb      	strb	r3, [r7, #19]
 800cffc:	e16e      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800cffe:	79ba      	ldrb	r2, [r7, #6]
 800d000:	79fb      	ldrb	r3, [r7, #7]
 800d002:	4981      	ldr	r1, [pc, #516]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d004:	0152      	lsls	r2, r2, #5
 800d006:	440a      	add	r2, r1
 800d008:	4413      	add	r3, r2
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d010:	2b80      	cmp	r3, #128	; 0x80
 800d012:	d10d      	bne.n	800d030 <MAP_makeCmdList+0xd4>
 800d014:	79ba      	ldrb	r2, [r7, #6]
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	3b01      	subs	r3, #1
 800d01a:	497a      	ldr	r1, [pc, #488]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d01c:	0152      	lsls	r2, r2, #5
 800d01e:	4413      	add	r3, r2
 800d020:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d024:	8a3a      	ldrh	r2, [r7, #16]
 800d026:	429a      	cmp	r2, r3
 800d028:	d102      	bne.n	800d030 <MAP_makeCmdList+0xd4>
 800d02a:	2303      	movs	r3, #3
 800d02c:	74fb      	strb	r3, [r7, #19]
 800d02e:	e155      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800d030:	79ba      	ldrb	r2, [r7, #6]
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	4974      	ldr	r1, [pc, #464]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d036:	0152      	lsls	r2, r2, #5
 800d038:	440a      	add	r2, r1
 800d03a:	4413      	add	r3, r2
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d042:	2b40      	cmp	r3, #64	; 0x40
 800d044:	d10d      	bne.n	800d062 <MAP_makeCmdList+0x106>
 800d046:	79bb      	ldrb	r3, [r7, #6]
 800d048:	1e5a      	subs	r2, r3, #1
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	496d      	ldr	r1, [pc, #436]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d04e:	0152      	lsls	r2, r2, #5
 800d050:	4413      	add	r3, r2
 800d052:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d056:	8a3a      	ldrh	r2, [r7, #16]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d102      	bne.n	800d062 <MAP_makeCmdList+0x106>
 800d05c:	2302      	movs	r3, #2
 800d05e:	74fb      	strb	r3, [r7, #19]
 800d060:	e13c      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else   while(1);
 800d062:	e7fe      	b.n	800d062 <MAP_makeCmdList+0x106>
		}else if (en_staDir == EAST){
 800d064:	797b      	ldrb	r3, [r7, #5]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d164      	bne.n	800d134 <MAP_makeCmdList+0x1d8>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800d06a:	79ba      	ldrb	r2, [r7, #6]
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	4966      	ldr	r1, [pc, #408]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d070:	0152      	lsls	r2, r2, #5
 800d072:	440a      	add	r2, r1
 800d074:	4413      	add	r3, r2
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d10d      	bne.n	800d09c <MAP_makeCmdList+0x140>
 800d080:	79ba      	ldrb	r2, [r7, #6]
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	3301      	adds	r3, #1
 800d086:	495f      	ldr	r1, [pc, #380]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d088:	0152      	lsls	r2, r2, #5
 800d08a:	4413      	add	r3, r2
 800d08c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d090:	8a3a      	ldrh	r2, [r7, #16]
 800d092:	429a      	cmp	r2, r3
 800d094:	d102      	bne.n	800d09c <MAP_makeCmdList+0x140>
 800d096:	2301      	movs	r3, #1
 800d098:	74fb      	strb	r3, [r7, #19]
 800d09a:	e11f      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800d09c:	79ba      	ldrb	r2, [r7, #6]
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	4959      	ldr	r1, [pc, #356]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d0a2:	0152      	lsls	r2, r2, #5
 800d0a4:	440a      	add	r2, r1
 800d0a6:	4413      	add	r3, r2
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 0311 	and.w	r3, r3, #17
 800d0ae:	2b10      	cmp	r3, #16
 800d0b0:	d10d      	bne.n	800d0ce <MAP_makeCmdList+0x172>
 800d0b2:	79bb      	ldrb	r3, [r7, #6]
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	4952      	ldr	r1, [pc, #328]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d0ba:	0152      	lsls	r2, r2, #5
 800d0bc:	4413      	add	r3, r2
 800d0be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d0c2:	8a3a      	ldrh	r2, [r7, #16]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d102      	bne.n	800d0ce <MAP_makeCmdList+0x172>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	74fb      	strb	r3, [r7, #19]
 800d0cc:	e106      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800d0ce:	79ba      	ldrb	r2, [r7, #6]
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	494d      	ldr	r1, [pc, #308]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d0d4:	0152      	lsls	r2, r2, #5
 800d0d6:	440a      	add	r2, r1
 800d0d8:	4413      	add	r3, r2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d0e0:	2b40      	cmp	r3, #64	; 0x40
 800d0e2:	d10d      	bne.n	800d100 <MAP_makeCmdList+0x1a4>
 800d0e4:	79bb      	ldrb	r3, [r7, #6]
 800d0e6:	1e5a      	subs	r2, r3, #1
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	4946      	ldr	r1, [pc, #280]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d0ec:	0152      	lsls	r2, r2, #5
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d0f4:	8a3a      	ldrh	r2, [r7, #16]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d102      	bne.n	800d100 <MAP_makeCmdList+0x1a4>
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	74fb      	strb	r3, [r7, #19]
 800d0fe:	e0ed      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800d100:	79ba      	ldrb	r2, [r7, #6]
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	4940      	ldr	r1, [pc, #256]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d106:	0152      	lsls	r2, r2, #5
 800d108:	440a      	add	r2, r1
 800d10a:	4413      	add	r3, r2
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d112:	2b80      	cmp	r3, #128	; 0x80
 800d114:	d10d      	bne.n	800d132 <MAP_makeCmdList+0x1d6>
 800d116:	79ba      	ldrb	r2, [r7, #6]
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	4939      	ldr	r1, [pc, #228]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d11e:	0152      	lsls	r2, r2, #5
 800d120:	4413      	add	r3, r2
 800d122:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d126:	8a3a      	ldrh	r2, [r7, #16]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d102      	bne.n	800d132 <MAP_makeCmdList+0x1d6>
 800d12c:	2303      	movs	r3, #3
 800d12e:	74fb      	strb	r3, [r7, #19]
 800d130:	e0d4      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else   while(1);
 800d132:	e7fe      	b.n	800d132 <MAP_makeCmdList+0x1d6>
		}else if (en_staDir == SOUTH){
 800d134:	797b      	ldrb	r3, [r7, #5]
 800d136:	2b02      	cmp	r3, #2
 800d138:	d168      	bne.n	800d20c <MAP_makeCmdList+0x2b0>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800d13a:	79ba      	ldrb	r2, [r7, #6]
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	4932      	ldr	r1, [pc, #200]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d140:	0152      	lsls	r2, r2, #5
 800d142:	440a      	add	r2, r1
 800d144:	4413      	add	r3, r2
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d14c:	2b40      	cmp	r3, #64	; 0x40
 800d14e:	d10d      	bne.n	800d16c <MAP_makeCmdList+0x210>
 800d150:	79bb      	ldrb	r3, [r7, #6]
 800d152:	1e5a      	subs	r2, r3, #1
 800d154:	79fb      	ldrb	r3, [r7, #7]
 800d156:	492b      	ldr	r1, [pc, #172]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d158:	0152      	lsls	r2, r2, #5
 800d15a:	4413      	add	r3, r2
 800d15c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d160:	8a3a      	ldrh	r2, [r7, #16]
 800d162:	429a      	cmp	r2, r3
 800d164:	d102      	bne.n	800d16c <MAP_makeCmdList+0x210>
 800d166:	2302      	movs	r3, #2
 800d168:	74fb      	strb	r3, [r7, #19]
 800d16a:	e0b7      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800d16c:	79ba      	ldrb	r2, [r7, #6]
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	4925      	ldr	r1, [pc, #148]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d172:	0152      	lsls	r2, r2, #5
 800d174:	440a      	add	r2, r1
 800d176:	4413      	add	r3, r2
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d17e:	2b20      	cmp	r3, #32
 800d180:	d10d      	bne.n	800d19e <MAP_makeCmdList+0x242>
 800d182:	79ba      	ldrb	r2, [r7, #6]
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	3301      	adds	r3, #1
 800d188:	491e      	ldr	r1, [pc, #120]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d18a:	0152      	lsls	r2, r2, #5
 800d18c:	4413      	add	r3, r2
 800d18e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d192:	8a3a      	ldrh	r2, [r7, #16]
 800d194:	429a      	cmp	r2, r3
 800d196:	d102      	bne.n	800d19e <MAP_makeCmdList+0x242>
 800d198:	2301      	movs	r3, #1
 800d19a:	74fb      	strb	r3, [r7, #19]
 800d19c:	e09e      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800d19e:	79ba      	ldrb	r2, [r7, #6]
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	4919      	ldr	r1, [pc, #100]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d1a4:	0152      	lsls	r2, r2, #5
 800d1a6:	440a      	add	r2, r1
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d1b0:	2b80      	cmp	r3, #128	; 0x80
 800d1b2:	d10d      	bne.n	800d1d0 <MAP_makeCmdList+0x274>
 800d1b4:	79ba      	ldrb	r2, [r7, #6]
 800d1b6:	79fb      	ldrb	r3, [r7, #7]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	4912      	ldr	r1, [pc, #72]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d1bc:	0152      	lsls	r2, r2, #5
 800d1be:	4413      	add	r3, r2
 800d1c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d1c4:	8a3a      	ldrh	r2, [r7, #16]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d102      	bne.n	800d1d0 <MAP_makeCmdList+0x274>
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	74fb      	strb	r3, [r7, #19]
 800d1ce:	e085      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800d1d0:	79ba      	ldrb	r2, [r7, #6]
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	490c      	ldr	r1, [pc, #48]	; (800d208 <MAP_makeCmdList+0x2ac>)
 800d1d6:	0152      	lsls	r2, r2, #5
 800d1d8:	440a      	add	r2, r1
 800d1da:	4413      	add	r3, r2
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	f003 0311 	and.w	r3, r3, #17
 800d1e2:	2b10      	cmp	r3, #16
 800d1e4:	d10d      	bne.n	800d202 <MAP_makeCmdList+0x2a6>
 800d1e6:	79bb      	ldrb	r3, [r7, #6]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	4905      	ldr	r1, [pc, #20]	; (800d204 <MAP_makeCmdList+0x2a8>)
 800d1ee:	0152      	lsls	r2, r2, #5
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d1f6:	8a3a      	ldrh	r2, [r7, #16]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d102      	bne.n	800d202 <MAP_makeCmdList+0x2a6>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	74fb      	strb	r3, [r7, #19]
 800d200:	e06c      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else   while(1);
 800d202:	e7fe      	b.n	800d202 <MAP_makeCmdList+0x2a6>
 800d204:	20000718 	.word	0x20000718
 800d208:	200002f4 	.word	0x200002f4
		}else if (en_staDir == WEST){
 800d20c:	797b      	ldrb	r3, [r7, #5]
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d164      	bne.n	800d2dc <MAP_makeCmdList+0x380>
			if     (((g_sysMap[uc_staY][uc_staX] & 0x88)==0x80)&&(us_cmap[uc_staY][uc_staX-1]==us_high)) en_nowDir=WEST;
 800d212:	79ba      	ldrb	r2, [r7, #6]
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	4979      	ldr	r1, [pc, #484]	; (800d3fc <MAP_makeCmdList+0x4a0>)
 800d218:	0152      	lsls	r2, r2, #5
 800d21a:	440a      	add	r2, r1
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d224:	2b80      	cmp	r3, #128	; 0x80
 800d226:	d10d      	bne.n	800d244 <MAP_makeCmdList+0x2e8>
 800d228:	79ba      	ldrb	r2, [r7, #6]
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	4974      	ldr	r1, [pc, #464]	; (800d400 <MAP_makeCmdList+0x4a4>)
 800d230:	0152      	lsls	r2, r2, #5
 800d232:	4413      	add	r3, r2
 800d234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d238:	8a3a      	ldrh	r2, [r7, #16]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d102      	bne.n	800d244 <MAP_makeCmdList+0x2e8>
 800d23e:	2303      	movs	r3, #3
 800d240:	74fb      	strb	r3, [r7, #19]
 800d242:	e04b      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x11)==0x10)&&(us_cmap[uc_staY+1][uc_staX]==us_high)) en_nowDir=NORTH;
 800d244:	79ba      	ldrb	r2, [r7, #6]
 800d246:	79fb      	ldrb	r3, [r7, #7]
 800d248:	496c      	ldr	r1, [pc, #432]	; (800d3fc <MAP_makeCmdList+0x4a0>)
 800d24a:	0152      	lsls	r2, r2, #5
 800d24c:	440a      	add	r2, r1
 800d24e:	4413      	add	r3, r2
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 0311 	and.w	r3, r3, #17
 800d256:	2b10      	cmp	r3, #16
 800d258:	d10d      	bne.n	800d276 <MAP_makeCmdList+0x31a>
 800d25a:	79bb      	ldrb	r3, [r7, #6]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	4967      	ldr	r1, [pc, #412]	; (800d400 <MAP_makeCmdList+0x4a4>)
 800d262:	0152      	lsls	r2, r2, #5
 800d264:	4413      	add	r3, r2
 800d266:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d26a:	8a3a      	ldrh	r2, [r7, #16]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d102      	bne.n	800d276 <MAP_makeCmdList+0x31a>
 800d270:	2300      	movs	r3, #0
 800d272:	74fb      	strb	r3, [r7, #19]
 800d274:	e032      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x44)==0x40)&&(us_cmap[uc_staY-1][uc_staX]==us_high)) en_nowDir=SOUTH;
 800d276:	79ba      	ldrb	r2, [r7, #6]
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	4960      	ldr	r1, [pc, #384]	; (800d3fc <MAP_makeCmdList+0x4a0>)
 800d27c:	0152      	lsls	r2, r2, #5
 800d27e:	440a      	add	r2, r1
 800d280:	4413      	add	r3, r2
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d288:	2b40      	cmp	r3, #64	; 0x40
 800d28a:	d10d      	bne.n	800d2a8 <MAP_makeCmdList+0x34c>
 800d28c:	79bb      	ldrb	r3, [r7, #6]
 800d28e:	1e5a      	subs	r2, r3, #1
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	495b      	ldr	r1, [pc, #364]	; (800d400 <MAP_makeCmdList+0x4a4>)
 800d294:	0152      	lsls	r2, r2, #5
 800d296:	4413      	add	r3, r2
 800d298:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d29c:	8a3a      	ldrh	r2, [r7, #16]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d102      	bne.n	800d2a8 <MAP_makeCmdList+0x34c>
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	74fb      	strb	r3, [r7, #19]
 800d2a6:	e019      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else if(((g_sysMap[uc_staY][uc_staX] & 0x22)==0x20)&&(us_cmap[uc_staY][uc_staX+1]==us_high)) en_nowDir=EAST;
 800d2a8:	79ba      	ldrb	r2, [r7, #6]
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	4953      	ldr	r1, [pc, #332]	; (800d3fc <MAP_makeCmdList+0x4a0>)
 800d2ae:	0152      	lsls	r2, r2, #5
 800d2b0:	440a      	add	r2, r1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d10d      	bne.n	800d2da <MAP_makeCmdList+0x37e>
 800d2be:	79ba      	ldrb	r2, [r7, #6]
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	494e      	ldr	r1, [pc, #312]	; (800d400 <MAP_makeCmdList+0x4a4>)
 800d2c6:	0152      	lsls	r2, r2, #5
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d2ce:	8a3a      	ldrh	r2, [r7, #16]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d102      	bne.n	800d2da <MAP_makeCmdList+0x37e>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	74fb      	strb	r3, [r7, #19]
 800d2d8:	e000      	b.n	800d2dc <MAP_makeCmdList+0x380>
			else   while(1);
 800d2da:	e7fe      	b.n	800d2da <MAP_makeCmdList+0x37e>
		}
		
		en_tempDir = (enMAP_HEAD_DIR)( (en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3 );		// 方向更新
 800d2dc:	7cfa      	ldrb	r2, [r7, #19]
 800d2de:	797b      	ldrb	r3, [r7, #5]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0303 	and.w	r3, r3, #3
 800d2e8:	73fb      	strb	r3, [r7, #15]
		en_staDir = en_nowDir;
 800d2ea:	7cfb      	ldrb	r3, [r7, #19]
 800d2ec:	717b      	strb	r3, [r7, #5]

		if (en_tempDir == NORTH){
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d103      	bne.n	800d2fc <MAP_makeCmdList+0x3a0>
			uc_goStep = uc_goStep + 2;
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
 800d2f6:	3302      	adds	r3, #2
 800d2f8:	75fb      	strb	r3, [r7, #23]
 800d2fa:	e037      	b.n	800d36c <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == EAST){
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d110      	bne.n	800d324 <MAP_makeCmdList+0x3c8>
			dcom[us_pt] = uc_goStep;
 800d302:	8abb      	ldrh	r3, [r7, #20]
 800d304:	493f      	ldr	r1, [pc, #252]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d306:	7dfa      	ldrb	r2, [r7, #23]
 800d308:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R90;
 800d30a:	8abb      	ldrh	r3, [r7, #20]
 800d30c:	3301      	adds	r3, #1
 800d30e:	82bb      	strh	r3, [r7, #20]
 800d310:	8abb      	ldrh	r3, [r7, #20]
 800d312:	4a3c      	ldr	r2, [pc, #240]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d314:	2148      	movs	r1, #72	; 0x48
 800d316:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800d318:	2302      	movs	r3, #2
 800d31a:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800d31c:	8abb      	ldrh	r3, [r7, #20]
 800d31e:	3301      	adds	r3, #1
 800d320:	82bb      	strh	r3, [r7, #20]
 800d322:	e023      	b.n	800d36c <MAP_makeCmdList+0x410>
		}
		else if (en_tempDir == WEST){
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	2b03      	cmp	r3, #3
 800d328:	d110      	bne.n	800d34c <MAP_makeCmdList+0x3f0>
			dcom[us_pt] = uc_goStep;
 800d32a:	8abb      	ldrh	r3, [r7, #20]
 800d32c:	4935      	ldr	r1, [pc, #212]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d32e:	7dfa      	ldrb	r2, [r7, #23]
 800d330:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = L90;
 800d332:	8abb      	ldrh	r3, [r7, #20]
 800d334:	3301      	adds	r3, #1
 800d336:	82bb      	strh	r3, [r7, #20]
 800d338:	8abb      	ldrh	r3, [r7, #20]
 800d33a:	4a32      	ldr	r2, [pc, #200]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d33c:	2149      	movs	r1, #73	; 0x49
 800d33e:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800d340:	2302      	movs	r3, #2
 800d342:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800d344:	8abb      	ldrh	r3, [r7, #20]
 800d346:	3301      	adds	r3, #1
 800d348:	82bb      	strh	r3, [r7, #20]
 800d34a:	e00f      	b.n	800d36c <MAP_makeCmdList+0x410>
		}
		else{
			dcom[us_pt] = uc_goStep;
 800d34c:	8abb      	ldrh	r3, [r7, #20]
 800d34e:	492d      	ldr	r1, [pc, #180]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d350:	7dfa      	ldrb	r2, [r7, #23]
 800d352:	54ca      	strb	r2, [r1, r3]
			dcom[++us_pt] = R180;
 800d354:	8abb      	ldrh	r3, [r7, #20]
 800d356:	3301      	adds	r3, #1
 800d358:	82bb      	strh	r3, [r7, #20]
 800d35a:	8abb      	ldrh	r3, [r7, #20]
 800d35c:	4a29      	ldr	r2, [pc, #164]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d35e:	214a      	movs	r1, #74	; 0x4a
 800d360:	54d1      	strb	r1, [r2, r3]
			uc_goStep = 2;
 800d362:	2302      	movs	r3, #2
 800d364:	75fb      	strb	r3, [r7, #23]
			us_pt++;
 800d366:	8abb      	ldrh	r3, [r7, #20]
 800d368:	3301      	adds	r3, #1
 800d36a:	82bb      	strh	r3, [r7, #20]
		}

		if      (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 800d36c:	7cfb      	ldrb	r3, [r7, #19]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d103      	bne.n	800d37a <MAP_makeCmdList+0x41e>
 800d372:	79bb      	ldrb	r3, [r7, #6]
 800d374:	3301      	adds	r3, #1
 800d376:	71bb      	strb	r3, [r7, #6]
 800d378:	e013      	b.n	800d3a2 <MAP_makeCmdList+0x446>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 800d37a:	7cfb      	ldrb	r3, [r7, #19]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d103      	bne.n	800d388 <MAP_makeCmdList+0x42c>
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	3301      	adds	r3, #1
 800d384:	71fb      	strb	r3, [r7, #7]
 800d386:	e00c      	b.n	800d3a2 <MAP_makeCmdList+0x446>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 800d388:	7cfb      	ldrb	r3, [r7, #19]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d103      	bne.n	800d396 <MAP_makeCmdList+0x43a>
 800d38e:	79bb      	ldrb	r3, [r7, #6]
 800d390:	3b01      	subs	r3, #1
 800d392:	71bb      	strb	r3, [r7, #6]
 800d394:	e005      	b.n	800d3a2 <MAP_makeCmdList+0x446>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 800d396:	7cfb      	ldrb	r3, [r7, #19]
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d102      	bne.n	800d3a2 <MAP_makeCmdList+0x446>
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	71fb      	strb	r3, [r7, #7]
		
		en_staDir = en_nowDir;
 800d3a2:	7cfb      	ldrb	r3, [r7, #19]
 800d3a4:	717b      	strb	r3, [r7, #5]
		
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800d3a6:	79fa      	ldrb	r2, [r7, #7]
 800d3a8:	793b      	ldrb	r3, [r7, #4]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	f47f ade9 	bne.w	800cf82 <MAP_makeCmdList+0x26>
 800d3b0:	79ba      	ldrb	r2, [r7, #6]
 800d3b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d000      	beq.n	800d3bc <MAP_makeCmdList+0x460>
		us_high = us_cmap[uc_staY][uc_staX]-1;
 800d3ba:	e5e2      	b.n	800cf82 <MAP_makeCmdList+0x26>
		if ((uc_staX == uc_endX) &&(uc_staY == uc_endY)) break;
 800d3bc:	bf00      	nop
	}
	
	/* 超地信旋回用のコマンドリスト作成 */
	dcom[us_pt] = uc_goStep;
 800d3be:	8abb      	ldrh	r3, [r7, #20]
 800d3c0:	4910      	ldr	r1, [pc, #64]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d3c2:	7dfa      	ldrb	r2, [r7, #23]
 800d3c4:	54ca      	strb	r2, [r1, r3]
	dcom[++us_pt] = STOP;
 800d3c6:	8abb      	ldrh	r3, [r7, #20]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	82bb      	strh	r3, [r7, #20]
 800d3cc:	8abb      	ldrh	r3, [r7, #20]
 800d3ce:	4a0d      	ldr	r2, [pc, #52]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	54d1      	strb	r1, [r2, r3]
	dcom[++us_pt] = CEND;
 800d3d4:	8abb      	ldrh	r3, [r7, #20]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	82bb      	strh	r3, [r7, #20]
 800d3da:	8abb      	ldrh	r3, [r7, #20]
 800d3dc:	4a09      	ldr	r2, [pc, #36]	; (800d404 <MAP_makeCmdList+0x4a8>)
 800d3de:	21fa      	movs	r1, #250	; 0xfa
 800d3e0:	54d1      	strb	r1, [r2, r3]
	us_totalCmd = us_pt+1;			// コマンド総数
 800d3e2:	8abb      	ldrh	r3, [r7, #20]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	4b07      	ldr	r3, [pc, #28]	; (800d408 <MAP_makeCmdList+0x4ac>)
 800d3ea:	801a      	strh	r2, [r3, #0]


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	797a      	ldrb	r2, [r7, #5]
 800d3f0:	701a      	strb	r2, [r3, #0]
}
 800d3f2:	bf00      	nop
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bc90      	pop	{r4, r7}
 800d3fa:	4770      	bx	lr
 800d3fc:	200002f4 	.word	0x200002f4
 800d400:	20000718 	.word	0x20000718
 800d404:	20005f04 	.word	0x20005f04
 800d408:	20008fc0 	.word	0x20008fc0

0800d40c <MAP_makeSuraCmdList>:

void MAP_makeSuraCmdList( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
	uint16_t dcom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t i=0,j=0;					// roop
 800d416:	2300      	movs	r3, #0
 800d418:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d41c:	f102 0206 	add.w	r2, r2, #6
 800d420:	8013      	strh	r3, [r2, #0]
 800d422:	2300      	movs	r3, #0
 800d424:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d428:	f102 0204 	add.w	r2, r2, #4
 800d42c:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ ){
 800d42e:	2300      	movs	r3, #0
 800d430:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d434:	f102 0206 	add.w	r2, r2, #6
 800d438:	8013      	strh	r3, [r2, #0]
 800d43a:	e01d      	b.n	800d478 <MAP_makeSuraCmdList+0x6c>
		dcom_temp[i] = dcom[i];
 800d43c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d440:	f103 0306 	add.w	r3, r3, #6
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	4aac      	ldr	r2, [pc, #688]	; (800d6f8 <MAP_makeSuraCmdList+0x2ec>)
 800d448:	5cd2      	ldrb	r2, [r2, r3]
 800d44a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d44e:	f103 0306 	add.w	r3, r3, #6
 800d452:	881b      	ldrh	r3, [r3, #0]
 800d454:	b292      	uxth	r2, r2
 800d456:	f107 0108 	add.w	r1, r7, #8
 800d45a:	005b      	lsls	r3, r3, #1
 800d45c:	440b      	add	r3, r1
 800d45e:	f823 2c04 	strh.w	r2, [r3, #-4]
	for( i=0; i<us_totalCmd; i++ ){
 800d462:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d466:	f103 0306 	add.w	r3, r3, #6
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	3301      	adds	r3, #1
 800d46e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d472:	f102 0206 	add.w	r2, r2, #6
 800d476:	8013      	strh	r3, [r2, #0]
 800d478:	4ba0      	ldr	r3, [pc, #640]	; (800d6fc <MAP_makeSuraCmdList+0x2f0>)
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d480:	f102 0206 	add.w	r2, r2, #6
 800d484:	8812      	ldrh	r2, [r2, #0]
 800d486:	429a      	cmp	r2, r3
 800d488:	d3d8      	bcc.n	800d43c <MAP_makeSuraCmdList+0x30>
	}

	i = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d490:	f102 0206 	add.w	r2, r2, #6
 800d494:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		if( dcom_temp[i] == R90 ){		// 右90°
 800d496:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d49a:	f103 0306 	add.w	r3, r3, #6
 800d49e:	881b      	ldrh	r3, [r3, #0]
 800d4a0:	f107 0208 	add.w	r2, r7, #8
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800d4ac:	2b48      	cmp	r3, #72	; 0x48
 800d4ae:	d140      	bne.n	800d532 <MAP_makeSuraCmdList+0x126>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800d4b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d4b4:	f103 0306 	add.w	r3, r3, #6
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	f107 0208 	add.w	r2, r7, #8
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4413      	add	r3, r2
 800d4c4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d4c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d4cc:	f103 0306 	add.w	r3, r3, #6
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	3a01      	subs	r2, #1
 800d4d6:	b292      	uxth	r2, r2
 800d4d8:	f107 0108 	add.w	r1, r7, #8
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	440b      	add	r3, r1
 800d4e0:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800d4e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d4e8:	f103 0306 	add.w	r3, r3, #6
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	f107 0208 	add.w	r2, r7, #8
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d4fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d500:	f103 0306 	add.w	r3, r3, #6
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	3301      	adds	r3, #1
 800d508:	3a01      	subs	r2, #1
 800d50a:	b292      	uxth	r2, r2
 800d50c:	f107 0108 	add.w	r1, r7, #8
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	440b      	add	r3, r1
 800d514:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = R90S;		// 右スラローム90°
 800d518:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d51c:	f103 0306 	add.w	r3, r3, #6
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	f107 0208 	add.w	r2, r7, #8
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	4413      	add	r3, r2
 800d52a:	224c      	movs	r2, #76	; 0x4c
 800d52c:	f823 2c04 	strh.w	r2, [r3, #-4]
 800d530:	e05a      	b.n	800d5e8 <MAP_makeSuraCmdList+0x1dc>
		}
		else if( dcom_temp[i] == L90 ){	// 左90°
 800d532:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d536:	f103 0306 	add.w	r3, r3, #6
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	f107 0208 	add.w	r2, r7, #8
 800d540:	005b      	lsls	r3, r3, #1
 800d542:	4413      	add	r3, r2
 800d544:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800d548:	2b49      	cmp	r3, #73	; 0x49
 800d54a:	d140      	bne.n	800d5ce <MAP_makeSuraCmdList+0x1c2>
			dcom_temp[i-1] -= 1;		// 1つ手前を引く
 800d54c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d550:	f103 0306 	add.w	r3, r3, #6
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	3b01      	subs	r3, #1
 800d558:	f107 0208 	add.w	r2, r7, #8
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	4413      	add	r3, r2
 800d560:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d564:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d568:	f103 0306 	add.w	r3, r3, #6
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	3b01      	subs	r3, #1
 800d570:	3a01      	subs	r2, #1
 800d572:	b292      	uxth	r2, r2
 800d574:	f107 0108 	add.w	r1, r7, #8
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	440b      	add	r3, r1
 800d57c:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i+1] -= 1;		// 1つ手前を引く
 800d580:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d584:	f103 0306 	add.w	r3, r3, #6
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	3301      	adds	r3, #1
 800d58c:	f107 0208 	add.w	r2, r7, #8
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	4413      	add	r3, r2
 800d594:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d598:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d59c:	f103 0306 	add.w	r3, r3, #6
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	3a01      	subs	r2, #1
 800d5a6:	b292      	uxth	r2, r2
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	440b      	add	r3, r1
 800d5b0:	f823 2c04 	strh.w	r2, [r3, #-4]
			dcom_temp[i] = L90S;		// 左スラローム90°
 800d5b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d5b8:	f103 0306 	add.w	r3, r3, #6
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	f107 0208 	add.w	r2, r7, #8
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	4413      	add	r3, r2
 800d5c6:	224d      	movs	r2, #77	; 0x4d
 800d5c8:	f823 2c04 	strh.w	r2, [r3, #-4]
 800d5cc:	e00c      	b.n	800d5e8 <MAP_makeSuraCmdList+0x1dc>
		}
		else{
			if( dcom_temp[i] == CEND ){
 800d5ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d5d2:	f103 0306 	add.w	r3, r3, #6
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	f107 0208 	add.w	r2, r7, #8
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	4413      	add	r3, r2
 800d5e0:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800d5e4:	2bfa      	cmp	r3, #250	; 0xfa
 800d5e6:	d00b      	beq.n	800d600 <MAP_makeSuraCmdList+0x1f4>
				break;
			}
		}
		i++;
 800d5e8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d5ec:	f103 0306 	add.w	r3, r3, #6
 800d5f0:	881b      	ldrh	r3, [r3, #0]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d5f8:	f102 0206 	add.w	r2, r2, #6
 800d5fc:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i] == R90 ){		// 右90°
 800d5fe:	e74a      	b.n	800d496 <MAP_makeSuraCmdList+0x8a>
				break;
 800d600:	bf00      	nop
	}

	i = j = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d608:	f102 0204 	add.w	r2, r2, #4
 800d60c:	8013      	strh	r3, [r2, #0]
 800d60e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d612:	f103 0304 	add.w	r3, r3, #4
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d61c:	f102 0206 	add.w	r2, r2, #6
 800d620:	8013      	strh	r3, [r2, #0]

	/* スラロームコマンド変換 */
	while(1)
	{
		if( dcom_temp[i+1] == CEND ){
 800d622:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d626:	f103 0306 	add.w	r3, r3, #6
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	3301      	adds	r3, #1
 800d62e:	f107 0208 	add.w	r2, r7, #8
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	4413      	add	r3, r2
 800d636:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800d63a:	2bfa      	cmp	r3, #250	; 0xfa
 800d63c:	d111      	bne.n	800d662 <MAP_makeSuraCmdList+0x256>
			scom[j] = STOP;
 800d63e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d642:	f103 0304 	add.w	r3, r3, #4
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	4a2d      	ldr	r2, [pc, #180]	; (800d700 <MAP_makeSuraCmdList+0x2f4>)
 800d64a:	2100      	movs	r1, #0
 800d64c:	54d1      	strb	r1, [r2, r3]
			scom[j+1] = CEND;
 800d64e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d652:	f103 0304 	add.w	r3, r3, #4
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	3301      	adds	r3, #1
 800d65a:	4a29      	ldr	r2, [pc, #164]	; (800d700 <MAP_makeSuraCmdList+0x2f4>)
 800d65c:	21fa      	movs	r1, #250	; 0xfa
 800d65e:	54d1      	strb	r1, [r2, r3]
			break;
 800d660:	e041      	b.n	800d6e6 <MAP_makeSuraCmdList+0x2da>
		}
		else
		{
			/* データがストップコマンドだったら */
			if( dcom_temp[i] == 0 ){
 800d662:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d666:	f103 0306 	add.w	r3, r3, #6
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	f107 0208 	add.w	r2, r7, #8
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	4413      	add	r3, r2
 800d674:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10a      	bne.n	800d692 <MAP_makeSuraCmdList+0x286>
				i++;
 800d67c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d680:	f103 0306 	add.w	r3, r3, #6
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d68c:	f102 0206 	add.w	r2, r2, #6
 800d690:	8013      	strh	r3, [r2, #0]
			}
			
			scom[j] = dcom_temp[i];
 800d692:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d696:	f103 0306 	add.w	r3, r3, #6
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	f107 0208 	add.w	r2, r7, #8
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d6a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d6ac:	f103 0304 	add.w	r3, r3, #4
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	b2d1      	uxtb	r1, r2
 800d6b4:	4a12      	ldr	r2, [pc, #72]	; (800d700 <MAP_makeSuraCmdList+0x2f4>)
 800d6b6:	54d1      	strb	r1, [r2, r3]
			
			i++;
 800d6b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d6bc:	f103 0306 	add.w	r3, r3, #6
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d6c8:	f102 0206 	add.w	r2, r2, #6
 800d6cc:	8013      	strh	r3, [r2, #0]
			j++;
 800d6ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d6d2:	f103 0304 	add.w	r3, r3, #4
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d6de:	f102 0204 	add.w	r2, r2, #4
 800d6e2:	8013      	strh	r3, [r2, #0]
		if( dcom_temp[i+1] == CEND ){
 800d6e4:	e79d      	b.n	800d622 <MAP_makeSuraCmdList+0x216>
		}
	}
}
 800d6e6:	bf00      	nop
 800d6e8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20005f04 	.word	0x20005f04
 800d6fc:	20008fc0 	.word	0x20008fc0
 800d700:	20006f0c 	.word	0x20006f0c

0800d704 <MAP_makeSkewCmdList>:

void MAP_makeSkewCmdList( void )
{
 800d704:	b480      	push	{r7}
 800d706:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
	uint16_t	scom_temp[4096];			// 半区画超信旋回コマンドリスト
	uint16_t	i;							// roop
	uint16_t	c1, c2, c3, c4;				// 計算用
	uint16_t	x;
	uint16_t	ct_n=0, ct_st=0;
 800d70e:	2300      	movs	r3, #0
 800d710:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d714:	f102 0212 	add.w	r2, r2, #18
 800d718:	8013      	strh	r3, [r2, #0]
 800d71a:	2300      	movs	r3, #0
 800d71c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d720:	f102 0210 	add.w	r2, r2, #16
 800d724:	8013      	strh	r3, [r2, #0]
	uint16_t	flag = 3;					//	斜め走行用バッファ  0:複合コマンド　1:斜め  2:S135N → N135S  3:直進
 800d726:	2303      	movs	r3, #3
 800d728:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d72c:	f102 020e 	add.w	r2, r2, #14
 800d730:	8013      	strh	r3, [r2, #0]
	
	/* 超地信旋回コマンドをコピー */
	for( i=0; i<us_totalCmd; i++ )
 800d732:	2300      	movs	r3, #0
 800d734:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d738:	f102 0216 	add.w	r2, r2, #22
 800d73c:	8013      	strh	r3, [r2, #0]
 800d73e:	e01d      	b.n	800d77c <MAP_makeSkewCmdList+0x78>
	{
		scom_temp[i] = scom[i];
 800d740:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d744:	f103 0316 	add.w	r3, r3, #22
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	4acb      	ldr	r2, [pc, #812]	; (800da78 <MAP_makeSkewCmdList+0x374>)
 800d74c:	5cd2      	ldrb	r2, [r2, r3]
 800d74e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d752:	f103 0316 	add.w	r3, r3, #22
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	b292      	uxth	r2, r2
 800d75a:	f107 0118 	add.w	r1, r7, #24
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	440b      	add	r3, r1
 800d762:	f823 2c14 	strh.w	r2, [r3, #-20]
	for( i=0; i<us_totalCmd; i++ )
 800d766:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d76a:	f103 0316 	add.w	r3, r3, #22
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d776:	f102 0216 	add.w	r2, r2, #22
 800d77a:	8013      	strh	r3, [r2, #0]
 800d77c:	4bbf      	ldr	r3, [pc, #764]	; (800da7c <MAP_makeSkewCmdList+0x378>)
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d784:	f102 0216 	add.w	r2, r2, #22
 800d788:	8812      	ldrh	r2, [r2, #0]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d3d8      	bcc.n	800d740 <MAP_makeSkewCmdList+0x3c>
	}

	i=0;
 800d78e:	2300      	movs	r3, #0
 800d790:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d794:	f102 0216 	add.w	r2, r2, #22
 800d798:	8013      	strh	r3, [r2, #0]

	/* 配列が旋回コマンドかをチェック */
	while(1)
	{
		c1 = scom_temp[ct_st];
 800d79a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d79e:	f103 0310 	add.w	r3, r3, #16
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	f107 0218 	add.w	r2, r7, #24
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800d7b0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d7b4:	f102 020c 	add.w	r2, r2, #12
 800d7b8:	8013      	strh	r3, [r2, #0]
		c2 = scom_temp[ct_st+1];
 800d7ba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d7be:	f103 0310 	add.w	r3, r3, #16
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	f107 0218 	add.w	r2, r7, #24
 800d7ca:	005b      	lsls	r3, r3, #1
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800d7d2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d7d6:	f102 020a 	add.w	r2, r2, #10
 800d7da:	8013      	strh	r3, [r2, #0]
		c3 = scom_temp[ct_st+2];
 800d7dc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d7e0:	f103 0310 	add.w	r3, r3, #16
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	3302      	adds	r3, #2
 800d7e8:	f107 0218 	add.w	r2, r7, #24
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800d7f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d7f8:	f102 0208 	add.w	r2, r2, #8
 800d7fc:	8013      	strh	r3, [r2, #0]
		c4 = scom_temp[ct_st+3];
 800d7fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d802:	f103 0310 	add.w	r3, r3, #16
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	3303      	adds	r3, #3
 800d80a:	f107 0218 	add.w	r2, r7, #24
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	4413      	add	r3, r2
 800d812:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800d816:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d81a:	f102 0206 	add.w	r2, r2, #6
 800d81e:	8013      	strh	r3, [r2, #0]

		//	直進 → 右45度 → 斜め
		if( (c1<=GO32) && (c2==R90S) && (c3==L90S) )
 800d820:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d824:	f103 030c 	add.w	r3, r3, #12
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	2b20      	cmp	r3, #32
 800d82c:	f200 808d 	bhi.w	800d94a <MAP_makeSkewCmdList+0x246>
 800d830:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d834:	f103 030a 	add.w	r3, r3, #10
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	2b4c      	cmp	r3, #76	; 0x4c
 800d83c:	f040 8085 	bne.w	800d94a <MAP_makeSkewCmdList+0x246>
 800d840:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d844:	f103 0308 	add.w	r3, r3, #8
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	2b4d      	cmp	r3, #77	; 0x4d
 800d84c:	d17d      	bne.n	800d94a <MAP_makeSkewCmdList+0x246>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800d84e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d852:	f103 0310 	add.w	r3, r3, #16
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d131      	bne.n	800d8c0 <MAP_makeSkewCmdList+0x1bc>
 800d85c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d860:	f103 030c 	add.w	r3, r3, #12
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d12a      	bne.n	800d8c0 <MAP_makeSkewCmdList+0x1bc>
				tcom[ ct_n ] = scom_temp[ct_st];
 800d86a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d86e:	f103 0310 	add.w	r3, r3, #16
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	f107 0218 	add.w	r2, r7, #24
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800d880:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d884:	f103 0312 	add.w	r3, r3, #18
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	b2d1      	uxtb	r1, r2
 800d88c:	4a7c      	ldr	r2, [pc, #496]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800d88e:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800d890:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d894:	f103 0310 	add.w	r3, r3, #16
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d8a0:	f102 0210 	add.w	r2, r2, #16
 800d8a4:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800d8a6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d8aa:	f103 0312 	add.w	r3, r3, #18
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d8b6:	f102 0212 	add.w	r2, r2, #18
 800d8ba:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800d8bc:	f000 becb 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800d8c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d8c4:	f103 030c 	add.w	r3, r3, #12
 800d8c8:	881b      	ldrh	r3, [r3, #0]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d015      	beq.n	800d8fa <MAP_makeSkewCmdList+0x1f6>
 800d8ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d8d2:	f103 030c 	add.w	r3, r3, #12
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d8de:	f103 0312 	add.w	r3, r3, #18
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	1c59      	adds	r1, r3, #1
 800d8e6:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800d8ea:	f100 0012 	add.w	r0, r0, #18
 800d8ee:	8001      	strh	r1, [r0, #0]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	1e53      	subs	r3, r2, #1
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	4b62      	ldr	r3, [pc, #392]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800d8f8:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = RS45N;
 800d8fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d8fe:	f103 0312 	add.w	r3, r3, #18
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	1c5a      	adds	r2, r3, #1
 800d906:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800d90a:	f101 0112 	add.w	r1, r1, #18
 800d90e:	800a      	strh	r2, [r1, #0]
 800d910:	461a      	mov	r2, r3
 800d912:	4b5b      	ldr	r3, [pc, #364]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800d914:	2199      	movs	r1, #153	; 0x99
 800d916:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800d918:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d91c:	f103 0310 	add.w	r3, r3, #16
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d928:	f102 0210 	add.w	r2, r2, #16
 800d92c:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800d92e:	2351      	movs	r3, #81	; 0x51
 800d930:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d934:	f102 0214 	add.w	r2, r2, #20
 800d938:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d940:	f102 020e 	add.w	r2, r2, #14
 800d944:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800d946:	f000 be86 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
			}
		}
		//	直進 → 左45度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==R90S) )
 800d94a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d94e:	f103 030c 	add.w	r3, r3, #12
 800d952:	881b      	ldrh	r3, [r3, #0]
 800d954:	2b20      	cmp	r3, #32
 800d956:	f200 8095 	bhi.w	800da84 <MAP_makeSkewCmdList+0x380>
 800d95a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d95e:	f103 030a 	add.w	r3, r3, #10
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	2b4d      	cmp	r3, #77	; 0x4d
 800d966:	f040 808d 	bne.w	800da84 <MAP_makeSkewCmdList+0x380>
 800d96a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d96e:	f103 0308 	add.w	r3, r3, #8
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	2b4c      	cmp	r3, #76	; 0x4c
 800d976:	f040 8085 	bne.w	800da84 <MAP_makeSkewCmdList+0x380>
		{
			if((ct_st == 0) && (c1-1 == 0)){
 800d97a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d97e:	f103 0310 	add.w	r3, r3, #16
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d131      	bne.n	800d9ec <MAP_makeSkewCmdList+0x2e8>
 800d988:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d98c:	f103 030c 	add.w	r3, r3, #12
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d12a      	bne.n	800d9ec <MAP_makeSkewCmdList+0x2e8>
				tcom[ ct_n ] = scom_temp[ct_st];
 800d996:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d99a:	f103 0310 	add.w	r3, r3, #16
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	f107 0218 	add.w	r2, r7, #24
 800d9a4:	005b      	lsls	r3, r3, #1
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800d9ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d9b0:	f103 0312 	add.w	r3, r3, #18
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	b2d1      	uxtb	r1, r2
 800d9b8:	4a31      	ldr	r2, [pc, #196]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800d9ba:	54d1      	strb	r1, [r2, r3]
				ct_st ++;
 800d9bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d9c0:	f103 0310 	add.w	r3, r3, #16
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d9cc:	f102 0210 	add.w	r2, r2, #16
 800d9d0:	8013      	strh	r3, [r2, #0]
				ct_n ++;
 800d9d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d9d6:	f103 0312 	add.w	r3, r3, #18
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800d9e2:	f102 0212 	add.w	r2, r2, #18
 800d9e6:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800d9e8:	f000 be35 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
			}
			else{
				if( c1-1 != 0 ) tcom[ ct_n++ ] = c1 - 1;		//	前の複合コマンドによって直線区間が消えない場合
 800d9ec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d9f0:	f103 030c 	add.w	r3, r3, #12
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d015      	beq.n	800da26 <MAP_makeSkewCmdList+0x322>
 800d9fa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800d9fe:	f103 030c 	add.w	r3, r3, #12
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b2da      	uxtb	r2, r3
 800da06:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800da0a:	f103 0312 	add.w	r3, r3, #18
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	1c59      	adds	r1, r3, #1
 800da12:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800da16:	f100 0012 	add.w	r0, r0, #18
 800da1a:	8001      	strh	r1, [r0, #0]
 800da1c:	4619      	mov	r1, r3
 800da1e:	1e53      	subs	r3, r2, #1
 800da20:	b2da      	uxtb	r2, r3
 800da22:	4b17      	ldr	r3, [pc, #92]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800da24:	545a      	strb	r2, [r3, r1]
				tcom[ ct_n++ ] = LS45N;
 800da26:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800da2a:	f103 0312 	add.w	r3, r3, #18
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800da36:	f101 0112 	add.w	r1, r1, #18
 800da3a:	800a      	strh	r2, [r1, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	4b10      	ldr	r3, [pc, #64]	; (800da80 <MAP_makeSkewCmdList+0x37c>)
 800da40:	219a      	movs	r1, #154	; 0x9a
 800da42:	5499      	strb	r1, [r3, r2]
				ct_st ++;
 800da44:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800da48:	f103 0310 	add.w	r3, r3, #16
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	3301      	adds	r3, #1
 800da50:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800da54:	f102 0210 	add.w	r2, r2, #16
 800da58:	8013      	strh	r3, [r2, #0]

				x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800da5a:	2351      	movs	r3, #81	; 0x51
 800da5c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800da60:	f102 0214 	add.w	r2, r2, #20
 800da64:	8013      	strh	r3, [r2, #0]
				flag = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800da6c:	f102 020e 	add.w	r2, r2, #14
 800da70:	8013      	strh	r3, [r2, #0]
			if((ct_st == 0) && (c1-1 == 0)){
 800da72:	f000 bdf0 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
 800da76:	bf00      	nop
 800da78:	20006f0c 	.word	0x20006f0c
 800da7c:	20008fc0 	.word	0x20008fc0
 800da80:	20007f48 	.word	0x20007f48
			}
		}

		//	直進 → 右90度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3<=GO32) )
 800da84:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800da88:	f103 030c 	add.w	r3, r3, #12
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	2b20      	cmp	r3, #32
 800da90:	d843      	bhi.n	800db1a <MAP_makeSkewCmdList+0x416>
 800da92:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800da96:	f103 030a 	add.w	r3, r3, #10
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	2b4c      	cmp	r3, #76	; 0x4c
 800da9e:	d13c      	bne.n	800db1a <MAP_makeSkewCmdList+0x416>
 800daa0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800daa4:	f103 0308 	add.w	r3, r3, #8
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	2b20      	cmp	r3, #32
 800daac:	d835      	bhi.n	800db1a <MAP_makeSkewCmdList+0x416>
		{
			tcom[ ct_n++ ] = c1;
 800daae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dab2:	f103 0312 	add.w	r3, r3, #18
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	1c5a      	adds	r2, r3, #1
 800daba:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dabe:	f101 0112 	add.w	r1, r1, #18
 800dac2:	800a      	strh	r2, [r1, #0]
 800dac4:	461a      	mov	r2, r3
 800dac6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800daca:	f103 030c 	add.w	r3, r3, #12
 800dace:	881b      	ldrh	r3, [r3, #0]
 800dad0:	b2d9      	uxtb	r1, r3
 800dad2:	4bc0      	ldr	r3, [pc, #768]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dad4:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800dad6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dada:	f103 0312 	add.w	r3, r3, #18
 800dade:	881b      	ldrh	r3, [r3, #0]
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dae6:	f101 0112 	add.w	r1, r1, #18
 800daea:	800a      	strh	r2, [r1, #0]
 800daec:	461a      	mov	r2, r3
 800daee:	4bb9      	ldr	r3, [pc, #740]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800daf0:	214c      	movs	r1, #76	; 0x4c
 800daf2:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800daf4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800daf8:	f103 0310 	add.w	r3, r3, #16
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	3302      	adds	r3, #2
 800db00:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800db04:	f102 0210 	add.w	r2, r2, #16
 800db08:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800db0a:	2303      	movs	r3, #3
 800db0c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800db10:	f102 020e 	add.w	r2, r2, #14
 800db14:	8013      	strh	r3, [r2, #0]
 800db16:	f000 bd9e 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左90度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c3<=GO32) )
 800db1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db1e:	f103 030c 	add.w	r3, r3, #12
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	2b20      	cmp	r3, #32
 800db26:	d843      	bhi.n	800dbb0 <MAP_makeSkewCmdList+0x4ac>
 800db28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db2c:	f103 030a 	add.w	r3, r3, #10
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	2b4d      	cmp	r3, #77	; 0x4d
 800db34:	d13c      	bne.n	800dbb0 <MAP_makeSkewCmdList+0x4ac>
 800db36:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db3a:	f103 0308 	add.w	r3, r3, #8
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	2b20      	cmp	r3, #32
 800db42:	d835      	bhi.n	800dbb0 <MAP_makeSkewCmdList+0x4ac>
		{
			tcom[ ct_n++ ] = c1;
 800db44:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db48:	f103 0312 	add.w	r3, r3, #18
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	1c5a      	adds	r2, r3, #1
 800db50:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800db54:	f101 0112 	add.w	r1, r1, #18
 800db58:	800a      	strh	r2, [r1, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db60:	f103 030c 	add.w	r3, r3, #12
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	b2d9      	uxtb	r1, r3
 800db68:	4b9a      	ldr	r3, [pc, #616]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800db6a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800db6c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db70:	f103 0312 	add.w	r3, r3, #18
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800db7c:	f101 0112 	add.w	r1, r1, #18
 800db80:	800a      	strh	r2, [r1, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	4b93      	ldr	r3, [pc, #588]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800db86:	214d      	movs	r1, #77	; 0x4d
 800db88:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800db8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800db8e:	f103 0310 	add.w	r3, r3, #16
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	3302      	adds	r3, #2
 800db96:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800db9a:	f102 0210 	add.w	r2, r2, #16
 800db9e:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800dba0:	2303      	movs	r3, #3
 800dba2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dba6:	f102 020e 	add.w	r2, r2, #14
 800dbaa:	8013      	strh	r3, [r2, #0]
 800dbac:	f000 bd53 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 右135度 → 斜め
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4==L90S) )
 800dbb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dbb4:	f103 030c 	add.w	r3, r3, #12
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	2b20      	cmp	r3, #32
 800dbbc:	d850      	bhi.n	800dc60 <MAP_makeSkewCmdList+0x55c>
 800dbbe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dbc2:	f103 030a 	add.w	r3, r3, #10
 800dbc6:	881b      	ldrh	r3, [r3, #0]
 800dbc8:	2b4c      	cmp	r3, #76	; 0x4c
 800dbca:	d149      	bne.n	800dc60 <MAP_makeSkewCmdList+0x55c>
 800dbcc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dbd0:	f103 0308 	add.w	r3, r3, #8
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	2b4c      	cmp	r3, #76	; 0x4c
 800dbd8:	d142      	bne.n	800dc60 <MAP_makeSkewCmdList+0x55c>
 800dbda:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dbde:	f103 0306 	add.w	r3, r3, #6
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	2b4d      	cmp	r3, #77	; 0x4d
 800dbe6:	d13b      	bne.n	800dc60 <MAP_makeSkewCmdList+0x55c>
		{
			tcom[ ct_n++ ] = c1;
 800dbe8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dbec:	f103 0312 	add.w	r3, r3, #18
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	1c5a      	adds	r2, r3, #1
 800dbf4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dbf8:	f101 0112 	add.w	r1, r1, #18
 800dbfc:	800a      	strh	r2, [r1, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc04:	f103 030c 	add.w	r3, r3, #12
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	b2d9      	uxtb	r1, r3
 800dc0c:	4b71      	ldr	r3, [pc, #452]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dc0e:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RS135N;
 800dc10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc14:	f103 0312 	add.w	r3, r3, #18
 800dc18:	881b      	ldrh	r3, [r3, #0]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dc20:	f101 0112 	add.w	r1, r1, #18
 800dc24:	800a      	strh	r2, [r1, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	4b6a      	ldr	r3, [pc, #424]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dc2a:	219b      	movs	r1, #155	; 0x9b
 800dc2c:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800dc2e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc32:	f103 0310 	add.w	r3, r3, #16
 800dc36:	881b      	ldrh	r3, [r3, #0]
 800dc38:	3302      	adds	r3, #2
 800dc3a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dc3e:	f102 0210 	add.w	r2, r2, #16
 800dc42:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800dc44:	2351      	movs	r3, #81	; 0x51
 800dc46:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dc4a:	f102 0214 	add.w	r2, r2, #20
 800dc4e:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800dc50:	2302      	movs	r3, #2
 800dc52:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dc56:	f102 020e 	add.w	r2, r2, #14
 800dc5a:	8013      	strh	r3, [r2, #0]
 800dc5c:	f000 bcfb 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	直進 → 左135度 → 斜め
		else if( (c1<=GO32) && (c2==L90S) && (c3==L90S) && (c4==R90S) )
 800dc60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc64:	f103 030c 	add.w	r3, r3, #12
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	2b20      	cmp	r3, #32
 800dc6c:	d850      	bhi.n	800dd10 <MAP_makeSkewCmdList+0x60c>
 800dc6e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc72:	f103 030a 	add.w	r3, r3, #10
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	2b4d      	cmp	r3, #77	; 0x4d
 800dc7a:	d149      	bne.n	800dd10 <MAP_makeSkewCmdList+0x60c>
 800dc7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc80:	f103 0308 	add.w	r3, r3, #8
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	2b4d      	cmp	r3, #77	; 0x4d
 800dc88:	d142      	bne.n	800dd10 <MAP_makeSkewCmdList+0x60c>
 800dc8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc8e:	f103 0306 	add.w	r3, r3, #6
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	2b4c      	cmp	r3, #76	; 0x4c
 800dc96:	d13b      	bne.n	800dd10 <MAP_makeSkewCmdList+0x60c>
		{
			tcom[ ct_n++ ] = c1;
 800dc98:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dc9c:	f103 0312 	add.w	r3, r3, #18
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dca8:	f101 0112 	add.w	r1, r1, #18
 800dcac:	800a      	strh	r2, [r1, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dcb4:	f103 030c 	add.w	r3, r3, #12
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	b2d9      	uxtb	r1, r3
 800dcbc:	4b45      	ldr	r3, [pc, #276]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dcbe:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LS135N;
 800dcc0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dcc4:	f103 0312 	add.w	r3, r3, #18
 800dcc8:	881b      	ldrh	r3, [r3, #0]
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dcd0:	f101 0112 	add.w	r1, r1, #18
 800dcd4:	800a      	strh	r2, [r1, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	4b3e      	ldr	r3, [pc, #248]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dcda:	219c      	movs	r1, #156	; 0x9c
 800dcdc:	5499      	strb	r1, [r3, r2]
			ct_st += 2;
 800dcde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dce2:	f103 0310 	add.w	r3, r3, #16
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	3302      	adds	r3, #2
 800dcea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dcee:	f102 0210 	add.w	r2, r2, #16
 800dcf2:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800dcf4:	2351      	movs	r3, #81	; 0x51
 800dcf6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dcfa:	f102 0214 	add.w	r2, r2, #20
 800dcfe:	8013      	strh	r3, [r2, #0]
			flag = 2;
 800dd00:	2302      	movs	r3, #2
 800dd02:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dd06:	f102 020e 	add.w	r2, r2, #14
 800dd0a:	8013      	strh	r3, [r2, #0]
 800dd0c:	f000 bca3 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
		}

		//	直進 → 右180度 → 直進
		else if( (c1<=GO32) && (c2==R90S) && (c3==R90S) && (c4<=GO32) )
 800dd10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd14:	f103 030c 	add.w	r3, r3, #12
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	2b20      	cmp	r3, #32
 800dd1c:	d85c      	bhi.n	800ddd8 <MAP_makeSkewCmdList+0x6d4>
 800dd1e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd22:	f103 030a 	add.w	r3, r3, #10
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	2b4c      	cmp	r3, #76	; 0x4c
 800dd2a:	d155      	bne.n	800ddd8 <MAP_makeSkewCmdList+0x6d4>
 800dd2c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd30:	f103 0308 	add.w	r3, r3, #8
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	2b4c      	cmp	r3, #76	; 0x4c
 800dd38:	d14e      	bne.n	800ddd8 <MAP_makeSkewCmdList+0x6d4>
 800dd3a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd3e:	f103 0306 	add.w	r3, r3, #6
 800dd42:	881b      	ldrh	r3, [r3, #0]
 800dd44:	2b20      	cmp	r3, #32
 800dd46:	d847      	bhi.n	800ddd8 <MAP_makeSkewCmdList+0x6d4>
		{
			tcom[ ct_n++ ] = c1;
 800dd48:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd4c:	f103 0312 	add.w	r3, r3, #18
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dd58:	f101 0112 	add.w	r1, r1, #18
 800dd5c:	800a      	strh	r2, [r1, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd64:	f103 030c 	add.w	r3, r3, #12
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	b2d9      	uxtb	r1, r3
 800dd6c:	4b19      	ldr	r3, [pc, #100]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dd6e:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800dd70:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd74:	f103 0312 	add.w	r3, r3, #18
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dd80:	f101 0112 	add.w	r1, r1, #18
 800dd84:	800a      	strh	r2, [r1, #0]
 800dd86:	461a      	mov	r2, r3
 800dd88:	4b12      	ldr	r3, [pc, #72]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dd8a:	214c      	movs	r1, #76	; 0x4c
 800dd8c:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = R90S;
 800dd8e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dd92:	f103 0312 	add.w	r3, r3, #18
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	1c5a      	adds	r2, r3, #1
 800dd9a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dd9e:	f101 0112 	add.w	r1, r1, #18
 800dda2:	800a      	strh	r2, [r1, #0]
 800dda4:	461a      	mov	r2, r3
 800dda6:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <MAP_makeSkewCmdList+0x6d0>)
 800dda8:	214c      	movs	r1, #76	; 0x4c
 800ddaa:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800ddac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ddb0:	f103 0310 	add.w	r3, r3, #16
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	3303      	adds	r3, #3
 800ddb8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ddbc:	f102 0210 	add.w	r2, r2, #16
 800ddc0:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800ddc8:	f102 020e 	add.w	r2, r2, #14
 800ddcc:	8013      	strh	r3, [r2, #0]
 800ddce:	f000 bc42 	b.w	800e656 <MAP_makeSkewCmdList+0xf52>
 800ddd2:	bf00      	nop
 800ddd4:	20007f48 	.word	0x20007f48
		}
		//	直進 → 左180度 → 直進
		else if( (c1<=GO32) && (c2==L90S) && (c2==L90S) && (c4<=GO32) )
 800ddd8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dddc:	f103 030c 	add.w	r3, r3, #12
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	2b20      	cmp	r3, #32
 800dde4:	d858      	bhi.n	800de98 <MAP_makeSkewCmdList+0x794>
 800dde6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ddea:	f103 030a 	add.w	r3, r3, #10
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	2b4d      	cmp	r3, #77	; 0x4d
 800ddf2:	d151      	bne.n	800de98 <MAP_makeSkewCmdList+0x794>
 800ddf4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ddf8:	f103 030a 	add.w	r3, r3, #10
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	2b4d      	cmp	r3, #77	; 0x4d
 800de00:	d14a      	bne.n	800de98 <MAP_makeSkewCmdList+0x794>
 800de02:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de06:	f103 0306 	add.w	r3, r3, #6
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	2b20      	cmp	r3, #32
 800de0e:	d843      	bhi.n	800de98 <MAP_makeSkewCmdList+0x794>
		{
			tcom[ ct_n++ ] = c1;
 800de10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de14:	f103 0312 	add.w	r3, r3, #18
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800de20:	f101 0112 	add.w	r1, r1, #18
 800de24:	800a      	strh	r2, [r1, #0]
 800de26:	461a      	mov	r2, r3
 800de28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de2c:	f103 030c 	add.w	r3, r3, #12
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	b2d9      	uxtb	r1, r3
 800de34:	4baa      	ldr	r3, [pc, #680]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800de36:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800de38:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de3c:	f103 0312 	add.w	r3, r3, #18
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800de48:	f101 0112 	add.w	r1, r1, #18
 800de4c:	800a      	strh	r2, [r1, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	4ba3      	ldr	r3, [pc, #652]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800de52:	214d      	movs	r1, #77	; 0x4d
 800de54:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = L90S;
 800de56:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de5a:	f103 0312 	add.w	r3, r3, #18
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	1c5a      	adds	r2, r3, #1
 800de62:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800de66:	f101 0112 	add.w	r1, r1, #18
 800de6a:	800a      	strh	r2, [r1, #0]
 800de6c:	461a      	mov	r2, r3
 800de6e:	4b9c      	ldr	r3, [pc, #624]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800de70:	214d      	movs	r1, #77	; 0x4d
 800de72:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800de74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de78:	f103 0310 	add.w	r3, r3, #16
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	3303      	adds	r3, #3
 800de80:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800de84:	f102 0210 	add.w	r2, r2, #16
 800de88:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800de8a:	2303      	movs	r3, #3
 800de8c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800de90:	f102 020e 	add.w	r2, r2, #14
 800de94:	8013      	strh	r3, [r2, #0]
 800de96:	e3de      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}

		//	斜め → 右45度 → 直進
		else if( (c1==R90S) && (c2<=GO32)  && (flag != 3 ) )
 800de98:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de9c:	f103 030c 	add.w	r3, r3, #12
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	2b4c      	cmp	r3, #76	; 0x4c
 800dea4:	d15c      	bne.n	800df60 <MAP_makeSkewCmdList+0x85c>
 800dea6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800deaa:	f103 030a 	add.w	r3, r3, #10
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	2b20      	cmp	r3, #32
 800deb2:	d855      	bhi.n	800df60 <MAP_makeSkewCmdList+0x85c>
 800deb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800deb8:	f103 030e 	add.w	r3, r3, #14
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d04e      	beq.n	800df60 <MAP_makeSkewCmdList+0x85c>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800dec2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dec6:	f103 030e 	add.w	r3, r3, #14
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d113      	bne.n	800def8 <MAP_makeSkewCmdList+0x7f4>
 800ded0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800ded4:	f103 0312 	add.w	r3, r3, #18
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dee0:	f101 0112 	add.w	r1, r1, #18
 800dee4:	800a      	strh	r2, [r1, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800deec:	f103 0314 	add.w	r3, r3, #20
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b2d9      	uxtb	r1, r3
 800def4:	4b7a      	ldr	r3, [pc, #488]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800def6:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN45S;
 800def8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800defc:	f103 0312 	add.w	r3, r3, #18
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800df08:	f101 0112 	add.w	r1, r1, #18
 800df0c:	800a      	strh	r2, [r1, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	4b73      	ldr	r3, [pc, #460]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800df12:	219d      	movs	r1, #157	; 0x9d
 800df14:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800df16:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df1a:	f103 0310 	add.w	r3, r3, #16
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	3301      	adds	r3, #1
 800df22:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800df26:	f102 020a 	add.w	r2, r2, #10
 800df2a:	8812      	ldrh	r2, [r2, #0]
 800df2c:	3a01      	subs	r2, #1
 800df2e:	b292      	uxth	r2, r2
 800df30:	f107 0118 	add.w	r1, r7, #24
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	440b      	add	r3, r1
 800df38:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800df3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df40:	f103 0310 	add.w	r3, r3, #16
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800df4c:	f102 0210 	add.w	r2, r2, #16
 800df50:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800df52:	2303      	movs	r3, #3
 800df54:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800df58:	f102 020e 	add.w	r2, r2, #14
 800df5c:	8013      	strh	r3, [r2, #0]
 800df5e:	e37a      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左45度 → 直進
		else if( (c1==L90S) && (c2<=GO32)  && (flag != 3 ) )
 800df60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df64:	f103 030c 	add.w	r3, r3, #12
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	2b4d      	cmp	r3, #77	; 0x4d
 800df6c:	d15c      	bne.n	800e028 <MAP_makeSkewCmdList+0x924>
 800df6e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df72:	f103 030a 	add.w	r3, r3, #10
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	2b20      	cmp	r3, #32
 800df7a:	d855      	bhi.n	800e028 <MAP_makeSkewCmdList+0x924>
 800df7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df80:	f103 030e 	add.w	r3, r3, #14
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	2b03      	cmp	r3, #3
 800df88:	d04e      	beq.n	800e028 <MAP_makeSkewCmdList+0x924>
		{
			if( flag==1 ) tcom[ ct_n++ ] = x;
 800df8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df8e:	f103 030e 	add.w	r3, r3, #14
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d113      	bne.n	800dfc0 <MAP_makeSkewCmdList+0x8bc>
 800df98:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df9c:	f103 0312 	add.w	r3, r3, #18
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dfa8:	f101 0112 	add.w	r1, r1, #18
 800dfac:	800a      	strh	r2, [r1, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dfb4:	f103 0314 	add.w	r3, r3, #20
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b2d9      	uxtb	r1, r3
 800dfbc:	4b48      	ldr	r3, [pc, #288]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800dfbe:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN45S;
 800dfc0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dfc4:	f103 0312 	add.w	r3, r3, #18
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	1c5a      	adds	r2, r3, #1
 800dfcc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800dfd0:	f101 0112 	add.w	r1, r1, #18
 800dfd4:	800a      	strh	r2, [r1, #0]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	4b41      	ldr	r3, [pc, #260]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800dfda:	219e      	movs	r1, #158	; 0x9e
 800dfdc:	5499      	strb	r1, [r3, r2]
			scom_temp[ct_st+1] = c2 - 1;		//	直線区間を1つ減らす
 800dfde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800dfe2:	f103 0310 	add.w	r3, r3, #16
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800dfee:	f102 020a 	add.w	r2, r2, #10
 800dff2:	8812      	ldrh	r2, [r2, #0]
 800dff4:	3a01      	subs	r2, #1
 800dff6:	b292      	uxth	r2, r2
 800dff8:	f107 0118 	add.w	r1, r7, #24
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	440b      	add	r3, r1
 800e000:	f823 2c14 	strh.w	r2, [r3, #-20]
			ct_st ++;
 800e004:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e008:	f103 0310 	add.w	r3, r3, #16
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	3301      	adds	r3, #1
 800e010:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e014:	f102 0210 	add.w	r2, r2, #16
 800e018:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800e01a:	2303      	movs	r3, #3
 800e01c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e020:	f102 020e 	add.w	r2, r2, #14
 800e024:	8013      	strh	r3, [r2, #0]
 800e026:	e316      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右90度 → 斜め
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4==L90S)  && (flag != 3 ) )
 800e028:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e02c:	f103 030c 	add.w	r3, r3, #12
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	2b4d      	cmp	r3, #77	; 0x4d
 800e034:	f040 8093 	bne.w	800e15e <MAP_makeSkewCmdList+0xa5a>
 800e038:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e03c:	f103 030a 	add.w	r3, r3, #10
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	2b4c      	cmp	r3, #76	; 0x4c
 800e044:	f040 808b 	bne.w	800e15e <MAP_makeSkewCmdList+0xa5a>
 800e048:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e04c:	f103 0308 	add.w	r3, r3, #8
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	2b4c      	cmp	r3, #76	; 0x4c
 800e054:	f040 8083 	bne.w	800e15e <MAP_makeSkewCmdList+0xa5a>
 800e058:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e05c:	f103 0306 	add.w	r3, r3, #6
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	2b4d      	cmp	r3, #77	; 0x4d
 800e064:	d17b      	bne.n	800e15e <MAP_makeSkewCmdList+0xa5a>
 800e066:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e06a:	f103 030e 	add.w	r3, r3, #14
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	2b03      	cmp	r3, #3
 800e072:	d074      	beq.n	800e15e <MAP_makeSkewCmdList+0xa5a>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからRN90N
 800e074:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e078:	f103 030e 	add.w	r3, r3, #14
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10f      	bne.n	800e0a2 <MAP_makeSkewCmdList+0x99e>
 800e082:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e086:	f103 0312 	add.w	r3, r3, #18
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e092:	f101 0112 	add.w	r1, r1, #18
 800e096:	800a      	strh	r2, [r1, #0]
 800e098:	461a      	mov	r2, r3
 800e09a:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800e09c:	2152      	movs	r1, #82	; 0x52
 800e09e:	5499      	strb	r1, [r3, r2]
 800e0a0:	e036      	b.n	800e110 <MAP_makeSkewCmdList+0xa0c>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800e0a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e0a6:	f103 030e 	add.w	r3, r3, #14
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d119      	bne.n	800e0e4 <MAP_makeSkewCmdList+0x9e0>
 800e0b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e0b4:	f103 0314 	add.w	r3, r3, #20
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e0c0:	f103 0312 	add.w	r3, r3, #18
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	1c59      	adds	r1, r3, #1
 800e0c8:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800e0cc:	f100 0012 	add.w	r0, r0, #18
 800e0d0:	8001      	strh	r1, [r0, #0]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	1c53      	adds	r3, r2, #1
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	4b01      	ldr	r3, [pc, #4]	; (800e0e0 <MAP_makeSkewCmdList+0x9dc>)
 800e0da:	545a      	strb	r2, [r3, r1]
 800e0dc:	e018      	b.n	800e110 <MAP_makeSkewCmdList+0xa0c>
 800e0de:	bf00      	nop
 800e0e0:	20007f48 	.word	0x20007f48
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800e0e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e0e8:	f103 030e 	add.w	r3, r3, #14
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d10e      	bne.n	800e110 <MAP_makeSkewCmdList+0xa0c>
 800e0f2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e0f6:	f103 0312 	add.w	r3, r3, #18
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e102:	f101 0112 	add.w	r1, r1, #18
 800e106:	800a      	strh	r2, [r1, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	4ba9      	ldr	r3, [pc, #676]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e10c:	2152      	movs	r1, #82	; 0x52
 800e10e:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN90N;
 800e110:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e114:	f103 0312 	add.w	r3, r3, #18
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e120:	f101 0112 	add.w	r1, r1, #18
 800e124:	800a      	strh	r2, [r1, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	4ba1      	ldr	r3, [pc, #644]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e12a:	21a1      	movs	r1, #161	; 0xa1
 800e12c:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 800e12e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e132:	f103 0310 	add.w	r3, r3, #16
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	3302      	adds	r3, #2
 800e13a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e13e:	f102 0210 	add.w	r2, r2, #16
 800e142:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800e144:	2351      	movs	r3, #81	; 0x51
 800e146:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e14a:	f102 0214 	add.w	r2, r2, #20
 800e14e:	8013      	strh	r3, [r2, #0]
			flag = 1;
 800e150:	2301      	movs	r3, #1
 800e152:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e156:	f102 020e 	add.w	r2, r2, #14
 800e15a:	8013      	strh	r3, [r2, #0]
 800e15c:	e27b      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 左90度 → 斜め
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4==R90S)  && (flag != 3 ) )
 800e15e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e162:	f103 030c 	add.w	r3, r3, #12
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	2b4c      	cmp	r3, #76	; 0x4c
 800e16a:	f040 808f 	bne.w	800e28c <MAP_makeSkewCmdList+0xb88>
 800e16e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e172:	f103 030a 	add.w	r3, r3, #10
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	2b4d      	cmp	r3, #77	; 0x4d
 800e17a:	f040 8087 	bne.w	800e28c <MAP_makeSkewCmdList+0xb88>
 800e17e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e182:	f103 0308 	add.w	r3, r3, #8
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	2b4d      	cmp	r3, #77	; 0x4d
 800e18a:	d17f      	bne.n	800e28c <MAP_makeSkewCmdList+0xb88>
 800e18c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e190:	f103 0306 	add.w	r3, r3, #6
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	2b4c      	cmp	r3, #76	; 0x4c
 800e198:	d178      	bne.n	800e28c <MAP_makeSkewCmdList+0xb88>
 800e19a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e19e:	f103 030e 	add.w	r3, r3, #14
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	2b03      	cmp	r3, #3
 800e1a6:	d071      	beq.n	800e28c <MAP_makeSkewCmdList+0xb88>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800e1a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e1ac:	f103 030e 	add.w	r3, r3, #14
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10f      	bne.n	800e1d6 <MAP_makeSkewCmdList+0xad2>
 800e1b6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e1ba:	f103 0312 	add.w	r3, r3, #18
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	1c5a      	adds	r2, r3, #1
 800e1c2:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e1c6:	f101 0112 	add.w	r1, r1, #18
 800e1ca:	800a      	strh	r2, [r1, #0]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b78      	ldr	r3, [pc, #480]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e1d0:	2152      	movs	r1, #82	; 0x52
 800e1d2:	5499      	strb	r1, [r3, r2]
 800e1d4:	e033      	b.n	800e23e <MAP_makeSkewCmdList+0xb3a>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800e1d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e1da:	f103 030e 	add.w	r3, r3, #14
 800e1de:	881b      	ldrh	r3, [r3, #0]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d116      	bne.n	800e212 <MAP_makeSkewCmdList+0xb0e>
 800e1e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e1e8:	f103 0314 	add.w	r3, r3, #20
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e1f4:	f103 0312 	add.w	r3, r3, #18
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	1c59      	adds	r1, r3, #1
 800e1fc:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800e200:	f100 0012 	add.w	r0, r0, #18
 800e204:	8001      	strh	r1, [r0, #0]
 800e206:	4619      	mov	r1, r3
 800e208:	1c53      	adds	r3, r2, #1
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	4b68      	ldr	r3, [pc, #416]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e20e:	545a      	strb	r2, [r3, r1]
 800e210:	e015      	b.n	800e23e <MAP_makeSkewCmdList+0xb3a>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800e212:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e216:	f103 030e 	add.w	r3, r3, #14
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d10e      	bne.n	800e23e <MAP_makeSkewCmdList+0xb3a>
 800e220:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e224:	f103 0312 	add.w	r3, r3, #18
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e230:	f101 0112 	add.w	r1, r1, #18
 800e234:	800a      	strh	r2, [r1, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	4b5d      	ldr	r3, [pc, #372]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e23a:	2152      	movs	r1, #82	; 0x52
 800e23c:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN90N;
 800e23e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e242:	f103 0312 	add.w	r3, r3, #18
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e24e:	f101 0112 	add.w	r1, r1, #18
 800e252:	800a      	strh	r2, [r1, #0]
 800e254:	461a      	mov	r2, r3
 800e256:	4b56      	ldr	r3, [pc, #344]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e258:	21a2      	movs	r1, #162	; 0xa2
 800e25a:	5499      	strb	r1, [r3, r2]
			ct_st +=2;
 800e25c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e260:	f103 0310 	add.w	r3, r3, #16
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	3302      	adds	r3, #2
 800e268:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e26c:	f102 0210 	add.w	r2, r2, #16
 800e270:	8013      	strh	r3, [r2, #0]

			x = (uint16_t)(NGO1 - 1);		//	斜めモード
 800e272:	2351      	movs	r3, #81	; 0x51
 800e274:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e278:	f102 0214 	add.w	r2, r2, #20
 800e27c:	8013      	strh	r3, [r2, #0]
			flag = 1;
 800e27e:	2301      	movs	r3, #1
 800e280:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e284:	f102 020e 	add.w	r2, r2, #14
 800e288:	8013      	strh	r3, [r2, #0]
 800e28a:	e1e4      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 右135度 → 直進
		else if( (c1==L90S) && (c2==R90S) && (c3==R90S) && (c4<=GO32)  && (flag != 3 ) )
 800e28c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e290:	f103 030c 	add.w	r3, r3, #12
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	2b4d      	cmp	r3, #77	; 0x4d
 800e298:	f040 808c 	bne.w	800e3b4 <MAP_makeSkewCmdList+0xcb0>
 800e29c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2a0:	f103 030a 	add.w	r3, r3, #10
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	2b4c      	cmp	r3, #76	; 0x4c
 800e2a8:	f040 8084 	bne.w	800e3b4 <MAP_makeSkewCmdList+0xcb0>
 800e2ac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2b0:	f103 0308 	add.w	r3, r3, #8
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	2b4c      	cmp	r3, #76	; 0x4c
 800e2b8:	d17c      	bne.n	800e3b4 <MAP_makeSkewCmdList+0xcb0>
 800e2ba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2be:	f103 0306 	add.w	r3, r3, #6
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	2b20      	cmp	r3, #32
 800e2c6:	d875      	bhi.n	800e3b4 <MAP_makeSkewCmdList+0xcb0>
 800e2c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2cc:	f103 030e 	add.w	r3, r3, #14
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d06e      	beq.n	800e3b4 <MAP_makeSkewCmdList+0xcb0>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800e2d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2da:	f103 030e 	add.w	r3, r3, #14
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10f      	bne.n	800e304 <MAP_makeSkewCmdList+0xc00>
 800e2e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e2e8:	f103 0312 	add.w	r3, r3, #18
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e2f4:	f101 0112 	add.w	r1, r1, #18
 800e2f8:	800a      	strh	r2, [r1, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	4b2c      	ldr	r3, [pc, #176]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e2fe:	2152      	movs	r1, #82	; 0x52
 800e300:	5499      	strb	r1, [r3, r2]
 800e302:	e033      	b.n	800e36c <MAP_makeSkewCmdList+0xc68>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800e304:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e308:	f103 030e 	add.w	r3, r3, #14
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d116      	bne.n	800e340 <MAP_makeSkewCmdList+0xc3c>
 800e312:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e316:	f103 0314 	add.w	r3, r3, #20
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e322:	f103 0312 	add.w	r3, r3, #18
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	1c59      	adds	r1, r3, #1
 800e32a:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800e32e:	f100 0012 	add.w	r0, r0, #18
 800e332:	8001      	strh	r1, [r0, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	1c53      	adds	r3, r2, #1
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	4b1d      	ldr	r3, [pc, #116]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e33c:	545a      	strb	r2, [r3, r1]
 800e33e:	e015      	b.n	800e36c <MAP_makeSkewCmdList+0xc68>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800e340:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e344:	f103 030e 	add.w	r3, r3, #14
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d10e      	bne.n	800e36c <MAP_makeSkewCmdList+0xc68>
 800e34e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e352:	f103 0312 	add.w	r3, r3, #18
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	1c5a      	adds	r2, r3, #1
 800e35a:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e35e:	f101 0112 	add.w	r1, r1, #18
 800e362:	800a      	strh	r2, [r1, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	4b12      	ldr	r3, [pc, #72]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e368:	2152      	movs	r1, #82	; 0x52
 800e36a:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = RN135S;
 800e36c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e370:	f103 0312 	add.w	r3, r3, #18
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e37c:	f101 0112 	add.w	r1, r1, #18
 800e380:	800a      	strh	r2, [r1, #0]
 800e382:	461a      	mov	r2, r3
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <MAP_makeSkewCmdList+0xcac>)
 800e386:	219f      	movs	r1, #159	; 0x9f
 800e388:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800e38a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e38e:	f103 0310 	add.w	r3, r3, #16
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	3303      	adds	r3, #3
 800e396:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e39a:	f102 0210 	add.w	r2, r2, #16
 800e39e:	8013      	strh	r3, [r2, #0]
			flag = 3;		//	直進
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e3a6:	f102 020e 	add.w	r2, r2, #14
 800e3aa:	8013      	strh	r3, [r2, #0]
 800e3ac:	e153      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
 800e3ae:	bf00      	nop
 800e3b0:	20007f48 	.word	0x20007f48
		}
		//	斜め → 左135度 → 直進
		else if( (c1==R90S) && (c2==L90S) && (c3==L90S) && (c4<=GO32)  && (flag != 3 ) )
 800e3b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e3b8:	f103 030c 	add.w	r3, r3, #12
 800e3bc:	881b      	ldrh	r3, [r3, #0]
 800e3be:	2b4c      	cmp	r3, #76	; 0x4c
 800e3c0:	f040 8089 	bne.w	800e4d6 <MAP_makeSkewCmdList+0xdd2>
 800e3c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e3c8:	f103 030a 	add.w	r3, r3, #10
 800e3cc:	881b      	ldrh	r3, [r3, #0]
 800e3ce:	2b4d      	cmp	r3, #77	; 0x4d
 800e3d0:	f040 8081 	bne.w	800e4d6 <MAP_makeSkewCmdList+0xdd2>
 800e3d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e3d8:	f103 0308 	add.w	r3, r3, #8
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	2b4d      	cmp	r3, #77	; 0x4d
 800e3e0:	d179      	bne.n	800e4d6 <MAP_makeSkewCmdList+0xdd2>
 800e3e2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e3e6:	f103 0306 	add.w	r3, r3, #6
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	2b20      	cmp	r3, #32
 800e3ee:	d872      	bhi.n	800e4d6 <MAP_makeSkewCmdList+0xdd2>
 800e3f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e3f4:	f103 030e 	add.w	r3, r3, #14
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	2b03      	cmp	r3, #3
 800e3fc:	d06b      	beq.n	800e4d6 <MAP_makeSkewCmdList+0xdd2>
		{
			if( flag==0 ) tcom[ ct_n++ ] = NGO1;		//	45NからLN90N
 800e3fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e402:	f103 030e 	add.w	r3, r3, #14
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10f      	bne.n	800e42c <MAP_makeSkewCmdList+0xd28>
 800e40c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e410:	f103 0312 	add.w	r3, r3, #18
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	1c5a      	adds	r2, r3, #1
 800e418:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e41c:	f101 0112 	add.w	r1, r1, #18
 800e420:	800a      	strh	r2, [r1, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	4b91      	ldr	r3, [pc, #580]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e426:	2152      	movs	r1, #82	; 0x52
 800e428:	5499      	strb	r1, [r3, r2]
 800e42a:	e033      	b.n	800e494 <MAP_makeSkewCmdList+0xd90>
			else if( flag==1 ) tcom[ ct_n++ ] = x+1;
 800e42c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e430:	f103 030e 	add.w	r3, r3, #14
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d116      	bne.n	800e468 <MAP_makeSkewCmdList+0xd64>
 800e43a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e43e:	f103 0314 	add.w	r3, r3, #20
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	b2da      	uxtb	r2, r3
 800e446:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e44a:	f103 0312 	add.w	r3, r3, #18
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	1c59      	adds	r1, r3, #1
 800e452:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 800e456:	f100 0012 	add.w	r0, r0, #18
 800e45a:	8001      	strh	r1, [r0, #0]
 800e45c:	4619      	mov	r1, r3
 800e45e:	1c53      	adds	r3, r2, #1
 800e460:	b2da      	uxtb	r2, r3
 800e462:	4b82      	ldr	r3, [pc, #520]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e464:	545a      	strb	r2, [r3, r1]
 800e466:	e015      	b.n	800e494 <MAP_makeSkewCmdList+0xd90>
			else if( flag==2 ) tcom[ ct_n++ ] = NGO1;
 800e468:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e46c:	f103 030e 	add.w	r3, r3, #14
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	2b02      	cmp	r3, #2
 800e474:	d10e      	bne.n	800e494 <MAP_makeSkewCmdList+0xd90>
 800e476:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e47a:	f103 0312 	add.w	r3, r3, #18
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e486:	f101 0112 	add.w	r1, r1, #18
 800e48a:	800a      	strh	r2, [r1, #0]
 800e48c:	461a      	mov	r2, r3
 800e48e:	4b77      	ldr	r3, [pc, #476]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e490:	2152      	movs	r1, #82	; 0x52
 800e492:	5499      	strb	r1, [r3, r2]
			tcom[ ct_n++ ] = LN135S;
 800e494:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e498:	f103 0312 	add.w	r3, r3, #18
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 800e4a4:	f101 0112 	add.w	r1, r1, #18
 800e4a8:	800a      	strh	r2, [r1, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	4b6f      	ldr	r3, [pc, #444]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e4ae:	21a0      	movs	r1, #160	; 0xa0
 800e4b0:	5499      	strb	r1, [r3, r2]
			ct_st += 3;
 800e4b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e4b6:	f103 0310 	add.w	r3, r3, #16
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	3303      	adds	r3, #3
 800e4be:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e4c2:	f102 0210 	add.w	r2, r2, #16
 800e4c6:	8013      	strh	r3, [r2, #0]
			flag = 3;		///	直進
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e4ce:	f102 020e 	add.w	r2, r2, #14
 800e4d2:	8013      	strh	r3, [r2, #0]
 800e4d4:	e0bf      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		//	斜め → 斜め
		else if( (c1==R90S) && (c2==L90S) && ( (c3==R90S) || (c3==L90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 800e4d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e4da:	f103 030c 	add.w	r3, r3, #12
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	2b4c      	cmp	r3, #76	; 0x4c
 800e4e2:	d13f      	bne.n	800e564 <MAP_makeSkewCmdList+0xe60>
 800e4e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e4e8:	f103 030a 	add.w	r3, r3, #10
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	2b4d      	cmp	r3, #77	; 0x4d
 800e4f0:	d138      	bne.n	800e564 <MAP_makeSkewCmdList+0xe60>
 800e4f2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e4f6:	f103 0308 	add.w	r3, r3, #8
 800e4fa:	881b      	ldrh	r3, [r3, #0]
 800e4fc:	2b4c      	cmp	r3, #76	; 0x4c
 800e4fe:	d00d      	beq.n	800e51c <MAP_makeSkewCmdList+0xe18>
 800e500:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e504:	f103 0308 	add.w	r3, r3, #8
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	2b4d      	cmp	r3, #77	; 0x4d
 800e50c:	d006      	beq.n	800e51c <MAP_makeSkewCmdList+0xe18>
 800e50e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e512:	f103 0308 	add.w	r3, r3, #8
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	2b20      	cmp	r3, #32
 800e51a:	d823      	bhi.n	800e564 <MAP_makeSkewCmdList+0xe60>
 800e51c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e520:	f103 030e 	add.w	r3, r3, #14
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	2b03      	cmp	r3, #3
 800e528:	d01c      	beq.n	800e564 <MAP_makeSkewCmdList+0xe60>
		{
			x++;
 800e52a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e52e:	f103 0314 	add.w	r3, r3, #20
 800e532:	881b      	ldrh	r3, [r3, #0]
 800e534:	3301      	adds	r3, #1
 800e536:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e53a:	f102 0214 	add.w	r2, r2, #20
 800e53e:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 800e540:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e544:	f103 0310 	add.w	r3, r3, #16
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	3301      	adds	r3, #1
 800e54c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e550:	f102 0210 	add.w	r2, r2, #16
 800e554:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 800e556:	2301      	movs	r3, #1
 800e558:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e55c:	f102 020e 	add.w	r2, r2, #14
 800e560:	8013      	strh	r3, [r2, #0]
 800e562:	e078      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		else if( (c1==L90S) && (c2==R90S) && ( (c3==L90S) || (c3==R90S) || ( c3<=GO32 ) ) && (flag != 3 ) )
 800e564:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e568:	f103 030c 	add.w	r3, r3, #12
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	2b4d      	cmp	r3, #77	; 0x4d
 800e570:	d13f      	bne.n	800e5f2 <MAP_makeSkewCmdList+0xeee>
 800e572:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e576:	f103 030a 	add.w	r3, r3, #10
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	2b4c      	cmp	r3, #76	; 0x4c
 800e57e:	d138      	bne.n	800e5f2 <MAP_makeSkewCmdList+0xeee>
 800e580:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e584:	f103 0308 	add.w	r3, r3, #8
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	2b4d      	cmp	r3, #77	; 0x4d
 800e58c:	d00d      	beq.n	800e5aa <MAP_makeSkewCmdList+0xea6>
 800e58e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e592:	f103 0308 	add.w	r3, r3, #8
 800e596:	881b      	ldrh	r3, [r3, #0]
 800e598:	2b4c      	cmp	r3, #76	; 0x4c
 800e59a:	d006      	beq.n	800e5aa <MAP_makeSkewCmdList+0xea6>
 800e59c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e5a0:	f103 0308 	add.w	r3, r3, #8
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	2b20      	cmp	r3, #32
 800e5a8:	d823      	bhi.n	800e5f2 <MAP_makeSkewCmdList+0xeee>
 800e5aa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e5ae:	f103 030e 	add.w	r3, r3, #14
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d01c      	beq.n	800e5f2 <MAP_makeSkewCmdList+0xeee>
		{
			//	コマンド出力
			x++;
 800e5b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e5bc:	f103 0314 	add.w	r3, r3, #20
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e5c8:	f102 0214 	add.w	r2, r2, #20
 800e5cc:	8013      	strh	r3, [r2, #0]
			ct_st ++;
 800e5ce:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e5d2:	f103 0310 	add.w	r3, r3, #16
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e5de:	f102 0210 	add.w	r2, r2, #16
 800e5e2:	8013      	strh	r3, [r2, #0]

			flag = 1;		//	斜め走行バッファあり
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e5ea:	f102 020e 	add.w	r2, r2, #14
 800e5ee:	8013      	strh	r3, [r2, #0]
 800e5f0:	e031      	b.n	800e656 <MAP_makeSkewCmdList+0xf52>
		}
		else
		{
			tcom[ ct_n ] = scom_temp[ct_st];
 800e5f2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e5f6:	f103 0310 	add.w	r3, r3, #16
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	f107 0218 	add.w	r2, r7, #24
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	4413      	add	r3, r2
 800e604:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800e608:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e60c:	f103 0312 	add.w	r3, r3, #18
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	b2d1      	uxtb	r1, r2
 800e614:	4a15      	ldr	r2, [pc, #84]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e616:	54d1      	strb	r1, [r2, r3]
			if( tcom[ ct_n ] == CEND ) break;
 800e618:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e61c:	f103 0312 	add.w	r3, r3, #18
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	4a12      	ldr	r2, [pc, #72]	; (800e66c <MAP_makeSkewCmdList+0xf68>)
 800e624:	5cd3      	ldrb	r3, [r2, r3]
 800e626:	2bfa      	cmp	r3, #250	; 0xfa
 800e628:	d017      	beq.n	800e65a <MAP_makeSkewCmdList+0xf56>
			ct_st ++;
 800e62a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e62e:	f103 0310 	add.w	r3, r3, #16
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e63a:	f102 0210 	add.w	r2, r2, #16
 800e63e:	8013      	strh	r3, [r2, #0]
			ct_n ++;
 800e640:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800e644:	f103 0312 	add.w	r3, r3, #18
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	3301      	adds	r3, #1
 800e64c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800e650:	f102 0212 	add.w	r2, r2, #18
 800e654:	8013      	strh	r3, [r2, #0]
		c1 = scom_temp[ct_st];
 800e656:	f7ff b8a0 	b.w	800d79a <MAP_makeSkewCmdList+0x96>
			if( tcom[ ct_n ] == CEND ) break;
 800e65a:	bf00      	nop
		}
	}
}
 800e65c:	bf00      	nop
 800e65e:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	20007f48 	.word	0x20007f48

0800e670 <MAP_drive>:

void MAP_drive( enMAP_DRIVE_TYPE en_driveType )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	ed2d 8b02 	vpush	{d8}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	71fb      	strb	r3, [r7, #7]
	uint16_t			us_rp = 0;				// 現在の読み込み位置
 800e67e:	2300      	movs	r3, #0
 800e680:	81fb      	strh	r3, [r7, #14]
	enMOT_TURN_CMD 		en_type;
	bool			bl_isWallCut = FALSE;
 800e682:	2300      	movs	r3, #0
 800e684:	733b      	strb	r3, [r7, #12]
	
	/* 超信旋回モード*/
	if( en_driveType == MAP_DRIVE_TURN )
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d15f      	bne.n	800e74c <MAP_drive+0xdc>
	{
		while(1)
		{
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 800e68c:	89fb      	ldrh	r3, [r7, #14]
 800e68e:	4aac      	ldr	r2, [pc, #688]	; (800e940 <MAP_drive+0x2d0>)
 800e690:	5cd3      	ldrb	r3, [r2, r3]
 800e692:	2bfa      	cmp	r3, #250	; 0xfa
 800e694:	d050      	beq.n	800e738 <MAP_drive+0xc8>
			
			else if ( dcom[us_rp] == STOP  ){
 800e696:	89fb      	ldrh	r3, [r7, #14]
 800e698:	4aa9      	ldr	r2, [pc, #676]	; (800e940 <MAP_drive+0x2d0>)
 800e69a:	5cd3      	ldrb	r3, [r2, r3]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d108      	bne.n	800e6b2 <MAP_drive+0x42>
			 	CTRL_stop();			// 制御停止
 800e6a0:	f7f7 f864 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	f7f9 fb1b 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800e6aa:	2001      	movs	r0, #1
 800e6ac:	f7f9 fb18 	bl	8007ce0 <DCM_brakeMot>
 800e6b0:	e031      	b.n	800e716 <MAP_drive+0xa6>
			}
			else if ( ( dcom[us_rp] <=  GO71 ) && ( dcom[us_rp] >=  GO1) )
 800e6b2:	89fb      	ldrh	r3, [r7, #14]
 800e6b4:	4aa2      	ldr	r2, [pc, #648]	; (800e940 <MAP_drive+0x2d0>)
 800e6b6:	5cd3      	ldrb	r3, [r2, r3]
 800e6b8:	2b47      	cmp	r3, #71	; 0x47
 800e6ba:	d816      	bhi.n	800e6ea <MAP_drive+0x7a>
 800e6bc:	89fb      	ldrh	r3, [r7, #14]
 800e6be:	4aa0      	ldr	r2, [pc, #640]	; (800e940 <MAP_drive+0x2d0>)
 800e6c0:	5cd3      	ldrb	r3, [r2, r3]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d011      	beq.n	800e6ea <MAP_drive+0x7a>
			{
				MOT_goBlock_FinSpeed( (float)dcom[us_rp]*0.5f, 0 );		// 直線走行コマンド、半区間前進後に停止
 800e6c6:	89fb      	ldrh	r3, [r7, #14]
 800e6c8:	4a9d      	ldr	r2, [pc, #628]	; (800e940 <MAP_drive+0x2d0>)
 800e6ca:	5cd3      	ldrb	r3, [r2, r3]
 800e6cc:	ee07 3a90 	vmov	s15, r3
 800e6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e6d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6dc:	eddf 0a99 	vldr	s1, [pc, #612]	; 800e944 <MAP_drive+0x2d4>
 800e6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e6e4:	f7fb ff7c 	bl	800a5e0 <MOT_goBlock_FinSpeed>
 800e6e8:	e015      	b.n	800e716 <MAP_drive+0xa6>
			}
			else{
				
				if( dcom[us_rp] == R90 ) en_type = MOT_R90;
 800e6ea:	89fb      	ldrh	r3, [r7, #14]
 800e6ec:	4a94      	ldr	r2, [pc, #592]	; (800e940 <MAP_drive+0x2d0>)
 800e6ee:	5cd3      	ldrb	r3, [r2, r3]
 800e6f0:	2b48      	cmp	r3, #72	; 0x48
 800e6f2:	d102      	bne.n	800e6fa <MAP_drive+0x8a>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	737b      	strb	r3, [r7, #13]
 800e6f8:	e001      	b.n	800e6fe <MAP_drive+0x8e>
				else 					 en_type = MOT_L90;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	737b      	strb	r3, [r7, #13]
				
				LL_mDelay(500);
 800e6fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e702:	f004 fda1 	bl	8013248 <LL_mDelay>
				MOT_turn( en_type );		//	旋回
 800e706:	7b7b      	ldrb	r3, [r7, #13]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fc f80d 	bl	800a728 <MOT_turn>
				LL_mDelay(500);
 800e70e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e712:	f004 fd99 	bl	8013248 <LL_mDelay>
			}
			us_rp++;
 800e716:	89fb      	ldrh	r3, [r7, #14]
 800e718:	3301      	adds	r3, #1
 800e71a:	81fb      	strh	r3, [r7, #14]
			
			/* 途中で制御不能になった */
			if( SYS_isOutOfCtrl() == TRUE ){
 800e71c:	f7f9 faae 	bl	8007c7c <SYS_isOutOfCtrl>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d0b2      	beq.n	800e68c <MAP_drive+0x1c>
				CTRL_stop();
 800e726:	f7f7 f821 	bl	800576c <CTRL_stop>
				DCM_brakeMot(DCM_R);
 800e72a:	2000      	movs	r0, #0
 800e72c:	f7f9 fad8 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot(DCM_L);
 800e730:	2001      	movs	r0, #1
 800e732:	f7f9 fad5 	bl	8007ce0 <DCM_brakeMot>
				break;
 800e736:	e000      	b.n	800e73a <MAP_drive+0xca>
			if ( dcom[us_rp] == CEND  ) break;								//	コマンド終了
 800e738:	bf00      	nop
			}
			
		}
	 	CTRL_stop();			// 制御停止
 800e73a:	f7f7 f817 	bl	800576c <CTRL_stop>
		DCM_brakeMot( DCM_R );		// ブレーキ
 800e73e:	2000      	movs	r0, #0
 800e740:	f7f9 face 	bl	8007ce0 <DCM_brakeMot>
		DCM_brakeMot( DCM_L );		// ブレーキ
 800e744:	2001      	movs	r0, #1
 800e746:	f7f9 facb 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
				break;
			}
		}
	}
}
 800e74a:	e2c0      	b.n	800ecce <MAP_drive+0x65e>
	else if( en_driveType == MAP_DRIVE_SURA )
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	f040 80b4 	bne.w	800e8bc <MAP_drive+0x24c>
			MAP_refPos( scom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 800e754:	89fb      	ldrh	r3, [r7, #14]
 800e756:	4a7c      	ldr	r2, [pc, #496]	; (800e948 <MAP_drive+0x2d8>)
 800e758:	5cd3      	ldrb	r3, [r2, r3]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fd fc0c 	bl	800bf78 <MAP_refPos>
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 800e760:	89fb      	ldrh	r3, [r7, #14]
 800e762:	4a79      	ldr	r2, [pc, #484]	; (800e948 <MAP_drive+0x2d8>)
 800e764:	5cd3      	ldrb	r3, [r2, r3]
 800e766:	2bfa      	cmp	r3, #250	; 0xfa
 800e768:	f000 82ae 	beq.w	800ecc8 <MAP_drive+0x658>
			else if ( scom[us_rp] == STOP  )
 800e76c:	89fb      	ldrh	r3, [r7, #14]
 800e76e:	4a76      	ldr	r2, [pc, #472]	; (800e948 <MAP_drive+0x2d8>)
 800e770:	5cd3      	ldrb	r3, [r2, r3]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d108      	bne.n	800e788 <MAP_drive+0x118>
			 	CTRL_stop();			// 制御停止
 800e776:	f7f6 fff9 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800e77a:	2000      	movs	r0, #0
 800e77c:	f7f9 fab0 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800e780:	2001      	movs	r0, #1
 800e782:	f7f9 faad 	bl	8007ce0 <DCM_brakeMot>
 800e786:	e087      	b.n	800e898 <MAP_drive+0x228>
			else if ( ( scom[us_rp] <=  GO71 ) && ( scom[us_rp] >=  GO1) )
 800e788:	89fb      	ldrh	r3, [r7, #14]
 800e78a:	4a6f      	ldr	r2, [pc, #444]	; (800e948 <MAP_drive+0x2d8>)
 800e78c:	5cd3      	ldrb	r3, [r2, r3]
 800e78e:	2b47      	cmp	r3, #71	; 0x47
 800e790:	d867      	bhi.n	800e862 <MAP_drive+0x1f2>
 800e792:	89fb      	ldrh	r3, [r7, #14]
 800e794:	4a6c      	ldr	r2, [pc, #432]	; (800e948 <MAP_drive+0x2d8>)
 800e796:	5cd3      	ldrb	r3, [r2, r3]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d062      	beq.n	800e862 <MAP_drive+0x1f2>
				if( scom[us_rp+1] == STOP  ){
 800e79c:	89fb      	ldrh	r3, [r7, #14]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	4a69      	ldr	r2, [pc, #420]	; (800e948 <MAP_drive+0x2d8>)
 800e7a2:	5cd3      	ldrb	r3, [r2, r3]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d111      	bne.n	800e7cc <MAP_drive+0x15c>
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 800e7a8:	89fb      	ldrh	r3, [r7, #14]
 800e7aa:	4a67      	ldr	r2, [pc, #412]	; (800e948 <MAP_drive+0x2d8>)
 800e7ac:	5cd3      	ldrb	r3, [r2, r3]
 800e7ae:	ee07 3a90 	vmov	s15, r3
 800e7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e7ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7be:	eddf 0a61 	vldr	s1, [pc, #388]	; 800e944 <MAP_drive+0x2d4>
 800e7c2:	eeb0 0a67 	vmov.f32	s0, s15
 800e7c6:	f7fb ff0b 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 800e7ca:	e065      	b.n	800e898 <MAP_drive+0x228>
					if( ( scom[us_rp+1] == R90S )   || ( scom[us_rp+1] == L90S ) ){
 800e7cc:	89fb      	ldrh	r3, [r7, #14]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	4a5d      	ldr	r2, [pc, #372]	; (800e948 <MAP_drive+0x2d8>)
 800e7d2:	5cd3      	ldrb	r3, [r2, r3]
 800e7d4:	2b4c      	cmp	r3, #76	; 0x4c
 800e7d6:	d005      	beq.n	800e7e4 <MAP_drive+0x174>
 800e7d8:	89fb      	ldrh	r3, [r7, #14]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	4a5a      	ldr	r2, [pc, #360]	; (800e948 <MAP_drive+0x2d8>)
 800e7de:	5cd3      	ldrb	r3, [r2, r3]
 800e7e0:	2b4d      	cmp	r3, #77	; 0x4d
 800e7e2:	d128      	bne.n	800e836 <MAP_drive+0x1c6>
						bl_isWallCut = MAP_setWallCut( scom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 800e7e4:	89fb      	ldrh	r3, [r7, #14]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	4a57      	ldr	r2, [pc, #348]	; (800e948 <MAP_drive+0x2d8>)
 800e7ea:	5cd3      	ldrb	r3, [r2, r3]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fd fed3 	bl	800c598 <MAP_setWallCut>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 800e7f6:	7b3b      	ldrb	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d01c      	beq.n	800e836 <MAP_drive+0x1c6>
							bl_isWallCut = FALSE;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 800e800:	4b52      	ldr	r3, [pc, #328]	; (800e94c <MAP_drive+0x2dc>)
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	4619      	mov	r1, r3
 800e806:	4a52      	ldr	r2, [pc, #328]	; (800e950 <MAP_drive+0x2e0>)
 800e808:	89fb      	ldrh	r3, [r7, #14]
 800e80a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 800e80e:	4b4f      	ldr	r3, [pc, #316]	; (800e94c <MAP_drive+0x2dc>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	3301      	adds	r3, #1
 800e814:	b29a      	uxth	r2, r3
 800e816:	4b4d      	ldr	r3, [pc, #308]	; (800e94c <MAP_drive+0x2dc>)
 800e818:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 800e81a:	4b4c      	ldr	r3, [pc, #304]	; (800e94c <MAP_drive+0x2dc>)
 800e81c:	881a      	ldrh	r2, [r3, #0]
 800e81e:	4b4d      	ldr	r3, [pc, #308]	; (800e954 <MAP_drive+0x2e4>)
 800e820:	fba3 1302 	umull	r1, r3, r3, r2
 800e824:	0919      	lsrs	r1, r3, #4
 800e826:	460b      	mov	r3, r1
 800e828:	011b      	lsls	r3, r3, #4
 800e82a:	1a5b      	subs	r3, r3, r1
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	b29a      	uxth	r2, r3
 800e832:	4b46      	ldr	r3, [pc, #280]	; (800e94c <MAP_drive+0x2dc>)
 800e834:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)scom[us_rp]*0.5f, MOT_getSuraStaSpeed() );		// 直線走行コマンド、半区間前進（最終速度あり）
 800e836:	89fb      	ldrh	r3, [r7, #14]
 800e838:	4a43      	ldr	r2, [pc, #268]	; (800e948 <MAP_drive+0x2d8>)
 800e83a:	5cd3      	ldrb	r3, [r2, r3]
 800e83c:	ee07 3a90 	vmov	s15, r3
 800e840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e848:	ee27 8a87 	vmul.f32	s16, s15, s14
 800e84c:	f7fc fa6e 	bl	800ad2c <MOT_getSuraStaSpeed>
 800e850:	eef0 7a40 	vmov.f32	s15, s0
 800e854:	eef0 0a67 	vmov.f32	s1, s15
 800e858:	eeb0 0a48 	vmov.f32	s0, s16
 800e85c:	f7fb fec0 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				if( scom[us_rp+1] == STOP  ){
 800e860:	e01a      	b.n	800e898 <MAP_drive+0x228>
			else if( scom[us_rp] == R90S )
 800e862:	89fb      	ldrh	r3, [r7, #14]
 800e864:	4a38      	ldr	r2, [pc, #224]	; (800e948 <MAP_drive+0x2d8>)
 800e866:	5cd3      	ldrb	r3, [r2, r3]
 800e868:	2b4c      	cmp	r3, #76	; 0x4c
 800e86a:	d108      	bne.n	800e87e <MAP_drive+0x20e>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 800e86c:	2000      	movs	r0, #0
 800e86e:	f7f4 fbc9 	bl	8003004 <PARAM_getSra>
 800e872:	4603      	mov	r3, r0
 800e874:	4619      	mov	r1, r3
 800e876:	2000      	movs	r0, #0
 800e878:	f7fc fade 	bl	800ae38 <MOT_goSla>
 800e87c:	e00c      	b.n	800e898 <MAP_drive+0x228>
			else if( scom[us_rp] == L90S )
 800e87e:	89fb      	ldrh	r3, [r7, #14]
 800e880:	4a31      	ldr	r2, [pc, #196]	; (800e948 <MAP_drive+0x2d8>)
 800e882:	5cd3      	ldrb	r3, [r2, r3]
 800e884:	2b4d      	cmp	r3, #77	; 0x4d
 800e886:	d107      	bne.n	800e898 <MAP_drive+0x228>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 800e888:	2000      	movs	r0, #0
 800e88a:	f7f4 fbbb 	bl	8003004 <PARAM_getSra>
 800e88e:	4603      	mov	r3, r0
 800e890:	4619      	mov	r1, r3
 800e892:	2001      	movs	r0, #1
 800e894:	f7fc fad0 	bl	800ae38 <MOT_goSla>
			us_rp++;
 800e898:	89fb      	ldrh	r3, [r7, #14]
 800e89a:	3301      	adds	r3, #1
 800e89c:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE){
 800e89e:	f7f9 f9ed 	bl	8007c7c <SYS_isOutOfCtrl>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f43f af55 	beq.w	800e754 <MAP_drive+0xe4>
				CTRL_stop();
 800e8aa:	f7f6 ff5f 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f7f9 fa16 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	f7f9 fa13 	bl	8007ce0 <DCM_brakeMot>
				break;
 800e8ba:	e208      	b.n	800ecce <MAP_drive+0x65e>
	else if( en_driveType == MAP_DRIVE_SKEW )
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	f040 8205 	bne.w	800ecce <MAP_drive+0x65e>
			MAP_refPos( tcom[us_rp] );									// 実行されるコマンドが終了した位置に更新
 800e8c4:	89fb      	ldrh	r3, [r7, #14]
 800e8c6:	4a24      	ldr	r2, [pc, #144]	; (800e958 <MAP_drive+0x2e8>)
 800e8c8:	5cd3      	ldrb	r3, [r2, r3]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fd fb54 	bl	800bf78 <MAP_refPos>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
 800e8d2:	4a21      	ldr	r2, [pc, #132]	; (800e958 <MAP_drive+0x2e8>)
 800e8d4:	5cd3      	ldrb	r3, [r2, r3]
 800e8d6:	2bfa      	cmp	r3, #250	; 0xfa
 800e8d8:	f000 81f8 	beq.w	800eccc <MAP_drive+0x65c>
			else if ( tcom[us_rp] == STOP  )
 800e8dc:	89fb      	ldrh	r3, [r7, #14]
 800e8de:	4a1e      	ldr	r2, [pc, #120]	; (800e958 <MAP_drive+0x2e8>)
 800e8e0:	5cd3      	ldrb	r3, [r2, r3]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d108      	bne.n	800e8f8 <MAP_drive+0x288>
			 	CTRL_stop();			// 制御停止
 800e8e6:	f7f6 ff41 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f7f9 f9f8 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f7f9 f9f5 	bl	8007ce0 <DCM_brakeMot>
 800e8f6:	e1cd      	b.n	800ec94 <MAP_drive+0x624>
			else if ( ( tcom[us_rp] <=  GO71 ) && ( tcom[us_rp] >=  GO1) )
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
 800e8fa:	4a17      	ldr	r2, [pc, #92]	; (800e958 <MAP_drive+0x2e8>)
 800e8fc:	5cd3      	ldrb	r3, [r2, r3]
 800e8fe:	2b47      	cmp	r3, #71	; 0x47
 800e900:	f200 8083 	bhi.w	800ea0a <MAP_drive+0x39a>
 800e904:	89fb      	ldrh	r3, [r7, #14]
 800e906:	4a14      	ldr	r2, [pc, #80]	; (800e958 <MAP_drive+0x2e8>)
 800e908:	5cd3      	ldrb	r3, [r2, r3]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d07d      	beq.n	800ea0a <MAP_drive+0x39a>
				if( tcom[us_rp+1] == STOP  ){
 800e90e:	89fb      	ldrh	r3, [r7, #14]
 800e910:	3301      	adds	r3, #1
 800e912:	4a11      	ldr	r2, [pc, #68]	; (800e958 <MAP_drive+0x2e8>)
 800e914:	5cd3      	ldrb	r3, [r2, r3]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d120      	bne.n	800e95c <MAP_drive+0x2ec>
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, 0 );						// 直線走行コマンド、半区間前進（最終速度なし）
 800e91a:	89fb      	ldrh	r3, [r7, #14]
 800e91c:	4a0e      	ldr	r2, [pc, #56]	; (800e958 <MAP_drive+0x2e8>)
 800e91e:	5cd3      	ldrb	r3, [r2, r3]
 800e920:	ee07 3a90 	vmov	s15, r3
 800e924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e928:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e92c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e930:	eddf 0a04 	vldr	s1, [pc, #16]	; 800e944 <MAP_drive+0x2d4>
 800e934:	eeb0 0a67 	vmov.f32	s0, s15
 800e938:	f7fb fe52 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 800e93c:	e1aa      	b.n	800ec94 <MAP_drive+0x624>
 800e93e:	bf00      	nop
 800e940:	20005f04 	.word	0x20005f04
 800e944:	00000000 	.word	0x00000000
 800e948:	20006f0c 	.word	0x20006f0c
 800e94c:	200002b4 	.word	0x200002b4
 800e950:	20007f0c 	.word	0x20007f0c
 800e954:	88888889 	.word	0x88888889
 800e958:	20007f48 	.word	0x20007f48
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 800e95c:	89fb      	ldrh	r3, [r7, #14]
 800e95e:	3301      	adds	r3, #1
 800e960:	4ad5      	ldr	r2, [pc, #852]	; (800ecb8 <MAP_drive+0x648>)
 800e962:	5cd3      	ldrb	r3, [r2, r3]
 800e964:	2b4c      	cmp	r3, #76	; 0x4c
 800e966:	d011      	beq.n	800e98c <MAP_drive+0x31c>
 800e968:	89fb      	ldrh	r3, [r7, #14]
 800e96a:	3301      	adds	r3, #1
 800e96c:	4ad2      	ldr	r2, [pc, #840]	; (800ecb8 <MAP_drive+0x648>)
 800e96e:	5cd3      	ldrb	r3, [r2, r3]
 800e970:	2b4d      	cmp	r3, #77	; 0x4d
 800e972:	d00b      	beq.n	800e98c <MAP_drive+0x31c>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 800e974:	89fb      	ldrh	r3, [r7, #14]
 800e976:	3301      	adds	r3, #1
 800e978:	4acf      	ldr	r2, [pc, #828]	; (800ecb8 <MAP_drive+0x648>)
 800e97a:	5cd3      	ldrb	r3, [r2, r3]
					if( ( tcom[us_rp+1] == R90S )   || ( tcom[us_rp+1] == L90S )   || 
 800e97c:	2b9b      	cmp	r3, #155	; 0x9b
 800e97e:	d005      	beq.n	800e98c <MAP_drive+0x31c>
					 	( tcom[us_rp+1] == RS135N ) || ( tcom[us_rp+1] == LS135N ) 
 800e980:	89fb      	ldrh	r3, [r7, #14]
 800e982:	3301      	adds	r3, #1
 800e984:	4acc      	ldr	r2, [pc, #816]	; (800ecb8 <MAP_drive+0x648>)
 800e986:	5cd3      	ldrb	r3, [r2, r3]
 800e988:	2b9c      	cmp	r3, #156	; 0x9c
 800e98a:	d128      	bne.n	800e9de <MAP_drive+0x36e>
						bl_isWallCut = MAP_setWallCut( tcom[us_rp+1] );		// コーナー前に壁があったら壁の切れ目補正を行う設定をする
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	3301      	adds	r3, #1
 800e990:	4ac9      	ldr	r2, [pc, #804]	; (800ecb8 <MAP_drive+0x648>)
 800e992:	5cd3      	ldrb	r3, [r2, r3]
 800e994:	4618      	mov	r0, r3
 800e996:	f7fd fdff 	bl	800c598 <MAP_setWallCut>
 800e99a:	4603      	mov	r3, r0
 800e99c:	733b      	strb	r3, [r7, #12]
						if( bl_isWallCut == TRUE ){
 800e99e:	7b3b      	ldrb	r3, [r7, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01c      	beq.n	800e9de <MAP_drive+0x36e>
							bl_isWallCut = FALSE;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	733b      	strb	r3, [r7, #12]
							us_LogWallCut[us_LogIndexWallCut] = us_rp;
 800e9a8:	4bc4      	ldr	r3, [pc, #784]	; (800ecbc <MAP_drive+0x64c>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	4ac4      	ldr	r2, [pc, #784]	; (800ecc0 <MAP_drive+0x650>)
 800e9b0:	89fb      	ldrh	r3, [r7, #14]
 800e9b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
							us_LogIndexWallCut++;
 800e9b6:	4bc1      	ldr	r3, [pc, #772]	; (800ecbc <MAP_drive+0x64c>)
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	4bbf      	ldr	r3, [pc, #764]	; (800ecbc <MAP_drive+0x64c>)
 800e9c0:	801a      	strh	r2, [r3, #0]
							us_LogIndexWallCut %= 30;
 800e9c2:	4bbe      	ldr	r3, [pc, #760]	; (800ecbc <MAP_drive+0x64c>)
 800e9c4:	881a      	ldrh	r2, [r3, #0]
 800e9c6:	4bbf      	ldr	r3, [pc, #764]	; (800ecc4 <MAP_drive+0x654>)
 800e9c8:	fba3 1302 	umull	r1, r3, r3, r2
 800e9cc:	0919      	lsrs	r1, r3, #4
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	011b      	lsls	r3, r3, #4
 800e9d2:	1a5b      	subs	r3, r3, r1
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	4bb8      	ldr	r3, [pc, #736]	; (800ecbc <MAP_drive+0x64c>)
 800e9dc:	801a      	strh	r2, [r3, #0]
					MOT_goBlock_FinSpeed( (float)tcom[us_rp]*0.5f, MOT_getSuraStaSpeed() );		// 直線走行コマンド、半区間前進（最終速度あり）
 800e9de:	89fb      	ldrh	r3, [r7, #14]
 800e9e0:	4ab5      	ldr	r2, [pc, #724]	; (800ecb8 <MAP_drive+0x648>)
 800e9e2:	5cd3      	ldrb	r3, [r2, r3]
 800e9e4:	ee07 3a90 	vmov	s15, r3
 800e9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e9f0:	ee27 8a87 	vmul.f32	s16, s15, s14
 800e9f4:	f7fc f99a 	bl	800ad2c <MOT_getSuraStaSpeed>
 800e9f8:	eef0 7a40 	vmov.f32	s15, s0
 800e9fc:	eef0 0a67 	vmov.f32	s1, s15
 800ea00:	eeb0 0a48 	vmov.f32	s0, s16
 800ea04:	f7fb fdec 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				if( tcom[us_rp+1] == STOP  ){
 800ea08:	e144      	b.n	800ec94 <MAP_drive+0x624>
			else if ( ( tcom[us_rp] <=  NGO71 ) && ( tcom[us_rp] >=  NGO1) )
 800ea0a:	89fb      	ldrh	r3, [r7, #14]
 800ea0c:	4aaa      	ldr	r2, [pc, #680]	; (800ecb8 <MAP_drive+0x648>)
 800ea0e:	5cd3      	ldrb	r3, [r2, r3]
 800ea10:	2b98      	cmp	r3, #152	; 0x98
 800ea12:	d81b      	bhi.n	800ea4c <MAP_drive+0x3dc>
 800ea14:	89fb      	ldrh	r3, [r7, #14]
 800ea16:	4aa8      	ldr	r2, [pc, #672]	; (800ecb8 <MAP_drive+0x648>)
 800ea18:	5cd3      	ldrb	r3, [r2, r3]
 800ea1a:	2b51      	cmp	r3, #81	; 0x51
 800ea1c:	d916      	bls.n	800ea4c <MAP_drive+0x3dc>
				MOT_goSkewBlock_FinSpeed( (float)(tcom[us_rp]-81)*0.5f, MOT_getSuraStaSpeed());	// 斜め直線走行コマンド、半区間前進（最終速度あり）
 800ea1e:	89fb      	ldrh	r3, [r7, #14]
 800ea20:	4aa5      	ldr	r2, [pc, #660]	; (800ecb8 <MAP_drive+0x648>)
 800ea22:	5cd3      	ldrb	r3, [r2, r3]
 800ea24:	3b51      	subs	r3, #81	; 0x51
 800ea26:	ee07 3a90 	vmov	s15, r3
 800ea2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ea32:	ee27 8a87 	vmul.f32	s16, s15, s14
 800ea36:	f7fc f979 	bl	800ad2c <MOT_getSuraStaSpeed>
 800ea3a:	eef0 7a40 	vmov.f32	s15, s0
 800ea3e:	eef0 0a67 	vmov.f32	s1, s15
 800ea42:	eeb0 0a48 	vmov.f32	s0, s16
 800ea46:	f7fb fddd 	bl	800a604 <MOT_goSkewBlock_FinSpeed>
 800ea4a:	e123      	b.n	800ec94 <MAP_drive+0x624>
				switch( tcom[us_rp] )
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	4a9a      	ldr	r2, [pc, #616]	; (800ecb8 <MAP_drive+0x648>)
 800ea50:	5cd3      	ldrb	r3, [r2, r3]
 800ea52:	3b4c      	subs	r3, #76	; 0x4c
 800ea54:	2b56      	cmp	r3, #86	; 0x56
 800ea56:	f200 811d 	bhi.w	800ec94 <MAP_drive+0x624>
 800ea5a:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <MAP_drive+0x3f0>)
 800ea5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea60:	0800ebbd 	.word	0x0800ebbd
 800ea64:	0800ebcf 	.word	0x0800ebcf
 800ea68:	0800ec95 	.word	0x0800ec95
 800ea6c:	0800ec95 	.word	0x0800ec95
 800ea70:	0800ec95 	.word	0x0800ec95
 800ea74:	0800ec95 	.word	0x0800ec95
 800ea78:	0800ec95 	.word	0x0800ec95
 800ea7c:	0800ec95 	.word	0x0800ec95
 800ea80:	0800ec95 	.word	0x0800ec95
 800ea84:	0800ec95 	.word	0x0800ec95
 800ea88:	0800ec95 	.word	0x0800ec95
 800ea8c:	0800ec95 	.word	0x0800ec95
 800ea90:	0800ec95 	.word	0x0800ec95
 800ea94:	0800ec95 	.word	0x0800ec95
 800ea98:	0800ec95 	.word	0x0800ec95
 800ea9c:	0800ec95 	.word	0x0800ec95
 800eaa0:	0800ec95 	.word	0x0800ec95
 800eaa4:	0800ec95 	.word	0x0800ec95
 800eaa8:	0800ec95 	.word	0x0800ec95
 800eaac:	0800ec95 	.word	0x0800ec95
 800eab0:	0800ec95 	.word	0x0800ec95
 800eab4:	0800ec95 	.word	0x0800ec95
 800eab8:	0800ec95 	.word	0x0800ec95
 800eabc:	0800ec95 	.word	0x0800ec95
 800eac0:	0800ec95 	.word	0x0800ec95
 800eac4:	0800ec95 	.word	0x0800ec95
 800eac8:	0800ec95 	.word	0x0800ec95
 800eacc:	0800ec95 	.word	0x0800ec95
 800ead0:	0800ec95 	.word	0x0800ec95
 800ead4:	0800ec95 	.word	0x0800ec95
 800ead8:	0800ec95 	.word	0x0800ec95
 800eadc:	0800ec95 	.word	0x0800ec95
 800eae0:	0800ec95 	.word	0x0800ec95
 800eae4:	0800ec95 	.word	0x0800ec95
 800eae8:	0800ec95 	.word	0x0800ec95
 800eaec:	0800ec95 	.word	0x0800ec95
 800eaf0:	0800ec95 	.word	0x0800ec95
 800eaf4:	0800ec95 	.word	0x0800ec95
 800eaf8:	0800ec95 	.word	0x0800ec95
 800eafc:	0800ec95 	.word	0x0800ec95
 800eb00:	0800ec95 	.word	0x0800ec95
 800eb04:	0800ec95 	.word	0x0800ec95
 800eb08:	0800ec95 	.word	0x0800ec95
 800eb0c:	0800ec95 	.word	0x0800ec95
 800eb10:	0800ec95 	.word	0x0800ec95
 800eb14:	0800ec95 	.word	0x0800ec95
 800eb18:	0800ec95 	.word	0x0800ec95
 800eb1c:	0800ec95 	.word	0x0800ec95
 800eb20:	0800ec95 	.word	0x0800ec95
 800eb24:	0800ec95 	.word	0x0800ec95
 800eb28:	0800ec95 	.word	0x0800ec95
 800eb2c:	0800ec95 	.word	0x0800ec95
 800eb30:	0800ec95 	.word	0x0800ec95
 800eb34:	0800ec95 	.word	0x0800ec95
 800eb38:	0800ec95 	.word	0x0800ec95
 800eb3c:	0800ec95 	.word	0x0800ec95
 800eb40:	0800ec95 	.word	0x0800ec95
 800eb44:	0800ec95 	.word	0x0800ec95
 800eb48:	0800ec95 	.word	0x0800ec95
 800eb4c:	0800ec95 	.word	0x0800ec95
 800eb50:	0800ec95 	.word	0x0800ec95
 800eb54:	0800ec95 	.word	0x0800ec95
 800eb58:	0800ec95 	.word	0x0800ec95
 800eb5c:	0800ec95 	.word	0x0800ec95
 800eb60:	0800ec95 	.word	0x0800ec95
 800eb64:	0800ec95 	.word	0x0800ec95
 800eb68:	0800ec95 	.word	0x0800ec95
 800eb6c:	0800ec95 	.word	0x0800ec95
 800eb70:	0800ec95 	.word	0x0800ec95
 800eb74:	0800ec95 	.word	0x0800ec95
 800eb78:	0800ec95 	.word	0x0800ec95
 800eb7c:	0800ec95 	.word	0x0800ec95
 800eb80:	0800ec95 	.word	0x0800ec95
 800eb84:	0800ec95 	.word	0x0800ec95
 800eb88:	0800ec95 	.word	0x0800ec95
 800eb8c:	0800ec95 	.word	0x0800ec95
 800eb90:	0800ec95 	.word	0x0800ec95
 800eb94:	0800ebe1 	.word	0x0800ebe1
 800eb98:	0800ebf3 	.word	0x0800ebf3
 800eb9c:	0800ec05 	.word	0x0800ec05
 800eba0:	0800ec17 	.word	0x0800ec17
 800eba4:	0800ec29 	.word	0x0800ec29
 800eba8:	0800ec3b 	.word	0x0800ec3b
 800ebac:	0800ec4d 	.word	0x0800ec4d
 800ebb0:	0800ec5f 	.word	0x0800ec5f
 800ebb4:	0800ec71 	.word	0x0800ec71
 800ebb8:	0800ec83 	.word	0x0800ec83
					case R90S:		MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );			break;
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	f7f4 fa21 	bl	8003004 <PARAM_getSra>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f7fc f936 	bl	800ae38 <MOT_goSla>
 800ebcc:	e062      	b.n	800ec94 <MAP_drive+0x624>
					case L90S:		MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );			break;
 800ebce:	2000      	movs	r0, #0
 800ebd0:	f7f4 fa18 	bl	8003004 <PARAM_getSra>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	2001      	movs	r0, #1
 800ebda:	f7fc f92d 	bl	800ae38 <MOT_goSla>
 800ebde:	e059      	b.n	800ec94 <MAP_drive+0x624>
					case RS45N:		MOT_goSla( MOT_R45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	f7f4 fa0f 	bl	8003004 <PARAM_getSra>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4619      	mov	r1, r3
 800ebea:	2002      	movs	r0, #2
 800ebec:	f7fc f924 	bl	800ae38 <MOT_goSla>
 800ebf0:	e050      	b.n	800ec94 <MAP_drive+0x624>
					case LS45N:		MOT_goSla( MOT_L45S_S2N, PARAM_getSra( SLA_45 ) ); 		break;
 800ebf2:	2001      	movs	r0, #1
 800ebf4:	f7f4 fa06 	bl	8003004 <PARAM_getSra>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	2003      	movs	r0, #3
 800ebfe:	f7fc f91b 	bl	800ae38 <MOT_goSla>
 800ec02:	e047      	b.n	800ec94 <MAP_drive+0x624>
					case RS135N:	MOT_goSla( MOT_R135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 800ec04:	2002      	movs	r0, #2
 800ec06:	f7f4 f9fd 	bl	8003004 <PARAM_getSra>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	2008      	movs	r0, #8
 800ec10:	f7fc f912 	bl	800ae38 <MOT_goSla>
 800ec14:	e03e      	b.n	800ec94 <MAP_drive+0x624>
					case LS135N:	MOT_goSla( MOT_L135S_S2N, PARAM_getSra( SLA_135 ) ); 	break;
 800ec16:	2002      	movs	r0, #2
 800ec18:	f7f4 f9f4 	bl	8003004 <PARAM_getSra>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	4619      	mov	r1, r3
 800ec20:	2009      	movs	r0, #9
 800ec22:	f7fc f909 	bl	800ae38 <MOT_goSla>
 800ec26:	e035      	b.n	800ec94 <MAP_drive+0x624>
					case RN45S:		MOT_goSla( MOT_R45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 800ec28:	2001      	movs	r0, #1
 800ec2a:	f7f4 f9eb 	bl	8003004 <PARAM_getSra>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	4619      	mov	r1, r3
 800ec32:	2004      	movs	r0, #4
 800ec34:	f7fc f900 	bl	800ae38 <MOT_goSla>
 800ec38:	e02c      	b.n	800ec94 <MAP_drive+0x624>
					case LN45S:		MOT_goSla( MOT_L45S_N2S, PARAM_getSra( SLA_45 ) ); 		break;
 800ec3a:	2001      	movs	r0, #1
 800ec3c:	f7f4 f9e2 	bl	8003004 <PARAM_getSra>
 800ec40:	4603      	mov	r3, r0
 800ec42:	4619      	mov	r1, r3
 800ec44:	2005      	movs	r0, #5
 800ec46:	f7fc f8f7 	bl	800ae38 <MOT_goSla>
 800ec4a:	e023      	b.n	800ec94 <MAP_drive+0x624>
					case RN135S:	MOT_goSla( MOT_R135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 800ec4c:	2002      	movs	r0, #2
 800ec4e:	f7f4 f9d9 	bl	8003004 <PARAM_getSra>
 800ec52:	4603      	mov	r3, r0
 800ec54:	4619      	mov	r1, r3
 800ec56:	200a      	movs	r0, #10
 800ec58:	f7fc f8ee 	bl	800ae38 <MOT_goSla>
 800ec5c:	e01a      	b.n	800ec94 <MAP_drive+0x624>
					case LN135S:	MOT_goSla( MOT_L135S_N2S, PARAM_getSra( SLA_135 ) ); 	break;
 800ec5e:	2002      	movs	r0, #2
 800ec60:	f7f4 f9d0 	bl	8003004 <PARAM_getSra>
 800ec64:	4603      	mov	r3, r0
 800ec66:	4619      	mov	r1, r3
 800ec68:	200b      	movs	r0, #11
 800ec6a:	f7fc f8e5 	bl	800ae38 <MOT_goSla>
 800ec6e:	e011      	b.n	800ec94 <MAP_drive+0x624>
					case RN90N:		MOT_goSla( MOT_R90S_N, PARAM_getSra( SLA_N90 ) ); 		break;
 800ec70:	2003      	movs	r0, #3
 800ec72:	f7f4 f9c7 	bl	8003004 <PARAM_getSra>
 800ec76:	4603      	mov	r3, r0
 800ec78:	4619      	mov	r1, r3
 800ec7a:	2006      	movs	r0, #6
 800ec7c:	f7fc f8dc 	bl	800ae38 <MOT_goSla>
 800ec80:	e008      	b.n	800ec94 <MAP_drive+0x624>
					case LN90N:		MOT_goSla( MOT_L90S_N, PARAM_getSra( SLA_N90 ) );		break;
 800ec82:	2003      	movs	r0, #3
 800ec84:	f7f4 f9be 	bl	8003004 <PARAM_getSra>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	2007      	movs	r0, #7
 800ec8e:	f7fc f8d3 	bl	800ae38 <MOT_goSla>
 800ec92:	bf00      	nop
			us_rp++;
 800ec94:	89fb      	ldrh	r3, [r7, #14]
 800ec96:	3301      	adds	r3, #1
 800ec98:	81fb      	strh	r3, [r7, #14]
			if( SYS_isOutOfCtrl() == TRUE ){
 800ec9a:	f7f8 ffef 	bl	8007c7c <SYS_isOutOfCtrl>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f43f ae0f 	beq.w	800e8c4 <MAP_drive+0x254>
				CTRL_stop();
 800eca6:	f7f6 fd61 	bl	800576c <CTRL_stop>
				DCM_brakeMot( DCM_R );		// ブレーキ
 800ecaa:	2000      	movs	r0, #0
 800ecac:	f7f9 f818 	bl	8007ce0 <DCM_brakeMot>
				DCM_brakeMot( DCM_L );		// ブレーキ
 800ecb0:	2001      	movs	r0, #1
 800ecb2:	f7f9 f815 	bl	8007ce0 <DCM_brakeMot>
				break;
 800ecb6:	e00a      	b.n	800ecce <MAP_drive+0x65e>
 800ecb8:	20007f48 	.word	0x20007f48
 800ecbc:	200002b4 	.word	0x200002b4
 800ecc0:	20007f0c 	.word	0x20007f0c
 800ecc4:	88888889 	.word	0x88888889
			if ( scom[us_rp] == CEND  ) break;							//	コマンド終了
 800ecc8:	bf00      	nop
 800ecca:	e000      	b.n	800ecce <MAP_drive+0x65e>
			if ( tcom[us_rp] == CEND  ) break;							//	コマンド終了
 800eccc:	bf00      	nop
}
 800ecce:	bf00      	nop
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	ecbd 8b02 	vpop	{d8}
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop

0800ecdc <MAP_searchCmdList>:
	uint8_t uc_staY,					///< [in] 開始Y座標
	enMAP_HEAD_DIR en_staDir,		///< [in] 開始時の方向
	uint8_t uc_endX,					///< [in] 終了X座標
	uint8_t uc_endY,					///< [in] 終了Y座標
	enMAP_HEAD_DIR* en_endDir		///< [out] 終了時の方向
) {
 800ecdc:	b490      	push	{r4, r7}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	4608      	mov	r0, r1
 800ece6:	4611      	mov	r1, r2
 800ece8:	461a      	mov	r2, r3
 800ecea:	4623      	mov	r3, r4
 800ecec:	71fb      	strb	r3, [r7, #7]
 800ecee:	4603      	mov	r3, r0
 800ecf0:	71bb      	strb	r3, [r7, #6]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	717b      	strb	r3, [r7, #5]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_nowDir;									// 現在マウスの向いている絶対方向
	enMAP_HEAD_DIR	en_tempDir;									// 相対方向
//	uint16_t			i;											// roop

	/* 前進ステップ数を初期化する */
	uc_goStep = 0;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	73bb      	strb	r3, [r7, #14]
	us_pt = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	81bb      	strh	r3, [r7, #12]
//	printf("mx%d,my%d\n", uc_staX, uc_staY);
	/* 迷路情報からコマンド作成 */
	while (1) {
		us_high = us_cmap[uc_staY][uc_staX] - 1;
 800ed02:	79ba      	ldrb	r2, [r7, #6]
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	499b      	ldr	r1, [pc, #620]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ed08:	0152      	lsls	r2, r2, #5
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	817b      	strh	r3, [r7, #10]
		if ((g_sysMap[uc_staY][uc_staX]&0xf0) != 0xf0){
 800ed14:	79ba      	ldrb	r2, [r7, #6]
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	4997      	ldr	r1, [pc, #604]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ed1a:	0152      	lsls	r2, r2, #5
 800ed1c:	440a      	add	r2, r1
 800ed1e:	4413      	add	r3, r2
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed26:	2bf0      	cmp	r3, #240	; 0xf0
 800ed28:	d006      	beq.n	800ed38 <MAP_searchCmdList+0x5c>
			Return_X = uc_staX;
 800ed2a:	4a94      	ldr	r2, [pc, #592]	; (800ef7c <MAP_searchCmdList+0x2a0>)
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	7013      	strb	r3, [r2, #0]
			Return_Y = uc_staY;
 800ed30:	4a93      	ldr	r2, [pc, #588]	; (800ef80 <MAP_searchCmdList+0x2a4>)
 800ed32:	79bb      	ldrb	r3, [r7, #6]
 800ed34:	7013      	strb	r3, [r2, #0]
			break;
 800ed36:	e1dd      	b.n	800f0f4 <MAP_searchCmdList+0x418>
		}

		if (en_staDir == NORTH) {
 800ed38:	797b      	ldrb	r3, [r7, #5]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d164      	bne.n	800ee08 <MAP_searchCmdList+0x12c>
			if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 800ed3e:	79ba      	ldrb	r2, [r7, #6]
 800ed40:	79fb      	ldrb	r3, [r7, #7]
 800ed42:	498d      	ldr	r1, [pc, #564]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ed44:	0152      	lsls	r2, r2, #5
 800ed46:	440a      	add	r2, r1
 800ed48:	4413      	add	r3, r2
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f003 0311 	and.w	r3, r3, #17
 800ed50:	2b10      	cmp	r3, #16
 800ed52:	d10d      	bne.n	800ed70 <MAP_searchCmdList+0x94>
 800ed54:	79bb      	ldrb	r3, [r7, #6]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	4986      	ldr	r1, [pc, #536]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ed5c:	0152      	lsls	r2, r2, #5
 800ed5e:	4413      	add	r3, r2
 800ed60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed64:	897a      	ldrh	r2, [r7, #10]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d102      	bne.n	800ed70 <MAP_searchCmdList+0x94>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]
 800ed6e:	e18b      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 800ed70:	79ba      	ldrb	r2, [r7, #6]
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	4980      	ldr	r1, [pc, #512]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ed76:	0152      	lsls	r2, r2, #5
 800ed78:	440a      	add	r2, r1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ed82:	2b20      	cmp	r3, #32
 800ed84:	d10d      	bne.n	800eda2 <MAP_searchCmdList+0xc6>
 800ed86:	79ba      	ldrb	r2, [r7, #6]
 800ed88:	79fb      	ldrb	r3, [r7, #7]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	4979      	ldr	r1, [pc, #484]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ed8e:	0152      	lsls	r2, r2, #5
 800ed90:	4413      	add	r3, r2
 800ed92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed96:	897a      	ldrh	r2, [r7, #10]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d102      	bne.n	800eda2 <MAP_searchCmdList+0xc6>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	73fb      	strb	r3, [r7, #15]
 800eda0:	e172      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 800eda2:	79ba      	ldrb	r2, [r7, #6]
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	4974      	ldr	r1, [pc, #464]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800eda8:	0152      	lsls	r2, r2, #5
 800edaa:	440a      	add	r2, r1
 800edac:	4413      	add	r3, r2
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800edb4:	2b80      	cmp	r3, #128	; 0x80
 800edb6:	d10d      	bne.n	800edd4 <MAP_searchCmdList+0xf8>
 800edb8:	79ba      	ldrb	r2, [r7, #6]
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	3b01      	subs	r3, #1
 800edbe:	496d      	ldr	r1, [pc, #436]	; (800ef74 <MAP_searchCmdList+0x298>)
 800edc0:	0152      	lsls	r2, r2, #5
 800edc2:	4413      	add	r3, r2
 800edc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800edc8:	897a      	ldrh	r2, [r7, #10]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d102      	bne.n	800edd4 <MAP_searchCmdList+0xf8>
 800edce:	2303      	movs	r3, #3
 800edd0:	73fb      	strb	r3, [r7, #15]
 800edd2:	e159      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 800edd4:	79ba      	ldrb	r2, [r7, #6]
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	4967      	ldr	r1, [pc, #412]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800edda:	0152      	lsls	r2, r2, #5
 800eddc:	440a      	add	r2, r1
 800edde:	4413      	add	r3, r2
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ede6:	2b40      	cmp	r3, #64	; 0x40
 800ede8:	d10d      	bne.n	800ee06 <MAP_searchCmdList+0x12a>
 800edea:	79bb      	ldrb	r3, [r7, #6]
 800edec:	1e5a      	subs	r2, r3, #1
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4960      	ldr	r1, [pc, #384]	; (800ef74 <MAP_searchCmdList+0x298>)
 800edf2:	0152      	lsls	r2, r2, #5
 800edf4:	4413      	add	r3, r2
 800edf6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800edfa:	897a      	ldrh	r2, [r7, #10]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d102      	bne.n	800ee06 <MAP_searchCmdList+0x12a>
 800ee00:	2302      	movs	r3, #2
 800ee02:	73fb      	strb	r3, [r7, #15]
 800ee04:	e140      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else   while (1);
 800ee06:	e7fe      	b.n	800ee06 <MAP_searchCmdList+0x12a>
		}
		else if (en_staDir == EAST) {
 800ee08:	797b      	ldrb	r3, [r7, #5]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d164      	bne.n	800eed8 <MAP_searchCmdList+0x1fc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 800ee0e:	79ba      	ldrb	r2, [r7, #6]
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	4959      	ldr	r1, [pc, #356]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ee14:	0152      	lsls	r2, r2, #5
 800ee16:	440a      	add	r2, r1
 800ee18:	4413      	add	r3, r2
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ee20:	2b20      	cmp	r3, #32
 800ee22:	d10d      	bne.n	800ee40 <MAP_searchCmdList+0x164>
 800ee24:	79ba      	ldrb	r2, [r7, #6]
 800ee26:	79fb      	ldrb	r3, [r7, #7]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	4952      	ldr	r1, [pc, #328]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ee2c:	0152      	lsls	r2, r2, #5
 800ee2e:	4413      	add	r3, r2
 800ee30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee34:	897a      	ldrh	r2, [r7, #10]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d102      	bne.n	800ee40 <MAP_searchCmdList+0x164>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	73fb      	strb	r3, [r7, #15]
 800ee3e:	e123      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 800ee40:	79ba      	ldrb	r2, [r7, #6]
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	494c      	ldr	r1, [pc, #304]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ee46:	0152      	lsls	r2, r2, #5
 800ee48:	440a      	add	r2, r1
 800ee4a:	4413      	add	r3, r2
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	f003 0311 	and.w	r3, r3, #17
 800ee52:	2b10      	cmp	r3, #16
 800ee54:	d10d      	bne.n	800ee72 <MAP_searchCmdList+0x196>
 800ee56:	79bb      	ldrb	r3, [r7, #6]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	79fb      	ldrb	r3, [r7, #7]
 800ee5c:	4945      	ldr	r1, [pc, #276]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ee5e:	0152      	lsls	r2, r2, #5
 800ee60:	4413      	add	r3, r2
 800ee62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee66:	897a      	ldrh	r2, [r7, #10]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d102      	bne.n	800ee72 <MAP_searchCmdList+0x196>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
 800ee70:	e10a      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 800ee72:	79ba      	ldrb	r2, [r7, #6]
 800ee74:	79fb      	ldrb	r3, [r7, #7]
 800ee76:	4940      	ldr	r1, [pc, #256]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ee78:	0152      	lsls	r2, r2, #5
 800ee7a:	440a      	add	r2, r1
 800ee7c:	4413      	add	r3, r2
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ee84:	2b40      	cmp	r3, #64	; 0x40
 800ee86:	d10d      	bne.n	800eea4 <MAP_searchCmdList+0x1c8>
 800ee88:	79bb      	ldrb	r3, [r7, #6]
 800ee8a:	1e5a      	subs	r2, r3, #1
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	4939      	ldr	r1, [pc, #228]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ee90:	0152      	lsls	r2, r2, #5
 800ee92:	4413      	add	r3, r2
 800ee94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee98:	897a      	ldrh	r2, [r7, #10]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d102      	bne.n	800eea4 <MAP_searchCmdList+0x1c8>
 800ee9e:	2302      	movs	r3, #2
 800eea0:	73fb      	strb	r3, [r7, #15]
 800eea2:	e0f1      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 800eea4:	79ba      	ldrb	r2, [r7, #6]
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	4933      	ldr	r1, [pc, #204]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800eeaa:	0152      	lsls	r2, r2, #5
 800eeac:	440a      	add	r2, r1
 800eeae:	4413      	add	r3, r2
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800eeb6:	2b80      	cmp	r3, #128	; 0x80
 800eeb8:	d10d      	bne.n	800eed6 <MAP_searchCmdList+0x1fa>
 800eeba:	79ba      	ldrb	r2, [r7, #6]
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	492c      	ldr	r1, [pc, #176]	; (800ef74 <MAP_searchCmdList+0x298>)
 800eec2:	0152      	lsls	r2, r2, #5
 800eec4:	4413      	add	r3, r2
 800eec6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eeca:	897a      	ldrh	r2, [r7, #10]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d102      	bne.n	800eed6 <MAP_searchCmdList+0x1fa>
 800eed0:	2303      	movs	r3, #3
 800eed2:	73fb      	strb	r3, [r7, #15]
 800eed4:	e0d8      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else   while (1);
 800eed6:	e7fe      	b.n	800eed6 <MAP_searchCmdList+0x1fa>
		}
		else if (en_staDir == SOUTH) {
 800eed8:	797b      	ldrb	r3, [r7, #5]
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d16c      	bne.n	800efb8 <MAP_searchCmdList+0x2dc>
			if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 800eede:	79ba      	ldrb	r2, [r7, #6]
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	4925      	ldr	r1, [pc, #148]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800eee4:	0152      	lsls	r2, r2, #5
 800eee6:	440a      	add	r2, r1
 800eee8:	4413      	add	r3, r2
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d10d      	bne.n	800ef10 <MAP_searchCmdList+0x234>
 800eef4:	79bb      	ldrb	r3, [r7, #6]
 800eef6:	1e5a      	subs	r2, r3, #1
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	491e      	ldr	r1, [pc, #120]	; (800ef74 <MAP_searchCmdList+0x298>)
 800eefc:	0152      	lsls	r2, r2, #5
 800eefe:	4413      	add	r3, r2
 800ef00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef04:	897a      	ldrh	r2, [r7, #10]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d102      	bne.n	800ef10 <MAP_searchCmdList+0x234>
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	73fb      	strb	r3, [r7, #15]
 800ef0e:	e0bb      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 800ef10:	79ba      	ldrb	r2, [r7, #6]
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	4918      	ldr	r1, [pc, #96]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ef16:	0152      	lsls	r2, r2, #5
 800ef18:	440a      	add	r2, r1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ef22:	2b20      	cmp	r3, #32
 800ef24:	d10d      	bne.n	800ef42 <MAP_searchCmdList+0x266>
 800ef26:	79ba      	ldrb	r2, [r7, #6]
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	4911      	ldr	r1, [pc, #68]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ef2e:	0152      	lsls	r2, r2, #5
 800ef30:	4413      	add	r3, r2
 800ef32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef36:	897a      	ldrh	r2, [r7, #10]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d102      	bne.n	800ef42 <MAP_searchCmdList+0x266>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	73fb      	strb	r3, [r7, #15]
 800ef40:	e0a2      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 800ef42:	79ba      	ldrb	r2, [r7, #6]
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	490c      	ldr	r1, [pc, #48]	; (800ef78 <MAP_searchCmdList+0x29c>)
 800ef48:	0152      	lsls	r2, r2, #5
 800ef4a:	440a      	add	r2, r1
 800ef4c:	4413      	add	r3, r2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ef54:	2b80      	cmp	r3, #128	; 0x80
 800ef56:	d115      	bne.n	800ef84 <MAP_searchCmdList+0x2a8>
 800ef58:	79ba      	ldrb	r2, [r7, #6]
 800ef5a:	79fb      	ldrb	r3, [r7, #7]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	4905      	ldr	r1, [pc, #20]	; (800ef74 <MAP_searchCmdList+0x298>)
 800ef60:	0152      	lsls	r2, r2, #5
 800ef62:	4413      	add	r3, r2
 800ef64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef68:	897a      	ldrh	r2, [r7, #10]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d10a      	bne.n	800ef84 <MAP_searchCmdList+0x2a8>
 800ef6e:	2303      	movs	r3, #3
 800ef70:	73fb      	strb	r3, [r7, #15]
 800ef72:	e089      	b.n	800f088 <MAP_searchCmdList+0x3ac>
 800ef74:	20000718 	.word	0x20000718
 800ef78:	200002f4 	.word	0x200002f4
 800ef7c:	200002d1 	.word	0x200002d1
 800ef80:	200002d9 	.word	0x200002d9
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 800ef84:	79ba      	ldrb	r2, [r7, #6]
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	495e      	ldr	r1, [pc, #376]	; (800f104 <MAP_searchCmdList+0x428>)
 800ef8a:	0152      	lsls	r2, r2, #5
 800ef8c:	440a      	add	r2, r1
 800ef8e:	4413      	add	r3, r2
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f003 0311 	and.w	r3, r3, #17
 800ef96:	2b10      	cmp	r3, #16
 800ef98:	d10d      	bne.n	800efb6 <MAP_searchCmdList+0x2da>
 800ef9a:	79bb      	ldrb	r3, [r7, #6]
 800ef9c:	1c5a      	adds	r2, r3, #1
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	4959      	ldr	r1, [pc, #356]	; (800f108 <MAP_searchCmdList+0x42c>)
 800efa2:	0152      	lsls	r2, r2, #5
 800efa4:	4413      	add	r3, r2
 800efa6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efaa:	897a      	ldrh	r2, [r7, #10]
 800efac:	429a      	cmp	r2, r3
 800efae:	d102      	bne.n	800efb6 <MAP_searchCmdList+0x2da>
 800efb0:	2300      	movs	r3, #0
 800efb2:	73fb      	strb	r3, [r7, #15]
 800efb4:	e068      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else   while (1);
 800efb6:	e7fe      	b.n	800efb6 <MAP_searchCmdList+0x2da>
		}
		else if (en_staDir == WEST) {
 800efb8:	797b      	ldrb	r3, [r7, #5]
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d164      	bne.n	800f088 <MAP_searchCmdList+0x3ac>
			if (((g_sysMap[uc_staY][uc_staX] & 0x88) == 0x80) && (us_cmap[uc_staY][uc_staX - 1] == us_high)) en_nowDir = WEST;
 800efbe:	79ba      	ldrb	r2, [r7, #6]
 800efc0:	79fb      	ldrb	r3, [r7, #7]
 800efc2:	4950      	ldr	r1, [pc, #320]	; (800f104 <MAP_searchCmdList+0x428>)
 800efc4:	0152      	lsls	r2, r2, #5
 800efc6:	440a      	add	r2, r1
 800efc8:	4413      	add	r3, r2
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800efd0:	2b80      	cmp	r3, #128	; 0x80
 800efd2:	d10d      	bne.n	800eff0 <MAP_searchCmdList+0x314>
 800efd4:	79ba      	ldrb	r2, [r7, #6]
 800efd6:	79fb      	ldrb	r3, [r7, #7]
 800efd8:	3b01      	subs	r3, #1
 800efda:	494b      	ldr	r1, [pc, #300]	; (800f108 <MAP_searchCmdList+0x42c>)
 800efdc:	0152      	lsls	r2, r2, #5
 800efde:	4413      	add	r3, r2
 800efe0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efe4:	897a      	ldrh	r2, [r7, #10]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d102      	bne.n	800eff0 <MAP_searchCmdList+0x314>
 800efea:	2303      	movs	r3, #3
 800efec:	73fb      	strb	r3, [r7, #15]
 800efee:	e04b      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x11) == 0x10) && (us_cmap[uc_staY + 1][uc_staX] == us_high)) en_nowDir = NORTH;
 800eff0:	79ba      	ldrb	r2, [r7, #6]
 800eff2:	79fb      	ldrb	r3, [r7, #7]
 800eff4:	4943      	ldr	r1, [pc, #268]	; (800f104 <MAP_searchCmdList+0x428>)
 800eff6:	0152      	lsls	r2, r2, #5
 800eff8:	440a      	add	r2, r1
 800effa:	4413      	add	r3, r2
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	f003 0311 	and.w	r3, r3, #17
 800f002:	2b10      	cmp	r3, #16
 800f004:	d10d      	bne.n	800f022 <MAP_searchCmdList+0x346>
 800f006:	79bb      	ldrb	r3, [r7, #6]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	79fb      	ldrb	r3, [r7, #7]
 800f00c:	493e      	ldr	r1, [pc, #248]	; (800f108 <MAP_searchCmdList+0x42c>)
 800f00e:	0152      	lsls	r2, r2, #5
 800f010:	4413      	add	r3, r2
 800f012:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f016:	897a      	ldrh	r2, [r7, #10]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d102      	bne.n	800f022 <MAP_searchCmdList+0x346>
 800f01c:	2300      	movs	r3, #0
 800f01e:	73fb      	strb	r3, [r7, #15]
 800f020:	e032      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x44) == 0x40) && (us_cmap[uc_staY - 1][uc_staX] == us_high)) en_nowDir = SOUTH;
 800f022:	79ba      	ldrb	r2, [r7, #6]
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	4937      	ldr	r1, [pc, #220]	; (800f104 <MAP_searchCmdList+0x428>)
 800f028:	0152      	lsls	r2, r2, #5
 800f02a:	440a      	add	r2, r1
 800f02c:	4413      	add	r3, r2
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f034:	2b40      	cmp	r3, #64	; 0x40
 800f036:	d10d      	bne.n	800f054 <MAP_searchCmdList+0x378>
 800f038:	79bb      	ldrb	r3, [r7, #6]
 800f03a:	1e5a      	subs	r2, r3, #1
 800f03c:	79fb      	ldrb	r3, [r7, #7]
 800f03e:	4932      	ldr	r1, [pc, #200]	; (800f108 <MAP_searchCmdList+0x42c>)
 800f040:	0152      	lsls	r2, r2, #5
 800f042:	4413      	add	r3, r2
 800f044:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f048:	897a      	ldrh	r2, [r7, #10]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d102      	bne.n	800f054 <MAP_searchCmdList+0x378>
 800f04e:	2302      	movs	r3, #2
 800f050:	73fb      	strb	r3, [r7, #15]
 800f052:	e019      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else if (((g_sysMap[uc_staY][uc_staX] & 0x22) == 0x20) && (us_cmap[uc_staY][uc_staX + 1] == us_high)) en_nowDir = EAST;
 800f054:	79ba      	ldrb	r2, [r7, #6]
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	492a      	ldr	r1, [pc, #168]	; (800f104 <MAP_searchCmdList+0x428>)
 800f05a:	0152      	lsls	r2, r2, #5
 800f05c:	440a      	add	r2, r1
 800f05e:	4413      	add	r3, r2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f066:	2b20      	cmp	r3, #32
 800f068:	d10d      	bne.n	800f086 <MAP_searchCmdList+0x3aa>
 800f06a:	79ba      	ldrb	r2, [r7, #6]
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	3301      	adds	r3, #1
 800f070:	4925      	ldr	r1, [pc, #148]	; (800f108 <MAP_searchCmdList+0x42c>)
 800f072:	0152      	lsls	r2, r2, #5
 800f074:	4413      	add	r3, r2
 800f076:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f07a:	897a      	ldrh	r2, [r7, #10]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d102      	bne.n	800f086 <MAP_searchCmdList+0x3aa>
 800f080:	2301      	movs	r3, #1
 800f082:	73fb      	strb	r3, [r7, #15]
 800f084:	e000      	b.n	800f088 <MAP_searchCmdList+0x3ac>
			else   while (1);
 800f086:	e7fe      	b.n	800f086 <MAP_searchCmdList+0x3aa>
		}

		en_tempDir = (enMAP_HEAD_DIR)((en_nowDir - en_staDir) & (enMAP_HEAD_DIR)3);		// 方向更新
 800f088:	7bfa      	ldrb	r2, [r7, #15]
 800f08a:	797b      	ldrb	r3, [r7, #5]
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	f003 0303 	and.w	r3, r3, #3
 800f094:	727b      	strb	r3, [r7, #9]
		en_staDir = en_nowDir;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	717b      	strb	r3, [r7, #5]

		if (en_nowDir == NORTH) uc_staY = uc_staY + 1;
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d103      	bne.n	800f0a8 <MAP_searchCmdList+0x3cc>
 800f0a0:	79bb      	ldrb	r3, [r7, #6]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	71bb      	strb	r3, [r7, #6]
 800f0a6:	e013      	b.n	800f0d0 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == EAST) uc_staX = uc_staX + 1;
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d103      	bne.n	800f0b6 <MAP_searchCmdList+0x3da>
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	71fb      	strb	r3, [r7, #7]
 800f0b4:	e00c      	b.n	800f0d0 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == SOUTH) uc_staY = uc_staY - 1;
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	2b02      	cmp	r3, #2
 800f0ba:	d103      	bne.n	800f0c4 <MAP_searchCmdList+0x3e8>
 800f0bc:	79bb      	ldrb	r3, [r7, #6]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	71bb      	strb	r3, [r7, #6]
 800f0c2:	e005      	b.n	800f0d0 <MAP_searchCmdList+0x3f4>
		else if (en_nowDir == WEST) uc_staX = uc_staX - 1;
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	d102      	bne.n	800f0d0 <MAP_searchCmdList+0x3f4>
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	71fb      	strb	r3, [r7, #7]

		en_staDir = en_nowDir;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	717b      	strb	r3, [r7, #5]

//		if ((uc_staX == uc_endX) && (uc_staY == uc_endY)) break;
		if (us_cmap[uc_staY][uc_staX] == 0) {
 800f0d4:	79ba      	ldrb	r2, [r7, #6]
 800f0d6:	79fb      	ldrb	r3, [r7, #7]
 800f0d8:	490b      	ldr	r1, [pc, #44]	; (800f108 <MAP_searchCmdList+0x42c>)
 800f0da:	0152      	lsls	r2, r2, #5
 800f0dc:	4413      	add	r3, r2
 800f0de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f47f ae0d 	bne.w	800ed02 <MAP_searchCmdList+0x26>
			Return_X = 0;
 800f0e8:	4b08      	ldr	r3, [pc, #32]	; (800f10c <MAP_searchCmdList+0x430>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	701a      	strb	r2, [r3, #0]
			Return_Y = 0;
 800f0ee:	4b08      	ldr	r3, [pc, #32]	; (800f110 <MAP_searchCmdList+0x434>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	701a      	strb	r2, [r3, #0]
		}
	}


	/* 最終的に向いている方向 */
	*en_endDir = en_staDir;
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	797a      	ldrb	r2, [r7, #5]
 800f0f8:	701a      	strb	r2, [r3, #0]
}
 800f0fa:	bf00      	nop
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bc90      	pop	{r4, r7}
 800f102:	4770      	bx	lr
 800f104:	200002f4 	.word	0x200002f4
 800f108:	20000718 	.word	0x20000718
 800f10c:	200002d1 	.word	0x200002d1
 800f110:	200002d9 	.word	0x200002d9

0800f114 <FLASH_Lock>:
{
 800f114:	b480      	push	{r7}
 800f116:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <FLASH_Lock+0x1c>)
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	4a04      	ldr	r2, [pc, #16]	; (800f130 <FLASH_Lock+0x1c>)
 800f11e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f122:	6153      	str	r3, [r2, #20]
}
 800f124:	bf00      	nop
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	40022000 	.word	0x40022000

0800f134 <FLASH_Unlock>:
{
 800f134:	b480      	push	{r7}
 800f136:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 800f138:	4b05      	ldr	r3, [pc, #20]	; (800f150 <FLASH_Unlock+0x1c>)
 800f13a:	4a06      	ldr	r2, [pc, #24]	; (800f154 <FLASH_Unlock+0x20>)
 800f13c:	609a      	str	r2, [r3, #8]
	FLASH->KEYR = FLASH_KEY2;
 800f13e:	4b04      	ldr	r3, [pc, #16]	; (800f150 <FLASH_Unlock+0x1c>)
 800f140:	4a05      	ldr	r2, [pc, #20]	; (800f158 <FLASH_Unlock+0x24>)
 800f142:	609a      	str	r2, [r3, #8]
}
 800f144:	bf00      	nop
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	40022000 	.word	0x40022000
 800f154:	45670123 	.word	0x45670123
 800f158:	cdef89ab 	.word	0xcdef89ab

0800f15c <map_write>:


#include "search/map_flash.h"

void map_write(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
	uint64_t *map_add;
	map_add = (uint64_t *)g_sysMap;
 800f162:	4b06      	ldr	r3, [pc, #24]	; (800f17c <map_write+0x20>)
 800f164:	607b      	str	r3, [r7, #4]
	
	//DataFlashイレース
//    FLASH_Erase(0x7F);  //reg127
	//マップデータをDataFlashに書き込む
    FLASH_WriteData(0x7F,(uint32_t)sta_add_127, map_add, 32*32);
 800f166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	4904      	ldr	r1, [pc, #16]	; (800f180 <map_write+0x24>)
 800f16e:	207f      	movs	r0, #127	; 0x7f
 800f170:	f7f2 fd40 	bl	8001bf4 <FLASH_WriteData>
}
 800f174:	bf00      	nop
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	200002f4 	.word	0x200002f4
 800f180:	0807f800 	.word	0x0807f800

0800f184 <map_copy>:

void map_copy(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
    uint64_t *map_add;
    map_add = (uint64_t *)&g_sysMap;
 800f18a:	4b0f      	ldr	r3, [pc, #60]	; (800f1c8 <map_copy+0x44>)
 800f18c:	60fb      	str	r3, [r7, #12]
    uint32_t read_address = sta_add_127;
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <map_copy+0x48>)
 800f190:	60bb      	str	r3, [r7, #8]

    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 800f192:	2300      	movs	r3, #0
 800f194:	80fb      	strh	r3, [r7, #6]
 800f196:	e00d      	b.n	800f1b4 <map_copy+0x30>
	    FLASH_ReadData(read_address, map_add, 8);
 800f198:	2208      	movs	r2, #8
 800f19a:	68f9      	ldr	r1, [r7, #12]
 800f19c:	68b8      	ldr	r0, [r7, #8]
 800f19e:	f7f2 fd4f 	bl	8001c40 <FLASH_ReadData>
	    read_address +=8;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	3308      	adds	r3, #8
 800f1a6:	60bb      	str	r3, [r7, #8]
	    map_add++;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0;i<MAP_X_SIZE*MAP_Y_SIZE;i += 8){
 800f1ae:	88fb      	ldrh	r3, [r7, #6]
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	80fb      	strh	r3, [r7, #6]
 800f1b4:	88fb      	ldrh	r3, [r7, #6]
 800f1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1ba:	d3ed      	bcc.n	800f198 <map_copy+0x14>
    }
}
 800f1bc:	bf00      	nop
 800f1be:	bf00      	nop
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	200002f4 	.word	0x200002f4
 800f1cc:	0807f800 	.word	0x0807f800

0800f1d0 <map_erase>:

void map_erase(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
	FLASH_Unlock();
 800f1d4:	f7ff ffae 	bl	800f134 <FLASH_Unlock>
	FLASH_Erase(0x7F);
 800f1d8:	207f      	movs	r0, #127	; 0x7f
 800f1da:	f7f2 fc9f 	bl	8001b1c <FLASH_Erase>
	FLASH_Lock();
 800f1de:	f7ff ff99 	bl	800f114 <FLASH_Lock>
}
 800f1e2:	bf00      	nop
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <MAP_init>:
uint8_t			SLA_count = 30;

uint8_t near_wall = 0;

void MAP_init( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	af00      	add	r7, sp, #0
//	uint8_t uc_dummy[ MAP_Y_SIZE ][ MAP_X_SIZE ];			// 迷路データ

	/* 座標、向き、迷路情報を初期化 */
	en_Head		= NORTH;
 800f1ec:	4b09      	ldr	r3, [pc, #36]	; (800f214 <MAP_init+0x2c>)
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
	mx		= 0;
 800f1f2:	4b09      	ldr	r3, [pc, #36]	; (800f218 <MAP_init+0x30>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	701a      	strb	r2, [r3, #0]
	my		= 0;
 800f1f8:	4b08      	ldr	r3, [pc, #32]	; (800f21c <MAP_init+0x34>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	701a      	strb	r2, [r3, #0]
	MAP_clearMap();
 800f1fe:	f000 f913 	bl	800f428 <MAP_clearMap>
	
	/* 走行用のパラメータ */
	f_MoveBackDist = 0;
 800f202:	4b07      	ldr	r3, [pc, #28]	; (800f220 <MAP_init+0x38>)
 800f204:	f04f 0200 	mov.w	r2, #0
 800f208:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 800f20a:	4b06      	ldr	r3, [pc, #24]	; (800f224 <MAP_init+0x3c>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	701a      	strb	r2, [r3, #0]

}
 800f210:	bf00      	nop
 800f212:	bd80      	pop	{r7, pc}
 800f214:	200093d0 	.word	0x200093d0
 800f218:	200093d3 	.word	0x200093d3
 800f21c:	200093c9 	.word	0x200093c9
 800f220:	200093cc 	.word	0x200093cc
 800f224:	200002b6 	.word	0x200002b6

0800f228 <MAP_Goal_init>:

void MAP_Goal_init( void )
{
 800f228:	b480      	push	{r7}
 800f22a:	af00      	add	r7, sp, #0
	GOAL_MAP_X = GOAL_MAP_X_def;
 800f22c:	4b05      	ldr	r3, [pc, #20]	; (800f244 <MAP_Goal_init+0x1c>)
 800f22e:	2209      	movs	r2, #9
 800f230:	701a      	strb	r2, [r3, #0]
	GOAL_MAP_Y = GOAL_MAP_Y_def;
 800f232:	4b05      	ldr	r3, [pc, #20]	; (800f248 <MAP_Goal_init+0x20>)
 800f234:	2209      	movs	r2, #9
 800f236:	701a      	strb	r2, [r3, #0]
}
 800f238:	bf00      	nop
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	200093c8 	.word	0x200093c8
 800f248:	200093d1 	.word	0x200093d1

0800f24c <MAP_setPos>:

//	Storage_Clear( sizeof(g_sysMap), ADR_MAP );			// データセーブ
}

void MAP_setPos( uint8_t uc_x, uint8_t uc_y, enMAP_HEAD_DIR en_dir )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	4603      	mov	r3, r0
 800f254:	71fb      	strb	r3, [r7, #7]
 800f256:	460b      	mov	r3, r1
 800f258:	71bb      	strb	r3, [r7, #6]
 800f25a:	4613      	mov	r3, r2
 800f25c:	717b      	strb	r3, [r7, #5]
	mx		= uc_x;
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <MAP_setPos+0x38>)
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	7013      	strb	r3, [r2, #0]
	my		= uc_y;
 800f264:	4a08      	ldr	r2, [pc, #32]	; (800f288 <MAP_setPos+0x3c>)
 800f266:	79bb      	ldrb	r3, [r7, #6]
 800f268:	7013      	strb	r3, [r2, #0]
	en_Head		= en_dir;
 800f26a:	4a08      	ldr	r2, [pc, #32]	; (800f28c <MAP_setPos+0x40>)
 800f26c:	797b      	ldrb	r3, [r7, #5]
 800f26e:	7013      	strb	r3, [r2, #0]
	
	MAP_setCmdPos( uc_x, uc_y, en_dir );
 800f270:	797a      	ldrb	r2, [r7, #5]
 800f272:	79b9      	ldrb	r1, [r7, #6]
 800f274:	79fb      	ldrb	r3, [r7, #7]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd fdf6 	bl	800ce68 <MAP_setCmdPos>

}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	200093d3 	.word	0x200093d3
 800f288:	200093c9 	.word	0x200093c9
 800f28c:	200093d0 	.word	0x200093d0

0800f290 <MAP_showLog>:

void MAP_showLog( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
	uint8_t	c_data;
	
	/* ---------- */
	/*  通常迷路  */
	/* ---------- */
	printf("\n\r  /* ---------- */   ");
 800f296:	4857      	ldr	r0, [pc, #348]	; (800f3f4 <MAP_showLog+0x164>)
 800f298:	f004 fec8 	bl	801402c <iprintf>
	printf("\n\r  /*  通常迷路  */   ");
 800f29c:	4856      	ldr	r0, [pc, #344]	; (800f3f8 <MAP_showLog+0x168>)
 800f29e:	f004 fec5 	bl	801402c <iprintf>
	printf("\n\r  /* ---------- */   ");
 800f2a2:	4854      	ldr	r0, [pc, #336]	; (800f3f4 <MAP_showLog+0x164>)
 800f2a4:	f004 fec2 	bl	801402c <iprintf>

	printf("\n\r     ");
 800f2a8:	4854      	ldr	r0, [pc, #336]	; (800f3fc <MAP_showLog+0x16c>)
 800f2aa:	f004 febf 	bl	801402c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	80fb      	strh	r3, [r7, #6]
 800f2b2:	e008      	b.n	800f2c6 <MAP_showLog+0x36>
		printf("._");
 800f2b4:	4852      	ldr	r0, [pc, #328]	; (800f400 <MAP_showLog+0x170>)
 800f2b6:	f004 feb9 	bl	801402c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 800f2ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	80fb      	strh	r3, [r7, #6]
 800f2c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2ca:	2b1f      	cmp	r3, #31
 800f2cc:	ddf2      	ble.n	800f2b4 <MAP_showLog+0x24>
	}
	printf(".\n\r");
 800f2ce:	484d      	ldr	r0, [pc, #308]	; (800f404 <MAP_showLog+0x174>)
 800f2d0:	f004 feac 	bl	801402c <iprintf>
	
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 800f2d4:	231f      	movs	r3, #31
 800f2d6:	80bb      	strh	r3, [r7, #4]
 800f2d8:	e05f      	b.n	800f39a <MAP_showLog+0x10a>
		
		printf("   %2d",y);
 800f2da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f2de:	4619      	mov	r1, r3
 800f2e0:	4849      	ldr	r0, [pc, #292]	; (800f408 <MAP_showLog+0x178>)
 800f2e2:	f004 fea3 	bl	801402c <iprintf>
		for( x=0; x<MAP_X_SIZE; x++){
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	80fb      	strh	r3, [r7, #6]
 800f2ea:	e027      	b.n	800f33c <MAP_showLog+0xac>
			c_data = (uint8_t)g_sysMap[y][x];
 800f2ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f2f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2f4:	4945      	ldr	r1, [pc, #276]	; (800f40c <MAP_showLog+0x17c>)
 800f2f6:	0152      	lsls	r2, r2, #5
 800f2f8:	440a      	add	r2, r1
 800f2fa:	4413      	add	r3, r2
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	70fb      	strb	r3, [r7, #3]
			if ( ( c_data & 0x08 ) == 0 ){
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	f003 0308 	and.w	r3, r3, #8
 800f306:	2b00      	cmp	r3, #0
 800f308:	d103      	bne.n	800f312 <MAP_showLog+0x82>
				printf(".");
 800f30a:	202e      	movs	r0, #46	; 0x2e
 800f30c:	f004 fea6 	bl	801405c <putchar>
 800f310:	e002      	b.n	800f318 <MAP_showLog+0x88>
			}
			else{
				printf("|");
 800f312:	207c      	movs	r0, #124	; 0x7c
 800f314:	f004 fea2 	bl	801405c <putchar>
			}
			if ( ( c_data & 0x04 ) == 0 ){
 800f318:	78fb      	ldrb	r3, [r7, #3]
 800f31a:	f003 0304 	and.w	r3, r3, #4
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d103      	bne.n	800f32a <MAP_showLog+0x9a>
				printf(" ");
 800f322:	2020      	movs	r0, #32
 800f324:	f004 fe9a 	bl	801405c <putchar>
 800f328:	e002      	b.n	800f330 <MAP_showLog+0xa0>
			}
			else{
				printf("_");
 800f32a:	205f      	movs	r0, #95	; 0x5f
 800f32c:	f004 fe96 	bl	801405c <putchar>
		for( x=0; x<MAP_X_SIZE; x++){
 800f330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f334:	b29b      	uxth	r3, r3
 800f336:	3301      	adds	r3, #1
 800f338:	b29b      	uxth	r3, r3
 800f33a:	80fb      	strh	r3, [r7, #6]
 800f33c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f340:	2b1f      	cmp	r3, #31
 800f342:	ddd3      	ble.n	800f2ec <MAP_showLog+0x5c>
			}
		}
		printf("|   ");
 800f344:	4832      	ldr	r0, [pc, #200]	; (800f410 <MAP_showLog+0x180>)
 800f346:	f004 fe71 	bl	801402c <iprintf>
		
		for( x=0; x<MAP_X_SIZE; x++ ){
 800f34a:	2300      	movs	r3, #0
 800f34c:	80fb      	strh	r3, [r7, #6]
 800f34e:	e017      	b.n	800f380 <MAP_showLog+0xf0>
			c_data = g_sysMap[y][x];
 800f350:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f358:	492c      	ldr	r1, [pc, #176]	; (800f40c <MAP_showLog+0x17c>)
 800f35a:	0152      	lsls	r2, r2, #5
 800f35c:	440a      	add	r2, r1
 800f35e:	4413      	add	r3, r2
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	70fb      	strb	r3, [r7, #3]
			c_data = c_data >> 4;
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	091b      	lsrs	r3, r3, #4
 800f368:	70fb      	strb	r3, [r7, #3]
			printf("%x", c_data);
 800f36a:	78fb      	ldrb	r3, [r7, #3]
 800f36c:	4619      	mov	r1, r3
 800f36e:	4829      	ldr	r0, [pc, #164]	; (800f414 <MAP_showLog+0x184>)
 800f370:	f004 fe5c 	bl	801402c <iprintf>
		for( x=0; x<MAP_X_SIZE; x++ ){
 800f374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f378:	b29b      	uxth	r3, r3
 800f37a:	3301      	adds	r3, #1
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	80fb      	strh	r3, [r7, #6]
 800f380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f384:	2b1f      	cmp	r3, #31
 800f386:	dde3      	ble.n	800f350 <MAP_showLog+0xc0>
		}
		
		printf("\n\r");
 800f388:	4823      	ldr	r0, [pc, #140]	; (800f418 <MAP_showLog+0x188>)
 800f38a:	f004 fe4f 	bl	801402c <iprintf>
	for( y=MAP_Y_SIZE-1; y>-1; y-- ){
 800f38e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f392:	b29b      	uxth	r3, r3
 800f394:	3b01      	subs	r3, #1
 800f396:	b29b      	uxth	r3, r3
 800f398:	80bb      	strh	r3, [r7, #4]
 800f39a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	da9b      	bge.n	800f2da <MAP_showLog+0x4a>
	}
	
	printf("     ");
 800f3a2:	481e      	ldr	r0, [pc, #120]	; (800f41c <MAP_showLog+0x18c>)
 800f3a4:	f004 fe42 	bl	801402c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	80fb      	strh	r3, [r7, #6]
 800f3ac:	e017      	b.n	800f3de <MAP_showLog+0x14e>
		printf("%2d",x%10);
 800f3ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f3b2:	4b1b      	ldr	r3, [pc, #108]	; (800f420 <MAP_showLog+0x190>)
 800f3b4:	fb83 1302 	smull	r1, r3, r3, r2
 800f3b8:	1099      	asrs	r1, r3, #2
 800f3ba:	17d3      	asrs	r3, r2, #31
 800f3bc:	1ac9      	subs	r1, r1, r3
 800f3be:	460b      	mov	r3, r1
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	440b      	add	r3, r1
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	b21b      	sxth	r3, r3
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	4815      	ldr	r0, [pc, #84]	; (800f424 <MAP_showLog+0x194>)
 800f3ce:	f004 fe2d 	bl	801402c <iprintf>
	for( x=0; x<MAP_X_SIZE; x++){
 800f3d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	3301      	adds	r3, #1
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	80fb      	strh	r3, [r7, #6]
 800f3de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3e2:	2b1f      	cmp	r3, #31
 800f3e4:	dde3      	ble.n	800f3ae <MAP_showLog+0x11e>
	}
	printf("\n\r");
 800f3e6:	480c      	ldr	r0, [pc, #48]	; (800f418 <MAP_showLog+0x188>)
 800f3e8:	f004 fe20 	bl	801402c <iprintf>

}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	080195f4 	.word	0x080195f4
 800f3f8:	0801960c 	.word	0x0801960c
 800f3fc:	08019628 	.word	0x08019628
 800f400:	08019630 	.word	0x08019630
 800f404:	08019634 	.word	0x08019634
 800f408:	08019638 	.word	0x08019638
 800f40c:	200002f4 	.word	0x200002f4
 800f410:	08019640 	.word	0x08019640
 800f414:	08019648 	.word	0x08019648
 800f418:	0801964c 	.word	0x0801964c
 800f41c:	08019650 	.word	0x08019650
 800f420:	66666667 	.word	0x66666667
 800f424:	08019658 	.word	0x08019658

0800f428 <MAP_clearMap>:
		printf("\n\r");
	}
}

void MAP_clearMap( void )
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
	uint16_t	x, y;
	uint8_t	uc_data;

	/* すべてのマップデータを未探索状態にする */
	for ( y = 0; y < MAP_Y_SIZE; y++){
 800f42e:	2300      	movs	r3, #0
 800f430:	80bb      	strh	r3, [r7, #4]
 800f432:	e059      	b.n	800f4e8 <MAP_clearMap+0xc0>
		for( x = 0; x < MAP_X_SIZE; x++){
 800f434:	2300      	movs	r3, #0
 800f436:	80fb      	strh	r3, [r7, #6]
 800f438:	e050      	b.n	800f4dc <MAP_clearMap+0xb4>
			uc_data = 0x00;
 800f43a:	2300      	movs	r3, #0
 800f43c:	70fb      	strb	r3, [r7, #3]
			if ( ( x == 0) && ( y == 0 ) ) uc_data = 0xfe;
 800f43e:	88fb      	ldrh	r3, [r7, #6]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d105      	bne.n	800f450 <MAP_clearMap+0x28>
 800f444:	88bb      	ldrh	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d102      	bne.n	800f450 <MAP_clearMap+0x28>
 800f44a:	23fe      	movs	r3, #254	; 0xfe
 800f44c:	70fb      	strb	r3, [r7, #3]
 800f44e:	e03a      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( ( x == 1 ) && ( y == 0 ) ) uc_data = 0xcc;
 800f450:	88fb      	ldrh	r3, [r7, #6]
 800f452:	2b01      	cmp	r3, #1
 800f454:	d105      	bne.n	800f462 <MAP_clearMap+0x3a>
 800f456:	88bb      	ldrh	r3, [r7, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d102      	bne.n	800f462 <MAP_clearMap+0x3a>
 800f45c:	23cc      	movs	r3, #204	; 0xcc
 800f45e:	70fb      	strb	r3, [r7, #3]
 800f460:	e031      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == 0 ) ) uc_data = 0x66;
 800f462:	88fb      	ldrh	r3, [r7, #6]
 800f464:	2b1f      	cmp	r3, #31
 800f466:	d105      	bne.n	800f474 <MAP_clearMap+0x4c>
 800f468:	88bb      	ldrh	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <MAP_clearMap+0x4c>
 800f46e:	2366      	movs	r3, #102	; 0x66
 800f470:	70fb      	strb	r3, [r7, #3]
 800f472:	e028      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( ( x == 0 ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x99;
 800f474:	88fb      	ldrh	r3, [r7, #6]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d105      	bne.n	800f486 <MAP_clearMap+0x5e>
 800f47a:	88bb      	ldrh	r3, [r7, #4]
 800f47c:	2b1f      	cmp	r3, #31
 800f47e:	d102      	bne.n	800f486 <MAP_clearMap+0x5e>
 800f480:	2399      	movs	r3, #153	; 0x99
 800f482:	70fb      	strb	r3, [r7, #3]
 800f484:	e01f      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( ( x == (MAP_X_SIZE-1) ) && ( y == (MAP_Y_SIZE-1) ) ) uc_data = 0x33;
 800f486:	88fb      	ldrh	r3, [r7, #6]
 800f488:	2b1f      	cmp	r3, #31
 800f48a:	d105      	bne.n	800f498 <MAP_clearMap+0x70>
 800f48c:	88bb      	ldrh	r3, [r7, #4]
 800f48e:	2b1f      	cmp	r3, #31
 800f490:	d102      	bne.n	800f498 <MAP_clearMap+0x70>
 800f492:	2333      	movs	r3, #51	; 0x33
 800f494:	70fb      	strb	r3, [r7, #3]
 800f496:	e016      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( x == 0 ) uc_data = 0x88;
 800f498:	88fb      	ldrh	r3, [r7, #6]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <MAP_clearMap+0x7c>
 800f49e:	2388      	movs	r3, #136	; 0x88
 800f4a0:	70fb      	strb	r3, [r7, #3]
 800f4a2:	e010      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( x == (MAP_X_SIZE-1) ) uc_data = 0x22;
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	2b1f      	cmp	r3, #31
 800f4a8:	d102      	bne.n	800f4b0 <MAP_clearMap+0x88>
 800f4aa:	2322      	movs	r3, #34	; 0x22
 800f4ac:	70fb      	strb	r3, [r7, #3]
 800f4ae:	e00a      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( y == 0 ) uc_data = 0x44;
 800f4b0:	88bb      	ldrh	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d102      	bne.n	800f4bc <MAP_clearMap+0x94>
 800f4b6:	2344      	movs	r3, #68	; 0x44
 800f4b8:	70fb      	strb	r3, [r7, #3]
 800f4ba:	e004      	b.n	800f4c6 <MAP_clearMap+0x9e>
			else if ( y == (MAP_Y_SIZE-1) ) uc_data = 0x11;
 800f4bc:	88bb      	ldrh	r3, [r7, #4]
 800f4be:	2b1f      	cmp	r3, #31
 800f4c0:	d101      	bne.n	800f4c6 <MAP_clearMap+0x9e>
 800f4c2:	2311      	movs	r3, #17
 800f4c4:	70fb      	strb	r3, [r7, #3]
			g_sysMap[y][x] = uc_data;
 800f4c6:	88ba      	ldrh	r2, [r7, #4]
 800f4c8:	88fb      	ldrh	r3, [r7, #6]
 800f4ca:	490c      	ldr	r1, [pc, #48]	; (800f4fc <MAP_clearMap+0xd4>)
 800f4cc:	0152      	lsls	r2, r2, #5
 800f4ce:	440a      	add	r2, r1
 800f4d0:	4413      	add	r3, r2
 800f4d2:	78fa      	ldrb	r2, [r7, #3]
 800f4d4:	701a      	strb	r2, [r3, #0]
		for( x = 0; x < MAP_X_SIZE; x++){
 800f4d6:	88fb      	ldrh	r3, [r7, #6]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	80fb      	strh	r3, [r7, #6]
 800f4dc:	88fb      	ldrh	r3, [r7, #6]
 800f4de:	2b1f      	cmp	r3, #31
 800f4e0:	d9ab      	bls.n	800f43a <MAP_clearMap+0x12>
	for ( y = 0; y < MAP_Y_SIZE; y++){
 800f4e2:	88bb      	ldrh	r3, [r7, #4]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	80bb      	strh	r3, [r7, #4]
 800f4e8:	88bb      	ldrh	r3, [r7, #4]
 800f4ea:	2b1f      	cmp	r3, #31
 800f4ec:	d9a2      	bls.n	800f434 <MAP_clearMap+0xc>
		}
	}

}
 800f4ee:	bf00      	nop
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	200002f4 	.word	0x200002f4

0800f500 <MAP_getWallData>:

uint8_t MAP_getWallData( void )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
	uint8_t	 uc_wall;

//	LED_offAll();			// debug

	// センサ情報から壁情報作成
	uc_wall = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	71fb      	strb	r3, [r7, #7]
	if( TRUE == DIST_isWall_FRONT() ){
 800f50a:	f7fc fced 	bl	800bee8 <DIST_isWall_FRONT>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d003      	beq.n	800f51c <MAP_getWallData+0x1c>
		uc_wall = uc_wall | 0x11;
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	f043 0311 	orr.w	r3, r3, #17
 800f51a:	71fb      	strb	r3, [r7, #7]
//		LED_on(LED3);			// debug
//		LED_on(LED2);			// debug
	}
	if( TRUE == DIST_isWall_L_SIDE() ){
 800f51c:	f7fc fd16 	bl	800bf4c <DIST_isWall_L_SIDE>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d003      	beq.n	800f52e <MAP_getWallData+0x2e>
//		LED_on(LED0);			// debug
		uc_wall = uc_wall | 0x88;
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	f063 0377 	orn	r3, r3, #119	; 0x77
 800f52c:	71fb      	strb	r3, [r7, #7]
	}
	if( TRUE == DIST_isWall_R_SIDE() ){
 800f52e:	f7fc fcf7 	bl	800bf20 <DIST_isWall_R_SIDE>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <MAP_getWallData+0x40>
//		LED_on(LED1);			// debug
		uc_wall = uc_wall | 0x22;
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 800f53e:	71fb      	strb	r3, [r7, #7]
	}
	if(DIST_getNowVal(DIST_SEN_L_SIDE)>L_SIDE_REF){
 800f540:	2003      	movs	r0, #3
 800f542:	f7fc f9d9 	bl	800b8f8 <DIST_getNowVal>
 800f546:	4603      	mov	r3, r0
 800f548:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f54c:	dd02      	ble.n	800f554 <MAP_getWallData+0x54>
		near_wall = 1;
 800f54e:	4b16      	ldr	r3, [pc, #88]	; (800f5a8 <MAP_getWallData+0xa8>)
 800f550:	2201      	movs	r2, #1
 800f552:	701a      	strb	r2, [r3, #0]
	}
	if(DIST_getNowVal(DIST_SEN_R_SIDE)>R_SIDE_REF){
 800f554:	2002      	movs	r0, #2
 800f556:	f7fc f9cf 	bl	800b8f8 <DIST_getNowVal>
 800f55a:	4603      	mov	r3, r0
 800f55c:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800f560:	dd02      	ble.n	800f568 <MAP_getWallData+0x68>
		near_wall = 1;
 800f562:	4b11      	ldr	r3, [pc, #68]	; (800f5a8 <MAP_getWallData+0xa8>)
 800f564:	2201      	movs	r2, #1
 800f566:	701a      	strb	r2, [r3, #0]
	}

	// マウスの進行方向にあわせてセンサデータを移動し壁データとする
	if		( en_Head == EAST ){
 800f568:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <MAP_getWallData+0xac>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d103      	bne.n	800f578 <MAP_getWallData+0x78>
		uc_wall = uc_wall >> 3;
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	08db      	lsrs	r3, r3, #3
 800f574:	71fb      	strb	r3, [r7, #7]
 800f576:	e00e      	b.n	800f596 <MAP_getWallData+0x96>
	}
	else if ( en_Head == SOUTH ){
 800f578:	4b0c      	ldr	r3, [pc, #48]	; (800f5ac <MAP_getWallData+0xac>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d103      	bne.n	800f588 <MAP_getWallData+0x88>
		uc_wall = uc_wall >> 2;
 800f580:	79fb      	ldrb	r3, [r7, #7]
 800f582:	089b      	lsrs	r3, r3, #2
 800f584:	71fb      	strb	r3, [r7, #7]
 800f586:	e006      	b.n	800f596 <MAP_getWallData+0x96>
	}
	else if ( en_Head == WEST ){
 800f588:	4b08      	ldr	r3, [pc, #32]	; (800f5ac <MAP_getWallData+0xac>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d102      	bne.n	800f596 <MAP_getWallData+0x96>
		uc_wall = uc_wall >> 1;
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	085b      	lsrs	r3, r3, #1
 800f594:	71fb      	strb	r3, [r7, #7]
	}

	//	探索済みフラグを立てる
	return ( uc_wall | 0xf0 );
 800f596:	79fb      	ldrb	r3, [r7, #7]
 800f598:	f063 030f 	orn	r3, r3, #15
 800f59c:	b2db      	uxtb	r3, r3
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	200002ba 	.word	0x200002ba
 800f5ac:	200093d0 	.word	0x200093d0

0800f5b0 <MAP_makeMapData>:

void MAP_makeMapData( void )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
	uint8_t uc_wall;

	//	走行時の壁情報を迷路情報に書込
	if ( ( mx == 0 ) && ( my == 0 ) ){
 800f5b6:	4b66      	ldr	r3, [pc, #408]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <MAP_makeMapData+0x1c>
 800f5be:	4b65      	ldr	r3, [pc, #404]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d102      	bne.n	800f5cc <MAP_makeMapData+0x1c>
		uc_wall = 0xfe;
 800f5c6:	23fe      	movs	r3, #254	; 0xfe
 800f5c8:	71fb      	strb	r3, [r7, #7]
 800f5ca:	e003      	b.n	800f5d4 <MAP_makeMapData+0x24>
	}
	else{
		uc_wall = MAP_getWallData();
 800f5cc:	f7ff ff98 	bl	800f500 <MAP_getWallData>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	71fb      	strb	r3, [r7, #7]
	}
	g_sysMap[my][mx] = uc_wall;
 800f5d4:	4b5f      	ldr	r3, [pc, #380]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	4b5d      	ldr	r3, [pc, #372]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	4a5d      	ldr	r2, [pc, #372]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f5e2:	0143      	lsls	r3, r0, #5
 800f5e4:	4413      	add	r3, r2
 800f5e6:	440b      	add	r3, r1
 800f5e8:	79fa      	ldrb	r2, [r7, #7]
 800f5ea:	701a      	strb	r2, [r3, #0]

	//	隣の区間のＭＡＰデータも更新する
	if ( mx != (MAP_X_SIZE-1) ){
 800f5ec:	4b58      	ldr	r3, [pc, #352]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	2b1f      	cmp	r3, #31
 800f5f2:	d026      	beq.n	800f642 <MAP_makeMapData+0x92>
		g_sysMap[my][mx+1] = ( g_sysMap[my][mx+1] & 0x77 ) | 0x80 | ( ( uc_wall << 2 ) & 0x08 );
 800f5f4:	4b57      	ldr	r3, [pc, #348]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	4b55      	ldr	r3, [pc, #340]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	4955      	ldr	r1, [pc, #340]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f602:	0152      	lsls	r2, r2, #5
 800f604:	440a      	add	r2, r1
 800f606:	4413      	add	r3, r2
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	b25b      	sxtb	r3, r3
 800f60c:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f610:	b25b      	sxtb	r3, r3
 800f612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f616:	b25a      	sxtb	r2, r3
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	b25b      	sxtb	r3, r3
 800f61e:	f003 0308 	and.w	r3, r3, #8
 800f622:	b25b      	sxtb	r3, r3
 800f624:	4313      	orrs	r3, r2
 800f626:	b259      	sxtb	r1, r3
 800f628:	4b4a      	ldr	r3, [pc, #296]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	461a      	mov	r2, r3
 800f62e:	4b48      	ldr	r3, [pc, #288]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	b2c8      	uxtb	r0, r1
 800f636:	4948      	ldr	r1, [pc, #288]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f638:	0152      	lsls	r2, r2, #5
 800f63a:	440a      	add	r2, r1
 800f63c:	4413      	add	r3, r2
 800f63e:	4602      	mov	r2, r0
 800f640:	701a      	strb	r2, [r3, #0]
	}
	if ( mx !=  0 ){
 800f642:	4b43      	ldr	r3, [pc, #268]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d027      	beq.n	800f69a <MAP_makeMapData+0xea>
		g_sysMap[my][mx-1] = ( g_sysMap[my][mx-1] & 0xdd ) | 0x20 | ( ( uc_wall >> 2 ) & 0x02 );
 800f64a:	4b42      	ldr	r3, [pc, #264]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	461a      	mov	r2, r3
 800f650:	4b3f      	ldr	r3, [pc, #252]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	3b01      	subs	r3, #1
 800f656:	4940      	ldr	r1, [pc, #256]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f658:	0152      	lsls	r2, r2, #5
 800f65a:	440a      	add	r2, r1
 800f65c:	4413      	add	r3, r2
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	b25b      	sxtb	r3, r3
 800f662:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f666:	b25b      	sxtb	r3, r3
 800f668:	f043 0320 	orr.w	r3, r3, #32
 800f66c:	b25a      	sxtb	r2, r3
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	089b      	lsrs	r3, r3, #2
 800f672:	b2db      	uxtb	r3, r3
 800f674:	b25b      	sxtb	r3, r3
 800f676:	f003 0302 	and.w	r3, r3, #2
 800f67a:	b25b      	sxtb	r3, r3
 800f67c:	4313      	orrs	r3, r2
 800f67e:	b259      	sxtb	r1, r3
 800f680:	4b34      	ldr	r3, [pc, #208]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	461a      	mov	r2, r3
 800f686:	4b32      	ldr	r3, [pc, #200]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	3b01      	subs	r3, #1
 800f68c:	b2c8      	uxtb	r0, r1
 800f68e:	4932      	ldr	r1, [pc, #200]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f690:	0152      	lsls	r2, r2, #5
 800f692:	440a      	add	r2, r1
 800f694:	4413      	add	r3, r2
 800f696:	4602      	mov	r2, r0
 800f698:	701a      	strb	r2, [r3, #0]
	}
	if ( my != (MAP_Y_SIZE-1) ){
 800f69a:	4b2e      	ldr	r3, [pc, #184]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	2b1f      	cmp	r3, #31
 800f6a0:	d026      	beq.n	800f6f0 <MAP_makeMapData+0x140>
		g_sysMap[my+1][mx] = ( g_sysMap[my+1][mx] & 0xbb ) | 0x40 | ( ( uc_wall << 2 ) & 0x04 );
 800f6a2:	4b2c      	ldr	r3, [pc, #176]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	4a29      	ldr	r2, [pc, #164]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f6aa:	7812      	ldrb	r2, [r2, #0]
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4a2a      	ldr	r2, [pc, #168]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f6b0:	015b      	lsls	r3, r3, #5
 800f6b2:	4413      	add	r3, r2
 800f6b4:	440b      	add	r3, r1
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	b25b      	sxtb	r3, r3
 800f6ba:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800f6be:	b25b      	sxtb	r3, r3
 800f6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6c4:	b25a      	sxtb	r2, r3
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	b25b      	sxtb	r3, r3
 800f6cc:	f003 0304 	and.w	r3, r3, #4
 800f6d0:	b25b      	sxtb	r3, r3
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	b259      	sxtb	r1, r3
 800f6d6:	4b1f      	ldr	r3, [pc, #124]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	4a1c      	ldr	r2, [pc, #112]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f6de:	7812      	ldrb	r2, [r2, #0]
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	b2c9      	uxtb	r1, r1
 800f6e4:	4a1c      	ldr	r2, [pc, #112]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f6e6:	015b      	lsls	r3, r3, #5
 800f6e8:	4413      	add	r3, r2
 800f6ea:	4403      	add	r3, r0
 800f6ec:	460a      	mov	r2, r1
 800f6ee:	701a      	strb	r2, [r3, #0]
	}
	if ( my !=  0 ){
 800f6f0:	4b18      	ldr	r3, [pc, #96]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d027      	beq.n	800f748 <MAP_makeMapData+0x198>
		g_sysMap[my-1][mx] = ( g_sysMap[my-1][mx] & 0xee ) | 0x10 | ( ( uc_wall >> 2 ) & 0x01 );
 800f6f8:	4b16      	ldr	r3, [pc, #88]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	4a14      	ldr	r2, [pc, #80]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f700:	7812      	ldrb	r2, [r2, #0]
 800f702:	4611      	mov	r1, r2
 800f704:	4a14      	ldr	r2, [pc, #80]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f706:	015b      	lsls	r3, r3, #5
 800f708:	4413      	add	r3, r2
 800f70a:	440b      	add	r3, r1
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	b25b      	sxtb	r3, r3
 800f710:	f023 0311 	bic.w	r3, r3, #17
 800f714:	b25b      	sxtb	r3, r3
 800f716:	f043 0310 	orr.w	r3, r3, #16
 800f71a:	b25a      	sxtb	r2, r3
 800f71c:	79fb      	ldrb	r3, [r7, #7]
 800f71e:	089b      	lsrs	r3, r3, #2
 800f720:	b2db      	uxtb	r3, r3
 800f722:	b25b      	sxtb	r3, r3
 800f724:	f003 0301 	and.w	r3, r3, #1
 800f728:	b25b      	sxtb	r3, r3
 800f72a:	4313      	orrs	r3, r2
 800f72c:	b259      	sxtb	r1, r3
 800f72e:	4b09      	ldr	r3, [pc, #36]	; (800f754 <MAP_makeMapData+0x1a4>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	3b01      	subs	r3, #1
 800f734:	4a06      	ldr	r2, [pc, #24]	; (800f750 <MAP_makeMapData+0x1a0>)
 800f736:	7812      	ldrb	r2, [r2, #0]
 800f738:	4610      	mov	r0, r2
 800f73a:	b2c9      	uxtb	r1, r1
 800f73c:	4a06      	ldr	r2, [pc, #24]	; (800f758 <MAP_makeMapData+0x1a8>)
 800f73e:	015b      	lsls	r3, r3, #5
 800f740:	4413      	add	r3, r2
 800f742:	4403      	add	r3, r0
 800f744:	460a      	mov	r2, r1
 800f746:	701a      	strb	r2, [r3, #0]
	}

}
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	200093d3 	.word	0x200093d3
 800f754:	200093c9 	.word	0x200093c9
 800f758:	200002f4 	.word	0x200002f4

0800f75c <setStep>:
	}
	while( uc_level != 0 );
	
}

void setStep(const int8_t x, const int8_t y, const uint16_t step) {
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	71fb      	strb	r3, [r7, #7]
 800f766:	460b      	mov	r3, r1
 800f768:	71bb      	strb	r3, [r7, #6]
 800f76a:	4613      	mov	r3, r2
 800f76c:	80bb      	strh	r3, [r7, #4]
	/* (x, y) がフィールド内か確認 */
	if (x < 0 || y < 0 || x >= MAP_X_SIZE || y >= MAP_Y_SIZE) {
 800f76e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f772:	2b00      	cmp	r3, #0
 800f774:	db0b      	blt.n	800f78e <setStep+0x32>
 800f776:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	db07      	blt.n	800f78e <setStep+0x32>
 800f77e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f782:	2b1f      	cmp	r3, #31
 800f784:	dc03      	bgt.n	800f78e <setStep+0x32>
 800f786:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f78a:	2b1f      	cmp	r3, #31
 800f78c:	dd03      	ble.n	800f796 <setStep+0x3a>
		printf( "referred to out of field\r\n");
 800f78e:	4808      	ldr	r0, [pc, #32]	; (800f7b0 <setStep+0x54>)
 800f790:	f004 fce8 	bl	8014164 <puts>
		return;
 800f794:	e009      	b.n	800f7aa <setStep+0x4e>
	}
	us_cmap[y][x] = step;
 800f796:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800f79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f79e:	4905      	ldr	r1, [pc, #20]	; (800f7b4 <setStep+0x58>)
 800f7a0:	0152      	lsls	r2, r2, #5
 800f7a2:	4413      	add	r3, r2
 800f7a4:	88ba      	ldrh	r2, [r7, #4]
 800f7a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	080196a0 	.word	0x080196a0
 800f7b4:	20000718 	.word	0x20000718

0800f7b8 <MAP_makeContourMap_kai2>:

void  MAP_makeContourMap_kai2(
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 800f7b8:	b590      	push	{r4, r7, lr}
 800f7ba:	b0cd      	sub	sp, #308	; 0x134
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	4604      	mov	r4, r0
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	4611      	mov	r1, r2
 800f7c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f7cc:	4622      	mov	r2, r4
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7d4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f7d8:	4602      	mov	r2, r0
 800f7da:	701a      	strb	r2, [r3, #0]
 800f7dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7e0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f7e4:	460a      	mov	r2, r1
 800f7e6:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）
 800f7e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7ec:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f7f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f7f4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f7f8:	7812      	ldrb	r2, [r2, #0]
 800f7fa:	701a      	strb	r2, [r3, #0]

	queue_t queue;
	queue_t* pQueue = &queue;
 800f7fc:	f107 0310 	add.w	r3, r7, #16
 800f800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 800f804:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f808:	f7f3 fc10 	bl	800302c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 800f80c:	2300      	movs	r3, #0
 800f80e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 800f812:	e014      	b.n	800f83e <MAP_makeContourMap_kai2+0x86>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 800f814:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800f818:	095b      	lsrs	r3, r3, #5
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	461a      	mov	r2, r3
 800f81e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800f822:	f003 031f 	and.w	r3, r3, #31
 800f826:	49d7      	ldr	r1, [pc, #860]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800f828:	0152      	lsls	r2, r2, #5
 800f82a:	4413      	add	r3, r2
 800f82c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f830:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 800f834:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800f838:	3301      	adds	r3, #1
 800f83a:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 800f83e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800f842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f846:	d3e5      	bcc.n	800f814 <MAP_makeContourMap_kai2+0x5c>

//	std::queue<stPOSITION> q;
//	QueryPerformanceCounter(&start);

	/* 目標地点の等高線を0に設定 */
	setStep(uc_goalX, uc_goalY, 0);
 800f848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f84c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f850:	f993 0000 	ldrsb.w	r0, [r3]
 800f854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f858:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f85c:	f993 3000 	ldrsb.w	r3, [r3]
 800f860:	2200      	movs	r2, #0
 800f862:	4619      	mov	r1, r3
 800f864:	f7ff ff7a 	bl	800f75c <setStep>
	st_pos.x = uc_goalX;
 800f868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f86c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = uc_goalY;
 800f876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f87a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 800f88a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f88e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f892:	f7f3 fbfb 	bl	800308c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 800f896:	e167      	b.n	800fb68 <MAP_makeContourMap_kai2+0x3b0>
		const stPOSITION focus = dequeue(pQueue);
 800f898:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f89c:	f7f3 fc32 	bl	8003104 <dequeue>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8aa:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 800f8ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8b4:	885b      	ldrh	r3, [r3, #2]
 800f8b6:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 800f8ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 800f8c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800f8d0:	785b      	ldrb	r3, [r3, #1]
 800f8d2:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 800f8d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f8de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f8e2:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800f8e6:	6812      	ldr	r2, [r2, #0]
 800f8e8:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 800f8ea:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800f8ee:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f8f2:	49a5      	ldr	r1, [pc, #660]	; (800fb88 <MAP_makeContourMap_kai2+0x3d0>)
 800f8f4:	0152      	lsls	r2, r2, #5
 800f8f6:	440a      	add	r2, r1
 800f8f8:	4413      	add	r3, r2
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 800f900:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800f904:	f003 0301 	and.w	r3, r3, #1
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d146      	bne.n	800f99a <MAP_makeContourMap_kai2+0x1e2>
 800f90c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800f910:	2b1f      	cmp	r3, #31
 800f912:	d042      	beq.n	800f99a <MAP_makeContourMap_kai2+0x1e2>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 800f914:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f91e:	4999      	ldr	r1, [pc, #612]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800f920:	0152      	lsls	r2, r2, #5
 800f922:	4413      	add	r3, r2
 800f924:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f928:	461a      	mov	r2, r3
 800f92a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800f92e:	3301      	adds	r3, #1
 800f930:	429a      	cmp	r2, r3
 800f932:	dd32      	ble.n	800f99a <MAP_makeContourMap_kai2+0x1e2>
				next.step = focus_step + 1;
 800f934:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800f938:	3301      	adds	r3, #1
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f940:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f944:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 800f946:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800f94a:	1c5a      	adds	r2, r3, #1
 800f94c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f950:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 800f954:	3101      	adds	r1, #1
 800f956:	b288      	uxth	r0, r1
 800f958:	498a      	ldr	r1, [pc, #552]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800f95a:	0152      	lsls	r2, r2, #5
 800f95c:	4413      	add	r3, r2
 800f95e:	4602      	mov	r2, r0
 800f960:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 800f964:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f96e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f972:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 800f974:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	3301      	adds	r3, #1
 800f97c:	b2da      	uxtb	r2, r3
 800f97e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f982:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f986:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 800f988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f98c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f990:	6819      	ldr	r1, [r3, #0]
 800f992:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f996:	f7f3 fb79 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 800f99a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800f99e:	f003 0302 	and.w	r3, r3, #2
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d146      	bne.n	800fa34 <MAP_makeContourMap_kai2+0x27c>
 800f9a6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f9aa:	2b1f      	cmp	r3, #31
 800f9ac:	d042      	beq.n	800fa34 <MAP_makeContourMap_kai2+0x27c>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 800f9ae:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800f9b2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	4972      	ldr	r1, [pc, #456]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800f9ba:	0152      	lsls	r2, r2, #5
 800f9bc:	4413      	add	r3, r2
 800f9be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	dd32      	ble.n	800fa34 <MAP_makeContourMap_kai2+0x27c>
				next.step = focus_step + 1;
 800f9ce:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f9de:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 800f9e0:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800f9e4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 800f9ee:	3101      	adds	r1, #1
 800f9f0:	b288      	uxth	r0, r1
 800f9f2:	4964      	ldr	r1, [pc, #400]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800f9f4:	0152      	lsls	r2, r2, #5
 800f9f6:	4413      	add	r3, r2
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 800f9fe:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	3301      	adds	r3, #1
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fa10:	701a      	strb	r2, [r3, #0]
				next.y = y;
 800fa12:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800fa16:	b2da      	uxtb	r2, r3
 800fa18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fa20:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 800fa22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fa2a:	6819      	ldr	r1, [r3, #0]
 800fa2c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800fa30:	f7f3 fb2c 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 800fa34:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800fa38:	f003 0304 	and.w	r3, r3, #4
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d146      	bne.n	800face <MAP_makeContourMap_kai2+0x316>
 800fa40:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d042      	beq.n	800face <MAP_makeContourMap_kai2+0x316>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 800fa48:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800fa4c:	1e5a      	subs	r2, r3, #1
 800fa4e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fa52:	494c      	ldr	r1, [pc, #304]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800fa54:	0152      	lsls	r2, r2, #5
 800fa56:	4413      	add	r3, r2
 800fa58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800fa62:	3301      	adds	r3, #1
 800fa64:	429a      	cmp	r2, r3
 800fa66:	dd32      	ble.n	800face <MAP_makeContourMap_kai2+0x316>
				next.step = focus_step + 1;
 800fa68:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fa78:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 800fa7a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800fa7e:	1e5a      	subs	r2, r3, #1
 800fa80:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fa84:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 800fa88:	3101      	adds	r1, #1
 800fa8a:	b288      	uxth	r0, r1
 800fa8c:	493d      	ldr	r1, [pc, #244]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800fa8e:	0152      	lsls	r2, r2, #5
 800fa90:	4413      	add	r3, r2
 800fa92:	4602      	mov	r2, r0
 800fa94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 800fa98:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800faa2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800faa6:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 800faa8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800faac:	b2db      	uxtb	r3, r3
 800faae:	3b01      	subs	r3, #1
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fab6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800faba:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 800fabc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fac0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fac4:	6819      	ldr	r1, [r3, #0]
 800fac6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800faca:	f7f3 fadf 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 800face:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800fad2:	f003 0308 	and.w	r3, r3, #8
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d146      	bne.n	800fb68 <MAP_makeContourMap_kai2+0x3b0>
 800fada:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d042      	beq.n	800fb68 <MAP_makeContourMap_kai2+0x3b0>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 800fae2:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800fae6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800faea:	3b01      	subs	r3, #1
 800faec:	4925      	ldr	r1, [pc, #148]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800faee:	0152      	lsls	r2, r2, #5
 800faf0:	4413      	add	r3, r2
 800faf2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800fafc:	3301      	adds	r3, #1
 800fafe:	429a      	cmp	r2, r3
 800fb00:	dd32      	ble.n	800fb68 <MAP_makeContourMap_kai2+0x3b0>
				next.step = focus_step + 1;
 800fb02:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 800fb06:	3301      	adds	r3, #1
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fb12:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 800fb14:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 800fb18:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 800fb22:	3101      	adds	r1, #1
 800fb24:	b288      	uxth	r0, r1
 800fb26:	4917      	ldr	r1, [pc, #92]	; (800fb84 <MAP_makeContourMap_kai2+0x3cc>)
 800fb28:	0152      	lsls	r2, r2, #5
 800fb2a:	4413      	add	r3, r2
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 800fb32:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fb44:	701a      	strb	r2, [r3, #0]
				next.y = y;
 800fb46:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fb54:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 800fb56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800fb5e:	6819      	ldr	r1, [r3, #0]
 800fb60:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800fb64:	f7f3 fa92 	bl	800308c <enqueue>
	while (pQueue->flag != EMPTY) {
 800fb68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f47f ae91 	bne.w	800f898 <MAP_makeContourMap_kai2+0xe0>
			}
		}

	}

}
 800fb76:	bf00      	nop
 800fb78:	bf00      	nop
 800fb7a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd90      	pop	{r4, r7, pc}
 800fb82:	bf00      	nop
 800fb84:	20000718 	.word	0x20000718
 800fb88:	200002f4 	.word	0x200002f4

0800fb8c <MAP_makeContourMap_run>:

void  MAP_makeContourMap_run( 
	uint8_t uc_goalX, 			///< [in] ゴールX座標
	uint8_t uc_goalY, 			///< [in] ゴールY座標
	enMAP_ACT_MODE	en_type		///< [in] 計算方法（まだ未使用）
) {
 800fb8c:	b480      	push	{r7}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	71fb      	strb	r3, [r7, #7]
 800fb96:	460b      	mov	r3, r1
 800fb98:	71bb      	strb	r3, [r7, #6]
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	717b      	strb	r3, [r7, #5]
	uint8_t		uc_wallData;	// 壁情報

	en_type = en_type;		// コンパイルワーニング回避（いずれ削除）

	/* 等高線マップを初期化する */
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 800fb9e:	2300      	movs	r3, #0
 800fba0:	827b      	strh	r3, [r7, #18]
 800fba2:	e010      	b.n	800fbc6 <MAP_makeContourMap_run+0x3a>
		us_cmap[ i / MAP_Y_SIZE][ i & (MAP_X_SIZE-1) ] = MAP_SMAP_MAX_VAL - 1;
 800fba4:	8a7b      	ldrh	r3, [r7, #18]
 800fba6:	095b      	lsrs	r3, r3, #5
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	461a      	mov	r2, r3
 800fbac:	8a7b      	ldrh	r3, [r7, #18]
 800fbae:	f003 031f 	and.w	r3, r3, #31
 800fbb2:	4997      	ldr	r1, [pc, #604]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fbb4:	0152      	lsls	r2, r2, #5
 800fbb6:	4413      	add	r3, r2
 800fbb8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fbbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for ( i = 0; i < MAP_SMAP_MAX_VAL; i++ ){
 800fbc0:	8a7b      	ldrh	r3, [r7, #18]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	827b      	strh	r3, [r7, #18]
 800fbc6:	8a7b      	ldrh	r3, [r7, #18]
 800fbc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbcc:	d3ea      	bcc.n	800fba4 <MAP_makeContourMap_run+0x18>
	}
	/* 目標地点の等高線を0に設定 */
	us_cmap[uc_goalY][uc_goalX] = 0;
 800fbce:	79ba      	ldrb	r2, [r7, #6]
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	498f      	ldr	r1, [pc, #572]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fbd4:	0152      	lsls	r2, r2, #5
 800fbd6:	4413      	add	r3, r2
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if (GOAL_SIZE == 4) {
 800fbde:	4b8d      	ldr	r3, [pc, #564]	; (800fe14 <MAP_makeContourMap_run+0x288>)
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b04      	cmp	r3, #4
 800fbe4:	d11c      	bne.n	800fc20 <MAP_makeContourMap_run+0x94>
		us_cmap[uc_goalY + 1][uc_goalX] = 0;
 800fbe6:	79bb      	ldrb	r3, [r7, #6]
 800fbe8:	1c5a      	adds	r2, r3, #1
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	4988      	ldr	r1, [pc, #544]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fbee:	0152      	lsls	r2, r2, #5
 800fbf0:	4413      	add	r3, r2
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX + 1] = 0;
 800fbf8:	79ba      	ldrb	r2, [r7, #6]
 800fbfa:	79fb      	ldrb	r3, [r7, #7]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	4984      	ldr	r1, [pc, #528]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc00:	0152      	lsls	r2, r2, #5
 800fc02:	4413      	add	r3, r2
 800fc04:	2200      	movs	r2, #0
 800fc06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY + 1][uc_goalX + 1] = 0;
 800fc0a:	79bb      	ldrb	r3, [r7, #6]
 800fc0c:	1c5a      	adds	r2, r3, #1
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	3301      	adds	r3, #1
 800fc12:	497f      	ldr	r1, [pc, #508]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc14:	0152      	lsls	r2, r2, #5
 800fc16:	4413      	add	r3, r2
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800fc1e:	e04f      	b.n	800fcc0 <MAP_makeContourMap_run+0x134>
	}
	else if (GOAL_SIZE == 9){
 800fc20:	4b7c      	ldr	r3, [pc, #496]	; (800fe14 <MAP_makeContourMap_run+0x288>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b09      	cmp	r3, #9
 800fc26:	d14b      	bne.n	800fcc0 <MAP_makeContourMap_run+0x134>
		us_cmap[uc_goalY+1][uc_goalX] = 0;
 800fc28:	79bb      	ldrb	r3, [r7, #6]
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	4978      	ldr	r1, [pc, #480]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc30:	0152      	lsls	r2, r2, #5
 800fc32:	4413      	add	r3, r2
 800fc34:	2200      	movs	r2, #0
 800fc36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+1] = 0;
 800fc3a:	79ba      	ldrb	r2, [r7, #6]
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	4973      	ldr	r1, [pc, #460]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc42:	0152      	lsls	r2, r2, #5
 800fc44:	4413      	add	r3, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+1] = 0;
 800fc4c:	79bb      	ldrb	r3, [r7, #6]
 800fc4e:	1c5a      	adds	r2, r3, #1
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	3301      	adds	r3, #1
 800fc54:	496e      	ldr	r1, [pc, #440]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc56:	0152      	lsls	r2, r2, #5
 800fc58:	4413      	add	r3, r2
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX] = 0;
 800fc60:	79bb      	ldrb	r3, [r7, #6]
 800fc62:	1c9a      	adds	r2, r3, #2
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	496a      	ldr	r1, [pc, #424]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc68:	0152      	lsls	r2, r2, #5
 800fc6a:	4413      	add	r3, r2
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+1] = 0;
 800fc72:	79bb      	ldrb	r3, [r7, #6]
 800fc74:	1c9a      	adds	r2, r3, #2
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	4965      	ldr	r1, [pc, #404]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc7c:	0152      	lsls	r2, r2, #5
 800fc7e:	4413      	add	r3, r2
 800fc80:	2200      	movs	r2, #0
 800fc82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY][uc_goalX+2] = 0;
 800fc86:	79ba      	ldrb	r2, [r7, #6]
 800fc88:	79fb      	ldrb	r3, [r7, #7]
 800fc8a:	3302      	adds	r3, #2
 800fc8c:	4960      	ldr	r1, [pc, #384]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fc8e:	0152      	lsls	r2, r2, #5
 800fc90:	4413      	add	r3, r2
 800fc92:	2200      	movs	r2, #0
 800fc94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+1][uc_goalX+2] = 0;
 800fc98:	79bb      	ldrb	r3, [r7, #6]
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	3302      	adds	r3, #2
 800fca0:	495b      	ldr	r1, [pc, #364]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fca2:	0152      	lsls	r2, r2, #5
 800fca4:	4413      	add	r3, r2
 800fca6:	2200      	movs	r2, #0
 800fca8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		us_cmap[uc_goalY+2][uc_goalX+2] = 0;
 800fcac:	79bb      	ldrb	r3, [r7, #6]
 800fcae:	1c9a      	adds	r2, r3, #2
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	3302      	adds	r3, #2
 800fcb4:	4956      	ldr	r1, [pc, #344]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fcb6:	0152      	lsls	r2, r2, #5
 800fcb8:	4413      	add	r3, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//	if (mx > uc_max_x)uc_max_x = mx;
//	if (my > uc_max_y)uc_max_y = my;

	/* 等高線マップを作成 */
	uc_dase = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	823b      	strh	r3, [r7, #16]
	do{
		uc_level = 0;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	81fb      	strh	r3, [r7, #14]
		uc_new = uc_dase + 1;
 800fcc8:	8a3b      	ldrh	r3, [r7, #16]
 800fcca:	3301      	adds	r3, #1
 800fccc:	81bb      	strh	r3, [r7, #12]
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 800fcce:	2300      	movs	r3, #0
 800fcd0:	82bb      	strh	r3, [r7, #20]
 800fcd2:	e12d      	b.n	800ff30 <MAP_makeContourMap_run+0x3a4>
//			if (uc_max_y+1 < y) break;
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	82fb      	strh	r3, [r7, #22]
 800fcd8:	e123      	b.n	800ff22 <MAP_makeContourMap_run+0x396>
//				if (uc_max_x+1 < x) break;
				if ( us_cmap[y][x] == uc_dase ){
 800fcda:	8aba      	ldrh	r2, [r7, #20]
 800fcdc:	8afb      	ldrh	r3, [r7, #22]
 800fcde:	494c      	ldr	r1, [pc, #304]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fce0:	0152      	lsls	r2, r2, #5
 800fce2:	4413      	add	r3, r2
 800fce4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fce8:	8a3a      	ldrh	r2, [r7, #16]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	f040 8116 	bne.w	800ff1c <MAP_makeContourMap_run+0x390>
					uc_wallData = g_sysMap[y][x];
 800fcf0:	8aba      	ldrh	r2, [r7, #20]
 800fcf2:	8afb      	ldrh	r3, [r7, #22]
 800fcf4:	4948      	ldr	r1, [pc, #288]	; (800fe18 <MAP_makeContourMap_run+0x28c>)
 800fcf6:	0152      	lsls	r2, r2, #5
 800fcf8:	440a      	add	r2, r1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	72fb      	strb	r3, [r7, #11]
					/* 探索走行 */
					if( SEARCH == en_type ){
 800fd00:	797b      	ldrb	r3, [r7, #5]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 808a 	bne.w	800fe1c <MAP_makeContourMap_run+0x290>
						if ( ( ( uc_wallData & 0x01 ) == 0x00 ) && ( y != (MAP_Y_SIZE-1) ) ){
 800fd08:	7afb      	ldrb	r3, [r7, #11]
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d11a      	bne.n	800fd48 <MAP_makeContourMap_run+0x1bc>
 800fd12:	8abb      	ldrh	r3, [r7, #20]
 800fd14:	2b1f      	cmp	r3, #31
 800fd16:	d017      	beq.n	800fd48 <MAP_makeContourMap_run+0x1bc>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 800fd18:	8abb      	ldrh	r3, [r7, #20]
 800fd1a:	1c5a      	adds	r2, r3, #1
 800fd1c:	8afb      	ldrh	r3, [r7, #22]
 800fd1e:	493c      	ldr	r1, [pc, #240]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fd20:	0152      	lsls	r2, r2, #5
 800fd22:	4413      	add	r3, r2
 800fd24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d10b      	bne.n	800fd48 <MAP_makeContourMap_run+0x1bc>
								us_cmap[y+1][x] = uc_new;
 800fd30:	8abb      	ldrh	r3, [r7, #20]
 800fd32:	1c5a      	adds	r2, r3, #1
 800fd34:	8afb      	ldrh	r3, [r7, #22]
 800fd36:	4936      	ldr	r1, [pc, #216]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fd38:	0152      	lsls	r2, r2, #5
 800fd3a:	4413      	add	r3, r2
 800fd3c:	89ba      	ldrh	r2, [r7, #12]
 800fd3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fd42:	89fb      	ldrh	r3, [r7, #14]
 800fd44:	3301      	adds	r3, #1
 800fd46:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x02 ) == 0x00 ) && ( x != (MAP_X_SIZE-1) ) ){
 800fd48:	7afb      	ldrb	r3, [r7, #11]
 800fd4a:	f003 0302 	and.w	r3, r3, #2
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d11a      	bne.n	800fd88 <MAP_makeContourMap_run+0x1fc>
 800fd52:	8afb      	ldrh	r3, [r7, #22]
 800fd54:	2b1f      	cmp	r3, #31
 800fd56:	d017      	beq.n	800fd88 <MAP_makeContourMap_run+0x1fc>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 800fd58:	8aba      	ldrh	r2, [r7, #20]
 800fd5a:	8afb      	ldrh	r3, [r7, #22]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	492c      	ldr	r1, [pc, #176]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fd60:	0152      	lsls	r2, r2, #5
 800fd62:	4413      	add	r3, r2
 800fd64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd68:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d10b      	bne.n	800fd88 <MAP_makeContourMap_run+0x1fc>
								us_cmap[y][x+1] = uc_new;
 800fd70:	8aba      	ldrh	r2, [r7, #20]
 800fd72:	8afb      	ldrh	r3, [r7, #22]
 800fd74:	3301      	adds	r3, #1
 800fd76:	4926      	ldr	r1, [pc, #152]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fd78:	0152      	lsls	r2, r2, #5
 800fd7a:	4413      	add	r3, r2
 800fd7c:	89ba      	ldrh	r2, [r7, #12]
 800fd7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fd82:	89fb      	ldrh	r3, [r7, #14]
 800fd84:	3301      	adds	r3, #1
 800fd86:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x04 ) == 0x00 ) && ( y != 0 ) ){
 800fd88:	7afb      	ldrb	r3, [r7, #11]
 800fd8a:	f003 0304 	and.w	r3, r3, #4
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d11a      	bne.n	800fdc8 <MAP_makeContourMap_run+0x23c>
 800fd92:	8abb      	ldrh	r3, [r7, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d017      	beq.n	800fdc8 <MAP_makeContourMap_run+0x23c>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 800fd98:	8abb      	ldrh	r3, [r7, #20]
 800fd9a:	1e5a      	subs	r2, r3, #1
 800fd9c:	8afb      	ldrh	r3, [r7, #22]
 800fd9e:	491c      	ldr	r1, [pc, #112]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fda0:	0152      	lsls	r2, r2, #5
 800fda2:	4413      	add	r3, r2
 800fda4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fda8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d10b      	bne.n	800fdc8 <MAP_makeContourMap_run+0x23c>
								us_cmap[y-1][x] = uc_new;
 800fdb0:	8abb      	ldrh	r3, [r7, #20]
 800fdb2:	1e5a      	subs	r2, r3, #1
 800fdb4:	8afb      	ldrh	r3, [r7, #22]
 800fdb6:	4916      	ldr	r1, [pc, #88]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fdb8:	0152      	lsls	r2, r2, #5
 800fdba:	4413      	add	r3, r2
 800fdbc:	89ba      	ldrh	r2, [r7, #12]
 800fdbe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fdc2:	89fb      	ldrh	r3, [r7, #14]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x08 ) == 0x00 ) && ( x != 0 ) ){
 800fdc8:	7afb      	ldrb	r3, [r7, #11]
 800fdca:	f003 0308 	and.w	r3, r3, #8
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	f040 80a4 	bne.w	800ff1c <MAP_makeContourMap_run+0x390>
 800fdd4:	8afb      	ldrh	r3, [r7, #22]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f000 80a0 	beq.w	800ff1c <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 800fddc:	8aba      	ldrh	r2, [r7, #20]
 800fdde:	8afb      	ldrh	r3, [r7, #22]
 800fde0:	3b01      	subs	r3, #1
 800fde2:	490b      	ldr	r1, [pc, #44]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fde4:	0152      	lsls	r2, r2, #5
 800fde6:	4413      	add	r3, r2
 800fde8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fdec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	f040 8093 	bne.w	800ff1c <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 800fdf6:	8aba      	ldrh	r2, [r7, #20]
 800fdf8:	8afb      	ldrh	r3, [r7, #22]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	4904      	ldr	r1, [pc, #16]	; (800fe10 <MAP_makeContourMap_run+0x284>)
 800fdfe:	0152      	lsls	r2, r2, #5
 800fe00:	4413      	add	r3, r2
 800fe02:	89ba      	ldrh	r2, [r7, #12]
 800fe04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fe08:	89fb      	ldrh	r3, [r7, #14]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	81fb      	strh	r3, [r7, #14]
 800fe0e:	e085      	b.n	800ff1c <MAP_makeContourMap_run+0x390>
 800fe10:	20000718 	.word	0x20000718
 800fe14:	200093d2 	.word	0x200093d2
 800fe18:	200002f4 	.word	0x200002f4
							}
						}
					}
					/* 最短走行 */
					else{
						if ( ( ( uc_wallData & 0x11 ) == 0x10 ) && ( y != (MAP_Y_SIZE-1) ) ){
 800fe1c:	7afb      	ldrb	r3, [r7, #11]
 800fe1e:	f003 0311 	and.w	r3, r3, #17
 800fe22:	2b10      	cmp	r3, #16
 800fe24:	d11a      	bne.n	800fe5c <MAP_makeContourMap_run+0x2d0>
 800fe26:	8abb      	ldrh	r3, [r7, #20]
 800fe28:	2b1f      	cmp	r3, #31
 800fe2a:	d017      	beq.n	800fe5c <MAP_makeContourMap_run+0x2d0>
							if ( us_cmap[y+1][x] == MAP_SMAP_MAX_VAL - 1 ){
 800fe2c:	8abb      	ldrh	r3, [r7, #20]
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	8afb      	ldrh	r3, [r7, #22]
 800fe32:	4948      	ldr	r1, [pc, #288]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fe34:	0152      	lsls	r2, r2, #5
 800fe36:	4413      	add	r3, r2
 800fe38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe3c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d10b      	bne.n	800fe5c <MAP_makeContourMap_run+0x2d0>
								us_cmap[y+1][x] = uc_new;
 800fe44:	8abb      	ldrh	r3, [r7, #20]
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	8afb      	ldrh	r3, [r7, #22]
 800fe4a:	4942      	ldr	r1, [pc, #264]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fe4c:	0152      	lsls	r2, r2, #5
 800fe4e:	4413      	add	r3, r2
 800fe50:	89ba      	ldrh	r2, [r7, #12]
 800fe52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fe56:	89fb      	ldrh	r3, [r7, #14]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x22 ) == 0x20 ) && ( x != (MAP_X_SIZE-1) ) ){
 800fe5c:	7afb      	ldrb	r3, [r7, #11]
 800fe5e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800fe62:	2b20      	cmp	r3, #32
 800fe64:	d11a      	bne.n	800fe9c <MAP_makeContourMap_run+0x310>
 800fe66:	8afb      	ldrh	r3, [r7, #22]
 800fe68:	2b1f      	cmp	r3, #31
 800fe6a:	d017      	beq.n	800fe9c <MAP_makeContourMap_run+0x310>
							if ( us_cmap[y][x+1] == MAP_SMAP_MAX_VAL - 1 ){
 800fe6c:	8aba      	ldrh	r2, [r7, #20]
 800fe6e:	8afb      	ldrh	r3, [r7, #22]
 800fe70:	3301      	adds	r3, #1
 800fe72:	4938      	ldr	r1, [pc, #224]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fe74:	0152      	lsls	r2, r2, #5
 800fe76:	4413      	add	r3, r2
 800fe78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe7c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d10b      	bne.n	800fe9c <MAP_makeContourMap_run+0x310>
								us_cmap[y][x+1] = uc_new;
 800fe84:	8aba      	ldrh	r2, [r7, #20]
 800fe86:	8afb      	ldrh	r3, [r7, #22]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	4932      	ldr	r1, [pc, #200]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fe8c:	0152      	lsls	r2, r2, #5
 800fe8e:	4413      	add	r3, r2
 800fe90:	89ba      	ldrh	r2, [r7, #12]
 800fe92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fe96:	89fb      	ldrh	r3, [r7, #14]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x44 ) == 0x40 ) && ( y != 0 ) ){
 800fe9c:	7afb      	ldrb	r3, [r7, #11]
 800fe9e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fea2:	2b40      	cmp	r3, #64	; 0x40
 800fea4:	d11a      	bne.n	800fedc <MAP_makeContourMap_run+0x350>
 800fea6:	8abb      	ldrh	r3, [r7, #20]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d017      	beq.n	800fedc <MAP_makeContourMap_run+0x350>
							if ( us_cmap[y-1][x] == MAP_SMAP_MAX_VAL - 1 ){
 800feac:	8abb      	ldrh	r3, [r7, #20]
 800feae:	1e5a      	subs	r2, r3, #1
 800feb0:	8afb      	ldrh	r3, [r7, #22]
 800feb2:	4928      	ldr	r1, [pc, #160]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800feb4:	0152      	lsls	r2, r2, #5
 800feb6:	4413      	add	r3, r2
 800feb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800febc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d10b      	bne.n	800fedc <MAP_makeContourMap_run+0x350>
								us_cmap[y-1][x] = uc_new;
 800fec4:	8abb      	ldrh	r3, [r7, #20]
 800fec6:	1e5a      	subs	r2, r3, #1
 800fec8:	8afb      	ldrh	r3, [r7, #22]
 800feca:	4922      	ldr	r1, [pc, #136]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fecc:	0152      	lsls	r2, r2, #5
 800fece:	4413      	add	r3, r2
 800fed0:	89ba      	ldrh	r2, [r7, #12]
 800fed2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800fed6:	89fb      	ldrh	r3, [r7, #14]
 800fed8:	3301      	adds	r3, #1
 800feda:	81fb      	strh	r3, [r7, #14]
							}
						}
						if ( ( ( uc_wallData & 0x88 ) == 0x80 ) && ( x != 0 ) ){
 800fedc:	7afb      	ldrb	r3, [r7, #11]
 800fede:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fee2:	2b80      	cmp	r3, #128	; 0x80
 800fee4:	d11a      	bne.n	800ff1c <MAP_makeContourMap_run+0x390>
 800fee6:	8afb      	ldrh	r3, [r7, #22]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d017      	beq.n	800ff1c <MAP_makeContourMap_run+0x390>
							if ( us_cmap[y][x-1] == MAP_SMAP_MAX_VAL - 1 ){
 800feec:	8aba      	ldrh	r2, [r7, #20]
 800feee:	8afb      	ldrh	r3, [r7, #22]
 800fef0:	3b01      	subs	r3, #1
 800fef2:	4918      	ldr	r1, [pc, #96]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800fef4:	0152      	lsls	r2, r2, #5
 800fef6:	4413      	add	r3, r2
 800fef8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fefc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d10b      	bne.n	800ff1c <MAP_makeContourMap_run+0x390>
								us_cmap[y][x-1] = uc_new;
 800ff04:	8aba      	ldrh	r2, [r7, #20]
 800ff06:	8afb      	ldrh	r3, [r7, #22]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	4912      	ldr	r1, [pc, #72]	; (800ff54 <MAP_makeContourMap_run+0x3c8>)
 800ff0c:	0152      	lsls	r2, r2, #5
 800ff0e:	4413      	add	r3, r2
 800ff10:	89ba      	ldrh	r2, [r7, #12]
 800ff12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								uc_level++;
 800ff16:	89fb      	ldrh	r3, [r7, #14]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	81fb      	strh	r3, [r7, #14]
			for ( x = 0; x < MAP_X_SIZE; x++ ){
 800ff1c:	8afb      	ldrh	r3, [r7, #22]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	82fb      	strh	r3, [r7, #22]
 800ff22:	8afb      	ldrh	r3, [r7, #22]
 800ff24:	2b1f      	cmp	r3, #31
 800ff26:	f67f aed8 	bls.w	800fcda <MAP_makeContourMap_run+0x14e>
		for ( y = 0; y < MAP_Y_SIZE; y++ ){
 800ff2a:	8abb      	ldrh	r3, [r7, #20]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	82bb      	strh	r3, [r7, #20]
 800ff30:	8abb      	ldrh	r3, [r7, #20]
 800ff32:	2b1f      	cmp	r3, #31
 800ff34:	f67f aece 	bls.w	800fcd4 <MAP_makeContourMap_run+0x148>
				}
			}
//			if ((x == mx)&&(y == my))break;
		}
//		if ((x == mx)&&(y == my))break;
		uc_dase = uc_dase + 1;
 800ff38:	8a3b      	ldrh	r3, [r7, #16]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	823b      	strh	r3, [r7, #16]
	}
	while( uc_level != 0 );
 800ff3e:	89fb      	ldrh	r3, [r7, #14]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f47f aebf 	bne.w	800fcc4 <MAP_makeContourMap_run+0x138>
	
}
 800ff46:	bf00      	nop
 800ff48:	bf00      	nop
 800ff4a:	371c      	adds	r7, #28
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr
 800ff54:	20000718 	.word	0x20000718

0800ff58 <MAP_calcMouseDir>:

void MAP_calcMouseDir( 
	enMAP_SEARCH_TYPE	en_calcType,	///< [in] 計算方法
	enMAP_HEAD_DIR* 	p_head			///< [out] 進行方向（戻り値）
){
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	6039      	str	r1, [r7, #0]
 800ff62:	71fb      	strb	r3, [r7, #7]
	uint16_t		us_new;
	enMAP_HEAD_DIR	en_tmpHead;

	/* 方向計算 */
	// 等高線MAP法
	if( CONTOUR_SYSTEM == en_calcType ){
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f040 80ee 	bne.w	8010148 <MAP_calcMouseDir+0x1f0>
		// 周辺の4区画で一番目的地に近い移動方向を算出する。
		// ただし、移動できる一番近い区間が複数ある場合には、次の順で選択する。
		// ①未探索区間,直進 ②未探索区間,旋回 ③既探索区間,直進 ④既探索区間,旋回
		uc_wall = g_sysMap[my][mx];
 800ff6c:	4b7b      	ldr	r3, [pc, #492]	; (801015c <MAP_calcMouseDir+0x204>)
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	4618      	mov	r0, r3
 800ff72:	4b7b      	ldr	r3, [pc, #492]	; (8010160 <MAP_calcMouseDir+0x208>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	4619      	mov	r1, r3
 800ff78:	4a7a      	ldr	r2, [pc, #488]	; (8010164 <MAP_calcMouseDir+0x20c>)
 800ff7a:	0143      	lsls	r3, r0, #5
 800ff7c:	4413      	add	r3, r2
 800ff7e:	440b      	add	r3, r1
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	72bb      	strb	r3, [r7, #10]
		us_base = MAP_SMAP_MAX_PRI_VAL;					// 16[区画]×16[区画]×4[方向]
 800ff84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff88:	81fb      	strh	r3, [r7, #14]

		/* 4方向を比較 */
		//	北方向の区画の確認
		if ( ( uc_wall & 1 ) == 0 ){
 800ff8a:	7abb      	ldrb	r3, [r7, #10]
 800ff8c:	f003 0301 	and.w	r3, r3, #1
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d12f      	bne.n	800fff4 <MAP_calcMouseDir+0x9c>
			us_new = us_cmap[my+1][mx] * 4 + 4;
 800ff94:	4b71      	ldr	r3, [pc, #452]	; (801015c <MAP_calcMouseDir+0x204>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	4a71      	ldr	r2, [pc, #452]	; (8010160 <MAP_calcMouseDir+0x208>)
 800ff9c:	7812      	ldrb	r2, [r2, #0]
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	4a71      	ldr	r2, [pc, #452]	; (8010168 <MAP_calcMouseDir+0x210>)
 800ffa2:	015b      	lsls	r3, r3, #5
 800ffa4:	440b      	add	r3, r1
 800ffa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my+1][mx] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 800ffb2:	4b6a      	ldr	r3, [pc, #424]	; (801015c <MAP_calcMouseDir+0x204>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	4a69      	ldr	r2, [pc, #420]	; (8010160 <MAP_calcMouseDir+0x208>)
 800ffba:	7812      	ldrb	r2, [r2, #0]
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4a69      	ldr	r2, [pc, #420]	; (8010164 <MAP_calcMouseDir+0x20c>)
 800ffc0:	015b      	lsls	r3, r3, #5
 800ffc2:	4413      	add	r3, r2
 800ffc4:	440b      	add	r3, r1
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffcc:	2bf0      	cmp	r3, #240	; 0xf0
 800ffce:	d002      	beq.n	800ffd6 <MAP_calcMouseDir+0x7e>
 800ffd0:	89bb      	ldrh	r3, [r7, #12]
 800ffd2:	3b02      	subs	r3, #2
 800ffd4:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == NORTH ) us_new = us_new - 1;
 800ffd6:	4b65      	ldr	r3, [pc, #404]	; (801016c <MAP_calcMouseDir+0x214>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d102      	bne.n	800ffe4 <MAP_calcMouseDir+0x8c>
 800ffde:	89bb      	ldrh	r3, [r7, #12]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 800ffe4:	89ba      	ldrh	r2, [r7, #12]
 800ffe6:	89fb      	ldrh	r3, [r7, #14]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d203      	bcs.n	800fff4 <MAP_calcMouseDir+0x9c>
				us_base = us_new;
 800ffec:	89bb      	ldrh	r3, [r7, #12]
 800ffee:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = NORTH;
 800fff0:	2300      	movs	r3, #0
 800fff2:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	東方向の区画の確認
		if ( ( uc_wall & 2 ) == 0 ){
 800fff4:	7abb      	ldrb	r3, [r7, #10]
 800fff6:	f003 0302 	and.w	r3, r3, #2
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d12f      	bne.n	801005e <MAP_calcMouseDir+0x106>
			us_new = us_cmap[my][mx+1] * 4 + 4;
 800fffe:	4b57      	ldr	r3, [pc, #348]	; (801015c <MAP_calcMouseDir+0x204>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	4b56      	ldr	r3, [pc, #344]	; (8010160 <MAP_calcMouseDir+0x208>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	3301      	adds	r3, #1
 801000a:	4957      	ldr	r1, [pc, #348]	; (8010168 <MAP_calcMouseDir+0x210>)
 801000c:	0152      	lsls	r2, r2, #5
 801000e:	4413      	add	r3, r2
 8010010:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010014:	3301      	adds	r3, #1
 8010016:	b29b      	uxth	r3, r3
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx+1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 801001c:	4b4f      	ldr	r3, [pc, #316]	; (801015c <MAP_calcMouseDir+0x204>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	461a      	mov	r2, r3
 8010022:	4b4f      	ldr	r3, [pc, #316]	; (8010160 <MAP_calcMouseDir+0x208>)
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	3301      	adds	r3, #1
 8010028:	494e      	ldr	r1, [pc, #312]	; (8010164 <MAP_calcMouseDir+0x20c>)
 801002a:	0152      	lsls	r2, r2, #5
 801002c:	440a      	add	r2, r1
 801002e:	4413      	add	r3, r2
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010036:	2bf0      	cmp	r3, #240	; 0xf0
 8010038:	d002      	beq.n	8010040 <MAP_calcMouseDir+0xe8>
 801003a:	89bb      	ldrh	r3, [r7, #12]
 801003c:	3b02      	subs	r3, #2
 801003e:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == EAST) us_new = us_new - 1;
 8010040:	4b4a      	ldr	r3, [pc, #296]	; (801016c <MAP_calcMouseDir+0x214>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	2b01      	cmp	r3, #1
 8010046:	d102      	bne.n	801004e <MAP_calcMouseDir+0xf6>
 8010048:	89bb      	ldrh	r3, [r7, #12]
 801004a:	3b01      	subs	r3, #1
 801004c:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 801004e:	89ba      	ldrh	r2, [r7, #12]
 8010050:	89fb      	ldrh	r3, [r7, #14]
 8010052:	429a      	cmp	r2, r3
 8010054:	d203      	bcs.n	801005e <MAP_calcMouseDir+0x106>
				us_base = us_new;
 8010056:	89bb      	ldrh	r3, [r7, #12]
 8010058:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = EAST;
 801005a:	2301      	movs	r3, #1
 801005c:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	南方向の区画の確認
		if ( ( uc_wall & 4 ) == 0 ){
 801005e:	7abb      	ldrb	r3, [r7, #10]
 8010060:	f003 0304 	and.w	r3, r3, #4
 8010064:	2b00      	cmp	r3, #0
 8010066:	d12f      	bne.n	80100c8 <MAP_calcMouseDir+0x170>
			us_new = us_cmap[my-1][mx] * 4 + 4;
 8010068:	4b3c      	ldr	r3, [pc, #240]	; (801015c <MAP_calcMouseDir+0x204>)
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	3b01      	subs	r3, #1
 801006e:	4a3c      	ldr	r2, [pc, #240]	; (8010160 <MAP_calcMouseDir+0x208>)
 8010070:	7812      	ldrb	r2, [r2, #0]
 8010072:	4611      	mov	r1, r2
 8010074:	4a3c      	ldr	r2, [pc, #240]	; (8010168 <MAP_calcMouseDir+0x210>)
 8010076:	015b      	lsls	r3, r3, #5
 8010078:	440b      	add	r3, r1
 801007a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801007e:	3301      	adds	r3, #1
 8010080:	b29b      	uxth	r3, r3
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my-1][mx] & 0xf0 ) != 0xf0) us_new = us_new - 2;
 8010086:	4b35      	ldr	r3, [pc, #212]	; (801015c <MAP_calcMouseDir+0x204>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	3b01      	subs	r3, #1
 801008c:	4a34      	ldr	r2, [pc, #208]	; (8010160 <MAP_calcMouseDir+0x208>)
 801008e:	7812      	ldrb	r2, [r2, #0]
 8010090:	4611      	mov	r1, r2
 8010092:	4a34      	ldr	r2, [pc, #208]	; (8010164 <MAP_calcMouseDir+0x20c>)
 8010094:	015b      	lsls	r3, r3, #5
 8010096:	4413      	add	r3, r2
 8010098:	440b      	add	r3, r1
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100a0:	2bf0      	cmp	r3, #240	; 0xf0
 80100a2:	d002      	beq.n	80100aa <MAP_calcMouseDir+0x152>
 80100a4:	89bb      	ldrh	r3, [r7, #12]
 80100a6:	3b02      	subs	r3, #2
 80100a8:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == SOUTH ) us_new = us_new - 1;
 80100aa:	4b30      	ldr	r3, [pc, #192]	; (801016c <MAP_calcMouseDir+0x214>)
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	d102      	bne.n	80100b8 <MAP_calcMouseDir+0x160>
 80100b2:	89bb      	ldrh	r3, [r7, #12]
 80100b4:	3b01      	subs	r3, #1
 80100b6:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 80100b8:	89ba      	ldrh	r2, [r7, #12]
 80100ba:	89fb      	ldrh	r3, [r7, #14]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d203      	bcs.n	80100c8 <MAP_calcMouseDir+0x170>
				us_base = us_new;
 80100c0:	89bb      	ldrh	r3, [r7, #12]
 80100c2:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = SOUTH;
 80100c4:	2302      	movs	r3, #2
 80100c6:	72fb      	strb	r3, [r7, #11]
			}
		}
		//	西方向の区画の確認
		if ( ( uc_wall & 8 ) == 0 ){
 80100c8:	7abb      	ldrb	r3, [r7, #10]
 80100ca:	f003 0308 	and.w	r3, r3, #8
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d12f      	bne.n	8010132 <MAP_calcMouseDir+0x1da>
			us_new = us_cmap[my][mx-1] * 4 + 4;
 80100d2:	4b22      	ldr	r3, [pc, #136]	; (801015c <MAP_calcMouseDir+0x204>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	4b21      	ldr	r3, [pc, #132]	; (8010160 <MAP_calcMouseDir+0x208>)
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	3b01      	subs	r3, #1
 80100de:	4922      	ldr	r1, [pc, #136]	; (8010168 <MAP_calcMouseDir+0x210>)
 80100e0:	0152      	lsls	r2, r2, #5
 80100e2:	4413      	add	r3, r2
 80100e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80100e8:	3301      	adds	r3, #1
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	81bb      	strh	r3, [r7, #12]
			if ( ( g_sysMap[my][mx-1] & 0xf0 ) != 0xf0 ) us_new = us_new - 2;
 80100f0:	4b1a      	ldr	r3, [pc, #104]	; (801015c <MAP_calcMouseDir+0x204>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	461a      	mov	r2, r3
 80100f6:	4b1a      	ldr	r3, [pc, #104]	; (8010160 <MAP_calcMouseDir+0x208>)
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	3b01      	subs	r3, #1
 80100fc:	4919      	ldr	r1, [pc, #100]	; (8010164 <MAP_calcMouseDir+0x20c>)
 80100fe:	0152      	lsls	r2, r2, #5
 8010100:	440a      	add	r2, r1
 8010102:	4413      	add	r3, r2
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801010a:	2bf0      	cmp	r3, #240	; 0xf0
 801010c:	d002      	beq.n	8010114 <MAP_calcMouseDir+0x1bc>
 801010e:	89bb      	ldrh	r3, [r7, #12]
 8010110:	3b02      	subs	r3, #2
 8010112:	81bb      	strh	r3, [r7, #12]
			if ( en_Head == WEST ) us_new = us_new - 1;
 8010114:	4b15      	ldr	r3, [pc, #84]	; (801016c <MAP_calcMouseDir+0x214>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	2b03      	cmp	r3, #3
 801011a:	d102      	bne.n	8010122 <MAP_calcMouseDir+0x1ca>
 801011c:	89bb      	ldrh	r3, [r7, #12]
 801011e:	3b01      	subs	r3, #1
 8010120:	81bb      	strh	r3, [r7, #12]
			if ( us_new < us_base ){
 8010122:	89ba      	ldrh	r2, [r7, #12]
 8010124:	89fb      	ldrh	r3, [r7, #14]
 8010126:	429a      	cmp	r2, r3
 8010128:	d203      	bcs.n	8010132 <MAP_calcMouseDir+0x1da>
				us_base = us_new;
 801012a:	89bb      	ldrh	r3, [r7, #12]
 801012c:	81fb      	strh	r3, [r7, #14]
				en_tmpHead = WEST;
 801012e:	2303      	movs	r3, #3
 8010130:	72fb      	strb	r3, [r7, #11]
			}
		}
		
		*p_head = (enMAP_HEAD_DIR)( (en_tmpHead - en_Head) & 3 );		// 移動方向
 8010132:	4b0e      	ldr	r3, [pc, #56]	; (801016c <MAP_calcMouseDir+0x214>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	7afa      	ldrb	r2, [r7, #11]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	b2db      	uxtb	r3, r3
 801013c:	f003 0303 	and.w	r3, r3, #3
 8010140:	b2da      	uxtb	r2, r3
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	701a      	strb	r2, [r3, #0]
	// 制御方法指定なし
	else{
		*p_head = (enMAP_HEAD_DIR)0;
	}

}
 8010146:	e002      	b.n	801014e <MAP_calcMouseDir+0x1f6>
		*p_head = (enMAP_HEAD_DIR)0;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2200      	movs	r2, #0
 801014c:	701a      	strb	r2, [r3, #0]
}
 801014e:	bf00      	nop
 8010150:	3714      	adds	r7, #20
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	200093c9 	.word	0x200093c9
 8010160:	200093d3 	.word	0x200093d3
 8010164:	200002f4 	.word	0x200002f4
 8010168:	20000718 	.word	0x20000718
 801016c:	200093d0 	.word	0x200093d0

08010170 <MAP_refMousePos>:

void MAP_refMousePos( 
	enMAP_HEAD_DIR 			en_head			///< [in] 進行方向
){
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	71fb      	strb	r3, [r7, #7]
	switch( en_head ){
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	2b03      	cmp	r3, #3
 801017e:	d827      	bhi.n	80101d0 <MAP_refMousePos+0x60>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <MAP_refMousePos+0x18>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	08010199 	.word	0x08010199
 801018c:	080101a7 	.word	0x080101a7
 8010190:	080101b5 	.word	0x080101b5
 8010194:	080101c3 	.word	0x080101c3
		case NORTH:
			my = my + 1;
 8010198:	4b11      	ldr	r3, [pc, #68]	; (80101e0 <MAP_refMousePos+0x70>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	3301      	adds	r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	4b0f      	ldr	r3, [pc, #60]	; (80101e0 <MAP_refMousePos+0x70>)
 80101a2:	701a      	strb	r2, [r3, #0]
			break;
 80101a4:	e015      	b.n	80101d2 <MAP_refMousePos+0x62>
		case EAST:
			mx = mx + 1;
 80101a6:	4b0f      	ldr	r3, [pc, #60]	; (80101e4 <MAP_refMousePos+0x74>)
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	3301      	adds	r3, #1
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	4b0d      	ldr	r3, [pc, #52]	; (80101e4 <MAP_refMousePos+0x74>)
 80101b0:	701a      	strb	r2, [r3, #0]
			break;
 80101b2:	e00e      	b.n	80101d2 <MAP_refMousePos+0x62>
		case SOUTH:
			my = my - 1;
 80101b4:	4b0a      	ldr	r3, [pc, #40]	; (80101e0 <MAP_refMousePos+0x70>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	3b01      	subs	r3, #1
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	4b08      	ldr	r3, [pc, #32]	; (80101e0 <MAP_refMousePos+0x70>)
 80101be:	701a      	strb	r2, [r3, #0]
			break;
 80101c0:	e007      	b.n	80101d2 <MAP_refMousePos+0x62>
		case WEST:
			mx = mx - 1;
 80101c2:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <MAP_refMousePos+0x74>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	b2da      	uxtb	r2, r3
 80101ca:	4b06      	ldr	r3, [pc, #24]	; (80101e4 <MAP_refMousePos+0x74>)
 80101cc:	701a      	strb	r2, [r3, #0]
			break;
 80101ce:	e000      	b.n	80101d2 <MAP_refMousePos+0x62>
		default:
			break;
 80101d0:	bf00      	nop
	}
}
 80101d2:	bf00      	nop
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	200093c9 	.word	0x200093c9
 80101e4:	200093d3 	.word	0x200093d3

080101e8 <MAP_moveNextBlock>:

void MAP_moveNextBlock( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている）
	bool*			p_type			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
){
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	6039      	str	r1, [r7, #0]
 80101f2:	71fb      	strb	r3, [r7, #7]
	*p_type = TRUE;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2201      	movs	r2, #1
 80101f8:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 80101fa:	4b4d      	ldr	r3, [pc, #308]	; (8010330 <MAP_moveNextBlock+0x148>)
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	2b03      	cmp	r3, #3
 8010206:	f200 8082 	bhi.w	801030e <MAP_moveNextBlock+0x126>
 801020a:	a201      	add	r2, pc, #4	; (adr r2, 8010210 <MAP_moveNextBlock+0x28>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	08010221 	.word	0x08010221
 8010214:	08010231 	.word	0x08010231
 8010218:	08010259 	.word	0x08010259
 801021c:	08010245 	.word	0x08010245

		/* そのまま前進 */
		case NORTH:
			*p_type = FALSE;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2200      	movs	r2, #0
 8010224:	701a      	strb	r2, [r3, #0]
			MOT_goBlock_Const( 1 );				// 1区画前進
 8010226:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801022a:	f7fa f9fd 	bl	800a628 <MOT_goBlock_Const>
			break;
 801022e:	e071      	b.n	8010314 <MAP_moveNextBlock+0x12c>
		// 右に旋回する
		case EAST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8010230:	eddf 0a40 	vldr	s1, [pc, #256]	; 8010334 <MAP_moveNextBlock+0x14c>
 8010234:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010238:	f7fa f9d2 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R90);					// 右90度旋回
 801023c:	2000      	movs	r0, #0
 801023e:	f7fa fa73 	bl	800a728 <MOT_turn>
			break;
 8010242:	e067      	b.n	8010314 <MAP_moveNextBlock+0x12c>
		// 左に旋回する
		case WEST:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8010244:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8010334 <MAP_moveNextBlock+0x14c>
 8010248:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801024c:	f7fa f9c8 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_L90);					// 右90度旋回
 8010250:	2001      	movs	r0, #1
 8010252:	f7fa fa69 	bl	800a728 <MOT_turn>
			break;
 8010256:	e05d      	b.n	8010314 <MAP_moveNextBlock+0x12c>
		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 8010258:	eddf 0a36 	vldr	s1, [pc, #216]	; 8010334 <MAP_moveNextBlock+0x14c>
 801025c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010260:	f7fa f9be 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);					// 右180度旋回
 8010264:	2002      	movs	r0, #2
 8010266:	f7fa fa5f 	bl	800a728 <MOT_turn>
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801026a:	4b33      	ldr	r3, [pc, #204]	; (8010338 <MAP_moveNextBlock+0x150>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10e      	bne.n	8010290 <MAP_moveNextBlock+0xa8>
 8010272:	4b32      	ldr	r3, [pc, #200]	; (801033c <MAP_moveNextBlock+0x154>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	4618      	mov	r0, r3
 8010278:	4b31      	ldr	r3, [pc, #196]	; (8010340 <MAP_moveNextBlock+0x158>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	4619      	mov	r1, r3
 801027e:	4a31      	ldr	r2, [pc, #196]	; (8010344 <MAP_moveNextBlock+0x15c>)
 8010280:	0143      	lsls	r3, r0, #5
 8010282:	4413      	add	r3, r2
 8010284:	440b      	add	r3, r1
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	2b00      	cmp	r3, #0
 801028e:	d138      	bne.n	8010302 <MAP_moveNextBlock+0x11a>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8010290:	4b29      	ldr	r3, [pc, #164]	; (8010338 <MAP_moveNextBlock+0x150>)
 8010292:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8010294:	2b01      	cmp	r3, #1
 8010296:	d10e      	bne.n	80102b6 <MAP_moveNextBlock+0xce>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8010298:	4b28      	ldr	r3, [pc, #160]	; (801033c <MAP_moveNextBlock+0x154>)
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	4618      	mov	r0, r3
 801029e:	4b28      	ldr	r3, [pc, #160]	; (8010340 <MAP_moveNextBlock+0x158>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	4619      	mov	r1, r3
 80102a4:	4a27      	ldr	r2, [pc, #156]	; (8010344 <MAP_moveNextBlock+0x15c>)
 80102a6:	0143      	lsls	r3, r0, #5
 80102a8:	4413      	add	r3, r2
 80102aa:	440b      	add	r3, r1
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0302 	and.w	r3, r3, #2
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d125      	bne.n	8010302 <MAP_moveNextBlock+0x11a>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80102b6:	4b20      	ldr	r3, [pc, #128]	; (8010338 <MAP_moveNextBlock+0x150>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d10e      	bne.n	80102dc <MAP_moveNextBlock+0xf4>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80102be:	4b1f      	ldr	r3, [pc, #124]	; (801033c <MAP_moveNextBlock+0x154>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	4618      	mov	r0, r3
 80102c4:	4b1e      	ldr	r3, [pc, #120]	; (8010340 <MAP_moveNextBlock+0x158>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	4619      	mov	r1, r3
 80102ca:	4a1e      	ldr	r2, [pc, #120]	; (8010344 <MAP_moveNextBlock+0x15c>)
 80102cc:	0143      	lsls	r3, r0, #5
 80102ce:	4413      	add	r3, r2
 80102d0:	440b      	add	r3, r1
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 0304 	and.w	r3, r3, #4
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d112      	bne.n	8010302 <MAP_moveNextBlock+0x11a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80102dc:	4b16      	ldr	r3, [pc, #88]	; (8010338 <MAP_moveNextBlock+0x150>)
 80102de:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d116      	bne.n	8010312 <MAP_moveNextBlock+0x12a>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80102e4:	4b15      	ldr	r3, [pc, #84]	; (801033c <MAP_moveNextBlock+0x154>)
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	4618      	mov	r0, r3
 80102ea:	4b15      	ldr	r3, [pc, #84]	; (8010340 <MAP_moveNextBlock+0x158>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	4619      	mov	r1, r3
 80102f0:	4a14      	ldr	r2, [pc, #80]	; (8010344 <MAP_moveNextBlock+0x15c>)
 80102f2:	0143      	lsls	r3, r0, #5
 80102f4:	4413      	add	r3, r2
 80102f6:	440b      	add	r3, r1
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	f003 0308 	and.w	r3, r3, #8
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d007      	beq.n	8010312 <MAP_moveNextBlock+0x12a>
			){
				MOT_goHitBackWall();					// バックする
 8010302:	f7fa fd47 	bl	800ad94 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8010306:	4b0a      	ldr	r3, [pc, #40]	; (8010330 <MAP_moveNextBlock+0x148>)
 8010308:	4a0f      	ldr	r2, [pc, #60]	; (8010348 <MAP_moveNextBlock+0x160>)
 801030a:	601a      	str	r2, [r3, #0]
			}
			break;
 801030c:	e001      	b.n	8010312 <MAP_moveNextBlock+0x12a>
		default:
			break;
 801030e:	bf00      	nop
 8010310:	e000      	b.n	8010314 <MAP_moveNextBlock+0x12c>
			break;
 8010312:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock(en_head, p_type);					// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 8010314:	4b08      	ldr	r3, [pc, #32]	; (8010338 <MAP_moveNextBlock+0x150>)
 8010316:	781a      	ldrb	r2, [r3, #0]
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	4413      	add	r3, r2
 801031c:	b2db      	uxtb	r3, r3
 801031e:	f003 0303 	and.w	r3, r3, #3
 8010322:	b2da      	uxtb	r2, r3
 8010324:	4b04      	ldr	r3, [pc, #16]	; (8010338 <MAP_moveNextBlock+0x150>)
 8010326:	701a      	strb	r2, [r3, #0]
//	}
}
 8010328:	bf00      	nop
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	200093cc 	.word	0x200093cc
 8010334:	00000000 	.word	0x00000000
 8010338:	200093d0 	.word	0x200093d0
 801033c:	200093c9 	.word	0x200093c9
 8010340:	200093d3 	.word	0x200093d3
 8010344:	200002f4 	.word	0x200002f4
 8010348:	3e6b851f 	.word	0x3e6b851f

0801034c <MAP_moveNextBlock_Sura>:

void MAP_moveNextBlock_Sura( 
	enMAP_HEAD_DIR 	en_head,		///< [in] 相対進行方向（マウス進行方向を北としている
	bool*			p_type,			///< [in] FALSE: １区間前進状態、TURE:半区間前進状態
	bool			bl_resume		///< [in] FALSE: レジューム動作ではない、TURE:レジューム動作
){
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	6039      	str	r1, [r7, #0]
 8010356:	71fb      	strb	r3, [r7, #7]
 8010358:	4613      	mov	r3, r2
 801035a:	71bb      	strb	r3, [r7, #6]
	*p_type = FALSE;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	2200      	movs	r2, #0
 8010360:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;				// 移動距離を加算値クリア
 8010362:	4b7e      	ldr	r3, [pc, #504]	; (801055c <MAP_moveNextBlock_Sura+0x210>)
 8010364:	f04f 0200 	mov.w	r2, #0
 8010368:	601a      	str	r2, [r3, #0]
	
	/* 動作 */
	switch( en_head ){
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	2b03      	cmp	r3, #3
 801036e:	f200 8244 	bhi.w	80107fa <MAP_moveNextBlock_Sura+0x4ae>
 8010372:	a201      	add	r2, pc, #4	; (adr r2, 8010378 <MAP_moveNextBlock_Sura+0x2c>)
 8010374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010378:	08010389 	.word	0x08010389
 801037c:	080103ad 	.word	0x080103ad
 8010380:	08010739 	.word	0x08010739
 8010384:	08010589 	.word	0x08010589

		// そのまま前進
		case NORTH:
			
			/* レジューム動作ではない */
			if( bl_resume == FALSE ){
 8010388:	79bb      	ldrb	r3, [r7, #6]
 801038a:	f083 0301 	eor.w	r3, r3, #1
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <MAP_moveNextBlock_Sura+0x52>
		
				MOT_goBlock_Const( 1 );					// 1区画前進
 8010394:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010398:	f7fa f946 	bl	800a628 <MOT_goBlock_Const>
			/* レジューム動作 */
			else{
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
//				uc_SlaCnt = 0;									// スラロームしていない
			}
			break;
 801039c:	e22e      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
				MOT_goBlock_FinSpeed( 1.0f, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 801039e:	eddf 0a70 	vldr	s1, [pc, #448]	; 8010560 <MAP_moveNextBlock_Sura+0x214>
 80103a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80103a6:	f7fa f91b 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			break;
 80103aa:	e227      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>

		// 右にスラロームする
		case EAST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80103ac:	4b6d      	ldr	r3, [pc, #436]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d10e      	bne.n	80103d2 <MAP_moveNextBlock_Sura+0x86>
 80103b4:	4b6c      	ldr	r3, [pc, #432]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	4618      	mov	r0, r3
 80103ba:	4b6c      	ldr	r3, [pc, #432]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	4619      	mov	r1, r3
 80103c0:	4a6b      	ldr	r2, [pc, #428]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 80103c2:	0143      	lsls	r3, r0, #5
 80103c4:	4413      	add	r3, r2
 80103c6:	440b      	add	r3, r1
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	f003 0302 	and.w	r3, r3, #2
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d138      	bne.n	8010444 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80103d2:	4b64      	ldr	r3, [pc, #400]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d10e      	bne.n	80103f8 <MAP_moveNextBlock_Sura+0xac>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80103da:	4b63      	ldr	r3, [pc, #396]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	4618      	mov	r0, r3
 80103e0:	4b62      	ldr	r3, [pc, #392]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	4619      	mov	r1, r3
 80103e6:	4a62      	ldr	r2, [pc, #392]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 80103e8:	0143      	lsls	r3, r0, #5
 80103ea:	4413      	add	r3, r2
 80103ec:	440b      	add	r3, r1
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	f003 0304 	and.w	r3, r3, #4
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d125      	bne.n	8010444 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80103f8:	4b5a      	ldr	r3, [pc, #360]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	d10e      	bne.n	801041e <MAP_moveNextBlock_Sura+0xd2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8010400:	4b59      	ldr	r3, [pc, #356]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	4618      	mov	r0, r3
 8010406:	4b59      	ldr	r3, [pc, #356]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	4619      	mov	r1, r3
 801040c:	4a58      	ldr	r2, [pc, #352]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 801040e:	0143      	lsls	r3, r0, #5
 8010410:	4413      	add	r3, r2
 8010412:	440b      	add	r3, r1
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	f003 0308 	and.w	r3, r3, #8
 801041a:	2b00      	cmp	r3, #0
 801041c:	d112      	bne.n	8010444 <MAP_moveNextBlock_Sura+0xf8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 801041e:	4b51      	ldr	r3, [pc, #324]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 8010420:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8010422:	2b03      	cmp	r3, #3
 8010424:	d112      	bne.n	801044c <MAP_moveNextBlock_Sura+0x100>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8010426:	4b50      	ldr	r3, [pc, #320]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	4b4f      	ldr	r3, [pc, #316]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	4619      	mov	r1, r3
 8010432:	4a4f      	ldr	r2, [pc, #316]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 8010434:	0143      	lsls	r3, r0, #5
 8010436:	4413      	add	r3, r2
 8010438:	440b      	add	r3, r1
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	d003      	beq.n	801044c <MAP_moveNextBlock_Sura+0x100>
				){
				uc_dist_control = 10;
 8010444:	4b4b      	ldr	r3, [pc, #300]	; (8010574 <MAP_moveNextBlock_Sura+0x228>)
 8010446:	220a      	movs	r2, #10
 8010448:	701a      	strb	r2, [r3, #0]
 801044a:	e002      	b.n	8010452 <MAP_moveNextBlock_Sura+0x106>
				}
			else{
				uc_dist_control = 0;
 801044c:	4b49      	ldr	r3, [pc, #292]	; (8010574 <MAP_moveNextBlock_Sura+0x228>)
 801044e:	2200      	movs	r2, #0
 8010450:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 8010452:	4b49      	ldr	r3, [pc, #292]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010454:	781a      	ldrb	r2, [r3, #0]
 8010456:	4b49      	ldr	r3, [pc, #292]	; (801057c <MAP_moveNextBlock_Sura+0x230>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	d20e      	bcs.n	801047c <MAP_moveNextBlock_Sura+0x130>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801045e:	2000      	movs	r0, #0
 8010460:	f7f2 fdd0 	bl	8003004 <PARAM_getSra>
 8010464:	4603      	mov	r3, r0
 8010466:	4619      	mov	r1, r3
 8010468:	2000      	movs	r0, #0
 801046a:	f7fa fce5 	bl	800ae38 <MOT_goSla>
				uc_SlaCnt++;
 801046e:	4b42      	ldr	r3, [pc, #264]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	3301      	adds	r3, #1
 8010474:	b2da      	uxtb	r2, r3
 8010476:	4b40      	ldr	r3, [pc, #256]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010478:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
			break;
 801047a:	e1bf      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 801047c:	4b39      	ldr	r3, [pc, #228]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10e      	bne.n	80104a2 <MAP_moveNextBlock_Sura+0x156>
 8010484:	4b38      	ldr	r3, [pc, #224]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	4618      	mov	r0, r3
 801048a:	4b38      	ldr	r3, [pc, #224]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	4619      	mov	r1, r3
 8010490:	4a37      	ldr	r2, [pc, #220]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 8010492:	0143      	lsls	r3, r0, #5
 8010494:	4413      	add	r3, r2
 8010496:	440b      	add	r3, r1
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	f003 0308 	and.w	r3, r3, #8
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d138      	bne.n	8010514 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80104a2:	4b30      	ldr	r3, [pc, #192]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80104a4:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d10e      	bne.n	80104c8 <MAP_moveNextBlock_Sura+0x17c>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80104aa:	4b2f      	ldr	r3, [pc, #188]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	4618      	mov	r0, r3
 80104b0:	4b2e      	ldr	r3, [pc, #184]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	4619      	mov	r1, r3
 80104b6:	4a2e      	ldr	r2, [pc, #184]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 80104b8:	0143      	lsls	r3, r0, #5
 80104ba:	4413      	add	r3, r2
 80104bc:	440b      	add	r3, r1
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d125      	bne.n	8010514 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80104c8:	4b26      	ldr	r3, [pc, #152]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	d10e      	bne.n	80104ee <MAP_moveNextBlock_Sura+0x1a2>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80104d0:	4b25      	ldr	r3, [pc, #148]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	4618      	mov	r0, r3
 80104d6:	4b25      	ldr	r3, [pc, #148]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	4619      	mov	r1, r3
 80104dc:	4a24      	ldr	r2, [pc, #144]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 80104de:	0143      	lsls	r3, r0, #5
 80104e0:	4413      	add	r3, r2
 80104e2:	440b      	add	r3, r1
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	f003 0302 	and.w	r3, r3, #2
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d112      	bne.n	8010514 <MAP_moveNextBlock_Sura+0x1c8>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80104ee:	4b1d      	ldr	r3, [pc, #116]	; (8010564 <MAP_moveNextBlock_Sura+0x218>)
 80104f0:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	d123      	bne.n	801053e <MAP_moveNextBlock_Sura+0x1f2>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80104f6:	4b1c      	ldr	r3, [pc, #112]	; (8010568 <MAP_moveNextBlock_Sura+0x21c>)
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	4618      	mov	r0, r3
 80104fc:	4b1b      	ldr	r3, [pc, #108]	; (801056c <MAP_moveNextBlock_Sura+0x220>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	4619      	mov	r1, r3
 8010502:	4a1b      	ldr	r2, [pc, #108]	; (8010570 <MAP_moveNextBlock_Sura+0x224>)
 8010504:	0143      	lsls	r3, r0, #5
 8010506:	4413      	add	r3, r2
 8010508:	440b      	add	r3, r1
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0304 	and.w	r3, r3, #4
 8010510:	2b00      	cmp	r3, #0
 8010512:	d014      	beq.n	801053e <MAP_moveNextBlock_Sura+0x1f2>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8010514:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8010580 <MAP_moveNextBlock_Sura+0x234>
 8010518:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801051c:	f7fa f860 	bl	800a5e0 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 8010520:	2000      	movs	r0, #0
 8010522:	f7fa f901 	bl	800a728 <MOT_turn>
					uc_SlaCnt = 0;
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 801052c:	f7fa fc32 	bl	800ad94 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8010530:	4b0a      	ldr	r3, [pc, #40]	; (801055c <MAP_moveNextBlock_Sura+0x210>)
 8010532:	4a14      	ldr	r2, [pc, #80]	; (8010584 <MAP_moveNextBlock_Sura+0x238>)
 8010534:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	2201      	movs	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
			break;
 801053c:	e15e      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801053e:	2000      	movs	r0, #0
 8010540:	f7f2 fd60 	bl	8003004 <PARAM_getSra>
 8010544:	4603      	mov	r3, r0
 8010546:	4619      	mov	r1, r3
 8010548:	2000      	movs	r0, #0
 801054a:	f7fa fc75 	bl	800ae38 <MOT_goSla>
					uc_SlaCnt++;
 801054e:	4b0a      	ldr	r3, [pc, #40]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	3301      	adds	r3, #1
 8010554:	b2da      	uxtb	r2, r3
 8010556:	4b08      	ldr	r3, [pc, #32]	; (8010578 <MAP_moveNextBlock_Sura+0x22c>)
 8010558:	701a      	strb	r2, [r3, #0]
			break;
 801055a:	e14f      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
 801055c:	200093cc 	.word	0x200093cc
 8010560:	3e99999a 	.word	0x3e99999a
 8010564:	200093d0 	.word	0x200093d0
 8010568:	200093c9 	.word	0x200093c9
 801056c:	200093d3 	.word	0x200093d3
 8010570:	200002f4 	.word	0x200002f4
 8010574:	20000f18 	.word	0x20000f18
 8010578:	200002b6 	.word	0x200002b6
 801057c:	2000001c 	.word	0x2000001c
 8010580:	00000000 	.word	0x00000000
 8010584:	3e6b851f 	.word	0x3e6b851f

		// 左にスラロームする
		case WEST:
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8010588:	4ba3      	ldr	r3, [pc, #652]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d10e      	bne.n	80105ae <MAP_moveNextBlock_Sura+0x262>
 8010590:	4ba2      	ldr	r3, [pc, #648]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	4ba2      	ldr	r3, [pc, #648]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	4619      	mov	r1, r3
 801059c:	4aa1      	ldr	r2, [pc, #644]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 801059e:	0143      	lsls	r3, r0, #5
 80105a0:	4413      	add	r3, r2
 80105a2:	440b      	add	r3, r1
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	f003 0308 	and.w	r3, r3, #8
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d138      	bne.n	8010620 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80105ae:	4b9a      	ldr	r3, [pc, #616]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d10e      	bne.n	80105d4 <MAP_moveNextBlock_Sura+0x288>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80105b6:	4b99      	ldr	r3, [pc, #612]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	4618      	mov	r0, r3
 80105bc:	4b98      	ldr	r3, [pc, #608]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	4619      	mov	r1, r3
 80105c2:	4a98      	ldr	r2, [pc, #608]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80105c4:	0143      	lsls	r3, r0, #5
 80105c6:	4413      	add	r3, r2
 80105c8:	440b      	add	r3, r1
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	f003 0301 	and.w	r3, r3, #1
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d125      	bne.n	8010620 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80105d4:	4b90      	ldr	r3, [pc, #576]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80105d8:	2b02      	cmp	r3, #2
 80105da:	d10e      	bne.n	80105fa <MAP_moveNextBlock_Sura+0x2ae>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80105dc:	4b8f      	ldr	r3, [pc, #572]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	4618      	mov	r0, r3
 80105e2:	4b8f      	ldr	r3, [pc, #572]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	4619      	mov	r1, r3
 80105e8:	4a8e      	ldr	r2, [pc, #568]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80105ea:	0143      	lsls	r3, r0, #5
 80105ec:	4413      	add	r3, r2
 80105ee:	440b      	add	r3, r1
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0302 	and.w	r3, r3, #2
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d112      	bne.n	8010620 <MAP_moveNextBlock_Sura+0x2d4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 80105fa:	4b87      	ldr	r3, [pc, #540]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80105fc:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d112      	bne.n	8010628 <MAP_moveNextBlock_Sura+0x2dc>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8010602:	4b86      	ldr	r3, [pc, #536]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	4618      	mov	r0, r3
 8010608:	4b85      	ldr	r3, [pc, #532]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	4619      	mov	r1, r3
 801060e:	4a85      	ldr	r2, [pc, #532]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 8010610:	0143      	lsls	r3, r0, #5
 8010612:	4413      	add	r3, r2
 8010614:	440b      	add	r3, r1
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 0304 	and.w	r3, r3, #4
 801061c:	2b00      	cmp	r3, #0
 801061e:	d003      	beq.n	8010628 <MAP_moveNextBlock_Sura+0x2dc>
				){
				uc_dist_control = 10;
 8010620:	4b81      	ldr	r3, [pc, #516]	; (8010828 <MAP_moveNextBlock_Sura+0x4dc>)
 8010622:	220a      	movs	r2, #10
 8010624:	701a      	strb	r2, [r3, #0]
 8010626:	e002      	b.n	801062e <MAP_moveNextBlock_Sura+0x2e2>
				}
			else{
				uc_dist_control = 0;
 8010628:	4b7f      	ldr	r3, [pc, #508]	; (8010828 <MAP_moveNextBlock_Sura+0x4dc>)
 801062a:	2200      	movs	r2, #0
 801062c:	701a      	strb	r2, [r3, #0]
			}
			if( uc_SlaCnt < SLA_count ){
 801062e:	4b7f      	ldr	r3, [pc, #508]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 8010630:	781a      	ldrb	r2, [r3, #0]
 8010632:	4b7f      	ldr	r3, [pc, #508]	; (8010830 <MAP_moveNextBlock_Sura+0x4e4>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	429a      	cmp	r2, r3
 8010638:	d20e      	bcs.n	8010658 <MAP_moveNextBlock_Sura+0x30c>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801063a:	2000      	movs	r0, #0
 801063c:	f7f2 fce2 	bl	8003004 <PARAM_getSra>
 8010640:	4603      	mov	r3, r0
 8010642:	4619      	mov	r1, r3
 8010644:	2001      	movs	r0, #1
 8010646:	f7fa fbf7 	bl	800ae38 <MOT_goSla>
				uc_SlaCnt++;
 801064a:	4b78      	ldr	r3, [pc, #480]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	3301      	adds	r3, #1
 8010650:	b2da      	uxtb	r2, r3
 8010652:	4b76      	ldr	r3, [pc, #472]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 8010654:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
			break;
 8010656:	e0d1      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8010658:	4b6f      	ldr	r3, [pc, #444]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d10e      	bne.n	801067e <MAP_moveNextBlock_Sura+0x332>
 8010660:	4b6e      	ldr	r3, [pc, #440]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	4618      	mov	r0, r3
 8010666:	4b6e      	ldr	r3, [pc, #440]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	4619      	mov	r1, r3
 801066c:	4a6d      	ldr	r2, [pc, #436]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 801066e:	0143      	lsls	r3, r0, #5
 8010670:	4413      	add	r3, r2
 8010672:	440b      	add	r3, r1
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	f003 0302 	and.w	r3, r3, #2
 801067a:	2b00      	cmp	r3, #0
 801067c:	d138      	bne.n	80106f0 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 801067e:	4b66      	ldr	r3, [pc, #408]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 8010680:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8010682:	2b01      	cmp	r3, #1
 8010684:	d10e      	bne.n	80106a4 <MAP_moveNextBlock_Sura+0x358>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8010686:	4b65      	ldr	r3, [pc, #404]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	4618      	mov	r0, r3
 801068c:	4b64      	ldr	r3, [pc, #400]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	4619      	mov	r1, r3
 8010692:	4a64      	ldr	r2, [pc, #400]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 8010694:	0143      	lsls	r3, r0, #5
 8010696:	4413      	add	r3, r2
 8010698:	440b      	add	r3, r1
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	f003 0304 	and.w	r3, r3, #4
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d125      	bne.n	80106f0 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80106a4:	4b5c      	ldr	r3, [pc, #368]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 80106a8:	2b02      	cmp	r3, #2
 80106aa:	d10e      	bne.n	80106ca <MAP_moveNextBlock_Sura+0x37e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80106ac:	4b5b      	ldr	r3, [pc, #364]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	4618      	mov	r0, r3
 80106b2:	4b5b      	ldr	r3, [pc, #364]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	4619      	mov	r1, r3
 80106b8:	4a5a      	ldr	r2, [pc, #360]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80106ba:	0143      	lsls	r3, r0, #5
 80106bc:	4413      	add	r3, r2
 80106be:	440b      	add	r3, r1
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 0308 	and.w	r3, r3, #8
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d112      	bne.n	80106f0 <MAP_moveNextBlock_Sura+0x3a4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80106ca:	4b53      	ldr	r3, [pc, #332]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 80106ce:	2b03      	cmp	r3, #3
 80106d0:	d123      	bne.n	801071a <MAP_moveNextBlock_Sura+0x3ce>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 80106d2:	4b52      	ldr	r3, [pc, #328]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	4618      	mov	r0, r3
 80106d8:	4b51      	ldr	r3, [pc, #324]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	4619      	mov	r1, r3
 80106de:	4a51      	ldr	r2, [pc, #324]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80106e0:	0143      	lsls	r3, r0, #5
 80106e2:	4413      	add	r3, r2
 80106e4:	440b      	add	r3, r1
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	f003 0301 	and.w	r3, r3, #1
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d014      	beq.n	801071a <MAP_moveNextBlock_Sura+0x3ce>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 80106f0:	eddf 0a50 	vldr	s1, [pc, #320]	; 8010834 <MAP_moveNextBlock_Sura+0x4e8>
 80106f4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80106f8:	f7f9 ff72 	bl	800a5e0 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 80106fc:	2001      	movs	r0, #1
 80106fe:	f7fa f813 	bl	800a728 <MOT_turn>
					uc_SlaCnt = 0;
 8010702:	4b4a      	ldr	r3, [pc, #296]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 8010704:	2200      	movs	r2, #0
 8010706:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8010708:	f7fa fb44 	bl	800ad94 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 801070c:	4b4a      	ldr	r3, [pc, #296]	; (8010838 <MAP_moveNextBlock_Sura+0x4ec>)
 801070e:	4a4b      	ldr	r2, [pc, #300]	; (801083c <MAP_moveNextBlock_Sura+0x4f0>)
 8010710:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	2201      	movs	r2, #1
 8010716:	701a      	strb	r2, [r3, #0]
			break;
 8010718:	e070      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 801071a:	2000      	movs	r0, #0
 801071c:	f7f2 fc72 	bl	8003004 <PARAM_getSra>
 8010720:	4603      	mov	r3, r0
 8010722:	4619      	mov	r1, r3
 8010724:	2001      	movs	r0, #1
 8010726:	f7fa fb87 	bl	800ae38 <MOT_goSla>
					uc_SlaCnt++;
 801072a:	4b40      	ldr	r3, [pc, #256]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	b2da      	uxtb	r2, r3
 8010732:	4b3e      	ldr	r3, [pc, #248]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 8010734:	701a      	strb	r2, [r3, #0]
			break;
 8010736:	e061      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>

		// 反転して戻る
		case SOUTH:
			MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8010738:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8010834 <MAP_moveNextBlock_Sura+0x4e8>
 801073c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010740:	f7f9 ff4e 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			MOT_turn(MOT_R180);									// 右180度旋回
 8010744:	2002      	movs	r0, #2
 8010746:	f7f9 ffef 	bl	800a728 <MOT_turn>
			uc_SlaCnt = 0;
 801074a:	4b38      	ldr	r3, [pc, #224]	; (801082c <MAP_moveNextBlock_Sura+0x4e0>)
 801074c:	2200      	movs	r2, #0
 801074e:	701a      	strb	r2, [r3, #0]
			
			/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 8010750:	4b31      	ldr	r3, [pc, #196]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10e      	bne.n	8010776 <MAP_moveNextBlock_Sura+0x42a>
 8010758:	4b30      	ldr	r3, [pc, #192]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	4b30      	ldr	r3, [pc, #192]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	4619      	mov	r1, r3
 8010764:	4a2f      	ldr	r2, [pc, #188]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 8010766:	0143      	lsls	r3, r0, #5
 8010768:	4413      	add	r3, r2
 801076a:	440b      	add	r3, r1
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b00      	cmp	r3, #0
 8010774:	d138      	bne.n	80107e8 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 8010776:	4b28      	ldr	r3, [pc, #160]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 8010778:	781b      	ldrb	r3, [r3, #0]
			if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 北を向いていて北に壁がある
 801077a:	2b01      	cmp	r3, #1
 801077c:	d10e      	bne.n	801079c <MAP_moveNextBlock_Sura+0x450>
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 801077e:	4b27      	ldr	r3, [pc, #156]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	4618      	mov	r0, r3
 8010784:	4b26      	ldr	r3, [pc, #152]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	4619      	mov	r1, r3
 801078a:	4a26      	ldr	r2, [pc, #152]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 801078c:	0143      	lsls	r3, r0, #5
 801078e:	4413      	add	r3, r2
 8010790:	440b      	add	r3, r1
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	f003 0302 	and.w	r3, r3, #2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d125      	bne.n	80107e8 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 801079c:	4b1e      	ldr	r3, [pc, #120]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 801079e:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 東を向いていて東に壁がある
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	d10e      	bne.n	80107c2 <MAP_moveNextBlock_Sura+0x476>
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80107a4:	4b1d      	ldr	r3, [pc, #116]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	4618      	mov	r0, r3
 80107aa:	4b1d      	ldr	r3, [pc, #116]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	4619      	mov	r1, r3
 80107b0:	4a1c      	ldr	r2, [pc, #112]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80107b2:	0143      	lsls	r3, r0, #5
 80107b4:	4413      	add	r3, r2
 80107b6:	440b      	add	r3, r1
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	f003 0304 	and.w	r3, r3, #4
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d112      	bne.n	80107e8 <MAP_moveNextBlock_Sura+0x49c>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80107c2:	4b15      	ldr	r3, [pc, #84]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80107c4:	781b      	ldrb	r3, [r3, #0]
				( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 南を向いていて南に壁がある
 80107c6:	2b03      	cmp	r3, #3
 80107c8:	d113      	bne.n	80107f2 <MAP_moveNextBlock_Sura+0x4a6>
				( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) ) 			// 西を向いていて西に壁がある
 80107ca:	4b14      	ldr	r3, [pc, #80]	; (801081c <MAP_moveNextBlock_Sura+0x4d0>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	4618      	mov	r0, r3
 80107d0:	4b13      	ldr	r3, [pc, #76]	; (8010820 <MAP_moveNextBlock_Sura+0x4d4>)
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	4619      	mov	r1, r3
 80107d6:	4a13      	ldr	r2, [pc, #76]	; (8010824 <MAP_moveNextBlock_Sura+0x4d8>)
 80107d8:	0143      	lsls	r3, r0, #5
 80107da:	4413      	add	r3, r2
 80107dc:	440b      	add	r3, r1
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	f003 0308 	and.w	r3, r3, #8
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d004      	beq.n	80107f2 <MAP_moveNextBlock_Sura+0x4a6>
			){
				MOT_goHitBackWall();					// バックする
 80107e8:	f7fa fad4 	bl	800ad94 <MOT_goHitBackWall>
				f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 80107ec:	4b12      	ldr	r3, [pc, #72]	; (8010838 <MAP_moveNextBlock_Sura+0x4ec>)
 80107ee:	4a13      	ldr	r2, [pc, #76]	; (801083c <MAP_moveNextBlock_Sura+0x4f0>)
 80107f0:	601a      	str	r2, [r3, #0]
			}
			*p_type = TRUE;								// 次は半区間＋バック分進める
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2201      	movs	r2, #1
 80107f6:	701a      	strb	r2, [r3, #0]
			break;
 80107f8:	e000      	b.n	80107fc <MAP_moveNextBlock_Sura+0x4b0>
			
		default:
			break;
 80107fa:	bf00      	nop
		MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
		MAP_moveNextBlock_Sura(en_head, p_type, TRUE );		// もう１度呼び出し（次の区画へ移動）
	}
	else{*/
		/* 進行方向更新 */
		en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
 80107fc:	4b06      	ldr	r3, [pc, #24]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 80107fe:	781a      	ldrb	r2, [r3, #0]
 8010800:	79fb      	ldrb	r3, [r7, #7]
 8010802:	4413      	add	r3, r2
 8010804:	b2db      	uxtb	r3, r3
 8010806:	f003 0303 	and.w	r3, r3, #3
 801080a:	b2da      	uxtb	r2, r3
 801080c:	4b02      	ldr	r3, [pc, #8]	; (8010818 <MAP_moveNextBlock_Sura+0x4cc>)
 801080e:	701a      	strb	r2, [r3, #0]
//	}
}
 8010810:	bf00      	nop
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200093d0 	.word	0x200093d0
 801081c:	200093c9 	.word	0x200093c9
 8010820:	200093d3 	.word	0x200093d3
 8010824:	200002f4 	.word	0x200002f4
 8010828:	20000f18 	.word	0x20000f18
 801082c:	200002b6 	.word	0x200002b6
 8010830:	2000001c 	.word	0x2000001c
 8010834:	00000000 	.word	0x00000000
 8010838:	200093cc 	.word	0x200093cc
 801083c:	3e6b851f 	.word	0x3e6b851f

08010840 <MAP_actGoal>:

void MAP_actGoal( void )
{	
 8010840:	b580      	push	{r7, lr}
 8010842:	af00      	add	r7, sp, #0
	MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8010844:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8010884 <MAP_actGoal+0x44>
 8010848:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801084c:	f7f9 fec8 	bl	800a5e0 <MOT_goBlock_FinSpeed>
	LL_mDelay(500);
 8010850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010854:	f002 fcf8 	bl	8013248 <LL_mDelay>
	MOT_turn(MOT_R180);										// 右180度旋回
 8010858:	2002      	movs	r0, #2
 801085a:	f7f9 ff65 	bl	800a728 <MOT_turn>
	LL_mDelay(500);
 801085e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010862:	f002 fcf1 	bl	8013248 <LL_mDelay>
	
//	MAP_SaveMapData();						// 迷路情報のバックアップ
	log_flag_off();
 8010866:	f7f7 fea9 	bl	80085bc <log_flag_off>
	MAP_actGoalLED();
 801086a:	f000 f80f 	bl	801088c <MAP_actGoalLED>
	
	en_Head = (enMAP_HEAD_DIR)( (en_Head + 2) & (MAP_HEAD_DIR_MAX-1) );			//	進行方向更新
 801086e:	4b06      	ldr	r3, [pc, #24]	; (8010888 <MAP_actGoal+0x48>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	3302      	adds	r3, #2
 8010874:	b2db      	uxtb	r3, r3
 8010876:	f003 0303 	and.w	r3, r3, #3
 801087a:	b2da      	uxtb	r2, r3
 801087c:	4b02      	ldr	r3, [pc, #8]	; (8010888 <MAP_actGoal+0x48>)
 801087e:	701a      	strb	r2, [r3, #0]

}
 8010880:	bf00      	nop
 8010882:	bd80      	pop	{r7, pc}
 8010884:	00000000 	.word	0x00000000
 8010888:	200093d0 	.word	0x200093d0

0801088c <MAP_actGoalLED>:

void MAP_actGoalLED( void )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
	int i;
	for(i = 0;i<2;i++)
 8010892:	2300      	movs	r3, #0
 8010894:	607b      	str	r3, [r7, #4]
 8010896:	e020      	b.n	80108da <MAP_actGoalLED+0x4e>
	{
		SetLED(0x02);
 8010898:	2002      	movs	r0, #2
 801089a:	f7f1 fb95 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 801089e:	2064      	movs	r0, #100	; 0x64
 80108a0:	f002 fcd2 	bl	8013248 <LL_mDelay>
		SetLED(0x04);
 80108a4:	2004      	movs	r0, #4
 80108a6:	f7f1 fb8f 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80108aa:	2064      	movs	r0, #100	; 0x64
 80108ac:	f002 fccc 	bl	8013248 <LL_mDelay>
		SetLED(0x08);
 80108b0:	2008      	movs	r0, #8
 80108b2:	f7f1 fb89 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80108b6:	2064      	movs	r0, #100	; 0x64
 80108b8:	f002 fcc6 	bl	8013248 <LL_mDelay>
		SetLED(0x04);
 80108bc:	2004      	movs	r0, #4
 80108be:	f7f1 fb83 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80108c2:	2064      	movs	r0, #100	; 0x64
 80108c4:	f002 fcc0 	bl	8013248 <LL_mDelay>
		SetLED(0x02);
 80108c8:	2002      	movs	r0, #2
 80108ca:	f7f1 fb7d 	bl	8001fc8 <SetLED>
		LL_mDelay(100);
 80108ce:	2064      	movs	r0, #100	; 0x64
 80108d0:	f002 fcba 	bl	8013248 <LL_mDelay>
	for(i = 0;i<2;i++)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	3301      	adds	r3, #1
 80108d8:	607b      	str	r3, [r7, #4]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b01      	cmp	r3, #1
 80108de:	dddb      	ble.n	8010898 <MAP_actGoalLED+0xc>
	}
	LL_mDelay(100);
 80108e0:	2064      	movs	r0, #100	; 0x64
 80108e2:	f002 fcb1 	bl	8013248 <LL_mDelay>
	map_write();
 80108e6:	f7fe fc39 	bl	800f15c <map_write>
	SetLED(0x00);
 80108ea:	2000      	movs	r0, #0
 80108ec:	f7f1 fb6c 	bl	8001fc8 <SetLED>
}
 80108f0:	bf00      	nop
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <MAP_Goalsize>:

void MAP_Goalsize(int size)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
	GOAL_SIZE= size;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	b2da      	uxtb	r2, r3
 8010904:	4b13      	ldr	r3, [pc, #76]	; (8010954 <MAP_Goalsize+0x5c>)
 8010906:	701a      	strb	r2, [r3, #0]
	if (size == 4) {
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b04      	cmp	r3, #4
 801090c:	d10c      	bne.n	8010928 <MAP_Goalsize+0x30>
		uc_max_x = uc_max_x + 1;
 801090e:	4b12      	ldr	r3, [pc, #72]	; (8010958 <MAP_Goalsize+0x60>)
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	3301      	adds	r3, #1
 8010914:	b2da      	uxtb	r2, r3
 8010916:	4b10      	ldr	r3, [pc, #64]	; (8010958 <MAP_Goalsize+0x60>)
 8010918:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 1;
 801091a:	4b10      	ldr	r3, [pc, #64]	; (801095c <MAP_Goalsize+0x64>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	3301      	adds	r3, #1
 8010920:	b2da      	uxtb	r2, r3
 8010922:	4b0e      	ldr	r3, [pc, #56]	; (801095c <MAP_Goalsize+0x64>)
 8010924:	701a      	strb	r2, [r3, #0]
	}
	else if (size == 9) {
		uc_max_x = uc_max_x + 2;
		uc_max_y = uc_max_y + 2;
	}
}
 8010926:	e00e      	b.n	8010946 <MAP_Goalsize+0x4e>
	else if (size == 9) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b09      	cmp	r3, #9
 801092c:	d10b      	bne.n	8010946 <MAP_Goalsize+0x4e>
		uc_max_x = uc_max_x + 2;
 801092e:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <MAP_Goalsize+0x60>)
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	3302      	adds	r3, #2
 8010934:	b2da      	uxtb	r2, r3
 8010936:	4b08      	ldr	r3, [pc, #32]	; (8010958 <MAP_Goalsize+0x60>)
 8010938:	701a      	strb	r2, [r3, #0]
		uc_max_y = uc_max_y + 2;
 801093a:	4b08      	ldr	r3, [pc, #32]	; (801095c <MAP_Goalsize+0x64>)
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	3302      	adds	r3, #2
 8010940:	b2da      	uxtb	r2, r3
 8010942:	4b06      	ldr	r3, [pc, #24]	; (801095c <MAP_Goalsize+0x64>)
 8010944:	701a      	strb	r2, [r3, #0]
}
 8010946:	bf00      	nop
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	200093d2 	.word	0x200093d2
 8010958:	2000001a 	.word	0x2000001a
 801095c:	2000001b 	.word	0x2000001b

08010960 <MAP_makeReturnContourMap>:

void  MAP_makeReturnContourMap(uint8_t uc_staX,uint8_t uc_staY) 
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b0cc      	sub	sp, #304	; 0x130
 8010964:	af00      	add	r7, sp, #0
 8010966:	4602      	mov	r2, r0
 8010968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801096c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010970:	701a      	strb	r2, [r3, #0]
 8010972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010976:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801097a:	460a      	mov	r2, r1
 801097c:	701a      	strb	r2, [r3, #0]
	uint16_t		uc_level;		// 等高線
	uint8_t		uc_wallData;	// 壁情報

	stPOSITION		st_pos;
	queue_t queue;
	queue_t* pQueue = &queue;
 801097e:	f107 0310 	add.w	r3, r7, #16
 8010982:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	initQueue(pQueue);
 8010986:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801098a:	f7f2 fb4f 	bl	800302c <initQueue>

	/* 等高線マップを初期化する */
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 801098e:	2300      	movs	r3, #0
 8010990:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8010994:	e014      	b.n	80109c0 <MAP_makeReturnContourMap+0x60>
		us_cmap[i / MAP_Y_SIZE][i & (MAP_X_SIZE - 1)] = MAP_SMAP_MAX_VAL - 1;
 8010996:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 801099a:	095b      	lsrs	r3, r3, #5
 801099c:	b29b      	uxth	r3, r3
 801099e:	461a      	mov	r2, r3
 80109a0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80109a4:	f003 031f 	and.w	r3, r3, #31
 80109a8:	49cd      	ldr	r1, [pc, #820]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 80109aa:	0152      	lsls	r2, r2, #5
 80109ac:	4413      	add	r3, r2
 80109ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80109b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < MAP_SMAP_MAX_VAL; i++) {
 80109b6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80109ba:	3301      	adds	r3, #1
 80109bc:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 80109c0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80109c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109c8:	d3e5      	bcc.n	8010996 <MAP_makeReturnContourMap+0x36>
	}
	/* 目標地点の等高線を0に設定 */
//	us_cmap[0][0] = 0;
	setStep(0, 0, 0);
 80109ca:	2200      	movs	r2, #0
 80109cc:	2100      	movs	r1, #0
 80109ce:	2000      	movs	r0, #0
 80109d0:	f7fe fec4 	bl	800f75c <setStep>
	st_pos.x = 0;
 80109d4:	2300      	movs	r3, #0
 80109d6:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	st_pos.y = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	st_pos.step = 0;
 80109e0:	2300      	movs	r3, #0
 80109e2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

	enqueue(pQueue,st_pos);
 80109e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80109ea:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80109ee:	f7f2 fb4d 	bl	800308c <enqueue>

	/* 等高線マップを作成 */
	while (pQueue->flag != EMPTY) {
 80109f2:	e167      	b.n	8010cc4 <MAP_makeReturnContourMap+0x364>
		const stPOSITION focus = dequeue(pQueue);
 80109f4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80109f8:	f7f2 fb84 	bl	8003104 <dequeue>
 80109fc:	4602      	mov	r2, r0
 80109fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010a06:	601a      	str	r2, [r3, #0]
//		q.pop();
		const uint16_t focus_step = focus.step;
 8010a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010a10:	885b      	ldrh	r3, [r3, #2]
 8010a12:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		x = focus.x;
 8010a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a1a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
		y = focus.y;
 8010a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010a2c:	785b      	ldrb	r3, [r3, #1]
 8010a2e:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		stPOSITION next = focus;
 8010a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010a3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010a3e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8010a42:	6812      	ldr	r2, [r2, #0]
 8010a44:	601a      	str	r2, [r3, #0]
		uc_wallData = g_sysMap[y][x];
 8010a46:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010a4a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010a4e:	49a5      	ldr	r1, [pc, #660]	; (8010ce4 <MAP_makeReturnContourMap+0x384>)
 8010a50:	0152      	lsls	r2, r2, #5
 8010a52:	440a      	add	r2, r1
 8010a54:	4413      	add	r3, r2
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

		if (((uc_wallData & 0x01) == 0x00) && (y != (MAP_Y_SIZE - 1))) {
 8010a5c:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8010a60:	f003 0301 	and.w	r3, r3, #1
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d146      	bne.n	8010af6 <MAP_makeReturnContourMap+0x196>
 8010a68:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010a6c:	2b1f      	cmp	r3, #31
 8010a6e:	d042      	beq.n	8010af6 <MAP_makeReturnContourMap+0x196>
			if (us_cmap[y + 1][x] > focus_step + 1) {
 8010a70:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010a74:	1c5a      	adds	r2, r3, #1
 8010a76:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010a7a:	4999      	ldr	r1, [pc, #612]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010a7c:	0152      	lsls	r2, r2, #5
 8010a7e:	4413      	add	r3, r2
 8010a80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a84:	461a      	mov	r2, r3
 8010a86:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	dd32      	ble.n	8010af6 <MAP_makeReturnContourMap+0x196>
				next.step = focus_step + 1;
 8010a90:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010a94:	3301      	adds	r3, #1
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010a9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010aa0:	805a      	strh	r2, [r3, #2]
				us_cmap[y + 1][x] = focus_step + 1;
 8010aa2:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010aa6:	1c5a      	adds	r2, r3, #1
 8010aa8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010aac:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8010ab0:	3101      	adds	r1, #1
 8010ab2:	b288      	uxth	r0, r1
 8010ab4:	498a      	ldr	r1, [pc, #552]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010ab6:	0152      	lsls	r2, r2, #5
 8010ab8:	4413      	add	r3, r2
 8010aba:	4602      	mov	r2, r0
 8010abc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8010ac0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010aca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010ace:	701a      	strb	r2, [r3, #0]
				next.y = y + 1;
 8010ad0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010ade:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010ae2:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue,next);
 8010ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010ae8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010aec:	6819      	ldr	r1, [r3, #0]
 8010aee:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010af2:	f7f2 facb 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x02) == 0x00) && (x != (MAP_X_SIZE - 1))) {
 8010af6:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8010afa:	f003 0302 	and.w	r3, r3, #2
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d146      	bne.n	8010b90 <MAP_makeReturnContourMap+0x230>
 8010b02:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010b06:	2b1f      	cmp	r3, #31
 8010b08:	d042      	beq.n	8010b90 <MAP_makeReturnContourMap+0x230>
			if (us_cmap[y][x + 1] > focus_step + 1) {
 8010b0a:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010b0e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010b12:	3301      	adds	r3, #1
 8010b14:	4972      	ldr	r1, [pc, #456]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010b16:	0152      	lsls	r2, r2, #5
 8010b18:	4413      	add	r3, r2
 8010b1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b1e:	461a      	mov	r2, r3
 8010b20:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010b24:	3301      	adds	r3, #1
 8010b26:	429a      	cmp	r2, r3
 8010b28:	dd32      	ble.n	8010b90 <MAP_makeReturnContourMap+0x230>
				next.step = focus_step + 1;
 8010b2a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010b2e:	3301      	adds	r3, #1
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010b36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010b3a:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x + 1] = focus_step + 1;
 8010b3c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010b40:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010b44:	3301      	adds	r3, #1
 8010b46:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8010b4a:	3101      	adds	r1, #1
 8010b4c:	b288      	uxth	r0, r1
 8010b4e:	4964      	ldr	r1, [pc, #400]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010b50:	0152      	lsls	r2, r2, #5
 8010b52:	4413      	add	r3, r2
 8010b54:	4602      	mov	r2, r0
 8010b56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x + 1;
 8010b5a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	3301      	adds	r3, #1
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010b68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010b6c:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8010b6e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010b78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010b7c:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8010b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010b86:	6819      	ldr	r1, [r3, #0]
 8010b88:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010b8c:	f7f2 fa7e 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x04) == 0x00) && (y != 0)) {
 8010b90:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8010b94:	f003 0304 	and.w	r3, r3, #4
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d146      	bne.n	8010c2a <MAP_makeReturnContourMap+0x2ca>
 8010b9c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d042      	beq.n	8010c2a <MAP_makeReturnContourMap+0x2ca>
			if (us_cmap[y - 1][x] > focus_step + 1) {
 8010ba4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010ba8:	1e5a      	subs	r2, r3, #1
 8010baa:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010bae:	494c      	ldr	r1, [pc, #304]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010bb0:	0152      	lsls	r2, r2, #5
 8010bb2:	4413      	add	r3, r2
 8010bb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	dd32      	ble.n	8010c2a <MAP_makeReturnContourMap+0x2ca>
				next.step = focus_step + 1;
 8010bc4:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010bc8:	3301      	adds	r3, #1
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010bd0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010bd4:	805a      	strh	r2, [r3, #2]
				us_cmap[y - 1][x] = focus_step + 1;
 8010bd6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010bda:	1e5a      	subs	r2, r3, #1
 8010bdc:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010be0:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8010be4:	3101      	adds	r1, #1
 8010be6:	b288      	uxth	r0, r1
 8010be8:	493d      	ldr	r1, [pc, #244]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010bea:	0152      	lsls	r2, r2, #5
 8010bec:	4413      	add	r3, r2
 8010bee:	4602      	mov	r2, r0
 8010bf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x;
 8010bf4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010bfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c02:	701a      	strb	r2, [r3, #0]
				next.y = y - 1;
 8010c04:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c16:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8010c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c20:	6819      	ldr	r1, [r3, #0]
 8010c22:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010c26:	f7f2 fa31 	bl	800308c <enqueue>
			}
		}
		if (((uc_wallData & 0x08) == 0x00) && (x != 0)) {
 8010c2a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8010c2e:	f003 0308 	and.w	r3, r3, #8
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d146      	bne.n	8010cc4 <MAP_makeReturnContourMap+0x364>
 8010c36:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d042      	beq.n	8010cc4 <MAP_makeReturnContourMap+0x364>
			if (us_cmap[y][x - 1] > focus_step + 1) {
 8010c3e:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010c42:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010c46:	3b01      	subs	r3, #1
 8010c48:	4925      	ldr	r1, [pc, #148]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010c4a:	0152      	lsls	r2, r2, #5
 8010c4c:	4413      	add	r3, r2
 8010c4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c52:	461a      	mov	r2, r3
 8010c54:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010c58:	3301      	adds	r3, #1
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	dd32      	ble.n	8010cc4 <MAP_makeReturnContourMap+0x364>
				next.step = focus_step + 1;
 8010c5e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8010c62:	3301      	adds	r3, #1
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010c6e:	805a      	strh	r2, [r3, #2]
				us_cmap[y][x - 1] = focus_step + 1;
 8010c70:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010c74:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8010c7e:	3101      	adds	r1, #1
 8010c80:	b288      	uxth	r0, r1
 8010c82:	4917      	ldr	r1, [pc, #92]	; (8010ce0 <MAP_makeReturnContourMap+0x380>)
 8010c84:	0152      	lsls	r2, r2, #5
 8010c86:	4413      	add	r3, r2
 8010c88:	4602      	mov	r2, r0
 8010c8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				next.x = x - 1;
 8010c8e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	3b01      	subs	r3, #1
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010c9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010ca0:	701a      	strb	r2, [r3, #0]
				next.y = y;
 8010ca2:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010cb0:	705a      	strb	r2, [r3, #1]
				enqueue(pQueue, next);
 8010cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010cb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8010cba:	6819      	ldr	r1, [r3, #0]
 8010cbc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8010cc0:	f7f2 f9e4 	bl	800308c <enqueue>
	while (pQueue->flag != EMPTY) {
 8010cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010cc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f47f ae91 	bne.w	80109f4 <MAP_makeReturnContourMap+0x94>
			}
		}

	}

}
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
 8010cd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	20000718 	.word	0x20000718
 8010ce4:	200002f4 	.word	0x200002f4

08010ce8 <MAP_KnownAcc>:

bool MAP_KnownAcc(void) {
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0

	bool	bl_acc = FALSE;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	71fb      	strb	r3, [r7, #7]
	switch (en_Head) {
 8010cf2:	4b33      	ldr	r3, [pc, #204]	; (8010dc0 <MAP_KnownAcc+0xd8>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b03      	cmp	r3, #3
 8010cf8:	d852      	bhi.n	8010da0 <MAP_KnownAcc+0xb8>
 8010cfa:	a201      	add	r2, pc, #4	; (adr r2, 8010d00 <MAP_KnownAcc+0x18>)
 8010cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d00:	08010d11 	.word	0x08010d11
 8010d04:	08010d35 	.word	0x08010d35
 8010d08:	08010d59 	.word	0x08010d59
 8010d0c:	08010d7d 	.word	0x08010d7d
	case NORTH:
		if ((g_sysMap[my + 1][mx] & 0xf1) == 0xf0) {
 8010d10:	4b2c      	ldr	r3, [pc, #176]	; (8010dc4 <MAP_KnownAcc+0xdc>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	3301      	adds	r3, #1
 8010d16:	4a2c      	ldr	r2, [pc, #176]	; (8010dc8 <MAP_KnownAcc+0xe0>)
 8010d18:	7812      	ldrb	r2, [r2, #0]
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	4a2b      	ldr	r2, [pc, #172]	; (8010dcc <MAP_KnownAcc+0xe4>)
 8010d1e:	015b      	lsls	r3, r3, #5
 8010d20:	4413      	add	r3, r2
 8010d22:	440b      	add	r3, r1
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 8010d2a:	2bf0      	cmp	r3, #240	; 0xf0
 8010d2c:	d13a      	bne.n	8010da4 <MAP_KnownAcc+0xbc>
			bl_acc = TRUE;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	71fb      	strb	r3, [r7, #7]
		}

		break;
 8010d32:	e037      	b.n	8010da4 <MAP_KnownAcc+0xbc>

	case EAST:
		if ((g_sysMap[my][mx + 1] & 0xf2) == 0xf0) {
 8010d34:	4b23      	ldr	r3, [pc, #140]	; (8010dc4 <MAP_KnownAcc+0xdc>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	461a      	mov	r2, r3
 8010d3a:	4b23      	ldr	r3, [pc, #140]	; (8010dc8 <MAP_KnownAcc+0xe0>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	4922      	ldr	r1, [pc, #136]	; (8010dcc <MAP_KnownAcc+0xe4>)
 8010d42:	0152      	lsls	r2, r2, #5
 8010d44:	440a      	add	r2, r1
 8010d46:	4413      	add	r3, r2
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010d4e:	2bf0      	cmp	r3, #240	; 0xf0
 8010d50:	d12a      	bne.n	8010da8 <MAP_KnownAcc+0xc0>
			bl_acc = TRUE;
 8010d52:	2301      	movs	r3, #1
 8010d54:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8010d56:	e027      	b.n	8010da8 <MAP_KnownAcc+0xc0>

	case SOUTH:
		if ((g_sysMap[my - 1][mx] & 0xf4) == 0xf0) {
 8010d58:	4b1a      	ldr	r3, [pc, #104]	; (8010dc4 <MAP_KnownAcc+0xdc>)
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	4a1a      	ldr	r2, [pc, #104]	; (8010dc8 <MAP_KnownAcc+0xe0>)
 8010d60:	7812      	ldrb	r2, [r2, #0]
 8010d62:	4611      	mov	r1, r2
 8010d64:	4a19      	ldr	r2, [pc, #100]	; (8010dcc <MAP_KnownAcc+0xe4>)
 8010d66:	015b      	lsls	r3, r3, #5
 8010d68:	4413      	add	r3, r2
 8010d6a:	440b      	add	r3, r1
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8010d72:	2bf0      	cmp	r3, #240	; 0xf0
 8010d74:	d11a      	bne.n	8010dac <MAP_KnownAcc+0xc4>
			bl_acc = TRUE;
 8010d76:	2301      	movs	r3, #1
 8010d78:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8010d7a:	e017      	b.n	8010dac <MAP_KnownAcc+0xc4>

	case WEST:
		if ((g_sysMap[my][mx - 1] & 0xf8) == 0xf0) {
 8010d7c:	4b11      	ldr	r3, [pc, #68]	; (8010dc4 <MAP_KnownAcc+0xdc>)
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b11      	ldr	r3, [pc, #68]	; (8010dc8 <MAP_KnownAcc+0xe0>)
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	4910      	ldr	r1, [pc, #64]	; (8010dcc <MAP_KnownAcc+0xe4>)
 8010d8a:	0152      	lsls	r2, r2, #5
 8010d8c:	440a      	add	r2, r1
 8010d8e:	4413      	add	r3, r2
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8010d96:	2bf0      	cmp	r3, #240	; 0xf0
 8010d98:	d10a      	bne.n	8010db0 <MAP_KnownAcc+0xc8>
			bl_acc = TRUE;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8010d9e:	e007      	b.n	8010db0 <MAP_KnownAcc+0xc8>

	default:
		break;
 8010da0:	bf00      	nop
 8010da2:	e006      	b.n	8010db2 <MAP_KnownAcc+0xca>
		break;
 8010da4:	bf00      	nop
 8010da6:	e004      	b.n	8010db2 <MAP_KnownAcc+0xca>
		break;
 8010da8:	bf00      	nop
 8010daa:	e002      	b.n	8010db2 <MAP_KnownAcc+0xca>
		break;
 8010dac:	bf00      	nop
 8010dae:	e000      	b.n	8010db2 <MAP_KnownAcc+0xca>
		break;
 8010db0:	bf00      	nop
	}
	return	bl_acc;
 8010db2:	79fb      	ldrb	r3, [r7, #7]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	370c      	adds	r7, #12
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr
 8010dc0:	200093d0 	.word	0x200093d0
 8010dc4:	200093c9 	.word	0x200093c9
 8010dc8:	200093d3 	.word	0x200093d3
 8010dcc:	200002f4 	.word	0x200002f4

08010dd0 <MAP_moveNextBlock_acc>:

void MAP_moveNextBlock_acc(enMAP_HEAD_DIR en_head, bool* p_type)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	6039      	str	r1, [r7, #0]
 8010dda:	71fb      	strb	r3, [r7, #7]
	*p_type = FALSE;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	2200      	movs	r2, #0
 8010de0:	701a      	strb	r2, [r3, #0]
	f_MoveBackDist = 0;
 8010de2:	4baa      	ldr	r3, [pc, #680]	; (801108c <MAP_moveNextBlock_acc+0x2bc>)
 8010de4:	f04f 0200 	mov.w	r2, #0
 8010de8:	601a      	str	r2, [r3, #0]

	/* 動作 */
	switch (en_head) {
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	2b03      	cmp	r3, #3
 8010dee:	f200 82e2 	bhi.w	80113b6 <MAP_moveNextBlock_acc+0x5e6>
 8010df2:	a201      	add	r2, pc, #4	; (adr r2, 8010df8 <MAP_moveNextBlock_acc+0x28>)
 8010df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df8:	08010e09 	.word	0x08010e09
 8010dfc:	08010e85 	.word	0x08010e85
 8010e00:	080112f5 	.word	0x080112f5
 8010e04:	080110bd 	.word	0x080110bd

		/* そのまま前進 */
	case NORTH:
//		*p_type = FALSE;
//		LED = LED6;
		if (MAP_KnownAcc() == FALSE) {					// 次に進む区画が未探索のとき
 8010e08:	f7ff ff6e 	bl	8010ce8 <MAP_KnownAcc>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	f083 0301 	eor.w	r3, r3, #1
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d02b      	beq.n	8010e70 <MAP_moveNextBlock_acc+0xa0>
			if (st_known.bl_Known == TRUE){
 8010e18:	4b9d      	ldr	r3, [pc, #628]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e1a:	785b      	ldrb	r3, [r3, #1]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d01c      	beq.n	8010e5a <MAP_moveNextBlock_acc+0x8a>
				if (st_known.uc_StrCnt < 2) {
 8010e20:	4b9b      	ldr	r3, [pc, #620]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d804      	bhi.n	8010e32 <MAP_moveNextBlock_acc+0x62>
					MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8010e28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010e2c:	f7f9 fbfc 	bl	800a628 <MOT_goBlock_Const>
 8010e30:	e013      	b.n	8010e5a <MAP_moveNextBlock_acc+0x8a>
				}
				else {
					MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8010e32:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010e36:	f7f9 ff87 	bl	800ad48 <MOT_setTrgtSpeed>
					MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 8010e3a:	4b95      	ldr	r3, [pc, #596]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	ee07 3a90 	vmov	s15, r3
 8010e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e46:	eddf 0a93 	vldr	s1, [pc, #588]	; 8011094 <MAP_moveNextBlock_acc+0x2c4>
 8010e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8010e4e:	f7f9 fbc7 	bl	800a5e0 <MOT_goBlock_FinSpeed>
					MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8010e52:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8011094 <MAP_moveNextBlock_acc+0x2c4>
 8010e56:	f7f9 ff77 	bl	800ad48 <MOT_setTrgtSpeed>
				}
			}
			MOT_goBlock_Const(1);	////////////////////
 8010e5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010e5e:	f7f9 fbe3 	bl	800a628 <MOT_goBlock_Const>
			st_known.uc_StrCnt = 0;
 8010e62:	4b8b      	ldr	r3, [pc, #556]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 8010e68:	4b89      	ldr	r3, [pc, #548]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	705a      	strb	r2, [r3, #1]

			st_known.uc_StrCnt++;			// 移動区画の加算
			st_known.bl_Known = TRUE;
		}

		break;
 8010e6e:	e2a3      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
			st_known.uc_StrCnt++;			// 移動区画の加算
 8010e70:	4b87      	ldr	r3, [pc, #540]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	3301      	adds	r3, #1
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	4b85      	ldr	r3, [pc, #532]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e7a:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = TRUE;
 8010e7c:	4b84      	ldr	r3, [pc, #528]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e7e:	2201      	movs	r2, #1
 8010e80:	705a      	strb	r2, [r3, #1]
		break;
 8010e82:	e299      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>

		/* 右に旋回する */
	case EAST:
//		LED = LED8;
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 8010e84:	4b82      	ldr	r3, [pc, #520]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e86:	785b      	ldrb	r3, [r3, #1]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d022      	beq.n	8010ed2 <MAP_moveNextBlock_acc+0x102>
			if (st_known.uc_StrCnt < 2) {
 8010e8c:	4b80      	ldr	r3, [pc, #512]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d804      	bhi.n	8010e9e <MAP_moveNextBlock_acc+0xce>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8010e94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010e98:	f7f9 fbc6 	bl	800a628 <MOT_goBlock_Const>
 8010e9c:	e013      	b.n	8010ec6 <MAP_moveNextBlock_acc+0xf6>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 8010e9e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010ea2:	f7f9 ff51 	bl	800ad48 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);				// n区画前進
 8010ea6:	4b7a      	ldr	r3, [pc, #488]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	ee07 3a90 	vmov	s15, r3
 8010eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb2:	eddf 0a78 	vldr	s1, [pc, #480]	; 8011094 <MAP_moveNextBlock_acc+0x2c4>
 8010eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8010eba:	f7f9 fb91 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 8010ebe:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8011094 <MAP_moveNextBlock_acc+0x2c4>
 8010ec2:	f7f9 ff41 	bl	800ad48 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;		/////////////////////////////////////////
 8010ec6:	4b72      	ldr	r3, [pc, #456]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 8010ecc:	4b70      	ldr	r3, [pc, #448]	; (8011090 <MAP_moveNextBlock_acc+0x2c0>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	705a      	strb	r2, [r3, #1]
		}
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8010ed2:	4b71      	ldr	r3, [pc, #452]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d10e      	bne.n	8010ef8 <MAP_moveNextBlock_acc+0x128>
 8010eda:	4b70      	ldr	r3, [pc, #448]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	4b6f      	ldr	r3, [pc, #444]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	4a6f      	ldr	r2, [pc, #444]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010ee8:	0143      	lsls	r3, r0, #5
 8010eea:	4413      	add	r3, r2
 8010eec:	440b      	add	r3, r1
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	f003 0302 	and.w	r3, r3, #2
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d138      	bne.n	8010f6a <MAP_moveNextBlock_acc+0x19a>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8010ef8:	4b67      	ldr	r3, [pc, #412]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010efa:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d10e      	bne.n	8010f1e <MAP_moveNextBlock_acc+0x14e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8010f00:	4b66      	ldr	r3, [pc, #408]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	4618      	mov	r0, r3
 8010f06:	4b66      	ldr	r3, [pc, #408]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	4a65      	ldr	r2, [pc, #404]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010f0e:	0143      	lsls	r3, r0, #5
 8010f10:	4413      	add	r3, r2
 8010f12:	440b      	add	r3, r1
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	f003 0304 	and.w	r3, r3, #4
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d125      	bne.n	8010f6a <MAP_moveNextBlock_acc+0x19a>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8010f1e:	4b5e      	ldr	r3, [pc, #376]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d10e      	bne.n	8010f44 <MAP_moveNextBlock_acc+0x174>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8010f26:	4b5d      	ldr	r3, [pc, #372]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	4b5c      	ldr	r3, [pc, #368]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	4619      	mov	r1, r3
 8010f32:	4a5c      	ldr	r2, [pc, #368]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010f34:	0143      	lsls	r3, r0, #5
 8010f36:	4413      	add	r3, r2
 8010f38:	440b      	add	r3, r1
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	f003 0308 	and.w	r3, r3, #8
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d112      	bne.n	8010f6a <MAP_moveNextBlock_acc+0x19a>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8010f44:	4b54      	ldr	r3, [pc, #336]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8010f48:	2b03      	cmp	r3, #3
 8010f4a:	d112      	bne.n	8010f72 <MAP_moveNextBlock_acc+0x1a2>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8010f4c:	4b53      	ldr	r3, [pc, #332]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	4618      	mov	r0, r3
 8010f52:	4b53      	ldr	r3, [pc, #332]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	4619      	mov	r1, r3
 8010f58:	4a52      	ldr	r2, [pc, #328]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010f5a:	0143      	lsls	r3, r0, #5
 8010f5c:	4413      	add	r3, r2
 8010f5e:	440b      	add	r3, r1
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d003      	beq.n	8010f72 <MAP_moveNextBlock_acc+0x1a2>
			){
			uc_dist_control = 0.02;
 8010f6a:	4b4f      	ldr	r3, [pc, #316]	; (80110a8 <MAP_moveNextBlock_acc+0x2d8>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	701a      	strb	r2, [r3, #0]
 8010f70:	e002      	b.n	8010f78 <MAP_moveNextBlock_acc+0x1a8>
			}
		else{
			uc_dist_control = 0;
 8010f72:	4b4d      	ldr	r3, [pc, #308]	; (80110a8 <MAP_moveNextBlock_acc+0x2d8>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	701a      	strb	r2, [r3, #0]
		}
		if( uc_SlaCnt < SLA_count ){
 8010f78:	4b4c      	ldr	r3, [pc, #304]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 8010f7a:	781a      	ldrb	r2, [r3, #0]
 8010f7c:	4b4c      	ldr	r3, [pc, #304]	; (80110b0 <MAP_moveNextBlock_acc+0x2e0>)
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d20e      	bcs.n	8010fa2 <MAP_moveNextBlock_acc+0x1d2>
				MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 8010f84:	2000      	movs	r0, #0
 8010f86:	f7f2 f83d 	bl	8003004 <PARAM_getSra>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	2000      	movs	r0, #0
 8010f90:	f7f9 ff52 	bl	800ae38 <MOT_goSla>
				uc_SlaCnt++;
 8010f94:	4b45      	ldr	r3, [pc, #276]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	4b43      	ldr	r3, [pc, #268]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 8010f9e:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
					uc_SlaCnt++;
				}
			}
		break;
 8010fa0:	e20a      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
				f_MoveBackDist = 0;
 8010fa2:	4b3a      	ldr	r3, [pc, #232]	; (801108c <MAP_moveNextBlock_acc+0x2bc>)
 8010fa4:	f04f 0200 	mov.w	r2, #0
 8010fa8:	601a      	str	r2, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8010faa:	4b3b      	ldr	r3, [pc, #236]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10e      	bne.n	8010fd0 <MAP_moveNextBlock_acc+0x200>
 8010fb2:	4b3a      	ldr	r3, [pc, #232]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	4b39      	ldr	r3, [pc, #228]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4a39      	ldr	r2, [pc, #228]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010fc0:	0143      	lsls	r3, r0, #5
 8010fc2:	4413      	add	r3, r2
 8010fc4:	440b      	add	r3, r1
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0308 	and.w	r3, r3, #8
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d138      	bne.n	8011042 <MAP_moveNextBlock_acc+0x272>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8010fd0:	4b31      	ldr	r3, [pc, #196]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d10e      	bne.n	8010ff6 <MAP_moveNextBlock_acc+0x226>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8010fd8:	4b30      	ldr	r3, [pc, #192]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	4b30      	ldr	r3, [pc, #192]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	4a2f      	ldr	r2, [pc, #188]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8010fe6:	0143      	lsls	r3, r0, #5
 8010fe8:	4413      	add	r3, r2
 8010fea:	440b      	add	r3, r1
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	f003 0301 	and.w	r3, r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d125      	bne.n	8011042 <MAP_moveNextBlock_acc+0x272>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8010ff6:	4b28      	ldr	r3, [pc, #160]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 8010ff8:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d10e      	bne.n	801101c <MAP_moveNextBlock_acc+0x24c>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8010ffe:	4b27      	ldr	r3, [pc, #156]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	4618      	mov	r0, r3
 8011004:	4b26      	ldr	r3, [pc, #152]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	4619      	mov	r1, r3
 801100a:	4a26      	ldr	r2, [pc, #152]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 801100c:	0143      	lsls	r3, r0, #5
 801100e:	4413      	add	r3, r2
 8011010:	440b      	add	r3, r1
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	f003 0302 	and.w	r3, r3, #2
 8011018:	2b00      	cmp	r3, #0
 801101a:	d112      	bne.n	8011042 <MAP_moveNextBlock_acc+0x272>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 801101c:	4b1e      	ldr	r3, [pc, #120]	; (8011098 <MAP_moveNextBlock_acc+0x2c8>)
 801101e:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011020:	2b03      	cmp	r3, #3
 8011022:	d123      	bne.n	801106c <MAP_moveNextBlock_acc+0x29c>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8011024:	4b1d      	ldr	r3, [pc, #116]	; (801109c <MAP_moveNextBlock_acc+0x2cc>)
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	4618      	mov	r0, r3
 801102a:	4b1d      	ldr	r3, [pc, #116]	; (80110a0 <MAP_moveNextBlock_acc+0x2d0>)
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	4619      	mov	r1, r3
 8011030:	4a1c      	ldr	r2, [pc, #112]	; (80110a4 <MAP_moveNextBlock_acc+0x2d4>)
 8011032:	0143      	lsls	r3, r0, #5
 8011034:	4413      	add	r3, r2
 8011036:	440b      	add	r3, r1
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f003 0304 	and.w	r3, r3, #4
 801103e:	2b00      	cmp	r3, #0
 8011040:	d014      	beq.n	801106c <MAP_moveNextBlock_acc+0x29c>
					MOT_goBlock_FinSpeed( 0.5, 0 );			// 半区画前進
 8011042:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80110b4 <MAP_moveNextBlock_acc+0x2e4>
 8011046:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801104a:	f7f9 fac9 	bl	800a5e0 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_R90);						// 右90度旋回
 801104e:	2000      	movs	r0, #0
 8011050:	f7f9 fb6a 	bl	800a728 <MOT_turn>
					uc_SlaCnt = 0;
 8011054:	4b15      	ldr	r3, [pc, #84]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 8011056:	2200      	movs	r2, #0
 8011058:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 801105a:	f7f9 fe9b 	bl	800ad94 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 801105e:	4b0b      	ldr	r3, [pc, #44]	; (801108c <MAP_moveNextBlock_acc+0x2bc>)
 8011060:	4a15      	ldr	r2, [pc, #84]	; (80110b8 <MAP_moveNextBlock_acc+0x2e8>)
 8011062:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	2201      	movs	r2, #1
 8011068:	701a      	strb	r2, [r3, #0]
		break;
 801106a:	e1a5      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
					MOT_goSla( MOT_R90S, PARAM_getSra( SLA_90 ) );	// 右スラローム
 801106c:	2000      	movs	r0, #0
 801106e:	f7f1 ffc9 	bl	8003004 <PARAM_getSra>
 8011072:	4603      	mov	r3, r0
 8011074:	4619      	mov	r1, r3
 8011076:	2000      	movs	r0, #0
 8011078:	f7f9 fede 	bl	800ae38 <MOT_goSla>
					uc_SlaCnt++;
 801107c:	4b0b      	ldr	r3, [pc, #44]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	3301      	adds	r3, #1
 8011082:	b2da      	uxtb	r2, r3
 8011084:	4b09      	ldr	r3, [pc, #36]	; (80110ac <MAP_moveNextBlock_acc+0x2dc>)
 8011086:	701a      	strb	r2, [r3, #0]
		break;
 8011088:	e196      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
 801108a:	bf00      	nop
 801108c:	200093cc 	.word	0x200093cc
 8011090:	200002b8 	.word	0x200002b8
 8011094:	3e99999a 	.word	0x3e99999a
 8011098:	200093d0 	.word	0x200093d0
 801109c:	200093c9 	.word	0x200093c9
 80110a0:	200093d3 	.word	0x200093d3
 80110a4:	200002f4 	.word	0x200002f4
 80110a8:	20000f18 	.word	0x20000f18
 80110ac:	200002b6 	.word	0x200002b6
 80110b0:	2000001c 	.word	0x2000001c
 80110b4:	00000000 	.word	0x00000000
 80110b8:	3e6b851f 	.word	0x3e6b851f

		/* 左に旋回する */
	case WEST:
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80110bc:	4b81      	ldr	r3, [pc, #516]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10e      	bne.n	80110e2 <MAP_moveNextBlock_acc+0x312>
 80110c4:	4b80      	ldr	r3, [pc, #512]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	4618      	mov	r0, r3
 80110ca:	4b80      	ldr	r3, [pc, #512]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	4619      	mov	r1, r3
 80110d0:	4a7f      	ldr	r2, [pc, #508]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 80110d2:	0143      	lsls	r3, r0, #5
 80110d4:	4413      	add	r3, r2
 80110d6:	440b      	add	r3, r1
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 0308 	and.w	r3, r3, #8
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d138      	bne.n	8011154 <MAP_moveNextBlock_acc+0x384>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80110e2:	4b78      	ldr	r3, [pc, #480]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 80110e4:	781b      	ldrb	r3, [r3, #0]
		if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 北を向いていて西に壁がある
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d10e      	bne.n	8011108 <MAP_moveNextBlock_acc+0x338>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 80110ea:	4b77      	ldr	r3, [pc, #476]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	4b76      	ldr	r3, [pc, #472]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	4619      	mov	r1, r3
 80110f6:	4a76      	ldr	r2, [pc, #472]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 80110f8:	0143      	lsls	r3, r0, #5
 80110fa:	4413      	add	r3, r2
 80110fc:	440b      	add	r3, r1
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d125      	bne.n	8011154 <MAP_moveNextBlock_acc+0x384>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011108:	4b6e      	ldr	r3, [pc, #440]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 801110a:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) )  ||		// 東を向いていて北に壁がある
 801110c:	2b02      	cmp	r3, #2
 801110e:	d10e      	bne.n	801112e <MAP_moveNextBlock_acc+0x35e>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011110:	4b6d      	ldr	r3, [pc, #436]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	4618      	mov	r0, r3
 8011116:	4b6d      	ldr	r3, [pc, #436]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	4619      	mov	r1, r3
 801111c:	4a6c      	ldr	r2, [pc, #432]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 801111e:	0143      	lsls	r3, r0, #5
 8011120:	4413      	add	r3, r2
 8011122:	440b      	add	r3, r1
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	f003 0302 	and.w	r3, r3, #2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d112      	bne.n	8011154 <MAP_moveNextBlock_acc+0x384>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 801112e:	4b65      	ldr	r3, [pc, #404]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 8011130:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 南を向いていて東に壁がある
 8011132:	2b03      	cmp	r3, #3
 8011134:	d112      	bne.n	801115c <MAP_moveNextBlock_acc+0x38c>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) ) 			// 西を向いていて南に壁がある
 8011136:	4b64      	ldr	r3, [pc, #400]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	4618      	mov	r0, r3
 801113c:	4b63      	ldr	r3, [pc, #396]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	4619      	mov	r1, r3
 8011142:	4a63      	ldr	r2, [pc, #396]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 8011144:	0143      	lsls	r3, r0, #5
 8011146:	4413      	add	r3, r2
 8011148:	440b      	add	r3, r1
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f003 0304 	and.w	r3, r3, #4
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <MAP_moveNextBlock_acc+0x38c>
			){
			uc_dist_control = 0.02;
 8011154:	4b5f      	ldr	r3, [pc, #380]	; (80112d4 <MAP_moveNextBlock_acc+0x504>)
 8011156:	2200      	movs	r2, #0
 8011158:	701a      	strb	r2, [r3, #0]
 801115a:	e002      	b.n	8011162 <MAP_moveNextBlock_acc+0x392>
			}
		else{
			uc_dist_control = 0;
 801115c:	4b5d      	ldr	r3, [pc, #372]	; (80112d4 <MAP_moveNextBlock_acc+0x504>)
 801115e:	2200      	movs	r2, #0
 8011160:	701a      	strb	r2, [r3, #0]
		}
		if (st_known.bl_Known == TRUE) {		// 直線分を消化
 8011162:	4b5d      	ldr	r3, [pc, #372]	; (80112d8 <MAP_moveNextBlock_acc+0x508>)
 8011164:	785b      	ldrb	r3, [r3, #1]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d022      	beq.n	80111b0 <MAP_moveNextBlock_acc+0x3e0>
			if (st_known.uc_StrCnt < 2) {
 801116a:	4b5b      	ldr	r3, [pc, #364]	; (80112d8 <MAP_moveNextBlock_acc+0x508>)
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d804      	bhi.n	801117c <MAP_moveNextBlock_acc+0x3ac>
				MOT_goBlock_Const(1);					// 1区画の場合は等速のまま
 8011172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011176:	f7f9 fa57 	bl	800a628 <MOT_goBlock_Const>
 801117a:	e013      	b.n	80111a4 <MAP_moveNextBlock_acc+0x3d4>
			}
			else {
//				LED = LED_ALL_ON;
				MOT_setTrgtSpeed(MAP_KNOWN_ACC_SPEED);									// 既知区間加速するときの目標速度	
 801117c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011180:	f7f9 fde2 	bl	800ad48 <MOT_setTrgtSpeed>
				MOT_goBlock_FinSpeed((float)(st_known.uc_StrCnt), SEARCH_SPEED);		// n区画前進
 8011184:	4b54      	ldr	r3, [pc, #336]	; (80112d8 <MAP_moveNextBlock_acc+0x508>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	ee07 3a90 	vmov	s15, r3
 801118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011190:	eddf 0a52 	vldr	s1, [pc, #328]	; 80112dc <MAP_moveNextBlock_acc+0x50c>
 8011194:	eeb0 0a67 	vmov.f32	s0, s15
 8011198:	f7f9 fa22 	bl	800a5e0 <MOT_goBlock_FinSpeed>
				MOT_setTrgtSpeed(SEARCH_SPEED);										// 目標速度をデフォルト値に戻す
 801119c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80112dc <MAP_moveNextBlock_acc+0x50c>
 80111a0:	f7f9 fdd2 	bl	800ad48 <MOT_setTrgtSpeed>
//				LED = LED_ALL_OFF;
			}
			st_known.uc_StrCnt = 0;			//////////////////////////////////////
 80111a4:	4b4c      	ldr	r3, [pc, #304]	; (80112d8 <MAP_moveNextBlock_acc+0x508>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
			st_known.bl_Known = FALSE;
 80111aa:	4b4b      	ldr	r3, [pc, #300]	; (80112d8 <MAP_moveNextBlock_acc+0x508>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	705a      	strb	r2, [r3, #1]
		}

		if( uc_SlaCnt < SLA_count ){
 80111b0:	4b4b      	ldr	r3, [pc, #300]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 80111b2:	781a      	ldrb	r2, [r3, #0]
 80111b4:	4b4b      	ldr	r3, [pc, #300]	; (80112e4 <MAP_moveNextBlock_acc+0x514>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d20e      	bcs.n	80111da <MAP_moveNextBlock_acc+0x40a>
				MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80111bc:	2000      	movs	r0, #0
 80111be:	f7f1 ff21 	bl	8003004 <PARAM_getSra>
 80111c2:	4603      	mov	r3, r0
 80111c4:	4619      	mov	r1, r3
 80111c6:	2001      	movs	r0, #1
 80111c8:	f7f9 fe36 	bl	800ae38 <MOT_goSla>
				uc_SlaCnt++;
 80111cc:	4b44      	ldr	r3, [pc, #272]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	3301      	adds	r3, #1
 80111d2:	b2da      	uxtb	r2, r3
 80111d4:	4b42      	ldr	r3, [pc, #264]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 80111d6:	701a      	strb	r2, [r3, #0]
				else{
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
					uc_SlaCnt++;
				}
			}
		break;
 80111d8:	e0ee      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
				f_MoveBackDist = 0;
 80111da:	4b43      	ldr	r3, [pc, #268]	; (80112e8 <MAP_moveNextBlock_acc+0x518>)
 80111dc:	f04f 0200 	mov.w	r2, #0
 80111e0:	601a      	str	r2, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 80111e2:	4b38      	ldr	r3, [pc, #224]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10e      	bne.n	8011208 <MAP_moveNextBlock_acc+0x438>
 80111ea:	4b37      	ldr	r3, [pc, #220]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	4618      	mov	r0, r3
 80111f0:	4b36      	ldr	r3, [pc, #216]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	4619      	mov	r1, r3
 80111f6:	4a36      	ldr	r2, [pc, #216]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 80111f8:	0143      	lsls	r3, r0, #5
 80111fa:	4413      	add	r3, r2
 80111fc:	440b      	add	r3, r1
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f003 0302 	and.w	r3, r3, #2
 8011204:	2b00      	cmp	r3, #0
 8011206:	d138      	bne.n	801127a <MAP_moveNextBlock_acc+0x4aa>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011208:	4b2e      	ldr	r3, [pc, #184]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 801120a:	781b      	ldrb	r3, [r3, #0]
				if( ( ( en_Head == NORTH ) && ( ( g_sysMap[my][mx] & 0x02 ) != 0 ) )  ||		// 北を向いていて東に壁がある
 801120c:	2b01      	cmp	r3, #1
 801120e:	d10e      	bne.n	801122e <MAP_moveNextBlock_acc+0x45e>
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011210:	4b2d      	ldr	r3, [pc, #180]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	4618      	mov	r0, r3
 8011216:	4b2d      	ldr	r3, [pc, #180]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	4619      	mov	r1, r3
 801121c:	4a2c      	ldr	r2, [pc, #176]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 801121e:	0143      	lsls	r3, r0, #5
 8011220:	4413      	add	r3, r2
 8011222:	440b      	add	r3, r1
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	f003 0304 	and.w	r3, r3, #4
 801122a:	2b00      	cmp	r3, #0
 801122c:	d125      	bne.n	801127a <MAP_moveNextBlock_acc+0x4aa>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 801122e:	4b25      	ldr	r3, [pc, #148]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 8011230:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == EAST  ) && ( ( g_sysMap[my][mx] & 0x04 ) != 0 ) )  ||		// 東を向いていて南に壁がある
 8011232:	2b02      	cmp	r3, #2
 8011234:	d10e      	bne.n	8011254 <MAP_moveNextBlock_acc+0x484>
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8011236:	4b24      	ldr	r3, [pc, #144]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	4618      	mov	r0, r3
 801123c:	4b23      	ldr	r3, [pc, #140]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	4619      	mov	r1, r3
 8011242:	4a23      	ldr	r2, [pc, #140]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 8011244:	0143      	lsls	r3, r0, #5
 8011246:	4413      	add	r3, r2
 8011248:	440b      	add	r3, r1
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	f003 0308 	and.w	r3, r3, #8
 8011250:	2b00      	cmp	r3, #0
 8011252:	d112      	bne.n	801127a <MAP_moveNextBlock_acc+0x4aa>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 8011254:	4b1b      	ldr	r3, [pc, #108]	; (80112c4 <MAP_moveNextBlock_acc+0x4f4>)
 8011256:	781b      	ldrb	r3, [r3, #0]
					( ( en_Head == SOUTH ) && ( ( g_sysMap[my][mx] & 0x08 ) != 0 ) )  ||		// 南を向いていて西に壁がある
 8011258:	2b03      	cmp	r3, #3
 801125a:	d123      	bne.n	80112a4 <MAP_moveNextBlock_acc+0x4d4>
					( ( en_Head == WEST  ) && ( ( g_sysMap[my][mx] & 0x01 ) != 0 ) ) 			// 西を向いていて北に壁がある
 801125c:	4b1a      	ldr	r3, [pc, #104]	; (80112c8 <MAP_moveNextBlock_acc+0x4f8>)
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	4618      	mov	r0, r3
 8011262:	4b1a      	ldr	r3, [pc, #104]	; (80112cc <MAP_moveNextBlock_acc+0x4fc>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	4619      	mov	r1, r3
 8011268:	4a19      	ldr	r2, [pc, #100]	; (80112d0 <MAP_moveNextBlock_acc+0x500>)
 801126a:	0143      	lsls	r3, r0, #5
 801126c:	4413      	add	r3, r2
 801126e:	440b      	add	r3, r1
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	f003 0301 	and.w	r3, r3, #1
 8011276:	2b00      	cmp	r3, #0
 8011278:	d014      	beq.n	80112a4 <MAP_moveNextBlock_acc+0x4d4>
					MOT_goBlock_FinSpeed( 0.5, 0 );		// 半区画前進
 801127a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80112f0 <MAP_moveNextBlock_acc+0x520>
 801127e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011282:	f7f9 f9ad 	bl	800a5e0 <MOT_goBlock_FinSpeed>
					MOT_turn(MOT_L90);					// 右90度旋回
 8011286:	2001      	movs	r0, #1
 8011288:	f7f9 fa4e 	bl	800a728 <MOT_turn>
					uc_SlaCnt = 0;
 801128c:	4b14      	ldr	r3, [pc, #80]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 801128e:	2200      	movs	r2, #0
 8011290:	701a      	strb	r2, [r3, #0]
					MOT_goHitBackWall();					// バックする
 8011292:	f7f9 fd7f 	bl	800ad94 <MOT_goHitBackWall>
					f_MoveBackDist = MOVE_BACK_DIST;		// バックした分の移動距離[区画]を加算
 8011296:	4b14      	ldr	r3, [pc, #80]	; (80112e8 <MAP_moveNextBlock_acc+0x518>)
 8011298:	4a14      	ldr	r2, [pc, #80]	; (80112ec <MAP_moveNextBlock_acc+0x51c>)
 801129a:	601a      	str	r2, [r3, #0]
					*p_type = TRUE;							// 次は半区間（＋バック）分進める
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	2201      	movs	r2, #1
 80112a0:	701a      	strb	r2, [r3, #0]
		break;
 80112a2:	e089      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
					MOT_goSla( MOT_L90S, PARAM_getSra( SLA_90 ) );	// 左スラローム
 80112a4:	2000      	movs	r0, #0
 80112a6:	f7f1 fead 	bl	8003004 <PARAM_getSra>
 80112aa:	4603      	mov	r3, r0
 80112ac:	4619      	mov	r1, r3
 80112ae:	2001      	movs	r0, #1
 80112b0:	f7f9 fdc2 	bl	800ae38 <MOT_goSla>
					uc_SlaCnt++;
 80112b4:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	3301      	adds	r3, #1
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	4b08      	ldr	r3, [pc, #32]	; (80112e0 <MAP_moveNextBlock_acc+0x510>)
 80112be:	701a      	strb	r2, [r3, #0]
		break;
 80112c0:	e07a      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>
 80112c2:	bf00      	nop
 80112c4:	200093d0 	.word	0x200093d0
 80112c8:	200093c9 	.word	0x200093c9
 80112cc:	200093d3 	.word	0x200093d3
 80112d0:	200002f4 	.word	0x200002f4
 80112d4:	20000f18 	.word	0x20000f18
 80112d8:	200002b8 	.word	0x200002b8
 80112dc:	3e99999a 	.word	0x3e99999a
 80112e0:	200002b6 	.word	0x200002b6
 80112e4:	2000001c 	.word	0x2000001c
 80112e8:	200093cc 	.word	0x200093cc
 80112ec:	3e6b851f 	.word	0x3e6b851f
 80112f0:	00000000 	.word	0x00000000

		/* 反転して戻る */
	case SOUTH:
//		LED = LED_ALL_ON;
		MOT_goBlock_FinSpeed(0.5, 0);			// 半区画前進
 80112f4:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 80112f0 <MAP_moveNextBlock_acc+0x520>
 80112f8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80112fc:	f7f9 f970 	bl	800a5e0 <MOT_goBlock_FinSpeed>
		MOT_turn(MOT_R180);									// 右180度旋回
 8011300:	2002      	movs	r0, #2
 8011302:	f7f9 fa11 	bl	800a728 <MOT_turn>
		uc_SlaCnt = 0;
 8011306:	4b33      	ldr	r3, [pc, #204]	; (80113d4 <MAP_moveNextBlock_acc+0x604>)
 8011308:	2200      	movs	r2, #0
 801130a:	701a      	strb	r2, [r3, #0]

		/* 壁当て姿勢制御（後ろに壁があったらバック＋移動距離を加算する） */
		if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 801130c:	4b32      	ldr	r3, [pc, #200]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d10e      	bne.n	8011332 <MAP_moveNextBlock_acc+0x562>
 8011314:	4b31      	ldr	r3, [pc, #196]	; (80113dc <MAP_moveNextBlock_acc+0x60c>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	4618      	mov	r0, r3
 801131a:	4b31      	ldr	r3, [pc, #196]	; (80113e0 <MAP_moveNextBlock_acc+0x610>)
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	4619      	mov	r1, r3
 8011320:	4a30      	ldr	r2, [pc, #192]	; (80113e4 <MAP_moveNextBlock_acc+0x614>)
 8011322:	0143      	lsls	r3, r0, #5
 8011324:	4413      	add	r3, r2
 8011326:	440b      	add	r3, r1
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	f003 0301 	and.w	r3, r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	d138      	bne.n	80113a4 <MAP_moveNextBlock_acc+0x5d4>
			((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 8011332:	4b29      	ldr	r3, [pc, #164]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 8011334:	781b      	ldrb	r3, [r3, #0]
		if (((en_Head == NORTH) && ((g_sysMap[my][mx] & 0x01) != 0)) ||		// 北を向いていて北に壁がある
 8011336:	2b01      	cmp	r3, #1
 8011338:	d10e      	bne.n	8011358 <MAP_moveNextBlock_acc+0x588>
			((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801133a:	4b28      	ldr	r3, [pc, #160]	; (80113dc <MAP_moveNextBlock_acc+0x60c>)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	4618      	mov	r0, r3
 8011340:	4b27      	ldr	r3, [pc, #156]	; (80113e0 <MAP_moveNextBlock_acc+0x610>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	4619      	mov	r1, r3
 8011346:	4a27      	ldr	r2, [pc, #156]	; (80113e4 <MAP_moveNextBlock_acc+0x614>)
 8011348:	0143      	lsls	r3, r0, #5
 801134a:	4413      	add	r3, r2
 801134c:	440b      	add	r3, r1
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 0302 	and.w	r3, r3, #2
 8011354:	2b00      	cmp	r3, #0
 8011356:	d125      	bne.n	80113a4 <MAP_moveNextBlock_acc+0x5d4>
			((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8011358:	4b1f      	ldr	r3, [pc, #124]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 801135a:	781b      	ldrb	r3, [r3, #0]
			((en_Head == EAST) && ((g_sysMap[my][mx] & 0x02) != 0)) ||		// 東を向いていて東に壁がある
 801135c:	2b02      	cmp	r3, #2
 801135e:	d10e      	bne.n	801137e <MAP_moveNextBlock_acc+0x5ae>
			((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8011360:	4b1e      	ldr	r3, [pc, #120]	; (80113dc <MAP_moveNextBlock_acc+0x60c>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	4618      	mov	r0, r3
 8011366:	4b1e      	ldr	r3, [pc, #120]	; (80113e0 <MAP_moveNextBlock_acc+0x610>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	4619      	mov	r1, r3
 801136c:	4a1d      	ldr	r2, [pc, #116]	; (80113e4 <MAP_moveNextBlock_acc+0x614>)
 801136e:	0143      	lsls	r3, r0, #5
 8011370:	4413      	add	r3, r2
 8011372:	440b      	add	r3, r1
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	d112      	bne.n	80113a4 <MAP_moveNextBlock_acc+0x5d4>
			((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 801137e:	4b16      	ldr	r3, [pc, #88]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 8011380:	781b      	ldrb	r3, [r3, #0]
			((en_Head == SOUTH) && ((g_sysMap[my][mx] & 0x04) != 0)) ||		// 南を向いていて南に壁がある
 8011382:	2b03      	cmp	r3, #3
 8011384:	d113      	bne.n	80113ae <MAP_moveNextBlock_acc+0x5de>
			((en_Head == WEST) && ((g_sysMap[my][mx] & 0x08) != 0)) 			// 西を向いていて西に壁がある
 8011386:	4b15      	ldr	r3, [pc, #84]	; (80113dc <MAP_moveNextBlock_acc+0x60c>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	4618      	mov	r0, r3
 801138c:	4b14      	ldr	r3, [pc, #80]	; (80113e0 <MAP_moveNextBlock_acc+0x610>)
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	4619      	mov	r1, r3
 8011392:	4a14      	ldr	r2, [pc, #80]	; (80113e4 <MAP_moveNextBlock_acc+0x614>)
 8011394:	0143      	lsls	r3, r0, #5
 8011396:	4413      	add	r3, r2
 8011398:	440b      	add	r3, r1
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	f003 0308 	and.w	r3, r3, #8
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d004      	beq.n	80113ae <MAP_moveNextBlock_acc+0x5de>
			) {
			MOT_goHitBackWall();					// バックする
 80113a4:	f7f9 fcf6 	bl	800ad94 <MOT_goHitBackWall>
			f_MoveBackDist = MOVE_BACK_DIST;	// バックした分の移動距離[区画]を加算
 80113a8:	4b0f      	ldr	r3, [pc, #60]	; (80113e8 <MAP_moveNextBlock_acc+0x618>)
 80113aa:	4a10      	ldr	r2, [pc, #64]	; (80113ec <MAP_moveNextBlock_acc+0x61c>)
 80113ac:	601a      	str	r2, [r3, #0]
		}
		*p_type = TRUE;								// 次は半区間＋バック分進める
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	2201      	movs	r2, #1
 80113b2:	701a      	strb	r2, [r3, #0]
		break;
 80113b4:	e000      	b.n	80113b8 <MAP_moveNextBlock_acc+0x5e8>

	default:
		break;
 80113b6:	bf00      	nop
	}

	/* 進行方向更新 */
//	en_Head = (enMAP_HEAD_DIR)( (en_Head + en_head) & (MAP_HEAD_DIR_MAX-1) );
	en_Head = (enMAP_HEAD_DIR)(((uint8_t)en_Head + (uint8_t)en_head) & (MAP_HEAD_DIR_MAX - 1));
 80113b8:	4b07      	ldr	r3, [pc, #28]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 80113ba:	781a      	ldrb	r2, [r3, #0]
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	4413      	add	r3, r2
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	f003 0303 	and.w	r3, r3, #3
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	4b03      	ldr	r3, [pc, #12]	; (80113d8 <MAP_moveNextBlock_acc+0x608>)
 80113ca:	701a      	strb	r2, [r3, #0]
}
 80113cc:	bf00      	nop
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	200002b6 	.word	0x200002b6
 80113d8:	200093d0 	.word	0x200093d0
 80113dc:	200093c9 	.word	0x200093c9
 80113e0:	200093d3 	.word	0x200093d3
 80113e4:	200002f4 	.word	0x200002f4
 80113e8:	200093cc 	.word	0x200093cc
 80113ec:	3e6b851f 	.word	0x3e6b851f

080113f0 <MAP_searchGoal>:
void MAP_searchGoal(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80113f0:	b590      	push	{r4, r7, lr}
 80113f2:	b087      	sub	sp, #28
 80113f4:	af02      	add	r7, sp, #8
 80113f6:	4604      	mov	r4, r0
 80113f8:	4608      	mov	r0, r1
 80113fa:	4611      	mov	r1, r2
 80113fc:	461a      	mov	r2, r3
 80113fe:	4623      	mov	r3, r4
 8011400:	71fb      	strb	r3, [r7, #7]
 8011402:	4603      	mov	r3, r0
 8011404:	71bb      	strb	r3, [r7, #6]
 8011406:	460b      	mov	r3, r1
 8011408:	717b      	strb	r3, [r7, #5]
 801140a:	4613      	mov	r3, r2
 801140c:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 801140e:	2300      	movs	r3, #0
 8011410:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 8011412:	2301      	movs	r3, #1
 8011414:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 8011416:	4b95      	ldr	r3, [pc, #596]	; (801166c <MAP_searchGoal+0x27c>)
 8011418:	2201      	movs	r2, #1
 801141a:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 801141c:	793b      	ldrb	r3, [r7, #4]
 801141e:	2b03      	cmp	r3, #3
 8011420:	d122      	bne.n	8011468 <MAP_searchGoal+0x78>
		uc_goalX = uc_trgX;
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 8011426:	79bb      	ldrb	r3, [r7, #6]
 8011428:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 801142a:	4b91      	ldr	r3, [pc, #580]	; (8011670 <MAP_searchGoal+0x280>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 8011430:	4b90      	ldr	r3, [pc, #576]	; (8011674 <MAP_searchGoal+0x284>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 8011436:	797a      	ldrb	r2, [r7, #5]
 8011438:	79b9      	ldrb	r1, [r7, #6]
 801143a:	79fb      	ldrb	r3, [r7, #7]
 801143c:	4618      	mov	r0, r3
 801143e:	f7fe f9bb 	bl	800f7b8 <MAP_makeContourMap_kai2>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8011442:	4b8d      	ldr	r3, [pc, #564]	; (8011678 <MAP_searchGoal+0x288>)
 8011444:	781a      	ldrb	r2, [r3, #0]
 8011446:	7bfc      	ldrb	r4, [r7, #15]
 8011448:	7b79      	ldrb	r1, [r7, #13]
 801144a:	7bb8      	ldrb	r0, [r7, #14]
 801144c:	f107 0309 	add.w	r3, r7, #9
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	7bfb      	ldrb	r3, [r7, #15]
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	4623      	mov	r3, r4
 8011458:	f7fd fc40 	bl	800ecdc <MAP_searchCmdList>
		uc_trgX = Return_X;
 801145c:	4b87      	ldr	r3, [pc, #540]	; (801167c <MAP_searchGoal+0x28c>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 8011462:	4b87      	ldr	r3, [pc, #540]	; (8011680 <MAP_searchGoal+0x290>)
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8011468:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8011684 <MAP_searchGoal+0x294>
 801146c:	f7f9 fc6c 	bl	800ad48 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 8011470:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8011688 <MAP_searchGoal+0x298>
 8011474:	f7f9 fc7e 	bl	800ad74 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8011478:	4b84      	ldr	r3, [pc, #528]	; (801168c <MAP_searchGoal+0x29c>)
 801147a:	f04f 0200 	mov.w	r2, #0
 801147e:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8011480:	4b83      	ldr	r3, [pc, #524]	; (8011690 <MAP_searchGoal+0x2a0>)
 8011482:	2200      	movs	r2, #0
 8011484:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8011486:	4b83      	ldr	r3, [pc, #524]	; (8011694 <MAP_searchGoal+0x2a4>)
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	79fa      	ldrb	r2, [r7, #7]
 801148c:	429a      	cmp	r2, r3
 801148e:	d107      	bne.n	80114a0 <MAP_searchGoal+0xb0>
 8011490:	4b81      	ldr	r3, [pc, #516]	; (8011698 <MAP_searchGoal+0x2a8>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	79ba      	ldrb	r2, [r7, #6]
 8011496:	429a      	cmp	r2, r3
 8011498:	d102      	bne.n	80114a0 <MAP_searchGoal+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 801149a:	4b7c      	ldr	r3, [pc, #496]	; (801168c <MAP_searchGoal+0x29c>)
 801149c:	4a7f      	ldr	r2, [pc, #508]	; (801169c <MAP_searchGoal+0x2ac>)
 801149e:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 80114a0:	f7f7 f880 	bl	80085a4 <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 80114a4:	4b74      	ldr	r3, [pc, #464]	; (8011678 <MAP_searchGoal+0x288>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fe fe61 	bl	8010170 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 80114ae:	793b      	ldrb	r3, [r7, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d132      	bne.n	801151a <MAP_searchGoal+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 80114b4:	797a      	ldrb	r2, [r7, #5]
 80114b6:	79b9      	ldrb	r1, [r7, #6]
 80114b8:	79fb      	ldrb	r3, [r7, #7]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe f97c 	bl	800f7b8 <MAP_makeContourMap_kai2>
			if( TRUE == bl_type ){
 80114c0:	7abb      	ldrb	r3, [r7, #10]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d00c      	beq.n	80114e0 <MAP_searchGoal+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80114c6:	4b71      	ldr	r3, [pc, #452]	; (801168c <MAP_searchGoal+0x29c>)
 80114c8:	edd3 7a00 	vldr	s15, [r3]
 80114cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114d4:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8011684 <MAP_searchGoal+0x294>
 80114d8:	eeb0 0a67 	vmov.f32	s0, s15
 80114dc:	f7f9 f880 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 80114e0:	f7fe f866 	bl	800f5b0 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 80114e4:	f107 030b 	add.w	r3, r7, #11
 80114e8:	4619      	mov	r1, r3
 80114ea:	2000      	movs	r0, #0
 80114ec:	f7fe fd34 	bl	800ff58 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80114f0:	4b5f      	ldr	r3, [pc, #380]	; (8011670 <MAP_searchGoal+0x280>)
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	79fa      	ldrb	r2, [r7, #7]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d107      	bne.n	801150a <MAP_searchGoal+0x11a>
 80114fa:	4b5e      	ldr	r3, [pc, #376]	; (8011674 <MAP_searchGoal+0x284>)
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	79ba      	ldrb	r2, [r7, #6]
 8011500:	429a      	cmp	r2, r3
 8011502:	d102      	bne.n	801150a <MAP_searchGoal+0x11a>
				MAP_actGoal();										// ゴール時の動作
 8011504:	f7ff f99c 	bl	8010840 <MAP_actGoal>
				break;
 8011508:	e0a4      	b.n	8011654 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 801150a:	7afb      	ldrb	r3, [r7, #11]
 801150c:	f107 020a 	add.w	r2, r7, #10
 8011510:	4611      	mov	r1, r2
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe fe68 	bl	80101e8 <MAP_moveNextBlock>
 8011518:	e081      	b.n	801161e <MAP_searchGoal+0x22e>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 801151a:	793b      	ldrb	r3, [r7, #4]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d132      	bne.n	8011586 <MAP_searchGoal+0x196>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 8011520:	797a      	ldrb	r2, [r7, #5]
 8011522:	79b9      	ldrb	r1, [r7, #6]
 8011524:	79fb      	ldrb	r3, [r7, #7]
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe f946 	bl	800f7b8 <MAP_makeContourMap_kai2>
			if( TRUE == bl_type ){
 801152c:	7abb      	ldrb	r3, [r7, #10]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d00c      	beq.n	801154c <MAP_searchGoal+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8011532:	4b56      	ldr	r3, [pc, #344]	; (801168c <MAP_searchGoal+0x29c>)
 8011534:	edd3 7a00 	vldr	s15, [r3]
 8011538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801153c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011540:	eddf 0a50 	vldr	s1, [pc, #320]	; 8011684 <MAP_searchGoal+0x294>
 8011544:	eeb0 0a67 	vmov.f32	s0, s15
 8011548:	f7f9 f84a 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 801154c:	f7fe f830 	bl	800f5b0 <MAP_makeMapData>
			
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);				// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8011550:	f107 030b 	add.w	r3, r7, #11
 8011554:	4619      	mov	r1, r3
 8011556:	2000      	movs	r0, #0
 8011558:	f7fe fcfe 	bl	800ff58 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 801155c:	4b44      	ldr	r3, [pc, #272]	; (8011670 <MAP_searchGoal+0x280>)
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	79fa      	ldrb	r2, [r7, #7]
 8011562:	429a      	cmp	r2, r3
 8011564:	d107      	bne.n	8011576 <MAP_searchGoal+0x186>
 8011566:	4b43      	ldr	r3, [pc, #268]	; (8011674 <MAP_searchGoal+0x284>)
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	79ba      	ldrb	r2, [r7, #6]
 801156c:	429a      	cmp	r2, r3
 801156e:	d102      	bne.n	8011576 <MAP_searchGoal+0x186>
				MAP_actGoal();										// ゴール時の動作
 8011570:	f7ff f966 	bl	8010840 <MAP_actGoal>
				break;
 8011574:	e06e      	b.n	8011654 <MAP_searchGoal+0x264>
			}
			else{
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動						← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8011576:	7afb      	ldrb	r3, [r7, #11]
 8011578:	f107 010a 	add.w	r1, r7, #10
 801157c:	2200      	movs	r2, #0
 801157e:	4618      	mov	r0, r3
 8011580:	f7fe fee4 	bl	801034c <MAP_moveNextBlock_Sura>
 8011584:	e04b      	b.n	801161e <MAP_searchGoal+0x22e>
//				MAP_moveNextBlock_acc(en_head, &bl_type);
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8011586:	793b      	ldrb	r3, [r7, #4]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d148      	bne.n	801161e <MAP_searchGoal+0x22e>
			
			if( TRUE == bl_type ){
 801158c:	7abb      	ldrb	r3, [r7, #10]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00c      	beq.n	80115ac <MAP_searchGoal+0x1bc>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8011592:	4b3e      	ldr	r3, [pc, #248]	; (801168c <MAP_searchGoal+0x29c>)
 8011594:	edd3 7a00 	vldr	s15, [r3]
 8011598:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801159c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115a0:	eddf 0a38 	vldr	s1, [pc, #224]	; 8011684 <MAP_searchGoal+0x294>
 80115a4:	eeb0 0a67 	vmov.f32	s0, s15
 80115a8:	f7f9 f81a 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();		// 壁データから迷路データを作成
 80115ac:	f7fe f800 	bl	800f5b0 <MAP_makeMapData>
						
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 80115b0:	7b7a      	ldrb	r2, [r7, #13]
 80115b2:	7bbb      	ldrb	r3, [r7, #14]
 80115b4:	4611      	mov	r1, r2
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7ff f9d2 	bl	8010960 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80115bc:	4b2e      	ldr	r3, [pc, #184]	; (8011678 <MAP_searchGoal+0x288>)
 80115be:	781a      	ldrb	r2, [r3, #0]
 80115c0:	7bfc      	ldrb	r4, [r7, #15]
 80115c2:	7b79      	ldrb	r1, [r7, #13]
 80115c4:	7bb8      	ldrb	r0, [r7, #14]
 80115c6:	f107 0309 	add.w	r3, r7, #9
 80115ca:	9301      	str	r3, [sp, #4]
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	4623      	mov	r3, r4
 80115d2:	f7fd fb83 	bl	800ecdc <MAP_searchCmdList>
			uc_trgX = Return_X;
 80115d6:	4b29      	ldr	r3, [pc, #164]	; (801167c <MAP_searchGoal+0x28c>)
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80115dc:	4b28      	ldr	r3, [pc, #160]	; (8011680 <MAP_searchGoal+0x290>)
 80115de:	781b      	ldrb	r3, [r3, #0]
 80115e0:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 80115e2:	797a      	ldrb	r2, [r7, #5]
 80115e4:	79b9      	ldrb	r1, [r7, #6]
 80115e6:	79fb      	ldrb	r3, [r7, #7]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe f8e5 	bl	800f7b8 <MAP_makeContourMap_kai2>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80115ee:	f107 030b 	add.w	r3, r7, #11
 80115f2:	4619      	mov	r1, r3
 80115f4:	2000      	movs	r0, #0
 80115f6:	f7fe fcaf 	bl	800ff58 <MAP_calcMouseDir>
			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 80115fa:	4b1d      	ldr	r3, [pc, #116]	; (8011670 <MAP_searchGoal+0x280>)
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <MAP_searchGoal+0x220>
 8011602:	4b1c      	ldr	r3, [pc, #112]	; (8011674 <MAP_searchGoal+0x284>)
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d102      	bne.n	8011610 <MAP_searchGoal+0x220>
				MAP_actGoal();
 801160a:	f7ff f919 	bl	8010840 <MAP_actGoal>
				break;
 801160e:	e021      	b.n	8011654 <MAP_searchGoal+0x264>
			}
//			}
			else {
				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE);	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 8011610:	7afb      	ldrb	r3, [r7, #11]
 8011612:	f107 010a 	add.w	r1, r7, #10
 8011616:	2200      	movs	r2, #0
 8011618:	4618      	mov	r0, r3
 801161a:	f7fe fe97 	bl	801034c <MAP_moveNextBlock_Sura>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 801161e:	f7f6 fb2d 	bl	8007c7c <SYS_isOutOfCtrl>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	f43f af3d 	beq.w	80114a4 <MAP_searchGoal+0xb4>
			CTRL_stop();
 801162a:	f7f4 f89f 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 801162e:	2000      	movs	r0, #0
 8011630:	f7f6 fb56 	bl	8007ce0 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8011634:	2001      	movs	r0, #1
 8011636:	f7f6 fb53 	bl	8007ce0 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 801163a:	4b0f      	ldr	r3, [pc, #60]	; (8011678 <MAP_searchGoal+0x288>)
 801163c:	2200      	movs	r2, #0
 801163e:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 8011640:	4b0b      	ldr	r3, [pc, #44]	; (8011670 <MAP_searchGoal+0x280>)
 8011642:	2200      	movs	r2, #0
 8011644:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8011646:	4b0b      	ldr	r3, [pc, #44]	; (8011674 <MAP_searchGoal+0x284>)
 8011648:	2200      	movs	r2, #0
 801164a:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 801164c:	4b0f      	ldr	r3, [pc, #60]	; (801168c <MAP_searchGoal+0x29c>)
 801164e:	f04f 0200 	mov.w	r2, #0
 8011652:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 8011654:	4b05      	ldr	r3, [pc, #20]	; (801166c <MAP_searchGoal+0x27c>)
 8011656:	2200      	movs	r2, #0
 8011658:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 801165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801165e:	f001 fdf3 	bl	8013248 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );				// モード変更有効
}
 8011662:	bf00      	nop
 8011664:	3714      	adds	r7, #20
 8011666:	46bd      	mov	sp, r7
 8011668:	bd90      	pop	{r4, r7, pc}
 801166a:	bf00      	nop
 801166c:	200002f0 	.word	0x200002f0
 8011670:	200093d3 	.word	0x200093d3
 8011674:	200093c9 	.word	0x200093c9
 8011678:	200093d0 	.word	0x200093d0
 801167c:	200002d1 	.word	0x200002d1
 8011680:	200002d9 	.word	0x200002d9
 8011684:	3e99999a 	.word	0x3e99999a
 8011688:	00000000 	.word	0x00000000
 801168c:	200093cc 	.word	0x200093cc
 8011690:	200002b6 	.word	0x200002b6
 8011694:	200093c8 	.word	0x200093c8
 8011698:	200093d1 	.word	0x200093d1
 801169c:	3e6b851f 	.word	0x3e6b851f

080116a0 <MAP_searchGoalKnown>:
void MAP_searchGoalKnown(
	uint8_t 			uc_trgX, 		///< [in] 目標x座標
	uint8_t 			uc_trgY, 		///< [in] 目標y座標 
	enMAP_ACT_MODE 	en_type, 		///< [in] 探索方法
	enSEARCH_MODE	en_search 		///< [in] 探索方法
){
 80116a0:	b590      	push	{r4, r7, lr}
 80116a2:	b087      	sub	sp, #28
 80116a4:	af02      	add	r7, sp, #8
 80116a6:	4604      	mov	r4, r0
 80116a8:	4608      	mov	r0, r1
 80116aa:	4611      	mov	r1, r2
 80116ac:	461a      	mov	r2, r3
 80116ae:	4623      	mov	r3, r4
 80116b0:	71fb      	strb	r3, [r7, #7]
 80116b2:	4603      	mov	r3, r0
 80116b4:	71bb      	strb	r3, [r7, #6]
 80116b6:	460b      	mov	r3, r1
 80116b8:	717b      	strb	r3, [r7, #5]
 80116ba:	4613      	mov	r3, r2
 80116bc:	713b      	strb	r3, [r7, #4]
	enMAP_HEAD_DIR	en_head = NORTH;
 80116be:	2300      	movs	r3, #0
 80116c0:	72fb      	strb	r3, [r7, #11]
	bool		bl_type = TRUE;			// 現在位置、FALSE: １区間前進状態、TURE:半区間前進状態
 80116c2:	2301      	movs	r3, #1
 80116c4:	72bb      	strb	r3, [r7, #10]
	uint8_t uc_goalX;
	uint8_t uc_goalY;
	uint8_t uc_staX;
	uint8_t uc_staY;
	
	search_flag = TRUE;
 80116c6:	4b9c      	ldr	r3, [pc, #624]	; (8011938 <MAP_searchGoalKnown+0x298>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	701a      	strb	r2, [r3, #0]

	if (en_search == SEARCH_RETURN){
 80116cc:	793b      	ldrb	r3, [r7, #4]
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	d122      	bne.n	8011718 <MAP_searchGoalKnown+0x78>
		uc_goalX = uc_trgX;
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	73fb      	strb	r3, [r7, #15]
		uc_goalY = uc_trgY;
 80116d6:	79bb      	ldrb	r3, [r7, #6]
 80116d8:	733b      	strb	r3, [r7, #12]
		uc_staX = mx;
 80116da:	4b98      	ldr	r3, [pc, #608]	; (801193c <MAP_searchGoalKnown+0x29c>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	73bb      	strb	r3, [r7, #14]
		uc_staY = my;
 80116e0:	4b97      	ldr	r3, [pc, #604]	; (8011940 <MAP_searchGoalKnown+0x2a0>)
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	737b      	strb	r3, [r7, #13]
//		printf("mx%d,my%d\n", mx, my);
//		MAP_makeContourMap(uc_trgX, uc_trgY, en_type);
		MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 80116e6:	797a      	ldrb	r2, [r7, #5]
 80116e8:	79b9      	ldrb	r1, [r7, #6]
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7fe f863 	bl	800f7b8 <MAP_makeContourMap_kai2>
		MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 80116f2:	4b94      	ldr	r3, [pc, #592]	; (8011944 <MAP_searchGoalKnown+0x2a4>)
 80116f4:	781a      	ldrb	r2, [r3, #0]
 80116f6:	7bfc      	ldrb	r4, [r7, #15]
 80116f8:	7b79      	ldrb	r1, [r7, #13]
 80116fa:	7bb8      	ldrb	r0, [r7, #14]
 80116fc:	f107 0309 	add.w	r3, r7, #9
 8011700:	9301      	str	r3, [sp, #4]
 8011702:	7bfb      	ldrb	r3, [r7, #15]
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	4623      	mov	r3, r4
 8011708:	f7fd fae8 	bl	800ecdc <MAP_searchCmdList>
		uc_trgX = Return_X;
 801170c:	4b8e      	ldr	r3, [pc, #568]	; (8011948 <MAP_searchGoalKnown+0x2a8>)
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	71fb      	strb	r3, [r7, #7]
		uc_trgY = Return_Y;
 8011712:	4b8e      	ldr	r3, [pc, #568]	; (801194c <MAP_searchGoalKnown+0x2ac>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	71bb      	strb	r3, [r7, #6]
//		MAP_showcountLog();
	}

//	SYS_setDisable( SYS_MODE );				// モード変更禁止

	MOT_setTrgtSpeed(SEARCH_SPEED);		// 目標速度
 8011718:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8011950 <MAP_searchGoalKnown+0x2b0>
 801171c:	f7f9 fb14 	bl	800ad48 <MOT_setTrgtSpeed>
	MOT_setNowSpeed( 0.0f );
 8011720:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8011954 <MAP_searchGoalKnown+0x2b4>
 8011724:	f7f9 fb26 	bl	800ad74 <MOT_setNowSpeed>
	f_MoveBackDist = 0;
 8011728:	4b8b      	ldr	r3, [pc, #556]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 801172a:	f04f 0200 	mov.w	r2, #0
 801172e:	601a      	str	r2, [r3, #0]
	uc_SlaCnt = 0;
 8011730:	4b8a      	ldr	r3, [pc, #552]	; (801195c <MAP_searchGoalKnown+0x2bc>)
 8011732:	2200      	movs	r2, #0
 8011734:	701a      	strb	r2, [r3, #0]
	if(uc_trgX == GOAL_MAP_X && uc_trgY == GOAL_MAP_Y){
 8011736:	4b8a      	ldr	r3, [pc, #552]	; (8011960 <MAP_searchGoalKnown+0x2c0>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	79fa      	ldrb	r2, [r7, #7]
 801173c:	429a      	cmp	r2, r3
 801173e:	d107      	bne.n	8011750 <MAP_searchGoalKnown+0xb0>
 8011740:	4b88      	ldr	r3, [pc, #544]	; (8011964 <MAP_searchGoalKnown+0x2c4>)
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	79ba      	ldrb	r2, [r7, #6]
 8011746:	429a      	cmp	r2, r3
 8011748:	d102      	bne.n	8011750 <MAP_searchGoalKnown+0xb0>
		f_MoveBackDist = MOVE_BACK_DIST;
 801174a:	4b83      	ldr	r3, [pc, #524]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 801174c:	4a86      	ldr	r2, [pc, #536]	; (8011968 <MAP_searchGoalKnown+0x2c8>)
 801174e:	601a      	str	r2, [r3, #0]
	}
	
	log_flag_on();	//ログ関数スタート（大会時削除）
 8011750:	f7f6 ff28 	bl	80085a4 <log_flag_on>
	
	/* 迷路探索 */
	while(1){
		MAP_refMousePos( en_Head );								// 座標更新
 8011754:	4b7b      	ldr	r3, [pc, #492]	; (8011944 <MAP_searchGoalKnown+0x2a4>)
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	4618      	mov	r0, r3
 801175a:	f7fe fd09 	bl	8010170 <MAP_refMousePos>
//		MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
		
		/* 超信地旋回探索 */
		if( SEARCH_TURN == en_search ){
 801175e:	793b      	ldrb	r3, [r7, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d132      	bne.n	80117ca <MAP_searchGoalKnown+0x12a>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 8011764:	797a      	ldrb	r2, [r7, #5]
 8011766:	79b9      	ldrb	r1, [r7, #6]
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe f824 	bl	800f7b8 <MAP_makeContourMap_kai2>
			if( TRUE == bl_type ){
 8011770:	7abb      	ldrb	r3, [r7, #10]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00c      	beq.n	8011790 <MAP_searchGoalKnown+0xf0>
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8011776:	4b78      	ldr	r3, [pc, #480]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 8011778:	edd3 7a00 	vldr	s15, [r3]
 801177c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011784:	eddf 0a72 	vldr	s1, [pc, #456]	; 8011950 <MAP_searchGoalKnown+0x2b0>
 8011788:	eeb0 0a67 	vmov.f32	s0, s15
 801178c:	f7f8 ff28 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			MAP_makeMapData();												// 壁データから迷路データを作成			← ここでデータ作成をミスっている
 8011790:	f7fd ff0e 	bl	800f5b0 <MAP_makeMapData>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);						// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 8011794:	f107 030b 	add.w	r3, r7, #11
 8011798:	4619      	mov	r1, r3
 801179a:	2000      	movs	r0, #0
 801179c:	f7fe fbdc 	bl	800ff58 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 80117a0:	4b66      	ldr	r3, [pc, #408]	; (801193c <MAP_searchGoalKnown+0x29c>)
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	79fa      	ldrb	r2, [r7, #7]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d107      	bne.n	80117ba <MAP_searchGoalKnown+0x11a>
 80117aa:	4b65      	ldr	r3, [pc, #404]	; (8011940 <MAP_searchGoalKnown+0x2a0>)
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	79ba      	ldrb	r2, [r7, #6]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d102      	bne.n	80117ba <MAP_searchGoalKnown+0x11a>
				MAP_actGoal();										// ゴール時の動作
 80117b4:	f7ff f844 	bl	8010840 <MAP_actGoal>
				break;
 80117b8:	e0b2      	b.n	8011920 <MAP_searchGoalKnown+0x280>
			}
			else{
				MAP_moveNextBlock(en_head, &bl_type);				// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
 80117ba:	7afb      	ldrb	r3, [r7, #11]
 80117bc:	f107 020a 	add.w	r2, r7, #10
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe fd10 	bl	80101e8 <MAP_moveNextBlock>
 80117c8:	e08f      	b.n	80118ea <MAP_searchGoalKnown+0x24a>
			}
		}
		/* スラローム探索 */
		else if( SEARCH_SURA == en_search ){
 80117ca:	793b      	ldrb	r3, [r7, #4]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d139      	bne.n	8011844 <MAP_searchGoalKnown+0x1a4>
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 80117d0:	797a      	ldrb	r2, [r7, #5]
 80117d2:	79b9      	ldrb	r1, [r7, #6]
 80117d4:	79fb      	ldrb	r3, [r7, #7]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fd ffee 	bl	800f7b8 <MAP_makeContourMap_kai2>
			if( TRUE == bl_type ){
 80117dc:	7abb      	ldrb	r3, [r7, #10]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00c      	beq.n	80117fc <MAP_searchGoalKnown+0x15c>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 80117e2:	4b5d      	ldr	r3, [pc, #372]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 80117e4:	edd3 7a00 	vldr	s15, [r3]
 80117e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80117ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117f0:	eddf 0a57 	vldr	s1, [pc, #348]	; 8011950 <MAP_searchGoalKnown+0x2b0>
 80117f4:	eeb0 0a67 	vmov.f32	s0, s15
 80117f8:	f7f8 fef2 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 80117fc:	4b5b      	ldr	r3, [pc, #364]	; (801196c <MAP_searchGoalKnown+0x2cc>)
 80117fe:	785b      	ldrb	r3, [r3, #1]
 8011800:	f083 0301 	eor.w	r3, r3, #1
 8011804:	b2db      	uxtb	r3, r3
 8011806:	2b00      	cmp	r3, #0
 8011808:	d001      	beq.n	801180e <MAP_searchGoalKnown+0x16e>
				MAP_makeMapData();		// 壁データから迷路データを作成
 801180a:	f7fd fed1 	bl	800f5b0 <MAP_makeMapData>
			}
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);			// 等高線MAP法で進行方向を算出			← 誤ったMAPを作成
 801180e:	f107 030b 	add.w	r3, r7, #11
 8011812:	4619      	mov	r1, r3
 8011814:	2000      	movs	r0, #0
 8011816:	f7fe fb9f 	bl	800ff58 <MAP_calcMouseDir>
			
			/* 次の区画へ移動 */
			if(( mx == uc_trgX ) && ( my == uc_trgY )){
 801181a:	4b48      	ldr	r3, [pc, #288]	; (801193c <MAP_searchGoalKnown+0x29c>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	79fa      	ldrb	r2, [r7, #7]
 8011820:	429a      	cmp	r2, r3
 8011822:	d107      	bne.n	8011834 <MAP_searchGoalKnown+0x194>
 8011824:	4b46      	ldr	r3, [pc, #280]	; (8011940 <MAP_searchGoalKnown+0x2a0>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	79ba      	ldrb	r2, [r7, #6]
 801182a:	429a      	cmp	r2, r3
 801182c:	d102      	bne.n	8011834 <MAP_searchGoalKnown+0x194>
				MAP_actGoal();									// ゴール時の動作
 801182e:	f7ff f807 	bl	8010840 <MAP_actGoal>
				break;
 8011832:	e075      	b.n	8011920 <MAP_searchGoalKnown+0x280>
			}
			else{
//				MAP_moveNextBlock_Sura(en_head, &bl_type, FALSE );	// 次の区画へ移動			← ここで改めてリリースチェック＋壁再度作成＋等高線＋超信地旋回動作
				MAP_moveNextBlock_acc(en_head, &bl_type);
 8011834:	7afb      	ldrb	r3, [r7, #11]
 8011836:	f107 020a 	add.w	r2, r7, #10
 801183a:	4611      	mov	r1, r2
 801183c:	4618      	mov	r0, r3
 801183e:	f7ff fac7 	bl	8010dd0 <MAP_moveNextBlock_acc>
 8011842:	e052      	b.n	80118ea <MAP_searchGoalKnown+0x24a>
			}
		}
		/* 帰還探索 */
		else if (SEARCH_RETURN == en_search) {
 8011844:	793b      	ldrb	r3, [r7, #4]
 8011846:	2b03      	cmp	r3, #3
 8011848:	d14f      	bne.n	80118ea <MAP_searchGoalKnown+0x24a>
			
			if( TRUE == bl_type ){
 801184a:	7abb      	ldrb	r3, [r7, #10]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00c      	beq.n	801186a <MAP_searchGoalKnown+0x1ca>
				
				MOT_goBlock_FinSpeed( 0.5 + f_MoveBackDist, SEARCH_SPEED );		// 半区画前進(バックの移動量を含む)
 8011850:	4b41      	ldr	r3, [pc, #260]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 8011852:	edd3 7a00 	vldr	s15, [r3]
 8011856:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801185a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801185e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8011950 <MAP_searchGoalKnown+0x2b0>
 8011862:	eeb0 0a67 	vmov.f32	s0, s15
 8011866:	f7f8 febb 	bl	800a5e0 <MOT_goBlock_FinSpeed>
			}
			if (st_known.bl_Known != TRUE) {
 801186a:	4b40      	ldr	r3, [pc, #256]	; (801196c <MAP_searchGoalKnown+0x2cc>)
 801186c:	785b      	ldrb	r3, [r3, #1]
 801186e:	f083 0301 	eor.w	r3, r3, #1
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <MAP_searchGoalKnown+0x1dc>
				MAP_makeMapData();		// 壁データから迷路データを作成
 8011878:	f7fd fe9a 	bl	800f5b0 <MAP_makeMapData>
			}			
			MAP_makeReturnContourMap(uc_staX,uc_staY);
 801187c:	7b7a      	ldrb	r2, [r7, #13]
 801187e:	7bbb      	ldrb	r3, [r7, #14]
 8011880:	4611      	mov	r1, r2
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff f86c 	bl	8010960 <MAP_makeReturnContourMap>
			MAP_searchCmdList(uc_staX, uc_staY, en_Head, uc_goalX, uc_goalX, &en_endDir);
 8011888:	4b2e      	ldr	r3, [pc, #184]	; (8011944 <MAP_searchGoalKnown+0x2a4>)
 801188a:	781a      	ldrb	r2, [r3, #0]
 801188c:	7bfc      	ldrb	r4, [r7, #15]
 801188e:	7b79      	ldrb	r1, [r7, #13]
 8011890:	7bb8      	ldrb	r0, [r7, #14]
 8011892:	f107 0309 	add.w	r3, r7, #9
 8011896:	9301      	str	r3, [sp, #4]
 8011898:	7bfb      	ldrb	r3, [r7, #15]
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	4623      	mov	r3, r4
 801189e:	f7fd fa1d 	bl	800ecdc <MAP_searchCmdList>
			uc_trgX = Return_X;
 80118a2:	4b29      	ldr	r3, [pc, #164]	; (8011948 <MAP_searchGoalKnown+0x2a8>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	71fb      	strb	r3, [r7, #7]
			uc_trgY = Return_Y;
 80118a8:	4b28      	ldr	r3, [pc, #160]	; (801194c <MAP_searchGoalKnown+0x2ac>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	71bb      	strb	r3, [r7, #6]
//			MAP_makeContourMap( uc_trgX, uc_trgY, en_type );		// 等高線マップを作る
			MAP_makeContourMap_kai2(uc_trgX, uc_trgY, en_type);
 80118ae:	797a      	ldrb	r2, [r7, #5]
 80118b0:	79b9      	ldrb	r1, [r7, #6]
 80118b2:	79fb      	ldrb	r3, [r7, #7]
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fd ff7f 	bl	800f7b8 <MAP_makeContourMap_kai2>
			MAP_calcMouseDir(CONTOUR_SYSTEM, &en_head);	
 80118ba:	f107 030b 	add.w	r3, r7, #11
 80118be:	4619      	mov	r1, r3
 80118c0:	2000      	movs	r0, #0
 80118c2:	f7fe fb49 	bl	800ff58 <MAP_calcMouseDir>

			/* 次の区画へ移動 */
//			if ((us_cmap[my][mx] == 0)||((g_sysMap[uc_trgY][uc_trgX]&0xf0) == 0xf0)) {
			if ((mx == 0)&&(my == 0)){
 80118c6:	4b1d      	ldr	r3, [pc, #116]	; (801193c <MAP_searchGoalKnown+0x29c>)
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <MAP_searchGoalKnown+0x23c>
 80118ce:	4b1c      	ldr	r3, [pc, #112]	; (8011940 <MAP_searchGoalKnown+0x2a0>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d102      	bne.n	80118dc <MAP_searchGoalKnown+0x23c>
				MAP_actGoal();
 80118d6:	f7fe ffb3 	bl	8010840 <MAP_actGoal>
				break;
 80118da:	e021      	b.n	8011920 <MAP_searchGoalKnown+0x280>
			}
//			}
			else {
				MAP_moveNextBlock_acc(en_head, &bl_type);
 80118dc:	7afb      	ldrb	r3, [r7, #11]
 80118de:	f107 020a 	add.w	r2, r7, #10
 80118e2:	4611      	mov	r1, r2
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff fa73 	bl	8010dd0 <MAP_moveNextBlock_acc>
//			LED_count(uc_trgY);
		}

		
		/* 途中で制御不能になった */
		if( SYS_isOutOfCtrl() == TRUE ){
 80118ea:	f7f6 f9c7 	bl	8007c7c <SYS_isOutOfCtrl>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f43f af2f 	beq.w	8011754 <MAP_searchGoalKnown+0xb4>
			CTRL_stop();
 80118f6:	f7f3 ff39 	bl	800576c <CTRL_stop>
			DCM_brakeMot( DCM_R );		// ブレーキ
 80118fa:	2000      	movs	r0, #0
 80118fc:	f7f6 f9f0 	bl	8007ce0 <DCM_brakeMot>
			DCM_brakeMot( DCM_L );		// ブレーキ
 8011900:	2001      	movs	r0, #1
 8011902:	f7f6 f9ed 	bl	8007ce0 <DCM_brakeMot>
			
			/* 迷路関連を初期化 */
			en_Head		= NORTH;
 8011906:	4b0f      	ldr	r3, [pc, #60]	; (8011944 <MAP_searchGoalKnown+0x2a4>)
 8011908:	2200      	movs	r2, #0
 801190a:	701a      	strb	r2, [r3, #0]
			mx			= 0;
 801190c:	4b0b      	ldr	r3, [pc, #44]	; (801193c <MAP_searchGoalKnown+0x29c>)
 801190e:	2200      	movs	r2, #0
 8011910:	701a      	strb	r2, [r3, #0]
			my			= 0;
 8011912:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <MAP_searchGoalKnown+0x2a0>)
 8011914:	2200      	movs	r2, #0
 8011916:	701a      	strb	r2, [r3, #0]
			f_MoveBackDist = 0;
 8011918:	4b0f      	ldr	r3, [pc, #60]	; (8011958 <MAP_searchGoalKnown+0x2b8>)
 801191a:	f04f 0200 	mov.w	r2, #0
 801191e:	601a      	str	r2, [r3, #0]
			
			// DCMCは下位モジュールで既にクリアと緊急停止を行っている。
			break;
		}
	}
	search_flag = FALSE;
 8011920:	4b05      	ldr	r3, [pc, #20]	; (8011938 <MAP_searchGoalKnown+0x298>)
 8011922:	2200      	movs	r2, #0
 8011924:	701a      	strb	r2, [r3, #0]
	LL_mDelay(1000);
 8011926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801192a:	f001 fc8d 	bl	8013248 <LL_mDelay>
//	SYS_setEnable( SYS_MODE );			// モード変更有効

}
 801192e:	bf00      	nop
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	bd90      	pop	{r4, r7, pc}
 8011936:	bf00      	nop
 8011938:	200002f0 	.word	0x200002f0
 801193c:	200093d3 	.word	0x200093d3
 8011940:	200093c9 	.word	0x200093c9
 8011944:	200093d0 	.word	0x200093d0
 8011948:	200002d1 	.word	0x200002d1
 801194c:	200002d9 	.word	0x200002d9
 8011950:	3e99999a 	.word	0x3e99999a
 8011954:	00000000 	.word	0x00000000
 8011958:	200093cc 	.word	0x200093cc
 801195c:	200002b6 	.word	0x200002b6
 8011960:	200093c8 	.word	0x200093c8
 8011964:	200093d1 	.word	0x200093d1
 8011968:	3e6b851f 	.word	0x3e6b851f
 801196c:	200002b8 	.word	0x200002b8

08011970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011970:	480d      	ldr	r0, [pc, #52]	; (80119a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011972:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011974:	480d      	ldr	r0, [pc, #52]	; (80119ac <LoopForever+0x6>)
  ldr r1, =_edata
 8011976:	490e      	ldr	r1, [pc, #56]	; (80119b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011978:	4a0e      	ldr	r2, [pc, #56]	; (80119b4 <LoopForever+0xe>)
  movs r3, #0
 801197a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801197c:	e002      	b.n	8011984 <LoopCopyDataInit>

0801197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011982:	3304      	adds	r3, #4

08011984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011988:	d3f9      	bcc.n	801197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801198a:	4a0b      	ldr	r2, [pc, #44]	; (80119b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 801198c:	4c0b      	ldr	r4, [pc, #44]	; (80119bc <LoopForever+0x16>)
  movs r3, #0
 801198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011990:	e001      	b.n	8011996 <LoopFillZerobss>

08011992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011994:	3204      	adds	r2, #4

08011996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011998:	d3fb      	bcc.n	8011992 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801199a:	f7f2 fd29 	bl	80043f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801199e:	f001 fc91 	bl	80132c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80119a2:	f7f0 fdff 	bl	80025a4 <main>

080119a6 <LoopForever>:

LoopForever:
    b LoopForever
 80119a6:	e7fe      	b.n	80119a6 <LoopForever>
  ldr   r0, =_estack
 80119a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80119ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80119b0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80119b4:	0801a158 	.word	0x0801a158
  ldr r2, =_sbss
 80119b8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80119bc:	200093d4 	.word	0x200093d4

080119c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80119c0:	e7fe      	b.n	80119c0 <ADC1_2_IRQHandler>

080119c2 <LL_ADC_REG_SetSequencerLength>:
{
 80119c2:	b480      	push	{r7}
 80119c4:	b083      	sub	sp, #12
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
 80119ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119d0:	f023 020f 	bic.w	r2, r3, #15
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	431a      	orrs	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80119dc:	bf00      	nop
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <LL_ADC_IsEnabled>:
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d101      	bne.n	8011a00 <LL_ADC_IsEnabled+0x18>
 80119fc:	2301      	movs	r3, #1
 80119fe:	e000      	b.n	8011a02 <LL_ADC_IsEnabled+0x1a>
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	370c      	adds	r7, #12
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
	...

08011a10 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8011a10:	b590      	push	{r4, r7, lr}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	4a27      	ldr	r2, [pc, #156]	; (8011ac0 <LL_ADC_CommonInit+0xb0>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d10f      	bne.n	8011a46 <LL_ADC_CommonInit+0x36>
 8011a26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8011a2a:	f7ff ffdd 	bl	80119e8 <LL_ADC_IsEnabled>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	4824      	ldr	r0, [pc, #144]	; (8011ac4 <LL_ADC_CommonInit+0xb4>)
 8011a32:	f7ff ffd9 	bl	80119e8 <LL_ADC_IsEnabled>
 8011a36:	4603      	mov	r3, r0
 8011a38:	4323      	orrs	r3, r4
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	bf0c      	ite	eq
 8011a3e:	2301      	moveq	r3, #1
 8011a40:	2300      	movne	r3, #0
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	e012      	b.n	8011a6c <LL_ADC_CommonInit+0x5c>
 8011a46:	4820      	ldr	r0, [pc, #128]	; (8011ac8 <LL_ADC_CommonInit+0xb8>)
 8011a48:	f7ff ffce 	bl	80119e8 <LL_ADC_IsEnabled>
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	481f      	ldr	r0, [pc, #124]	; (8011acc <LL_ADC_CommonInit+0xbc>)
 8011a50:	f7ff ffca 	bl	80119e8 <LL_ADC_IsEnabled>
 8011a54:	4603      	mov	r3, r0
 8011a56:	431c      	orrs	r4, r3
 8011a58:	481d      	ldr	r0, [pc, #116]	; (8011ad0 <LL_ADC_CommonInit+0xc0>)
 8011a5a:	f7ff ffc5 	bl	80119e8 <LL_ADC_IsEnabled>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	4323      	orrs	r3, r4
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	bf0c      	ite	eq
 8011a66:	2301      	moveq	r3, #1
 8011a68:	2300      	movne	r3, #0
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d020      	beq.n	8011ab2 <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d012      	beq.n	8011a9e <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	689a      	ldr	r2, [r3, #8]
 8011a7c:	4b15      	ldr	r3, [pc, #84]	; (8011ad4 <LL_ADC_CommonInit+0xc4>)
 8011a7e:	4013      	ands	r3, r2
 8011a80:	683a      	ldr	r2, [r7, #0]
 8011a82:	6811      	ldr	r1, [r2, #0]
 8011a84:	683a      	ldr	r2, [r7, #0]
 8011a86:	6852      	ldr	r2, [r2, #4]
 8011a88:	4311      	orrs	r1, r2
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	6892      	ldr	r2, [r2, #8]
 8011a8e:	4311      	orrs	r1, r2
 8011a90:	683a      	ldr	r2, [r7, #0]
 8011a92:	68d2      	ldr	r2, [r2, #12]
 8011a94:	430a      	orrs	r2, r1
 8011a96:	431a      	orrs	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	609a      	str	r2, [r3, #8]
 8011a9c:	e00b      	b.n	8011ab6 <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	689a      	ldr	r2, [r3, #8]
 8011aa2:	4b0c      	ldr	r3, [pc, #48]	; (8011ad4 <LL_ADC_CommonInit+0xc4>)
 8011aa4:	4013      	ands	r3, r2
 8011aa6:	683a      	ldr	r2, [r7, #0]
 8011aa8:	6812      	ldr	r2, [r2, #0]
 8011aaa:	431a      	orrs	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	609a      	str	r2, [r3, #8]
 8011ab0:	e001      	b.n	8011ab6 <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd90      	pop	{r4, r7, pc}
 8011ac0:	50000300 	.word	0x50000300
 8011ac4:	50000100 	.word	0x50000100
 8011ac8:	50000400 	.word	0x50000400
 8011acc:	50000500 	.word	0x50000500
 8011ad0:	50000600 	.word	0x50000600
 8011ad4:	ffc030e0 	.word	0xffc030e0

08011ad8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff ff7e 	bl	80119e8 <LL_ADC_IsEnabled>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d111      	bne.n	8011b16 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011afa:	f023 0318 	bic.w	r3, r3, #24
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	6811      	ldr	r1, [r2, #0]
 8011b02:	683a      	ldr	r2, [r7, #0]
 8011b04:	6852      	ldr	r2, [r2, #4]
 8011b06:	4311      	orrs	r1, r2
 8011b08:	683a      	ldr	r2, [r7, #0]
 8011b0a:	6892      	ldr	r2, [r2, #8]
 8011b0c:	430a      	orrs	r2, r1
 8011b0e:	431a      	orrs	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	60da      	str	r2, [r3, #12]
 8011b14:	e001      	b.n	8011b1a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7ff ff58 	bl	80119e8 <LL_ADC_IsEnabled>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d132      	bne.n	8011ba4 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d015      	beq.n	8011b72 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	68da      	ldr	r2, [r3, #12]
 8011b4a:	4b1a      	ldr	r3, [pc, #104]	; (8011bb4 <LL_ADC_REG_Init+0x90>)
 8011b4c:	4013      	ands	r3, r2
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	6811      	ldr	r1, [r2, #0]
 8011b52:	683a      	ldr	r2, [r7, #0]
 8011b54:	6892      	ldr	r2, [r2, #8]
 8011b56:	4311      	orrs	r1, r2
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	68d2      	ldr	r2, [r2, #12]
 8011b5c:	4311      	orrs	r1, r2
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	6912      	ldr	r2, [r2, #16]
 8011b62:	4311      	orrs	r1, r2
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	6952      	ldr	r2, [r2, #20]
 8011b68:	430a      	orrs	r2, r1
 8011b6a:	431a      	orrs	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	60da      	str	r2, [r3, #12]
 8011b70:	e011      	b.n	8011b96 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	68da      	ldr	r2, [r3, #12]
 8011b76:	4b0f      	ldr	r3, [pc, #60]	; (8011bb4 <LL_ADC_REG_Init+0x90>)
 8011b78:	4013      	ands	r3, r2
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	6811      	ldr	r1, [r2, #0]
 8011b7e:	683a      	ldr	r2, [r7, #0]
 8011b80:	68d2      	ldr	r2, [r2, #12]
 8011b82:	4311      	orrs	r1, r2
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	6912      	ldr	r2, [r2, #16]
 8011b88:	4311      	orrs	r1, r2
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	6952      	ldr	r2, [r2, #20]
 8011b8e:	430a      	orrs	r2, r1
 8011b90:	431a      	orrs	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff ff10 	bl	80119c2 <LL_ADC_REG_SetSequencerLength>
 8011ba2:	e001      	b.n	8011ba8 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3710      	adds	r7, #16
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	fff0c01c 	.word	0xfff0c01c

08011bb8 <LL_GPIO_SetPinMode>:
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b08b      	sub	sp, #44	; 0x2c
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	fa93 f3a3 	rbit	r3, r3
 8011bd2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d101      	bne.n	8011be2 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8011bde:	2320      	movs	r3, #32
 8011be0:	e003      	b.n	8011bea <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	fab3 f383 	clz	r3, r3
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	2103      	movs	r1, #3
 8011bee:	fa01 f303 	lsl.w	r3, r1, r3
 8011bf2:	43db      	mvns	r3, r3
 8011bf4:	401a      	ands	r2, r3
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	fa93 f3a3 	rbit	r3, r3
 8011c00:	61fb      	str	r3, [r7, #28]
  return result;
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8011c0c:	2320      	movs	r3, #32
 8011c0e:	e003      	b.n	8011c18 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8011c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c12:	fab3 f383 	clz	r3, r3
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	005b      	lsls	r3, r3, #1
 8011c1a:	6879      	ldr	r1, [r7, #4]
 8011c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8011c20:	431a      	orrs	r2, r3
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	601a      	str	r2, [r3, #0]
}
 8011c26:	bf00      	nop
 8011c28:	372c      	adds	r7, #44	; 0x2c
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <LL_GPIO_SetPinOutputType>:
{
 8011c32:	b480      	push	{r7}
 8011c34:	b085      	sub	sp, #20
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	60f8      	str	r0, [r7, #12]
 8011c3a:	60b9      	str	r1, [r7, #8]
 8011c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	685a      	ldr	r2, [r3, #4]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	43db      	mvns	r3, r3
 8011c46:	401a      	ands	r2, r3
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	fb01 f303 	mul.w	r3, r1, r3
 8011c50:	431a      	orrs	r2, r3
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	605a      	str	r2, [r3, #4]
}
 8011c56:	bf00      	nop
 8011c58:	3714      	adds	r7, #20
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <LL_GPIO_SetPinSpeed>:
{
 8011c62:	b480      	push	{r7}
 8011c64:	b08b      	sub	sp, #44	; 0x2c
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	60f8      	str	r0, [r7, #12]
 8011c6a:	60b9      	str	r1, [r7, #8]
 8011c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	689a      	ldr	r2, [r3, #8]
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	fa93 f3a3 	rbit	r3, r3
 8011c7c:	613b      	str	r3, [r7, #16]
  return result;
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011c82:	69bb      	ldr	r3, [r7, #24]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d101      	bne.n	8011c8c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8011c88:	2320      	movs	r3, #32
 8011c8a:	e003      	b.n	8011c94 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	fab3 f383 	clz	r3, r3
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	005b      	lsls	r3, r3, #1
 8011c96:	2103      	movs	r1, #3
 8011c98:	fa01 f303 	lsl.w	r3, r1, r3
 8011c9c:	43db      	mvns	r3, r3
 8011c9e:	401a      	ands	r2, r3
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	fa93 f3a3 	rbit	r3, r3
 8011caa:	61fb      	str	r3, [r7, #28]
  return result;
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d101      	bne.n	8011cba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8011cb6:	2320      	movs	r3, #32
 8011cb8:	e003      	b.n	8011cc2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	fab3 f383 	clz	r3, r3
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	6879      	ldr	r1, [r7, #4]
 8011cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8011cca:	431a      	orrs	r2, r3
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	609a      	str	r2, [r3, #8]
}
 8011cd0:	bf00      	nop
 8011cd2:	372c      	adds	r7, #44	; 0x2c
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr

08011cdc <LL_GPIO_SetPinPull>:
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b08b      	sub	sp, #44	; 0x2c
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	68da      	ldr	r2, [r3, #12]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	fa93 f3a3 	rbit	r3, r3
 8011cf6:	613b      	str	r3, [r7, #16]
  return result;
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011cfc:	69bb      	ldr	r3, [r7, #24]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d101      	bne.n	8011d06 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8011d02:	2320      	movs	r3, #32
 8011d04:	e003      	b.n	8011d0e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	fab3 f383 	clz	r3, r3
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	2103      	movs	r1, #3
 8011d12:	fa01 f303 	lsl.w	r3, r1, r3
 8011d16:	43db      	mvns	r3, r3
 8011d18:	401a      	ands	r2, r3
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d1e:	6a3b      	ldr	r3, [r7, #32]
 8011d20:	fa93 f3a3 	rbit	r3, r3
 8011d24:	61fb      	str	r3, [r7, #28]
  return result;
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8011d30:	2320      	movs	r3, #32
 8011d32:	e003      	b.n	8011d3c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	fab3 f383 	clz	r3, r3
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	005b      	lsls	r3, r3, #1
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	fa01 f303 	lsl.w	r3, r1, r3
 8011d44:	431a      	orrs	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	60da      	str	r2, [r3, #12]
}
 8011d4a:	bf00      	nop
 8011d4c:	372c      	adds	r7, #44	; 0x2c
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <LL_GPIO_SetAFPin_0_7>:
{
 8011d56:	b480      	push	{r7}
 8011d58:	b08b      	sub	sp, #44	; 0x2c
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	60f8      	str	r0, [r7, #12]
 8011d5e:	60b9      	str	r1, [r7, #8]
 8011d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	6a1a      	ldr	r2, [r3, #32]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	fa93 f3a3 	rbit	r3, r3
 8011d70:	613b      	str	r3, [r7, #16]
  return result;
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d101      	bne.n	8011d80 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8011d7c:	2320      	movs	r3, #32
 8011d7e:	e003      	b.n	8011d88 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	fab3 f383 	clz	r3, r3
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	210f      	movs	r1, #15
 8011d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8011d90:	43db      	mvns	r3, r3
 8011d92:	401a      	ands	r2, r3
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011d98:	6a3b      	ldr	r3, [r7, #32]
 8011d9a:	fa93 f3a3 	rbit	r3, r3
 8011d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8011daa:	2320      	movs	r3, #32
 8011dac:	e003      	b.n	8011db6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db0:	fab3 f383 	clz	r3, r3
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	6879      	ldr	r1, [r7, #4]
 8011dba:	fa01 f303 	lsl.w	r3, r1, r3
 8011dbe:	431a      	orrs	r2, r3
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	621a      	str	r2, [r3, #32]
}
 8011dc4:	bf00      	nop
 8011dc6:	372c      	adds	r7, #44	; 0x2c
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <LL_GPIO_SetAFPin_8_15>:
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b08b      	sub	sp, #44	; 0x2c
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	60b9      	str	r1, [r7, #8]
 8011dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	0a1b      	lsrs	r3, r3, #8
 8011de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	fa93 f3a3 	rbit	r3, r3
 8011dec:	613b      	str	r3, [r7, #16]
  return result;
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d101      	bne.n	8011dfc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8011df8:	2320      	movs	r3, #32
 8011dfa:	e003      	b.n	8011e04 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	fab3 f383 	clz	r3, r3
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	210f      	movs	r1, #15
 8011e08:	fa01 f303 	lsl.w	r3, r1, r3
 8011e0c:	43db      	mvns	r3, r3
 8011e0e:	401a      	ands	r2, r3
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	0a1b      	lsrs	r3, r3, #8
 8011e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	fa93 f3a3 	rbit	r3, r3
 8011e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d101      	bne.n	8011e2c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8011e28:	2320      	movs	r3, #32
 8011e2a:	e003      	b.n	8011e34 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	fab3 f383 	clz	r3, r3
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	6879      	ldr	r1, [r7, #4]
 8011e38:	fa01 f303 	lsl.w	r3, r1, r3
 8011e3c:	431a      	orrs	r2, r3
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011e42:	bf00      	nop
 8011e44:	372c      	adds	r7, #44	; 0x2c
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr

08011e4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b088      	sub	sp, #32
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	fa93 f3a3 	rbit	r3, r3
 8011e64:	60fb      	str	r3, [r7, #12]
  return result;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <LL_GPIO_Init+0x26>
    return 32U;
 8011e70:	2320      	movs	r3, #32
 8011e72:	e003      	b.n	8011e7c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	fab3 f383 	clz	r3, r3
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011e7e:	e048      	b.n	8011f12 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	2101      	movs	r1, #1
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	fa01 f303 	lsl.w	r3, r1, r3
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d03a      	beq.n	8011f0c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d003      	beq.n	8011ea6 <LL_GPIO_Init+0x58>
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d10e      	bne.n	8011ec4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	69b9      	ldr	r1, [r7, #24]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f7ff fed7 	bl	8011c62 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	6819      	ldr	r1, [r3, #0]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7ff feb7 	bl	8011c32 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	691b      	ldr	r3, [r3, #16]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	69b9      	ldr	r1, [r7, #24]
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff ff05 	bl	8011cdc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	2b02      	cmp	r3, #2
 8011ed8:	d111      	bne.n	8011efe <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8011eda:	69bb      	ldr	r3, [r7, #24]
 8011edc:	2bff      	cmp	r3, #255	; 0xff
 8011ede:	d807      	bhi.n	8011ef0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	695b      	ldr	r3, [r3, #20]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	69b9      	ldr	r1, [r7, #24]
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7ff ff34 	bl	8011d56 <LL_GPIO_SetAFPin_0_7>
 8011eee:	e006      	b.n	8011efe <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	695b      	ldr	r3, [r3, #20]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	69b9      	ldr	r1, [r7, #24]
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff ff69 	bl	8011dd0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	461a      	mov	r2, r3
 8011f04:	69b9      	ldr	r1, [r7, #24]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff fe56 	bl	8011bb8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	fa22 f303 	lsr.w	r3, r2, r3
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1af      	bne.n	8011e80 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8011f20:	2300      	movs	r3, #0
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3720      	adds	r7, #32
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
	...

08011f2c <LL_RCC_HSI_IsReady>:
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8011f30:	4b07      	ldr	r3, [pc, #28]	; (8011f50 <LL_RCC_HSI_IsReady+0x24>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f3c:	d101      	bne.n	8011f42 <LL_RCC_HSI_IsReady+0x16>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e000      	b.n	8011f44 <LL_RCC_HSI_IsReady+0x18>
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
 8011f4e:	bf00      	nop
 8011f50:	40021000 	.word	0x40021000

08011f54 <LL_RCC_LSE_IsReady>:
{
 8011f54:	b480      	push	{r7}
 8011f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8011f58:	4b07      	ldr	r3, [pc, #28]	; (8011f78 <LL_RCC_LSE_IsReady+0x24>)
 8011f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f5e:	f003 0302 	and.w	r3, r3, #2
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	d101      	bne.n	8011f6a <LL_RCC_LSE_IsReady+0x16>
 8011f66:	2301      	movs	r3, #1
 8011f68:	e000      	b.n	8011f6c <LL_RCC_LSE_IsReady+0x18>
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	40021000 	.word	0x40021000

08011f7c <LL_RCC_GetSysClkSource>:
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011f80:	4b04      	ldr	r3, [pc, #16]	; (8011f94 <LL_RCC_GetSysClkSource+0x18>)
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	f003 030c 	and.w	r3, r3, #12
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	40021000 	.word	0x40021000

08011f98 <LL_RCC_GetAHBPrescaler>:
{
 8011f98:	b480      	push	{r7}
 8011f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8011f9c:	4b04      	ldr	r3, [pc, #16]	; (8011fb0 <LL_RCC_GetAHBPrescaler+0x18>)
 8011f9e:	689b      	ldr	r3, [r3, #8]
 8011fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop
 8011fb0:	40021000 	.word	0x40021000

08011fb4 <LL_RCC_GetAPB1Prescaler>:
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8011fb8:	4b04      	ldr	r3, [pc, #16]	; (8011fcc <LL_RCC_GetAPB1Prescaler+0x18>)
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	40021000 	.word	0x40021000

08011fd0 <LL_RCC_GetAPB2Prescaler>:
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011fd4:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8011fd6:	689b      	ldr	r3, [r3, #8]
 8011fd8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	40021000 	.word	0x40021000

08011fec <LL_RCC_GetUSARTClockSource>:
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8011ff4:	4b06      	ldr	r3, [pc, #24]	; (8012010 <LL_RCC_GetUSARTClockSource+0x24>)
 8011ff6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	401a      	ands	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	041b      	lsls	r3, r3, #16
 8012002:	4313      	orrs	r3, r2
}
 8012004:	4618      	mov	r0, r3
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr
 8012010:	40021000 	.word	0x40021000

08012014 <LL_RCC_GetUARTClockSource>:
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 801201c:	4b06      	ldr	r3, [pc, #24]	; (8012038 <LL_RCC_GetUARTClockSource+0x24>)
 801201e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	401a      	ands	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	041b      	lsls	r3, r3, #16
 801202a:	4313      	orrs	r3, r2
}
 801202c:	4618      	mov	r0, r3
 801202e:	370c      	adds	r7, #12
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	40021000 	.word	0x40021000

0801203c <LL_RCC_PLL_GetMainSource>:
{
 801203c:	b480      	push	{r7}
 801203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8012040:	4b04      	ldr	r3, [pc, #16]	; (8012054 <LL_RCC_PLL_GetMainSource+0x18>)
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	f003 0303 	and.w	r3, r3, #3
}
 8012048:	4618      	mov	r0, r3
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	40021000 	.word	0x40021000

08012058 <LL_RCC_PLL_GetN>:
{
 8012058:	b480      	push	{r7}
 801205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801205c:	4b04      	ldr	r3, [pc, #16]	; (8012070 <LL_RCC_PLL_GetN+0x18>)
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	0a1b      	lsrs	r3, r3, #8
 8012062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8012066:	4618      	mov	r0, r3
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	40021000 	.word	0x40021000

08012074 <LL_RCC_PLL_GetR>:
{
 8012074:	b480      	push	{r7}
 8012076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8012078:	4b04      	ldr	r3, [pc, #16]	; (801208c <LL_RCC_PLL_GetR+0x18>)
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8012080:	4618      	mov	r0, r3
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr
 801208a:	bf00      	nop
 801208c:	40021000 	.word	0x40021000

08012090 <LL_RCC_PLL_GetDivider>:
{
 8012090:	b480      	push	{r7}
 8012092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8012094:	4b04      	ldr	r3, [pc, #16]	; (80120a8 <LL_RCC_PLL_GetDivider+0x18>)
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801209c:	4618      	mov	r0, r3
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	40021000 	.word	0x40021000

080120ac <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b03      	cmp	r3, #3
 80120bc:	d132      	bne.n	8012124 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7ff ff94 	bl	8011fec <LL_RCC_GetUSARTClockSource>
 80120c4:	4603      	mov	r3, r0
 80120c6:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80120ca:	d016      	beq.n	80120fa <LL_RCC_GetUSARTClockFreq+0x4e>
 80120cc:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 80120d0:	d81c      	bhi.n	801210c <LL_RCC_GetUSARTClockFreq+0x60>
 80120d2:	4a52      	ldr	r2, [pc, #328]	; (801221c <LL_RCC_GetUSARTClockFreq+0x170>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d003      	beq.n	80120e0 <LL_RCC_GetUSARTClockFreq+0x34>
 80120d8:	4a51      	ldr	r2, [pc, #324]	; (8012220 <LL_RCC_GetUSARTClockFreq+0x174>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d004      	beq.n	80120e8 <LL_RCC_GetUSARTClockFreq+0x3c>
 80120de:	e015      	b.n	801210c <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80120e0:	f000 f934 	bl	801234c <RCC_GetSystemClockFreq>
 80120e4:	60f8      	str	r0, [r7, #12]
        break;
 80120e6:	e094      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80120e8:	f7ff ff20 	bl	8011f2c <LL_RCC_HSI_IsReady>
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f000 8082 	beq.w	80121f8 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 80120f4:	4b4b      	ldr	r3, [pc, #300]	; (8012224 <LL_RCC_GetUSARTClockFreq+0x178>)
 80120f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80120f8:	e07e      	b.n	80121f8 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80120fa:	f7ff ff2b 	bl	8011f54 <LL_RCC_LSE_IsReady>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d07b      	beq.n	80121fc <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8012104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012108:	60fb      	str	r3, [r7, #12]
        }
        break;
 801210a:	e077      	b.n	80121fc <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801210c:	f000 f91e 	bl	801234c <RCC_GetSystemClockFreq>
 8012110:	4603      	mov	r3, r0
 8012112:	4618      	mov	r0, r3
 8012114:	f000 f940 	bl	8012398 <RCC_GetHCLKClockFreq>
 8012118:	4603      	mov	r3, r0
 801211a:	4618      	mov	r0, r3
 801211c:	f000 f96a 	bl	80123f4 <RCC_GetPCLK2ClockFreq>
 8012120:	60f8      	str	r0, [r7, #12]
        break;
 8012122:	e076      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b0c      	cmp	r3, #12
 8012128:	d131      	bne.n	801218e <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7ff ff5e 	bl	8011fec <LL_RCC_GetUSARTClockSource>
 8012130:	4603      	mov	r3, r0
 8012132:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8012136:	d015      	beq.n	8012164 <LL_RCC_GetUSARTClockFreq+0xb8>
 8012138:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 801213c:	d81b      	bhi.n	8012176 <LL_RCC_GetUSARTClockFreq+0xca>
 801213e:	4a3a      	ldr	r2, [pc, #232]	; (8012228 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8012140:	4293      	cmp	r3, r2
 8012142:	d003      	beq.n	801214c <LL_RCC_GetUSARTClockFreq+0xa0>
 8012144:	4a39      	ldr	r2, [pc, #228]	; (801222c <LL_RCC_GetUSARTClockFreq+0x180>)
 8012146:	4293      	cmp	r3, r2
 8012148:	d004      	beq.n	8012154 <LL_RCC_GetUSARTClockFreq+0xa8>
 801214a:	e014      	b.n	8012176 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 801214c:	f000 f8fe 	bl	801234c <RCC_GetSystemClockFreq>
 8012150:	60f8      	str	r0, [r7, #12]
        break;
 8012152:	e05e      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8012154:	f7ff feea 	bl	8011f2c <LL_RCC_HSI_IsReady>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d050      	beq.n	8012200 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 801215e:	4b31      	ldr	r3, [pc, #196]	; (8012224 <LL_RCC_GetUSARTClockFreq+0x178>)
 8012160:	60fb      	str	r3, [r7, #12]
        }
        break;
 8012162:	e04d      	b.n	8012200 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8012164:	f7ff fef6 	bl	8011f54 <LL_RCC_LSE_IsReady>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d04a      	beq.n	8012204 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 801216e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012172:	60fb      	str	r3, [r7, #12]
        }
        break;
 8012174:	e046      	b.n	8012204 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8012176:	f000 f8e9 	bl	801234c <RCC_GetSystemClockFreq>
 801217a:	4603      	mov	r3, r0
 801217c:	4618      	mov	r0, r3
 801217e:	f000 f90b 	bl	8012398 <RCC_GetHCLKClockFreq>
 8012182:	4603      	mov	r3, r0
 8012184:	4618      	mov	r0, r3
 8012186:	f000 f91f 	bl	80123c8 <RCC_GetPCLK1ClockFreq>
 801218a:	60f8      	str	r0, [r7, #12]
        break;
 801218c:	e041      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2b30      	cmp	r3, #48	; 0x30
 8012192:	d139      	bne.n	8012208 <LL_RCC_GetUSARTClockFreq+0x15c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7ff ff29 	bl	8011fec <LL_RCC_GetUSARTClockSource>
 801219a:	4603      	mov	r3, r0
 801219c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80121a0:	d015      	beq.n	80121ce <LL_RCC_GetUSARTClockFreq+0x122>
 80121a2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80121a6:	d81b      	bhi.n	80121e0 <LL_RCC_GetUSARTClockFreq+0x134>
 80121a8:	4a21      	ldr	r2, [pc, #132]	; (8012230 <LL_RCC_GetUSARTClockFreq+0x184>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d003      	beq.n	80121b6 <LL_RCC_GetUSARTClockFreq+0x10a>
 80121ae:	4a21      	ldr	r2, [pc, #132]	; (8012234 <LL_RCC_GetUSARTClockFreq+0x188>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d004      	beq.n	80121be <LL_RCC_GetUSARTClockFreq+0x112>
 80121b4:	e014      	b.n	80121e0 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80121b6:	f000 f8c9 	bl	801234c <RCC_GetSystemClockFreq>
 80121ba:	60f8      	str	r0, [r7, #12]
          break;
 80121bc:	e029      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80121be:	f7ff feb5 	bl	8011f2c <LL_RCC_HSI_IsReady>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d021      	beq.n	801220c <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = HSI_VALUE;
 80121c8:	4b16      	ldr	r3, [pc, #88]	; (8012224 <LL_RCC_GetUSARTClockFreq+0x178>)
 80121ca:	60fb      	str	r3, [r7, #12]
          }
          break;
 80121cc:	e01e      	b.n	801220c <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80121ce:	f7ff fec1 	bl	8011f54 <LL_RCC_LSE_IsReady>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d01b      	beq.n	8012210 <LL_RCC_GetUSARTClockFreq+0x164>
          {
            usart_frequency = LSE_VALUE;
 80121d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121dc:	60fb      	str	r3, [r7, #12]
          }
          break;
 80121de:	e017      	b.n	8012210 <LL_RCC_GetUSARTClockFreq+0x164>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80121e0:	f000 f8b4 	bl	801234c <RCC_GetSystemClockFreq>
 80121e4:	4603      	mov	r3, r0
 80121e6:	4618      	mov	r0, r3
 80121e8:	f000 f8d6 	bl	8012398 <RCC_GetHCLKClockFreq>
 80121ec:	4603      	mov	r3, r0
 80121ee:	4618      	mov	r0, r3
 80121f0:	f000 f8ea 	bl	80123c8 <RCC_GetPCLK1ClockFreq>
 80121f4:	60f8      	str	r0, [r7, #12]
          break;
 80121f6:	e00c      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80121f8:	bf00      	nop
 80121fa:	e00a      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 80121fc:	bf00      	nop
 80121fe:	e008      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8012200:	bf00      	nop
 8012202:	e006      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
        break;
 8012204:	bf00      	nop
 8012206:	e004      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
      }
    }
 8012208:	bf00      	nop
 801220a:	e002      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 801220c:	bf00      	nop
 801220e:	e000      	b.n	8012212 <LL_RCC_GetUSARTClockFreq+0x166>
          break;
 8012210:	bf00      	nop
  }
  return usart_frequency;
 8012212:	68fb      	ldr	r3, [r7, #12]
}
 8012214:	4618      	mov	r0, r3
 8012216:	3710      	adds	r7, #16
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}
 801221c:	00030001 	.word	0x00030001
 8012220:	00030002 	.word	0x00030002
 8012224:	00f42400 	.word	0x00f42400
 8012228:	000c0004 	.word	0x000c0004
 801222c:	000c0008 	.word	0x000c0008
 8012230:	00300010 	.word	0x00300010
 8012234:	00300020 	.word	0x00300020

08012238 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8012240:	2300      	movs	r3, #0
 8012242:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2bc0      	cmp	r3, #192	; 0xc0
 8012248:	d131      	bne.n	80122ae <LL_RCC_GetUARTClockFreq+0x76>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff fee2 	bl	8012014 <LL_RCC_GetUARTClockSource>
 8012250:	4603      	mov	r3, r0
 8012252:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8012256:	d015      	beq.n	8012284 <LL_RCC_GetUARTClockFreq+0x4c>
 8012258:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 801225c:	d81b      	bhi.n	8012296 <LL_RCC_GetUARTClockFreq+0x5e>
 801225e:	4a36      	ldr	r2, [pc, #216]	; (8012338 <LL_RCC_GetUARTClockFreq+0x100>)
 8012260:	4293      	cmp	r3, r2
 8012262:	d003      	beq.n	801226c <LL_RCC_GetUARTClockFreq+0x34>
 8012264:	4a35      	ldr	r2, [pc, #212]	; (801233c <LL_RCC_GetUARTClockFreq+0x104>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d004      	beq.n	8012274 <LL_RCC_GetUARTClockFreq+0x3c>
 801226a:	e014      	b.n	8012296 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 801226c:	f000 f86e 	bl	801234c <RCC_GetSystemClockFreq>
 8012270:	60f8      	str	r0, [r7, #12]
        break;
 8012272:	e021      	b.n	80122b8 <LL_RCC_GetUARTClockFreq+0x80>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8012274:	f7ff fe5a 	bl	8011f2c <LL_RCC_HSI_IsReady>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d019      	beq.n	80122b2 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = HSI_VALUE;
 801227e:	4b30      	ldr	r3, [pc, #192]	; (8012340 <LL_RCC_GetUARTClockFreq+0x108>)
 8012280:	60fb      	str	r3, [r7, #12]
        }
        break;
 8012282:	e016      	b.n	80122b2 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8012284:	f7ff fe66 	bl	8011f54 <LL_RCC_LSE_IsReady>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d013      	beq.n	80122b6 <LL_RCC_GetUARTClockFreq+0x7e>
        {
          uart_frequency = LSE_VALUE;
 801228e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012292:	60fb      	str	r3, [r7, #12]
        }
        break;
 8012294:	e00f      	b.n	80122b6 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8012296:	f000 f859 	bl	801234c <RCC_GetSystemClockFreq>
 801229a:	4603      	mov	r3, r0
 801229c:	4618      	mov	r0, r3
 801229e:	f000 f87b 	bl	8012398 <RCC_GetHCLKClockFreq>
 80122a2:	4603      	mov	r3, r0
 80122a4:	4618      	mov	r0, r3
 80122a6:	f000 f88f 	bl	80123c8 <RCC_GetPCLK1ClockFreq>
 80122aa:	60f8      	str	r0, [r7, #12]
        break;
 80122ac:	e004      	b.n	80122b8 <LL_RCC_GetUARTClockFreq+0x80>
    }
  }
 80122ae:	bf00      	nop
 80122b0:	e002      	b.n	80122b8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80122b2:	bf00      	nop
 80122b4:	e000      	b.n	80122b8 <LL_RCC_GetUARTClockFreq+0x80>
        break;
 80122b6:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80122be:	d131      	bne.n	8012324 <LL_RCC_GetUARTClockFreq+0xec>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7ff fea7 	bl	8012014 <LL_RCC_GetUARTClockSource>
 80122c6:	4603      	mov	r3, r0
 80122c8:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80122cc:	d015      	beq.n	80122fa <LL_RCC_GetUARTClockFreq+0xc2>
 80122ce:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80122d2:	d81b      	bhi.n	801230c <LL_RCC_GetUARTClockFreq+0xd4>
 80122d4:	4a1b      	ldr	r2, [pc, #108]	; (8012344 <LL_RCC_GetUARTClockFreq+0x10c>)
 80122d6:	4293      	cmp	r3, r2
 80122d8:	d003      	beq.n	80122e2 <LL_RCC_GetUARTClockFreq+0xaa>
 80122da:	4a1b      	ldr	r2, [pc, #108]	; (8012348 <LL_RCC_GetUARTClockFreq+0x110>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d004      	beq.n	80122ea <LL_RCC_GetUARTClockFreq+0xb2>
 80122e0:	e014      	b.n	801230c <LL_RCC_GetUARTClockFreq+0xd4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80122e2:	f000 f833 	bl	801234c <RCC_GetSystemClockFreq>
 80122e6:	60f8      	str	r0, [r7, #12]
        break;
 80122e8:	e021      	b.n	801232e <LL_RCC_GetUARTClockFreq+0xf6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80122ea:	f7ff fe1f 	bl	8011f2c <LL_RCC_HSI_IsReady>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d019      	beq.n	8012328 <LL_RCC_GetUARTClockFreq+0xf0>
        {
          uart_frequency = HSI_VALUE;
 80122f4:	4b12      	ldr	r3, [pc, #72]	; (8012340 <LL_RCC_GetUARTClockFreq+0x108>)
 80122f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80122f8:	e016      	b.n	8012328 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80122fa:	f7ff fe2b 	bl	8011f54 <LL_RCC_LSE_IsReady>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d013      	beq.n	801232c <LL_RCC_GetUARTClockFreq+0xf4>
        {
          uart_frequency = LSE_VALUE;
 8012304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012308:	60fb      	str	r3, [r7, #12]
        }
        break;
 801230a:	e00f      	b.n	801232c <LL_RCC_GetUARTClockFreq+0xf4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801230c:	f000 f81e 	bl	801234c <RCC_GetSystemClockFreq>
 8012310:	4603      	mov	r3, r0
 8012312:	4618      	mov	r0, r3
 8012314:	f000 f840 	bl	8012398 <RCC_GetHCLKClockFreq>
 8012318:	4603      	mov	r3, r0
 801231a:	4618      	mov	r0, r3
 801231c:	f000 f854 	bl	80123c8 <RCC_GetPCLK1ClockFreq>
 8012320:	60f8      	str	r0, [r7, #12]
        break;
 8012322:	e004      	b.n	801232e <LL_RCC_GetUARTClockFreq+0xf6>
    }
  }
 8012324:	bf00      	nop
 8012326:	e002      	b.n	801232e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 8012328:	bf00      	nop
 801232a:	e000      	b.n	801232e <LL_RCC_GetUARTClockFreq+0xf6>
        break;
 801232c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 801232e:	68fb      	ldr	r3, [r7, #12]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	00c00040 	.word	0x00c00040
 801233c:	00c00080 	.word	0x00c00080
 8012340:	00f42400 	.word	0x00f42400
 8012344:	03000100 	.word	0x03000100
 8012348:	03000200 	.word	0x03000200

0801234c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8012352:	f7ff fe13 	bl	8011f7c <LL_RCC_GetSysClkSource>
 8012356:	4603      	mov	r3, r0
 8012358:	2b0c      	cmp	r3, #12
 801235a:	d00c      	beq.n	8012376 <RCC_GetSystemClockFreq+0x2a>
 801235c:	2b0c      	cmp	r3, #12
 801235e:	d80e      	bhi.n	801237e <RCC_GetSystemClockFreq+0x32>
 8012360:	2b04      	cmp	r3, #4
 8012362:	d002      	beq.n	801236a <RCC_GetSystemClockFreq+0x1e>
 8012364:	2b08      	cmp	r3, #8
 8012366:	d003      	beq.n	8012370 <RCC_GetSystemClockFreq+0x24>
 8012368:	e009      	b.n	801237e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 801236a:	4b09      	ldr	r3, [pc, #36]	; (8012390 <RCC_GetSystemClockFreq+0x44>)
 801236c:	607b      	str	r3, [r7, #4]
      break;
 801236e:	e009      	b.n	8012384 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8012370:	4b08      	ldr	r3, [pc, #32]	; (8012394 <RCC_GetSystemClockFreq+0x48>)
 8012372:	607b      	str	r3, [r7, #4]
      break;
 8012374:	e006      	b.n	8012384 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8012376:	f000 f853 	bl	8012420 <RCC_PLL_GetFreqDomain_SYS>
 801237a:	6078      	str	r0, [r7, #4]
      break;
 801237c:	e002      	b.n	8012384 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 801237e:	4b04      	ldr	r3, [pc, #16]	; (8012390 <RCC_GetSystemClockFreq+0x44>)
 8012380:	607b      	str	r3, [r7, #4]
      break;
 8012382:	bf00      	nop
  }

  return frequency;
 8012384:	687b      	ldr	r3, [r7, #4]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3708      	adds	r7, #8
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	00f42400 	.word	0x00f42400
 8012394:	007a1200 	.word	0x007a1200

08012398 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80123a0:	f7ff fdfa 	bl	8011f98 <LL_RCC_GetAHBPrescaler>
 80123a4:	4603      	mov	r3, r0
 80123a6:	091b      	lsrs	r3, r3, #4
 80123a8:	f003 030f 	and.w	r3, r3, #15
 80123ac:	4a05      	ldr	r2, [pc, #20]	; (80123c4 <RCC_GetHCLKClockFreq+0x2c>)
 80123ae:	5cd3      	ldrb	r3, [r2, r3]
 80123b0:	f003 031f 	and.w	r3, r3, #31
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	080197b4 	.word	0x080197b4

080123c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80123d0:	f7ff fdf0 	bl	8011fb4 <LL_RCC_GetAPB1Prescaler>
 80123d4:	4603      	mov	r3, r0
 80123d6:	0a1b      	lsrs	r3, r3, #8
 80123d8:	4a05      	ldr	r2, [pc, #20]	; (80123f0 <RCC_GetPCLK1ClockFreq+0x28>)
 80123da:	5cd3      	ldrb	r3, [r2, r3]
 80123dc:	f003 031f 	and.w	r3, r3, #31
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	080197c4 	.word	0x080197c4

080123f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80123fc:	f7ff fde8 	bl	8011fd0 <LL_RCC_GetAPB2Prescaler>
 8012400:	4603      	mov	r3, r0
 8012402:	0adb      	lsrs	r3, r3, #11
 8012404:	4a05      	ldr	r2, [pc, #20]	; (801241c <RCC_GetPCLK2ClockFreq+0x28>)
 8012406:	5cd3      	ldrb	r3, [r2, r3]
 8012408:	f003 031f 	and.w	r3, r3, #31
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012412:	4618      	mov	r0, r3
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	080197c4 	.word	0x080197c4

08012420 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8012426:	f7ff fe09 	bl	801203c <LL_RCC_PLL_GetMainSource>
 801242a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	2b02      	cmp	r3, #2
 8012430:	d003      	beq.n	801243a <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	2b03      	cmp	r3, #3
 8012436:	d003      	beq.n	8012440 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8012438:	e005      	b.n	8012446 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 801243a:	4b11      	ldr	r3, [pc, #68]	; (8012480 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 801243c:	607b      	str	r3, [r7, #4]
      break;
 801243e:	e005      	b.n	801244c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8012440:	4b10      	ldr	r3, [pc, #64]	; (8012484 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8012442:	607b      	str	r3, [r7, #4]
      break;
 8012444:	e002      	b.n	801244c <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8012446:	4b0e      	ldr	r3, [pc, #56]	; (8012480 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8012448:	607b      	str	r3, [r7, #4]
      break;
 801244a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 801244c:	f7ff fe04 	bl	8012058 <LL_RCC_PLL_GetN>
 8012450:	4602      	mov	r2, r0
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	fb03 f402 	mul.w	r4, r3, r2
 8012458:	f7ff fe1a 	bl	8012090 <LL_RCC_PLL_GetDivider>
 801245c:	4603      	mov	r3, r0
 801245e:	091b      	lsrs	r3, r3, #4
 8012460:	3301      	adds	r3, #1
 8012462:	fbb4 f4f3 	udiv	r4, r4, r3
 8012466:	f7ff fe05 	bl	8012074 <LL_RCC_PLL_GetR>
 801246a:	4603      	mov	r3, r0
 801246c:	0e5b      	lsrs	r3, r3, #25
 801246e:	3301      	adds	r3, #1
 8012470:	005b      	lsls	r3, r3, #1
 8012472:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8012476:	4618      	mov	r0, r3
 8012478:	370c      	adds	r7, #12
 801247a:	46bd      	mov	sp, r7
 801247c:	bd90      	pop	{r4, r7, pc}
 801247e:	bf00      	nop
 8012480:	00f42400 	.word	0x00f42400
 8012484:	007a1200 	.word	0x007a1200

08012488 <LL_SPI_IsEnabled>:
{
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012498:	2b40      	cmp	r3, #64	; 0x40
 801249a:	d101      	bne.n	80124a0 <LL_SPI_IsEnabled+0x18>
 801249c:	2301      	movs	r3, #1
 801249e:	e000      	b.n	80124a2 <LL_SPI_IsEnabled+0x1a>
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <LL_SPI_SetCRCPolynomial>:
{
 80124ae:	b480      	push	{r7}
 80124b0:	b083      	sub	sp, #12
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	461a      	mov	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	611a      	str	r2, [r3, #16]
}
 80124c2:	bf00      	nop
 80124c4:	370c      	adds	r7, #12
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr

080124ce <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b084      	sub	sp, #16
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80124d8:	2301      	movs	r3, #1
 80124da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff ffd3 	bl	8012488 <LL_SPI_IsEnabled>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d13b      	bne.n	8012560 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80124f0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80124f4:	683a      	ldr	r2, [r7, #0]
 80124f6:	6811      	ldr	r1, [r2, #0]
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	6852      	ldr	r2, [r2, #4]
 80124fc:	4311      	orrs	r1, r2
 80124fe:	683a      	ldr	r2, [r7, #0]
 8012500:	68d2      	ldr	r2, [r2, #12]
 8012502:	4311      	orrs	r1, r2
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	6912      	ldr	r2, [r2, #16]
 8012508:	4311      	orrs	r1, r2
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	6952      	ldr	r2, [r2, #20]
 801250e:	4311      	orrs	r1, r2
 8012510:	683a      	ldr	r2, [r7, #0]
 8012512:	6992      	ldr	r2, [r2, #24]
 8012514:	4311      	orrs	r1, r2
 8012516:	683a      	ldr	r2, [r7, #0]
 8012518:	69d2      	ldr	r2, [r2, #28]
 801251a:	4311      	orrs	r1, r2
 801251c:	683a      	ldr	r2, [r7, #0]
 801251e:	6a12      	ldr	r2, [r2, #32]
 8012520:	430a      	orrs	r2, r1
 8012522:	431a      	orrs	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012530:	f023 0304 	bic.w	r3, r3, #4
 8012534:	683a      	ldr	r2, [r7, #0]
 8012536:	6891      	ldr	r1, [r2, #8]
 8012538:	683a      	ldr	r2, [r7, #0]
 801253a:	6952      	ldr	r2, [r2, #20]
 801253c:	0c12      	lsrs	r2, r2, #16
 801253e:	430a      	orrs	r2, r1
 8012540:	431a      	orrs	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	6a1b      	ldr	r3, [r3, #32]
 801254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801254e:	d105      	bne.n	801255c <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012554:	4619      	mov	r1, r3
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff ffa9 	bl	80124ae <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 801255c:	2300      	movs	r3, #0
 801255e:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	69db      	ldr	r3, [r3, #28]
 8012564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 801256c:	7bfb      	ldrb	r3, [r7, #15]
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <LL_TIM_SetPrescaler>:
{
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	683a      	ldr	r2, [r7, #0]
 8012584:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012586:	bf00      	nop
 8012588:	370c      	adds	r7, #12
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <LL_TIM_SetAutoReload>:
{
 8012592:	b480      	push	{r7}
 8012594:	b083      	sub	sp, #12
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
 801259a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	683a      	ldr	r2, [r7, #0]
 80125a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80125a2:	bf00      	nop
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr

080125ae <LL_TIM_SetRepetitionCounter>:
{
 80125ae:	b480      	push	{r7}
 80125b0:	b083      	sub	sp, #12
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
 80125b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80125be:	bf00      	nop
 80125c0:	370c      	adds	r7, #12
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr

080125ca <LL_TIM_OC_SetCompareCH1>:
{
 80125ca:	b480      	push	{r7}
 80125cc:	b083      	sub	sp, #12
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
 80125d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80125da:	bf00      	nop
 80125dc:	370c      	adds	r7, #12
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr

080125e6 <LL_TIM_OC_SetCompareCH2>:
{
 80125e6:	b480      	push	{r7}
 80125e8:	b083      	sub	sp, #12
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
 80125ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	683a      	ldr	r2, [r7, #0]
 80125f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80125f6:	bf00      	nop
 80125f8:	370c      	adds	r7, #12
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr

08012602 <LL_TIM_OC_SetCompareCH3>:
{
 8012602:	b480      	push	{r7}
 8012604:	b083      	sub	sp, #12
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8012612:	bf00      	nop
 8012614:	370c      	adds	r7, #12
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr

0801261e <LL_TIM_OC_SetCompareCH4>:
{
 801261e:	b480      	push	{r7}
 8012620:	b083      	sub	sp, #12
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	683a      	ldr	r2, [r7, #0]
 801262c:	641a      	str	r2, [r3, #64]	; 0x40
}
 801262e:	bf00      	nop
 8012630:	370c      	adds	r7, #12
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr

0801263a <LL_TIM_OC_SetCompareCH5>:
{
 801263a:	b480      	push	{r7}
 801263c:	b083      	sub	sp, #12
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	683a      	ldr	r2, [r7, #0]
 801264c:	649a      	str	r2, [r3, #72]	; 0x48
}
 801264e:	bf00      	nop
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr

0801265a <LL_TIM_OC_SetCompareCH6>:
{
 801265a:	b480      	push	{r7}
 801265c:	b083      	sub	sp, #12
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	683a      	ldr	r2, [r7, #0]
 8012668:	64da      	str	r2, [r3, #76]	; 0x4c
}
 801266a:	bf00      	nop
 801266c:	370c      	adds	r7, #12
 801266e:	46bd      	mov	sp, r7
 8012670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012674:	4770      	bx	lr

08012676 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8012676:	b480      	push	{r7}
 8012678:	b083      	sub	sp, #12
 801267a:	af00      	add	r7, sp, #0
 801267c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	695b      	ldr	r3, [r3, #20]
 8012682:	f043 0201 	orr.w	r2, r3, #1
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	615a      	str	r2, [r3, #20]
}
 801268a:	bf00      	nop
 801268c:	370c      	adds	r7, #12
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr
	...

08012698 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4a43      	ldr	r2, [pc, #268]	; (80127b8 <LL_TIM_Init+0x120>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d017      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126b6:	d013      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	4a40      	ldr	r2, [pc, #256]	; (80127bc <LL_TIM_Init+0x124>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d00f      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4a3f      	ldr	r2, [pc, #252]	; (80127c0 <LL_TIM_Init+0x128>)
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d00b      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4a3e      	ldr	r2, [pc, #248]	; (80127c4 <LL_TIM_Init+0x12c>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d007      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4a3d      	ldr	r2, [pc, #244]	; (80127c8 <LL_TIM_Init+0x130>)
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d003      	beq.n	80126e0 <LL_TIM_Init+0x48>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4a3c      	ldr	r2, [pc, #240]	; (80127cc <LL_TIM_Init+0x134>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d106      	bne.n	80126ee <LL_TIM_Init+0x56>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4a31      	ldr	r2, [pc, #196]	; (80127b8 <LL_TIM_Init+0x120>)
 80126f2:	4293      	cmp	r3, r2
 80126f4:	d023      	beq.n	801273e <LL_TIM_Init+0xa6>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126fc:	d01f      	beq.n	801273e <LL_TIM_Init+0xa6>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4a2e      	ldr	r2, [pc, #184]	; (80127bc <LL_TIM_Init+0x124>)
 8012702:	4293      	cmp	r3, r2
 8012704:	d01b      	beq.n	801273e <LL_TIM_Init+0xa6>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4a2d      	ldr	r2, [pc, #180]	; (80127c0 <LL_TIM_Init+0x128>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d017      	beq.n	801273e <LL_TIM_Init+0xa6>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4a2c      	ldr	r2, [pc, #176]	; (80127c4 <LL_TIM_Init+0x12c>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d013      	beq.n	801273e <LL_TIM_Init+0xa6>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4a2b      	ldr	r2, [pc, #172]	; (80127c8 <LL_TIM_Init+0x130>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d00f      	beq.n	801273e <LL_TIM_Init+0xa6>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4a2b      	ldr	r2, [pc, #172]	; (80127d0 <LL_TIM_Init+0x138>)
 8012722:	4293      	cmp	r3, r2
 8012724:	d00b      	beq.n	801273e <LL_TIM_Init+0xa6>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4a2a      	ldr	r2, [pc, #168]	; (80127d4 <LL_TIM_Init+0x13c>)
 801272a:	4293      	cmp	r3, r2
 801272c:	d007      	beq.n	801273e <LL_TIM_Init+0xa6>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4a29      	ldr	r2, [pc, #164]	; (80127d8 <LL_TIM_Init+0x140>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d003      	beq.n	801273e <LL_TIM_Init+0xa6>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4a24      	ldr	r2, [pc, #144]	; (80127cc <LL_TIM_Init+0x134>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d106      	bne.n	801274c <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	4313      	orrs	r3, r2
 801274a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	689b      	ldr	r3, [r3, #8]
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff ff1a 	bl	8012592 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff ff06 	bl	8012576 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4a12      	ldr	r2, [pc, #72]	; (80127b8 <LL_TIM_Init+0x120>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d013      	beq.n	801279a <LL_TIM_Init+0x102>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4a14      	ldr	r2, [pc, #80]	; (80127c8 <LL_TIM_Init+0x130>)
 8012776:	4293      	cmp	r3, r2
 8012778:	d00f      	beq.n	801279a <LL_TIM_Init+0x102>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4a14      	ldr	r2, [pc, #80]	; (80127d0 <LL_TIM_Init+0x138>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d00b      	beq.n	801279a <LL_TIM_Init+0x102>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a13      	ldr	r2, [pc, #76]	; (80127d4 <LL_TIM_Init+0x13c>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d007      	beq.n	801279a <LL_TIM_Init+0x102>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a12      	ldr	r2, [pc, #72]	; (80127d8 <LL_TIM_Init+0x140>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d003      	beq.n	801279a <LL_TIM_Init+0x102>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4a0d      	ldr	r2, [pc, #52]	; (80127cc <LL_TIM_Init+0x134>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d105      	bne.n	80127a6 <LL_TIM_Init+0x10e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	4619      	mov	r1, r3
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff ff04 	bl	80125ae <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff ff65 	bl	8012676 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	40012c00 	.word	0x40012c00
 80127bc:	40000400 	.word	0x40000400
 80127c0:	40000800 	.word	0x40000800
 80127c4:	40000c00 	.word	0x40000c00
 80127c8:	40013400 	.word	0x40013400
 80127cc:	40015000 	.word	0x40015000
 80127d0:	40014000 	.word	0x40014000
 80127d4:	40014400 	.word	0x40014400
 80127d8:	40014800 	.word	0x40014800

080127dc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b086      	sub	sp, #24
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127f2:	d045      	beq.n	8012880 <LL_TIM_OC_Init+0xa4>
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127fa:	d848      	bhi.n	801288e <LL_TIM_OC_Init+0xb2>
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012802:	d036      	beq.n	8012872 <LL_TIM_OC_Init+0x96>
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801280a:	d840      	bhi.n	801288e <LL_TIM_OC_Init+0xb2>
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012812:	d027      	beq.n	8012864 <LL_TIM_OC_Init+0x88>
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801281a:	d838      	bhi.n	801288e <LL_TIM_OC_Init+0xb2>
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012822:	d018      	beq.n	8012856 <LL_TIM_OC_Init+0x7a>
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801282a:	d830      	bhi.n	801288e <LL_TIM_OC_Init+0xb2>
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b01      	cmp	r3, #1
 8012830:	d003      	beq.n	801283a <LL_TIM_OC_Init+0x5e>
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	2b10      	cmp	r3, #16
 8012836:	d007      	beq.n	8012848 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8012838:	e029      	b.n	801288e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 801283a:	6879      	ldr	r1, [r7, #4]
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f000 f8bf 	bl	80129c0 <OC1Config>
 8012842:	4603      	mov	r3, r0
 8012844:	75fb      	strb	r3, [r7, #23]
      break;
 8012846:	e023      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8012848:	6879      	ldr	r1, [r7, #4]
 801284a:	68f8      	ldr	r0, [r7, #12]
 801284c:	f000 f93e 	bl	8012acc <OC2Config>
 8012850:	4603      	mov	r3, r0
 8012852:	75fb      	strb	r3, [r7, #23]
      break;
 8012854:	e01c      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8012856:	6879      	ldr	r1, [r7, #4]
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f000 f9c1 	bl	8012be0 <OC3Config>
 801285e:	4603      	mov	r3, r0
 8012860:	75fb      	strb	r3, [r7, #23]
      break;
 8012862:	e015      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8012864:	6879      	ldr	r1, [r7, #4]
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f000 fa44 	bl	8012cf4 <OC4Config>
 801286c:	4603      	mov	r3, r0
 801286e:	75fb      	strb	r3, [r7, #23]
      break;
 8012870:	e00e      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f000 fac7 	bl	8012e08 <OC5Config>
 801287a:	4603      	mov	r3, r0
 801287c:	75fb      	strb	r3, [r7, #23]
      break;
 801287e:	e007      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8012880:	6879      	ldr	r1, [r7, #4]
 8012882:	68f8      	ldr	r0, [r7, #12]
 8012884:	f000 fb2a 	bl	8012edc <OC6Config>
 8012888:	4603      	mov	r3, r0
 801288a:	75fb      	strb	r3, [r7, #23]
      break;
 801288c:	e000      	b.n	8012890 <LL_TIM_OC_Init+0xb4>
      break;
 801288e:	bf00      	nop
  }

  return result;
 8012890:	7dfb      	ldrb	r3, [r7, #23]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3718      	adds	r7, #24
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
	...

0801289c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 801289c:	b480      	push	{r7}
 801289e:	b085      	sub	sp, #20
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	7b12      	ldrb	r2, [r2, #12]
 80128b4:	4313      	orrs	r3, r2
 80128b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	689b      	ldr	r3, [r3, #8]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	4313      	orrs	r3, r2
 80128d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	4313      	orrs	r3, r2
 80128e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128e8:	683a      	ldr	r2, [r7, #0]
 80128ea:	89d2      	ldrh	r2, [r2, #14]
 80128ec:	4313      	orrs	r3, r2
 80128ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	4313      	orrs	r3, r2
 80128fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012908:	4313      	orrs	r3, r2
 801290a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012916:	4313      	orrs	r3, r2
 8012918:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4a25      	ldr	r2, [pc, #148]	; (80129b4 <LL_TIM_BDTR_Init+0x118>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d007      	beq.n	8012932 <LL_TIM_BDTR_Init+0x96>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4a24      	ldr	r2, [pc, #144]	; (80129b8 <LL_TIM_BDTR_Init+0x11c>)
 8012926:	4293      	cmp	r3, r2
 8012928:	d003      	beq.n	8012932 <LL_TIM_BDTR_Init+0x96>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4a23      	ldr	r2, [pc, #140]	; (80129bc <LL_TIM_BDTR_Init+0x120>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d10d      	bne.n	801294e <LL_TIM_BDTR_Init+0xb2>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	4313      	orrs	r3, r2
 801293e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	699b      	ldr	r3, [r3, #24]
 801294a:	4313      	orrs	r3, r2
 801294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4a18      	ldr	r2, [pc, #96]	; (80129b4 <LL_TIM_BDTR_Init+0x118>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d007      	beq.n	8012966 <LL_TIM_BDTR_Init+0xca>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4a17      	ldr	r2, [pc, #92]	; (80129b8 <LL_TIM_BDTR_Init+0x11c>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d003      	beq.n	8012966 <LL_TIM_BDTR_Init+0xca>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4a16      	ldr	r2, [pc, #88]	; (80129bc <LL_TIM_BDTR_Init+0x120>)
 8012962:	4293      	cmp	r3, r2
 8012964:	d11b      	bne.n	801299e <LL_TIM_BDTR_Init+0x102>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012970:	4313      	orrs	r3, r2
 8012972:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	69db      	ldr	r3, [r3, #28]
 801297e:	4313      	orrs	r3, r2
 8012980:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	6a1b      	ldr	r3, [r3, #32]
 801298c:	4313      	orrs	r3, r2
 801298e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299a:	4313      	orrs	r3, r2
 801299c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	68fa      	ldr	r2, [r7, #12]
 80129a2:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	40012c00 	.word	0x40012c00
 80129b8:	40013400 	.word	0x40013400
 80129bc:	40015000 	.word	0x40015000

080129c0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a1b      	ldr	r3, [r3, #32]
 80129ce:	f023 0201 	bic.w	r2, r3, #1
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6a1b      	ldr	r3, [r3, #32]
 80129da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	699b      	ldr	r3, [r3, #24]
 80129e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f023 0303 	bic.w	r3, r3, #3
 80129ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80129f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	6812      	ldr	r2, [r2, #0]
 80129fe:	4313      	orrs	r3, r2
 8012a00:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	f023 0202 	bic.w	r2, r3, #2
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	691b      	ldr	r3, [r3, #16]
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	f023 0201 	bic.w	r2, r3, #1
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	4313      	orrs	r3, r2
 8012a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4a24      	ldr	r2, [pc, #144]	; (8012ab4 <OC1Config+0xf4>)
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d013      	beq.n	8012a4e <OC1Config+0x8e>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4a23      	ldr	r2, [pc, #140]	; (8012ab8 <OC1Config+0xf8>)
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d00f      	beq.n	8012a4e <OC1Config+0x8e>
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	4a22      	ldr	r2, [pc, #136]	; (8012abc <OC1Config+0xfc>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d00b      	beq.n	8012a4e <OC1Config+0x8e>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	4a21      	ldr	r2, [pc, #132]	; (8012ac0 <OC1Config+0x100>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d007      	beq.n	8012a4e <OC1Config+0x8e>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4a20      	ldr	r2, [pc, #128]	; (8012ac4 <OC1Config+0x104>)
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d003      	beq.n	8012a4e <OC1Config+0x8e>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4a1f      	ldr	r2, [pc, #124]	; (8012ac8 <OC1Config+0x108>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d11e      	bne.n	8012a8c <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f023 0208 	bic.w	r2, r3, #8
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	695b      	ldr	r3, [r3, #20]
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	f023 0204 	bic.w	r2, r3, #4
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	699b      	ldr	r3, [r3, #24]
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	005b      	lsls	r3, r3, #1
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	693a      	ldr	r2, [r7, #16]
 8012a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff fd93 	bl	80125ca <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012aaa:	2300      	movs	r3, #0
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3718      	adds	r7, #24
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	40012c00 	.word	0x40012c00
 8012ab8:	40013400 	.word	0x40013400
 8012abc:	40014000 	.word	0x40014000
 8012ac0:	40014400 	.word	0x40014400
 8012ac4:	40014800 	.word	0x40014800
 8012ac8:	40015000 	.word	0x40015000

08012acc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	f023 0210 	bic.w	r2, r3, #16
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6a1b      	ldr	r3, [r3, #32]
 8012ae6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	699b      	ldr	r3, [r3, #24]
 8012af2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b06:	683a      	ldr	r2, [r7, #0]
 8012b08:	6812      	ldr	r2, [r2, #0]
 8012b0a:	0212      	lsls	r2, r2, #8
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	f023 0220 	bic.w	r2, r3, #32
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	691b      	ldr	r3, [r3, #16]
 8012b1a:	011b      	lsls	r3, r3, #4
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	f023 0210 	bic.w	r2, r3, #16
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	011b      	lsls	r3, r3, #4
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4a25      	ldr	r2, [pc, #148]	; (8012bc8 <OC2Config+0xfc>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d013      	beq.n	8012b60 <OC2Config+0x94>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	4a24      	ldr	r2, [pc, #144]	; (8012bcc <OC2Config+0x100>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d00f      	beq.n	8012b60 <OC2Config+0x94>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4a23      	ldr	r2, [pc, #140]	; (8012bd0 <OC2Config+0x104>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d00b      	beq.n	8012b60 <OC2Config+0x94>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4a22      	ldr	r2, [pc, #136]	; (8012bd4 <OC2Config+0x108>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d007      	beq.n	8012b60 <OC2Config+0x94>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	4a21      	ldr	r2, [pc, #132]	; (8012bd8 <OC2Config+0x10c>)
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d003      	beq.n	8012b60 <OC2Config+0x94>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4a20      	ldr	r2, [pc, #128]	; (8012bdc <OC2Config+0x110>)
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d11f      	bne.n	8012ba0 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	695b      	ldr	r3, [r3, #20]
 8012b6a:	019b      	lsls	r3, r3, #6
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	689b      	ldr	r3, [r3, #8]
 8012b7a:	019b      	lsls	r3, r3, #6
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	699b      	ldr	r3, [r3, #24]
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	4313      	orrs	r3, r2
 8012b8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	69db      	ldr	r3, [r3, #28]
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	693a      	ldr	r2, [r7, #16]
 8012ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f7ff fd17 	bl	80125e6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	697a      	ldr	r2, [r7, #20]
 8012bbc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012bbe:	2300      	movs	r3, #0
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3718      	adds	r7, #24
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	40012c00 	.word	0x40012c00
 8012bcc:	40013400 	.word	0x40013400
 8012bd0:	40014000 	.word	0x40014000
 8012bd4:	40014400 	.word	0x40014400
 8012bd8:	40014800 	.word	0x40014800
 8012bdc:	40015000 	.word	0x40015000

08012be0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6a1b      	ldr	r3, [r3, #32]
 8012bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6a1b      	ldr	r3, [r3, #32]
 8012bfa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	69db      	ldr	r3, [r3, #28]
 8012c06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f023 0303 	bic.w	r3, r3, #3
 8012c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c1a:	683a      	ldr	r2, [r7, #0]
 8012c1c:	6812      	ldr	r2, [r2, #0]
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	691b      	ldr	r3, [r3, #16]
 8012c2c:	021b      	lsls	r3, r3, #8
 8012c2e:	4313      	orrs	r3, r2
 8012c30:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	021b      	lsls	r3, r3, #8
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	4a25      	ldr	r2, [pc, #148]	; (8012cdc <OC3Config+0xfc>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d013      	beq.n	8012c72 <OC3Config+0x92>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4a24      	ldr	r2, [pc, #144]	; (8012ce0 <OC3Config+0x100>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d00f      	beq.n	8012c72 <OC3Config+0x92>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4a23      	ldr	r2, [pc, #140]	; (8012ce4 <OC3Config+0x104>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d00b      	beq.n	8012c72 <OC3Config+0x92>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4a22      	ldr	r2, [pc, #136]	; (8012ce8 <OC3Config+0x108>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d007      	beq.n	8012c72 <OC3Config+0x92>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	4a21      	ldr	r2, [pc, #132]	; (8012cec <OC3Config+0x10c>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d003      	beq.n	8012c72 <OC3Config+0x92>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4a20      	ldr	r2, [pc, #128]	; (8012cf0 <OC3Config+0x110>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d11f      	bne.n	8012cb2 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	695b      	ldr	r3, [r3, #20]
 8012c7c:	029b      	lsls	r3, r3, #10
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	029b      	lsls	r3, r3, #10
 8012c8e:	4313      	orrs	r3, r2
 8012c90:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	699b      	ldr	r3, [r3, #24]
 8012c9c:	011b      	lsls	r3, r3, #4
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	69db      	ldr	r3, [r3, #28]
 8012cac:	015b      	lsls	r3, r3, #5
 8012cae:	4313      	orrs	r3, r2
 8012cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	693a      	ldr	r2, [r7, #16]
 8012cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff fc9c 	bl	8012602 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3718      	adds	r7, #24
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	40012c00 	.word	0x40012c00
 8012ce0:	40013400 	.word	0x40013400
 8012ce4:	40014000 	.word	0x40014000
 8012ce8:	40014400 	.word	0x40014400
 8012cec:	40014800 	.word	0x40014800
 8012cf0:	40015000 	.word	0x40015000

08012cf4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b086      	sub	sp, #24
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6a1b      	ldr	r3, [r3, #32]
 8012d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6a1b      	ldr	r3, [r3, #32]
 8012d0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	69db      	ldr	r3, [r3, #28]
 8012d1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d2e:	683a      	ldr	r2, [r7, #0]
 8012d30:	6812      	ldr	r2, [r2, #0]
 8012d32:	0212      	lsls	r2, r2, #8
 8012d34:	4313      	orrs	r3, r2
 8012d36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	691b      	ldr	r3, [r3, #16]
 8012d42:	031b      	lsls	r3, r3, #12
 8012d44:	4313      	orrs	r3, r2
 8012d46:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	031b      	lsls	r3, r3, #12
 8012d54:	4313      	orrs	r3, r2
 8012d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4a25      	ldr	r2, [pc, #148]	; (8012df0 <OC4Config+0xfc>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d013      	beq.n	8012d88 <OC4Config+0x94>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	4a24      	ldr	r2, [pc, #144]	; (8012df4 <OC4Config+0x100>)
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d00f      	beq.n	8012d88 <OC4Config+0x94>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4a23      	ldr	r2, [pc, #140]	; (8012df8 <OC4Config+0x104>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d00b      	beq.n	8012d88 <OC4Config+0x94>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	4a22      	ldr	r2, [pc, #136]	; (8012dfc <OC4Config+0x108>)
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d007      	beq.n	8012d88 <OC4Config+0x94>
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	4a21      	ldr	r2, [pc, #132]	; (8012e00 <OC4Config+0x10c>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d003      	beq.n	8012d88 <OC4Config+0x94>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a20      	ldr	r2, [pc, #128]	; (8012e04 <OC4Config+0x110>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d11f      	bne.n	8012dc8 <OC4Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	695b      	ldr	r3, [r3, #20]
 8012d92:	039b      	lsls	r3, r3, #14
 8012d94:	4313      	orrs	r3, r2
 8012d96:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	039b      	lsls	r3, r3, #14
 8012da4:	4313      	orrs	r3, r2
 8012da6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	699b      	ldr	r3, [r3, #24]
 8012db2:	019b      	lsls	r3, r3, #6
 8012db4:	4313      	orrs	r3, r2
 8012db6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	69db      	ldr	r3, [r3, #28]
 8012dc2:	01db      	lsls	r3, r3, #7
 8012dc4:	4313      	orrs	r3, r2
 8012dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	693a      	ldr	r2, [r7, #16]
 8012dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	4619      	mov	r1, r3
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f7ff fc1f 	bl	801261e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012de6:	2300      	movs	r3, #0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3718      	adds	r7, #24
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	40012c00 	.word	0x40012c00
 8012df4:	40013400 	.word	0x40013400
 8012df8:	40014000 	.word	0x40014000
 8012dfc:	40014400 	.word	0x40014400
 8012e00:	40014800 	.word	0x40014800
 8012e04:	40015000 	.word	0x40015000

08012e08 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6a1b      	ldr	r3, [r3, #32]
 8012e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6a1b      	ldr	r3, [r3, #32]
 8012e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e28:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e34:	683a      	ldr	r2, [r7, #0]
 8012e36:	6812      	ldr	r2, [r2, #0]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	691b      	ldr	r3, [r3, #16]
 8012e46:	041b      	lsls	r3, r3, #16
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	041b      	lsls	r3, r3, #16
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4a19      	ldr	r2, [pc, #100]	; (8012ec4 <OC5Config+0xbc>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d013      	beq.n	8012e8c <OC5Config+0x84>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4a18      	ldr	r2, [pc, #96]	; (8012ec8 <OC5Config+0xc0>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d00f      	beq.n	8012e8c <OC5Config+0x84>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	4a17      	ldr	r2, [pc, #92]	; (8012ecc <OC5Config+0xc4>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d00b      	beq.n	8012e8c <OC5Config+0x84>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	4a16      	ldr	r2, [pc, #88]	; (8012ed0 <OC5Config+0xc8>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d007      	beq.n	8012e8c <OC5Config+0x84>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	4a15      	ldr	r2, [pc, #84]	; (8012ed4 <OC5Config+0xcc>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d003      	beq.n	8012e8c <OC5Config+0x84>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	4a14      	ldr	r2, [pc, #80]	; (8012ed8 <OC5Config+0xd0>)
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d109      	bne.n	8012ea0 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	699b      	ldr	r3, [r3, #24]
 8012e98:	021b      	lsls	r3, r3, #8
 8012e9a:	431a      	orrs	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	68ba      	ldr	r2, [r7, #8]
 8012ea4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	4619      	mov	r1, r3
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f7ff fbc4 	bl	801263a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012eb8:	2300      	movs	r3, #0
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	40012c00 	.word	0x40012c00
 8012ec8:	40013400 	.word	0x40013400
 8012ecc:	40014000 	.word	0x40014000
 8012ed0:	40014400 	.word	0x40014400
 8012ed4:	40014800 	.word	0x40014800
 8012ed8:	40015000 	.word	0x40015000

08012edc <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6a1b      	ldr	r3, [r3, #32]
 8012eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a1b      	ldr	r3, [r3, #32]
 8012ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012efc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	6812      	ldr	r2, [r2, #0]
 8012f0c:	0212      	lsls	r2, r2, #8
 8012f0e:	4313      	orrs	r3, r2
 8012f10:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	691b      	ldr	r3, [r3, #16]
 8012f1c:	051b      	lsls	r3, r3, #20
 8012f1e:	4313      	orrs	r3, r2
 8012f20:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	051b      	lsls	r3, r3, #20
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4a18      	ldr	r2, [pc, #96]	; (8012f98 <OC6Config+0xbc>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d013      	beq.n	8012f62 <OC6Config+0x86>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	4a17      	ldr	r2, [pc, #92]	; (8012f9c <OC6Config+0xc0>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d00f      	beq.n	8012f62 <OC6Config+0x86>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4a16      	ldr	r2, [pc, #88]	; (8012fa0 <OC6Config+0xc4>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d00b      	beq.n	8012f62 <OC6Config+0x86>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4a15      	ldr	r2, [pc, #84]	; (8012fa4 <OC6Config+0xc8>)
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	d007      	beq.n	8012f62 <OC6Config+0x86>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	4a14      	ldr	r2, [pc, #80]	; (8012fa8 <OC6Config+0xcc>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d003      	beq.n	8012f62 <OC6Config+0x86>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4a13      	ldr	r2, [pc, #76]	; (8012fac <OC6Config+0xd0>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d109      	bne.n	8012f76 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	029b      	lsls	r3, r3, #10
 8012f70:	431a      	orrs	r2, r3
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	68ba      	ldr	r2, [r7, #8]
 8012f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	4619      	mov	r1, r3
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7ff fb69 	bl	801265a <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3710      	adds	r7, #16
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	40012c00 	.word	0x40012c00
 8012f9c:	40013400 	.word	0x40013400
 8012fa0:	40014000 	.word	0x40014000
 8012fa4:	40014400 	.word	0x40014400
 8012fa8:	40014800 	.word	0x40014800
 8012fac:	40015000 	.word	0x40015000

08012fb0 <LL_USART_IsEnabled>:
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	f003 0301 	and.w	r3, r3, #1
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d101      	bne.n	8012fc8 <LL_USART_IsEnabled+0x18>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e000      	b.n	8012fca <LL_USART_IsEnabled+0x1a>
 8012fc8:	2300      	movs	r3, #0
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	370c      	adds	r7, #12
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr

08012fd6 <LL_USART_SetPrescaler>:
{
 8012fd6:	b480      	push	{r7}
 8012fd8:	b083      	sub	sp, #12
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	6078      	str	r0, [r7, #4]
 8012fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe4:	f023 030f 	bic.w	r3, r3, #15
 8012fe8:	683a      	ldr	r2, [r7, #0]
 8012fea:	b292      	uxth	r2, r2
 8012fec:	431a      	orrs	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012ff2:	bf00      	nop
 8012ff4:	370c      	adds	r7, #12
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffc:	4770      	bx	lr

08012ffe <LL_USART_SetStopBitsLength>:
{
 8012ffe:	b480      	push	{r7}
 8013000:	b083      	sub	sp, #12
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	431a      	orrs	r2, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	605a      	str	r2, [r3, #4]
}
 8013018:	bf00      	nop
 801301a:	370c      	adds	r7, #12
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <LL_USART_SetHWFlowCtrl>:
{
 8013024:	b480      	push	{r7}
 8013026:	b083      	sub	sp, #12
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	689b      	ldr	r3, [r3, #8]
 8013032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	431a      	orrs	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	609a      	str	r2, [r3, #8]
}
 801303e:	bf00      	nop
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
	...

0801304c <LL_USART_SetBaudRate>:
{
 801304c:	b480      	push	{r7}
 801304e:	b087      	sub	sp, #28
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
 8013058:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b0b      	cmp	r3, #11
 801305e:	d83c      	bhi.n	80130da <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8013060:	6a3b      	ldr	r3, [r7, #32]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d039      	beq.n	80130da <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801306c:	d122      	bne.n	80130b4 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	b2db      	uxtb	r3, r3
 8013072:	461a      	mov	r2, r3
 8013074:	4b1c      	ldr	r3, [pc, #112]	; (80130e8 <LL_USART_SetBaudRate+0x9c>)
 8013076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801307a:	68ba      	ldr	r2, [r7, #8]
 801307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013080:	005a      	lsls	r2, r3, #1
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	085b      	lsrs	r3, r3, #1
 8013086:	441a      	add	r2, r3
 8013088:	6a3b      	ldr	r3, [r7, #32]
 801308a:	fbb2 f3f3 	udiv	r3, r2, r3
 801308e:	b29b      	uxth	r3, r3
 8013090:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8013092:	697a      	ldr	r2, [r7, #20]
 8013094:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8013098:	4013      	ands	r3, r2
 801309a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	085b      	lsrs	r3, r3, #1
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	f003 0307 	and.w	r3, r3, #7
 80130a6:	693a      	ldr	r2, [r7, #16]
 80130a8:	4313      	orrs	r3, r2
 80130aa:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	693a      	ldr	r2, [r7, #16]
 80130b0:	60da      	str	r2, [r3, #12]
}
 80130b2:	e012      	b.n	80130da <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	b2db      	uxtb	r3, r3
 80130b8:	461a      	mov	r2, r3
 80130ba:	4b0b      	ldr	r3, [pc, #44]	; (80130e8 <LL_USART_SetBaudRate+0x9c>)
 80130bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	085b      	lsrs	r3, r3, #1
 80130ca:	441a      	add	r2, r3
 80130cc:	6a3b      	ldr	r3, [r7, #32]
 80130ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	461a      	mov	r2, r3
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	60da      	str	r2, [r3, #12]
}
 80130da:	bf00      	nop
 80130dc:	371c      	adds	r7, #28
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	08019a94 	.word	0x08019a94

080130ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af02      	add	r7, sp, #8
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80130f6:	2301      	movs	r3, #1
 80130f8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80130fa:	2300      	movs	r3, #0
 80130fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7ff ff56 	bl	8012fb0 <LL_USART_IsEnabled>
 8013104:	4603      	mov	r3, r0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d165      	bne.n	80131d6 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	4b34      	ldr	r3, [pc, #208]	; (80131e0 <LL_USART_Init+0xf4>)
 8013110:	4013      	ands	r3, r2
 8013112:	683a      	ldr	r2, [r7, #0]
 8013114:	6891      	ldr	r1, [r2, #8]
 8013116:	683a      	ldr	r2, [r7, #0]
 8013118:	6912      	ldr	r2, [r2, #16]
 801311a:	4311      	orrs	r1, r2
 801311c:	683a      	ldr	r2, [r7, #0]
 801311e:	6952      	ldr	r2, [r2, #20]
 8013120:	4311      	orrs	r1, r2
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	69d2      	ldr	r2, [r2, #28]
 8013126:	430a      	orrs	r2, r1
 8013128:	431a      	orrs	r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	68db      	ldr	r3, [r3, #12]
 8013132:	4619      	mov	r1, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7ff ff62 	bl	8012ffe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	699b      	ldr	r3, [r3, #24]
 801313e:	4619      	mov	r1, r3
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7ff ff6f 	bl	8013024 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4a26      	ldr	r2, [pc, #152]	; (80131e4 <LL_USART_Init+0xf8>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d104      	bne.n	8013158 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 801314e:	2003      	movs	r0, #3
 8013150:	f7fe ffac 	bl	80120ac <LL_RCC_GetUSARTClockFreq>
 8013154:	60b8      	str	r0, [r7, #8]
 8013156:	e023      	b.n	80131a0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4a23      	ldr	r2, [pc, #140]	; (80131e8 <LL_USART_Init+0xfc>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d104      	bne.n	801316a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8013160:	200c      	movs	r0, #12
 8013162:	f7fe ffa3 	bl	80120ac <LL_RCC_GetUSARTClockFreq>
 8013166:	60b8      	str	r0, [r7, #8]
 8013168:	e01a      	b.n	80131a0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a1f      	ldr	r2, [pc, #124]	; (80131ec <LL_USART_Init+0x100>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d104      	bne.n	801317c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8013172:	2030      	movs	r0, #48	; 0x30
 8013174:	f7fe ff9a 	bl	80120ac <LL_RCC_GetUSARTClockFreq>
 8013178:	60b8      	str	r0, [r7, #8]
 801317a:	e011      	b.n	80131a0 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4a1c      	ldr	r2, [pc, #112]	; (80131f0 <LL_USART_Init+0x104>)
 8013180:	4293      	cmp	r3, r2
 8013182:	d104      	bne.n	801318e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8013184:	20c0      	movs	r0, #192	; 0xc0
 8013186:	f7ff f857 	bl	8012238 <LL_RCC_GetUARTClockFreq>
 801318a:	60b8      	str	r0, [r7, #8]
 801318c:	e008      	b.n	80131a0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	4a18      	ldr	r2, [pc, #96]	; (80131f4 <LL_USART_Init+0x108>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d104      	bne.n	80131a0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8013196:	f44f 7040 	mov.w	r0, #768	; 0x300
 801319a:	f7ff f84d 	bl	8012238 <LL_RCC_GetUARTClockFreq>
 801319e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d011      	beq.n	80131ca <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00d      	beq.n	80131ca <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 80131ae:	2300      	movs	r3, #0
 80131b0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	69d9      	ldr	r1, [r3, #28]
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	460b      	mov	r3, r1
 80131c2:	68b9      	ldr	r1, [r7, #8]
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f7ff ff41 	bl	801304c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4619      	mov	r1, r3
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f7ff ff00 	bl	8012fd6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3710      	adds	r7, #16
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	efff69f3 	.word	0xefff69f3
 80131e4:	40013800 	.word	0x40013800
 80131e8:	40004400 	.word	0x40004400
 80131ec:	40004800 	.word	0x40004800
 80131f0:	40004c00 	.word	0x40004c00
 80131f4:	40005000 	.word	0x40005000

080131f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	fbb2 f3f3 	udiv	r3, r2, r3
 801320a:	4a07      	ldr	r2, [pc, #28]	; (8013228 <LL_InitTick+0x30>)
 801320c:	3b01      	subs	r3, #1
 801320e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8013210:	4b05      	ldr	r3, [pc, #20]	; (8013228 <LL_InitTick+0x30>)
 8013212:	2200      	movs	r2, #0
 8013214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013216:	4b04      	ldr	r3, [pc, #16]	; (8013228 <LL_InitTick+0x30>)
 8013218:	2205      	movs	r2, #5
 801321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 801321c:	bf00      	nop
 801321e:	370c      	adds	r7, #12
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr
 8013228:	e000e010 	.word	0xe000e010

0801322c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8013234:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7ff ffdd 	bl	80131f8 <LL_InitTick>
}
 801323e:	bf00      	nop
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
	...

08013248 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8013250:	4b10      	ldr	r3, [pc, #64]	; (8013294 <LL_mDelay+0x4c>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8013256:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013262:	d00c      	beq.n	801327e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	3301      	adds	r3, #1
 8013268:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 801326a:	e008      	b.n	801327e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 801326c:	4b09      	ldr	r3, [pc, #36]	; (8013294 <LL_mDelay+0x4c>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	3b01      	subs	r3, #1
 801327c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d1f3      	bne.n	801326c <LL_mDelay+0x24>
    }
  }
}
 8013284:	bf00      	nop
 8013286:	bf00      	nop
 8013288:	3714      	adds	r7, #20
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	e000e010 	.word	0xe000e010

08013298 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80132a0:	4a04      	ldr	r2, [pc, #16]	; (80132b4 <LL_SetSystemCoreClock+0x1c>)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6013      	str	r3, [r2, #0]
}
 80132a6:	bf00      	nop
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	20000004 	.word	0x20000004

080132b8 <__errno>:
 80132b8:	4b01      	ldr	r3, [pc, #4]	; (80132c0 <__errno+0x8>)
 80132ba:	6818      	ldr	r0, [r3, #0]
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	20000020 	.word	0x20000020

080132c4 <__libc_init_array>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	4d0d      	ldr	r5, [pc, #52]	; (80132fc <__libc_init_array+0x38>)
 80132c8:	4c0d      	ldr	r4, [pc, #52]	; (8013300 <__libc_init_array+0x3c>)
 80132ca:	1b64      	subs	r4, r4, r5
 80132cc:	10a4      	asrs	r4, r4, #2
 80132ce:	2600      	movs	r6, #0
 80132d0:	42a6      	cmp	r6, r4
 80132d2:	d109      	bne.n	80132e8 <__libc_init_array+0x24>
 80132d4:	4d0b      	ldr	r5, [pc, #44]	; (8013304 <__libc_init_array+0x40>)
 80132d6:	4c0c      	ldr	r4, [pc, #48]	; (8013308 <__libc_init_array+0x44>)
 80132d8:	f005 ffc8 	bl	801926c <_init>
 80132dc:	1b64      	subs	r4, r4, r5
 80132de:	10a4      	asrs	r4, r4, #2
 80132e0:	2600      	movs	r6, #0
 80132e2:	42a6      	cmp	r6, r4
 80132e4:	d105      	bne.n	80132f2 <__libc_init_array+0x2e>
 80132e6:	bd70      	pop	{r4, r5, r6, pc}
 80132e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80132ec:	4798      	blx	r3
 80132ee:	3601      	adds	r6, #1
 80132f0:	e7ee      	b.n	80132d0 <__libc_init_array+0xc>
 80132f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80132f6:	4798      	blx	r3
 80132f8:	3601      	adds	r6, #1
 80132fa:	e7f2      	b.n	80132e2 <__libc_init_array+0x1e>
 80132fc:	0801a150 	.word	0x0801a150
 8013300:	0801a150 	.word	0x0801a150
 8013304:	0801a150 	.word	0x0801a150
 8013308:	0801a154 	.word	0x0801a154

0801330c <memcpy>:
 801330c:	440a      	add	r2, r1
 801330e:	4291      	cmp	r1, r2
 8013310:	f100 33ff 	add.w	r3, r0, #4294967295
 8013314:	d100      	bne.n	8013318 <memcpy+0xc>
 8013316:	4770      	bx	lr
 8013318:	b510      	push	{r4, lr}
 801331a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801331e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013322:	4291      	cmp	r1, r2
 8013324:	d1f9      	bne.n	801331a <memcpy+0xe>
 8013326:	bd10      	pop	{r4, pc}

08013328 <memset>:
 8013328:	4402      	add	r2, r0
 801332a:	4603      	mov	r3, r0
 801332c:	4293      	cmp	r3, r2
 801332e:	d100      	bne.n	8013332 <memset+0xa>
 8013330:	4770      	bx	lr
 8013332:	f803 1b01 	strb.w	r1, [r3], #1
 8013336:	e7f9      	b.n	801332c <memset+0x4>

08013338 <__cvt>:
 8013338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801333c:	ec55 4b10 	vmov	r4, r5, d0
 8013340:	2d00      	cmp	r5, #0
 8013342:	460e      	mov	r6, r1
 8013344:	4619      	mov	r1, r3
 8013346:	462b      	mov	r3, r5
 8013348:	bfbb      	ittet	lt
 801334a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801334e:	461d      	movlt	r5, r3
 8013350:	2300      	movge	r3, #0
 8013352:	232d      	movlt	r3, #45	; 0x2d
 8013354:	700b      	strb	r3, [r1, #0]
 8013356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801335c:	4691      	mov	r9, r2
 801335e:	f023 0820 	bic.w	r8, r3, #32
 8013362:	bfbc      	itt	lt
 8013364:	4622      	movlt	r2, r4
 8013366:	4614      	movlt	r4, r2
 8013368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801336c:	d005      	beq.n	801337a <__cvt+0x42>
 801336e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013372:	d100      	bne.n	8013376 <__cvt+0x3e>
 8013374:	3601      	adds	r6, #1
 8013376:	2102      	movs	r1, #2
 8013378:	e000      	b.n	801337c <__cvt+0x44>
 801337a:	2103      	movs	r1, #3
 801337c:	ab03      	add	r3, sp, #12
 801337e:	9301      	str	r3, [sp, #4]
 8013380:	ab02      	add	r3, sp, #8
 8013382:	9300      	str	r3, [sp, #0]
 8013384:	ec45 4b10 	vmov	d0, r4, r5
 8013388:	4653      	mov	r3, sl
 801338a:	4632      	mov	r2, r6
 801338c:	f001 ffe0 	bl	8015350 <_dtoa_r>
 8013390:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013394:	4607      	mov	r7, r0
 8013396:	d102      	bne.n	801339e <__cvt+0x66>
 8013398:	f019 0f01 	tst.w	r9, #1
 801339c:	d022      	beq.n	80133e4 <__cvt+0xac>
 801339e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133a2:	eb07 0906 	add.w	r9, r7, r6
 80133a6:	d110      	bne.n	80133ca <__cvt+0x92>
 80133a8:	783b      	ldrb	r3, [r7, #0]
 80133aa:	2b30      	cmp	r3, #48	; 0x30
 80133ac:	d10a      	bne.n	80133c4 <__cvt+0x8c>
 80133ae:	2200      	movs	r2, #0
 80133b0:	2300      	movs	r3, #0
 80133b2:	4620      	mov	r0, r4
 80133b4:	4629      	mov	r1, r5
 80133b6:	f7ed fbaf 	bl	8000b18 <__aeabi_dcmpeq>
 80133ba:	b918      	cbnz	r0, 80133c4 <__cvt+0x8c>
 80133bc:	f1c6 0601 	rsb	r6, r6, #1
 80133c0:	f8ca 6000 	str.w	r6, [sl]
 80133c4:	f8da 3000 	ldr.w	r3, [sl]
 80133c8:	4499      	add	r9, r3
 80133ca:	2200      	movs	r2, #0
 80133cc:	2300      	movs	r3, #0
 80133ce:	4620      	mov	r0, r4
 80133d0:	4629      	mov	r1, r5
 80133d2:	f7ed fba1 	bl	8000b18 <__aeabi_dcmpeq>
 80133d6:	b108      	cbz	r0, 80133dc <__cvt+0xa4>
 80133d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80133dc:	2230      	movs	r2, #48	; 0x30
 80133de:	9b03      	ldr	r3, [sp, #12]
 80133e0:	454b      	cmp	r3, r9
 80133e2:	d307      	bcc.n	80133f4 <__cvt+0xbc>
 80133e4:	9b03      	ldr	r3, [sp, #12]
 80133e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133e8:	1bdb      	subs	r3, r3, r7
 80133ea:	4638      	mov	r0, r7
 80133ec:	6013      	str	r3, [r2, #0]
 80133ee:	b004      	add	sp, #16
 80133f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f4:	1c59      	adds	r1, r3, #1
 80133f6:	9103      	str	r1, [sp, #12]
 80133f8:	701a      	strb	r2, [r3, #0]
 80133fa:	e7f0      	b.n	80133de <__cvt+0xa6>

080133fc <__exponent>:
 80133fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133fe:	4603      	mov	r3, r0
 8013400:	2900      	cmp	r1, #0
 8013402:	bfb8      	it	lt
 8013404:	4249      	neglt	r1, r1
 8013406:	f803 2b02 	strb.w	r2, [r3], #2
 801340a:	bfb4      	ite	lt
 801340c:	222d      	movlt	r2, #45	; 0x2d
 801340e:	222b      	movge	r2, #43	; 0x2b
 8013410:	2909      	cmp	r1, #9
 8013412:	7042      	strb	r2, [r0, #1]
 8013414:	dd2a      	ble.n	801346c <__exponent+0x70>
 8013416:	f10d 0407 	add.w	r4, sp, #7
 801341a:	46a4      	mov	ip, r4
 801341c:	270a      	movs	r7, #10
 801341e:	46a6      	mov	lr, r4
 8013420:	460a      	mov	r2, r1
 8013422:	fb91 f6f7 	sdiv	r6, r1, r7
 8013426:	fb07 1516 	mls	r5, r7, r6, r1
 801342a:	3530      	adds	r5, #48	; 0x30
 801342c:	2a63      	cmp	r2, #99	; 0x63
 801342e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013432:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013436:	4631      	mov	r1, r6
 8013438:	dcf1      	bgt.n	801341e <__exponent+0x22>
 801343a:	3130      	adds	r1, #48	; 0x30
 801343c:	f1ae 0502 	sub.w	r5, lr, #2
 8013440:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013444:	1c44      	adds	r4, r0, #1
 8013446:	4629      	mov	r1, r5
 8013448:	4561      	cmp	r1, ip
 801344a:	d30a      	bcc.n	8013462 <__exponent+0x66>
 801344c:	f10d 0209 	add.w	r2, sp, #9
 8013450:	eba2 020e 	sub.w	r2, r2, lr
 8013454:	4565      	cmp	r5, ip
 8013456:	bf88      	it	hi
 8013458:	2200      	movhi	r2, #0
 801345a:	4413      	add	r3, r2
 801345c:	1a18      	subs	r0, r3, r0
 801345e:	b003      	add	sp, #12
 8013460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013466:	f804 2f01 	strb.w	r2, [r4, #1]!
 801346a:	e7ed      	b.n	8013448 <__exponent+0x4c>
 801346c:	2330      	movs	r3, #48	; 0x30
 801346e:	3130      	adds	r1, #48	; 0x30
 8013470:	7083      	strb	r3, [r0, #2]
 8013472:	70c1      	strb	r1, [r0, #3]
 8013474:	1d03      	adds	r3, r0, #4
 8013476:	e7f1      	b.n	801345c <__exponent+0x60>

08013478 <_printf_float>:
 8013478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347c:	ed2d 8b02 	vpush	{d8}
 8013480:	b08d      	sub	sp, #52	; 0x34
 8013482:	460c      	mov	r4, r1
 8013484:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013488:	4616      	mov	r6, r2
 801348a:	461f      	mov	r7, r3
 801348c:	4605      	mov	r5, r0
 801348e:	f003 fa73 	bl	8016978 <_localeconv_r>
 8013492:	f8d0 a000 	ldr.w	sl, [r0]
 8013496:	4650      	mov	r0, sl
 8013498:	f7ec fec2 	bl	8000220 <strlen>
 801349c:	2300      	movs	r3, #0
 801349e:	930a      	str	r3, [sp, #40]	; 0x28
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	9305      	str	r3, [sp, #20]
 80134a4:	f8d8 3000 	ldr.w	r3, [r8]
 80134a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134ac:	3307      	adds	r3, #7
 80134ae:	f023 0307 	bic.w	r3, r3, #7
 80134b2:	f103 0208 	add.w	r2, r3, #8
 80134b6:	f8c8 2000 	str.w	r2, [r8]
 80134ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80134c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80134c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134ca:	9307      	str	r3, [sp, #28]
 80134cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80134d0:	ee08 0a10 	vmov	s16, r0
 80134d4:	4b9f      	ldr	r3, [pc, #636]	; (8013754 <_printf_float+0x2dc>)
 80134d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134da:	f04f 32ff 	mov.w	r2, #4294967295
 80134de:	f7ed fb4d 	bl	8000b7c <__aeabi_dcmpun>
 80134e2:	bb88      	cbnz	r0, 8013548 <_printf_float+0xd0>
 80134e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134e8:	4b9a      	ldr	r3, [pc, #616]	; (8013754 <_printf_float+0x2dc>)
 80134ea:	f04f 32ff 	mov.w	r2, #4294967295
 80134ee:	f7ed fb27 	bl	8000b40 <__aeabi_dcmple>
 80134f2:	bb48      	cbnz	r0, 8013548 <_printf_float+0xd0>
 80134f4:	2200      	movs	r2, #0
 80134f6:	2300      	movs	r3, #0
 80134f8:	4640      	mov	r0, r8
 80134fa:	4649      	mov	r1, r9
 80134fc:	f7ed fb16 	bl	8000b2c <__aeabi_dcmplt>
 8013500:	b110      	cbz	r0, 8013508 <_printf_float+0x90>
 8013502:	232d      	movs	r3, #45	; 0x2d
 8013504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013508:	4b93      	ldr	r3, [pc, #588]	; (8013758 <_printf_float+0x2e0>)
 801350a:	4894      	ldr	r0, [pc, #592]	; (801375c <_printf_float+0x2e4>)
 801350c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013510:	bf94      	ite	ls
 8013512:	4698      	movls	r8, r3
 8013514:	4680      	movhi	r8, r0
 8013516:	2303      	movs	r3, #3
 8013518:	6123      	str	r3, [r4, #16]
 801351a:	9b05      	ldr	r3, [sp, #20]
 801351c:	f023 0204 	bic.w	r2, r3, #4
 8013520:	6022      	str	r2, [r4, #0]
 8013522:	f04f 0900 	mov.w	r9, #0
 8013526:	9700      	str	r7, [sp, #0]
 8013528:	4633      	mov	r3, r6
 801352a:	aa0b      	add	r2, sp, #44	; 0x2c
 801352c:	4621      	mov	r1, r4
 801352e:	4628      	mov	r0, r5
 8013530:	f000 f9d8 	bl	80138e4 <_printf_common>
 8013534:	3001      	adds	r0, #1
 8013536:	f040 8090 	bne.w	801365a <_printf_float+0x1e2>
 801353a:	f04f 30ff 	mov.w	r0, #4294967295
 801353e:	b00d      	add	sp, #52	; 0x34
 8013540:	ecbd 8b02 	vpop	{d8}
 8013544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013548:	4642      	mov	r2, r8
 801354a:	464b      	mov	r3, r9
 801354c:	4640      	mov	r0, r8
 801354e:	4649      	mov	r1, r9
 8013550:	f7ed fb14 	bl	8000b7c <__aeabi_dcmpun>
 8013554:	b140      	cbz	r0, 8013568 <_printf_float+0xf0>
 8013556:	464b      	mov	r3, r9
 8013558:	2b00      	cmp	r3, #0
 801355a:	bfbc      	itt	lt
 801355c:	232d      	movlt	r3, #45	; 0x2d
 801355e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013562:	487f      	ldr	r0, [pc, #508]	; (8013760 <_printf_float+0x2e8>)
 8013564:	4b7f      	ldr	r3, [pc, #508]	; (8013764 <_printf_float+0x2ec>)
 8013566:	e7d1      	b.n	801350c <_printf_float+0x94>
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801356e:	9206      	str	r2, [sp, #24]
 8013570:	1c5a      	adds	r2, r3, #1
 8013572:	d13f      	bne.n	80135f4 <_printf_float+0x17c>
 8013574:	2306      	movs	r3, #6
 8013576:	6063      	str	r3, [r4, #4]
 8013578:	9b05      	ldr	r3, [sp, #20]
 801357a:	6861      	ldr	r1, [r4, #4]
 801357c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013580:	2300      	movs	r3, #0
 8013582:	9303      	str	r3, [sp, #12]
 8013584:	ab0a      	add	r3, sp, #40	; 0x28
 8013586:	e9cd b301 	strd	fp, r3, [sp, #4]
 801358a:	ab09      	add	r3, sp, #36	; 0x24
 801358c:	ec49 8b10 	vmov	d0, r8, r9
 8013590:	9300      	str	r3, [sp, #0]
 8013592:	6022      	str	r2, [r4, #0]
 8013594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013598:	4628      	mov	r0, r5
 801359a:	f7ff fecd 	bl	8013338 <__cvt>
 801359e:	9b06      	ldr	r3, [sp, #24]
 80135a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135a2:	2b47      	cmp	r3, #71	; 0x47
 80135a4:	4680      	mov	r8, r0
 80135a6:	d108      	bne.n	80135ba <_printf_float+0x142>
 80135a8:	1cc8      	adds	r0, r1, #3
 80135aa:	db02      	blt.n	80135b2 <_printf_float+0x13a>
 80135ac:	6863      	ldr	r3, [r4, #4]
 80135ae:	4299      	cmp	r1, r3
 80135b0:	dd41      	ble.n	8013636 <_printf_float+0x1be>
 80135b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80135b6:	fa5f fb8b 	uxtb.w	fp, fp
 80135ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135be:	d820      	bhi.n	8013602 <_printf_float+0x18a>
 80135c0:	3901      	subs	r1, #1
 80135c2:	465a      	mov	r2, fp
 80135c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80135c8:	9109      	str	r1, [sp, #36]	; 0x24
 80135ca:	f7ff ff17 	bl	80133fc <__exponent>
 80135ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135d0:	1813      	adds	r3, r2, r0
 80135d2:	2a01      	cmp	r2, #1
 80135d4:	4681      	mov	r9, r0
 80135d6:	6123      	str	r3, [r4, #16]
 80135d8:	dc02      	bgt.n	80135e0 <_printf_float+0x168>
 80135da:	6822      	ldr	r2, [r4, #0]
 80135dc:	07d2      	lsls	r2, r2, #31
 80135de:	d501      	bpl.n	80135e4 <_printf_float+0x16c>
 80135e0:	3301      	adds	r3, #1
 80135e2:	6123      	str	r3, [r4, #16]
 80135e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d09c      	beq.n	8013526 <_printf_float+0xae>
 80135ec:	232d      	movs	r3, #45	; 0x2d
 80135ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135f2:	e798      	b.n	8013526 <_printf_float+0xae>
 80135f4:	9a06      	ldr	r2, [sp, #24]
 80135f6:	2a47      	cmp	r2, #71	; 0x47
 80135f8:	d1be      	bne.n	8013578 <_printf_float+0x100>
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d1bc      	bne.n	8013578 <_printf_float+0x100>
 80135fe:	2301      	movs	r3, #1
 8013600:	e7b9      	b.n	8013576 <_printf_float+0xfe>
 8013602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013606:	d118      	bne.n	801363a <_printf_float+0x1c2>
 8013608:	2900      	cmp	r1, #0
 801360a:	6863      	ldr	r3, [r4, #4]
 801360c:	dd0b      	ble.n	8013626 <_printf_float+0x1ae>
 801360e:	6121      	str	r1, [r4, #16]
 8013610:	b913      	cbnz	r3, 8013618 <_printf_float+0x1a0>
 8013612:	6822      	ldr	r2, [r4, #0]
 8013614:	07d0      	lsls	r0, r2, #31
 8013616:	d502      	bpl.n	801361e <_printf_float+0x1a6>
 8013618:	3301      	adds	r3, #1
 801361a:	440b      	add	r3, r1
 801361c:	6123      	str	r3, [r4, #16]
 801361e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013620:	f04f 0900 	mov.w	r9, #0
 8013624:	e7de      	b.n	80135e4 <_printf_float+0x16c>
 8013626:	b913      	cbnz	r3, 801362e <_printf_float+0x1b6>
 8013628:	6822      	ldr	r2, [r4, #0]
 801362a:	07d2      	lsls	r2, r2, #31
 801362c:	d501      	bpl.n	8013632 <_printf_float+0x1ba>
 801362e:	3302      	adds	r3, #2
 8013630:	e7f4      	b.n	801361c <_printf_float+0x1a4>
 8013632:	2301      	movs	r3, #1
 8013634:	e7f2      	b.n	801361c <_printf_float+0x1a4>
 8013636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801363a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801363c:	4299      	cmp	r1, r3
 801363e:	db05      	blt.n	801364c <_printf_float+0x1d4>
 8013640:	6823      	ldr	r3, [r4, #0]
 8013642:	6121      	str	r1, [r4, #16]
 8013644:	07d8      	lsls	r0, r3, #31
 8013646:	d5ea      	bpl.n	801361e <_printf_float+0x1a6>
 8013648:	1c4b      	adds	r3, r1, #1
 801364a:	e7e7      	b.n	801361c <_printf_float+0x1a4>
 801364c:	2900      	cmp	r1, #0
 801364e:	bfd4      	ite	le
 8013650:	f1c1 0202 	rsble	r2, r1, #2
 8013654:	2201      	movgt	r2, #1
 8013656:	4413      	add	r3, r2
 8013658:	e7e0      	b.n	801361c <_printf_float+0x1a4>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	055a      	lsls	r2, r3, #21
 801365e:	d407      	bmi.n	8013670 <_printf_float+0x1f8>
 8013660:	6923      	ldr	r3, [r4, #16]
 8013662:	4642      	mov	r2, r8
 8013664:	4631      	mov	r1, r6
 8013666:	4628      	mov	r0, r5
 8013668:	47b8      	blx	r7
 801366a:	3001      	adds	r0, #1
 801366c:	d12c      	bne.n	80136c8 <_printf_float+0x250>
 801366e:	e764      	b.n	801353a <_printf_float+0xc2>
 8013670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013674:	f240 80e0 	bls.w	8013838 <_printf_float+0x3c0>
 8013678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801367c:	2200      	movs	r2, #0
 801367e:	2300      	movs	r3, #0
 8013680:	f7ed fa4a 	bl	8000b18 <__aeabi_dcmpeq>
 8013684:	2800      	cmp	r0, #0
 8013686:	d034      	beq.n	80136f2 <_printf_float+0x27a>
 8013688:	4a37      	ldr	r2, [pc, #220]	; (8013768 <_printf_float+0x2f0>)
 801368a:	2301      	movs	r3, #1
 801368c:	4631      	mov	r1, r6
 801368e:	4628      	mov	r0, r5
 8013690:	47b8      	blx	r7
 8013692:	3001      	adds	r0, #1
 8013694:	f43f af51 	beq.w	801353a <_printf_float+0xc2>
 8013698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801369c:	429a      	cmp	r2, r3
 801369e:	db02      	blt.n	80136a6 <_printf_float+0x22e>
 80136a0:	6823      	ldr	r3, [r4, #0]
 80136a2:	07d8      	lsls	r0, r3, #31
 80136a4:	d510      	bpl.n	80136c8 <_printf_float+0x250>
 80136a6:	ee18 3a10 	vmov	r3, s16
 80136aa:	4652      	mov	r2, sl
 80136ac:	4631      	mov	r1, r6
 80136ae:	4628      	mov	r0, r5
 80136b0:	47b8      	blx	r7
 80136b2:	3001      	adds	r0, #1
 80136b4:	f43f af41 	beq.w	801353a <_printf_float+0xc2>
 80136b8:	f04f 0800 	mov.w	r8, #0
 80136bc:	f104 091a 	add.w	r9, r4, #26
 80136c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c2:	3b01      	subs	r3, #1
 80136c4:	4543      	cmp	r3, r8
 80136c6:	dc09      	bgt.n	80136dc <_printf_float+0x264>
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	079b      	lsls	r3, r3, #30
 80136cc:	f100 8105 	bmi.w	80138da <_printf_float+0x462>
 80136d0:	68e0      	ldr	r0, [r4, #12]
 80136d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136d4:	4298      	cmp	r0, r3
 80136d6:	bfb8      	it	lt
 80136d8:	4618      	movlt	r0, r3
 80136da:	e730      	b.n	801353e <_printf_float+0xc6>
 80136dc:	2301      	movs	r3, #1
 80136de:	464a      	mov	r2, r9
 80136e0:	4631      	mov	r1, r6
 80136e2:	4628      	mov	r0, r5
 80136e4:	47b8      	blx	r7
 80136e6:	3001      	adds	r0, #1
 80136e8:	f43f af27 	beq.w	801353a <_printf_float+0xc2>
 80136ec:	f108 0801 	add.w	r8, r8, #1
 80136f0:	e7e6      	b.n	80136c0 <_printf_float+0x248>
 80136f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	dc39      	bgt.n	801376c <_printf_float+0x2f4>
 80136f8:	4a1b      	ldr	r2, [pc, #108]	; (8013768 <_printf_float+0x2f0>)
 80136fa:	2301      	movs	r3, #1
 80136fc:	4631      	mov	r1, r6
 80136fe:	4628      	mov	r0, r5
 8013700:	47b8      	blx	r7
 8013702:	3001      	adds	r0, #1
 8013704:	f43f af19 	beq.w	801353a <_printf_float+0xc2>
 8013708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801370c:	4313      	orrs	r3, r2
 801370e:	d102      	bne.n	8013716 <_printf_float+0x29e>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	07d9      	lsls	r1, r3, #31
 8013714:	d5d8      	bpl.n	80136c8 <_printf_float+0x250>
 8013716:	ee18 3a10 	vmov	r3, s16
 801371a:	4652      	mov	r2, sl
 801371c:	4631      	mov	r1, r6
 801371e:	4628      	mov	r0, r5
 8013720:	47b8      	blx	r7
 8013722:	3001      	adds	r0, #1
 8013724:	f43f af09 	beq.w	801353a <_printf_float+0xc2>
 8013728:	f04f 0900 	mov.w	r9, #0
 801372c:	f104 0a1a 	add.w	sl, r4, #26
 8013730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013732:	425b      	negs	r3, r3
 8013734:	454b      	cmp	r3, r9
 8013736:	dc01      	bgt.n	801373c <_printf_float+0x2c4>
 8013738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801373a:	e792      	b.n	8013662 <_printf_float+0x1ea>
 801373c:	2301      	movs	r3, #1
 801373e:	4652      	mov	r2, sl
 8013740:	4631      	mov	r1, r6
 8013742:	4628      	mov	r0, r5
 8013744:	47b8      	blx	r7
 8013746:	3001      	adds	r0, #1
 8013748:	f43f aef7 	beq.w	801353a <_printf_float+0xc2>
 801374c:	f109 0901 	add.w	r9, r9, #1
 8013750:	e7ee      	b.n	8013730 <_printf_float+0x2b8>
 8013752:	bf00      	nop
 8013754:	7fefffff 	.word	0x7fefffff
 8013758:	08019ac8 	.word	0x08019ac8
 801375c:	08019acc 	.word	0x08019acc
 8013760:	08019ad4 	.word	0x08019ad4
 8013764:	08019ad0 	.word	0x08019ad0
 8013768:	08019ad8 	.word	0x08019ad8
 801376c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801376e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013770:	429a      	cmp	r2, r3
 8013772:	bfa8      	it	ge
 8013774:	461a      	movge	r2, r3
 8013776:	2a00      	cmp	r2, #0
 8013778:	4691      	mov	r9, r2
 801377a:	dc37      	bgt.n	80137ec <_printf_float+0x374>
 801377c:	f04f 0b00 	mov.w	fp, #0
 8013780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013784:	f104 021a 	add.w	r2, r4, #26
 8013788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801378a:	9305      	str	r3, [sp, #20]
 801378c:	eba3 0309 	sub.w	r3, r3, r9
 8013790:	455b      	cmp	r3, fp
 8013792:	dc33      	bgt.n	80137fc <_printf_float+0x384>
 8013794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013798:	429a      	cmp	r2, r3
 801379a:	db3b      	blt.n	8013814 <_printf_float+0x39c>
 801379c:	6823      	ldr	r3, [r4, #0]
 801379e:	07da      	lsls	r2, r3, #31
 80137a0:	d438      	bmi.n	8013814 <_printf_float+0x39c>
 80137a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a4:	9a05      	ldr	r2, [sp, #20]
 80137a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137a8:	1a9a      	subs	r2, r3, r2
 80137aa:	eba3 0901 	sub.w	r9, r3, r1
 80137ae:	4591      	cmp	r9, r2
 80137b0:	bfa8      	it	ge
 80137b2:	4691      	movge	r9, r2
 80137b4:	f1b9 0f00 	cmp.w	r9, #0
 80137b8:	dc35      	bgt.n	8013826 <_printf_float+0x3ae>
 80137ba:	f04f 0800 	mov.w	r8, #0
 80137be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137c2:	f104 0a1a 	add.w	sl, r4, #26
 80137c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137ca:	1a9b      	subs	r3, r3, r2
 80137cc:	eba3 0309 	sub.w	r3, r3, r9
 80137d0:	4543      	cmp	r3, r8
 80137d2:	f77f af79 	ble.w	80136c8 <_printf_float+0x250>
 80137d6:	2301      	movs	r3, #1
 80137d8:	4652      	mov	r2, sl
 80137da:	4631      	mov	r1, r6
 80137dc:	4628      	mov	r0, r5
 80137de:	47b8      	blx	r7
 80137e0:	3001      	adds	r0, #1
 80137e2:	f43f aeaa 	beq.w	801353a <_printf_float+0xc2>
 80137e6:	f108 0801 	add.w	r8, r8, #1
 80137ea:	e7ec      	b.n	80137c6 <_printf_float+0x34e>
 80137ec:	4613      	mov	r3, r2
 80137ee:	4631      	mov	r1, r6
 80137f0:	4642      	mov	r2, r8
 80137f2:	4628      	mov	r0, r5
 80137f4:	47b8      	blx	r7
 80137f6:	3001      	adds	r0, #1
 80137f8:	d1c0      	bne.n	801377c <_printf_float+0x304>
 80137fa:	e69e      	b.n	801353a <_printf_float+0xc2>
 80137fc:	2301      	movs	r3, #1
 80137fe:	4631      	mov	r1, r6
 8013800:	4628      	mov	r0, r5
 8013802:	9205      	str	r2, [sp, #20]
 8013804:	47b8      	blx	r7
 8013806:	3001      	adds	r0, #1
 8013808:	f43f ae97 	beq.w	801353a <_printf_float+0xc2>
 801380c:	9a05      	ldr	r2, [sp, #20]
 801380e:	f10b 0b01 	add.w	fp, fp, #1
 8013812:	e7b9      	b.n	8013788 <_printf_float+0x310>
 8013814:	ee18 3a10 	vmov	r3, s16
 8013818:	4652      	mov	r2, sl
 801381a:	4631      	mov	r1, r6
 801381c:	4628      	mov	r0, r5
 801381e:	47b8      	blx	r7
 8013820:	3001      	adds	r0, #1
 8013822:	d1be      	bne.n	80137a2 <_printf_float+0x32a>
 8013824:	e689      	b.n	801353a <_printf_float+0xc2>
 8013826:	9a05      	ldr	r2, [sp, #20]
 8013828:	464b      	mov	r3, r9
 801382a:	4442      	add	r2, r8
 801382c:	4631      	mov	r1, r6
 801382e:	4628      	mov	r0, r5
 8013830:	47b8      	blx	r7
 8013832:	3001      	adds	r0, #1
 8013834:	d1c1      	bne.n	80137ba <_printf_float+0x342>
 8013836:	e680      	b.n	801353a <_printf_float+0xc2>
 8013838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801383a:	2a01      	cmp	r2, #1
 801383c:	dc01      	bgt.n	8013842 <_printf_float+0x3ca>
 801383e:	07db      	lsls	r3, r3, #31
 8013840:	d538      	bpl.n	80138b4 <_printf_float+0x43c>
 8013842:	2301      	movs	r3, #1
 8013844:	4642      	mov	r2, r8
 8013846:	4631      	mov	r1, r6
 8013848:	4628      	mov	r0, r5
 801384a:	47b8      	blx	r7
 801384c:	3001      	adds	r0, #1
 801384e:	f43f ae74 	beq.w	801353a <_printf_float+0xc2>
 8013852:	ee18 3a10 	vmov	r3, s16
 8013856:	4652      	mov	r2, sl
 8013858:	4631      	mov	r1, r6
 801385a:	4628      	mov	r0, r5
 801385c:	47b8      	blx	r7
 801385e:	3001      	adds	r0, #1
 8013860:	f43f ae6b 	beq.w	801353a <_printf_float+0xc2>
 8013864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013868:	2200      	movs	r2, #0
 801386a:	2300      	movs	r3, #0
 801386c:	f7ed f954 	bl	8000b18 <__aeabi_dcmpeq>
 8013870:	b9d8      	cbnz	r0, 80138aa <_printf_float+0x432>
 8013872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013874:	f108 0201 	add.w	r2, r8, #1
 8013878:	3b01      	subs	r3, #1
 801387a:	4631      	mov	r1, r6
 801387c:	4628      	mov	r0, r5
 801387e:	47b8      	blx	r7
 8013880:	3001      	adds	r0, #1
 8013882:	d10e      	bne.n	80138a2 <_printf_float+0x42a>
 8013884:	e659      	b.n	801353a <_printf_float+0xc2>
 8013886:	2301      	movs	r3, #1
 8013888:	4652      	mov	r2, sl
 801388a:	4631      	mov	r1, r6
 801388c:	4628      	mov	r0, r5
 801388e:	47b8      	blx	r7
 8013890:	3001      	adds	r0, #1
 8013892:	f43f ae52 	beq.w	801353a <_printf_float+0xc2>
 8013896:	f108 0801 	add.w	r8, r8, #1
 801389a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801389c:	3b01      	subs	r3, #1
 801389e:	4543      	cmp	r3, r8
 80138a0:	dcf1      	bgt.n	8013886 <_printf_float+0x40e>
 80138a2:	464b      	mov	r3, r9
 80138a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138a8:	e6dc      	b.n	8013664 <_printf_float+0x1ec>
 80138aa:	f04f 0800 	mov.w	r8, #0
 80138ae:	f104 0a1a 	add.w	sl, r4, #26
 80138b2:	e7f2      	b.n	801389a <_printf_float+0x422>
 80138b4:	2301      	movs	r3, #1
 80138b6:	4642      	mov	r2, r8
 80138b8:	e7df      	b.n	801387a <_printf_float+0x402>
 80138ba:	2301      	movs	r3, #1
 80138bc:	464a      	mov	r2, r9
 80138be:	4631      	mov	r1, r6
 80138c0:	4628      	mov	r0, r5
 80138c2:	47b8      	blx	r7
 80138c4:	3001      	adds	r0, #1
 80138c6:	f43f ae38 	beq.w	801353a <_printf_float+0xc2>
 80138ca:	f108 0801 	add.w	r8, r8, #1
 80138ce:	68e3      	ldr	r3, [r4, #12]
 80138d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138d2:	1a5b      	subs	r3, r3, r1
 80138d4:	4543      	cmp	r3, r8
 80138d6:	dcf0      	bgt.n	80138ba <_printf_float+0x442>
 80138d8:	e6fa      	b.n	80136d0 <_printf_float+0x258>
 80138da:	f04f 0800 	mov.w	r8, #0
 80138de:	f104 0919 	add.w	r9, r4, #25
 80138e2:	e7f4      	b.n	80138ce <_printf_float+0x456>

080138e4 <_printf_common>:
 80138e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e8:	4616      	mov	r6, r2
 80138ea:	4699      	mov	r9, r3
 80138ec:	688a      	ldr	r2, [r1, #8]
 80138ee:	690b      	ldr	r3, [r1, #16]
 80138f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138f4:	4293      	cmp	r3, r2
 80138f6:	bfb8      	it	lt
 80138f8:	4613      	movlt	r3, r2
 80138fa:	6033      	str	r3, [r6, #0]
 80138fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013900:	4607      	mov	r7, r0
 8013902:	460c      	mov	r4, r1
 8013904:	b10a      	cbz	r2, 801390a <_printf_common+0x26>
 8013906:	3301      	adds	r3, #1
 8013908:	6033      	str	r3, [r6, #0]
 801390a:	6823      	ldr	r3, [r4, #0]
 801390c:	0699      	lsls	r1, r3, #26
 801390e:	bf42      	ittt	mi
 8013910:	6833      	ldrmi	r3, [r6, #0]
 8013912:	3302      	addmi	r3, #2
 8013914:	6033      	strmi	r3, [r6, #0]
 8013916:	6825      	ldr	r5, [r4, #0]
 8013918:	f015 0506 	ands.w	r5, r5, #6
 801391c:	d106      	bne.n	801392c <_printf_common+0x48>
 801391e:	f104 0a19 	add.w	sl, r4, #25
 8013922:	68e3      	ldr	r3, [r4, #12]
 8013924:	6832      	ldr	r2, [r6, #0]
 8013926:	1a9b      	subs	r3, r3, r2
 8013928:	42ab      	cmp	r3, r5
 801392a:	dc26      	bgt.n	801397a <_printf_common+0x96>
 801392c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013930:	1e13      	subs	r3, r2, #0
 8013932:	6822      	ldr	r2, [r4, #0]
 8013934:	bf18      	it	ne
 8013936:	2301      	movne	r3, #1
 8013938:	0692      	lsls	r2, r2, #26
 801393a:	d42b      	bmi.n	8013994 <_printf_common+0xb0>
 801393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013940:	4649      	mov	r1, r9
 8013942:	4638      	mov	r0, r7
 8013944:	47c0      	blx	r8
 8013946:	3001      	adds	r0, #1
 8013948:	d01e      	beq.n	8013988 <_printf_common+0xa4>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	68e5      	ldr	r5, [r4, #12]
 801394e:	6832      	ldr	r2, [r6, #0]
 8013950:	f003 0306 	and.w	r3, r3, #6
 8013954:	2b04      	cmp	r3, #4
 8013956:	bf08      	it	eq
 8013958:	1aad      	subeq	r5, r5, r2
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	6922      	ldr	r2, [r4, #16]
 801395e:	bf0c      	ite	eq
 8013960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013964:	2500      	movne	r5, #0
 8013966:	4293      	cmp	r3, r2
 8013968:	bfc4      	itt	gt
 801396a:	1a9b      	subgt	r3, r3, r2
 801396c:	18ed      	addgt	r5, r5, r3
 801396e:	2600      	movs	r6, #0
 8013970:	341a      	adds	r4, #26
 8013972:	42b5      	cmp	r5, r6
 8013974:	d11a      	bne.n	80139ac <_printf_common+0xc8>
 8013976:	2000      	movs	r0, #0
 8013978:	e008      	b.n	801398c <_printf_common+0xa8>
 801397a:	2301      	movs	r3, #1
 801397c:	4652      	mov	r2, sl
 801397e:	4649      	mov	r1, r9
 8013980:	4638      	mov	r0, r7
 8013982:	47c0      	blx	r8
 8013984:	3001      	adds	r0, #1
 8013986:	d103      	bne.n	8013990 <_printf_common+0xac>
 8013988:	f04f 30ff 	mov.w	r0, #4294967295
 801398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013990:	3501      	adds	r5, #1
 8013992:	e7c6      	b.n	8013922 <_printf_common+0x3e>
 8013994:	18e1      	adds	r1, r4, r3
 8013996:	1c5a      	adds	r2, r3, #1
 8013998:	2030      	movs	r0, #48	; 0x30
 801399a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801399e:	4422      	add	r2, r4
 80139a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139a8:	3302      	adds	r3, #2
 80139aa:	e7c7      	b.n	801393c <_printf_common+0x58>
 80139ac:	2301      	movs	r3, #1
 80139ae:	4622      	mov	r2, r4
 80139b0:	4649      	mov	r1, r9
 80139b2:	4638      	mov	r0, r7
 80139b4:	47c0      	blx	r8
 80139b6:	3001      	adds	r0, #1
 80139b8:	d0e6      	beq.n	8013988 <_printf_common+0xa4>
 80139ba:	3601      	adds	r6, #1
 80139bc:	e7d9      	b.n	8013972 <_printf_common+0x8e>
	...

080139c0 <_printf_i>:
 80139c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	7e0f      	ldrb	r7, [r1, #24]
 80139c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80139c8:	2f78      	cmp	r7, #120	; 0x78
 80139ca:	4691      	mov	r9, r2
 80139cc:	4680      	mov	r8, r0
 80139ce:	460c      	mov	r4, r1
 80139d0:	469a      	mov	sl, r3
 80139d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80139d6:	d807      	bhi.n	80139e8 <_printf_i+0x28>
 80139d8:	2f62      	cmp	r7, #98	; 0x62
 80139da:	d80a      	bhi.n	80139f2 <_printf_i+0x32>
 80139dc:	2f00      	cmp	r7, #0
 80139de:	f000 80d8 	beq.w	8013b92 <_printf_i+0x1d2>
 80139e2:	2f58      	cmp	r7, #88	; 0x58
 80139e4:	f000 80a3 	beq.w	8013b2e <_printf_i+0x16e>
 80139e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139f0:	e03a      	b.n	8013a68 <_printf_i+0xa8>
 80139f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139f6:	2b15      	cmp	r3, #21
 80139f8:	d8f6      	bhi.n	80139e8 <_printf_i+0x28>
 80139fa:	a101      	add	r1, pc, #4	; (adr r1, 8013a00 <_printf_i+0x40>)
 80139fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a00:	08013a59 	.word	0x08013a59
 8013a04:	08013a6d 	.word	0x08013a6d
 8013a08:	080139e9 	.word	0x080139e9
 8013a0c:	080139e9 	.word	0x080139e9
 8013a10:	080139e9 	.word	0x080139e9
 8013a14:	080139e9 	.word	0x080139e9
 8013a18:	08013a6d 	.word	0x08013a6d
 8013a1c:	080139e9 	.word	0x080139e9
 8013a20:	080139e9 	.word	0x080139e9
 8013a24:	080139e9 	.word	0x080139e9
 8013a28:	080139e9 	.word	0x080139e9
 8013a2c:	08013b79 	.word	0x08013b79
 8013a30:	08013a9d 	.word	0x08013a9d
 8013a34:	08013b5b 	.word	0x08013b5b
 8013a38:	080139e9 	.word	0x080139e9
 8013a3c:	080139e9 	.word	0x080139e9
 8013a40:	08013b9b 	.word	0x08013b9b
 8013a44:	080139e9 	.word	0x080139e9
 8013a48:	08013a9d 	.word	0x08013a9d
 8013a4c:	080139e9 	.word	0x080139e9
 8013a50:	080139e9 	.word	0x080139e9
 8013a54:	08013b63 	.word	0x08013b63
 8013a58:	682b      	ldr	r3, [r5, #0]
 8013a5a:	1d1a      	adds	r2, r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	602a      	str	r2, [r5, #0]
 8013a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a68:	2301      	movs	r3, #1
 8013a6a:	e0a3      	b.n	8013bb4 <_printf_i+0x1f4>
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	6829      	ldr	r1, [r5, #0]
 8013a70:	0606      	lsls	r6, r0, #24
 8013a72:	f101 0304 	add.w	r3, r1, #4
 8013a76:	d50a      	bpl.n	8013a8e <_printf_i+0xce>
 8013a78:	680e      	ldr	r6, [r1, #0]
 8013a7a:	602b      	str	r3, [r5, #0]
 8013a7c:	2e00      	cmp	r6, #0
 8013a7e:	da03      	bge.n	8013a88 <_printf_i+0xc8>
 8013a80:	232d      	movs	r3, #45	; 0x2d
 8013a82:	4276      	negs	r6, r6
 8013a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a88:	485e      	ldr	r0, [pc, #376]	; (8013c04 <_printf_i+0x244>)
 8013a8a:	230a      	movs	r3, #10
 8013a8c:	e019      	b.n	8013ac2 <_printf_i+0x102>
 8013a8e:	680e      	ldr	r6, [r1, #0]
 8013a90:	602b      	str	r3, [r5, #0]
 8013a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a96:	bf18      	it	ne
 8013a98:	b236      	sxthne	r6, r6
 8013a9a:	e7ef      	b.n	8013a7c <_printf_i+0xbc>
 8013a9c:	682b      	ldr	r3, [r5, #0]
 8013a9e:	6820      	ldr	r0, [r4, #0]
 8013aa0:	1d19      	adds	r1, r3, #4
 8013aa2:	6029      	str	r1, [r5, #0]
 8013aa4:	0601      	lsls	r1, r0, #24
 8013aa6:	d501      	bpl.n	8013aac <_printf_i+0xec>
 8013aa8:	681e      	ldr	r6, [r3, #0]
 8013aaa:	e002      	b.n	8013ab2 <_printf_i+0xf2>
 8013aac:	0646      	lsls	r6, r0, #25
 8013aae:	d5fb      	bpl.n	8013aa8 <_printf_i+0xe8>
 8013ab0:	881e      	ldrh	r6, [r3, #0]
 8013ab2:	4854      	ldr	r0, [pc, #336]	; (8013c04 <_printf_i+0x244>)
 8013ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8013ab6:	bf0c      	ite	eq
 8013ab8:	2308      	moveq	r3, #8
 8013aba:	230a      	movne	r3, #10
 8013abc:	2100      	movs	r1, #0
 8013abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ac2:	6865      	ldr	r5, [r4, #4]
 8013ac4:	60a5      	str	r5, [r4, #8]
 8013ac6:	2d00      	cmp	r5, #0
 8013ac8:	bfa2      	ittt	ge
 8013aca:	6821      	ldrge	r1, [r4, #0]
 8013acc:	f021 0104 	bicge.w	r1, r1, #4
 8013ad0:	6021      	strge	r1, [r4, #0]
 8013ad2:	b90e      	cbnz	r6, 8013ad8 <_printf_i+0x118>
 8013ad4:	2d00      	cmp	r5, #0
 8013ad6:	d04d      	beq.n	8013b74 <_printf_i+0x1b4>
 8013ad8:	4615      	mov	r5, r2
 8013ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8013ade:	fb03 6711 	mls	r7, r3, r1, r6
 8013ae2:	5dc7      	ldrb	r7, [r0, r7]
 8013ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ae8:	4637      	mov	r7, r6
 8013aea:	42bb      	cmp	r3, r7
 8013aec:	460e      	mov	r6, r1
 8013aee:	d9f4      	bls.n	8013ada <_printf_i+0x11a>
 8013af0:	2b08      	cmp	r3, #8
 8013af2:	d10b      	bne.n	8013b0c <_printf_i+0x14c>
 8013af4:	6823      	ldr	r3, [r4, #0]
 8013af6:	07de      	lsls	r6, r3, #31
 8013af8:	d508      	bpl.n	8013b0c <_printf_i+0x14c>
 8013afa:	6923      	ldr	r3, [r4, #16]
 8013afc:	6861      	ldr	r1, [r4, #4]
 8013afe:	4299      	cmp	r1, r3
 8013b00:	bfde      	ittt	le
 8013b02:	2330      	movle	r3, #48	; 0x30
 8013b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b0c:	1b52      	subs	r2, r2, r5
 8013b0e:	6122      	str	r2, [r4, #16]
 8013b10:	f8cd a000 	str.w	sl, [sp]
 8013b14:	464b      	mov	r3, r9
 8013b16:	aa03      	add	r2, sp, #12
 8013b18:	4621      	mov	r1, r4
 8013b1a:	4640      	mov	r0, r8
 8013b1c:	f7ff fee2 	bl	80138e4 <_printf_common>
 8013b20:	3001      	adds	r0, #1
 8013b22:	d14c      	bne.n	8013bbe <_printf_i+0x1fe>
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	b004      	add	sp, #16
 8013b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b2e:	4835      	ldr	r0, [pc, #212]	; (8013c04 <_printf_i+0x244>)
 8013b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013b34:	6829      	ldr	r1, [r5, #0]
 8013b36:	6823      	ldr	r3, [r4, #0]
 8013b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b3c:	6029      	str	r1, [r5, #0]
 8013b3e:	061d      	lsls	r5, r3, #24
 8013b40:	d514      	bpl.n	8013b6c <_printf_i+0x1ac>
 8013b42:	07df      	lsls	r7, r3, #31
 8013b44:	bf44      	itt	mi
 8013b46:	f043 0320 	orrmi.w	r3, r3, #32
 8013b4a:	6023      	strmi	r3, [r4, #0]
 8013b4c:	b91e      	cbnz	r6, 8013b56 <_printf_i+0x196>
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	f023 0320 	bic.w	r3, r3, #32
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	2310      	movs	r3, #16
 8013b58:	e7b0      	b.n	8013abc <_printf_i+0xfc>
 8013b5a:	6823      	ldr	r3, [r4, #0]
 8013b5c:	f043 0320 	orr.w	r3, r3, #32
 8013b60:	6023      	str	r3, [r4, #0]
 8013b62:	2378      	movs	r3, #120	; 0x78
 8013b64:	4828      	ldr	r0, [pc, #160]	; (8013c08 <_printf_i+0x248>)
 8013b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b6a:	e7e3      	b.n	8013b34 <_printf_i+0x174>
 8013b6c:	0659      	lsls	r1, r3, #25
 8013b6e:	bf48      	it	mi
 8013b70:	b2b6      	uxthmi	r6, r6
 8013b72:	e7e6      	b.n	8013b42 <_printf_i+0x182>
 8013b74:	4615      	mov	r5, r2
 8013b76:	e7bb      	b.n	8013af0 <_printf_i+0x130>
 8013b78:	682b      	ldr	r3, [r5, #0]
 8013b7a:	6826      	ldr	r6, [r4, #0]
 8013b7c:	6961      	ldr	r1, [r4, #20]
 8013b7e:	1d18      	adds	r0, r3, #4
 8013b80:	6028      	str	r0, [r5, #0]
 8013b82:	0635      	lsls	r5, r6, #24
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	d501      	bpl.n	8013b8c <_printf_i+0x1cc>
 8013b88:	6019      	str	r1, [r3, #0]
 8013b8a:	e002      	b.n	8013b92 <_printf_i+0x1d2>
 8013b8c:	0670      	lsls	r0, r6, #25
 8013b8e:	d5fb      	bpl.n	8013b88 <_printf_i+0x1c8>
 8013b90:	8019      	strh	r1, [r3, #0]
 8013b92:	2300      	movs	r3, #0
 8013b94:	6123      	str	r3, [r4, #16]
 8013b96:	4615      	mov	r5, r2
 8013b98:	e7ba      	b.n	8013b10 <_printf_i+0x150>
 8013b9a:	682b      	ldr	r3, [r5, #0]
 8013b9c:	1d1a      	adds	r2, r3, #4
 8013b9e:	602a      	str	r2, [r5, #0]
 8013ba0:	681d      	ldr	r5, [r3, #0]
 8013ba2:	6862      	ldr	r2, [r4, #4]
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f7ec fb42 	bl	8000230 <memchr>
 8013bac:	b108      	cbz	r0, 8013bb2 <_printf_i+0x1f2>
 8013bae:	1b40      	subs	r0, r0, r5
 8013bb0:	6060      	str	r0, [r4, #4]
 8013bb2:	6863      	ldr	r3, [r4, #4]
 8013bb4:	6123      	str	r3, [r4, #16]
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bbc:	e7a8      	b.n	8013b10 <_printf_i+0x150>
 8013bbe:	6923      	ldr	r3, [r4, #16]
 8013bc0:	462a      	mov	r2, r5
 8013bc2:	4649      	mov	r1, r9
 8013bc4:	4640      	mov	r0, r8
 8013bc6:	47d0      	blx	sl
 8013bc8:	3001      	adds	r0, #1
 8013bca:	d0ab      	beq.n	8013b24 <_printf_i+0x164>
 8013bcc:	6823      	ldr	r3, [r4, #0]
 8013bce:	079b      	lsls	r3, r3, #30
 8013bd0:	d413      	bmi.n	8013bfa <_printf_i+0x23a>
 8013bd2:	68e0      	ldr	r0, [r4, #12]
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	4298      	cmp	r0, r3
 8013bd8:	bfb8      	it	lt
 8013bda:	4618      	movlt	r0, r3
 8013bdc:	e7a4      	b.n	8013b28 <_printf_i+0x168>
 8013bde:	2301      	movs	r3, #1
 8013be0:	4632      	mov	r2, r6
 8013be2:	4649      	mov	r1, r9
 8013be4:	4640      	mov	r0, r8
 8013be6:	47d0      	blx	sl
 8013be8:	3001      	adds	r0, #1
 8013bea:	d09b      	beq.n	8013b24 <_printf_i+0x164>
 8013bec:	3501      	adds	r5, #1
 8013bee:	68e3      	ldr	r3, [r4, #12]
 8013bf0:	9903      	ldr	r1, [sp, #12]
 8013bf2:	1a5b      	subs	r3, r3, r1
 8013bf4:	42ab      	cmp	r3, r5
 8013bf6:	dcf2      	bgt.n	8013bde <_printf_i+0x21e>
 8013bf8:	e7eb      	b.n	8013bd2 <_printf_i+0x212>
 8013bfa:	2500      	movs	r5, #0
 8013bfc:	f104 0619 	add.w	r6, r4, #25
 8013c00:	e7f5      	b.n	8013bee <_printf_i+0x22e>
 8013c02:	bf00      	nop
 8013c04:	08019ada 	.word	0x08019ada
 8013c08:	08019aeb 	.word	0x08019aeb

08013c0c <_scanf_float>:
 8013c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c10:	b087      	sub	sp, #28
 8013c12:	4617      	mov	r7, r2
 8013c14:	9303      	str	r3, [sp, #12]
 8013c16:	688b      	ldr	r3, [r1, #8]
 8013c18:	1e5a      	subs	r2, r3, #1
 8013c1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c1e:	bf83      	ittte	hi
 8013c20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c24:	195b      	addhi	r3, r3, r5
 8013c26:	9302      	strhi	r3, [sp, #8]
 8013c28:	2300      	movls	r3, #0
 8013c2a:	bf86      	itte	hi
 8013c2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c30:	608b      	strhi	r3, [r1, #8]
 8013c32:	9302      	strls	r3, [sp, #8]
 8013c34:	680b      	ldr	r3, [r1, #0]
 8013c36:	468b      	mov	fp, r1
 8013c38:	2500      	movs	r5, #0
 8013c3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013c3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8013c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013c46:	4680      	mov	r8, r0
 8013c48:	460c      	mov	r4, r1
 8013c4a:	465e      	mov	r6, fp
 8013c4c:	46aa      	mov	sl, r5
 8013c4e:	46a9      	mov	r9, r5
 8013c50:	9501      	str	r5, [sp, #4]
 8013c52:	68a2      	ldr	r2, [r4, #8]
 8013c54:	b152      	cbz	r2, 8013c6c <_scanf_float+0x60>
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8013c5c:	d864      	bhi.n	8013d28 <_scanf_float+0x11c>
 8013c5e:	2b40      	cmp	r3, #64	; 0x40
 8013c60:	d83c      	bhi.n	8013cdc <_scanf_float+0xd0>
 8013c62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013c66:	b2c8      	uxtb	r0, r1
 8013c68:	280e      	cmp	r0, #14
 8013c6a:	d93a      	bls.n	8013ce2 <_scanf_float+0xd6>
 8013c6c:	f1b9 0f00 	cmp.w	r9, #0
 8013c70:	d003      	beq.n	8013c7a <_scanf_float+0x6e>
 8013c72:	6823      	ldr	r3, [r4, #0]
 8013c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c78:	6023      	str	r3, [r4, #0]
 8013c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c7e:	f1ba 0f01 	cmp.w	sl, #1
 8013c82:	f200 8113 	bhi.w	8013eac <_scanf_float+0x2a0>
 8013c86:	455e      	cmp	r6, fp
 8013c88:	f200 8105 	bhi.w	8013e96 <_scanf_float+0x28a>
 8013c8c:	2501      	movs	r5, #1
 8013c8e:	4628      	mov	r0, r5
 8013c90:	b007      	add	sp, #28
 8013c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013c9a:	2a0d      	cmp	r2, #13
 8013c9c:	d8e6      	bhi.n	8013c6c <_scanf_float+0x60>
 8013c9e:	a101      	add	r1, pc, #4	; (adr r1, 8013ca4 <_scanf_float+0x98>)
 8013ca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013ca4:	08013de3 	.word	0x08013de3
 8013ca8:	08013c6d 	.word	0x08013c6d
 8013cac:	08013c6d 	.word	0x08013c6d
 8013cb0:	08013c6d 	.word	0x08013c6d
 8013cb4:	08013e43 	.word	0x08013e43
 8013cb8:	08013e1b 	.word	0x08013e1b
 8013cbc:	08013c6d 	.word	0x08013c6d
 8013cc0:	08013c6d 	.word	0x08013c6d
 8013cc4:	08013df1 	.word	0x08013df1
 8013cc8:	08013c6d 	.word	0x08013c6d
 8013ccc:	08013c6d 	.word	0x08013c6d
 8013cd0:	08013c6d 	.word	0x08013c6d
 8013cd4:	08013c6d 	.word	0x08013c6d
 8013cd8:	08013da9 	.word	0x08013da9
 8013cdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013ce0:	e7db      	b.n	8013c9a <_scanf_float+0x8e>
 8013ce2:	290e      	cmp	r1, #14
 8013ce4:	d8c2      	bhi.n	8013c6c <_scanf_float+0x60>
 8013ce6:	a001      	add	r0, pc, #4	; (adr r0, 8013cec <_scanf_float+0xe0>)
 8013ce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013cec:	08013d9b 	.word	0x08013d9b
 8013cf0:	08013c6d 	.word	0x08013c6d
 8013cf4:	08013d9b 	.word	0x08013d9b
 8013cf8:	08013e2f 	.word	0x08013e2f
 8013cfc:	08013c6d 	.word	0x08013c6d
 8013d00:	08013d49 	.word	0x08013d49
 8013d04:	08013d85 	.word	0x08013d85
 8013d08:	08013d85 	.word	0x08013d85
 8013d0c:	08013d85 	.word	0x08013d85
 8013d10:	08013d85 	.word	0x08013d85
 8013d14:	08013d85 	.word	0x08013d85
 8013d18:	08013d85 	.word	0x08013d85
 8013d1c:	08013d85 	.word	0x08013d85
 8013d20:	08013d85 	.word	0x08013d85
 8013d24:	08013d85 	.word	0x08013d85
 8013d28:	2b6e      	cmp	r3, #110	; 0x6e
 8013d2a:	d809      	bhi.n	8013d40 <_scanf_float+0x134>
 8013d2c:	2b60      	cmp	r3, #96	; 0x60
 8013d2e:	d8b2      	bhi.n	8013c96 <_scanf_float+0x8a>
 8013d30:	2b54      	cmp	r3, #84	; 0x54
 8013d32:	d077      	beq.n	8013e24 <_scanf_float+0x218>
 8013d34:	2b59      	cmp	r3, #89	; 0x59
 8013d36:	d199      	bne.n	8013c6c <_scanf_float+0x60>
 8013d38:	2d07      	cmp	r5, #7
 8013d3a:	d197      	bne.n	8013c6c <_scanf_float+0x60>
 8013d3c:	2508      	movs	r5, #8
 8013d3e:	e029      	b.n	8013d94 <_scanf_float+0x188>
 8013d40:	2b74      	cmp	r3, #116	; 0x74
 8013d42:	d06f      	beq.n	8013e24 <_scanf_float+0x218>
 8013d44:	2b79      	cmp	r3, #121	; 0x79
 8013d46:	e7f6      	b.n	8013d36 <_scanf_float+0x12a>
 8013d48:	6821      	ldr	r1, [r4, #0]
 8013d4a:	05c8      	lsls	r0, r1, #23
 8013d4c:	d51a      	bpl.n	8013d84 <_scanf_float+0x178>
 8013d4e:	9b02      	ldr	r3, [sp, #8]
 8013d50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013d54:	6021      	str	r1, [r4, #0]
 8013d56:	f109 0901 	add.w	r9, r9, #1
 8013d5a:	b11b      	cbz	r3, 8013d64 <_scanf_float+0x158>
 8013d5c:	3b01      	subs	r3, #1
 8013d5e:	3201      	adds	r2, #1
 8013d60:	9302      	str	r3, [sp, #8]
 8013d62:	60a2      	str	r2, [r4, #8]
 8013d64:	68a3      	ldr	r3, [r4, #8]
 8013d66:	3b01      	subs	r3, #1
 8013d68:	60a3      	str	r3, [r4, #8]
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	6123      	str	r3, [r4, #16]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	3b01      	subs	r3, #1
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	607b      	str	r3, [r7, #4]
 8013d78:	f340 8084 	ble.w	8013e84 <_scanf_float+0x278>
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	603b      	str	r3, [r7, #0]
 8013d82:	e766      	b.n	8013c52 <_scanf_float+0x46>
 8013d84:	eb1a 0f05 	cmn.w	sl, r5
 8013d88:	f47f af70 	bne.w	8013c6c <_scanf_float+0x60>
 8013d8c:	6822      	ldr	r2, [r4, #0]
 8013d8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013d92:	6022      	str	r2, [r4, #0]
 8013d94:	f806 3b01 	strb.w	r3, [r6], #1
 8013d98:	e7e4      	b.n	8013d64 <_scanf_float+0x158>
 8013d9a:	6822      	ldr	r2, [r4, #0]
 8013d9c:	0610      	lsls	r0, r2, #24
 8013d9e:	f57f af65 	bpl.w	8013c6c <_scanf_float+0x60>
 8013da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013da6:	e7f4      	b.n	8013d92 <_scanf_float+0x186>
 8013da8:	f1ba 0f00 	cmp.w	sl, #0
 8013dac:	d10e      	bne.n	8013dcc <_scanf_float+0x1c0>
 8013dae:	f1b9 0f00 	cmp.w	r9, #0
 8013db2:	d10e      	bne.n	8013dd2 <_scanf_float+0x1c6>
 8013db4:	6822      	ldr	r2, [r4, #0]
 8013db6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013dba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013dbe:	d108      	bne.n	8013dd2 <_scanf_float+0x1c6>
 8013dc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013dc4:	6022      	str	r2, [r4, #0]
 8013dc6:	f04f 0a01 	mov.w	sl, #1
 8013dca:	e7e3      	b.n	8013d94 <_scanf_float+0x188>
 8013dcc:	f1ba 0f02 	cmp.w	sl, #2
 8013dd0:	d055      	beq.n	8013e7e <_scanf_float+0x272>
 8013dd2:	2d01      	cmp	r5, #1
 8013dd4:	d002      	beq.n	8013ddc <_scanf_float+0x1d0>
 8013dd6:	2d04      	cmp	r5, #4
 8013dd8:	f47f af48 	bne.w	8013c6c <_scanf_float+0x60>
 8013ddc:	3501      	adds	r5, #1
 8013dde:	b2ed      	uxtb	r5, r5
 8013de0:	e7d8      	b.n	8013d94 <_scanf_float+0x188>
 8013de2:	f1ba 0f01 	cmp.w	sl, #1
 8013de6:	f47f af41 	bne.w	8013c6c <_scanf_float+0x60>
 8013dea:	f04f 0a02 	mov.w	sl, #2
 8013dee:	e7d1      	b.n	8013d94 <_scanf_float+0x188>
 8013df0:	b97d      	cbnz	r5, 8013e12 <_scanf_float+0x206>
 8013df2:	f1b9 0f00 	cmp.w	r9, #0
 8013df6:	f47f af3c 	bne.w	8013c72 <_scanf_float+0x66>
 8013dfa:	6822      	ldr	r2, [r4, #0]
 8013dfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e04:	f47f af39 	bne.w	8013c7a <_scanf_float+0x6e>
 8013e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e0c:	6022      	str	r2, [r4, #0]
 8013e0e:	2501      	movs	r5, #1
 8013e10:	e7c0      	b.n	8013d94 <_scanf_float+0x188>
 8013e12:	2d03      	cmp	r5, #3
 8013e14:	d0e2      	beq.n	8013ddc <_scanf_float+0x1d0>
 8013e16:	2d05      	cmp	r5, #5
 8013e18:	e7de      	b.n	8013dd8 <_scanf_float+0x1cc>
 8013e1a:	2d02      	cmp	r5, #2
 8013e1c:	f47f af26 	bne.w	8013c6c <_scanf_float+0x60>
 8013e20:	2503      	movs	r5, #3
 8013e22:	e7b7      	b.n	8013d94 <_scanf_float+0x188>
 8013e24:	2d06      	cmp	r5, #6
 8013e26:	f47f af21 	bne.w	8013c6c <_scanf_float+0x60>
 8013e2a:	2507      	movs	r5, #7
 8013e2c:	e7b2      	b.n	8013d94 <_scanf_float+0x188>
 8013e2e:	6822      	ldr	r2, [r4, #0]
 8013e30:	0591      	lsls	r1, r2, #22
 8013e32:	f57f af1b 	bpl.w	8013c6c <_scanf_float+0x60>
 8013e36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013e3a:	6022      	str	r2, [r4, #0]
 8013e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e40:	e7a8      	b.n	8013d94 <_scanf_float+0x188>
 8013e42:	6822      	ldr	r2, [r4, #0]
 8013e44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013e48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013e4c:	d006      	beq.n	8013e5c <_scanf_float+0x250>
 8013e4e:	0550      	lsls	r0, r2, #21
 8013e50:	f57f af0c 	bpl.w	8013c6c <_scanf_float+0x60>
 8013e54:	f1b9 0f00 	cmp.w	r9, #0
 8013e58:	f43f af0f 	beq.w	8013c7a <_scanf_float+0x6e>
 8013e5c:	0591      	lsls	r1, r2, #22
 8013e5e:	bf58      	it	pl
 8013e60:	9901      	ldrpl	r1, [sp, #4]
 8013e62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e66:	bf58      	it	pl
 8013e68:	eba9 0101 	subpl.w	r1, r9, r1
 8013e6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013e70:	bf58      	it	pl
 8013e72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013e76:	6022      	str	r2, [r4, #0]
 8013e78:	f04f 0900 	mov.w	r9, #0
 8013e7c:	e78a      	b.n	8013d94 <_scanf_float+0x188>
 8013e7e:	f04f 0a03 	mov.w	sl, #3
 8013e82:	e787      	b.n	8013d94 <_scanf_float+0x188>
 8013e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013e88:	4639      	mov	r1, r7
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	4798      	blx	r3
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f43f aedf 	beq.w	8013c52 <_scanf_float+0x46>
 8013e94:	e6ea      	b.n	8013c6c <_scanf_float+0x60>
 8013e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013e9e:	463a      	mov	r2, r7
 8013ea0:	4640      	mov	r0, r8
 8013ea2:	4798      	blx	r3
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	3b01      	subs	r3, #1
 8013ea8:	6123      	str	r3, [r4, #16]
 8013eaa:	e6ec      	b.n	8013c86 <_scanf_float+0x7a>
 8013eac:	1e6b      	subs	r3, r5, #1
 8013eae:	2b06      	cmp	r3, #6
 8013eb0:	d825      	bhi.n	8013efe <_scanf_float+0x2f2>
 8013eb2:	2d02      	cmp	r5, #2
 8013eb4:	d836      	bhi.n	8013f24 <_scanf_float+0x318>
 8013eb6:	455e      	cmp	r6, fp
 8013eb8:	f67f aee8 	bls.w	8013c8c <_scanf_float+0x80>
 8013ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ec0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ec4:	463a      	mov	r2, r7
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	4798      	blx	r3
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	3b01      	subs	r3, #1
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	e7f1      	b.n	8013eb6 <_scanf_float+0x2aa>
 8013ed2:	9802      	ldr	r0, [sp, #8]
 8013ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ed8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013edc:	9002      	str	r0, [sp, #8]
 8013ede:	463a      	mov	r2, r7
 8013ee0:	4640      	mov	r0, r8
 8013ee2:	4798      	blx	r3
 8013ee4:	6923      	ldr	r3, [r4, #16]
 8013ee6:	3b01      	subs	r3, #1
 8013ee8:	6123      	str	r3, [r4, #16]
 8013eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013eee:	fa5f fa8a 	uxtb.w	sl, sl
 8013ef2:	f1ba 0f02 	cmp.w	sl, #2
 8013ef6:	d1ec      	bne.n	8013ed2 <_scanf_float+0x2c6>
 8013ef8:	3d03      	subs	r5, #3
 8013efa:	b2ed      	uxtb	r5, r5
 8013efc:	1b76      	subs	r6, r6, r5
 8013efe:	6823      	ldr	r3, [r4, #0]
 8013f00:	05da      	lsls	r2, r3, #23
 8013f02:	d52f      	bpl.n	8013f64 <_scanf_float+0x358>
 8013f04:	055b      	lsls	r3, r3, #21
 8013f06:	d510      	bpl.n	8013f2a <_scanf_float+0x31e>
 8013f08:	455e      	cmp	r6, fp
 8013f0a:	f67f aebf 	bls.w	8013c8c <_scanf_float+0x80>
 8013f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f16:	463a      	mov	r2, r7
 8013f18:	4640      	mov	r0, r8
 8013f1a:	4798      	blx	r3
 8013f1c:	6923      	ldr	r3, [r4, #16]
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	6123      	str	r3, [r4, #16]
 8013f22:	e7f1      	b.n	8013f08 <_scanf_float+0x2fc>
 8013f24:	46aa      	mov	sl, r5
 8013f26:	9602      	str	r6, [sp, #8]
 8013f28:	e7df      	b.n	8013eea <_scanf_float+0x2de>
 8013f2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013f2e:	6923      	ldr	r3, [r4, #16]
 8013f30:	2965      	cmp	r1, #101	; 0x65
 8013f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f36:	f106 35ff 	add.w	r5, r6, #4294967295
 8013f3a:	6123      	str	r3, [r4, #16]
 8013f3c:	d00c      	beq.n	8013f58 <_scanf_float+0x34c>
 8013f3e:	2945      	cmp	r1, #69	; 0x45
 8013f40:	d00a      	beq.n	8013f58 <_scanf_float+0x34c>
 8013f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f46:	463a      	mov	r2, r7
 8013f48:	4640      	mov	r0, r8
 8013f4a:	4798      	blx	r3
 8013f4c:	6923      	ldr	r3, [r4, #16]
 8013f4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f52:	3b01      	subs	r3, #1
 8013f54:	1eb5      	subs	r5, r6, #2
 8013f56:	6123      	str	r3, [r4, #16]
 8013f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f5c:	463a      	mov	r2, r7
 8013f5e:	4640      	mov	r0, r8
 8013f60:	4798      	blx	r3
 8013f62:	462e      	mov	r6, r5
 8013f64:	6825      	ldr	r5, [r4, #0]
 8013f66:	f015 0510 	ands.w	r5, r5, #16
 8013f6a:	d159      	bne.n	8014020 <_scanf_float+0x414>
 8013f6c:	7035      	strb	r5, [r6, #0]
 8013f6e:	6823      	ldr	r3, [r4, #0]
 8013f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013f78:	d11b      	bne.n	8013fb2 <_scanf_float+0x3a6>
 8013f7a:	9b01      	ldr	r3, [sp, #4]
 8013f7c:	454b      	cmp	r3, r9
 8013f7e:	eba3 0209 	sub.w	r2, r3, r9
 8013f82:	d123      	bne.n	8013fcc <_scanf_float+0x3c0>
 8013f84:	2200      	movs	r2, #0
 8013f86:	4659      	mov	r1, fp
 8013f88:	4640      	mov	r0, r8
 8013f8a:	f001 f80b 	bl	8014fa4 <_strtod_r>
 8013f8e:	6822      	ldr	r2, [r4, #0]
 8013f90:	9b03      	ldr	r3, [sp, #12]
 8013f92:	f012 0f02 	tst.w	r2, #2
 8013f96:	ec57 6b10 	vmov	r6, r7, d0
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	d021      	beq.n	8013fe2 <_scanf_float+0x3d6>
 8013f9e:	9903      	ldr	r1, [sp, #12]
 8013fa0:	1d1a      	adds	r2, r3, #4
 8013fa2:	600a      	str	r2, [r1, #0]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	e9c3 6700 	strd	r6, r7, [r3]
 8013faa:	68e3      	ldr	r3, [r4, #12]
 8013fac:	3301      	adds	r3, #1
 8013fae:	60e3      	str	r3, [r4, #12]
 8013fb0:	e66d      	b.n	8013c8e <_scanf_float+0x82>
 8013fb2:	9b04      	ldr	r3, [sp, #16]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d0e5      	beq.n	8013f84 <_scanf_float+0x378>
 8013fb8:	9905      	ldr	r1, [sp, #20]
 8013fba:	230a      	movs	r3, #10
 8013fbc:	462a      	mov	r2, r5
 8013fbe:	3101      	adds	r1, #1
 8013fc0:	4640      	mov	r0, r8
 8013fc2:	f001 f877 	bl	80150b4 <_strtol_r>
 8013fc6:	9b04      	ldr	r3, [sp, #16]
 8013fc8:	9e05      	ldr	r6, [sp, #20]
 8013fca:	1ac2      	subs	r2, r0, r3
 8013fcc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013fd0:	429e      	cmp	r6, r3
 8013fd2:	bf28      	it	cs
 8013fd4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013fd8:	4912      	ldr	r1, [pc, #72]	; (8014024 <_scanf_float+0x418>)
 8013fda:	4630      	mov	r0, r6
 8013fdc:	f000 f99e 	bl	801431c <siprintf>
 8013fe0:	e7d0      	b.n	8013f84 <_scanf_float+0x378>
 8013fe2:	9903      	ldr	r1, [sp, #12]
 8013fe4:	f012 0f04 	tst.w	r2, #4
 8013fe8:	f103 0204 	add.w	r2, r3, #4
 8013fec:	600a      	str	r2, [r1, #0]
 8013fee:	d1d9      	bne.n	8013fa4 <_scanf_float+0x398>
 8013ff0:	f8d3 8000 	ldr.w	r8, [r3]
 8013ff4:	ee10 2a10 	vmov	r2, s0
 8013ff8:	ee10 0a10 	vmov	r0, s0
 8013ffc:	463b      	mov	r3, r7
 8013ffe:	4639      	mov	r1, r7
 8014000:	f7ec fdbc 	bl	8000b7c <__aeabi_dcmpun>
 8014004:	b128      	cbz	r0, 8014012 <_scanf_float+0x406>
 8014006:	4808      	ldr	r0, [pc, #32]	; (8014028 <_scanf_float+0x41c>)
 8014008:	f000 f982 	bl	8014310 <nanf>
 801400c:	ed88 0a00 	vstr	s0, [r8]
 8014010:	e7cb      	b.n	8013faa <_scanf_float+0x39e>
 8014012:	4630      	mov	r0, r6
 8014014:	4639      	mov	r1, r7
 8014016:	f7ec fe0f 	bl	8000c38 <__aeabi_d2f>
 801401a:	f8c8 0000 	str.w	r0, [r8]
 801401e:	e7c4      	b.n	8013faa <_scanf_float+0x39e>
 8014020:	2500      	movs	r5, #0
 8014022:	e634      	b.n	8013c8e <_scanf_float+0x82>
 8014024:	08019afc 	.word	0x08019afc
 8014028:	08019f70 	.word	0x08019f70

0801402c <iprintf>:
 801402c:	b40f      	push	{r0, r1, r2, r3}
 801402e:	4b0a      	ldr	r3, [pc, #40]	; (8014058 <iprintf+0x2c>)
 8014030:	b513      	push	{r0, r1, r4, lr}
 8014032:	681c      	ldr	r4, [r3, #0]
 8014034:	b124      	cbz	r4, 8014040 <iprintf+0x14>
 8014036:	69a3      	ldr	r3, [r4, #24]
 8014038:	b913      	cbnz	r3, 8014040 <iprintf+0x14>
 801403a:	4620      	mov	r0, r4
 801403c:	f002 f890 	bl	8016160 <__sinit>
 8014040:	ab05      	add	r3, sp, #20
 8014042:	9a04      	ldr	r2, [sp, #16]
 8014044:	68a1      	ldr	r1, [r4, #8]
 8014046:	9301      	str	r3, [sp, #4]
 8014048:	4620      	mov	r0, r4
 801404a:	f003 fc59 	bl	8017900 <_vfiprintf_r>
 801404e:	b002      	add	sp, #8
 8014050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014054:	b004      	add	sp, #16
 8014056:	4770      	bx	lr
 8014058:	20000020 	.word	0x20000020

0801405c <putchar>:
 801405c:	4b09      	ldr	r3, [pc, #36]	; (8014084 <putchar+0x28>)
 801405e:	b513      	push	{r0, r1, r4, lr}
 8014060:	681c      	ldr	r4, [r3, #0]
 8014062:	4601      	mov	r1, r0
 8014064:	b134      	cbz	r4, 8014074 <putchar+0x18>
 8014066:	69a3      	ldr	r3, [r4, #24]
 8014068:	b923      	cbnz	r3, 8014074 <putchar+0x18>
 801406a:	9001      	str	r0, [sp, #4]
 801406c:	4620      	mov	r0, r4
 801406e:	f002 f877 	bl	8016160 <__sinit>
 8014072:	9901      	ldr	r1, [sp, #4]
 8014074:	68a2      	ldr	r2, [r4, #8]
 8014076:	4620      	mov	r0, r4
 8014078:	b002      	add	sp, #8
 801407a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801407e:	f003 bd6f 	b.w	8017b60 <_putc_r>
 8014082:	bf00      	nop
 8014084:	20000020 	.word	0x20000020

08014088 <_puts_r>:
 8014088:	b570      	push	{r4, r5, r6, lr}
 801408a:	460e      	mov	r6, r1
 801408c:	4605      	mov	r5, r0
 801408e:	b118      	cbz	r0, 8014098 <_puts_r+0x10>
 8014090:	6983      	ldr	r3, [r0, #24]
 8014092:	b90b      	cbnz	r3, 8014098 <_puts_r+0x10>
 8014094:	f002 f864 	bl	8016160 <__sinit>
 8014098:	69ab      	ldr	r3, [r5, #24]
 801409a:	68ac      	ldr	r4, [r5, #8]
 801409c:	b913      	cbnz	r3, 80140a4 <_puts_r+0x1c>
 801409e:	4628      	mov	r0, r5
 80140a0:	f002 f85e 	bl	8016160 <__sinit>
 80140a4:	4b2c      	ldr	r3, [pc, #176]	; (8014158 <_puts_r+0xd0>)
 80140a6:	429c      	cmp	r4, r3
 80140a8:	d120      	bne.n	80140ec <_puts_r+0x64>
 80140aa:	686c      	ldr	r4, [r5, #4]
 80140ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140ae:	07db      	lsls	r3, r3, #31
 80140b0:	d405      	bmi.n	80140be <_puts_r+0x36>
 80140b2:	89a3      	ldrh	r3, [r4, #12]
 80140b4:	0598      	lsls	r0, r3, #22
 80140b6:	d402      	bmi.n	80140be <_puts_r+0x36>
 80140b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140ba:	f002 fc62 	bl	8016982 <__retarget_lock_acquire_recursive>
 80140be:	89a3      	ldrh	r3, [r4, #12]
 80140c0:	0719      	lsls	r1, r3, #28
 80140c2:	d51d      	bpl.n	8014100 <_puts_r+0x78>
 80140c4:	6923      	ldr	r3, [r4, #16]
 80140c6:	b1db      	cbz	r3, 8014100 <_puts_r+0x78>
 80140c8:	3e01      	subs	r6, #1
 80140ca:	68a3      	ldr	r3, [r4, #8]
 80140cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80140d0:	3b01      	subs	r3, #1
 80140d2:	60a3      	str	r3, [r4, #8]
 80140d4:	bb39      	cbnz	r1, 8014126 <_puts_r+0x9e>
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	da38      	bge.n	801414c <_puts_r+0xc4>
 80140da:	4622      	mov	r2, r4
 80140dc:	210a      	movs	r1, #10
 80140de:	4628      	mov	r0, r5
 80140e0:	f000 ffea 	bl	80150b8 <__swbuf_r>
 80140e4:	3001      	adds	r0, #1
 80140e6:	d011      	beq.n	801410c <_puts_r+0x84>
 80140e8:	250a      	movs	r5, #10
 80140ea:	e011      	b.n	8014110 <_puts_r+0x88>
 80140ec:	4b1b      	ldr	r3, [pc, #108]	; (801415c <_puts_r+0xd4>)
 80140ee:	429c      	cmp	r4, r3
 80140f0:	d101      	bne.n	80140f6 <_puts_r+0x6e>
 80140f2:	68ac      	ldr	r4, [r5, #8]
 80140f4:	e7da      	b.n	80140ac <_puts_r+0x24>
 80140f6:	4b1a      	ldr	r3, [pc, #104]	; (8014160 <_puts_r+0xd8>)
 80140f8:	429c      	cmp	r4, r3
 80140fa:	bf08      	it	eq
 80140fc:	68ec      	ldreq	r4, [r5, #12]
 80140fe:	e7d5      	b.n	80140ac <_puts_r+0x24>
 8014100:	4621      	mov	r1, r4
 8014102:	4628      	mov	r0, r5
 8014104:	f001 f82a 	bl	801515c <__swsetup_r>
 8014108:	2800      	cmp	r0, #0
 801410a:	d0dd      	beq.n	80140c8 <_puts_r+0x40>
 801410c:	f04f 35ff 	mov.w	r5, #4294967295
 8014110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014112:	07da      	lsls	r2, r3, #31
 8014114:	d405      	bmi.n	8014122 <_puts_r+0x9a>
 8014116:	89a3      	ldrh	r3, [r4, #12]
 8014118:	059b      	lsls	r3, r3, #22
 801411a:	d402      	bmi.n	8014122 <_puts_r+0x9a>
 801411c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801411e:	f002 fc31 	bl	8016984 <__retarget_lock_release_recursive>
 8014122:	4628      	mov	r0, r5
 8014124:	bd70      	pop	{r4, r5, r6, pc}
 8014126:	2b00      	cmp	r3, #0
 8014128:	da04      	bge.n	8014134 <_puts_r+0xac>
 801412a:	69a2      	ldr	r2, [r4, #24]
 801412c:	429a      	cmp	r2, r3
 801412e:	dc06      	bgt.n	801413e <_puts_r+0xb6>
 8014130:	290a      	cmp	r1, #10
 8014132:	d004      	beq.n	801413e <_puts_r+0xb6>
 8014134:	6823      	ldr	r3, [r4, #0]
 8014136:	1c5a      	adds	r2, r3, #1
 8014138:	6022      	str	r2, [r4, #0]
 801413a:	7019      	strb	r1, [r3, #0]
 801413c:	e7c5      	b.n	80140ca <_puts_r+0x42>
 801413e:	4622      	mov	r2, r4
 8014140:	4628      	mov	r0, r5
 8014142:	f000 ffb9 	bl	80150b8 <__swbuf_r>
 8014146:	3001      	adds	r0, #1
 8014148:	d1bf      	bne.n	80140ca <_puts_r+0x42>
 801414a:	e7df      	b.n	801410c <_puts_r+0x84>
 801414c:	6823      	ldr	r3, [r4, #0]
 801414e:	250a      	movs	r5, #10
 8014150:	1c5a      	adds	r2, r3, #1
 8014152:	6022      	str	r2, [r4, #0]
 8014154:	701d      	strb	r5, [r3, #0]
 8014156:	e7db      	b.n	8014110 <_puts_r+0x88>
 8014158:	08019d0c 	.word	0x08019d0c
 801415c:	08019d2c 	.word	0x08019d2c
 8014160:	08019cec 	.word	0x08019cec

08014164 <puts>:
 8014164:	4b02      	ldr	r3, [pc, #8]	; (8014170 <puts+0xc>)
 8014166:	4601      	mov	r1, r0
 8014168:	6818      	ldr	r0, [r3, #0]
 801416a:	f7ff bf8d 	b.w	8014088 <_puts_r>
 801416e:	bf00      	nop
 8014170:	20000020 	.word	0x20000020

08014174 <setbuf>:
 8014174:	2900      	cmp	r1, #0
 8014176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801417a:	bf0c      	ite	eq
 801417c:	2202      	moveq	r2, #2
 801417e:	2200      	movne	r2, #0
 8014180:	f000 b800 	b.w	8014184 <setvbuf>

08014184 <setvbuf>:
 8014184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014188:	461d      	mov	r5, r3
 801418a:	4b5d      	ldr	r3, [pc, #372]	; (8014300 <setvbuf+0x17c>)
 801418c:	681f      	ldr	r7, [r3, #0]
 801418e:	4604      	mov	r4, r0
 8014190:	460e      	mov	r6, r1
 8014192:	4690      	mov	r8, r2
 8014194:	b127      	cbz	r7, 80141a0 <setvbuf+0x1c>
 8014196:	69bb      	ldr	r3, [r7, #24]
 8014198:	b913      	cbnz	r3, 80141a0 <setvbuf+0x1c>
 801419a:	4638      	mov	r0, r7
 801419c:	f001 ffe0 	bl	8016160 <__sinit>
 80141a0:	4b58      	ldr	r3, [pc, #352]	; (8014304 <setvbuf+0x180>)
 80141a2:	429c      	cmp	r4, r3
 80141a4:	d167      	bne.n	8014276 <setvbuf+0xf2>
 80141a6:	687c      	ldr	r4, [r7, #4]
 80141a8:	f1b8 0f02 	cmp.w	r8, #2
 80141ac:	d006      	beq.n	80141bc <setvbuf+0x38>
 80141ae:	f1b8 0f01 	cmp.w	r8, #1
 80141b2:	f200 809f 	bhi.w	80142f4 <setvbuf+0x170>
 80141b6:	2d00      	cmp	r5, #0
 80141b8:	f2c0 809c 	blt.w	80142f4 <setvbuf+0x170>
 80141bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141be:	07db      	lsls	r3, r3, #31
 80141c0:	d405      	bmi.n	80141ce <setvbuf+0x4a>
 80141c2:	89a3      	ldrh	r3, [r4, #12]
 80141c4:	0598      	lsls	r0, r3, #22
 80141c6:	d402      	bmi.n	80141ce <setvbuf+0x4a>
 80141c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141ca:	f002 fbda 	bl	8016982 <__retarget_lock_acquire_recursive>
 80141ce:	4621      	mov	r1, r4
 80141d0:	4638      	mov	r0, r7
 80141d2:	f001 ff31 	bl	8016038 <_fflush_r>
 80141d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141d8:	b141      	cbz	r1, 80141ec <setvbuf+0x68>
 80141da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141de:	4299      	cmp	r1, r3
 80141e0:	d002      	beq.n	80141e8 <setvbuf+0x64>
 80141e2:	4638      	mov	r0, r7
 80141e4:	f003 f926 	bl	8017434 <_free_r>
 80141e8:	2300      	movs	r3, #0
 80141ea:	6363      	str	r3, [r4, #52]	; 0x34
 80141ec:	2300      	movs	r3, #0
 80141ee:	61a3      	str	r3, [r4, #24]
 80141f0:	6063      	str	r3, [r4, #4]
 80141f2:	89a3      	ldrh	r3, [r4, #12]
 80141f4:	0619      	lsls	r1, r3, #24
 80141f6:	d503      	bpl.n	8014200 <setvbuf+0x7c>
 80141f8:	6921      	ldr	r1, [r4, #16]
 80141fa:	4638      	mov	r0, r7
 80141fc:	f003 f91a 	bl	8017434 <_free_r>
 8014200:	89a3      	ldrh	r3, [r4, #12]
 8014202:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8014206:	f023 0303 	bic.w	r3, r3, #3
 801420a:	f1b8 0f02 	cmp.w	r8, #2
 801420e:	81a3      	strh	r3, [r4, #12]
 8014210:	d06c      	beq.n	80142ec <setvbuf+0x168>
 8014212:	ab01      	add	r3, sp, #4
 8014214:	466a      	mov	r2, sp
 8014216:	4621      	mov	r1, r4
 8014218:	4638      	mov	r0, r7
 801421a:	f002 fbb4 	bl	8016986 <__swhatbuf_r>
 801421e:	89a3      	ldrh	r3, [r4, #12]
 8014220:	4318      	orrs	r0, r3
 8014222:	81a0      	strh	r0, [r4, #12]
 8014224:	2d00      	cmp	r5, #0
 8014226:	d130      	bne.n	801428a <setvbuf+0x106>
 8014228:	9d00      	ldr	r5, [sp, #0]
 801422a:	4628      	mov	r0, r5
 801422c:	f002 fc10 	bl	8016a50 <malloc>
 8014230:	4606      	mov	r6, r0
 8014232:	2800      	cmp	r0, #0
 8014234:	d155      	bne.n	80142e2 <setvbuf+0x15e>
 8014236:	f8dd 9000 	ldr.w	r9, [sp]
 801423a:	45a9      	cmp	r9, r5
 801423c:	d14a      	bne.n	80142d4 <setvbuf+0x150>
 801423e:	f04f 35ff 	mov.w	r5, #4294967295
 8014242:	2200      	movs	r2, #0
 8014244:	60a2      	str	r2, [r4, #8]
 8014246:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801424a:	6022      	str	r2, [r4, #0]
 801424c:	6122      	str	r2, [r4, #16]
 801424e:	2201      	movs	r2, #1
 8014250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014254:	6162      	str	r2, [r4, #20]
 8014256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014258:	f043 0302 	orr.w	r3, r3, #2
 801425c:	07d2      	lsls	r2, r2, #31
 801425e:	81a3      	strh	r3, [r4, #12]
 8014260:	d405      	bmi.n	801426e <setvbuf+0xea>
 8014262:	f413 7f00 	tst.w	r3, #512	; 0x200
 8014266:	d102      	bne.n	801426e <setvbuf+0xea>
 8014268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801426a:	f002 fb8b 	bl	8016984 <__retarget_lock_release_recursive>
 801426e:	4628      	mov	r0, r5
 8014270:	b003      	add	sp, #12
 8014272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014276:	4b24      	ldr	r3, [pc, #144]	; (8014308 <setvbuf+0x184>)
 8014278:	429c      	cmp	r4, r3
 801427a:	d101      	bne.n	8014280 <setvbuf+0xfc>
 801427c:	68bc      	ldr	r4, [r7, #8]
 801427e:	e793      	b.n	80141a8 <setvbuf+0x24>
 8014280:	4b22      	ldr	r3, [pc, #136]	; (801430c <setvbuf+0x188>)
 8014282:	429c      	cmp	r4, r3
 8014284:	bf08      	it	eq
 8014286:	68fc      	ldreq	r4, [r7, #12]
 8014288:	e78e      	b.n	80141a8 <setvbuf+0x24>
 801428a:	2e00      	cmp	r6, #0
 801428c:	d0cd      	beq.n	801422a <setvbuf+0xa6>
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	b913      	cbnz	r3, 8014298 <setvbuf+0x114>
 8014292:	4638      	mov	r0, r7
 8014294:	f001 ff64 	bl	8016160 <__sinit>
 8014298:	f1b8 0f01 	cmp.w	r8, #1
 801429c:	bf08      	it	eq
 801429e:	89a3      	ldrheq	r3, [r4, #12]
 80142a0:	6026      	str	r6, [r4, #0]
 80142a2:	bf04      	itt	eq
 80142a4:	f043 0301 	orreq.w	r3, r3, #1
 80142a8:	81a3      	strheq	r3, [r4, #12]
 80142aa:	89a2      	ldrh	r2, [r4, #12]
 80142ac:	f012 0308 	ands.w	r3, r2, #8
 80142b0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80142b4:	d01c      	beq.n	80142f0 <setvbuf+0x16c>
 80142b6:	07d3      	lsls	r3, r2, #31
 80142b8:	bf41      	itttt	mi
 80142ba:	2300      	movmi	r3, #0
 80142bc:	426d      	negmi	r5, r5
 80142be:	60a3      	strmi	r3, [r4, #8]
 80142c0:	61a5      	strmi	r5, [r4, #24]
 80142c2:	bf58      	it	pl
 80142c4:	60a5      	strpl	r5, [r4, #8]
 80142c6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80142c8:	f015 0501 	ands.w	r5, r5, #1
 80142cc:	d115      	bne.n	80142fa <setvbuf+0x176>
 80142ce:	f412 7f00 	tst.w	r2, #512	; 0x200
 80142d2:	e7c8      	b.n	8014266 <setvbuf+0xe2>
 80142d4:	4648      	mov	r0, r9
 80142d6:	f002 fbbb 	bl	8016a50 <malloc>
 80142da:	4606      	mov	r6, r0
 80142dc:	2800      	cmp	r0, #0
 80142de:	d0ae      	beq.n	801423e <setvbuf+0xba>
 80142e0:	464d      	mov	r5, r9
 80142e2:	89a3      	ldrh	r3, [r4, #12]
 80142e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142e8:	81a3      	strh	r3, [r4, #12]
 80142ea:	e7d0      	b.n	801428e <setvbuf+0x10a>
 80142ec:	2500      	movs	r5, #0
 80142ee:	e7a8      	b.n	8014242 <setvbuf+0xbe>
 80142f0:	60a3      	str	r3, [r4, #8]
 80142f2:	e7e8      	b.n	80142c6 <setvbuf+0x142>
 80142f4:	f04f 35ff 	mov.w	r5, #4294967295
 80142f8:	e7b9      	b.n	801426e <setvbuf+0xea>
 80142fa:	2500      	movs	r5, #0
 80142fc:	e7b7      	b.n	801426e <setvbuf+0xea>
 80142fe:	bf00      	nop
 8014300:	20000020 	.word	0x20000020
 8014304:	08019d0c 	.word	0x08019d0c
 8014308:	08019d2c 	.word	0x08019d2c
 801430c:	08019cec 	.word	0x08019cec

08014310 <nanf>:
 8014310:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014318 <nanf+0x8>
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	7fc00000 	.word	0x7fc00000

0801431c <siprintf>:
 801431c:	b40e      	push	{r1, r2, r3}
 801431e:	b500      	push	{lr}
 8014320:	b09c      	sub	sp, #112	; 0x70
 8014322:	ab1d      	add	r3, sp, #116	; 0x74
 8014324:	9002      	str	r0, [sp, #8]
 8014326:	9006      	str	r0, [sp, #24]
 8014328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801432c:	4809      	ldr	r0, [pc, #36]	; (8014354 <siprintf+0x38>)
 801432e:	9107      	str	r1, [sp, #28]
 8014330:	9104      	str	r1, [sp, #16]
 8014332:	4909      	ldr	r1, [pc, #36]	; (8014358 <siprintf+0x3c>)
 8014334:	f853 2b04 	ldr.w	r2, [r3], #4
 8014338:	9105      	str	r1, [sp, #20]
 801433a:	6800      	ldr	r0, [r0, #0]
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	a902      	add	r1, sp, #8
 8014340:	f003 f9b4 	bl	80176ac <_svfiprintf_r>
 8014344:	9b02      	ldr	r3, [sp, #8]
 8014346:	2200      	movs	r2, #0
 8014348:	701a      	strb	r2, [r3, #0]
 801434a:	b01c      	add	sp, #112	; 0x70
 801434c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014350:	b003      	add	sp, #12
 8014352:	4770      	bx	lr
 8014354:	20000020 	.word	0x20000020
 8014358:	ffff0208 	.word	0xffff0208

0801435c <sulp>:
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	4604      	mov	r4, r0
 8014360:	460d      	mov	r5, r1
 8014362:	ec45 4b10 	vmov	d0, r4, r5
 8014366:	4616      	mov	r6, r2
 8014368:	f002 fefe 	bl	8017168 <__ulp>
 801436c:	ec51 0b10 	vmov	r0, r1, d0
 8014370:	b17e      	cbz	r6, 8014392 <sulp+0x36>
 8014372:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014376:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801437a:	2b00      	cmp	r3, #0
 801437c:	dd09      	ble.n	8014392 <sulp+0x36>
 801437e:	051b      	lsls	r3, r3, #20
 8014380:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014384:	2400      	movs	r4, #0
 8014386:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801438a:	4622      	mov	r2, r4
 801438c:	462b      	mov	r3, r5
 801438e:	f7ec f95b 	bl	8000648 <__aeabi_dmul>
 8014392:	bd70      	pop	{r4, r5, r6, pc}
 8014394:	0000      	movs	r0, r0
	...

08014398 <_strtod_l>:
 8014398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801439c:	ed2d 8b02 	vpush	{d8}
 80143a0:	b09d      	sub	sp, #116	; 0x74
 80143a2:	461f      	mov	r7, r3
 80143a4:	2300      	movs	r3, #0
 80143a6:	9318      	str	r3, [sp, #96]	; 0x60
 80143a8:	4ba2      	ldr	r3, [pc, #648]	; (8014634 <_strtod_l+0x29c>)
 80143aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	9305      	str	r3, [sp, #20]
 80143b0:	4604      	mov	r4, r0
 80143b2:	4618      	mov	r0, r3
 80143b4:	4688      	mov	r8, r1
 80143b6:	f7eb ff33 	bl	8000220 <strlen>
 80143ba:	f04f 0a00 	mov.w	sl, #0
 80143be:	4605      	mov	r5, r0
 80143c0:	f04f 0b00 	mov.w	fp, #0
 80143c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80143c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80143ca:	781a      	ldrb	r2, [r3, #0]
 80143cc:	2a2b      	cmp	r2, #43	; 0x2b
 80143ce:	d04e      	beq.n	801446e <_strtod_l+0xd6>
 80143d0:	d83b      	bhi.n	801444a <_strtod_l+0xb2>
 80143d2:	2a0d      	cmp	r2, #13
 80143d4:	d834      	bhi.n	8014440 <_strtod_l+0xa8>
 80143d6:	2a08      	cmp	r2, #8
 80143d8:	d834      	bhi.n	8014444 <_strtod_l+0xac>
 80143da:	2a00      	cmp	r2, #0
 80143dc:	d03e      	beq.n	801445c <_strtod_l+0xc4>
 80143de:	2300      	movs	r3, #0
 80143e0:	930a      	str	r3, [sp, #40]	; 0x28
 80143e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80143e4:	7833      	ldrb	r3, [r6, #0]
 80143e6:	2b30      	cmp	r3, #48	; 0x30
 80143e8:	f040 80b0 	bne.w	801454c <_strtod_l+0x1b4>
 80143ec:	7873      	ldrb	r3, [r6, #1]
 80143ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80143f2:	2b58      	cmp	r3, #88	; 0x58
 80143f4:	d168      	bne.n	80144c8 <_strtod_l+0x130>
 80143f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143f8:	9301      	str	r3, [sp, #4]
 80143fa:	ab18      	add	r3, sp, #96	; 0x60
 80143fc:	9702      	str	r7, [sp, #8]
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	4a8d      	ldr	r2, [pc, #564]	; (8014638 <_strtod_l+0x2a0>)
 8014402:	ab19      	add	r3, sp, #100	; 0x64
 8014404:	a917      	add	r1, sp, #92	; 0x5c
 8014406:	4620      	mov	r0, r4
 8014408:	f001 ffae 	bl	8016368 <__gethex>
 801440c:	f010 0707 	ands.w	r7, r0, #7
 8014410:	4605      	mov	r5, r0
 8014412:	d005      	beq.n	8014420 <_strtod_l+0x88>
 8014414:	2f06      	cmp	r7, #6
 8014416:	d12c      	bne.n	8014472 <_strtod_l+0xda>
 8014418:	3601      	adds	r6, #1
 801441a:	2300      	movs	r3, #0
 801441c:	9617      	str	r6, [sp, #92]	; 0x5c
 801441e:	930a      	str	r3, [sp, #40]	; 0x28
 8014420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014422:	2b00      	cmp	r3, #0
 8014424:	f040 8590 	bne.w	8014f48 <_strtod_l+0xbb0>
 8014428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801442a:	b1eb      	cbz	r3, 8014468 <_strtod_l+0xd0>
 801442c:	4652      	mov	r2, sl
 801442e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014432:	ec43 2b10 	vmov	d0, r2, r3
 8014436:	b01d      	add	sp, #116	; 0x74
 8014438:	ecbd 8b02 	vpop	{d8}
 801443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014440:	2a20      	cmp	r2, #32
 8014442:	d1cc      	bne.n	80143de <_strtod_l+0x46>
 8014444:	3301      	adds	r3, #1
 8014446:	9317      	str	r3, [sp, #92]	; 0x5c
 8014448:	e7be      	b.n	80143c8 <_strtod_l+0x30>
 801444a:	2a2d      	cmp	r2, #45	; 0x2d
 801444c:	d1c7      	bne.n	80143de <_strtod_l+0x46>
 801444e:	2201      	movs	r2, #1
 8014450:	920a      	str	r2, [sp, #40]	; 0x28
 8014452:	1c5a      	adds	r2, r3, #1
 8014454:	9217      	str	r2, [sp, #92]	; 0x5c
 8014456:	785b      	ldrb	r3, [r3, #1]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d1c2      	bne.n	80143e2 <_strtod_l+0x4a>
 801445c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801445e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014462:	2b00      	cmp	r3, #0
 8014464:	f040 856e 	bne.w	8014f44 <_strtod_l+0xbac>
 8014468:	4652      	mov	r2, sl
 801446a:	465b      	mov	r3, fp
 801446c:	e7e1      	b.n	8014432 <_strtod_l+0x9a>
 801446e:	2200      	movs	r2, #0
 8014470:	e7ee      	b.n	8014450 <_strtod_l+0xb8>
 8014472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014474:	b13a      	cbz	r2, 8014486 <_strtod_l+0xee>
 8014476:	2135      	movs	r1, #53	; 0x35
 8014478:	a81a      	add	r0, sp, #104	; 0x68
 801447a:	f002 ff80 	bl	801737e <__copybits>
 801447e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014480:	4620      	mov	r0, r4
 8014482:	f002 fb3f 	bl	8016b04 <_Bfree>
 8014486:	3f01      	subs	r7, #1
 8014488:	2f04      	cmp	r7, #4
 801448a:	d806      	bhi.n	801449a <_strtod_l+0x102>
 801448c:	e8df f007 	tbb	[pc, r7]
 8014490:	1714030a 	.word	0x1714030a
 8014494:	0a          	.byte	0x0a
 8014495:	00          	.byte	0x00
 8014496:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801449a:	0728      	lsls	r0, r5, #28
 801449c:	d5c0      	bpl.n	8014420 <_strtod_l+0x88>
 801449e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80144a2:	e7bd      	b.n	8014420 <_strtod_l+0x88>
 80144a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80144a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80144aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80144ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80144b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80144b6:	e7f0      	b.n	801449a <_strtod_l+0x102>
 80144b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801463c <_strtod_l+0x2a4>
 80144bc:	e7ed      	b.n	801449a <_strtod_l+0x102>
 80144be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80144c2:	f04f 3aff 	mov.w	sl, #4294967295
 80144c6:	e7e8      	b.n	801449a <_strtod_l+0x102>
 80144c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80144ce:	785b      	ldrb	r3, [r3, #1]
 80144d0:	2b30      	cmp	r3, #48	; 0x30
 80144d2:	d0f9      	beq.n	80144c8 <_strtod_l+0x130>
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d0a3      	beq.n	8014420 <_strtod_l+0x88>
 80144d8:	2301      	movs	r3, #1
 80144da:	f04f 0900 	mov.w	r9, #0
 80144de:	9304      	str	r3, [sp, #16]
 80144e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144e2:	9308      	str	r3, [sp, #32]
 80144e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80144e8:	464f      	mov	r7, r9
 80144ea:	220a      	movs	r2, #10
 80144ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80144ee:	7806      	ldrb	r6, [r0, #0]
 80144f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80144f4:	b2d9      	uxtb	r1, r3
 80144f6:	2909      	cmp	r1, #9
 80144f8:	d92a      	bls.n	8014550 <_strtod_l+0x1b8>
 80144fa:	9905      	ldr	r1, [sp, #20]
 80144fc:	462a      	mov	r2, r5
 80144fe:	f003 fbd2 	bl	8017ca6 <strncmp>
 8014502:	b398      	cbz	r0, 801456c <_strtod_l+0x1d4>
 8014504:	2000      	movs	r0, #0
 8014506:	4632      	mov	r2, r6
 8014508:	463d      	mov	r5, r7
 801450a:	9005      	str	r0, [sp, #20]
 801450c:	4603      	mov	r3, r0
 801450e:	2a65      	cmp	r2, #101	; 0x65
 8014510:	d001      	beq.n	8014516 <_strtod_l+0x17e>
 8014512:	2a45      	cmp	r2, #69	; 0x45
 8014514:	d118      	bne.n	8014548 <_strtod_l+0x1b0>
 8014516:	b91d      	cbnz	r5, 8014520 <_strtod_l+0x188>
 8014518:	9a04      	ldr	r2, [sp, #16]
 801451a:	4302      	orrs	r2, r0
 801451c:	d09e      	beq.n	801445c <_strtod_l+0xc4>
 801451e:	2500      	movs	r5, #0
 8014520:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014524:	f108 0201 	add.w	r2, r8, #1
 8014528:	9217      	str	r2, [sp, #92]	; 0x5c
 801452a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801452e:	2a2b      	cmp	r2, #43	; 0x2b
 8014530:	d075      	beq.n	801461e <_strtod_l+0x286>
 8014532:	2a2d      	cmp	r2, #45	; 0x2d
 8014534:	d07b      	beq.n	801462e <_strtod_l+0x296>
 8014536:	f04f 0c00 	mov.w	ip, #0
 801453a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801453e:	2909      	cmp	r1, #9
 8014540:	f240 8082 	bls.w	8014648 <_strtod_l+0x2b0>
 8014544:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014548:	2600      	movs	r6, #0
 801454a:	e09d      	b.n	8014688 <_strtod_l+0x2f0>
 801454c:	2300      	movs	r3, #0
 801454e:	e7c4      	b.n	80144da <_strtod_l+0x142>
 8014550:	2f08      	cmp	r7, #8
 8014552:	bfd8      	it	le
 8014554:	9907      	ldrle	r1, [sp, #28]
 8014556:	f100 0001 	add.w	r0, r0, #1
 801455a:	bfda      	itte	le
 801455c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014560:	9307      	strle	r3, [sp, #28]
 8014562:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014566:	3701      	adds	r7, #1
 8014568:	9017      	str	r0, [sp, #92]	; 0x5c
 801456a:	e7bf      	b.n	80144ec <_strtod_l+0x154>
 801456c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801456e:	195a      	adds	r2, r3, r5
 8014570:	9217      	str	r2, [sp, #92]	; 0x5c
 8014572:	5d5a      	ldrb	r2, [r3, r5]
 8014574:	2f00      	cmp	r7, #0
 8014576:	d037      	beq.n	80145e8 <_strtod_l+0x250>
 8014578:	9005      	str	r0, [sp, #20]
 801457a:	463d      	mov	r5, r7
 801457c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014580:	2b09      	cmp	r3, #9
 8014582:	d912      	bls.n	80145aa <_strtod_l+0x212>
 8014584:	2301      	movs	r3, #1
 8014586:	e7c2      	b.n	801450e <_strtod_l+0x176>
 8014588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	9217      	str	r2, [sp, #92]	; 0x5c
 801458e:	785a      	ldrb	r2, [r3, #1]
 8014590:	3001      	adds	r0, #1
 8014592:	2a30      	cmp	r2, #48	; 0x30
 8014594:	d0f8      	beq.n	8014588 <_strtod_l+0x1f0>
 8014596:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801459a:	2b08      	cmp	r3, #8
 801459c:	f200 84d9 	bhi.w	8014f52 <_strtod_l+0xbba>
 80145a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145a2:	9005      	str	r0, [sp, #20]
 80145a4:	2000      	movs	r0, #0
 80145a6:	9308      	str	r3, [sp, #32]
 80145a8:	4605      	mov	r5, r0
 80145aa:	3a30      	subs	r2, #48	; 0x30
 80145ac:	f100 0301 	add.w	r3, r0, #1
 80145b0:	d014      	beq.n	80145dc <_strtod_l+0x244>
 80145b2:	9905      	ldr	r1, [sp, #20]
 80145b4:	4419      	add	r1, r3
 80145b6:	9105      	str	r1, [sp, #20]
 80145b8:	462b      	mov	r3, r5
 80145ba:	eb00 0e05 	add.w	lr, r0, r5
 80145be:	210a      	movs	r1, #10
 80145c0:	4573      	cmp	r3, lr
 80145c2:	d113      	bne.n	80145ec <_strtod_l+0x254>
 80145c4:	182b      	adds	r3, r5, r0
 80145c6:	2b08      	cmp	r3, #8
 80145c8:	f105 0501 	add.w	r5, r5, #1
 80145cc:	4405      	add	r5, r0
 80145ce:	dc1c      	bgt.n	801460a <_strtod_l+0x272>
 80145d0:	9907      	ldr	r1, [sp, #28]
 80145d2:	230a      	movs	r3, #10
 80145d4:	fb03 2301 	mla	r3, r3, r1, r2
 80145d8:	9307      	str	r3, [sp, #28]
 80145da:	2300      	movs	r3, #0
 80145dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145de:	1c51      	adds	r1, r2, #1
 80145e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80145e2:	7852      	ldrb	r2, [r2, #1]
 80145e4:	4618      	mov	r0, r3
 80145e6:	e7c9      	b.n	801457c <_strtod_l+0x1e4>
 80145e8:	4638      	mov	r0, r7
 80145ea:	e7d2      	b.n	8014592 <_strtod_l+0x1fa>
 80145ec:	2b08      	cmp	r3, #8
 80145ee:	dc04      	bgt.n	80145fa <_strtod_l+0x262>
 80145f0:	9e07      	ldr	r6, [sp, #28]
 80145f2:	434e      	muls	r6, r1
 80145f4:	9607      	str	r6, [sp, #28]
 80145f6:	3301      	adds	r3, #1
 80145f8:	e7e2      	b.n	80145c0 <_strtod_l+0x228>
 80145fa:	f103 0c01 	add.w	ip, r3, #1
 80145fe:	f1bc 0f10 	cmp.w	ip, #16
 8014602:	bfd8      	it	le
 8014604:	fb01 f909 	mulle.w	r9, r1, r9
 8014608:	e7f5      	b.n	80145f6 <_strtod_l+0x25e>
 801460a:	2d10      	cmp	r5, #16
 801460c:	bfdc      	itt	le
 801460e:	230a      	movle	r3, #10
 8014610:	fb03 2909 	mlale	r9, r3, r9, r2
 8014614:	e7e1      	b.n	80145da <_strtod_l+0x242>
 8014616:	2300      	movs	r3, #0
 8014618:	9305      	str	r3, [sp, #20]
 801461a:	2301      	movs	r3, #1
 801461c:	e77c      	b.n	8014518 <_strtod_l+0x180>
 801461e:	f04f 0c00 	mov.w	ip, #0
 8014622:	f108 0202 	add.w	r2, r8, #2
 8014626:	9217      	str	r2, [sp, #92]	; 0x5c
 8014628:	f898 2002 	ldrb.w	r2, [r8, #2]
 801462c:	e785      	b.n	801453a <_strtod_l+0x1a2>
 801462e:	f04f 0c01 	mov.w	ip, #1
 8014632:	e7f6      	b.n	8014622 <_strtod_l+0x28a>
 8014634:	08019db4 	.word	0x08019db4
 8014638:	08019b04 	.word	0x08019b04
 801463c:	7ff00000 	.word	0x7ff00000
 8014640:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014642:	1c51      	adds	r1, r2, #1
 8014644:	9117      	str	r1, [sp, #92]	; 0x5c
 8014646:	7852      	ldrb	r2, [r2, #1]
 8014648:	2a30      	cmp	r2, #48	; 0x30
 801464a:	d0f9      	beq.n	8014640 <_strtod_l+0x2a8>
 801464c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014650:	2908      	cmp	r1, #8
 8014652:	f63f af79 	bhi.w	8014548 <_strtod_l+0x1b0>
 8014656:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801465a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801465c:	9206      	str	r2, [sp, #24]
 801465e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014660:	1c51      	adds	r1, r2, #1
 8014662:	9117      	str	r1, [sp, #92]	; 0x5c
 8014664:	7852      	ldrb	r2, [r2, #1]
 8014666:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801466a:	2e09      	cmp	r6, #9
 801466c:	d937      	bls.n	80146de <_strtod_l+0x346>
 801466e:	9e06      	ldr	r6, [sp, #24]
 8014670:	1b89      	subs	r1, r1, r6
 8014672:	2908      	cmp	r1, #8
 8014674:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014678:	dc02      	bgt.n	8014680 <_strtod_l+0x2e8>
 801467a:	4576      	cmp	r6, lr
 801467c:	bfa8      	it	ge
 801467e:	4676      	movge	r6, lr
 8014680:	f1bc 0f00 	cmp.w	ip, #0
 8014684:	d000      	beq.n	8014688 <_strtod_l+0x2f0>
 8014686:	4276      	negs	r6, r6
 8014688:	2d00      	cmp	r5, #0
 801468a:	d14d      	bne.n	8014728 <_strtod_l+0x390>
 801468c:	9904      	ldr	r1, [sp, #16]
 801468e:	4301      	orrs	r1, r0
 8014690:	f47f aec6 	bne.w	8014420 <_strtod_l+0x88>
 8014694:	2b00      	cmp	r3, #0
 8014696:	f47f aee1 	bne.w	801445c <_strtod_l+0xc4>
 801469a:	2a69      	cmp	r2, #105	; 0x69
 801469c:	d027      	beq.n	80146ee <_strtod_l+0x356>
 801469e:	dc24      	bgt.n	80146ea <_strtod_l+0x352>
 80146a0:	2a49      	cmp	r2, #73	; 0x49
 80146a2:	d024      	beq.n	80146ee <_strtod_l+0x356>
 80146a4:	2a4e      	cmp	r2, #78	; 0x4e
 80146a6:	f47f aed9 	bne.w	801445c <_strtod_l+0xc4>
 80146aa:	499f      	ldr	r1, [pc, #636]	; (8014928 <_strtod_l+0x590>)
 80146ac:	a817      	add	r0, sp, #92	; 0x5c
 80146ae:	f002 f8b3 	bl	8016818 <__match>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f43f aed2 	beq.w	801445c <_strtod_l+0xc4>
 80146b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	2b28      	cmp	r3, #40	; 0x28
 80146be:	d12d      	bne.n	801471c <_strtod_l+0x384>
 80146c0:	499a      	ldr	r1, [pc, #616]	; (801492c <_strtod_l+0x594>)
 80146c2:	aa1a      	add	r2, sp, #104	; 0x68
 80146c4:	a817      	add	r0, sp, #92	; 0x5c
 80146c6:	f002 f8bb 	bl	8016840 <__hexnan>
 80146ca:	2805      	cmp	r0, #5
 80146cc:	d126      	bne.n	801471c <_strtod_l+0x384>
 80146ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80146d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80146d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80146dc:	e6a0      	b.n	8014420 <_strtod_l+0x88>
 80146de:	210a      	movs	r1, #10
 80146e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80146e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80146e8:	e7b9      	b.n	801465e <_strtod_l+0x2c6>
 80146ea:	2a6e      	cmp	r2, #110	; 0x6e
 80146ec:	e7db      	b.n	80146a6 <_strtod_l+0x30e>
 80146ee:	4990      	ldr	r1, [pc, #576]	; (8014930 <_strtod_l+0x598>)
 80146f0:	a817      	add	r0, sp, #92	; 0x5c
 80146f2:	f002 f891 	bl	8016818 <__match>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	f43f aeb0 	beq.w	801445c <_strtod_l+0xc4>
 80146fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146fe:	498d      	ldr	r1, [pc, #564]	; (8014934 <_strtod_l+0x59c>)
 8014700:	3b01      	subs	r3, #1
 8014702:	a817      	add	r0, sp, #92	; 0x5c
 8014704:	9317      	str	r3, [sp, #92]	; 0x5c
 8014706:	f002 f887 	bl	8016818 <__match>
 801470a:	b910      	cbnz	r0, 8014712 <_strtod_l+0x37a>
 801470c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801470e:	3301      	adds	r3, #1
 8014710:	9317      	str	r3, [sp, #92]	; 0x5c
 8014712:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014944 <_strtod_l+0x5ac>
 8014716:	f04f 0a00 	mov.w	sl, #0
 801471a:	e681      	b.n	8014420 <_strtod_l+0x88>
 801471c:	4886      	ldr	r0, [pc, #536]	; (8014938 <_strtod_l+0x5a0>)
 801471e:	f003 fa67 	bl	8017bf0 <nan>
 8014722:	ec5b ab10 	vmov	sl, fp, d0
 8014726:	e67b      	b.n	8014420 <_strtod_l+0x88>
 8014728:	9b05      	ldr	r3, [sp, #20]
 801472a:	9807      	ldr	r0, [sp, #28]
 801472c:	1af3      	subs	r3, r6, r3
 801472e:	2f00      	cmp	r7, #0
 8014730:	bf08      	it	eq
 8014732:	462f      	moveq	r7, r5
 8014734:	2d10      	cmp	r5, #16
 8014736:	9306      	str	r3, [sp, #24]
 8014738:	46a8      	mov	r8, r5
 801473a:	bfa8      	it	ge
 801473c:	f04f 0810 	movge.w	r8, #16
 8014740:	f7eb ff08 	bl	8000554 <__aeabi_ui2d>
 8014744:	2d09      	cmp	r5, #9
 8014746:	4682      	mov	sl, r0
 8014748:	468b      	mov	fp, r1
 801474a:	dd13      	ble.n	8014774 <_strtod_l+0x3dc>
 801474c:	4b7b      	ldr	r3, [pc, #492]	; (801493c <_strtod_l+0x5a4>)
 801474e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014752:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014756:	f7eb ff77 	bl	8000648 <__aeabi_dmul>
 801475a:	4682      	mov	sl, r0
 801475c:	4648      	mov	r0, r9
 801475e:	468b      	mov	fp, r1
 8014760:	f7eb fef8 	bl	8000554 <__aeabi_ui2d>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4650      	mov	r0, sl
 801476a:	4659      	mov	r1, fp
 801476c:	f7eb fdb6 	bl	80002dc <__adddf3>
 8014770:	4682      	mov	sl, r0
 8014772:	468b      	mov	fp, r1
 8014774:	2d0f      	cmp	r5, #15
 8014776:	dc38      	bgt.n	80147ea <_strtod_l+0x452>
 8014778:	9b06      	ldr	r3, [sp, #24]
 801477a:	2b00      	cmp	r3, #0
 801477c:	f43f ae50 	beq.w	8014420 <_strtod_l+0x88>
 8014780:	dd24      	ble.n	80147cc <_strtod_l+0x434>
 8014782:	2b16      	cmp	r3, #22
 8014784:	dc0b      	bgt.n	801479e <_strtod_l+0x406>
 8014786:	496d      	ldr	r1, [pc, #436]	; (801493c <_strtod_l+0x5a4>)
 8014788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801478c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014790:	4652      	mov	r2, sl
 8014792:	465b      	mov	r3, fp
 8014794:	f7eb ff58 	bl	8000648 <__aeabi_dmul>
 8014798:	4682      	mov	sl, r0
 801479a:	468b      	mov	fp, r1
 801479c:	e640      	b.n	8014420 <_strtod_l+0x88>
 801479e:	9a06      	ldr	r2, [sp, #24]
 80147a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80147a4:	4293      	cmp	r3, r2
 80147a6:	db20      	blt.n	80147ea <_strtod_l+0x452>
 80147a8:	4c64      	ldr	r4, [pc, #400]	; (801493c <_strtod_l+0x5a4>)
 80147aa:	f1c5 050f 	rsb	r5, r5, #15
 80147ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80147b2:	4652      	mov	r2, sl
 80147b4:	465b      	mov	r3, fp
 80147b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147ba:	f7eb ff45 	bl	8000648 <__aeabi_dmul>
 80147be:	9b06      	ldr	r3, [sp, #24]
 80147c0:	1b5d      	subs	r5, r3, r5
 80147c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80147c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80147ca:	e7e3      	b.n	8014794 <_strtod_l+0x3fc>
 80147cc:	9b06      	ldr	r3, [sp, #24]
 80147ce:	3316      	adds	r3, #22
 80147d0:	db0b      	blt.n	80147ea <_strtod_l+0x452>
 80147d2:	9b05      	ldr	r3, [sp, #20]
 80147d4:	1b9e      	subs	r6, r3, r6
 80147d6:	4b59      	ldr	r3, [pc, #356]	; (801493c <_strtod_l+0x5a4>)
 80147d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80147dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80147e0:	4650      	mov	r0, sl
 80147e2:	4659      	mov	r1, fp
 80147e4:	f7ec f85a 	bl	800089c <__aeabi_ddiv>
 80147e8:	e7d6      	b.n	8014798 <_strtod_l+0x400>
 80147ea:	9b06      	ldr	r3, [sp, #24]
 80147ec:	eba5 0808 	sub.w	r8, r5, r8
 80147f0:	4498      	add	r8, r3
 80147f2:	f1b8 0f00 	cmp.w	r8, #0
 80147f6:	dd74      	ble.n	80148e2 <_strtod_l+0x54a>
 80147f8:	f018 030f 	ands.w	r3, r8, #15
 80147fc:	d00a      	beq.n	8014814 <_strtod_l+0x47c>
 80147fe:	494f      	ldr	r1, [pc, #316]	; (801493c <_strtod_l+0x5a4>)
 8014800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014804:	4652      	mov	r2, sl
 8014806:	465b      	mov	r3, fp
 8014808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801480c:	f7eb ff1c 	bl	8000648 <__aeabi_dmul>
 8014810:	4682      	mov	sl, r0
 8014812:	468b      	mov	fp, r1
 8014814:	f038 080f 	bics.w	r8, r8, #15
 8014818:	d04f      	beq.n	80148ba <_strtod_l+0x522>
 801481a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801481e:	dd22      	ble.n	8014866 <_strtod_l+0x4ce>
 8014820:	2500      	movs	r5, #0
 8014822:	462e      	mov	r6, r5
 8014824:	9507      	str	r5, [sp, #28]
 8014826:	9505      	str	r5, [sp, #20]
 8014828:	2322      	movs	r3, #34	; 0x22
 801482a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014944 <_strtod_l+0x5ac>
 801482e:	6023      	str	r3, [r4, #0]
 8014830:	f04f 0a00 	mov.w	sl, #0
 8014834:	9b07      	ldr	r3, [sp, #28]
 8014836:	2b00      	cmp	r3, #0
 8014838:	f43f adf2 	beq.w	8014420 <_strtod_l+0x88>
 801483c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801483e:	4620      	mov	r0, r4
 8014840:	f002 f960 	bl	8016b04 <_Bfree>
 8014844:	9905      	ldr	r1, [sp, #20]
 8014846:	4620      	mov	r0, r4
 8014848:	f002 f95c 	bl	8016b04 <_Bfree>
 801484c:	4631      	mov	r1, r6
 801484e:	4620      	mov	r0, r4
 8014850:	f002 f958 	bl	8016b04 <_Bfree>
 8014854:	9907      	ldr	r1, [sp, #28]
 8014856:	4620      	mov	r0, r4
 8014858:	f002 f954 	bl	8016b04 <_Bfree>
 801485c:	4629      	mov	r1, r5
 801485e:	4620      	mov	r0, r4
 8014860:	f002 f950 	bl	8016b04 <_Bfree>
 8014864:	e5dc      	b.n	8014420 <_strtod_l+0x88>
 8014866:	4b36      	ldr	r3, [pc, #216]	; (8014940 <_strtod_l+0x5a8>)
 8014868:	9304      	str	r3, [sp, #16]
 801486a:	2300      	movs	r3, #0
 801486c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014870:	4650      	mov	r0, sl
 8014872:	4659      	mov	r1, fp
 8014874:	4699      	mov	r9, r3
 8014876:	f1b8 0f01 	cmp.w	r8, #1
 801487a:	dc21      	bgt.n	80148c0 <_strtod_l+0x528>
 801487c:	b10b      	cbz	r3, 8014882 <_strtod_l+0x4ea>
 801487e:	4682      	mov	sl, r0
 8014880:	468b      	mov	fp, r1
 8014882:	4b2f      	ldr	r3, [pc, #188]	; (8014940 <_strtod_l+0x5a8>)
 8014884:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014888:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801488c:	4652      	mov	r2, sl
 801488e:	465b      	mov	r3, fp
 8014890:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014894:	f7eb fed8 	bl	8000648 <__aeabi_dmul>
 8014898:	4b2a      	ldr	r3, [pc, #168]	; (8014944 <_strtod_l+0x5ac>)
 801489a:	460a      	mov	r2, r1
 801489c:	400b      	ands	r3, r1
 801489e:	492a      	ldr	r1, [pc, #168]	; (8014948 <_strtod_l+0x5b0>)
 80148a0:	428b      	cmp	r3, r1
 80148a2:	4682      	mov	sl, r0
 80148a4:	d8bc      	bhi.n	8014820 <_strtod_l+0x488>
 80148a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80148aa:	428b      	cmp	r3, r1
 80148ac:	bf86      	itte	hi
 80148ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801494c <_strtod_l+0x5b4>
 80148b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80148b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80148ba:	2300      	movs	r3, #0
 80148bc:	9304      	str	r3, [sp, #16]
 80148be:	e084      	b.n	80149ca <_strtod_l+0x632>
 80148c0:	f018 0f01 	tst.w	r8, #1
 80148c4:	d005      	beq.n	80148d2 <_strtod_l+0x53a>
 80148c6:	9b04      	ldr	r3, [sp, #16]
 80148c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148cc:	f7eb febc 	bl	8000648 <__aeabi_dmul>
 80148d0:	2301      	movs	r3, #1
 80148d2:	9a04      	ldr	r2, [sp, #16]
 80148d4:	3208      	adds	r2, #8
 80148d6:	f109 0901 	add.w	r9, r9, #1
 80148da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80148de:	9204      	str	r2, [sp, #16]
 80148e0:	e7c9      	b.n	8014876 <_strtod_l+0x4de>
 80148e2:	d0ea      	beq.n	80148ba <_strtod_l+0x522>
 80148e4:	f1c8 0800 	rsb	r8, r8, #0
 80148e8:	f018 020f 	ands.w	r2, r8, #15
 80148ec:	d00a      	beq.n	8014904 <_strtod_l+0x56c>
 80148ee:	4b13      	ldr	r3, [pc, #76]	; (801493c <_strtod_l+0x5a4>)
 80148f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148f4:	4650      	mov	r0, sl
 80148f6:	4659      	mov	r1, fp
 80148f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fc:	f7eb ffce 	bl	800089c <__aeabi_ddiv>
 8014900:	4682      	mov	sl, r0
 8014902:	468b      	mov	fp, r1
 8014904:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014908:	d0d7      	beq.n	80148ba <_strtod_l+0x522>
 801490a:	f1b8 0f1f 	cmp.w	r8, #31
 801490e:	dd1f      	ble.n	8014950 <_strtod_l+0x5b8>
 8014910:	2500      	movs	r5, #0
 8014912:	462e      	mov	r6, r5
 8014914:	9507      	str	r5, [sp, #28]
 8014916:	9505      	str	r5, [sp, #20]
 8014918:	2322      	movs	r3, #34	; 0x22
 801491a:	f04f 0a00 	mov.w	sl, #0
 801491e:	f04f 0b00 	mov.w	fp, #0
 8014922:	6023      	str	r3, [r4, #0]
 8014924:	e786      	b.n	8014834 <_strtod_l+0x49c>
 8014926:	bf00      	nop
 8014928:	08019ad5 	.word	0x08019ad5
 801492c:	08019b18 	.word	0x08019b18
 8014930:	08019acd 	.word	0x08019acd
 8014934:	08019c5c 	.word	0x08019c5c
 8014938:	08019f70 	.word	0x08019f70
 801493c:	08019e50 	.word	0x08019e50
 8014940:	08019e28 	.word	0x08019e28
 8014944:	7ff00000 	.word	0x7ff00000
 8014948:	7ca00000 	.word	0x7ca00000
 801494c:	7fefffff 	.word	0x7fefffff
 8014950:	f018 0310 	ands.w	r3, r8, #16
 8014954:	bf18      	it	ne
 8014956:	236a      	movne	r3, #106	; 0x6a
 8014958:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014d08 <_strtod_l+0x970>
 801495c:	9304      	str	r3, [sp, #16]
 801495e:	4650      	mov	r0, sl
 8014960:	4659      	mov	r1, fp
 8014962:	2300      	movs	r3, #0
 8014964:	f018 0f01 	tst.w	r8, #1
 8014968:	d004      	beq.n	8014974 <_strtod_l+0x5dc>
 801496a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801496e:	f7eb fe6b 	bl	8000648 <__aeabi_dmul>
 8014972:	2301      	movs	r3, #1
 8014974:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014978:	f109 0908 	add.w	r9, r9, #8
 801497c:	d1f2      	bne.n	8014964 <_strtod_l+0x5cc>
 801497e:	b10b      	cbz	r3, 8014984 <_strtod_l+0x5ec>
 8014980:	4682      	mov	sl, r0
 8014982:	468b      	mov	fp, r1
 8014984:	9b04      	ldr	r3, [sp, #16]
 8014986:	b1c3      	cbz	r3, 80149ba <_strtod_l+0x622>
 8014988:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801498c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014990:	2b00      	cmp	r3, #0
 8014992:	4659      	mov	r1, fp
 8014994:	dd11      	ble.n	80149ba <_strtod_l+0x622>
 8014996:	2b1f      	cmp	r3, #31
 8014998:	f340 8124 	ble.w	8014be4 <_strtod_l+0x84c>
 801499c:	2b34      	cmp	r3, #52	; 0x34
 801499e:	bfde      	ittt	le
 80149a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80149a4:	f04f 33ff 	movle.w	r3, #4294967295
 80149a8:	fa03 f202 	lslle.w	r2, r3, r2
 80149ac:	f04f 0a00 	mov.w	sl, #0
 80149b0:	bfcc      	ite	gt
 80149b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80149b6:	ea02 0b01 	andle.w	fp, r2, r1
 80149ba:	2200      	movs	r2, #0
 80149bc:	2300      	movs	r3, #0
 80149be:	4650      	mov	r0, sl
 80149c0:	4659      	mov	r1, fp
 80149c2:	f7ec f8a9 	bl	8000b18 <__aeabi_dcmpeq>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d1a2      	bne.n	8014910 <_strtod_l+0x578>
 80149ca:	9b07      	ldr	r3, [sp, #28]
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	9908      	ldr	r1, [sp, #32]
 80149d0:	462b      	mov	r3, r5
 80149d2:	463a      	mov	r2, r7
 80149d4:	4620      	mov	r0, r4
 80149d6:	f002 f8fd 	bl	8016bd4 <__s2b>
 80149da:	9007      	str	r0, [sp, #28]
 80149dc:	2800      	cmp	r0, #0
 80149de:	f43f af1f 	beq.w	8014820 <_strtod_l+0x488>
 80149e2:	9b05      	ldr	r3, [sp, #20]
 80149e4:	1b9e      	subs	r6, r3, r6
 80149e6:	9b06      	ldr	r3, [sp, #24]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	bfb4      	ite	lt
 80149ec:	4633      	movlt	r3, r6
 80149ee:	2300      	movge	r3, #0
 80149f0:	930c      	str	r3, [sp, #48]	; 0x30
 80149f2:	9b06      	ldr	r3, [sp, #24]
 80149f4:	2500      	movs	r5, #0
 80149f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80149fa:	9312      	str	r3, [sp, #72]	; 0x48
 80149fc:	462e      	mov	r6, r5
 80149fe:	9b07      	ldr	r3, [sp, #28]
 8014a00:	4620      	mov	r0, r4
 8014a02:	6859      	ldr	r1, [r3, #4]
 8014a04:	f002 f83e 	bl	8016a84 <_Balloc>
 8014a08:	9005      	str	r0, [sp, #20]
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	f43f af0c 	beq.w	8014828 <_strtod_l+0x490>
 8014a10:	9b07      	ldr	r3, [sp, #28]
 8014a12:	691a      	ldr	r2, [r3, #16]
 8014a14:	3202      	adds	r2, #2
 8014a16:	f103 010c 	add.w	r1, r3, #12
 8014a1a:	0092      	lsls	r2, r2, #2
 8014a1c:	300c      	adds	r0, #12
 8014a1e:	f7fe fc75 	bl	801330c <memcpy>
 8014a22:	ec4b ab10 	vmov	d0, sl, fp
 8014a26:	aa1a      	add	r2, sp, #104	; 0x68
 8014a28:	a919      	add	r1, sp, #100	; 0x64
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	f002 fc18 	bl	8017260 <__d2b>
 8014a30:	ec4b ab18 	vmov	d8, sl, fp
 8014a34:	9018      	str	r0, [sp, #96]	; 0x60
 8014a36:	2800      	cmp	r0, #0
 8014a38:	f43f aef6 	beq.w	8014828 <_strtod_l+0x490>
 8014a3c:	2101      	movs	r1, #1
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f002 f962 	bl	8016d08 <__i2b>
 8014a44:	4606      	mov	r6, r0
 8014a46:	2800      	cmp	r0, #0
 8014a48:	f43f aeee 	beq.w	8014828 <_strtod_l+0x490>
 8014a4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a4e:	9904      	ldr	r1, [sp, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	bfab      	itete	ge
 8014a54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014a56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014a58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014a5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8014a5e:	bfac      	ite	ge
 8014a60:	eb03 0902 	addge.w	r9, r3, r2
 8014a64:	1ad7      	sublt	r7, r2, r3
 8014a66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014a68:	eba3 0801 	sub.w	r8, r3, r1
 8014a6c:	4490      	add	r8, r2
 8014a6e:	4ba1      	ldr	r3, [pc, #644]	; (8014cf4 <_strtod_l+0x95c>)
 8014a70:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a74:	4598      	cmp	r8, r3
 8014a76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a7a:	f280 80c7 	bge.w	8014c0c <_strtod_l+0x874>
 8014a7e:	eba3 0308 	sub.w	r3, r3, r8
 8014a82:	2b1f      	cmp	r3, #31
 8014a84:	eba2 0203 	sub.w	r2, r2, r3
 8014a88:	f04f 0101 	mov.w	r1, #1
 8014a8c:	f300 80b1 	bgt.w	8014bf2 <_strtod_l+0x85a>
 8014a90:	fa01 f303 	lsl.w	r3, r1, r3
 8014a94:	930d      	str	r3, [sp, #52]	; 0x34
 8014a96:	2300      	movs	r3, #0
 8014a98:	9308      	str	r3, [sp, #32]
 8014a9a:	eb09 0802 	add.w	r8, r9, r2
 8014a9e:	9b04      	ldr	r3, [sp, #16]
 8014aa0:	45c1      	cmp	r9, r8
 8014aa2:	4417      	add	r7, r2
 8014aa4:	441f      	add	r7, r3
 8014aa6:	464b      	mov	r3, r9
 8014aa8:	bfa8      	it	ge
 8014aaa:	4643      	movge	r3, r8
 8014aac:	42bb      	cmp	r3, r7
 8014aae:	bfa8      	it	ge
 8014ab0:	463b      	movge	r3, r7
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	bfc2      	ittt	gt
 8014ab6:	eba8 0803 	subgt.w	r8, r8, r3
 8014aba:	1aff      	subgt	r7, r7, r3
 8014abc:	eba9 0903 	subgt.w	r9, r9, r3
 8014ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	dd17      	ble.n	8014af6 <_strtod_l+0x75e>
 8014ac6:	4631      	mov	r1, r6
 8014ac8:	461a      	mov	r2, r3
 8014aca:	4620      	mov	r0, r4
 8014acc:	f002 f9dc 	bl	8016e88 <__pow5mult>
 8014ad0:	4606      	mov	r6, r0
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	f43f aea8 	beq.w	8014828 <_strtod_l+0x490>
 8014ad8:	4601      	mov	r1, r0
 8014ada:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014adc:	4620      	mov	r0, r4
 8014ade:	f002 f929 	bl	8016d34 <__multiply>
 8014ae2:	900b      	str	r0, [sp, #44]	; 0x2c
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	f43f ae9f 	beq.w	8014828 <_strtod_l+0x490>
 8014aea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014aec:	4620      	mov	r0, r4
 8014aee:	f002 f809 	bl	8016b04 <_Bfree>
 8014af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014af4:	9318      	str	r3, [sp, #96]	; 0x60
 8014af6:	f1b8 0f00 	cmp.w	r8, #0
 8014afa:	f300 808c 	bgt.w	8014c16 <_strtod_l+0x87e>
 8014afe:	9b06      	ldr	r3, [sp, #24]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	dd08      	ble.n	8014b16 <_strtod_l+0x77e>
 8014b04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b06:	9905      	ldr	r1, [sp, #20]
 8014b08:	4620      	mov	r0, r4
 8014b0a:	f002 f9bd 	bl	8016e88 <__pow5mult>
 8014b0e:	9005      	str	r0, [sp, #20]
 8014b10:	2800      	cmp	r0, #0
 8014b12:	f43f ae89 	beq.w	8014828 <_strtod_l+0x490>
 8014b16:	2f00      	cmp	r7, #0
 8014b18:	dd08      	ble.n	8014b2c <_strtod_l+0x794>
 8014b1a:	9905      	ldr	r1, [sp, #20]
 8014b1c:	463a      	mov	r2, r7
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f002 fa0c 	bl	8016f3c <__lshift>
 8014b24:	9005      	str	r0, [sp, #20]
 8014b26:	2800      	cmp	r0, #0
 8014b28:	f43f ae7e 	beq.w	8014828 <_strtod_l+0x490>
 8014b2c:	f1b9 0f00 	cmp.w	r9, #0
 8014b30:	dd08      	ble.n	8014b44 <_strtod_l+0x7ac>
 8014b32:	4631      	mov	r1, r6
 8014b34:	464a      	mov	r2, r9
 8014b36:	4620      	mov	r0, r4
 8014b38:	f002 fa00 	bl	8016f3c <__lshift>
 8014b3c:	4606      	mov	r6, r0
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f43f ae72 	beq.w	8014828 <_strtod_l+0x490>
 8014b44:	9a05      	ldr	r2, [sp, #20]
 8014b46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f002 fa83 	bl	8017054 <__mdiff>
 8014b4e:	4605      	mov	r5, r0
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f43f ae69 	beq.w	8014828 <_strtod_l+0x490>
 8014b56:	68c3      	ldr	r3, [r0, #12]
 8014b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	60c3      	str	r3, [r0, #12]
 8014b5e:	4631      	mov	r1, r6
 8014b60:	f002 fa5c 	bl	801701c <__mcmp>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	da60      	bge.n	8014c2a <_strtod_l+0x892>
 8014b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b6a:	ea53 030a 	orrs.w	r3, r3, sl
 8014b6e:	f040 8082 	bne.w	8014c76 <_strtod_l+0x8de>
 8014b72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d17d      	bne.n	8014c76 <_strtod_l+0x8de>
 8014b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b7e:	0d1b      	lsrs	r3, r3, #20
 8014b80:	051b      	lsls	r3, r3, #20
 8014b82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014b86:	d976      	bls.n	8014c76 <_strtod_l+0x8de>
 8014b88:	696b      	ldr	r3, [r5, #20]
 8014b8a:	b913      	cbnz	r3, 8014b92 <_strtod_l+0x7fa>
 8014b8c:	692b      	ldr	r3, [r5, #16]
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	dd71      	ble.n	8014c76 <_strtod_l+0x8de>
 8014b92:	4629      	mov	r1, r5
 8014b94:	2201      	movs	r2, #1
 8014b96:	4620      	mov	r0, r4
 8014b98:	f002 f9d0 	bl	8016f3c <__lshift>
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	f002 fa3c 	bl	801701c <__mcmp>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	dd66      	ble.n	8014c76 <_strtod_l+0x8de>
 8014ba8:	9904      	ldr	r1, [sp, #16]
 8014baa:	4a53      	ldr	r2, [pc, #332]	; (8014cf8 <_strtod_l+0x960>)
 8014bac:	465b      	mov	r3, fp
 8014bae:	2900      	cmp	r1, #0
 8014bb0:	f000 8081 	beq.w	8014cb6 <_strtod_l+0x91e>
 8014bb4:	ea02 010b 	and.w	r1, r2, fp
 8014bb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014bbc:	dc7b      	bgt.n	8014cb6 <_strtod_l+0x91e>
 8014bbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014bc2:	f77f aea9 	ble.w	8014918 <_strtod_l+0x580>
 8014bc6:	4b4d      	ldr	r3, [pc, #308]	; (8014cfc <_strtod_l+0x964>)
 8014bc8:	4650      	mov	r0, sl
 8014bca:	4659      	mov	r1, fp
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f7eb fd3b 	bl	8000648 <__aeabi_dmul>
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4303      	orrs	r3, r0
 8014bd6:	bf08      	it	eq
 8014bd8:	2322      	moveq	r3, #34	; 0x22
 8014bda:	4682      	mov	sl, r0
 8014bdc:	468b      	mov	fp, r1
 8014bde:	bf08      	it	eq
 8014be0:	6023      	streq	r3, [r4, #0]
 8014be2:	e62b      	b.n	801483c <_strtod_l+0x4a4>
 8014be4:	f04f 32ff 	mov.w	r2, #4294967295
 8014be8:	fa02 f303 	lsl.w	r3, r2, r3
 8014bec:	ea03 0a0a 	and.w	sl, r3, sl
 8014bf0:	e6e3      	b.n	80149ba <_strtod_l+0x622>
 8014bf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014bf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014bfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014bfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014c02:	fa01 f308 	lsl.w	r3, r1, r8
 8014c06:	9308      	str	r3, [sp, #32]
 8014c08:	910d      	str	r1, [sp, #52]	; 0x34
 8014c0a:	e746      	b.n	8014a9a <_strtod_l+0x702>
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	9308      	str	r3, [sp, #32]
 8014c10:	2301      	movs	r3, #1
 8014c12:	930d      	str	r3, [sp, #52]	; 0x34
 8014c14:	e741      	b.n	8014a9a <_strtod_l+0x702>
 8014c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c18:	4642      	mov	r2, r8
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f002 f98e 	bl	8016f3c <__lshift>
 8014c20:	9018      	str	r0, [sp, #96]	; 0x60
 8014c22:	2800      	cmp	r0, #0
 8014c24:	f47f af6b 	bne.w	8014afe <_strtod_l+0x766>
 8014c28:	e5fe      	b.n	8014828 <_strtod_l+0x490>
 8014c2a:	465f      	mov	r7, fp
 8014c2c:	d16e      	bne.n	8014d0c <_strtod_l+0x974>
 8014c2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c34:	b342      	cbz	r2, 8014c88 <_strtod_l+0x8f0>
 8014c36:	4a32      	ldr	r2, [pc, #200]	; (8014d00 <_strtod_l+0x968>)
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d128      	bne.n	8014c8e <_strtod_l+0x8f6>
 8014c3c:	9b04      	ldr	r3, [sp, #16]
 8014c3e:	4651      	mov	r1, sl
 8014c40:	b1eb      	cbz	r3, 8014c7e <_strtod_l+0x8e6>
 8014c42:	4b2d      	ldr	r3, [pc, #180]	; (8014cf8 <_strtod_l+0x960>)
 8014c44:	403b      	ands	r3, r7
 8014c46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c4e:	d819      	bhi.n	8014c84 <_strtod_l+0x8ec>
 8014c50:	0d1b      	lsrs	r3, r3, #20
 8014c52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c56:	fa02 f303 	lsl.w	r3, r2, r3
 8014c5a:	4299      	cmp	r1, r3
 8014c5c:	d117      	bne.n	8014c8e <_strtod_l+0x8f6>
 8014c5e:	4b29      	ldr	r3, [pc, #164]	; (8014d04 <_strtod_l+0x96c>)
 8014c60:	429f      	cmp	r7, r3
 8014c62:	d102      	bne.n	8014c6a <_strtod_l+0x8d2>
 8014c64:	3101      	adds	r1, #1
 8014c66:	f43f addf 	beq.w	8014828 <_strtod_l+0x490>
 8014c6a:	4b23      	ldr	r3, [pc, #140]	; (8014cf8 <_strtod_l+0x960>)
 8014c6c:	403b      	ands	r3, r7
 8014c6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014c72:	f04f 0a00 	mov.w	sl, #0
 8014c76:	9b04      	ldr	r3, [sp, #16]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1a4      	bne.n	8014bc6 <_strtod_l+0x82e>
 8014c7c:	e5de      	b.n	801483c <_strtod_l+0x4a4>
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	e7ea      	b.n	8014c5a <_strtod_l+0x8c2>
 8014c84:	4613      	mov	r3, r2
 8014c86:	e7e8      	b.n	8014c5a <_strtod_l+0x8c2>
 8014c88:	ea53 030a 	orrs.w	r3, r3, sl
 8014c8c:	d08c      	beq.n	8014ba8 <_strtod_l+0x810>
 8014c8e:	9b08      	ldr	r3, [sp, #32]
 8014c90:	b1db      	cbz	r3, 8014cca <_strtod_l+0x932>
 8014c92:	423b      	tst	r3, r7
 8014c94:	d0ef      	beq.n	8014c76 <_strtod_l+0x8de>
 8014c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c98:	9a04      	ldr	r2, [sp, #16]
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	4659      	mov	r1, fp
 8014c9e:	b1c3      	cbz	r3, 8014cd2 <_strtod_l+0x93a>
 8014ca0:	f7ff fb5c 	bl	801435c <sulp>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	460b      	mov	r3, r1
 8014ca8:	ec51 0b18 	vmov	r0, r1, d8
 8014cac:	f7eb fb16 	bl	80002dc <__adddf3>
 8014cb0:	4682      	mov	sl, r0
 8014cb2:	468b      	mov	fp, r1
 8014cb4:	e7df      	b.n	8014c76 <_strtod_l+0x8de>
 8014cb6:	4013      	ands	r3, r2
 8014cb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014cbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014cc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014cc4:	f04f 3aff 	mov.w	sl, #4294967295
 8014cc8:	e7d5      	b.n	8014c76 <_strtod_l+0x8de>
 8014cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ccc:	ea13 0f0a 	tst.w	r3, sl
 8014cd0:	e7e0      	b.n	8014c94 <_strtod_l+0x8fc>
 8014cd2:	f7ff fb43 	bl	801435c <sulp>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	ec51 0b18 	vmov	r0, r1, d8
 8014cde:	f7eb fafb 	bl	80002d8 <__aeabi_dsub>
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4682      	mov	sl, r0
 8014ce8:	468b      	mov	fp, r1
 8014cea:	f7eb ff15 	bl	8000b18 <__aeabi_dcmpeq>
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	d0c1      	beq.n	8014c76 <_strtod_l+0x8de>
 8014cf2:	e611      	b.n	8014918 <_strtod_l+0x580>
 8014cf4:	fffffc02 	.word	0xfffffc02
 8014cf8:	7ff00000 	.word	0x7ff00000
 8014cfc:	39500000 	.word	0x39500000
 8014d00:	000fffff 	.word	0x000fffff
 8014d04:	7fefffff 	.word	0x7fefffff
 8014d08:	08019b30 	.word	0x08019b30
 8014d0c:	4631      	mov	r1, r6
 8014d0e:	4628      	mov	r0, r5
 8014d10:	f002 fb02 	bl	8017318 <__ratio>
 8014d14:	ec59 8b10 	vmov	r8, r9, d0
 8014d18:	ee10 0a10 	vmov	r0, s0
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d22:	4649      	mov	r1, r9
 8014d24:	f7eb ff0c 	bl	8000b40 <__aeabi_dcmple>
 8014d28:	2800      	cmp	r0, #0
 8014d2a:	d07a      	beq.n	8014e22 <_strtod_l+0xa8a>
 8014d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d04a      	beq.n	8014dc8 <_strtod_l+0xa30>
 8014d32:	4b95      	ldr	r3, [pc, #596]	; (8014f88 <_strtod_l+0xbf0>)
 8014d34:	2200      	movs	r2, #0
 8014d36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014f88 <_strtod_l+0xbf0>
 8014d3e:	f04f 0800 	mov.w	r8, #0
 8014d42:	4b92      	ldr	r3, [pc, #584]	; (8014f8c <_strtod_l+0xbf4>)
 8014d44:	403b      	ands	r3, r7
 8014d46:	930d      	str	r3, [sp, #52]	; 0x34
 8014d48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d4a:	4b91      	ldr	r3, [pc, #580]	; (8014f90 <_strtod_l+0xbf8>)
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	f040 80b0 	bne.w	8014eb2 <_strtod_l+0xb1a>
 8014d52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014d5a:	ec4b ab10 	vmov	d0, sl, fp
 8014d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d62:	f002 fa01 	bl	8017168 <__ulp>
 8014d66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d6a:	ec53 2b10 	vmov	r2, r3, d0
 8014d6e:	f7eb fc6b 	bl	8000648 <__aeabi_dmul>
 8014d72:	4652      	mov	r2, sl
 8014d74:	465b      	mov	r3, fp
 8014d76:	f7eb fab1 	bl	80002dc <__adddf3>
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4983      	ldr	r1, [pc, #524]	; (8014f8c <_strtod_l+0xbf4>)
 8014d7e:	4a85      	ldr	r2, [pc, #532]	; (8014f94 <_strtod_l+0xbfc>)
 8014d80:	4019      	ands	r1, r3
 8014d82:	4291      	cmp	r1, r2
 8014d84:	4682      	mov	sl, r0
 8014d86:	d960      	bls.n	8014e4a <_strtod_l+0xab2>
 8014d88:	ee18 3a90 	vmov	r3, s17
 8014d8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d104      	bne.n	8014d9e <_strtod_l+0xa06>
 8014d94:	ee18 3a10 	vmov	r3, s16
 8014d98:	3301      	adds	r3, #1
 8014d9a:	f43f ad45 	beq.w	8014828 <_strtod_l+0x490>
 8014d9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014fa0 <_strtod_l+0xc08>
 8014da2:	f04f 3aff 	mov.w	sl, #4294967295
 8014da6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014da8:	4620      	mov	r0, r4
 8014daa:	f001 feab 	bl	8016b04 <_Bfree>
 8014dae:	9905      	ldr	r1, [sp, #20]
 8014db0:	4620      	mov	r0, r4
 8014db2:	f001 fea7 	bl	8016b04 <_Bfree>
 8014db6:	4631      	mov	r1, r6
 8014db8:	4620      	mov	r0, r4
 8014dba:	f001 fea3 	bl	8016b04 <_Bfree>
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f001 fe9f 	bl	8016b04 <_Bfree>
 8014dc6:	e61a      	b.n	80149fe <_strtod_l+0x666>
 8014dc8:	f1ba 0f00 	cmp.w	sl, #0
 8014dcc:	d11b      	bne.n	8014e06 <_strtod_l+0xa6e>
 8014dce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dd2:	b9f3      	cbnz	r3, 8014e12 <_strtod_l+0xa7a>
 8014dd4:	4b6c      	ldr	r3, [pc, #432]	; (8014f88 <_strtod_l+0xbf0>)
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	4640      	mov	r0, r8
 8014dda:	4649      	mov	r1, r9
 8014ddc:	f7eb fea6 	bl	8000b2c <__aeabi_dcmplt>
 8014de0:	b9d0      	cbnz	r0, 8014e18 <_strtod_l+0xa80>
 8014de2:	4640      	mov	r0, r8
 8014de4:	4649      	mov	r1, r9
 8014de6:	4b6c      	ldr	r3, [pc, #432]	; (8014f98 <_strtod_l+0xc00>)
 8014de8:	2200      	movs	r2, #0
 8014dea:	f7eb fc2d 	bl	8000648 <__aeabi_dmul>
 8014dee:	4680      	mov	r8, r0
 8014df0:	4689      	mov	r9, r1
 8014df2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014df6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8014dfa:	9315      	str	r3, [sp, #84]	; 0x54
 8014dfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014e00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e04:	e79d      	b.n	8014d42 <_strtod_l+0x9aa>
 8014e06:	f1ba 0f01 	cmp.w	sl, #1
 8014e0a:	d102      	bne.n	8014e12 <_strtod_l+0xa7a>
 8014e0c:	2f00      	cmp	r7, #0
 8014e0e:	f43f ad83 	beq.w	8014918 <_strtod_l+0x580>
 8014e12:	4b62      	ldr	r3, [pc, #392]	; (8014f9c <_strtod_l+0xc04>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	e78e      	b.n	8014d36 <_strtod_l+0x99e>
 8014e18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014f98 <_strtod_l+0xc00>
 8014e1c:	f04f 0800 	mov.w	r8, #0
 8014e20:	e7e7      	b.n	8014df2 <_strtod_l+0xa5a>
 8014e22:	4b5d      	ldr	r3, [pc, #372]	; (8014f98 <_strtod_l+0xc00>)
 8014e24:	4640      	mov	r0, r8
 8014e26:	4649      	mov	r1, r9
 8014e28:	2200      	movs	r2, #0
 8014e2a:	f7eb fc0d 	bl	8000648 <__aeabi_dmul>
 8014e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e30:	4680      	mov	r8, r0
 8014e32:	4689      	mov	r9, r1
 8014e34:	b933      	cbnz	r3, 8014e44 <_strtod_l+0xaac>
 8014e36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e3a:	900e      	str	r0, [sp, #56]	; 0x38
 8014e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014e42:	e7dd      	b.n	8014e00 <_strtod_l+0xa68>
 8014e44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014e48:	e7f9      	b.n	8014e3e <_strtod_l+0xaa6>
 8014e4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014e4e:	9b04      	ldr	r3, [sp, #16]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d1a8      	bne.n	8014da6 <_strtod_l+0xa0e>
 8014e54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e5a:	0d1b      	lsrs	r3, r3, #20
 8014e5c:	051b      	lsls	r3, r3, #20
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d1a1      	bne.n	8014da6 <_strtod_l+0xa0e>
 8014e62:	4640      	mov	r0, r8
 8014e64:	4649      	mov	r1, r9
 8014e66:	f7eb ff37 	bl	8000cd8 <__aeabi_d2lz>
 8014e6a:	f7eb fbbf 	bl	80005ec <__aeabi_l2d>
 8014e6e:	4602      	mov	r2, r0
 8014e70:	460b      	mov	r3, r1
 8014e72:	4640      	mov	r0, r8
 8014e74:	4649      	mov	r1, r9
 8014e76:	f7eb fa2f 	bl	80002d8 <__aeabi_dsub>
 8014e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e80:	ea43 030a 	orr.w	r3, r3, sl
 8014e84:	4313      	orrs	r3, r2
 8014e86:	4680      	mov	r8, r0
 8014e88:	4689      	mov	r9, r1
 8014e8a:	d055      	beq.n	8014f38 <_strtod_l+0xba0>
 8014e8c:	a336      	add	r3, pc, #216	; (adr r3, 8014f68 <_strtod_l+0xbd0>)
 8014e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e92:	f7eb fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	f47f acd0 	bne.w	801483c <_strtod_l+0x4a4>
 8014e9c:	a334      	add	r3, pc, #208	; (adr r3, 8014f70 <_strtod_l+0xbd8>)
 8014e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea2:	4640      	mov	r0, r8
 8014ea4:	4649      	mov	r1, r9
 8014ea6:	f7eb fe5f 	bl	8000b68 <__aeabi_dcmpgt>
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	f43f af7b 	beq.w	8014da6 <_strtod_l+0xa0e>
 8014eb0:	e4c4      	b.n	801483c <_strtod_l+0x4a4>
 8014eb2:	9b04      	ldr	r3, [sp, #16]
 8014eb4:	b333      	cbz	r3, 8014f04 <_strtod_l+0xb6c>
 8014eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014ebc:	d822      	bhi.n	8014f04 <_strtod_l+0xb6c>
 8014ebe:	a32e      	add	r3, pc, #184	; (adr r3, 8014f78 <_strtod_l+0xbe0>)
 8014ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	4649      	mov	r1, r9
 8014ec8:	f7eb fe3a 	bl	8000b40 <__aeabi_dcmple>
 8014ecc:	b1a0      	cbz	r0, 8014ef8 <_strtod_l+0xb60>
 8014ece:	4649      	mov	r1, r9
 8014ed0:	4640      	mov	r0, r8
 8014ed2:	f7eb fe91 	bl	8000bf8 <__aeabi_d2uiz>
 8014ed6:	2801      	cmp	r0, #1
 8014ed8:	bf38      	it	cc
 8014eda:	2001      	movcc	r0, #1
 8014edc:	f7eb fb3a 	bl	8000554 <__aeabi_ui2d>
 8014ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ee2:	4680      	mov	r8, r0
 8014ee4:	4689      	mov	r9, r1
 8014ee6:	bb23      	cbnz	r3, 8014f32 <_strtod_l+0xb9a>
 8014ee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eec:	9010      	str	r0, [sp, #64]	; 0x40
 8014eee:	9311      	str	r3, [sp, #68]	; 0x44
 8014ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ef4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014efa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014efc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014f00:	1a9b      	subs	r3, r3, r2
 8014f02:	9309      	str	r3, [sp, #36]	; 0x24
 8014f04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f08:	eeb0 0a48 	vmov.f32	s0, s16
 8014f0c:	eef0 0a68 	vmov.f32	s1, s17
 8014f10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f14:	f002 f928 	bl	8017168 <__ulp>
 8014f18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f1c:	ec53 2b10 	vmov	r2, r3, d0
 8014f20:	f7eb fb92 	bl	8000648 <__aeabi_dmul>
 8014f24:	ec53 2b18 	vmov	r2, r3, d8
 8014f28:	f7eb f9d8 	bl	80002dc <__adddf3>
 8014f2c:	4682      	mov	sl, r0
 8014f2e:	468b      	mov	fp, r1
 8014f30:	e78d      	b.n	8014e4e <_strtod_l+0xab6>
 8014f32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014f36:	e7db      	b.n	8014ef0 <_strtod_l+0xb58>
 8014f38:	a311      	add	r3, pc, #68	; (adr r3, 8014f80 <_strtod_l+0xbe8>)
 8014f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f3e:	f7eb fdf5 	bl	8000b2c <__aeabi_dcmplt>
 8014f42:	e7b2      	b.n	8014eaa <_strtod_l+0xb12>
 8014f44:	2300      	movs	r3, #0
 8014f46:	930a      	str	r3, [sp, #40]	; 0x28
 8014f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f4c:	6013      	str	r3, [r2, #0]
 8014f4e:	f7ff ba6b 	b.w	8014428 <_strtod_l+0x90>
 8014f52:	2a65      	cmp	r2, #101	; 0x65
 8014f54:	f43f ab5f 	beq.w	8014616 <_strtod_l+0x27e>
 8014f58:	2a45      	cmp	r2, #69	; 0x45
 8014f5a:	f43f ab5c 	beq.w	8014616 <_strtod_l+0x27e>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	f7ff bb94 	b.w	801468c <_strtod_l+0x2f4>
 8014f64:	f3af 8000 	nop.w
 8014f68:	94a03595 	.word	0x94a03595
 8014f6c:	3fdfffff 	.word	0x3fdfffff
 8014f70:	35afe535 	.word	0x35afe535
 8014f74:	3fe00000 	.word	0x3fe00000
 8014f78:	ffc00000 	.word	0xffc00000
 8014f7c:	41dfffff 	.word	0x41dfffff
 8014f80:	94a03595 	.word	0x94a03595
 8014f84:	3fcfffff 	.word	0x3fcfffff
 8014f88:	3ff00000 	.word	0x3ff00000
 8014f8c:	7ff00000 	.word	0x7ff00000
 8014f90:	7fe00000 	.word	0x7fe00000
 8014f94:	7c9fffff 	.word	0x7c9fffff
 8014f98:	3fe00000 	.word	0x3fe00000
 8014f9c:	bff00000 	.word	0xbff00000
 8014fa0:	7fefffff 	.word	0x7fefffff

08014fa4 <_strtod_r>:
 8014fa4:	4b01      	ldr	r3, [pc, #4]	; (8014fac <_strtod_r+0x8>)
 8014fa6:	f7ff b9f7 	b.w	8014398 <_strtod_l>
 8014faa:	bf00      	nop
 8014fac:	20000088 	.word	0x20000088

08014fb0 <_strtol_l.constprop.0>:
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fb6:	d001      	beq.n	8014fbc <_strtol_l.constprop.0+0xc>
 8014fb8:	2b24      	cmp	r3, #36	; 0x24
 8014fba:	d906      	bls.n	8014fca <_strtol_l.constprop.0+0x1a>
 8014fbc:	f7fe f97c 	bl	80132b8 <__errno>
 8014fc0:	2316      	movs	r3, #22
 8014fc2:	6003      	str	r3, [r0, #0]
 8014fc4:	2000      	movs	r0, #0
 8014fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80150b0 <_strtol_l.constprop.0+0x100>
 8014fce:	460d      	mov	r5, r1
 8014fd0:	462e      	mov	r6, r5
 8014fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014fda:	f017 0708 	ands.w	r7, r7, #8
 8014fde:	d1f7      	bne.n	8014fd0 <_strtol_l.constprop.0+0x20>
 8014fe0:	2c2d      	cmp	r4, #45	; 0x2d
 8014fe2:	d132      	bne.n	801504a <_strtol_l.constprop.0+0x9a>
 8014fe4:	782c      	ldrb	r4, [r5, #0]
 8014fe6:	2701      	movs	r7, #1
 8014fe8:	1cb5      	adds	r5, r6, #2
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d05b      	beq.n	80150a6 <_strtol_l.constprop.0+0xf6>
 8014fee:	2b10      	cmp	r3, #16
 8014ff0:	d109      	bne.n	8015006 <_strtol_l.constprop.0+0x56>
 8014ff2:	2c30      	cmp	r4, #48	; 0x30
 8014ff4:	d107      	bne.n	8015006 <_strtol_l.constprop.0+0x56>
 8014ff6:	782c      	ldrb	r4, [r5, #0]
 8014ff8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014ffc:	2c58      	cmp	r4, #88	; 0x58
 8014ffe:	d14d      	bne.n	801509c <_strtol_l.constprop.0+0xec>
 8015000:	786c      	ldrb	r4, [r5, #1]
 8015002:	2310      	movs	r3, #16
 8015004:	3502      	adds	r5, #2
 8015006:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801500a:	f108 38ff 	add.w	r8, r8, #4294967295
 801500e:	f04f 0c00 	mov.w	ip, #0
 8015012:	fbb8 f9f3 	udiv	r9, r8, r3
 8015016:	4666      	mov	r6, ip
 8015018:	fb03 8a19 	mls	sl, r3, r9, r8
 801501c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015020:	f1be 0f09 	cmp.w	lr, #9
 8015024:	d816      	bhi.n	8015054 <_strtol_l.constprop.0+0xa4>
 8015026:	4674      	mov	r4, lr
 8015028:	42a3      	cmp	r3, r4
 801502a:	dd24      	ble.n	8015076 <_strtol_l.constprop.0+0xc6>
 801502c:	f1bc 0f00 	cmp.w	ip, #0
 8015030:	db1e      	blt.n	8015070 <_strtol_l.constprop.0+0xc0>
 8015032:	45b1      	cmp	r9, r6
 8015034:	d31c      	bcc.n	8015070 <_strtol_l.constprop.0+0xc0>
 8015036:	d101      	bne.n	801503c <_strtol_l.constprop.0+0x8c>
 8015038:	45a2      	cmp	sl, r4
 801503a:	db19      	blt.n	8015070 <_strtol_l.constprop.0+0xc0>
 801503c:	fb06 4603 	mla	r6, r6, r3, r4
 8015040:	f04f 0c01 	mov.w	ip, #1
 8015044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015048:	e7e8      	b.n	801501c <_strtol_l.constprop.0+0x6c>
 801504a:	2c2b      	cmp	r4, #43	; 0x2b
 801504c:	bf04      	itt	eq
 801504e:	782c      	ldrbeq	r4, [r5, #0]
 8015050:	1cb5      	addeq	r5, r6, #2
 8015052:	e7ca      	b.n	8014fea <_strtol_l.constprop.0+0x3a>
 8015054:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015058:	f1be 0f19 	cmp.w	lr, #25
 801505c:	d801      	bhi.n	8015062 <_strtol_l.constprop.0+0xb2>
 801505e:	3c37      	subs	r4, #55	; 0x37
 8015060:	e7e2      	b.n	8015028 <_strtol_l.constprop.0+0x78>
 8015062:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8015066:	f1be 0f19 	cmp.w	lr, #25
 801506a:	d804      	bhi.n	8015076 <_strtol_l.constprop.0+0xc6>
 801506c:	3c57      	subs	r4, #87	; 0x57
 801506e:	e7db      	b.n	8015028 <_strtol_l.constprop.0+0x78>
 8015070:	f04f 3cff 	mov.w	ip, #4294967295
 8015074:	e7e6      	b.n	8015044 <_strtol_l.constprop.0+0x94>
 8015076:	f1bc 0f00 	cmp.w	ip, #0
 801507a:	da05      	bge.n	8015088 <_strtol_l.constprop.0+0xd8>
 801507c:	2322      	movs	r3, #34	; 0x22
 801507e:	6003      	str	r3, [r0, #0]
 8015080:	4646      	mov	r6, r8
 8015082:	b942      	cbnz	r2, 8015096 <_strtol_l.constprop.0+0xe6>
 8015084:	4630      	mov	r0, r6
 8015086:	e79e      	b.n	8014fc6 <_strtol_l.constprop.0+0x16>
 8015088:	b107      	cbz	r7, 801508c <_strtol_l.constprop.0+0xdc>
 801508a:	4276      	negs	r6, r6
 801508c:	2a00      	cmp	r2, #0
 801508e:	d0f9      	beq.n	8015084 <_strtol_l.constprop.0+0xd4>
 8015090:	f1bc 0f00 	cmp.w	ip, #0
 8015094:	d000      	beq.n	8015098 <_strtol_l.constprop.0+0xe8>
 8015096:	1e69      	subs	r1, r5, #1
 8015098:	6011      	str	r1, [r2, #0]
 801509a:	e7f3      	b.n	8015084 <_strtol_l.constprop.0+0xd4>
 801509c:	2430      	movs	r4, #48	; 0x30
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d1b1      	bne.n	8015006 <_strtol_l.constprop.0+0x56>
 80150a2:	2308      	movs	r3, #8
 80150a4:	e7af      	b.n	8015006 <_strtol_l.constprop.0+0x56>
 80150a6:	2c30      	cmp	r4, #48	; 0x30
 80150a8:	d0a5      	beq.n	8014ff6 <_strtol_l.constprop.0+0x46>
 80150aa:	230a      	movs	r3, #10
 80150ac:	e7ab      	b.n	8015006 <_strtol_l.constprop.0+0x56>
 80150ae:	bf00      	nop
 80150b0:	08019b59 	.word	0x08019b59

080150b4 <_strtol_r>:
 80150b4:	f7ff bf7c 	b.w	8014fb0 <_strtol_l.constprop.0>

080150b8 <__swbuf_r>:
 80150b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ba:	460e      	mov	r6, r1
 80150bc:	4614      	mov	r4, r2
 80150be:	4605      	mov	r5, r0
 80150c0:	b118      	cbz	r0, 80150ca <__swbuf_r+0x12>
 80150c2:	6983      	ldr	r3, [r0, #24]
 80150c4:	b90b      	cbnz	r3, 80150ca <__swbuf_r+0x12>
 80150c6:	f001 f84b 	bl	8016160 <__sinit>
 80150ca:	4b21      	ldr	r3, [pc, #132]	; (8015150 <__swbuf_r+0x98>)
 80150cc:	429c      	cmp	r4, r3
 80150ce:	d12b      	bne.n	8015128 <__swbuf_r+0x70>
 80150d0:	686c      	ldr	r4, [r5, #4]
 80150d2:	69a3      	ldr	r3, [r4, #24]
 80150d4:	60a3      	str	r3, [r4, #8]
 80150d6:	89a3      	ldrh	r3, [r4, #12]
 80150d8:	071a      	lsls	r2, r3, #28
 80150da:	d52f      	bpl.n	801513c <__swbuf_r+0x84>
 80150dc:	6923      	ldr	r3, [r4, #16]
 80150de:	b36b      	cbz	r3, 801513c <__swbuf_r+0x84>
 80150e0:	6923      	ldr	r3, [r4, #16]
 80150e2:	6820      	ldr	r0, [r4, #0]
 80150e4:	1ac0      	subs	r0, r0, r3
 80150e6:	6963      	ldr	r3, [r4, #20]
 80150e8:	b2f6      	uxtb	r6, r6
 80150ea:	4283      	cmp	r3, r0
 80150ec:	4637      	mov	r7, r6
 80150ee:	dc04      	bgt.n	80150fa <__swbuf_r+0x42>
 80150f0:	4621      	mov	r1, r4
 80150f2:	4628      	mov	r0, r5
 80150f4:	f000 ffa0 	bl	8016038 <_fflush_r>
 80150f8:	bb30      	cbnz	r0, 8015148 <__swbuf_r+0x90>
 80150fa:	68a3      	ldr	r3, [r4, #8]
 80150fc:	3b01      	subs	r3, #1
 80150fe:	60a3      	str	r3, [r4, #8]
 8015100:	6823      	ldr	r3, [r4, #0]
 8015102:	1c5a      	adds	r2, r3, #1
 8015104:	6022      	str	r2, [r4, #0]
 8015106:	701e      	strb	r6, [r3, #0]
 8015108:	6963      	ldr	r3, [r4, #20]
 801510a:	3001      	adds	r0, #1
 801510c:	4283      	cmp	r3, r0
 801510e:	d004      	beq.n	801511a <__swbuf_r+0x62>
 8015110:	89a3      	ldrh	r3, [r4, #12]
 8015112:	07db      	lsls	r3, r3, #31
 8015114:	d506      	bpl.n	8015124 <__swbuf_r+0x6c>
 8015116:	2e0a      	cmp	r6, #10
 8015118:	d104      	bne.n	8015124 <__swbuf_r+0x6c>
 801511a:	4621      	mov	r1, r4
 801511c:	4628      	mov	r0, r5
 801511e:	f000 ff8b 	bl	8016038 <_fflush_r>
 8015122:	b988      	cbnz	r0, 8015148 <__swbuf_r+0x90>
 8015124:	4638      	mov	r0, r7
 8015126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015128:	4b0a      	ldr	r3, [pc, #40]	; (8015154 <__swbuf_r+0x9c>)
 801512a:	429c      	cmp	r4, r3
 801512c:	d101      	bne.n	8015132 <__swbuf_r+0x7a>
 801512e:	68ac      	ldr	r4, [r5, #8]
 8015130:	e7cf      	b.n	80150d2 <__swbuf_r+0x1a>
 8015132:	4b09      	ldr	r3, [pc, #36]	; (8015158 <__swbuf_r+0xa0>)
 8015134:	429c      	cmp	r4, r3
 8015136:	bf08      	it	eq
 8015138:	68ec      	ldreq	r4, [r5, #12]
 801513a:	e7ca      	b.n	80150d2 <__swbuf_r+0x1a>
 801513c:	4621      	mov	r1, r4
 801513e:	4628      	mov	r0, r5
 8015140:	f000 f80c 	bl	801515c <__swsetup_r>
 8015144:	2800      	cmp	r0, #0
 8015146:	d0cb      	beq.n	80150e0 <__swbuf_r+0x28>
 8015148:	f04f 37ff 	mov.w	r7, #4294967295
 801514c:	e7ea      	b.n	8015124 <__swbuf_r+0x6c>
 801514e:	bf00      	nop
 8015150:	08019d0c 	.word	0x08019d0c
 8015154:	08019d2c 	.word	0x08019d2c
 8015158:	08019cec 	.word	0x08019cec

0801515c <__swsetup_r>:
 801515c:	4b32      	ldr	r3, [pc, #200]	; (8015228 <__swsetup_r+0xcc>)
 801515e:	b570      	push	{r4, r5, r6, lr}
 8015160:	681d      	ldr	r5, [r3, #0]
 8015162:	4606      	mov	r6, r0
 8015164:	460c      	mov	r4, r1
 8015166:	b125      	cbz	r5, 8015172 <__swsetup_r+0x16>
 8015168:	69ab      	ldr	r3, [r5, #24]
 801516a:	b913      	cbnz	r3, 8015172 <__swsetup_r+0x16>
 801516c:	4628      	mov	r0, r5
 801516e:	f000 fff7 	bl	8016160 <__sinit>
 8015172:	4b2e      	ldr	r3, [pc, #184]	; (801522c <__swsetup_r+0xd0>)
 8015174:	429c      	cmp	r4, r3
 8015176:	d10f      	bne.n	8015198 <__swsetup_r+0x3c>
 8015178:	686c      	ldr	r4, [r5, #4]
 801517a:	89a3      	ldrh	r3, [r4, #12]
 801517c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015180:	0719      	lsls	r1, r3, #28
 8015182:	d42c      	bmi.n	80151de <__swsetup_r+0x82>
 8015184:	06dd      	lsls	r5, r3, #27
 8015186:	d411      	bmi.n	80151ac <__swsetup_r+0x50>
 8015188:	2309      	movs	r3, #9
 801518a:	6033      	str	r3, [r6, #0]
 801518c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015190:	81a3      	strh	r3, [r4, #12]
 8015192:	f04f 30ff 	mov.w	r0, #4294967295
 8015196:	e03e      	b.n	8015216 <__swsetup_r+0xba>
 8015198:	4b25      	ldr	r3, [pc, #148]	; (8015230 <__swsetup_r+0xd4>)
 801519a:	429c      	cmp	r4, r3
 801519c:	d101      	bne.n	80151a2 <__swsetup_r+0x46>
 801519e:	68ac      	ldr	r4, [r5, #8]
 80151a0:	e7eb      	b.n	801517a <__swsetup_r+0x1e>
 80151a2:	4b24      	ldr	r3, [pc, #144]	; (8015234 <__swsetup_r+0xd8>)
 80151a4:	429c      	cmp	r4, r3
 80151a6:	bf08      	it	eq
 80151a8:	68ec      	ldreq	r4, [r5, #12]
 80151aa:	e7e6      	b.n	801517a <__swsetup_r+0x1e>
 80151ac:	0758      	lsls	r0, r3, #29
 80151ae:	d512      	bpl.n	80151d6 <__swsetup_r+0x7a>
 80151b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151b2:	b141      	cbz	r1, 80151c6 <__swsetup_r+0x6a>
 80151b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151b8:	4299      	cmp	r1, r3
 80151ba:	d002      	beq.n	80151c2 <__swsetup_r+0x66>
 80151bc:	4630      	mov	r0, r6
 80151be:	f002 f939 	bl	8017434 <_free_r>
 80151c2:	2300      	movs	r3, #0
 80151c4:	6363      	str	r3, [r4, #52]	; 0x34
 80151c6:	89a3      	ldrh	r3, [r4, #12]
 80151c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151cc:	81a3      	strh	r3, [r4, #12]
 80151ce:	2300      	movs	r3, #0
 80151d0:	6063      	str	r3, [r4, #4]
 80151d2:	6923      	ldr	r3, [r4, #16]
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	89a3      	ldrh	r3, [r4, #12]
 80151d8:	f043 0308 	orr.w	r3, r3, #8
 80151dc:	81a3      	strh	r3, [r4, #12]
 80151de:	6923      	ldr	r3, [r4, #16]
 80151e0:	b94b      	cbnz	r3, 80151f6 <__swsetup_r+0x9a>
 80151e2:	89a3      	ldrh	r3, [r4, #12]
 80151e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151ec:	d003      	beq.n	80151f6 <__swsetup_r+0x9a>
 80151ee:	4621      	mov	r1, r4
 80151f0:	4630      	mov	r0, r6
 80151f2:	f001 fbed 	bl	80169d0 <__smakebuf_r>
 80151f6:	89a0      	ldrh	r0, [r4, #12]
 80151f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151fc:	f010 0301 	ands.w	r3, r0, #1
 8015200:	d00a      	beq.n	8015218 <__swsetup_r+0xbc>
 8015202:	2300      	movs	r3, #0
 8015204:	60a3      	str	r3, [r4, #8]
 8015206:	6963      	ldr	r3, [r4, #20]
 8015208:	425b      	negs	r3, r3
 801520a:	61a3      	str	r3, [r4, #24]
 801520c:	6923      	ldr	r3, [r4, #16]
 801520e:	b943      	cbnz	r3, 8015222 <__swsetup_r+0xc6>
 8015210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015214:	d1ba      	bne.n	801518c <__swsetup_r+0x30>
 8015216:	bd70      	pop	{r4, r5, r6, pc}
 8015218:	0781      	lsls	r1, r0, #30
 801521a:	bf58      	it	pl
 801521c:	6963      	ldrpl	r3, [r4, #20]
 801521e:	60a3      	str	r3, [r4, #8]
 8015220:	e7f4      	b.n	801520c <__swsetup_r+0xb0>
 8015222:	2000      	movs	r0, #0
 8015224:	e7f7      	b.n	8015216 <__swsetup_r+0xba>
 8015226:	bf00      	nop
 8015228:	20000020 	.word	0x20000020
 801522c:	08019d0c 	.word	0x08019d0c
 8015230:	08019d2c 	.word	0x08019d2c
 8015234:	08019cec 	.word	0x08019cec

08015238 <quorem>:
 8015238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523c:	6903      	ldr	r3, [r0, #16]
 801523e:	690c      	ldr	r4, [r1, #16]
 8015240:	42a3      	cmp	r3, r4
 8015242:	4607      	mov	r7, r0
 8015244:	f2c0 8081 	blt.w	801534a <quorem+0x112>
 8015248:	3c01      	subs	r4, #1
 801524a:	f101 0814 	add.w	r8, r1, #20
 801524e:	f100 0514 	add.w	r5, r0, #20
 8015252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015256:	9301      	str	r3, [sp, #4]
 8015258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801525c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015260:	3301      	adds	r3, #1
 8015262:	429a      	cmp	r2, r3
 8015264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801526c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015270:	d331      	bcc.n	80152d6 <quorem+0x9e>
 8015272:	f04f 0e00 	mov.w	lr, #0
 8015276:	4640      	mov	r0, r8
 8015278:	46ac      	mov	ip, r5
 801527a:	46f2      	mov	sl, lr
 801527c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015280:	b293      	uxth	r3, r2
 8015282:	fb06 e303 	mla	r3, r6, r3, lr
 8015286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801528a:	b29b      	uxth	r3, r3
 801528c:	ebaa 0303 	sub.w	r3, sl, r3
 8015290:	f8dc a000 	ldr.w	sl, [ip]
 8015294:	0c12      	lsrs	r2, r2, #16
 8015296:	fa13 f38a 	uxtah	r3, r3, sl
 801529a:	fb06 e202 	mla	r2, r6, r2, lr
 801529e:	9300      	str	r3, [sp, #0]
 80152a0:	9b00      	ldr	r3, [sp, #0]
 80152a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80152a6:	b292      	uxth	r2, r2
 80152a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80152ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80152b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80152b4:	4581      	cmp	r9, r0
 80152b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80152ba:	f84c 3b04 	str.w	r3, [ip], #4
 80152be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80152c2:	d2db      	bcs.n	801527c <quorem+0x44>
 80152c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80152c8:	b92b      	cbnz	r3, 80152d6 <quorem+0x9e>
 80152ca:	9b01      	ldr	r3, [sp, #4]
 80152cc:	3b04      	subs	r3, #4
 80152ce:	429d      	cmp	r5, r3
 80152d0:	461a      	mov	r2, r3
 80152d2:	d32e      	bcc.n	8015332 <quorem+0xfa>
 80152d4:	613c      	str	r4, [r7, #16]
 80152d6:	4638      	mov	r0, r7
 80152d8:	f001 fea0 	bl	801701c <__mcmp>
 80152dc:	2800      	cmp	r0, #0
 80152de:	db24      	blt.n	801532a <quorem+0xf2>
 80152e0:	3601      	adds	r6, #1
 80152e2:	4628      	mov	r0, r5
 80152e4:	f04f 0c00 	mov.w	ip, #0
 80152e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80152ec:	f8d0 e000 	ldr.w	lr, [r0]
 80152f0:	b293      	uxth	r3, r2
 80152f2:	ebac 0303 	sub.w	r3, ip, r3
 80152f6:	0c12      	lsrs	r2, r2, #16
 80152f8:	fa13 f38e 	uxtah	r3, r3, lr
 80152fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015304:	b29b      	uxth	r3, r3
 8015306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801530a:	45c1      	cmp	r9, r8
 801530c:	f840 3b04 	str.w	r3, [r0], #4
 8015310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015314:	d2e8      	bcs.n	80152e8 <quorem+0xb0>
 8015316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801531a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801531e:	b922      	cbnz	r2, 801532a <quorem+0xf2>
 8015320:	3b04      	subs	r3, #4
 8015322:	429d      	cmp	r5, r3
 8015324:	461a      	mov	r2, r3
 8015326:	d30a      	bcc.n	801533e <quorem+0x106>
 8015328:	613c      	str	r4, [r7, #16]
 801532a:	4630      	mov	r0, r6
 801532c:	b003      	add	sp, #12
 801532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015332:	6812      	ldr	r2, [r2, #0]
 8015334:	3b04      	subs	r3, #4
 8015336:	2a00      	cmp	r2, #0
 8015338:	d1cc      	bne.n	80152d4 <quorem+0x9c>
 801533a:	3c01      	subs	r4, #1
 801533c:	e7c7      	b.n	80152ce <quorem+0x96>
 801533e:	6812      	ldr	r2, [r2, #0]
 8015340:	3b04      	subs	r3, #4
 8015342:	2a00      	cmp	r2, #0
 8015344:	d1f0      	bne.n	8015328 <quorem+0xf0>
 8015346:	3c01      	subs	r4, #1
 8015348:	e7eb      	b.n	8015322 <quorem+0xea>
 801534a:	2000      	movs	r0, #0
 801534c:	e7ee      	b.n	801532c <quorem+0xf4>
	...

08015350 <_dtoa_r>:
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	ed2d 8b04 	vpush	{d8-d9}
 8015358:	ec57 6b10 	vmov	r6, r7, d0
 801535c:	b093      	sub	sp, #76	; 0x4c
 801535e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015364:	9106      	str	r1, [sp, #24]
 8015366:	ee10 aa10 	vmov	sl, s0
 801536a:	4604      	mov	r4, r0
 801536c:	9209      	str	r2, [sp, #36]	; 0x24
 801536e:	930c      	str	r3, [sp, #48]	; 0x30
 8015370:	46bb      	mov	fp, r7
 8015372:	b975      	cbnz	r5, 8015392 <_dtoa_r+0x42>
 8015374:	2010      	movs	r0, #16
 8015376:	f001 fb6b 	bl	8016a50 <malloc>
 801537a:	4602      	mov	r2, r0
 801537c:	6260      	str	r0, [r4, #36]	; 0x24
 801537e:	b920      	cbnz	r0, 801538a <_dtoa_r+0x3a>
 8015380:	4ba7      	ldr	r3, [pc, #668]	; (8015620 <_dtoa_r+0x2d0>)
 8015382:	21ea      	movs	r1, #234	; 0xea
 8015384:	48a7      	ldr	r0, [pc, #668]	; (8015624 <_dtoa_r+0x2d4>)
 8015386:	f002 fcc1 	bl	8017d0c <__assert_func>
 801538a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801538e:	6005      	str	r5, [r0, #0]
 8015390:	60c5      	str	r5, [r0, #12]
 8015392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015394:	6819      	ldr	r1, [r3, #0]
 8015396:	b151      	cbz	r1, 80153ae <_dtoa_r+0x5e>
 8015398:	685a      	ldr	r2, [r3, #4]
 801539a:	604a      	str	r2, [r1, #4]
 801539c:	2301      	movs	r3, #1
 801539e:	4093      	lsls	r3, r2
 80153a0:	608b      	str	r3, [r1, #8]
 80153a2:	4620      	mov	r0, r4
 80153a4:	f001 fbae 	bl	8016b04 <_Bfree>
 80153a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153aa:	2200      	movs	r2, #0
 80153ac:	601a      	str	r2, [r3, #0]
 80153ae:	1e3b      	subs	r3, r7, #0
 80153b0:	bfaa      	itet	ge
 80153b2:	2300      	movge	r3, #0
 80153b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80153b8:	f8c8 3000 	strge.w	r3, [r8]
 80153bc:	4b9a      	ldr	r3, [pc, #616]	; (8015628 <_dtoa_r+0x2d8>)
 80153be:	bfbc      	itt	lt
 80153c0:	2201      	movlt	r2, #1
 80153c2:	f8c8 2000 	strlt.w	r2, [r8]
 80153c6:	ea33 030b 	bics.w	r3, r3, fp
 80153ca:	d11b      	bne.n	8015404 <_dtoa_r+0xb4>
 80153cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80153d2:	6013      	str	r3, [r2, #0]
 80153d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80153d8:	4333      	orrs	r3, r6
 80153da:	f000 8592 	beq.w	8015f02 <_dtoa_r+0xbb2>
 80153de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153e0:	b963      	cbnz	r3, 80153fc <_dtoa_r+0xac>
 80153e2:	4b92      	ldr	r3, [pc, #584]	; (801562c <_dtoa_r+0x2dc>)
 80153e4:	e022      	b.n	801542c <_dtoa_r+0xdc>
 80153e6:	4b92      	ldr	r3, [pc, #584]	; (8015630 <_dtoa_r+0x2e0>)
 80153e8:	9301      	str	r3, [sp, #4]
 80153ea:	3308      	adds	r3, #8
 80153ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80153ee:	6013      	str	r3, [r2, #0]
 80153f0:	9801      	ldr	r0, [sp, #4]
 80153f2:	b013      	add	sp, #76	; 0x4c
 80153f4:	ecbd 8b04 	vpop	{d8-d9}
 80153f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153fc:	4b8b      	ldr	r3, [pc, #556]	; (801562c <_dtoa_r+0x2dc>)
 80153fe:	9301      	str	r3, [sp, #4]
 8015400:	3303      	adds	r3, #3
 8015402:	e7f3      	b.n	80153ec <_dtoa_r+0x9c>
 8015404:	2200      	movs	r2, #0
 8015406:	2300      	movs	r3, #0
 8015408:	4650      	mov	r0, sl
 801540a:	4659      	mov	r1, fp
 801540c:	f7eb fb84 	bl	8000b18 <__aeabi_dcmpeq>
 8015410:	ec4b ab19 	vmov	d9, sl, fp
 8015414:	4680      	mov	r8, r0
 8015416:	b158      	cbz	r0, 8015430 <_dtoa_r+0xe0>
 8015418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801541a:	2301      	movs	r3, #1
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015420:	2b00      	cmp	r3, #0
 8015422:	f000 856b 	beq.w	8015efc <_dtoa_r+0xbac>
 8015426:	4883      	ldr	r0, [pc, #524]	; (8015634 <_dtoa_r+0x2e4>)
 8015428:	6018      	str	r0, [r3, #0]
 801542a:	1e43      	subs	r3, r0, #1
 801542c:	9301      	str	r3, [sp, #4]
 801542e:	e7df      	b.n	80153f0 <_dtoa_r+0xa0>
 8015430:	ec4b ab10 	vmov	d0, sl, fp
 8015434:	aa10      	add	r2, sp, #64	; 0x40
 8015436:	a911      	add	r1, sp, #68	; 0x44
 8015438:	4620      	mov	r0, r4
 801543a:	f001 ff11 	bl	8017260 <__d2b>
 801543e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015442:	ee08 0a10 	vmov	s16, r0
 8015446:	2d00      	cmp	r5, #0
 8015448:	f000 8084 	beq.w	8015554 <_dtoa_r+0x204>
 801544c:	ee19 3a90 	vmov	r3, s19
 8015450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015458:	4656      	mov	r6, sl
 801545a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801545e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015466:	4b74      	ldr	r3, [pc, #464]	; (8015638 <_dtoa_r+0x2e8>)
 8015468:	2200      	movs	r2, #0
 801546a:	4630      	mov	r0, r6
 801546c:	4639      	mov	r1, r7
 801546e:	f7ea ff33 	bl	80002d8 <__aeabi_dsub>
 8015472:	a365      	add	r3, pc, #404	; (adr r3, 8015608 <_dtoa_r+0x2b8>)
 8015474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015478:	f7eb f8e6 	bl	8000648 <__aeabi_dmul>
 801547c:	a364      	add	r3, pc, #400	; (adr r3, 8015610 <_dtoa_r+0x2c0>)
 801547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015482:	f7ea ff2b 	bl	80002dc <__adddf3>
 8015486:	4606      	mov	r6, r0
 8015488:	4628      	mov	r0, r5
 801548a:	460f      	mov	r7, r1
 801548c:	f7eb f872 	bl	8000574 <__aeabi_i2d>
 8015490:	a361      	add	r3, pc, #388	; (adr r3, 8015618 <_dtoa_r+0x2c8>)
 8015492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015496:	f7eb f8d7 	bl	8000648 <__aeabi_dmul>
 801549a:	4602      	mov	r2, r0
 801549c:	460b      	mov	r3, r1
 801549e:	4630      	mov	r0, r6
 80154a0:	4639      	mov	r1, r7
 80154a2:	f7ea ff1b 	bl	80002dc <__adddf3>
 80154a6:	4606      	mov	r6, r0
 80154a8:	460f      	mov	r7, r1
 80154aa:	f7eb fb7d 	bl	8000ba8 <__aeabi_d2iz>
 80154ae:	2200      	movs	r2, #0
 80154b0:	9000      	str	r0, [sp, #0]
 80154b2:	2300      	movs	r3, #0
 80154b4:	4630      	mov	r0, r6
 80154b6:	4639      	mov	r1, r7
 80154b8:	f7eb fb38 	bl	8000b2c <__aeabi_dcmplt>
 80154bc:	b150      	cbz	r0, 80154d4 <_dtoa_r+0x184>
 80154be:	9800      	ldr	r0, [sp, #0]
 80154c0:	f7eb f858 	bl	8000574 <__aeabi_i2d>
 80154c4:	4632      	mov	r2, r6
 80154c6:	463b      	mov	r3, r7
 80154c8:	f7eb fb26 	bl	8000b18 <__aeabi_dcmpeq>
 80154cc:	b910      	cbnz	r0, 80154d4 <_dtoa_r+0x184>
 80154ce:	9b00      	ldr	r3, [sp, #0]
 80154d0:	3b01      	subs	r3, #1
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	9b00      	ldr	r3, [sp, #0]
 80154d6:	2b16      	cmp	r3, #22
 80154d8:	d85a      	bhi.n	8015590 <_dtoa_r+0x240>
 80154da:	9a00      	ldr	r2, [sp, #0]
 80154dc:	4b57      	ldr	r3, [pc, #348]	; (801563c <_dtoa_r+0x2ec>)
 80154de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e6:	ec51 0b19 	vmov	r0, r1, d9
 80154ea:	f7eb fb1f 	bl	8000b2c <__aeabi_dcmplt>
 80154ee:	2800      	cmp	r0, #0
 80154f0:	d050      	beq.n	8015594 <_dtoa_r+0x244>
 80154f2:	9b00      	ldr	r3, [sp, #0]
 80154f4:	3b01      	subs	r3, #1
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	2300      	movs	r3, #0
 80154fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80154fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154fe:	1b5d      	subs	r5, r3, r5
 8015500:	1e6b      	subs	r3, r5, #1
 8015502:	9305      	str	r3, [sp, #20]
 8015504:	bf45      	ittet	mi
 8015506:	f1c5 0301 	rsbmi	r3, r5, #1
 801550a:	9304      	strmi	r3, [sp, #16]
 801550c:	2300      	movpl	r3, #0
 801550e:	2300      	movmi	r3, #0
 8015510:	bf4c      	ite	mi
 8015512:	9305      	strmi	r3, [sp, #20]
 8015514:	9304      	strpl	r3, [sp, #16]
 8015516:	9b00      	ldr	r3, [sp, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	db3d      	blt.n	8015598 <_dtoa_r+0x248>
 801551c:	9b05      	ldr	r3, [sp, #20]
 801551e:	9a00      	ldr	r2, [sp, #0]
 8015520:	920a      	str	r2, [sp, #40]	; 0x28
 8015522:	4413      	add	r3, r2
 8015524:	9305      	str	r3, [sp, #20]
 8015526:	2300      	movs	r3, #0
 8015528:	9307      	str	r3, [sp, #28]
 801552a:	9b06      	ldr	r3, [sp, #24]
 801552c:	2b09      	cmp	r3, #9
 801552e:	f200 8089 	bhi.w	8015644 <_dtoa_r+0x2f4>
 8015532:	2b05      	cmp	r3, #5
 8015534:	bfc4      	itt	gt
 8015536:	3b04      	subgt	r3, #4
 8015538:	9306      	strgt	r3, [sp, #24]
 801553a:	9b06      	ldr	r3, [sp, #24]
 801553c:	f1a3 0302 	sub.w	r3, r3, #2
 8015540:	bfcc      	ite	gt
 8015542:	2500      	movgt	r5, #0
 8015544:	2501      	movle	r5, #1
 8015546:	2b03      	cmp	r3, #3
 8015548:	f200 8087 	bhi.w	801565a <_dtoa_r+0x30a>
 801554c:	e8df f003 	tbb	[pc, r3]
 8015550:	59383a2d 	.word	0x59383a2d
 8015554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015558:	441d      	add	r5, r3
 801555a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801555e:	2b20      	cmp	r3, #32
 8015560:	bfc1      	itttt	gt
 8015562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801556a:	fa0b f303 	lslgt.w	r3, fp, r3
 801556e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015572:	bfda      	itte	le
 8015574:	f1c3 0320 	rsble	r3, r3, #32
 8015578:	fa06 f003 	lslle.w	r0, r6, r3
 801557c:	4318      	orrgt	r0, r3
 801557e:	f7ea ffe9 	bl	8000554 <__aeabi_ui2d>
 8015582:	2301      	movs	r3, #1
 8015584:	4606      	mov	r6, r0
 8015586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801558a:	3d01      	subs	r5, #1
 801558c:	930e      	str	r3, [sp, #56]	; 0x38
 801558e:	e76a      	b.n	8015466 <_dtoa_r+0x116>
 8015590:	2301      	movs	r3, #1
 8015592:	e7b2      	b.n	80154fa <_dtoa_r+0x1aa>
 8015594:	900b      	str	r0, [sp, #44]	; 0x2c
 8015596:	e7b1      	b.n	80154fc <_dtoa_r+0x1ac>
 8015598:	9b04      	ldr	r3, [sp, #16]
 801559a:	9a00      	ldr	r2, [sp, #0]
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	9304      	str	r3, [sp, #16]
 80155a0:	4253      	negs	r3, r2
 80155a2:	9307      	str	r3, [sp, #28]
 80155a4:	2300      	movs	r3, #0
 80155a6:	930a      	str	r3, [sp, #40]	; 0x28
 80155a8:	e7bf      	b.n	801552a <_dtoa_r+0x1da>
 80155aa:	2300      	movs	r3, #0
 80155ac:	9308      	str	r3, [sp, #32]
 80155ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	dc55      	bgt.n	8015660 <_dtoa_r+0x310>
 80155b4:	2301      	movs	r3, #1
 80155b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80155ba:	461a      	mov	r2, r3
 80155bc:	9209      	str	r2, [sp, #36]	; 0x24
 80155be:	e00c      	b.n	80155da <_dtoa_r+0x28a>
 80155c0:	2301      	movs	r3, #1
 80155c2:	e7f3      	b.n	80155ac <_dtoa_r+0x25c>
 80155c4:	2300      	movs	r3, #0
 80155c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155c8:	9308      	str	r3, [sp, #32]
 80155ca:	9b00      	ldr	r3, [sp, #0]
 80155cc:	4413      	add	r3, r2
 80155ce:	9302      	str	r3, [sp, #8]
 80155d0:	3301      	adds	r3, #1
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	9303      	str	r3, [sp, #12]
 80155d6:	bfb8      	it	lt
 80155d8:	2301      	movlt	r3, #1
 80155da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80155dc:	2200      	movs	r2, #0
 80155de:	6042      	str	r2, [r0, #4]
 80155e0:	2204      	movs	r2, #4
 80155e2:	f102 0614 	add.w	r6, r2, #20
 80155e6:	429e      	cmp	r6, r3
 80155e8:	6841      	ldr	r1, [r0, #4]
 80155ea:	d93d      	bls.n	8015668 <_dtoa_r+0x318>
 80155ec:	4620      	mov	r0, r4
 80155ee:	f001 fa49 	bl	8016a84 <_Balloc>
 80155f2:	9001      	str	r0, [sp, #4]
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d13b      	bne.n	8015670 <_dtoa_r+0x320>
 80155f8:	4b11      	ldr	r3, [pc, #68]	; (8015640 <_dtoa_r+0x2f0>)
 80155fa:	4602      	mov	r2, r0
 80155fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015600:	e6c0      	b.n	8015384 <_dtoa_r+0x34>
 8015602:	2301      	movs	r3, #1
 8015604:	e7df      	b.n	80155c6 <_dtoa_r+0x276>
 8015606:	bf00      	nop
 8015608:	636f4361 	.word	0x636f4361
 801560c:	3fd287a7 	.word	0x3fd287a7
 8015610:	8b60c8b3 	.word	0x8b60c8b3
 8015614:	3fc68a28 	.word	0x3fc68a28
 8015618:	509f79fb 	.word	0x509f79fb
 801561c:	3fd34413 	.word	0x3fd34413
 8015620:	08019c66 	.word	0x08019c66
 8015624:	08019c7d 	.word	0x08019c7d
 8015628:	7ff00000 	.word	0x7ff00000
 801562c:	08019c62 	.word	0x08019c62
 8015630:	08019c59 	.word	0x08019c59
 8015634:	08019ad9 	.word	0x08019ad9
 8015638:	3ff80000 	.word	0x3ff80000
 801563c:	08019e50 	.word	0x08019e50
 8015640:	08019cd8 	.word	0x08019cd8
 8015644:	2501      	movs	r5, #1
 8015646:	2300      	movs	r3, #0
 8015648:	9306      	str	r3, [sp, #24]
 801564a:	9508      	str	r5, [sp, #32]
 801564c:	f04f 33ff 	mov.w	r3, #4294967295
 8015650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015654:	2200      	movs	r2, #0
 8015656:	2312      	movs	r3, #18
 8015658:	e7b0      	b.n	80155bc <_dtoa_r+0x26c>
 801565a:	2301      	movs	r3, #1
 801565c:	9308      	str	r3, [sp, #32]
 801565e:	e7f5      	b.n	801564c <_dtoa_r+0x2fc>
 8015660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015666:	e7b8      	b.n	80155da <_dtoa_r+0x28a>
 8015668:	3101      	adds	r1, #1
 801566a:	6041      	str	r1, [r0, #4]
 801566c:	0052      	lsls	r2, r2, #1
 801566e:	e7b8      	b.n	80155e2 <_dtoa_r+0x292>
 8015670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015672:	9a01      	ldr	r2, [sp, #4]
 8015674:	601a      	str	r2, [r3, #0]
 8015676:	9b03      	ldr	r3, [sp, #12]
 8015678:	2b0e      	cmp	r3, #14
 801567a:	f200 809d 	bhi.w	80157b8 <_dtoa_r+0x468>
 801567e:	2d00      	cmp	r5, #0
 8015680:	f000 809a 	beq.w	80157b8 <_dtoa_r+0x468>
 8015684:	9b00      	ldr	r3, [sp, #0]
 8015686:	2b00      	cmp	r3, #0
 8015688:	dd32      	ble.n	80156f0 <_dtoa_r+0x3a0>
 801568a:	4ab7      	ldr	r2, [pc, #732]	; (8015968 <_dtoa_r+0x618>)
 801568c:	f003 030f 	and.w	r3, r3, #15
 8015690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015698:	9b00      	ldr	r3, [sp, #0]
 801569a:	05d8      	lsls	r0, r3, #23
 801569c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80156a0:	d516      	bpl.n	80156d0 <_dtoa_r+0x380>
 80156a2:	4bb2      	ldr	r3, [pc, #712]	; (801596c <_dtoa_r+0x61c>)
 80156a4:	ec51 0b19 	vmov	r0, r1, d9
 80156a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80156ac:	f7eb f8f6 	bl	800089c <__aeabi_ddiv>
 80156b0:	f007 070f 	and.w	r7, r7, #15
 80156b4:	4682      	mov	sl, r0
 80156b6:	468b      	mov	fp, r1
 80156b8:	2503      	movs	r5, #3
 80156ba:	4eac      	ldr	r6, [pc, #688]	; (801596c <_dtoa_r+0x61c>)
 80156bc:	b957      	cbnz	r7, 80156d4 <_dtoa_r+0x384>
 80156be:	4642      	mov	r2, r8
 80156c0:	464b      	mov	r3, r9
 80156c2:	4650      	mov	r0, sl
 80156c4:	4659      	mov	r1, fp
 80156c6:	f7eb f8e9 	bl	800089c <__aeabi_ddiv>
 80156ca:	4682      	mov	sl, r0
 80156cc:	468b      	mov	fp, r1
 80156ce:	e028      	b.n	8015722 <_dtoa_r+0x3d2>
 80156d0:	2502      	movs	r5, #2
 80156d2:	e7f2      	b.n	80156ba <_dtoa_r+0x36a>
 80156d4:	07f9      	lsls	r1, r7, #31
 80156d6:	d508      	bpl.n	80156ea <_dtoa_r+0x39a>
 80156d8:	4640      	mov	r0, r8
 80156da:	4649      	mov	r1, r9
 80156dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80156e0:	f7ea ffb2 	bl	8000648 <__aeabi_dmul>
 80156e4:	3501      	adds	r5, #1
 80156e6:	4680      	mov	r8, r0
 80156e8:	4689      	mov	r9, r1
 80156ea:	107f      	asrs	r7, r7, #1
 80156ec:	3608      	adds	r6, #8
 80156ee:	e7e5      	b.n	80156bc <_dtoa_r+0x36c>
 80156f0:	f000 809b 	beq.w	801582a <_dtoa_r+0x4da>
 80156f4:	9b00      	ldr	r3, [sp, #0]
 80156f6:	4f9d      	ldr	r7, [pc, #628]	; (801596c <_dtoa_r+0x61c>)
 80156f8:	425e      	negs	r6, r3
 80156fa:	4b9b      	ldr	r3, [pc, #620]	; (8015968 <_dtoa_r+0x618>)
 80156fc:	f006 020f 	and.w	r2, r6, #15
 8015700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	ec51 0b19 	vmov	r0, r1, d9
 801570c:	f7ea ff9c 	bl	8000648 <__aeabi_dmul>
 8015710:	1136      	asrs	r6, r6, #4
 8015712:	4682      	mov	sl, r0
 8015714:	468b      	mov	fp, r1
 8015716:	2300      	movs	r3, #0
 8015718:	2502      	movs	r5, #2
 801571a:	2e00      	cmp	r6, #0
 801571c:	d17a      	bne.n	8015814 <_dtoa_r+0x4c4>
 801571e:	2b00      	cmp	r3, #0
 8015720:	d1d3      	bne.n	80156ca <_dtoa_r+0x37a>
 8015722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015724:	2b00      	cmp	r3, #0
 8015726:	f000 8082 	beq.w	801582e <_dtoa_r+0x4de>
 801572a:	4b91      	ldr	r3, [pc, #580]	; (8015970 <_dtoa_r+0x620>)
 801572c:	2200      	movs	r2, #0
 801572e:	4650      	mov	r0, sl
 8015730:	4659      	mov	r1, fp
 8015732:	f7eb f9fb 	bl	8000b2c <__aeabi_dcmplt>
 8015736:	2800      	cmp	r0, #0
 8015738:	d079      	beq.n	801582e <_dtoa_r+0x4de>
 801573a:	9b03      	ldr	r3, [sp, #12]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d076      	beq.n	801582e <_dtoa_r+0x4de>
 8015740:	9b02      	ldr	r3, [sp, #8]
 8015742:	2b00      	cmp	r3, #0
 8015744:	dd36      	ble.n	80157b4 <_dtoa_r+0x464>
 8015746:	9b00      	ldr	r3, [sp, #0]
 8015748:	4650      	mov	r0, sl
 801574a:	4659      	mov	r1, fp
 801574c:	1e5f      	subs	r7, r3, #1
 801574e:	2200      	movs	r2, #0
 8015750:	4b88      	ldr	r3, [pc, #544]	; (8015974 <_dtoa_r+0x624>)
 8015752:	f7ea ff79 	bl	8000648 <__aeabi_dmul>
 8015756:	9e02      	ldr	r6, [sp, #8]
 8015758:	4682      	mov	sl, r0
 801575a:	468b      	mov	fp, r1
 801575c:	3501      	adds	r5, #1
 801575e:	4628      	mov	r0, r5
 8015760:	f7ea ff08 	bl	8000574 <__aeabi_i2d>
 8015764:	4652      	mov	r2, sl
 8015766:	465b      	mov	r3, fp
 8015768:	f7ea ff6e 	bl	8000648 <__aeabi_dmul>
 801576c:	4b82      	ldr	r3, [pc, #520]	; (8015978 <_dtoa_r+0x628>)
 801576e:	2200      	movs	r2, #0
 8015770:	f7ea fdb4 	bl	80002dc <__adddf3>
 8015774:	46d0      	mov	r8, sl
 8015776:	46d9      	mov	r9, fp
 8015778:	4682      	mov	sl, r0
 801577a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801577e:	2e00      	cmp	r6, #0
 8015780:	d158      	bne.n	8015834 <_dtoa_r+0x4e4>
 8015782:	4b7e      	ldr	r3, [pc, #504]	; (801597c <_dtoa_r+0x62c>)
 8015784:	2200      	movs	r2, #0
 8015786:	4640      	mov	r0, r8
 8015788:	4649      	mov	r1, r9
 801578a:	f7ea fda5 	bl	80002d8 <__aeabi_dsub>
 801578e:	4652      	mov	r2, sl
 8015790:	465b      	mov	r3, fp
 8015792:	4680      	mov	r8, r0
 8015794:	4689      	mov	r9, r1
 8015796:	f7eb f9e7 	bl	8000b68 <__aeabi_dcmpgt>
 801579a:	2800      	cmp	r0, #0
 801579c:	f040 8295 	bne.w	8015cca <_dtoa_r+0x97a>
 80157a0:	4652      	mov	r2, sl
 80157a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157a6:	4640      	mov	r0, r8
 80157a8:	4649      	mov	r1, r9
 80157aa:	f7eb f9bf 	bl	8000b2c <__aeabi_dcmplt>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f040 8289 	bne.w	8015cc6 <_dtoa_r+0x976>
 80157b4:	ec5b ab19 	vmov	sl, fp, d9
 80157b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	f2c0 8148 	blt.w	8015a50 <_dtoa_r+0x700>
 80157c0:	9a00      	ldr	r2, [sp, #0]
 80157c2:	2a0e      	cmp	r2, #14
 80157c4:	f300 8144 	bgt.w	8015a50 <_dtoa_r+0x700>
 80157c8:	4b67      	ldr	r3, [pc, #412]	; (8015968 <_dtoa_r+0x618>)
 80157ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80157d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f280 80d5 	bge.w	8015984 <_dtoa_r+0x634>
 80157da:	9b03      	ldr	r3, [sp, #12]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	f300 80d1 	bgt.w	8015984 <_dtoa_r+0x634>
 80157e2:	f040 826f 	bne.w	8015cc4 <_dtoa_r+0x974>
 80157e6:	4b65      	ldr	r3, [pc, #404]	; (801597c <_dtoa_r+0x62c>)
 80157e8:	2200      	movs	r2, #0
 80157ea:	4640      	mov	r0, r8
 80157ec:	4649      	mov	r1, r9
 80157ee:	f7ea ff2b 	bl	8000648 <__aeabi_dmul>
 80157f2:	4652      	mov	r2, sl
 80157f4:	465b      	mov	r3, fp
 80157f6:	f7eb f9ad 	bl	8000b54 <__aeabi_dcmpge>
 80157fa:	9e03      	ldr	r6, [sp, #12]
 80157fc:	4637      	mov	r7, r6
 80157fe:	2800      	cmp	r0, #0
 8015800:	f040 8245 	bne.w	8015c8e <_dtoa_r+0x93e>
 8015804:	9d01      	ldr	r5, [sp, #4]
 8015806:	2331      	movs	r3, #49	; 0x31
 8015808:	f805 3b01 	strb.w	r3, [r5], #1
 801580c:	9b00      	ldr	r3, [sp, #0]
 801580e:	3301      	adds	r3, #1
 8015810:	9300      	str	r3, [sp, #0]
 8015812:	e240      	b.n	8015c96 <_dtoa_r+0x946>
 8015814:	07f2      	lsls	r2, r6, #31
 8015816:	d505      	bpl.n	8015824 <_dtoa_r+0x4d4>
 8015818:	e9d7 2300 	ldrd	r2, r3, [r7]
 801581c:	f7ea ff14 	bl	8000648 <__aeabi_dmul>
 8015820:	3501      	adds	r5, #1
 8015822:	2301      	movs	r3, #1
 8015824:	1076      	asrs	r6, r6, #1
 8015826:	3708      	adds	r7, #8
 8015828:	e777      	b.n	801571a <_dtoa_r+0x3ca>
 801582a:	2502      	movs	r5, #2
 801582c:	e779      	b.n	8015722 <_dtoa_r+0x3d2>
 801582e:	9f00      	ldr	r7, [sp, #0]
 8015830:	9e03      	ldr	r6, [sp, #12]
 8015832:	e794      	b.n	801575e <_dtoa_r+0x40e>
 8015834:	9901      	ldr	r1, [sp, #4]
 8015836:	4b4c      	ldr	r3, [pc, #304]	; (8015968 <_dtoa_r+0x618>)
 8015838:	4431      	add	r1, r6
 801583a:	910d      	str	r1, [sp, #52]	; 0x34
 801583c:	9908      	ldr	r1, [sp, #32]
 801583e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015846:	2900      	cmp	r1, #0
 8015848:	d043      	beq.n	80158d2 <_dtoa_r+0x582>
 801584a:	494d      	ldr	r1, [pc, #308]	; (8015980 <_dtoa_r+0x630>)
 801584c:	2000      	movs	r0, #0
 801584e:	f7eb f825 	bl	800089c <__aeabi_ddiv>
 8015852:	4652      	mov	r2, sl
 8015854:	465b      	mov	r3, fp
 8015856:	f7ea fd3f 	bl	80002d8 <__aeabi_dsub>
 801585a:	9d01      	ldr	r5, [sp, #4]
 801585c:	4682      	mov	sl, r0
 801585e:	468b      	mov	fp, r1
 8015860:	4649      	mov	r1, r9
 8015862:	4640      	mov	r0, r8
 8015864:	f7eb f9a0 	bl	8000ba8 <__aeabi_d2iz>
 8015868:	4606      	mov	r6, r0
 801586a:	f7ea fe83 	bl	8000574 <__aeabi_i2d>
 801586e:	4602      	mov	r2, r0
 8015870:	460b      	mov	r3, r1
 8015872:	4640      	mov	r0, r8
 8015874:	4649      	mov	r1, r9
 8015876:	f7ea fd2f 	bl	80002d8 <__aeabi_dsub>
 801587a:	3630      	adds	r6, #48	; 0x30
 801587c:	f805 6b01 	strb.w	r6, [r5], #1
 8015880:	4652      	mov	r2, sl
 8015882:	465b      	mov	r3, fp
 8015884:	4680      	mov	r8, r0
 8015886:	4689      	mov	r9, r1
 8015888:	f7eb f950 	bl	8000b2c <__aeabi_dcmplt>
 801588c:	2800      	cmp	r0, #0
 801588e:	d163      	bne.n	8015958 <_dtoa_r+0x608>
 8015890:	4642      	mov	r2, r8
 8015892:	464b      	mov	r3, r9
 8015894:	4936      	ldr	r1, [pc, #216]	; (8015970 <_dtoa_r+0x620>)
 8015896:	2000      	movs	r0, #0
 8015898:	f7ea fd1e 	bl	80002d8 <__aeabi_dsub>
 801589c:	4652      	mov	r2, sl
 801589e:	465b      	mov	r3, fp
 80158a0:	f7eb f944 	bl	8000b2c <__aeabi_dcmplt>
 80158a4:	2800      	cmp	r0, #0
 80158a6:	f040 80b5 	bne.w	8015a14 <_dtoa_r+0x6c4>
 80158aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158ac:	429d      	cmp	r5, r3
 80158ae:	d081      	beq.n	80157b4 <_dtoa_r+0x464>
 80158b0:	4b30      	ldr	r3, [pc, #192]	; (8015974 <_dtoa_r+0x624>)
 80158b2:	2200      	movs	r2, #0
 80158b4:	4650      	mov	r0, sl
 80158b6:	4659      	mov	r1, fp
 80158b8:	f7ea fec6 	bl	8000648 <__aeabi_dmul>
 80158bc:	4b2d      	ldr	r3, [pc, #180]	; (8015974 <_dtoa_r+0x624>)
 80158be:	4682      	mov	sl, r0
 80158c0:	468b      	mov	fp, r1
 80158c2:	4640      	mov	r0, r8
 80158c4:	4649      	mov	r1, r9
 80158c6:	2200      	movs	r2, #0
 80158c8:	f7ea febe 	bl	8000648 <__aeabi_dmul>
 80158cc:	4680      	mov	r8, r0
 80158ce:	4689      	mov	r9, r1
 80158d0:	e7c6      	b.n	8015860 <_dtoa_r+0x510>
 80158d2:	4650      	mov	r0, sl
 80158d4:	4659      	mov	r1, fp
 80158d6:	f7ea feb7 	bl	8000648 <__aeabi_dmul>
 80158da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158dc:	9d01      	ldr	r5, [sp, #4]
 80158de:	930f      	str	r3, [sp, #60]	; 0x3c
 80158e0:	4682      	mov	sl, r0
 80158e2:	468b      	mov	fp, r1
 80158e4:	4649      	mov	r1, r9
 80158e6:	4640      	mov	r0, r8
 80158e8:	f7eb f95e 	bl	8000ba8 <__aeabi_d2iz>
 80158ec:	4606      	mov	r6, r0
 80158ee:	f7ea fe41 	bl	8000574 <__aeabi_i2d>
 80158f2:	3630      	adds	r6, #48	; 0x30
 80158f4:	4602      	mov	r2, r0
 80158f6:	460b      	mov	r3, r1
 80158f8:	4640      	mov	r0, r8
 80158fa:	4649      	mov	r1, r9
 80158fc:	f7ea fcec 	bl	80002d8 <__aeabi_dsub>
 8015900:	f805 6b01 	strb.w	r6, [r5], #1
 8015904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015906:	429d      	cmp	r5, r3
 8015908:	4680      	mov	r8, r0
 801590a:	4689      	mov	r9, r1
 801590c:	f04f 0200 	mov.w	r2, #0
 8015910:	d124      	bne.n	801595c <_dtoa_r+0x60c>
 8015912:	4b1b      	ldr	r3, [pc, #108]	; (8015980 <_dtoa_r+0x630>)
 8015914:	4650      	mov	r0, sl
 8015916:	4659      	mov	r1, fp
 8015918:	f7ea fce0 	bl	80002dc <__adddf3>
 801591c:	4602      	mov	r2, r0
 801591e:	460b      	mov	r3, r1
 8015920:	4640      	mov	r0, r8
 8015922:	4649      	mov	r1, r9
 8015924:	f7eb f920 	bl	8000b68 <__aeabi_dcmpgt>
 8015928:	2800      	cmp	r0, #0
 801592a:	d173      	bne.n	8015a14 <_dtoa_r+0x6c4>
 801592c:	4652      	mov	r2, sl
 801592e:	465b      	mov	r3, fp
 8015930:	4913      	ldr	r1, [pc, #76]	; (8015980 <_dtoa_r+0x630>)
 8015932:	2000      	movs	r0, #0
 8015934:	f7ea fcd0 	bl	80002d8 <__aeabi_dsub>
 8015938:	4602      	mov	r2, r0
 801593a:	460b      	mov	r3, r1
 801593c:	4640      	mov	r0, r8
 801593e:	4649      	mov	r1, r9
 8015940:	f7eb f8f4 	bl	8000b2c <__aeabi_dcmplt>
 8015944:	2800      	cmp	r0, #0
 8015946:	f43f af35 	beq.w	80157b4 <_dtoa_r+0x464>
 801594a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801594c:	1e6b      	subs	r3, r5, #1
 801594e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015954:	2b30      	cmp	r3, #48	; 0x30
 8015956:	d0f8      	beq.n	801594a <_dtoa_r+0x5fa>
 8015958:	9700      	str	r7, [sp, #0]
 801595a:	e049      	b.n	80159f0 <_dtoa_r+0x6a0>
 801595c:	4b05      	ldr	r3, [pc, #20]	; (8015974 <_dtoa_r+0x624>)
 801595e:	f7ea fe73 	bl	8000648 <__aeabi_dmul>
 8015962:	4680      	mov	r8, r0
 8015964:	4689      	mov	r9, r1
 8015966:	e7bd      	b.n	80158e4 <_dtoa_r+0x594>
 8015968:	08019e50 	.word	0x08019e50
 801596c:	08019e28 	.word	0x08019e28
 8015970:	3ff00000 	.word	0x3ff00000
 8015974:	40240000 	.word	0x40240000
 8015978:	401c0000 	.word	0x401c0000
 801597c:	40140000 	.word	0x40140000
 8015980:	3fe00000 	.word	0x3fe00000
 8015984:	9d01      	ldr	r5, [sp, #4]
 8015986:	4656      	mov	r6, sl
 8015988:	465f      	mov	r7, fp
 801598a:	4642      	mov	r2, r8
 801598c:	464b      	mov	r3, r9
 801598e:	4630      	mov	r0, r6
 8015990:	4639      	mov	r1, r7
 8015992:	f7ea ff83 	bl	800089c <__aeabi_ddiv>
 8015996:	f7eb f907 	bl	8000ba8 <__aeabi_d2iz>
 801599a:	4682      	mov	sl, r0
 801599c:	f7ea fdea 	bl	8000574 <__aeabi_i2d>
 80159a0:	4642      	mov	r2, r8
 80159a2:	464b      	mov	r3, r9
 80159a4:	f7ea fe50 	bl	8000648 <__aeabi_dmul>
 80159a8:	4602      	mov	r2, r0
 80159aa:	460b      	mov	r3, r1
 80159ac:	4630      	mov	r0, r6
 80159ae:	4639      	mov	r1, r7
 80159b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80159b4:	f7ea fc90 	bl	80002d8 <__aeabi_dsub>
 80159b8:	f805 6b01 	strb.w	r6, [r5], #1
 80159bc:	9e01      	ldr	r6, [sp, #4]
 80159be:	9f03      	ldr	r7, [sp, #12]
 80159c0:	1bae      	subs	r6, r5, r6
 80159c2:	42b7      	cmp	r7, r6
 80159c4:	4602      	mov	r2, r0
 80159c6:	460b      	mov	r3, r1
 80159c8:	d135      	bne.n	8015a36 <_dtoa_r+0x6e6>
 80159ca:	f7ea fc87 	bl	80002dc <__adddf3>
 80159ce:	4642      	mov	r2, r8
 80159d0:	464b      	mov	r3, r9
 80159d2:	4606      	mov	r6, r0
 80159d4:	460f      	mov	r7, r1
 80159d6:	f7eb f8c7 	bl	8000b68 <__aeabi_dcmpgt>
 80159da:	b9d0      	cbnz	r0, 8015a12 <_dtoa_r+0x6c2>
 80159dc:	4642      	mov	r2, r8
 80159de:	464b      	mov	r3, r9
 80159e0:	4630      	mov	r0, r6
 80159e2:	4639      	mov	r1, r7
 80159e4:	f7eb f898 	bl	8000b18 <__aeabi_dcmpeq>
 80159e8:	b110      	cbz	r0, 80159f0 <_dtoa_r+0x6a0>
 80159ea:	f01a 0f01 	tst.w	sl, #1
 80159ee:	d110      	bne.n	8015a12 <_dtoa_r+0x6c2>
 80159f0:	4620      	mov	r0, r4
 80159f2:	ee18 1a10 	vmov	r1, s16
 80159f6:	f001 f885 	bl	8016b04 <_Bfree>
 80159fa:	2300      	movs	r3, #0
 80159fc:	9800      	ldr	r0, [sp, #0]
 80159fe:	702b      	strb	r3, [r5, #0]
 8015a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a02:	3001      	adds	r0, #1
 8015a04:	6018      	str	r0, [r3, #0]
 8015a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	f43f acf1 	beq.w	80153f0 <_dtoa_r+0xa0>
 8015a0e:	601d      	str	r5, [r3, #0]
 8015a10:	e4ee      	b.n	80153f0 <_dtoa_r+0xa0>
 8015a12:	9f00      	ldr	r7, [sp, #0]
 8015a14:	462b      	mov	r3, r5
 8015a16:	461d      	mov	r5, r3
 8015a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a1c:	2a39      	cmp	r2, #57	; 0x39
 8015a1e:	d106      	bne.n	8015a2e <_dtoa_r+0x6de>
 8015a20:	9a01      	ldr	r2, [sp, #4]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d1f7      	bne.n	8015a16 <_dtoa_r+0x6c6>
 8015a26:	9901      	ldr	r1, [sp, #4]
 8015a28:	2230      	movs	r2, #48	; 0x30
 8015a2a:	3701      	adds	r7, #1
 8015a2c:	700a      	strb	r2, [r1, #0]
 8015a2e:	781a      	ldrb	r2, [r3, #0]
 8015a30:	3201      	adds	r2, #1
 8015a32:	701a      	strb	r2, [r3, #0]
 8015a34:	e790      	b.n	8015958 <_dtoa_r+0x608>
 8015a36:	4ba6      	ldr	r3, [pc, #664]	; (8015cd0 <_dtoa_r+0x980>)
 8015a38:	2200      	movs	r2, #0
 8015a3a:	f7ea fe05 	bl	8000648 <__aeabi_dmul>
 8015a3e:	2200      	movs	r2, #0
 8015a40:	2300      	movs	r3, #0
 8015a42:	4606      	mov	r6, r0
 8015a44:	460f      	mov	r7, r1
 8015a46:	f7eb f867 	bl	8000b18 <__aeabi_dcmpeq>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d09d      	beq.n	801598a <_dtoa_r+0x63a>
 8015a4e:	e7cf      	b.n	80159f0 <_dtoa_r+0x6a0>
 8015a50:	9a08      	ldr	r2, [sp, #32]
 8015a52:	2a00      	cmp	r2, #0
 8015a54:	f000 80d7 	beq.w	8015c06 <_dtoa_r+0x8b6>
 8015a58:	9a06      	ldr	r2, [sp, #24]
 8015a5a:	2a01      	cmp	r2, #1
 8015a5c:	f300 80ba 	bgt.w	8015bd4 <_dtoa_r+0x884>
 8015a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a62:	2a00      	cmp	r2, #0
 8015a64:	f000 80b2 	beq.w	8015bcc <_dtoa_r+0x87c>
 8015a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015a6c:	9e07      	ldr	r6, [sp, #28]
 8015a6e:	9d04      	ldr	r5, [sp, #16]
 8015a70:	9a04      	ldr	r2, [sp, #16]
 8015a72:	441a      	add	r2, r3
 8015a74:	9204      	str	r2, [sp, #16]
 8015a76:	9a05      	ldr	r2, [sp, #20]
 8015a78:	2101      	movs	r1, #1
 8015a7a:	441a      	add	r2, r3
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	9205      	str	r2, [sp, #20]
 8015a80:	f001 f942 	bl	8016d08 <__i2b>
 8015a84:	4607      	mov	r7, r0
 8015a86:	2d00      	cmp	r5, #0
 8015a88:	dd0c      	ble.n	8015aa4 <_dtoa_r+0x754>
 8015a8a:	9b05      	ldr	r3, [sp, #20]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	dd09      	ble.n	8015aa4 <_dtoa_r+0x754>
 8015a90:	42ab      	cmp	r3, r5
 8015a92:	9a04      	ldr	r2, [sp, #16]
 8015a94:	bfa8      	it	ge
 8015a96:	462b      	movge	r3, r5
 8015a98:	1ad2      	subs	r2, r2, r3
 8015a9a:	9204      	str	r2, [sp, #16]
 8015a9c:	9a05      	ldr	r2, [sp, #20]
 8015a9e:	1aed      	subs	r5, r5, r3
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	9305      	str	r3, [sp, #20]
 8015aa4:	9b07      	ldr	r3, [sp, #28]
 8015aa6:	b31b      	cbz	r3, 8015af0 <_dtoa_r+0x7a0>
 8015aa8:	9b08      	ldr	r3, [sp, #32]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f000 80af 	beq.w	8015c0e <_dtoa_r+0x8be>
 8015ab0:	2e00      	cmp	r6, #0
 8015ab2:	dd13      	ble.n	8015adc <_dtoa_r+0x78c>
 8015ab4:	4639      	mov	r1, r7
 8015ab6:	4632      	mov	r2, r6
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f001 f9e5 	bl	8016e88 <__pow5mult>
 8015abe:	ee18 2a10 	vmov	r2, s16
 8015ac2:	4601      	mov	r1, r0
 8015ac4:	4607      	mov	r7, r0
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f001 f934 	bl	8016d34 <__multiply>
 8015acc:	ee18 1a10 	vmov	r1, s16
 8015ad0:	4680      	mov	r8, r0
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	f001 f816 	bl	8016b04 <_Bfree>
 8015ad8:	ee08 8a10 	vmov	s16, r8
 8015adc:	9b07      	ldr	r3, [sp, #28]
 8015ade:	1b9a      	subs	r2, r3, r6
 8015ae0:	d006      	beq.n	8015af0 <_dtoa_r+0x7a0>
 8015ae2:	ee18 1a10 	vmov	r1, s16
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f001 f9ce 	bl	8016e88 <__pow5mult>
 8015aec:	ee08 0a10 	vmov	s16, r0
 8015af0:	2101      	movs	r1, #1
 8015af2:	4620      	mov	r0, r4
 8015af4:	f001 f908 	bl	8016d08 <__i2b>
 8015af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	4606      	mov	r6, r0
 8015afe:	f340 8088 	ble.w	8015c12 <_dtoa_r+0x8c2>
 8015b02:	461a      	mov	r2, r3
 8015b04:	4601      	mov	r1, r0
 8015b06:	4620      	mov	r0, r4
 8015b08:	f001 f9be 	bl	8016e88 <__pow5mult>
 8015b0c:	9b06      	ldr	r3, [sp, #24]
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	4606      	mov	r6, r0
 8015b12:	f340 8081 	ble.w	8015c18 <_dtoa_r+0x8c8>
 8015b16:	f04f 0800 	mov.w	r8, #0
 8015b1a:	6933      	ldr	r3, [r6, #16]
 8015b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015b20:	6918      	ldr	r0, [r3, #16]
 8015b22:	f001 f8a1 	bl	8016c68 <__hi0bits>
 8015b26:	f1c0 0020 	rsb	r0, r0, #32
 8015b2a:	9b05      	ldr	r3, [sp, #20]
 8015b2c:	4418      	add	r0, r3
 8015b2e:	f010 001f 	ands.w	r0, r0, #31
 8015b32:	f000 8092 	beq.w	8015c5a <_dtoa_r+0x90a>
 8015b36:	f1c0 0320 	rsb	r3, r0, #32
 8015b3a:	2b04      	cmp	r3, #4
 8015b3c:	f340 808a 	ble.w	8015c54 <_dtoa_r+0x904>
 8015b40:	f1c0 001c 	rsb	r0, r0, #28
 8015b44:	9b04      	ldr	r3, [sp, #16]
 8015b46:	4403      	add	r3, r0
 8015b48:	9304      	str	r3, [sp, #16]
 8015b4a:	9b05      	ldr	r3, [sp, #20]
 8015b4c:	4403      	add	r3, r0
 8015b4e:	4405      	add	r5, r0
 8015b50:	9305      	str	r3, [sp, #20]
 8015b52:	9b04      	ldr	r3, [sp, #16]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	dd07      	ble.n	8015b68 <_dtoa_r+0x818>
 8015b58:	ee18 1a10 	vmov	r1, s16
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f001 f9ec 	bl	8016f3c <__lshift>
 8015b64:	ee08 0a10 	vmov	s16, r0
 8015b68:	9b05      	ldr	r3, [sp, #20]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	dd05      	ble.n	8015b7a <_dtoa_r+0x82a>
 8015b6e:	4631      	mov	r1, r6
 8015b70:	461a      	mov	r2, r3
 8015b72:	4620      	mov	r0, r4
 8015b74:	f001 f9e2 	bl	8016f3c <__lshift>
 8015b78:	4606      	mov	r6, r0
 8015b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d06e      	beq.n	8015c5e <_dtoa_r+0x90e>
 8015b80:	ee18 0a10 	vmov	r0, s16
 8015b84:	4631      	mov	r1, r6
 8015b86:	f001 fa49 	bl	801701c <__mcmp>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	da67      	bge.n	8015c5e <_dtoa_r+0x90e>
 8015b8e:	9b00      	ldr	r3, [sp, #0]
 8015b90:	3b01      	subs	r3, #1
 8015b92:	ee18 1a10 	vmov	r1, s16
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	220a      	movs	r2, #10
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f000 ffd3 	bl	8016b48 <__multadd>
 8015ba2:	9b08      	ldr	r3, [sp, #32]
 8015ba4:	ee08 0a10 	vmov	s16, r0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	f000 81b1 	beq.w	8015f10 <_dtoa_r+0xbc0>
 8015bae:	2300      	movs	r3, #0
 8015bb0:	4639      	mov	r1, r7
 8015bb2:	220a      	movs	r2, #10
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 ffc7 	bl	8016b48 <__multadd>
 8015bba:	9b02      	ldr	r3, [sp, #8]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	4607      	mov	r7, r0
 8015bc0:	f300 808e 	bgt.w	8015ce0 <_dtoa_r+0x990>
 8015bc4:	9b06      	ldr	r3, [sp, #24]
 8015bc6:	2b02      	cmp	r3, #2
 8015bc8:	dc51      	bgt.n	8015c6e <_dtoa_r+0x91e>
 8015bca:	e089      	b.n	8015ce0 <_dtoa_r+0x990>
 8015bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015bd2:	e74b      	b.n	8015a6c <_dtoa_r+0x71c>
 8015bd4:	9b03      	ldr	r3, [sp, #12]
 8015bd6:	1e5e      	subs	r6, r3, #1
 8015bd8:	9b07      	ldr	r3, [sp, #28]
 8015bda:	42b3      	cmp	r3, r6
 8015bdc:	bfbf      	itttt	lt
 8015bde:	9b07      	ldrlt	r3, [sp, #28]
 8015be0:	9607      	strlt	r6, [sp, #28]
 8015be2:	1af2      	sublt	r2, r6, r3
 8015be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015be6:	bfb6      	itet	lt
 8015be8:	189b      	addlt	r3, r3, r2
 8015bea:	1b9e      	subge	r6, r3, r6
 8015bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015bee:	9b03      	ldr	r3, [sp, #12]
 8015bf0:	bfb8      	it	lt
 8015bf2:	2600      	movlt	r6, #0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	bfb7      	itett	lt
 8015bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015c00:	1a9d      	sublt	r5, r3, r2
 8015c02:	2300      	movlt	r3, #0
 8015c04:	e734      	b.n	8015a70 <_dtoa_r+0x720>
 8015c06:	9e07      	ldr	r6, [sp, #28]
 8015c08:	9d04      	ldr	r5, [sp, #16]
 8015c0a:	9f08      	ldr	r7, [sp, #32]
 8015c0c:	e73b      	b.n	8015a86 <_dtoa_r+0x736>
 8015c0e:	9a07      	ldr	r2, [sp, #28]
 8015c10:	e767      	b.n	8015ae2 <_dtoa_r+0x792>
 8015c12:	9b06      	ldr	r3, [sp, #24]
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	dc18      	bgt.n	8015c4a <_dtoa_r+0x8fa>
 8015c18:	f1ba 0f00 	cmp.w	sl, #0
 8015c1c:	d115      	bne.n	8015c4a <_dtoa_r+0x8fa>
 8015c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c22:	b993      	cbnz	r3, 8015c4a <_dtoa_r+0x8fa>
 8015c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c28:	0d1b      	lsrs	r3, r3, #20
 8015c2a:	051b      	lsls	r3, r3, #20
 8015c2c:	b183      	cbz	r3, 8015c50 <_dtoa_r+0x900>
 8015c2e:	9b04      	ldr	r3, [sp, #16]
 8015c30:	3301      	adds	r3, #1
 8015c32:	9304      	str	r3, [sp, #16]
 8015c34:	9b05      	ldr	r3, [sp, #20]
 8015c36:	3301      	adds	r3, #1
 8015c38:	9305      	str	r3, [sp, #20]
 8015c3a:	f04f 0801 	mov.w	r8, #1
 8015c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f47f af6a 	bne.w	8015b1a <_dtoa_r+0x7ca>
 8015c46:	2001      	movs	r0, #1
 8015c48:	e76f      	b.n	8015b2a <_dtoa_r+0x7da>
 8015c4a:	f04f 0800 	mov.w	r8, #0
 8015c4e:	e7f6      	b.n	8015c3e <_dtoa_r+0x8ee>
 8015c50:	4698      	mov	r8, r3
 8015c52:	e7f4      	b.n	8015c3e <_dtoa_r+0x8ee>
 8015c54:	f43f af7d 	beq.w	8015b52 <_dtoa_r+0x802>
 8015c58:	4618      	mov	r0, r3
 8015c5a:	301c      	adds	r0, #28
 8015c5c:	e772      	b.n	8015b44 <_dtoa_r+0x7f4>
 8015c5e:	9b03      	ldr	r3, [sp, #12]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	dc37      	bgt.n	8015cd4 <_dtoa_r+0x984>
 8015c64:	9b06      	ldr	r3, [sp, #24]
 8015c66:	2b02      	cmp	r3, #2
 8015c68:	dd34      	ble.n	8015cd4 <_dtoa_r+0x984>
 8015c6a:	9b03      	ldr	r3, [sp, #12]
 8015c6c:	9302      	str	r3, [sp, #8]
 8015c6e:	9b02      	ldr	r3, [sp, #8]
 8015c70:	b96b      	cbnz	r3, 8015c8e <_dtoa_r+0x93e>
 8015c72:	4631      	mov	r1, r6
 8015c74:	2205      	movs	r2, #5
 8015c76:	4620      	mov	r0, r4
 8015c78:	f000 ff66 	bl	8016b48 <__multadd>
 8015c7c:	4601      	mov	r1, r0
 8015c7e:	4606      	mov	r6, r0
 8015c80:	ee18 0a10 	vmov	r0, s16
 8015c84:	f001 f9ca 	bl	801701c <__mcmp>
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	f73f adbb 	bgt.w	8015804 <_dtoa_r+0x4b4>
 8015c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c90:	9d01      	ldr	r5, [sp, #4]
 8015c92:	43db      	mvns	r3, r3
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	f04f 0800 	mov.w	r8, #0
 8015c9a:	4631      	mov	r1, r6
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f000 ff31 	bl	8016b04 <_Bfree>
 8015ca2:	2f00      	cmp	r7, #0
 8015ca4:	f43f aea4 	beq.w	80159f0 <_dtoa_r+0x6a0>
 8015ca8:	f1b8 0f00 	cmp.w	r8, #0
 8015cac:	d005      	beq.n	8015cba <_dtoa_r+0x96a>
 8015cae:	45b8      	cmp	r8, r7
 8015cb0:	d003      	beq.n	8015cba <_dtoa_r+0x96a>
 8015cb2:	4641      	mov	r1, r8
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	f000 ff25 	bl	8016b04 <_Bfree>
 8015cba:	4639      	mov	r1, r7
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	f000 ff21 	bl	8016b04 <_Bfree>
 8015cc2:	e695      	b.n	80159f0 <_dtoa_r+0x6a0>
 8015cc4:	2600      	movs	r6, #0
 8015cc6:	4637      	mov	r7, r6
 8015cc8:	e7e1      	b.n	8015c8e <_dtoa_r+0x93e>
 8015cca:	9700      	str	r7, [sp, #0]
 8015ccc:	4637      	mov	r7, r6
 8015cce:	e599      	b.n	8015804 <_dtoa_r+0x4b4>
 8015cd0:	40240000 	.word	0x40240000
 8015cd4:	9b08      	ldr	r3, [sp, #32]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	f000 80ca 	beq.w	8015e70 <_dtoa_r+0xb20>
 8015cdc:	9b03      	ldr	r3, [sp, #12]
 8015cde:	9302      	str	r3, [sp, #8]
 8015ce0:	2d00      	cmp	r5, #0
 8015ce2:	dd05      	ble.n	8015cf0 <_dtoa_r+0x9a0>
 8015ce4:	4639      	mov	r1, r7
 8015ce6:	462a      	mov	r2, r5
 8015ce8:	4620      	mov	r0, r4
 8015cea:	f001 f927 	bl	8016f3c <__lshift>
 8015cee:	4607      	mov	r7, r0
 8015cf0:	f1b8 0f00 	cmp.w	r8, #0
 8015cf4:	d05b      	beq.n	8015dae <_dtoa_r+0xa5e>
 8015cf6:	6879      	ldr	r1, [r7, #4]
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f000 fec3 	bl	8016a84 <_Balloc>
 8015cfe:	4605      	mov	r5, r0
 8015d00:	b928      	cbnz	r0, 8015d0e <_dtoa_r+0x9be>
 8015d02:	4b87      	ldr	r3, [pc, #540]	; (8015f20 <_dtoa_r+0xbd0>)
 8015d04:	4602      	mov	r2, r0
 8015d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015d0a:	f7ff bb3b 	b.w	8015384 <_dtoa_r+0x34>
 8015d0e:	693a      	ldr	r2, [r7, #16]
 8015d10:	3202      	adds	r2, #2
 8015d12:	0092      	lsls	r2, r2, #2
 8015d14:	f107 010c 	add.w	r1, r7, #12
 8015d18:	300c      	adds	r0, #12
 8015d1a:	f7fd faf7 	bl	801330c <memcpy>
 8015d1e:	2201      	movs	r2, #1
 8015d20:	4629      	mov	r1, r5
 8015d22:	4620      	mov	r0, r4
 8015d24:	f001 f90a 	bl	8016f3c <__lshift>
 8015d28:	9b01      	ldr	r3, [sp, #4]
 8015d2a:	f103 0901 	add.w	r9, r3, #1
 8015d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015d32:	4413      	add	r3, r2
 8015d34:	9305      	str	r3, [sp, #20]
 8015d36:	f00a 0301 	and.w	r3, sl, #1
 8015d3a:	46b8      	mov	r8, r7
 8015d3c:	9304      	str	r3, [sp, #16]
 8015d3e:	4607      	mov	r7, r0
 8015d40:	4631      	mov	r1, r6
 8015d42:	ee18 0a10 	vmov	r0, s16
 8015d46:	f7ff fa77 	bl	8015238 <quorem>
 8015d4a:	4641      	mov	r1, r8
 8015d4c:	9002      	str	r0, [sp, #8]
 8015d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d52:	ee18 0a10 	vmov	r0, s16
 8015d56:	f001 f961 	bl	801701c <__mcmp>
 8015d5a:	463a      	mov	r2, r7
 8015d5c:	9003      	str	r0, [sp, #12]
 8015d5e:	4631      	mov	r1, r6
 8015d60:	4620      	mov	r0, r4
 8015d62:	f001 f977 	bl	8017054 <__mdiff>
 8015d66:	68c2      	ldr	r2, [r0, #12]
 8015d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8015d6c:	4605      	mov	r5, r0
 8015d6e:	bb02      	cbnz	r2, 8015db2 <_dtoa_r+0xa62>
 8015d70:	4601      	mov	r1, r0
 8015d72:	ee18 0a10 	vmov	r0, s16
 8015d76:	f001 f951 	bl	801701c <__mcmp>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	4620      	mov	r0, r4
 8015d80:	9207      	str	r2, [sp, #28]
 8015d82:	f000 febf 	bl	8016b04 <_Bfree>
 8015d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015d8a:	ea43 0102 	orr.w	r1, r3, r2
 8015d8e:	9b04      	ldr	r3, [sp, #16]
 8015d90:	430b      	orrs	r3, r1
 8015d92:	464d      	mov	r5, r9
 8015d94:	d10f      	bne.n	8015db6 <_dtoa_r+0xa66>
 8015d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015d9a:	d02a      	beq.n	8015df2 <_dtoa_r+0xaa2>
 8015d9c:	9b03      	ldr	r3, [sp, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	dd02      	ble.n	8015da8 <_dtoa_r+0xa58>
 8015da2:	9b02      	ldr	r3, [sp, #8]
 8015da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015da8:	f88b a000 	strb.w	sl, [fp]
 8015dac:	e775      	b.n	8015c9a <_dtoa_r+0x94a>
 8015dae:	4638      	mov	r0, r7
 8015db0:	e7ba      	b.n	8015d28 <_dtoa_r+0x9d8>
 8015db2:	2201      	movs	r2, #1
 8015db4:	e7e2      	b.n	8015d7c <_dtoa_r+0xa2c>
 8015db6:	9b03      	ldr	r3, [sp, #12]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	db04      	blt.n	8015dc6 <_dtoa_r+0xa76>
 8015dbc:	9906      	ldr	r1, [sp, #24]
 8015dbe:	430b      	orrs	r3, r1
 8015dc0:	9904      	ldr	r1, [sp, #16]
 8015dc2:	430b      	orrs	r3, r1
 8015dc4:	d122      	bne.n	8015e0c <_dtoa_r+0xabc>
 8015dc6:	2a00      	cmp	r2, #0
 8015dc8:	ddee      	ble.n	8015da8 <_dtoa_r+0xa58>
 8015dca:	ee18 1a10 	vmov	r1, s16
 8015dce:	2201      	movs	r2, #1
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	f001 f8b3 	bl	8016f3c <__lshift>
 8015dd6:	4631      	mov	r1, r6
 8015dd8:	ee08 0a10 	vmov	s16, r0
 8015ddc:	f001 f91e 	bl	801701c <__mcmp>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	dc03      	bgt.n	8015dec <_dtoa_r+0xa9c>
 8015de4:	d1e0      	bne.n	8015da8 <_dtoa_r+0xa58>
 8015de6:	f01a 0f01 	tst.w	sl, #1
 8015dea:	d0dd      	beq.n	8015da8 <_dtoa_r+0xa58>
 8015dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015df0:	d1d7      	bne.n	8015da2 <_dtoa_r+0xa52>
 8015df2:	2339      	movs	r3, #57	; 0x39
 8015df4:	f88b 3000 	strb.w	r3, [fp]
 8015df8:	462b      	mov	r3, r5
 8015dfa:	461d      	mov	r5, r3
 8015dfc:	3b01      	subs	r3, #1
 8015dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015e02:	2a39      	cmp	r2, #57	; 0x39
 8015e04:	d071      	beq.n	8015eea <_dtoa_r+0xb9a>
 8015e06:	3201      	adds	r2, #1
 8015e08:	701a      	strb	r2, [r3, #0]
 8015e0a:	e746      	b.n	8015c9a <_dtoa_r+0x94a>
 8015e0c:	2a00      	cmp	r2, #0
 8015e0e:	dd07      	ble.n	8015e20 <_dtoa_r+0xad0>
 8015e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015e14:	d0ed      	beq.n	8015df2 <_dtoa_r+0xaa2>
 8015e16:	f10a 0301 	add.w	r3, sl, #1
 8015e1a:	f88b 3000 	strb.w	r3, [fp]
 8015e1e:	e73c      	b.n	8015c9a <_dtoa_r+0x94a>
 8015e20:	9b05      	ldr	r3, [sp, #20]
 8015e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015e26:	4599      	cmp	r9, r3
 8015e28:	d047      	beq.n	8015eba <_dtoa_r+0xb6a>
 8015e2a:	ee18 1a10 	vmov	r1, s16
 8015e2e:	2300      	movs	r3, #0
 8015e30:	220a      	movs	r2, #10
 8015e32:	4620      	mov	r0, r4
 8015e34:	f000 fe88 	bl	8016b48 <__multadd>
 8015e38:	45b8      	cmp	r8, r7
 8015e3a:	ee08 0a10 	vmov	s16, r0
 8015e3e:	f04f 0300 	mov.w	r3, #0
 8015e42:	f04f 020a 	mov.w	r2, #10
 8015e46:	4641      	mov	r1, r8
 8015e48:	4620      	mov	r0, r4
 8015e4a:	d106      	bne.n	8015e5a <_dtoa_r+0xb0a>
 8015e4c:	f000 fe7c 	bl	8016b48 <__multadd>
 8015e50:	4680      	mov	r8, r0
 8015e52:	4607      	mov	r7, r0
 8015e54:	f109 0901 	add.w	r9, r9, #1
 8015e58:	e772      	b.n	8015d40 <_dtoa_r+0x9f0>
 8015e5a:	f000 fe75 	bl	8016b48 <__multadd>
 8015e5e:	4639      	mov	r1, r7
 8015e60:	4680      	mov	r8, r0
 8015e62:	2300      	movs	r3, #0
 8015e64:	220a      	movs	r2, #10
 8015e66:	4620      	mov	r0, r4
 8015e68:	f000 fe6e 	bl	8016b48 <__multadd>
 8015e6c:	4607      	mov	r7, r0
 8015e6e:	e7f1      	b.n	8015e54 <_dtoa_r+0xb04>
 8015e70:	9b03      	ldr	r3, [sp, #12]
 8015e72:	9302      	str	r3, [sp, #8]
 8015e74:	9d01      	ldr	r5, [sp, #4]
 8015e76:	ee18 0a10 	vmov	r0, s16
 8015e7a:	4631      	mov	r1, r6
 8015e7c:	f7ff f9dc 	bl	8015238 <quorem>
 8015e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015e84:	9b01      	ldr	r3, [sp, #4]
 8015e86:	f805 ab01 	strb.w	sl, [r5], #1
 8015e8a:	1aea      	subs	r2, r5, r3
 8015e8c:	9b02      	ldr	r3, [sp, #8]
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	dd09      	ble.n	8015ea6 <_dtoa_r+0xb56>
 8015e92:	ee18 1a10 	vmov	r1, s16
 8015e96:	2300      	movs	r3, #0
 8015e98:	220a      	movs	r2, #10
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f000 fe54 	bl	8016b48 <__multadd>
 8015ea0:	ee08 0a10 	vmov	s16, r0
 8015ea4:	e7e7      	b.n	8015e76 <_dtoa_r+0xb26>
 8015ea6:	9b02      	ldr	r3, [sp, #8]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	bfc8      	it	gt
 8015eac:	461d      	movgt	r5, r3
 8015eae:	9b01      	ldr	r3, [sp, #4]
 8015eb0:	bfd8      	it	le
 8015eb2:	2501      	movle	r5, #1
 8015eb4:	441d      	add	r5, r3
 8015eb6:	f04f 0800 	mov.w	r8, #0
 8015eba:	ee18 1a10 	vmov	r1, s16
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f001 f83b 	bl	8016f3c <__lshift>
 8015ec6:	4631      	mov	r1, r6
 8015ec8:	ee08 0a10 	vmov	s16, r0
 8015ecc:	f001 f8a6 	bl	801701c <__mcmp>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	dc91      	bgt.n	8015df8 <_dtoa_r+0xaa8>
 8015ed4:	d102      	bne.n	8015edc <_dtoa_r+0xb8c>
 8015ed6:	f01a 0f01 	tst.w	sl, #1
 8015eda:	d18d      	bne.n	8015df8 <_dtoa_r+0xaa8>
 8015edc:	462b      	mov	r3, r5
 8015ede:	461d      	mov	r5, r3
 8015ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ee4:	2a30      	cmp	r2, #48	; 0x30
 8015ee6:	d0fa      	beq.n	8015ede <_dtoa_r+0xb8e>
 8015ee8:	e6d7      	b.n	8015c9a <_dtoa_r+0x94a>
 8015eea:	9a01      	ldr	r2, [sp, #4]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d184      	bne.n	8015dfa <_dtoa_r+0xaaa>
 8015ef0:	9b00      	ldr	r3, [sp, #0]
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	9300      	str	r3, [sp, #0]
 8015ef6:	2331      	movs	r3, #49	; 0x31
 8015ef8:	7013      	strb	r3, [r2, #0]
 8015efa:	e6ce      	b.n	8015c9a <_dtoa_r+0x94a>
 8015efc:	4b09      	ldr	r3, [pc, #36]	; (8015f24 <_dtoa_r+0xbd4>)
 8015efe:	f7ff ba95 	b.w	801542c <_dtoa_r+0xdc>
 8015f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f47f aa6e 	bne.w	80153e6 <_dtoa_r+0x96>
 8015f0a:	4b07      	ldr	r3, [pc, #28]	; (8015f28 <_dtoa_r+0xbd8>)
 8015f0c:	f7ff ba8e 	b.w	801542c <_dtoa_r+0xdc>
 8015f10:	9b02      	ldr	r3, [sp, #8]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	dcae      	bgt.n	8015e74 <_dtoa_r+0xb24>
 8015f16:	9b06      	ldr	r3, [sp, #24]
 8015f18:	2b02      	cmp	r3, #2
 8015f1a:	f73f aea8 	bgt.w	8015c6e <_dtoa_r+0x91e>
 8015f1e:	e7a9      	b.n	8015e74 <_dtoa_r+0xb24>
 8015f20:	08019cd8 	.word	0x08019cd8
 8015f24:	08019ad8 	.word	0x08019ad8
 8015f28:	08019c59 	.word	0x08019c59

08015f2c <__sflush_r>:
 8015f2c:	898a      	ldrh	r2, [r1, #12]
 8015f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f32:	4605      	mov	r5, r0
 8015f34:	0710      	lsls	r0, r2, #28
 8015f36:	460c      	mov	r4, r1
 8015f38:	d458      	bmi.n	8015fec <__sflush_r+0xc0>
 8015f3a:	684b      	ldr	r3, [r1, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	dc05      	bgt.n	8015f4c <__sflush_r+0x20>
 8015f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	dc02      	bgt.n	8015f4c <__sflush_r+0x20>
 8015f46:	2000      	movs	r0, #0
 8015f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f4e:	2e00      	cmp	r6, #0
 8015f50:	d0f9      	beq.n	8015f46 <__sflush_r+0x1a>
 8015f52:	2300      	movs	r3, #0
 8015f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f58:	682f      	ldr	r7, [r5, #0]
 8015f5a:	602b      	str	r3, [r5, #0]
 8015f5c:	d032      	beq.n	8015fc4 <__sflush_r+0x98>
 8015f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f60:	89a3      	ldrh	r3, [r4, #12]
 8015f62:	075a      	lsls	r2, r3, #29
 8015f64:	d505      	bpl.n	8015f72 <__sflush_r+0x46>
 8015f66:	6863      	ldr	r3, [r4, #4]
 8015f68:	1ac0      	subs	r0, r0, r3
 8015f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f6c:	b10b      	cbz	r3, 8015f72 <__sflush_r+0x46>
 8015f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f70:	1ac0      	subs	r0, r0, r3
 8015f72:	2300      	movs	r3, #0
 8015f74:	4602      	mov	r2, r0
 8015f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f78:	6a21      	ldr	r1, [r4, #32]
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	47b0      	blx	r6
 8015f7e:	1c43      	adds	r3, r0, #1
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	d106      	bne.n	8015f92 <__sflush_r+0x66>
 8015f84:	6829      	ldr	r1, [r5, #0]
 8015f86:	291d      	cmp	r1, #29
 8015f88:	d82c      	bhi.n	8015fe4 <__sflush_r+0xb8>
 8015f8a:	4a2a      	ldr	r2, [pc, #168]	; (8016034 <__sflush_r+0x108>)
 8015f8c:	40ca      	lsrs	r2, r1
 8015f8e:	07d6      	lsls	r6, r2, #31
 8015f90:	d528      	bpl.n	8015fe4 <__sflush_r+0xb8>
 8015f92:	2200      	movs	r2, #0
 8015f94:	6062      	str	r2, [r4, #4]
 8015f96:	04d9      	lsls	r1, r3, #19
 8015f98:	6922      	ldr	r2, [r4, #16]
 8015f9a:	6022      	str	r2, [r4, #0]
 8015f9c:	d504      	bpl.n	8015fa8 <__sflush_r+0x7c>
 8015f9e:	1c42      	adds	r2, r0, #1
 8015fa0:	d101      	bne.n	8015fa6 <__sflush_r+0x7a>
 8015fa2:	682b      	ldr	r3, [r5, #0]
 8015fa4:	b903      	cbnz	r3, 8015fa8 <__sflush_r+0x7c>
 8015fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8015fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015faa:	602f      	str	r7, [r5, #0]
 8015fac:	2900      	cmp	r1, #0
 8015fae:	d0ca      	beq.n	8015f46 <__sflush_r+0x1a>
 8015fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fb4:	4299      	cmp	r1, r3
 8015fb6:	d002      	beq.n	8015fbe <__sflush_r+0x92>
 8015fb8:	4628      	mov	r0, r5
 8015fba:	f001 fa3b 	bl	8017434 <_free_r>
 8015fbe:	2000      	movs	r0, #0
 8015fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8015fc2:	e7c1      	b.n	8015f48 <__sflush_r+0x1c>
 8015fc4:	6a21      	ldr	r1, [r4, #32]
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	4628      	mov	r0, r5
 8015fca:	47b0      	blx	r6
 8015fcc:	1c41      	adds	r1, r0, #1
 8015fce:	d1c7      	bne.n	8015f60 <__sflush_r+0x34>
 8015fd0:	682b      	ldr	r3, [r5, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d0c4      	beq.n	8015f60 <__sflush_r+0x34>
 8015fd6:	2b1d      	cmp	r3, #29
 8015fd8:	d001      	beq.n	8015fde <__sflush_r+0xb2>
 8015fda:	2b16      	cmp	r3, #22
 8015fdc:	d101      	bne.n	8015fe2 <__sflush_r+0xb6>
 8015fde:	602f      	str	r7, [r5, #0]
 8015fe0:	e7b1      	b.n	8015f46 <__sflush_r+0x1a>
 8015fe2:	89a3      	ldrh	r3, [r4, #12]
 8015fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fe8:	81a3      	strh	r3, [r4, #12]
 8015fea:	e7ad      	b.n	8015f48 <__sflush_r+0x1c>
 8015fec:	690f      	ldr	r7, [r1, #16]
 8015fee:	2f00      	cmp	r7, #0
 8015ff0:	d0a9      	beq.n	8015f46 <__sflush_r+0x1a>
 8015ff2:	0793      	lsls	r3, r2, #30
 8015ff4:	680e      	ldr	r6, [r1, #0]
 8015ff6:	bf08      	it	eq
 8015ff8:	694b      	ldreq	r3, [r1, #20]
 8015ffa:	600f      	str	r7, [r1, #0]
 8015ffc:	bf18      	it	ne
 8015ffe:	2300      	movne	r3, #0
 8016000:	eba6 0807 	sub.w	r8, r6, r7
 8016004:	608b      	str	r3, [r1, #8]
 8016006:	f1b8 0f00 	cmp.w	r8, #0
 801600a:	dd9c      	ble.n	8015f46 <__sflush_r+0x1a>
 801600c:	6a21      	ldr	r1, [r4, #32]
 801600e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016010:	4643      	mov	r3, r8
 8016012:	463a      	mov	r2, r7
 8016014:	4628      	mov	r0, r5
 8016016:	47b0      	blx	r6
 8016018:	2800      	cmp	r0, #0
 801601a:	dc06      	bgt.n	801602a <__sflush_r+0xfe>
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016022:	81a3      	strh	r3, [r4, #12]
 8016024:	f04f 30ff 	mov.w	r0, #4294967295
 8016028:	e78e      	b.n	8015f48 <__sflush_r+0x1c>
 801602a:	4407      	add	r7, r0
 801602c:	eba8 0800 	sub.w	r8, r8, r0
 8016030:	e7e9      	b.n	8016006 <__sflush_r+0xda>
 8016032:	bf00      	nop
 8016034:	20400001 	.word	0x20400001

08016038 <_fflush_r>:
 8016038:	b538      	push	{r3, r4, r5, lr}
 801603a:	690b      	ldr	r3, [r1, #16]
 801603c:	4605      	mov	r5, r0
 801603e:	460c      	mov	r4, r1
 8016040:	b913      	cbnz	r3, 8016048 <_fflush_r+0x10>
 8016042:	2500      	movs	r5, #0
 8016044:	4628      	mov	r0, r5
 8016046:	bd38      	pop	{r3, r4, r5, pc}
 8016048:	b118      	cbz	r0, 8016052 <_fflush_r+0x1a>
 801604a:	6983      	ldr	r3, [r0, #24]
 801604c:	b90b      	cbnz	r3, 8016052 <_fflush_r+0x1a>
 801604e:	f000 f887 	bl	8016160 <__sinit>
 8016052:	4b14      	ldr	r3, [pc, #80]	; (80160a4 <_fflush_r+0x6c>)
 8016054:	429c      	cmp	r4, r3
 8016056:	d11b      	bne.n	8016090 <_fflush_r+0x58>
 8016058:	686c      	ldr	r4, [r5, #4]
 801605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d0ef      	beq.n	8016042 <_fflush_r+0xa>
 8016062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016064:	07d0      	lsls	r0, r2, #31
 8016066:	d404      	bmi.n	8016072 <_fflush_r+0x3a>
 8016068:	0599      	lsls	r1, r3, #22
 801606a:	d402      	bmi.n	8016072 <_fflush_r+0x3a>
 801606c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801606e:	f000 fc88 	bl	8016982 <__retarget_lock_acquire_recursive>
 8016072:	4628      	mov	r0, r5
 8016074:	4621      	mov	r1, r4
 8016076:	f7ff ff59 	bl	8015f2c <__sflush_r>
 801607a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801607c:	07da      	lsls	r2, r3, #31
 801607e:	4605      	mov	r5, r0
 8016080:	d4e0      	bmi.n	8016044 <_fflush_r+0xc>
 8016082:	89a3      	ldrh	r3, [r4, #12]
 8016084:	059b      	lsls	r3, r3, #22
 8016086:	d4dd      	bmi.n	8016044 <_fflush_r+0xc>
 8016088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801608a:	f000 fc7b 	bl	8016984 <__retarget_lock_release_recursive>
 801608e:	e7d9      	b.n	8016044 <_fflush_r+0xc>
 8016090:	4b05      	ldr	r3, [pc, #20]	; (80160a8 <_fflush_r+0x70>)
 8016092:	429c      	cmp	r4, r3
 8016094:	d101      	bne.n	801609a <_fflush_r+0x62>
 8016096:	68ac      	ldr	r4, [r5, #8]
 8016098:	e7df      	b.n	801605a <_fflush_r+0x22>
 801609a:	4b04      	ldr	r3, [pc, #16]	; (80160ac <_fflush_r+0x74>)
 801609c:	429c      	cmp	r4, r3
 801609e:	bf08      	it	eq
 80160a0:	68ec      	ldreq	r4, [r5, #12]
 80160a2:	e7da      	b.n	801605a <_fflush_r+0x22>
 80160a4:	08019d0c 	.word	0x08019d0c
 80160a8:	08019d2c 	.word	0x08019d2c
 80160ac:	08019cec 	.word	0x08019cec

080160b0 <std>:
 80160b0:	2300      	movs	r3, #0
 80160b2:	b510      	push	{r4, lr}
 80160b4:	4604      	mov	r4, r0
 80160b6:	e9c0 3300 	strd	r3, r3, [r0]
 80160ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80160be:	6083      	str	r3, [r0, #8]
 80160c0:	8181      	strh	r1, [r0, #12]
 80160c2:	6643      	str	r3, [r0, #100]	; 0x64
 80160c4:	81c2      	strh	r2, [r0, #14]
 80160c6:	6183      	str	r3, [r0, #24]
 80160c8:	4619      	mov	r1, r3
 80160ca:	2208      	movs	r2, #8
 80160cc:	305c      	adds	r0, #92	; 0x5c
 80160ce:	f7fd f92b 	bl	8013328 <memset>
 80160d2:	4b05      	ldr	r3, [pc, #20]	; (80160e8 <std+0x38>)
 80160d4:	6263      	str	r3, [r4, #36]	; 0x24
 80160d6:	4b05      	ldr	r3, [pc, #20]	; (80160ec <std+0x3c>)
 80160d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80160da:	4b05      	ldr	r3, [pc, #20]	; (80160f0 <std+0x40>)
 80160dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80160de:	4b05      	ldr	r3, [pc, #20]	; (80160f4 <std+0x44>)
 80160e0:	6224      	str	r4, [r4, #32]
 80160e2:	6323      	str	r3, [r4, #48]	; 0x30
 80160e4:	bd10      	pop	{r4, pc}
 80160e6:	bf00      	nop
 80160e8:	08017c21 	.word	0x08017c21
 80160ec:	08017c43 	.word	0x08017c43
 80160f0:	08017c7b 	.word	0x08017c7b
 80160f4:	08017c9f 	.word	0x08017c9f

080160f8 <_cleanup_r>:
 80160f8:	4901      	ldr	r1, [pc, #4]	; (8016100 <_cleanup_r+0x8>)
 80160fa:	f000 b8af 	b.w	801625c <_fwalk_reent>
 80160fe:	bf00      	nop
 8016100:	08016039 	.word	0x08016039

08016104 <__sfmoreglue>:
 8016104:	b570      	push	{r4, r5, r6, lr}
 8016106:	2268      	movs	r2, #104	; 0x68
 8016108:	1e4d      	subs	r5, r1, #1
 801610a:	4355      	muls	r5, r2
 801610c:	460e      	mov	r6, r1
 801610e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016112:	f001 f9fb 	bl	801750c <_malloc_r>
 8016116:	4604      	mov	r4, r0
 8016118:	b140      	cbz	r0, 801612c <__sfmoreglue+0x28>
 801611a:	2100      	movs	r1, #0
 801611c:	e9c0 1600 	strd	r1, r6, [r0]
 8016120:	300c      	adds	r0, #12
 8016122:	60a0      	str	r0, [r4, #8]
 8016124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016128:	f7fd f8fe 	bl	8013328 <memset>
 801612c:	4620      	mov	r0, r4
 801612e:	bd70      	pop	{r4, r5, r6, pc}

08016130 <__sfp_lock_acquire>:
 8016130:	4801      	ldr	r0, [pc, #4]	; (8016138 <__sfp_lock_acquire+0x8>)
 8016132:	f000 bc26 	b.w	8016982 <__retarget_lock_acquire_recursive>
 8016136:	bf00      	nop
 8016138:	200002bc 	.word	0x200002bc

0801613c <__sfp_lock_release>:
 801613c:	4801      	ldr	r0, [pc, #4]	; (8016144 <__sfp_lock_release+0x8>)
 801613e:	f000 bc21 	b.w	8016984 <__retarget_lock_release_recursive>
 8016142:	bf00      	nop
 8016144:	200002bc 	.word	0x200002bc

08016148 <__sinit_lock_acquire>:
 8016148:	4801      	ldr	r0, [pc, #4]	; (8016150 <__sinit_lock_acquire+0x8>)
 801614a:	f000 bc1a 	b.w	8016982 <__retarget_lock_acquire_recursive>
 801614e:	bf00      	nop
 8016150:	200002bd 	.word	0x200002bd

08016154 <__sinit_lock_release>:
 8016154:	4801      	ldr	r0, [pc, #4]	; (801615c <__sinit_lock_release+0x8>)
 8016156:	f000 bc15 	b.w	8016984 <__retarget_lock_release_recursive>
 801615a:	bf00      	nop
 801615c:	200002bd 	.word	0x200002bd

08016160 <__sinit>:
 8016160:	b510      	push	{r4, lr}
 8016162:	4604      	mov	r4, r0
 8016164:	f7ff fff0 	bl	8016148 <__sinit_lock_acquire>
 8016168:	69a3      	ldr	r3, [r4, #24]
 801616a:	b11b      	cbz	r3, 8016174 <__sinit+0x14>
 801616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016170:	f7ff bff0 	b.w	8016154 <__sinit_lock_release>
 8016174:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016178:	6523      	str	r3, [r4, #80]	; 0x50
 801617a:	4b13      	ldr	r3, [pc, #76]	; (80161c8 <__sinit+0x68>)
 801617c:	4a13      	ldr	r2, [pc, #76]	; (80161cc <__sinit+0x6c>)
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	62a2      	str	r2, [r4, #40]	; 0x28
 8016182:	42a3      	cmp	r3, r4
 8016184:	bf04      	itt	eq
 8016186:	2301      	moveq	r3, #1
 8016188:	61a3      	streq	r3, [r4, #24]
 801618a:	4620      	mov	r0, r4
 801618c:	f000 f820 	bl	80161d0 <__sfp>
 8016190:	6060      	str	r0, [r4, #4]
 8016192:	4620      	mov	r0, r4
 8016194:	f000 f81c 	bl	80161d0 <__sfp>
 8016198:	60a0      	str	r0, [r4, #8]
 801619a:	4620      	mov	r0, r4
 801619c:	f000 f818 	bl	80161d0 <__sfp>
 80161a0:	2200      	movs	r2, #0
 80161a2:	60e0      	str	r0, [r4, #12]
 80161a4:	2104      	movs	r1, #4
 80161a6:	6860      	ldr	r0, [r4, #4]
 80161a8:	f7ff ff82 	bl	80160b0 <std>
 80161ac:	68a0      	ldr	r0, [r4, #8]
 80161ae:	2201      	movs	r2, #1
 80161b0:	2109      	movs	r1, #9
 80161b2:	f7ff ff7d 	bl	80160b0 <std>
 80161b6:	68e0      	ldr	r0, [r4, #12]
 80161b8:	2202      	movs	r2, #2
 80161ba:	2112      	movs	r1, #18
 80161bc:	f7ff ff78 	bl	80160b0 <std>
 80161c0:	2301      	movs	r3, #1
 80161c2:	61a3      	str	r3, [r4, #24]
 80161c4:	e7d2      	b.n	801616c <__sinit+0xc>
 80161c6:	bf00      	nop
 80161c8:	08019ac4 	.word	0x08019ac4
 80161cc:	080160f9 	.word	0x080160f9

080161d0 <__sfp>:
 80161d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d2:	4607      	mov	r7, r0
 80161d4:	f7ff ffac 	bl	8016130 <__sfp_lock_acquire>
 80161d8:	4b1e      	ldr	r3, [pc, #120]	; (8016254 <__sfp+0x84>)
 80161da:	681e      	ldr	r6, [r3, #0]
 80161dc:	69b3      	ldr	r3, [r6, #24]
 80161de:	b913      	cbnz	r3, 80161e6 <__sfp+0x16>
 80161e0:	4630      	mov	r0, r6
 80161e2:	f7ff ffbd 	bl	8016160 <__sinit>
 80161e6:	3648      	adds	r6, #72	; 0x48
 80161e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80161ec:	3b01      	subs	r3, #1
 80161ee:	d503      	bpl.n	80161f8 <__sfp+0x28>
 80161f0:	6833      	ldr	r3, [r6, #0]
 80161f2:	b30b      	cbz	r3, 8016238 <__sfp+0x68>
 80161f4:	6836      	ldr	r6, [r6, #0]
 80161f6:	e7f7      	b.n	80161e8 <__sfp+0x18>
 80161f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80161fc:	b9d5      	cbnz	r5, 8016234 <__sfp+0x64>
 80161fe:	4b16      	ldr	r3, [pc, #88]	; (8016258 <__sfp+0x88>)
 8016200:	60e3      	str	r3, [r4, #12]
 8016202:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016206:	6665      	str	r5, [r4, #100]	; 0x64
 8016208:	f000 fbba 	bl	8016980 <__retarget_lock_init_recursive>
 801620c:	f7ff ff96 	bl	801613c <__sfp_lock_release>
 8016210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016218:	6025      	str	r5, [r4, #0]
 801621a:	61a5      	str	r5, [r4, #24]
 801621c:	2208      	movs	r2, #8
 801621e:	4629      	mov	r1, r5
 8016220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016224:	f7fd f880 	bl	8013328 <memset>
 8016228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801622c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016230:	4620      	mov	r0, r4
 8016232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016234:	3468      	adds	r4, #104	; 0x68
 8016236:	e7d9      	b.n	80161ec <__sfp+0x1c>
 8016238:	2104      	movs	r1, #4
 801623a:	4638      	mov	r0, r7
 801623c:	f7ff ff62 	bl	8016104 <__sfmoreglue>
 8016240:	4604      	mov	r4, r0
 8016242:	6030      	str	r0, [r6, #0]
 8016244:	2800      	cmp	r0, #0
 8016246:	d1d5      	bne.n	80161f4 <__sfp+0x24>
 8016248:	f7ff ff78 	bl	801613c <__sfp_lock_release>
 801624c:	230c      	movs	r3, #12
 801624e:	603b      	str	r3, [r7, #0]
 8016250:	e7ee      	b.n	8016230 <__sfp+0x60>
 8016252:	bf00      	nop
 8016254:	08019ac4 	.word	0x08019ac4
 8016258:	ffff0001 	.word	0xffff0001

0801625c <_fwalk_reent>:
 801625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016260:	4606      	mov	r6, r0
 8016262:	4688      	mov	r8, r1
 8016264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016268:	2700      	movs	r7, #0
 801626a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801626e:	f1b9 0901 	subs.w	r9, r9, #1
 8016272:	d505      	bpl.n	8016280 <_fwalk_reent+0x24>
 8016274:	6824      	ldr	r4, [r4, #0]
 8016276:	2c00      	cmp	r4, #0
 8016278:	d1f7      	bne.n	801626a <_fwalk_reent+0xe>
 801627a:	4638      	mov	r0, r7
 801627c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016280:	89ab      	ldrh	r3, [r5, #12]
 8016282:	2b01      	cmp	r3, #1
 8016284:	d907      	bls.n	8016296 <_fwalk_reent+0x3a>
 8016286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801628a:	3301      	adds	r3, #1
 801628c:	d003      	beq.n	8016296 <_fwalk_reent+0x3a>
 801628e:	4629      	mov	r1, r5
 8016290:	4630      	mov	r0, r6
 8016292:	47c0      	blx	r8
 8016294:	4307      	orrs	r7, r0
 8016296:	3568      	adds	r5, #104	; 0x68
 8016298:	e7e9      	b.n	801626e <_fwalk_reent+0x12>

0801629a <rshift>:
 801629a:	6903      	ldr	r3, [r0, #16]
 801629c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80162a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162a4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80162a8:	f100 0414 	add.w	r4, r0, #20
 80162ac:	dd45      	ble.n	801633a <rshift+0xa0>
 80162ae:	f011 011f 	ands.w	r1, r1, #31
 80162b2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80162b6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80162ba:	d10c      	bne.n	80162d6 <rshift+0x3c>
 80162bc:	f100 0710 	add.w	r7, r0, #16
 80162c0:	4629      	mov	r1, r5
 80162c2:	42b1      	cmp	r1, r6
 80162c4:	d334      	bcc.n	8016330 <rshift+0x96>
 80162c6:	1a9b      	subs	r3, r3, r2
 80162c8:	009b      	lsls	r3, r3, #2
 80162ca:	1eea      	subs	r2, r5, #3
 80162cc:	4296      	cmp	r6, r2
 80162ce:	bf38      	it	cc
 80162d0:	2300      	movcc	r3, #0
 80162d2:	4423      	add	r3, r4
 80162d4:	e015      	b.n	8016302 <rshift+0x68>
 80162d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80162da:	f1c1 0820 	rsb	r8, r1, #32
 80162de:	40cf      	lsrs	r7, r1
 80162e0:	f105 0e04 	add.w	lr, r5, #4
 80162e4:	46a1      	mov	r9, r4
 80162e6:	4576      	cmp	r6, lr
 80162e8:	46f4      	mov	ip, lr
 80162ea:	d815      	bhi.n	8016318 <rshift+0x7e>
 80162ec:	1a9a      	subs	r2, r3, r2
 80162ee:	0092      	lsls	r2, r2, #2
 80162f0:	3a04      	subs	r2, #4
 80162f2:	3501      	adds	r5, #1
 80162f4:	42ae      	cmp	r6, r5
 80162f6:	bf38      	it	cc
 80162f8:	2200      	movcc	r2, #0
 80162fa:	18a3      	adds	r3, r4, r2
 80162fc:	50a7      	str	r7, [r4, r2]
 80162fe:	b107      	cbz	r7, 8016302 <rshift+0x68>
 8016300:	3304      	adds	r3, #4
 8016302:	1b1a      	subs	r2, r3, r4
 8016304:	42a3      	cmp	r3, r4
 8016306:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801630a:	bf08      	it	eq
 801630c:	2300      	moveq	r3, #0
 801630e:	6102      	str	r2, [r0, #16]
 8016310:	bf08      	it	eq
 8016312:	6143      	streq	r3, [r0, #20]
 8016314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016318:	f8dc c000 	ldr.w	ip, [ip]
 801631c:	fa0c fc08 	lsl.w	ip, ip, r8
 8016320:	ea4c 0707 	orr.w	r7, ip, r7
 8016324:	f849 7b04 	str.w	r7, [r9], #4
 8016328:	f85e 7b04 	ldr.w	r7, [lr], #4
 801632c:	40cf      	lsrs	r7, r1
 801632e:	e7da      	b.n	80162e6 <rshift+0x4c>
 8016330:	f851 cb04 	ldr.w	ip, [r1], #4
 8016334:	f847 cf04 	str.w	ip, [r7, #4]!
 8016338:	e7c3      	b.n	80162c2 <rshift+0x28>
 801633a:	4623      	mov	r3, r4
 801633c:	e7e1      	b.n	8016302 <rshift+0x68>

0801633e <__hexdig_fun>:
 801633e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016342:	2b09      	cmp	r3, #9
 8016344:	d802      	bhi.n	801634c <__hexdig_fun+0xe>
 8016346:	3820      	subs	r0, #32
 8016348:	b2c0      	uxtb	r0, r0
 801634a:	4770      	bx	lr
 801634c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016350:	2b05      	cmp	r3, #5
 8016352:	d801      	bhi.n	8016358 <__hexdig_fun+0x1a>
 8016354:	3847      	subs	r0, #71	; 0x47
 8016356:	e7f7      	b.n	8016348 <__hexdig_fun+0xa>
 8016358:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801635c:	2b05      	cmp	r3, #5
 801635e:	d801      	bhi.n	8016364 <__hexdig_fun+0x26>
 8016360:	3827      	subs	r0, #39	; 0x27
 8016362:	e7f1      	b.n	8016348 <__hexdig_fun+0xa>
 8016364:	2000      	movs	r0, #0
 8016366:	4770      	bx	lr

08016368 <__gethex>:
 8016368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801636c:	ed2d 8b02 	vpush	{d8}
 8016370:	b089      	sub	sp, #36	; 0x24
 8016372:	ee08 0a10 	vmov	s16, r0
 8016376:	9304      	str	r3, [sp, #16]
 8016378:	4bb4      	ldr	r3, [pc, #720]	; (801664c <__gethex+0x2e4>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	9301      	str	r3, [sp, #4]
 801637e:	4618      	mov	r0, r3
 8016380:	468b      	mov	fp, r1
 8016382:	4690      	mov	r8, r2
 8016384:	f7e9 ff4c 	bl	8000220 <strlen>
 8016388:	9b01      	ldr	r3, [sp, #4]
 801638a:	f8db 2000 	ldr.w	r2, [fp]
 801638e:	4403      	add	r3, r0
 8016390:	4682      	mov	sl, r0
 8016392:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016396:	9305      	str	r3, [sp, #20]
 8016398:	1c93      	adds	r3, r2, #2
 801639a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801639e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80163a2:	32fe      	adds	r2, #254	; 0xfe
 80163a4:	18d1      	adds	r1, r2, r3
 80163a6:	461f      	mov	r7, r3
 80163a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80163ac:	9100      	str	r1, [sp, #0]
 80163ae:	2830      	cmp	r0, #48	; 0x30
 80163b0:	d0f8      	beq.n	80163a4 <__gethex+0x3c>
 80163b2:	f7ff ffc4 	bl	801633e <__hexdig_fun>
 80163b6:	4604      	mov	r4, r0
 80163b8:	2800      	cmp	r0, #0
 80163ba:	d13a      	bne.n	8016432 <__gethex+0xca>
 80163bc:	9901      	ldr	r1, [sp, #4]
 80163be:	4652      	mov	r2, sl
 80163c0:	4638      	mov	r0, r7
 80163c2:	f001 fc70 	bl	8017ca6 <strncmp>
 80163c6:	4605      	mov	r5, r0
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d168      	bne.n	801649e <__gethex+0x136>
 80163cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80163d0:	eb07 060a 	add.w	r6, r7, sl
 80163d4:	f7ff ffb3 	bl	801633e <__hexdig_fun>
 80163d8:	2800      	cmp	r0, #0
 80163da:	d062      	beq.n	80164a2 <__gethex+0x13a>
 80163dc:	4633      	mov	r3, r6
 80163de:	7818      	ldrb	r0, [r3, #0]
 80163e0:	2830      	cmp	r0, #48	; 0x30
 80163e2:	461f      	mov	r7, r3
 80163e4:	f103 0301 	add.w	r3, r3, #1
 80163e8:	d0f9      	beq.n	80163de <__gethex+0x76>
 80163ea:	f7ff ffa8 	bl	801633e <__hexdig_fun>
 80163ee:	2301      	movs	r3, #1
 80163f0:	fab0 f480 	clz	r4, r0
 80163f4:	0964      	lsrs	r4, r4, #5
 80163f6:	4635      	mov	r5, r6
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	463a      	mov	r2, r7
 80163fc:	4616      	mov	r6, r2
 80163fe:	3201      	adds	r2, #1
 8016400:	7830      	ldrb	r0, [r6, #0]
 8016402:	f7ff ff9c 	bl	801633e <__hexdig_fun>
 8016406:	2800      	cmp	r0, #0
 8016408:	d1f8      	bne.n	80163fc <__gethex+0x94>
 801640a:	9901      	ldr	r1, [sp, #4]
 801640c:	4652      	mov	r2, sl
 801640e:	4630      	mov	r0, r6
 8016410:	f001 fc49 	bl	8017ca6 <strncmp>
 8016414:	b980      	cbnz	r0, 8016438 <__gethex+0xd0>
 8016416:	b94d      	cbnz	r5, 801642c <__gethex+0xc4>
 8016418:	eb06 050a 	add.w	r5, r6, sl
 801641c:	462a      	mov	r2, r5
 801641e:	4616      	mov	r6, r2
 8016420:	3201      	adds	r2, #1
 8016422:	7830      	ldrb	r0, [r6, #0]
 8016424:	f7ff ff8b 	bl	801633e <__hexdig_fun>
 8016428:	2800      	cmp	r0, #0
 801642a:	d1f8      	bne.n	801641e <__gethex+0xb6>
 801642c:	1bad      	subs	r5, r5, r6
 801642e:	00ad      	lsls	r5, r5, #2
 8016430:	e004      	b.n	801643c <__gethex+0xd4>
 8016432:	2400      	movs	r4, #0
 8016434:	4625      	mov	r5, r4
 8016436:	e7e0      	b.n	80163fa <__gethex+0x92>
 8016438:	2d00      	cmp	r5, #0
 801643a:	d1f7      	bne.n	801642c <__gethex+0xc4>
 801643c:	7833      	ldrb	r3, [r6, #0]
 801643e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016442:	2b50      	cmp	r3, #80	; 0x50
 8016444:	d13b      	bne.n	80164be <__gethex+0x156>
 8016446:	7873      	ldrb	r3, [r6, #1]
 8016448:	2b2b      	cmp	r3, #43	; 0x2b
 801644a:	d02c      	beq.n	80164a6 <__gethex+0x13e>
 801644c:	2b2d      	cmp	r3, #45	; 0x2d
 801644e:	d02e      	beq.n	80164ae <__gethex+0x146>
 8016450:	1c71      	adds	r1, r6, #1
 8016452:	f04f 0900 	mov.w	r9, #0
 8016456:	7808      	ldrb	r0, [r1, #0]
 8016458:	f7ff ff71 	bl	801633e <__hexdig_fun>
 801645c:	1e43      	subs	r3, r0, #1
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b18      	cmp	r3, #24
 8016462:	d82c      	bhi.n	80164be <__gethex+0x156>
 8016464:	f1a0 0210 	sub.w	r2, r0, #16
 8016468:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801646c:	f7ff ff67 	bl	801633e <__hexdig_fun>
 8016470:	1e43      	subs	r3, r0, #1
 8016472:	b2db      	uxtb	r3, r3
 8016474:	2b18      	cmp	r3, #24
 8016476:	d91d      	bls.n	80164b4 <__gethex+0x14c>
 8016478:	f1b9 0f00 	cmp.w	r9, #0
 801647c:	d000      	beq.n	8016480 <__gethex+0x118>
 801647e:	4252      	negs	r2, r2
 8016480:	4415      	add	r5, r2
 8016482:	f8cb 1000 	str.w	r1, [fp]
 8016486:	b1e4      	cbz	r4, 80164c2 <__gethex+0x15a>
 8016488:	9b00      	ldr	r3, [sp, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	bf14      	ite	ne
 801648e:	2700      	movne	r7, #0
 8016490:	2706      	moveq	r7, #6
 8016492:	4638      	mov	r0, r7
 8016494:	b009      	add	sp, #36	; 0x24
 8016496:	ecbd 8b02 	vpop	{d8}
 801649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801649e:	463e      	mov	r6, r7
 80164a0:	4625      	mov	r5, r4
 80164a2:	2401      	movs	r4, #1
 80164a4:	e7ca      	b.n	801643c <__gethex+0xd4>
 80164a6:	f04f 0900 	mov.w	r9, #0
 80164aa:	1cb1      	adds	r1, r6, #2
 80164ac:	e7d3      	b.n	8016456 <__gethex+0xee>
 80164ae:	f04f 0901 	mov.w	r9, #1
 80164b2:	e7fa      	b.n	80164aa <__gethex+0x142>
 80164b4:	230a      	movs	r3, #10
 80164b6:	fb03 0202 	mla	r2, r3, r2, r0
 80164ba:	3a10      	subs	r2, #16
 80164bc:	e7d4      	b.n	8016468 <__gethex+0x100>
 80164be:	4631      	mov	r1, r6
 80164c0:	e7df      	b.n	8016482 <__gethex+0x11a>
 80164c2:	1bf3      	subs	r3, r6, r7
 80164c4:	3b01      	subs	r3, #1
 80164c6:	4621      	mov	r1, r4
 80164c8:	2b07      	cmp	r3, #7
 80164ca:	dc0b      	bgt.n	80164e4 <__gethex+0x17c>
 80164cc:	ee18 0a10 	vmov	r0, s16
 80164d0:	f000 fad8 	bl	8016a84 <_Balloc>
 80164d4:	4604      	mov	r4, r0
 80164d6:	b940      	cbnz	r0, 80164ea <__gethex+0x182>
 80164d8:	4b5d      	ldr	r3, [pc, #372]	; (8016650 <__gethex+0x2e8>)
 80164da:	4602      	mov	r2, r0
 80164dc:	21de      	movs	r1, #222	; 0xde
 80164de:	485d      	ldr	r0, [pc, #372]	; (8016654 <__gethex+0x2ec>)
 80164e0:	f001 fc14 	bl	8017d0c <__assert_func>
 80164e4:	3101      	adds	r1, #1
 80164e6:	105b      	asrs	r3, r3, #1
 80164e8:	e7ee      	b.n	80164c8 <__gethex+0x160>
 80164ea:	f100 0914 	add.w	r9, r0, #20
 80164ee:	f04f 0b00 	mov.w	fp, #0
 80164f2:	f1ca 0301 	rsb	r3, sl, #1
 80164f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80164fa:	f8cd b000 	str.w	fp, [sp]
 80164fe:	9306      	str	r3, [sp, #24]
 8016500:	42b7      	cmp	r7, r6
 8016502:	d340      	bcc.n	8016586 <__gethex+0x21e>
 8016504:	9802      	ldr	r0, [sp, #8]
 8016506:	9b00      	ldr	r3, [sp, #0]
 8016508:	f840 3b04 	str.w	r3, [r0], #4
 801650c:	eba0 0009 	sub.w	r0, r0, r9
 8016510:	1080      	asrs	r0, r0, #2
 8016512:	0146      	lsls	r6, r0, #5
 8016514:	6120      	str	r0, [r4, #16]
 8016516:	4618      	mov	r0, r3
 8016518:	f000 fba6 	bl	8016c68 <__hi0bits>
 801651c:	1a30      	subs	r0, r6, r0
 801651e:	f8d8 6000 	ldr.w	r6, [r8]
 8016522:	42b0      	cmp	r0, r6
 8016524:	dd63      	ble.n	80165ee <__gethex+0x286>
 8016526:	1b87      	subs	r7, r0, r6
 8016528:	4639      	mov	r1, r7
 801652a:	4620      	mov	r0, r4
 801652c:	f000 ff4a 	bl	80173c4 <__any_on>
 8016530:	4682      	mov	sl, r0
 8016532:	b1a8      	cbz	r0, 8016560 <__gethex+0x1f8>
 8016534:	1e7b      	subs	r3, r7, #1
 8016536:	1159      	asrs	r1, r3, #5
 8016538:	f003 021f 	and.w	r2, r3, #31
 801653c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016540:	f04f 0a01 	mov.w	sl, #1
 8016544:	fa0a f202 	lsl.w	r2, sl, r2
 8016548:	420a      	tst	r2, r1
 801654a:	d009      	beq.n	8016560 <__gethex+0x1f8>
 801654c:	4553      	cmp	r3, sl
 801654e:	dd05      	ble.n	801655c <__gethex+0x1f4>
 8016550:	1eb9      	subs	r1, r7, #2
 8016552:	4620      	mov	r0, r4
 8016554:	f000 ff36 	bl	80173c4 <__any_on>
 8016558:	2800      	cmp	r0, #0
 801655a:	d145      	bne.n	80165e8 <__gethex+0x280>
 801655c:	f04f 0a02 	mov.w	sl, #2
 8016560:	4639      	mov	r1, r7
 8016562:	4620      	mov	r0, r4
 8016564:	f7ff fe99 	bl	801629a <rshift>
 8016568:	443d      	add	r5, r7
 801656a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801656e:	42ab      	cmp	r3, r5
 8016570:	da4c      	bge.n	801660c <__gethex+0x2a4>
 8016572:	ee18 0a10 	vmov	r0, s16
 8016576:	4621      	mov	r1, r4
 8016578:	f000 fac4 	bl	8016b04 <_Bfree>
 801657c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801657e:	2300      	movs	r3, #0
 8016580:	6013      	str	r3, [r2, #0]
 8016582:	27a3      	movs	r7, #163	; 0xa3
 8016584:	e785      	b.n	8016492 <__gethex+0x12a>
 8016586:	1e73      	subs	r3, r6, #1
 8016588:	9a05      	ldr	r2, [sp, #20]
 801658a:	9303      	str	r3, [sp, #12]
 801658c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016590:	4293      	cmp	r3, r2
 8016592:	d019      	beq.n	80165c8 <__gethex+0x260>
 8016594:	f1bb 0f20 	cmp.w	fp, #32
 8016598:	d107      	bne.n	80165aa <__gethex+0x242>
 801659a:	9b02      	ldr	r3, [sp, #8]
 801659c:	9a00      	ldr	r2, [sp, #0]
 801659e:	f843 2b04 	str.w	r2, [r3], #4
 80165a2:	9302      	str	r3, [sp, #8]
 80165a4:	2300      	movs	r3, #0
 80165a6:	9300      	str	r3, [sp, #0]
 80165a8:	469b      	mov	fp, r3
 80165aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80165ae:	f7ff fec6 	bl	801633e <__hexdig_fun>
 80165b2:	9b00      	ldr	r3, [sp, #0]
 80165b4:	f000 000f 	and.w	r0, r0, #15
 80165b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80165bc:	4303      	orrs	r3, r0
 80165be:	9300      	str	r3, [sp, #0]
 80165c0:	f10b 0b04 	add.w	fp, fp, #4
 80165c4:	9b03      	ldr	r3, [sp, #12]
 80165c6:	e00d      	b.n	80165e4 <__gethex+0x27c>
 80165c8:	9b03      	ldr	r3, [sp, #12]
 80165ca:	9a06      	ldr	r2, [sp, #24]
 80165cc:	4413      	add	r3, r2
 80165ce:	42bb      	cmp	r3, r7
 80165d0:	d3e0      	bcc.n	8016594 <__gethex+0x22c>
 80165d2:	4618      	mov	r0, r3
 80165d4:	9901      	ldr	r1, [sp, #4]
 80165d6:	9307      	str	r3, [sp, #28]
 80165d8:	4652      	mov	r2, sl
 80165da:	f001 fb64 	bl	8017ca6 <strncmp>
 80165de:	9b07      	ldr	r3, [sp, #28]
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d1d7      	bne.n	8016594 <__gethex+0x22c>
 80165e4:	461e      	mov	r6, r3
 80165e6:	e78b      	b.n	8016500 <__gethex+0x198>
 80165e8:	f04f 0a03 	mov.w	sl, #3
 80165ec:	e7b8      	b.n	8016560 <__gethex+0x1f8>
 80165ee:	da0a      	bge.n	8016606 <__gethex+0x29e>
 80165f0:	1a37      	subs	r7, r6, r0
 80165f2:	4621      	mov	r1, r4
 80165f4:	ee18 0a10 	vmov	r0, s16
 80165f8:	463a      	mov	r2, r7
 80165fa:	f000 fc9f 	bl	8016f3c <__lshift>
 80165fe:	1bed      	subs	r5, r5, r7
 8016600:	4604      	mov	r4, r0
 8016602:	f100 0914 	add.w	r9, r0, #20
 8016606:	f04f 0a00 	mov.w	sl, #0
 801660a:	e7ae      	b.n	801656a <__gethex+0x202>
 801660c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016610:	42a8      	cmp	r0, r5
 8016612:	dd72      	ble.n	80166fa <__gethex+0x392>
 8016614:	1b45      	subs	r5, r0, r5
 8016616:	42ae      	cmp	r6, r5
 8016618:	dc36      	bgt.n	8016688 <__gethex+0x320>
 801661a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801661e:	2b02      	cmp	r3, #2
 8016620:	d02a      	beq.n	8016678 <__gethex+0x310>
 8016622:	2b03      	cmp	r3, #3
 8016624:	d02c      	beq.n	8016680 <__gethex+0x318>
 8016626:	2b01      	cmp	r3, #1
 8016628:	d11c      	bne.n	8016664 <__gethex+0x2fc>
 801662a:	42ae      	cmp	r6, r5
 801662c:	d11a      	bne.n	8016664 <__gethex+0x2fc>
 801662e:	2e01      	cmp	r6, #1
 8016630:	d112      	bne.n	8016658 <__gethex+0x2f0>
 8016632:	9a04      	ldr	r2, [sp, #16]
 8016634:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016638:	6013      	str	r3, [r2, #0]
 801663a:	2301      	movs	r3, #1
 801663c:	6123      	str	r3, [r4, #16]
 801663e:	f8c9 3000 	str.w	r3, [r9]
 8016642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016644:	2762      	movs	r7, #98	; 0x62
 8016646:	601c      	str	r4, [r3, #0]
 8016648:	e723      	b.n	8016492 <__gethex+0x12a>
 801664a:	bf00      	nop
 801664c:	08019db4 	.word	0x08019db4
 8016650:	08019cd8 	.word	0x08019cd8
 8016654:	08019d4c 	.word	0x08019d4c
 8016658:	1e71      	subs	r1, r6, #1
 801665a:	4620      	mov	r0, r4
 801665c:	f000 feb2 	bl	80173c4 <__any_on>
 8016660:	2800      	cmp	r0, #0
 8016662:	d1e6      	bne.n	8016632 <__gethex+0x2ca>
 8016664:	ee18 0a10 	vmov	r0, s16
 8016668:	4621      	mov	r1, r4
 801666a:	f000 fa4b 	bl	8016b04 <_Bfree>
 801666e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016670:	2300      	movs	r3, #0
 8016672:	6013      	str	r3, [r2, #0]
 8016674:	2750      	movs	r7, #80	; 0x50
 8016676:	e70c      	b.n	8016492 <__gethex+0x12a>
 8016678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801667a:	2b00      	cmp	r3, #0
 801667c:	d1f2      	bne.n	8016664 <__gethex+0x2fc>
 801667e:	e7d8      	b.n	8016632 <__gethex+0x2ca>
 8016680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016682:	2b00      	cmp	r3, #0
 8016684:	d1d5      	bne.n	8016632 <__gethex+0x2ca>
 8016686:	e7ed      	b.n	8016664 <__gethex+0x2fc>
 8016688:	1e6f      	subs	r7, r5, #1
 801668a:	f1ba 0f00 	cmp.w	sl, #0
 801668e:	d131      	bne.n	80166f4 <__gethex+0x38c>
 8016690:	b127      	cbz	r7, 801669c <__gethex+0x334>
 8016692:	4639      	mov	r1, r7
 8016694:	4620      	mov	r0, r4
 8016696:	f000 fe95 	bl	80173c4 <__any_on>
 801669a:	4682      	mov	sl, r0
 801669c:	117b      	asrs	r3, r7, #5
 801669e:	2101      	movs	r1, #1
 80166a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80166a4:	f007 071f 	and.w	r7, r7, #31
 80166a8:	fa01 f707 	lsl.w	r7, r1, r7
 80166ac:	421f      	tst	r7, r3
 80166ae:	4629      	mov	r1, r5
 80166b0:	4620      	mov	r0, r4
 80166b2:	bf18      	it	ne
 80166b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80166b8:	1b76      	subs	r6, r6, r5
 80166ba:	f7ff fdee 	bl	801629a <rshift>
 80166be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80166c2:	2702      	movs	r7, #2
 80166c4:	f1ba 0f00 	cmp.w	sl, #0
 80166c8:	d048      	beq.n	801675c <__gethex+0x3f4>
 80166ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166ce:	2b02      	cmp	r3, #2
 80166d0:	d015      	beq.n	80166fe <__gethex+0x396>
 80166d2:	2b03      	cmp	r3, #3
 80166d4:	d017      	beq.n	8016706 <__gethex+0x39e>
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d109      	bne.n	80166ee <__gethex+0x386>
 80166da:	f01a 0f02 	tst.w	sl, #2
 80166de:	d006      	beq.n	80166ee <__gethex+0x386>
 80166e0:	f8d9 0000 	ldr.w	r0, [r9]
 80166e4:	ea4a 0a00 	orr.w	sl, sl, r0
 80166e8:	f01a 0f01 	tst.w	sl, #1
 80166ec:	d10e      	bne.n	801670c <__gethex+0x3a4>
 80166ee:	f047 0710 	orr.w	r7, r7, #16
 80166f2:	e033      	b.n	801675c <__gethex+0x3f4>
 80166f4:	f04f 0a01 	mov.w	sl, #1
 80166f8:	e7d0      	b.n	801669c <__gethex+0x334>
 80166fa:	2701      	movs	r7, #1
 80166fc:	e7e2      	b.n	80166c4 <__gethex+0x35c>
 80166fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016700:	f1c3 0301 	rsb	r3, r3, #1
 8016704:	9315      	str	r3, [sp, #84]	; 0x54
 8016706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016708:	2b00      	cmp	r3, #0
 801670a:	d0f0      	beq.n	80166ee <__gethex+0x386>
 801670c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016710:	f104 0314 	add.w	r3, r4, #20
 8016714:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016718:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801671c:	f04f 0c00 	mov.w	ip, #0
 8016720:	4618      	mov	r0, r3
 8016722:	f853 2b04 	ldr.w	r2, [r3], #4
 8016726:	f1b2 3fff 	cmp.w	r2, #4294967295
 801672a:	d01c      	beq.n	8016766 <__gethex+0x3fe>
 801672c:	3201      	adds	r2, #1
 801672e:	6002      	str	r2, [r0, #0]
 8016730:	2f02      	cmp	r7, #2
 8016732:	f104 0314 	add.w	r3, r4, #20
 8016736:	d13f      	bne.n	80167b8 <__gethex+0x450>
 8016738:	f8d8 2000 	ldr.w	r2, [r8]
 801673c:	3a01      	subs	r2, #1
 801673e:	42b2      	cmp	r2, r6
 8016740:	d10a      	bne.n	8016758 <__gethex+0x3f0>
 8016742:	1171      	asrs	r1, r6, #5
 8016744:	2201      	movs	r2, #1
 8016746:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801674a:	f006 061f 	and.w	r6, r6, #31
 801674e:	fa02 f606 	lsl.w	r6, r2, r6
 8016752:	421e      	tst	r6, r3
 8016754:	bf18      	it	ne
 8016756:	4617      	movne	r7, r2
 8016758:	f047 0720 	orr.w	r7, r7, #32
 801675c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801675e:	601c      	str	r4, [r3, #0]
 8016760:	9b04      	ldr	r3, [sp, #16]
 8016762:	601d      	str	r5, [r3, #0]
 8016764:	e695      	b.n	8016492 <__gethex+0x12a>
 8016766:	4299      	cmp	r1, r3
 8016768:	f843 cc04 	str.w	ip, [r3, #-4]
 801676c:	d8d8      	bhi.n	8016720 <__gethex+0x3b8>
 801676e:	68a3      	ldr	r3, [r4, #8]
 8016770:	459b      	cmp	fp, r3
 8016772:	db19      	blt.n	80167a8 <__gethex+0x440>
 8016774:	6861      	ldr	r1, [r4, #4]
 8016776:	ee18 0a10 	vmov	r0, s16
 801677a:	3101      	adds	r1, #1
 801677c:	f000 f982 	bl	8016a84 <_Balloc>
 8016780:	4681      	mov	r9, r0
 8016782:	b918      	cbnz	r0, 801678c <__gethex+0x424>
 8016784:	4b1a      	ldr	r3, [pc, #104]	; (80167f0 <__gethex+0x488>)
 8016786:	4602      	mov	r2, r0
 8016788:	2184      	movs	r1, #132	; 0x84
 801678a:	e6a8      	b.n	80164de <__gethex+0x176>
 801678c:	6922      	ldr	r2, [r4, #16]
 801678e:	3202      	adds	r2, #2
 8016790:	f104 010c 	add.w	r1, r4, #12
 8016794:	0092      	lsls	r2, r2, #2
 8016796:	300c      	adds	r0, #12
 8016798:	f7fc fdb8 	bl	801330c <memcpy>
 801679c:	4621      	mov	r1, r4
 801679e:	ee18 0a10 	vmov	r0, s16
 80167a2:	f000 f9af 	bl	8016b04 <_Bfree>
 80167a6:	464c      	mov	r4, r9
 80167a8:	6923      	ldr	r3, [r4, #16]
 80167aa:	1c5a      	adds	r2, r3, #1
 80167ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80167b0:	6122      	str	r2, [r4, #16]
 80167b2:	2201      	movs	r2, #1
 80167b4:	615a      	str	r2, [r3, #20]
 80167b6:	e7bb      	b.n	8016730 <__gethex+0x3c8>
 80167b8:	6922      	ldr	r2, [r4, #16]
 80167ba:	455a      	cmp	r2, fp
 80167bc:	dd0b      	ble.n	80167d6 <__gethex+0x46e>
 80167be:	2101      	movs	r1, #1
 80167c0:	4620      	mov	r0, r4
 80167c2:	f7ff fd6a 	bl	801629a <rshift>
 80167c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80167ca:	3501      	adds	r5, #1
 80167cc:	42ab      	cmp	r3, r5
 80167ce:	f6ff aed0 	blt.w	8016572 <__gethex+0x20a>
 80167d2:	2701      	movs	r7, #1
 80167d4:	e7c0      	b.n	8016758 <__gethex+0x3f0>
 80167d6:	f016 061f 	ands.w	r6, r6, #31
 80167da:	d0fa      	beq.n	80167d2 <__gethex+0x46a>
 80167dc:	4453      	add	r3, sl
 80167de:	f1c6 0620 	rsb	r6, r6, #32
 80167e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80167e6:	f000 fa3f 	bl	8016c68 <__hi0bits>
 80167ea:	42b0      	cmp	r0, r6
 80167ec:	dbe7      	blt.n	80167be <__gethex+0x456>
 80167ee:	e7f0      	b.n	80167d2 <__gethex+0x46a>
 80167f0:	08019cd8 	.word	0x08019cd8

080167f4 <L_shift>:
 80167f4:	f1c2 0208 	rsb	r2, r2, #8
 80167f8:	0092      	lsls	r2, r2, #2
 80167fa:	b570      	push	{r4, r5, r6, lr}
 80167fc:	f1c2 0620 	rsb	r6, r2, #32
 8016800:	6843      	ldr	r3, [r0, #4]
 8016802:	6804      	ldr	r4, [r0, #0]
 8016804:	fa03 f506 	lsl.w	r5, r3, r6
 8016808:	432c      	orrs	r4, r5
 801680a:	40d3      	lsrs	r3, r2
 801680c:	6004      	str	r4, [r0, #0]
 801680e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016812:	4288      	cmp	r0, r1
 8016814:	d3f4      	bcc.n	8016800 <L_shift+0xc>
 8016816:	bd70      	pop	{r4, r5, r6, pc}

08016818 <__match>:
 8016818:	b530      	push	{r4, r5, lr}
 801681a:	6803      	ldr	r3, [r0, #0]
 801681c:	3301      	adds	r3, #1
 801681e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016822:	b914      	cbnz	r4, 801682a <__match+0x12>
 8016824:	6003      	str	r3, [r0, #0]
 8016826:	2001      	movs	r0, #1
 8016828:	bd30      	pop	{r4, r5, pc}
 801682a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801682e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016832:	2d19      	cmp	r5, #25
 8016834:	bf98      	it	ls
 8016836:	3220      	addls	r2, #32
 8016838:	42a2      	cmp	r2, r4
 801683a:	d0f0      	beq.n	801681e <__match+0x6>
 801683c:	2000      	movs	r0, #0
 801683e:	e7f3      	b.n	8016828 <__match+0x10>

08016840 <__hexnan>:
 8016840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016844:	680b      	ldr	r3, [r1, #0]
 8016846:	115e      	asrs	r6, r3, #5
 8016848:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801684c:	f013 031f 	ands.w	r3, r3, #31
 8016850:	b087      	sub	sp, #28
 8016852:	bf18      	it	ne
 8016854:	3604      	addne	r6, #4
 8016856:	2500      	movs	r5, #0
 8016858:	1f37      	subs	r7, r6, #4
 801685a:	4690      	mov	r8, r2
 801685c:	6802      	ldr	r2, [r0, #0]
 801685e:	9301      	str	r3, [sp, #4]
 8016860:	4682      	mov	sl, r0
 8016862:	f846 5c04 	str.w	r5, [r6, #-4]
 8016866:	46b9      	mov	r9, r7
 8016868:	463c      	mov	r4, r7
 801686a:	9502      	str	r5, [sp, #8]
 801686c:	46ab      	mov	fp, r5
 801686e:	7851      	ldrb	r1, [r2, #1]
 8016870:	1c53      	adds	r3, r2, #1
 8016872:	9303      	str	r3, [sp, #12]
 8016874:	b341      	cbz	r1, 80168c8 <__hexnan+0x88>
 8016876:	4608      	mov	r0, r1
 8016878:	9205      	str	r2, [sp, #20]
 801687a:	9104      	str	r1, [sp, #16]
 801687c:	f7ff fd5f 	bl	801633e <__hexdig_fun>
 8016880:	2800      	cmp	r0, #0
 8016882:	d14f      	bne.n	8016924 <__hexnan+0xe4>
 8016884:	9904      	ldr	r1, [sp, #16]
 8016886:	9a05      	ldr	r2, [sp, #20]
 8016888:	2920      	cmp	r1, #32
 801688a:	d818      	bhi.n	80168be <__hexnan+0x7e>
 801688c:	9b02      	ldr	r3, [sp, #8]
 801688e:	459b      	cmp	fp, r3
 8016890:	dd13      	ble.n	80168ba <__hexnan+0x7a>
 8016892:	454c      	cmp	r4, r9
 8016894:	d206      	bcs.n	80168a4 <__hexnan+0x64>
 8016896:	2d07      	cmp	r5, #7
 8016898:	dc04      	bgt.n	80168a4 <__hexnan+0x64>
 801689a:	462a      	mov	r2, r5
 801689c:	4649      	mov	r1, r9
 801689e:	4620      	mov	r0, r4
 80168a0:	f7ff ffa8 	bl	80167f4 <L_shift>
 80168a4:	4544      	cmp	r4, r8
 80168a6:	d950      	bls.n	801694a <__hexnan+0x10a>
 80168a8:	2300      	movs	r3, #0
 80168aa:	f1a4 0904 	sub.w	r9, r4, #4
 80168ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80168b2:	f8cd b008 	str.w	fp, [sp, #8]
 80168b6:	464c      	mov	r4, r9
 80168b8:	461d      	mov	r5, r3
 80168ba:	9a03      	ldr	r2, [sp, #12]
 80168bc:	e7d7      	b.n	801686e <__hexnan+0x2e>
 80168be:	2929      	cmp	r1, #41	; 0x29
 80168c0:	d156      	bne.n	8016970 <__hexnan+0x130>
 80168c2:	3202      	adds	r2, #2
 80168c4:	f8ca 2000 	str.w	r2, [sl]
 80168c8:	f1bb 0f00 	cmp.w	fp, #0
 80168cc:	d050      	beq.n	8016970 <__hexnan+0x130>
 80168ce:	454c      	cmp	r4, r9
 80168d0:	d206      	bcs.n	80168e0 <__hexnan+0xa0>
 80168d2:	2d07      	cmp	r5, #7
 80168d4:	dc04      	bgt.n	80168e0 <__hexnan+0xa0>
 80168d6:	462a      	mov	r2, r5
 80168d8:	4649      	mov	r1, r9
 80168da:	4620      	mov	r0, r4
 80168dc:	f7ff ff8a 	bl	80167f4 <L_shift>
 80168e0:	4544      	cmp	r4, r8
 80168e2:	d934      	bls.n	801694e <__hexnan+0x10e>
 80168e4:	f1a8 0204 	sub.w	r2, r8, #4
 80168e8:	4623      	mov	r3, r4
 80168ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80168ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80168f2:	429f      	cmp	r7, r3
 80168f4:	d2f9      	bcs.n	80168ea <__hexnan+0xaa>
 80168f6:	1b3b      	subs	r3, r7, r4
 80168f8:	f023 0303 	bic.w	r3, r3, #3
 80168fc:	3304      	adds	r3, #4
 80168fe:	3401      	adds	r4, #1
 8016900:	3e03      	subs	r6, #3
 8016902:	42b4      	cmp	r4, r6
 8016904:	bf88      	it	hi
 8016906:	2304      	movhi	r3, #4
 8016908:	4443      	add	r3, r8
 801690a:	2200      	movs	r2, #0
 801690c:	f843 2b04 	str.w	r2, [r3], #4
 8016910:	429f      	cmp	r7, r3
 8016912:	d2fb      	bcs.n	801690c <__hexnan+0xcc>
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	b91b      	cbnz	r3, 8016920 <__hexnan+0xe0>
 8016918:	4547      	cmp	r7, r8
 801691a:	d127      	bne.n	801696c <__hexnan+0x12c>
 801691c:	2301      	movs	r3, #1
 801691e:	603b      	str	r3, [r7, #0]
 8016920:	2005      	movs	r0, #5
 8016922:	e026      	b.n	8016972 <__hexnan+0x132>
 8016924:	3501      	adds	r5, #1
 8016926:	2d08      	cmp	r5, #8
 8016928:	f10b 0b01 	add.w	fp, fp, #1
 801692c:	dd06      	ble.n	801693c <__hexnan+0xfc>
 801692e:	4544      	cmp	r4, r8
 8016930:	d9c3      	bls.n	80168ba <__hexnan+0x7a>
 8016932:	2300      	movs	r3, #0
 8016934:	f844 3c04 	str.w	r3, [r4, #-4]
 8016938:	2501      	movs	r5, #1
 801693a:	3c04      	subs	r4, #4
 801693c:	6822      	ldr	r2, [r4, #0]
 801693e:	f000 000f 	and.w	r0, r0, #15
 8016942:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016946:	6022      	str	r2, [r4, #0]
 8016948:	e7b7      	b.n	80168ba <__hexnan+0x7a>
 801694a:	2508      	movs	r5, #8
 801694c:	e7b5      	b.n	80168ba <__hexnan+0x7a>
 801694e:	9b01      	ldr	r3, [sp, #4]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d0df      	beq.n	8016914 <__hexnan+0xd4>
 8016954:	f04f 32ff 	mov.w	r2, #4294967295
 8016958:	f1c3 0320 	rsb	r3, r3, #32
 801695c:	fa22 f303 	lsr.w	r3, r2, r3
 8016960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016964:	401a      	ands	r2, r3
 8016966:	f846 2c04 	str.w	r2, [r6, #-4]
 801696a:	e7d3      	b.n	8016914 <__hexnan+0xd4>
 801696c:	3f04      	subs	r7, #4
 801696e:	e7d1      	b.n	8016914 <__hexnan+0xd4>
 8016970:	2004      	movs	r0, #4
 8016972:	b007      	add	sp, #28
 8016974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016978 <_localeconv_r>:
 8016978:	4800      	ldr	r0, [pc, #0]	; (801697c <_localeconv_r+0x4>)
 801697a:	4770      	bx	lr
 801697c:	20000178 	.word	0x20000178

08016980 <__retarget_lock_init_recursive>:
 8016980:	4770      	bx	lr

08016982 <__retarget_lock_acquire_recursive>:
 8016982:	4770      	bx	lr

08016984 <__retarget_lock_release_recursive>:
 8016984:	4770      	bx	lr

08016986 <__swhatbuf_r>:
 8016986:	b570      	push	{r4, r5, r6, lr}
 8016988:	460e      	mov	r6, r1
 801698a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801698e:	2900      	cmp	r1, #0
 8016990:	b096      	sub	sp, #88	; 0x58
 8016992:	4614      	mov	r4, r2
 8016994:	461d      	mov	r5, r3
 8016996:	da08      	bge.n	80169aa <__swhatbuf_r+0x24>
 8016998:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801699c:	2200      	movs	r2, #0
 801699e:	602a      	str	r2, [r5, #0]
 80169a0:	061a      	lsls	r2, r3, #24
 80169a2:	d410      	bmi.n	80169c6 <__swhatbuf_r+0x40>
 80169a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169a8:	e00e      	b.n	80169c8 <__swhatbuf_r+0x42>
 80169aa:	466a      	mov	r2, sp
 80169ac:	f001 f9ee 	bl	8017d8c <_fstat_r>
 80169b0:	2800      	cmp	r0, #0
 80169b2:	dbf1      	blt.n	8016998 <__swhatbuf_r+0x12>
 80169b4:	9a01      	ldr	r2, [sp, #4]
 80169b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80169ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80169be:	425a      	negs	r2, r3
 80169c0:	415a      	adcs	r2, r3
 80169c2:	602a      	str	r2, [r5, #0]
 80169c4:	e7ee      	b.n	80169a4 <__swhatbuf_r+0x1e>
 80169c6:	2340      	movs	r3, #64	; 0x40
 80169c8:	2000      	movs	r0, #0
 80169ca:	6023      	str	r3, [r4, #0]
 80169cc:	b016      	add	sp, #88	; 0x58
 80169ce:	bd70      	pop	{r4, r5, r6, pc}

080169d0 <__smakebuf_r>:
 80169d0:	898b      	ldrh	r3, [r1, #12]
 80169d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80169d4:	079d      	lsls	r5, r3, #30
 80169d6:	4606      	mov	r6, r0
 80169d8:	460c      	mov	r4, r1
 80169da:	d507      	bpl.n	80169ec <__smakebuf_r+0x1c>
 80169dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80169e0:	6023      	str	r3, [r4, #0]
 80169e2:	6123      	str	r3, [r4, #16]
 80169e4:	2301      	movs	r3, #1
 80169e6:	6163      	str	r3, [r4, #20]
 80169e8:	b002      	add	sp, #8
 80169ea:	bd70      	pop	{r4, r5, r6, pc}
 80169ec:	ab01      	add	r3, sp, #4
 80169ee:	466a      	mov	r2, sp
 80169f0:	f7ff ffc9 	bl	8016986 <__swhatbuf_r>
 80169f4:	9900      	ldr	r1, [sp, #0]
 80169f6:	4605      	mov	r5, r0
 80169f8:	4630      	mov	r0, r6
 80169fa:	f000 fd87 	bl	801750c <_malloc_r>
 80169fe:	b948      	cbnz	r0, 8016a14 <__smakebuf_r+0x44>
 8016a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a04:	059a      	lsls	r2, r3, #22
 8016a06:	d4ef      	bmi.n	80169e8 <__smakebuf_r+0x18>
 8016a08:	f023 0303 	bic.w	r3, r3, #3
 8016a0c:	f043 0302 	orr.w	r3, r3, #2
 8016a10:	81a3      	strh	r3, [r4, #12]
 8016a12:	e7e3      	b.n	80169dc <__smakebuf_r+0xc>
 8016a14:	4b0d      	ldr	r3, [pc, #52]	; (8016a4c <__smakebuf_r+0x7c>)
 8016a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a18:	89a3      	ldrh	r3, [r4, #12]
 8016a1a:	6020      	str	r0, [r4, #0]
 8016a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a20:	81a3      	strh	r3, [r4, #12]
 8016a22:	9b00      	ldr	r3, [sp, #0]
 8016a24:	6163      	str	r3, [r4, #20]
 8016a26:	9b01      	ldr	r3, [sp, #4]
 8016a28:	6120      	str	r0, [r4, #16]
 8016a2a:	b15b      	cbz	r3, 8016a44 <__smakebuf_r+0x74>
 8016a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a30:	4630      	mov	r0, r6
 8016a32:	f001 f9bd 	bl	8017db0 <_isatty_r>
 8016a36:	b128      	cbz	r0, 8016a44 <__smakebuf_r+0x74>
 8016a38:	89a3      	ldrh	r3, [r4, #12]
 8016a3a:	f023 0303 	bic.w	r3, r3, #3
 8016a3e:	f043 0301 	orr.w	r3, r3, #1
 8016a42:	81a3      	strh	r3, [r4, #12]
 8016a44:	89a0      	ldrh	r0, [r4, #12]
 8016a46:	4305      	orrs	r5, r0
 8016a48:	81a5      	strh	r5, [r4, #12]
 8016a4a:	e7cd      	b.n	80169e8 <__smakebuf_r+0x18>
 8016a4c:	080160f9 	.word	0x080160f9

08016a50 <malloc>:
 8016a50:	4b02      	ldr	r3, [pc, #8]	; (8016a5c <malloc+0xc>)
 8016a52:	4601      	mov	r1, r0
 8016a54:	6818      	ldr	r0, [r3, #0]
 8016a56:	f000 bd59 	b.w	801750c <_malloc_r>
 8016a5a:	bf00      	nop
 8016a5c:	20000020 	.word	0x20000020

08016a60 <__ascii_mbtowc>:
 8016a60:	b082      	sub	sp, #8
 8016a62:	b901      	cbnz	r1, 8016a66 <__ascii_mbtowc+0x6>
 8016a64:	a901      	add	r1, sp, #4
 8016a66:	b142      	cbz	r2, 8016a7a <__ascii_mbtowc+0x1a>
 8016a68:	b14b      	cbz	r3, 8016a7e <__ascii_mbtowc+0x1e>
 8016a6a:	7813      	ldrb	r3, [r2, #0]
 8016a6c:	600b      	str	r3, [r1, #0]
 8016a6e:	7812      	ldrb	r2, [r2, #0]
 8016a70:	1e10      	subs	r0, r2, #0
 8016a72:	bf18      	it	ne
 8016a74:	2001      	movne	r0, #1
 8016a76:	b002      	add	sp, #8
 8016a78:	4770      	bx	lr
 8016a7a:	4610      	mov	r0, r2
 8016a7c:	e7fb      	b.n	8016a76 <__ascii_mbtowc+0x16>
 8016a7e:	f06f 0001 	mvn.w	r0, #1
 8016a82:	e7f8      	b.n	8016a76 <__ascii_mbtowc+0x16>

08016a84 <_Balloc>:
 8016a84:	b570      	push	{r4, r5, r6, lr}
 8016a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016a88:	4604      	mov	r4, r0
 8016a8a:	460d      	mov	r5, r1
 8016a8c:	b976      	cbnz	r6, 8016aac <_Balloc+0x28>
 8016a8e:	2010      	movs	r0, #16
 8016a90:	f7ff ffde 	bl	8016a50 <malloc>
 8016a94:	4602      	mov	r2, r0
 8016a96:	6260      	str	r0, [r4, #36]	; 0x24
 8016a98:	b920      	cbnz	r0, 8016aa4 <_Balloc+0x20>
 8016a9a:	4b18      	ldr	r3, [pc, #96]	; (8016afc <_Balloc+0x78>)
 8016a9c:	4818      	ldr	r0, [pc, #96]	; (8016b00 <_Balloc+0x7c>)
 8016a9e:	2166      	movs	r1, #102	; 0x66
 8016aa0:	f001 f934 	bl	8017d0c <__assert_func>
 8016aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016aa8:	6006      	str	r6, [r0, #0]
 8016aaa:	60c6      	str	r6, [r0, #12]
 8016aac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016aae:	68f3      	ldr	r3, [r6, #12]
 8016ab0:	b183      	cbz	r3, 8016ad4 <_Balloc+0x50>
 8016ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016aba:	b9b8      	cbnz	r0, 8016aec <_Balloc+0x68>
 8016abc:	2101      	movs	r1, #1
 8016abe:	fa01 f605 	lsl.w	r6, r1, r5
 8016ac2:	1d72      	adds	r2, r6, #5
 8016ac4:	0092      	lsls	r2, r2, #2
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f000 fc9d 	bl	8017406 <_calloc_r>
 8016acc:	b160      	cbz	r0, 8016ae8 <_Balloc+0x64>
 8016ace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ad2:	e00e      	b.n	8016af2 <_Balloc+0x6e>
 8016ad4:	2221      	movs	r2, #33	; 0x21
 8016ad6:	2104      	movs	r1, #4
 8016ad8:	4620      	mov	r0, r4
 8016ada:	f000 fc94 	bl	8017406 <_calloc_r>
 8016ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ae0:	60f0      	str	r0, [r6, #12]
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d1e4      	bne.n	8016ab2 <_Balloc+0x2e>
 8016ae8:	2000      	movs	r0, #0
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	6802      	ldr	r2, [r0, #0]
 8016aee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016af2:	2300      	movs	r3, #0
 8016af4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016af8:	e7f7      	b.n	8016aea <_Balloc+0x66>
 8016afa:	bf00      	nop
 8016afc:	08019c66 	.word	0x08019c66
 8016b00:	08019dc8 	.word	0x08019dc8

08016b04 <_Bfree>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016b08:	4605      	mov	r5, r0
 8016b0a:	460c      	mov	r4, r1
 8016b0c:	b976      	cbnz	r6, 8016b2c <_Bfree+0x28>
 8016b0e:	2010      	movs	r0, #16
 8016b10:	f7ff ff9e 	bl	8016a50 <malloc>
 8016b14:	4602      	mov	r2, r0
 8016b16:	6268      	str	r0, [r5, #36]	; 0x24
 8016b18:	b920      	cbnz	r0, 8016b24 <_Bfree+0x20>
 8016b1a:	4b09      	ldr	r3, [pc, #36]	; (8016b40 <_Bfree+0x3c>)
 8016b1c:	4809      	ldr	r0, [pc, #36]	; (8016b44 <_Bfree+0x40>)
 8016b1e:	218a      	movs	r1, #138	; 0x8a
 8016b20:	f001 f8f4 	bl	8017d0c <__assert_func>
 8016b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016b28:	6006      	str	r6, [r0, #0]
 8016b2a:	60c6      	str	r6, [r0, #12]
 8016b2c:	b13c      	cbz	r4, 8016b3e <_Bfree+0x3a>
 8016b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016b30:	6862      	ldr	r2, [r4, #4]
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016b38:	6021      	str	r1, [r4, #0]
 8016b3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016b3e:	bd70      	pop	{r4, r5, r6, pc}
 8016b40:	08019c66 	.word	0x08019c66
 8016b44:	08019dc8 	.word	0x08019dc8

08016b48 <__multadd>:
 8016b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b4c:	690d      	ldr	r5, [r1, #16]
 8016b4e:	4607      	mov	r7, r0
 8016b50:	460c      	mov	r4, r1
 8016b52:	461e      	mov	r6, r3
 8016b54:	f101 0c14 	add.w	ip, r1, #20
 8016b58:	2000      	movs	r0, #0
 8016b5a:	f8dc 3000 	ldr.w	r3, [ip]
 8016b5e:	b299      	uxth	r1, r3
 8016b60:	fb02 6101 	mla	r1, r2, r1, r6
 8016b64:	0c1e      	lsrs	r6, r3, #16
 8016b66:	0c0b      	lsrs	r3, r1, #16
 8016b68:	fb02 3306 	mla	r3, r2, r6, r3
 8016b6c:	b289      	uxth	r1, r1
 8016b6e:	3001      	adds	r0, #1
 8016b70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016b74:	4285      	cmp	r5, r0
 8016b76:	f84c 1b04 	str.w	r1, [ip], #4
 8016b7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016b7e:	dcec      	bgt.n	8016b5a <__multadd+0x12>
 8016b80:	b30e      	cbz	r6, 8016bc6 <__multadd+0x7e>
 8016b82:	68a3      	ldr	r3, [r4, #8]
 8016b84:	42ab      	cmp	r3, r5
 8016b86:	dc19      	bgt.n	8016bbc <__multadd+0x74>
 8016b88:	6861      	ldr	r1, [r4, #4]
 8016b8a:	4638      	mov	r0, r7
 8016b8c:	3101      	adds	r1, #1
 8016b8e:	f7ff ff79 	bl	8016a84 <_Balloc>
 8016b92:	4680      	mov	r8, r0
 8016b94:	b928      	cbnz	r0, 8016ba2 <__multadd+0x5a>
 8016b96:	4602      	mov	r2, r0
 8016b98:	4b0c      	ldr	r3, [pc, #48]	; (8016bcc <__multadd+0x84>)
 8016b9a:	480d      	ldr	r0, [pc, #52]	; (8016bd0 <__multadd+0x88>)
 8016b9c:	21b5      	movs	r1, #181	; 0xb5
 8016b9e:	f001 f8b5 	bl	8017d0c <__assert_func>
 8016ba2:	6922      	ldr	r2, [r4, #16]
 8016ba4:	3202      	adds	r2, #2
 8016ba6:	f104 010c 	add.w	r1, r4, #12
 8016baa:	0092      	lsls	r2, r2, #2
 8016bac:	300c      	adds	r0, #12
 8016bae:	f7fc fbad 	bl	801330c <memcpy>
 8016bb2:	4621      	mov	r1, r4
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f7ff ffa5 	bl	8016b04 <_Bfree>
 8016bba:	4644      	mov	r4, r8
 8016bbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016bc0:	3501      	adds	r5, #1
 8016bc2:	615e      	str	r6, [r3, #20]
 8016bc4:	6125      	str	r5, [r4, #16]
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bcc:	08019cd8 	.word	0x08019cd8
 8016bd0:	08019dc8 	.word	0x08019dc8

08016bd4 <__s2b>:
 8016bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bd8:	460c      	mov	r4, r1
 8016bda:	4615      	mov	r5, r2
 8016bdc:	461f      	mov	r7, r3
 8016bde:	2209      	movs	r2, #9
 8016be0:	3308      	adds	r3, #8
 8016be2:	4606      	mov	r6, r0
 8016be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016be8:	2100      	movs	r1, #0
 8016bea:	2201      	movs	r2, #1
 8016bec:	429a      	cmp	r2, r3
 8016bee:	db09      	blt.n	8016c04 <__s2b+0x30>
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	f7ff ff47 	bl	8016a84 <_Balloc>
 8016bf6:	b940      	cbnz	r0, 8016c0a <__s2b+0x36>
 8016bf8:	4602      	mov	r2, r0
 8016bfa:	4b19      	ldr	r3, [pc, #100]	; (8016c60 <__s2b+0x8c>)
 8016bfc:	4819      	ldr	r0, [pc, #100]	; (8016c64 <__s2b+0x90>)
 8016bfe:	21ce      	movs	r1, #206	; 0xce
 8016c00:	f001 f884 	bl	8017d0c <__assert_func>
 8016c04:	0052      	lsls	r2, r2, #1
 8016c06:	3101      	adds	r1, #1
 8016c08:	e7f0      	b.n	8016bec <__s2b+0x18>
 8016c0a:	9b08      	ldr	r3, [sp, #32]
 8016c0c:	6143      	str	r3, [r0, #20]
 8016c0e:	2d09      	cmp	r5, #9
 8016c10:	f04f 0301 	mov.w	r3, #1
 8016c14:	6103      	str	r3, [r0, #16]
 8016c16:	dd16      	ble.n	8016c46 <__s2b+0x72>
 8016c18:	f104 0909 	add.w	r9, r4, #9
 8016c1c:	46c8      	mov	r8, r9
 8016c1e:	442c      	add	r4, r5
 8016c20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016c24:	4601      	mov	r1, r0
 8016c26:	3b30      	subs	r3, #48	; 0x30
 8016c28:	220a      	movs	r2, #10
 8016c2a:	4630      	mov	r0, r6
 8016c2c:	f7ff ff8c 	bl	8016b48 <__multadd>
 8016c30:	45a0      	cmp	r8, r4
 8016c32:	d1f5      	bne.n	8016c20 <__s2b+0x4c>
 8016c34:	f1a5 0408 	sub.w	r4, r5, #8
 8016c38:	444c      	add	r4, r9
 8016c3a:	1b2d      	subs	r5, r5, r4
 8016c3c:	1963      	adds	r3, r4, r5
 8016c3e:	42bb      	cmp	r3, r7
 8016c40:	db04      	blt.n	8016c4c <__s2b+0x78>
 8016c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c46:	340a      	adds	r4, #10
 8016c48:	2509      	movs	r5, #9
 8016c4a:	e7f6      	b.n	8016c3a <__s2b+0x66>
 8016c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016c50:	4601      	mov	r1, r0
 8016c52:	3b30      	subs	r3, #48	; 0x30
 8016c54:	220a      	movs	r2, #10
 8016c56:	4630      	mov	r0, r6
 8016c58:	f7ff ff76 	bl	8016b48 <__multadd>
 8016c5c:	e7ee      	b.n	8016c3c <__s2b+0x68>
 8016c5e:	bf00      	nop
 8016c60:	08019cd8 	.word	0x08019cd8
 8016c64:	08019dc8 	.word	0x08019dc8

08016c68 <__hi0bits>:
 8016c68:	0c03      	lsrs	r3, r0, #16
 8016c6a:	041b      	lsls	r3, r3, #16
 8016c6c:	b9d3      	cbnz	r3, 8016ca4 <__hi0bits+0x3c>
 8016c6e:	0400      	lsls	r0, r0, #16
 8016c70:	2310      	movs	r3, #16
 8016c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016c76:	bf04      	itt	eq
 8016c78:	0200      	lsleq	r0, r0, #8
 8016c7a:	3308      	addeq	r3, #8
 8016c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016c80:	bf04      	itt	eq
 8016c82:	0100      	lsleq	r0, r0, #4
 8016c84:	3304      	addeq	r3, #4
 8016c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016c8a:	bf04      	itt	eq
 8016c8c:	0080      	lsleq	r0, r0, #2
 8016c8e:	3302      	addeq	r3, #2
 8016c90:	2800      	cmp	r0, #0
 8016c92:	db05      	blt.n	8016ca0 <__hi0bits+0x38>
 8016c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016c98:	f103 0301 	add.w	r3, r3, #1
 8016c9c:	bf08      	it	eq
 8016c9e:	2320      	moveq	r3, #32
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	4770      	bx	lr
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	e7e4      	b.n	8016c72 <__hi0bits+0xa>

08016ca8 <__lo0bits>:
 8016ca8:	6803      	ldr	r3, [r0, #0]
 8016caa:	f013 0207 	ands.w	r2, r3, #7
 8016cae:	4601      	mov	r1, r0
 8016cb0:	d00b      	beq.n	8016cca <__lo0bits+0x22>
 8016cb2:	07da      	lsls	r2, r3, #31
 8016cb4:	d423      	bmi.n	8016cfe <__lo0bits+0x56>
 8016cb6:	0798      	lsls	r0, r3, #30
 8016cb8:	bf49      	itett	mi
 8016cba:	085b      	lsrmi	r3, r3, #1
 8016cbc:	089b      	lsrpl	r3, r3, #2
 8016cbe:	2001      	movmi	r0, #1
 8016cc0:	600b      	strmi	r3, [r1, #0]
 8016cc2:	bf5c      	itt	pl
 8016cc4:	600b      	strpl	r3, [r1, #0]
 8016cc6:	2002      	movpl	r0, #2
 8016cc8:	4770      	bx	lr
 8016cca:	b298      	uxth	r0, r3
 8016ccc:	b9a8      	cbnz	r0, 8016cfa <__lo0bits+0x52>
 8016cce:	0c1b      	lsrs	r3, r3, #16
 8016cd0:	2010      	movs	r0, #16
 8016cd2:	b2da      	uxtb	r2, r3
 8016cd4:	b90a      	cbnz	r2, 8016cda <__lo0bits+0x32>
 8016cd6:	3008      	adds	r0, #8
 8016cd8:	0a1b      	lsrs	r3, r3, #8
 8016cda:	071a      	lsls	r2, r3, #28
 8016cdc:	bf04      	itt	eq
 8016cde:	091b      	lsreq	r3, r3, #4
 8016ce0:	3004      	addeq	r0, #4
 8016ce2:	079a      	lsls	r2, r3, #30
 8016ce4:	bf04      	itt	eq
 8016ce6:	089b      	lsreq	r3, r3, #2
 8016ce8:	3002      	addeq	r0, #2
 8016cea:	07da      	lsls	r2, r3, #31
 8016cec:	d403      	bmi.n	8016cf6 <__lo0bits+0x4e>
 8016cee:	085b      	lsrs	r3, r3, #1
 8016cf0:	f100 0001 	add.w	r0, r0, #1
 8016cf4:	d005      	beq.n	8016d02 <__lo0bits+0x5a>
 8016cf6:	600b      	str	r3, [r1, #0]
 8016cf8:	4770      	bx	lr
 8016cfa:	4610      	mov	r0, r2
 8016cfc:	e7e9      	b.n	8016cd2 <__lo0bits+0x2a>
 8016cfe:	2000      	movs	r0, #0
 8016d00:	4770      	bx	lr
 8016d02:	2020      	movs	r0, #32
 8016d04:	4770      	bx	lr
	...

08016d08 <__i2b>:
 8016d08:	b510      	push	{r4, lr}
 8016d0a:	460c      	mov	r4, r1
 8016d0c:	2101      	movs	r1, #1
 8016d0e:	f7ff feb9 	bl	8016a84 <_Balloc>
 8016d12:	4602      	mov	r2, r0
 8016d14:	b928      	cbnz	r0, 8016d22 <__i2b+0x1a>
 8016d16:	4b05      	ldr	r3, [pc, #20]	; (8016d2c <__i2b+0x24>)
 8016d18:	4805      	ldr	r0, [pc, #20]	; (8016d30 <__i2b+0x28>)
 8016d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016d1e:	f000 fff5 	bl	8017d0c <__assert_func>
 8016d22:	2301      	movs	r3, #1
 8016d24:	6144      	str	r4, [r0, #20]
 8016d26:	6103      	str	r3, [r0, #16]
 8016d28:	bd10      	pop	{r4, pc}
 8016d2a:	bf00      	nop
 8016d2c:	08019cd8 	.word	0x08019cd8
 8016d30:	08019dc8 	.word	0x08019dc8

08016d34 <__multiply>:
 8016d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d38:	4691      	mov	r9, r2
 8016d3a:	690a      	ldr	r2, [r1, #16]
 8016d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	bfb8      	it	lt
 8016d44:	460b      	movlt	r3, r1
 8016d46:	460c      	mov	r4, r1
 8016d48:	bfbc      	itt	lt
 8016d4a:	464c      	movlt	r4, r9
 8016d4c:	4699      	movlt	r9, r3
 8016d4e:	6927      	ldr	r7, [r4, #16]
 8016d50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016d54:	68a3      	ldr	r3, [r4, #8]
 8016d56:	6861      	ldr	r1, [r4, #4]
 8016d58:	eb07 060a 	add.w	r6, r7, sl
 8016d5c:	42b3      	cmp	r3, r6
 8016d5e:	b085      	sub	sp, #20
 8016d60:	bfb8      	it	lt
 8016d62:	3101      	addlt	r1, #1
 8016d64:	f7ff fe8e 	bl	8016a84 <_Balloc>
 8016d68:	b930      	cbnz	r0, 8016d78 <__multiply+0x44>
 8016d6a:	4602      	mov	r2, r0
 8016d6c:	4b44      	ldr	r3, [pc, #272]	; (8016e80 <__multiply+0x14c>)
 8016d6e:	4845      	ldr	r0, [pc, #276]	; (8016e84 <__multiply+0x150>)
 8016d70:	f240 115d 	movw	r1, #349	; 0x15d
 8016d74:	f000 ffca 	bl	8017d0c <__assert_func>
 8016d78:	f100 0514 	add.w	r5, r0, #20
 8016d7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016d80:	462b      	mov	r3, r5
 8016d82:	2200      	movs	r2, #0
 8016d84:	4543      	cmp	r3, r8
 8016d86:	d321      	bcc.n	8016dcc <__multiply+0x98>
 8016d88:	f104 0314 	add.w	r3, r4, #20
 8016d8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016d90:	f109 0314 	add.w	r3, r9, #20
 8016d94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016d98:	9202      	str	r2, [sp, #8]
 8016d9a:	1b3a      	subs	r2, r7, r4
 8016d9c:	3a15      	subs	r2, #21
 8016d9e:	f022 0203 	bic.w	r2, r2, #3
 8016da2:	3204      	adds	r2, #4
 8016da4:	f104 0115 	add.w	r1, r4, #21
 8016da8:	428f      	cmp	r7, r1
 8016daa:	bf38      	it	cc
 8016dac:	2204      	movcc	r2, #4
 8016dae:	9201      	str	r2, [sp, #4]
 8016db0:	9a02      	ldr	r2, [sp, #8]
 8016db2:	9303      	str	r3, [sp, #12]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d80c      	bhi.n	8016dd2 <__multiply+0x9e>
 8016db8:	2e00      	cmp	r6, #0
 8016dba:	dd03      	ble.n	8016dc4 <__multiply+0x90>
 8016dbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d05a      	beq.n	8016e7a <__multiply+0x146>
 8016dc4:	6106      	str	r6, [r0, #16]
 8016dc6:	b005      	add	sp, #20
 8016dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dcc:	f843 2b04 	str.w	r2, [r3], #4
 8016dd0:	e7d8      	b.n	8016d84 <__multiply+0x50>
 8016dd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8016dd6:	f1ba 0f00 	cmp.w	sl, #0
 8016dda:	d024      	beq.n	8016e26 <__multiply+0xf2>
 8016ddc:	f104 0e14 	add.w	lr, r4, #20
 8016de0:	46a9      	mov	r9, r5
 8016de2:	f04f 0c00 	mov.w	ip, #0
 8016de6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016dea:	f8d9 1000 	ldr.w	r1, [r9]
 8016dee:	fa1f fb82 	uxth.w	fp, r2
 8016df2:	b289      	uxth	r1, r1
 8016df4:	fb0a 110b 	mla	r1, sl, fp, r1
 8016df8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8016e00:	4461      	add	r1, ip
 8016e02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016e06:	fb0a c20b 	mla	r2, sl, fp, ip
 8016e0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016e0e:	b289      	uxth	r1, r1
 8016e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016e14:	4577      	cmp	r7, lr
 8016e16:	f849 1b04 	str.w	r1, [r9], #4
 8016e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016e1e:	d8e2      	bhi.n	8016de6 <__multiply+0xb2>
 8016e20:	9a01      	ldr	r2, [sp, #4]
 8016e22:	f845 c002 	str.w	ip, [r5, r2]
 8016e26:	9a03      	ldr	r2, [sp, #12]
 8016e28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016e2c:	3304      	adds	r3, #4
 8016e2e:	f1b9 0f00 	cmp.w	r9, #0
 8016e32:	d020      	beq.n	8016e76 <__multiply+0x142>
 8016e34:	6829      	ldr	r1, [r5, #0]
 8016e36:	f104 0c14 	add.w	ip, r4, #20
 8016e3a:	46ae      	mov	lr, r5
 8016e3c:	f04f 0a00 	mov.w	sl, #0
 8016e40:	f8bc b000 	ldrh.w	fp, [ip]
 8016e44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016e48:	fb09 220b 	mla	r2, r9, fp, r2
 8016e4c:	4492      	add	sl, r2
 8016e4e:	b289      	uxth	r1, r1
 8016e50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016e54:	f84e 1b04 	str.w	r1, [lr], #4
 8016e58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016e5c:	f8be 1000 	ldrh.w	r1, [lr]
 8016e60:	0c12      	lsrs	r2, r2, #16
 8016e62:	fb09 1102 	mla	r1, r9, r2, r1
 8016e66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016e6a:	4567      	cmp	r7, ip
 8016e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016e70:	d8e6      	bhi.n	8016e40 <__multiply+0x10c>
 8016e72:	9a01      	ldr	r2, [sp, #4]
 8016e74:	50a9      	str	r1, [r5, r2]
 8016e76:	3504      	adds	r5, #4
 8016e78:	e79a      	b.n	8016db0 <__multiply+0x7c>
 8016e7a:	3e01      	subs	r6, #1
 8016e7c:	e79c      	b.n	8016db8 <__multiply+0x84>
 8016e7e:	bf00      	nop
 8016e80:	08019cd8 	.word	0x08019cd8
 8016e84:	08019dc8 	.word	0x08019dc8

08016e88 <__pow5mult>:
 8016e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e8c:	4615      	mov	r5, r2
 8016e8e:	f012 0203 	ands.w	r2, r2, #3
 8016e92:	4606      	mov	r6, r0
 8016e94:	460f      	mov	r7, r1
 8016e96:	d007      	beq.n	8016ea8 <__pow5mult+0x20>
 8016e98:	4c25      	ldr	r4, [pc, #148]	; (8016f30 <__pow5mult+0xa8>)
 8016e9a:	3a01      	subs	r2, #1
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016ea2:	f7ff fe51 	bl	8016b48 <__multadd>
 8016ea6:	4607      	mov	r7, r0
 8016ea8:	10ad      	asrs	r5, r5, #2
 8016eaa:	d03d      	beq.n	8016f28 <__pow5mult+0xa0>
 8016eac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016eae:	b97c      	cbnz	r4, 8016ed0 <__pow5mult+0x48>
 8016eb0:	2010      	movs	r0, #16
 8016eb2:	f7ff fdcd 	bl	8016a50 <malloc>
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	6270      	str	r0, [r6, #36]	; 0x24
 8016eba:	b928      	cbnz	r0, 8016ec8 <__pow5mult+0x40>
 8016ebc:	4b1d      	ldr	r3, [pc, #116]	; (8016f34 <__pow5mult+0xac>)
 8016ebe:	481e      	ldr	r0, [pc, #120]	; (8016f38 <__pow5mult+0xb0>)
 8016ec0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016ec4:	f000 ff22 	bl	8017d0c <__assert_func>
 8016ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ecc:	6004      	str	r4, [r0, #0]
 8016ece:	60c4      	str	r4, [r0, #12]
 8016ed0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ed8:	b94c      	cbnz	r4, 8016eee <__pow5mult+0x66>
 8016eda:	f240 2171 	movw	r1, #625	; 0x271
 8016ede:	4630      	mov	r0, r6
 8016ee0:	f7ff ff12 	bl	8016d08 <__i2b>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016eea:	4604      	mov	r4, r0
 8016eec:	6003      	str	r3, [r0, #0]
 8016eee:	f04f 0900 	mov.w	r9, #0
 8016ef2:	07eb      	lsls	r3, r5, #31
 8016ef4:	d50a      	bpl.n	8016f0c <__pow5mult+0x84>
 8016ef6:	4639      	mov	r1, r7
 8016ef8:	4622      	mov	r2, r4
 8016efa:	4630      	mov	r0, r6
 8016efc:	f7ff ff1a 	bl	8016d34 <__multiply>
 8016f00:	4639      	mov	r1, r7
 8016f02:	4680      	mov	r8, r0
 8016f04:	4630      	mov	r0, r6
 8016f06:	f7ff fdfd 	bl	8016b04 <_Bfree>
 8016f0a:	4647      	mov	r7, r8
 8016f0c:	106d      	asrs	r5, r5, #1
 8016f0e:	d00b      	beq.n	8016f28 <__pow5mult+0xa0>
 8016f10:	6820      	ldr	r0, [r4, #0]
 8016f12:	b938      	cbnz	r0, 8016f24 <__pow5mult+0x9c>
 8016f14:	4622      	mov	r2, r4
 8016f16:	4621      	mov	r1, r4
 8016f18:	4630      	mov	r0, r6
 8016f1a:	f7ff ff0b 	bl	8016d34 <__multiply>
 8016f1e:	6020      	str	r0, [r4, #0]
 8016f20:	f8c0 9000 	str.w	r9, [r0]
 8016f24:	4604      	mov	r4, r0
 8016f26:	e7e4      	b.n	8016ef2 <__pow5mult+0x6a>
 8016f28:	4638      	mov	r0, r7
 8016f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f2e:	bf00      	nop
 8016f30:	08019f18 	.word	0x08019f18
 8016f34:	08019c66 	.word	0x08019c66
 8016f38:	08019dc8 	.word	0x08019dc8

08016f3c <__lshift>:
 8016f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f40:	460c      	mov	r4, r1
 8016f42:	6849      	ldr	r1, [r1, #4]
 8016f44:	6923      	ldr	r3, [r4, #16]
 8016f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016f4a:	68a3      	ldr	r3, [r4, #8]
 8016f4c:	4607      	mov	r7, r0
 8016f4e:	4691      	mov	r9, r2
 8016f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016f54:	f108 0601 	add.w	r6, r8, #1
 8016f58:	42b3      	cmp	r3, r6
 8016f5a:	db0b      	blt.n	8016f74 <__lshift+0x38>
 8016f5c:	4638      	mov	r0, r7
 8016f5e:	f7ff fd91 	bl	8016a84 <_Balloc>
 8016f62:	4605      	mov	r5, r0
 8016f64:	b948      	cbnz	r0, 8016f7a <__lshift+0x3e>
 8016f66:	4602      	mov	r2, r0
 8016f68:	4b2a      	ldr	r3, [pc, #168]	; (8017014 <__lshift+0xd8>)
 8016f6a:	482b      	ldr	r0, [pc, #172]	; (8017018 <__lshift+0xdc>)
 8016f6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016f70:	f000 fecc 	bl	8017d0c <__assert_func>
 8016f74:	3101      	adds	r1, #1
 8016f76:	005b      	lsls	r3, r3, #1
 8016f78:	e7ee      	b.n	8016f58 <__lshift+0x1c>
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	f100 0114 	add.w	r1, r0, #20
 8016f80:	f100 0210 	add.w	r2, r0, #16
 8016f84:	4618      	mov	r0, r3
 8016f86:	4553      	cmp	r3, sl
 8016f88:	db37      	blt.n	8016ffa <__lshift+0xbe>
 8016f8a:	6920      	ldr	r0, [r4, #16]
 8016f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016f90:	f104 0314 	add.w	r3, r4, #20
 8016f94:	f019 091f 	ands.w	r9, r9, #31
 8016f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016f9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016fa0:	d02f      	beq.n	8017002 <__lshift+0xc6>
 8016fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8016fa6:	468a      	mov	sl, r1
 8016fa8:	f04f 0c00 	mov.w	ip, #0
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	fa02 f209 	lsl.w	r2, r2, r9
 8016fb2:	ea42 020c 	orr.w	r2, r2, ip
 8016fb6:	f84a 2b04 	str.w	r2, [sl], #4
 8016fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fbe:	4298      	cmp	r0, r3
 8016fc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016fc4:	d8f2      	bhi.n	8016fac <__lshift+0x70>
 8016fc6:	1b03      	subs	r3, r0, r4
 8016fc8:	3b15      	subs	r3, #21
 8016fca:	f023 0303 	bic.w	r3, r3, #3
 8016fce:	3304      	adds	r3, #4
 8016fd0:	f104 0215 	add.w	r2, r4, #21
 8016fd4:	4290      	cmp	r0, r2
 8016fd6:	bf38      	it	cc
 8016fd8:	2304      	movcc	r3, #4
 8016fda:	f841 c003 	str.w	ip, [r1, r3]
 8016fde:	f1bc 0f00 	cmp.w	ip, #0
 8016fe2:	d001      	beq.n	8016fe8 <__lshift+0xac>
 8016fe4:	f108 0602 	add.w	r6, r8, #2
 8016fe8:	3e01      	subs	r6, #1
 8016fea:	4638      	mov	r0, r7
 8016fec:	612e      	str	r6, [r5, #16]
 8016fee:	4621      	mov	r1, r4
 8016ff0:	f7ff fd88 	bl	8016b04 <_Bfree>
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ffe:	3301      	adds	r3, #1
 8017000:	e7c1      	b.n	8016f86 <__lshift+0x4a>
 8017002:	3904      	subs	r1, #4
 8017004:	f853 2b04 	ldr.w	r2, [r3], #4
 8017008:	f841 2f04 	str.w	r2, [r1, #4]!
 801700c:	4298      	cmp	r0, r3
 801700e:	d8f9      	bhi.n	8017004 <__lshift+0xc8>
 8017010:	e7ea      	b.n	8016fe8 <__lshift+0xac>
 8017012:	bf00      	nop
 8017014:	08019cd8 	.word	0x08019cd8
 8017018:	08019dc8 	.word	0x08019dc8

0801701c <__mcmp>:
 801701c:	b530      	push	{r4, r5, lr}
 801701e:	6902      	ldr	r2, [r0, #16]
 8017020:	690c      	ldr	r4, [r1, #16]
 8017022:	1b12      	subs	r2, r2, r4
 8017024:	d10e      	bne.n	8017044 <__mcmp+0x28>
 8017026:	f100 0314 	add.w	r3, r0, #20
 801702a:	3114      	adds	r1, #20
 801702c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801703c:	42a5      	cmp	r5, r4
 801703e:	d003      	beq.n	8017048 <__mcmp+0x2c>
 8017040:	d305      	bcc.n	801704e <__mcmp+0x32>
 8017042:	2201      	movs	r2, #1
 8017044:	4610      	mov	r0, r2
 8017046:	bd30      	pop	{r4, r5, pc}
 8017048:	4283      	cmp	r3, r0
 801704a:	d3f3      	bcc.n	8017034 <__mcmp+0x18>
 801704c:	e7fa      	b.n	8017044 <__mcmp+0x28>
 801704e:	f04f 32ff 	mov.w	r2, #4294967295
 8017052:	e7f7      	b.n	8017044 <__mcmp+0x28>

08017054 <__mdiff>:
 8017054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	460c      	mov	r4, r1
 801705a:	4606      	mov	r6, r0
 801705c:	4611      	mov	r1, r2
 801705e:	4620      	mov	r0, r4
 8017060:	4690      	mov	r8, r2
 8017062:	f7ff ffdb 	bl	801701c <__mcmp>
 8017066:	1e05      	subs	r5, r0, #0
 8017068:	d110      	bne.n	801708c <__mdiff+0x38>
 801706a:	4629      	mov	r1, r5
 801706c:	4630      	mov	r0, r6
 801706e:	f7ff fd09 	bl	8016a84 <_Balloc>
 8017072:	b930      	cbnz	r0, 8017082 <__mdiff+0x2e>
 8017074:	4b3a      	ldr	r3, [pc, #232]	; (8017160 <__mdiff+0x10c>)
 8017076:	4602      	mov	r2, r0
 8017078:	f240 2132 	movw	r1, #562	; 0x232
 801707c:	4839      	ldr	r0, [pc, #228]	; (8017164 <__mdiff+0x110>)
 801707e:	f000 fe45 	bl	8017d0c <__assert_func>
 8017082:	2301      	movs	r3, #1
 8017084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801708c:	bfa4      	itt	ge
 801708e:	4643      	movge	r3, r8
 8017090:	46a0      	movge	r8, r4
 8017092:	4630      	mov	r0, r6
 8017094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017098:	bfa6      	itte	ge
 801709a:	461c      	movge	r4, r3
 801709c:	2500      	movge	r5, #0
 801709e:	2501      	movlt	r5, #1
 80170a0:	f7ff fcf0 	bl	8016a84 <_Balloc>
 80170a4:	b920      	cbnz	r0, 80170b0 <__mdiff+0x5c>
 80170a6:	4b2e      	ldr	r3, [pc, #184]	; (8017160 <__mdiff+0x10c>)
 80170a8:	4602      	mov	r2, r0
 80170aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80170ae:	e7e5      	b.n	801707c <__mdiff+0x28>
 80170b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80170b4:	6926      	ldr	r6, [r4, #16]
 80170b6:	60c5      	str	r5, [r0, #12]
 80170b8:	f104 0914 	add.w	r9, r4, #20
 80170bc:	f108 0514 	add.w	r5, r8, #20
 80170c0:	f100 0e14 	add.w	lr, r0, #20
 80170c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80170c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80170cc:	f108 0210 	add.w	r2, r8, #16
 80170d0:	46f2      	mov	sl, lr
 80170d2:	2100      	movs	r1, #0
 80170d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80170d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80170dc:	fa1f f883 	uxth.w	r8, r3
 80170e0:	fa11 f18b 	uxtah	r1, r1, fp
 80170e4:	0c1b      	lsrs	r3, r3, #16
 80170e6:	eba1 0808 	sub.w	r8, r1, r8
 80170ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80170ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80170f2:	fa1f f888 	uxth.w	r8, r8
 80170f6:	1419      	asrs	r1, r3, #16
 80170f8:	454e      	cmp	r6, r9
 80170fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80170fe:	f84a 3b04 	str.w	r3, [sl], #4
 8017102:	d8e7      	bhi.n	80170d4 <__mdiff+0x80>
 8017104:	1b33      	subs	r3, r6, r4
 8017106:	3b15      	subs	r3, #21
 8017108:	f023 0303 	bic.w	r3, r3, #3
 801710c:	3304      	adds	r3, #4
 801710e:	3415      	adds	r4, #21
 8017110:	42a6      	cmp	r6, r4
 8017112:	bf38      	it	cc
 8017114:	2304      	movcc	r3, #4
 8017116:	441d      	add	r5, r3
 8017118:	4473      	add	r3, lr
 801711a:	469e      	mov	lr, r3
 801711c:	462e      	mov	r6, r5
 801711e:	4566      	cmp	r6, ip
 8017120:	d30e      	bcc.n	8017140 <__mdiff+0xec>
 8017122:	f10c 0203 	add.w	r2, ip, #3
 8017126:	1b52      	subs	r2, r2, r5
 8017128:	f022 0203 	bic.w	r2, r2, #3
 801712c:	3d03      	subs	r5, #3
 801712e:	45ac      	cmp	ip, r5
 8017130:	bf38      	it	cc
 8017132:	2200      	movcc	r2, #0
 8017134:	441a      	add	r2, r3
 8017136:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801713a:	b17b      	cbz	r3, 801715c <__mdiff+0x108>
 801713c:	6107      	str	r7, [r0, #16]
 801713e:	e7a3      	b.n	8017088 <__mdiff+0x34>
 8017140:	f856 8b04 	ldr.w	r8, [r6], #4
 8017144:	fa11 f288 	uxtah	r2, r1, r8
 8017148:	1414      	asrs	r4, r2, #16
 801714a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801714e:	b292      	uxth	r2, r2
 8017150:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017154:	f84e 2b04 	str.w	r2, [lr], #4
 8017158:	1421      	asrs	r1, r4, #16
 801715a:	e7e0      	b.n	801711e <__mdiff+0xca>
 801715c:	3f01      	subs	r7, #1
 801715e:	e7ea      	b.n	8017136 <__mdiff+0xe2>
 8017160:	08019cd8 	.word	0x08019cd8
 8017164:	08019dc8 	.word	0x08019dc8

08017168 <__ulp>:
 8017168:	b082      	sub	sp, #8
 801716a:	ed8d 0b00 	vstr	d0, [sp]
 801716e:	9b01      	ldr	r3, [sp, #4]
 8017170:	4912      	ldr	r1, [pc, #72]	; (80171bc <__ulp+0x54>)
 8017172:	4019      	ands	r1, r3
 8017174:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017178:	2900      	cmp	r1, #0
 801717a:	dd05      	ble.n	8017188 <__ulp+0x20>
 801717c:	2200      	movs	r2, #0
 801717e:	460b      	mov	r3, r1
 8017180:	ec43 2b10 	vmov	d0, r2, r3
 8017184:	b002      	add	sp, #8
 8017186:	4770      	bx	lr
 8017188:	4249      	negs	r1, r1
 801718a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801718e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017192:	f04f 0200 	mov.w	r2, #0
 8017196:	f04f 0300 	mov.w	r3, #0
 801719a:	da04      	bge.n	80171a6 <__ulp+0x3e>
 801719c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80171a0:	fa41 f300 	asr.w	r3, r1, r0
 80171a4:	e7ec      	b.n	8017180 <__ulp+0x18>
 80171a6:	f1a0 0114 	sub.w	r1, r0, #20
 80171aa:	291e      	cmp	r1, #30
 80171ac:	bfda      	itte	le
 80171ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80171b2:	fa20 f101 	lsrle.w	r1, r0, r1
 80171b6:	2101      	movgt	r1, #1
 80171b8:	460a      	mov	r2, r1
 80171ba:	e7e1      	b.n	8017180 <__ulp+0x18>
 80171bc:	7ff00000 	.word	0x7ff00000

080171c0 <__b2d>:
 80171c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171c2:	6905      	ldr	r5, [r0, #16]
 80171c4:	f100 0714 	add.w	r7, r0, #20
 80171c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80171cc:	1f2e      	subs	r6, r5, #4
 80171ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80171d2:	4620      	mov	r0, r4
 80171d4:	f7ff fd48 	bl	8016c68 <__hi0bits>
 80171d8:	f1c0 0320 	rsb	r3, r0, #32
 80171dc:	280a      	cmp	r0, #10
 80171de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801725c <__b2d+0x9c>
 80171e2:	600b      	str	r3, [r1, #0]
 80171e4:	dc14      	bgt.n	8017210 <__b2d+0x50>
 80171e6:	f1c0 0e0b 	rsb	lr, r0, #11
 80171ea:	fa24 f10e 	lsr.w	r1, r4, lr
 80171ee:	42b7      	cmp	r7, r6
 80171f0:	ea41 030c 	orr.w	r3, r1, ip
 80171f4:	bf34      	ite	cc
 80171f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80171fa:	2100      	movcs	r1, #0
 80171fc:	3015      	adds	r0, #21
 80171fe:	fa04 f000 	lsl.w	r0, r4, r0
 8017202:	fa21 f10e 	lsr.w	r1, r1, lr
 8017206:	ea40 0201 	orr.w	r2, r0, r1
 801720a:	ec43 2b10 	vmov	d0, r2, r3
 801720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017210:	42b7      	cmp	r7, r6
 8017212:	bf3a      	itte	cc
 8017214:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017218:	f1a5 0608 	subcc.w	r6, r5, #8
 801721c:	2100      	movcs	r1, #0
 801721e:	380b      	subs	r0, #11
 8017220:	d017      	beq.n	8017252 <__b2d+0x92>
 8017222:	f1c0 0c20 	rsb	ip, r0, #32
 8017226:	fa04 f500 	lsl.w	r5, r4, r0
 801722a:	42be      	cmp	r6, r7
 801722c:	fa21 f40c 	lsr.w	r4, r1, ip
 8017230:	ea45 0504 	orr.w	r5, r5, r4
 8017234:	bf8c      	ite	hi
 8017236:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801723a:	2400      	movls	r4, #0
 801723c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017240:	fa01 f000 	lsl.w	r0, r1, r0
 8017244:	fa24 f40c 	lsr.w	r4, r4, ip
 8017248:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801724c:	ea40 0204 	orr.w	r2, r0, r4
 8017250:	e7db      	b.n	801720a <__b2d+0x4a>
 8017252:	ea44 030c 	orr.w	r3, r4, ip
 8017256:	460a      	mov	r2, r1
 8017258:	e7d7      	b.n	801720a <__b2d+0x4a>
 801725a:	bf00      	nop
 801725c:	3ff00000 	.word	0x3ff00000

08017260 <__d2b>:
 8017260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017264:	4689      	mov	r9, r1
 8017266:	2101      	movs	r1, #1
 8017268:	ec57 6b10 	vmov	r6, r7, d0
 801726c:	4690      	mov	r8, r2
 801726e:	f7ff fc09 	bl	8016a84 <_Balloc>
 8017272:	4604      	mov	r4, r0
 8017274:	b930      	cbnz	r0, 8017284 <__d2b+0x24>
 8017276:	4602      	mov	r2, r0
 8017278:	4b25      	ldr	r3, [pc, #148]	; (8017310 <__d2b+0xb0>)
 801727a:	4826      	ldr	r0, [pc, #152]	; (8017314 <__d2b+0xb4>)
 801727c:	f240 310a 	movw	r1, #778	; 0x30a
 8017280:	f000 fd44 	bl	8017d0c <__assert_func>
 8017284:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801728c:	bb35      	cbnz	r5, 80172dc <__d2b+0x7c>
 801728e:	2e00      	cmp	r6, #0
 8017290:	9301      	str	r3, [sp, #4]
 8017292:	d028      	beq.n	80172e6 <__d2b+0x86>
 8017294:	4668      	mov	r0, sp
 8017296:	9600      	str	r6, [sp, #0]
 8017298:	f7ff fd06 	bl	8016ca8 <__lo0bits>
 801729c:	9900      	ldr	r1, [sp, #0]
 801729e:	b300      	cbz	r0, 80172e2 <__d2b+0x82>
 80172a0:	9a01      	ldr	r2, [sp, #4]
 80172a2:	f1c0 0320 	rsb	r3, r0, #32
 80172a6:	fa02 f303 	lsl.w	r3, r2, r3
 80172aa:	430b      	orrs	r3, r1
 80172ac:	40c2      	lsrs	r2, r0
 80172ae:	6163      	str	r3, [r4, #20]
 80172b0:	9201      	str	r2, [sp, #4]
 80172b2:	9b01      	ldr	r3, [sp, #4]
 80172b4:	61a3      	str	r3, [r4, #24]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	bf14      	ite	ne
 80172ba:	2202      	movne	r2, #2
 80172bc:	2201      	moveq	r2, #1
 80172be:	6122      	str	r2, [r4, #16]
 80172c0:	b1d5      	cbz	r5, 80172f8 <__d2b+0x98>
 80172c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80172c6:	4405      	add	r5, r0
 80172c8:	f8c9 5000 	str.w	r5, [r9]
 80172cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80172d0:	f8c8 0000 	str.w	r0, [r8]
 80172d4:	4620      	mov	r0, r4
 80172d6:	b003      	add	sp, #12
 80172d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80172e0:	e7d5      	b.n	801728e <__d2b+0x2e>
 80172e2:	6161      	str	r1, [r4, #20]
 80172e4:	e7e5      	b.n	80172b2 <__d2b+0x52>
 80172e6:	a801      	add	r0, sp, #4
 80172e8:	f7ff fcde 	bl	8016ca8 <__lo0bits>
 80172ec:	9b01      	ldr	r3, [sp, #4]
 80172ee:	6163      	str	r3, [r4, #20]
 80172f0:	2201      	movs	r2, #1
 80172f2:	6122      	str	r2, [r4, #16]
 80172f4:	3020      	adds	r0, #32
 80172f6:	e7e3      	b.n	80172c0 <__d2b+0x60>
 80172f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80172fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017300:	f8c9 0000 	str.w	r0, [r9]
 8017304:	6918      	ldr	r0, [r3, #16]
 8017306:	f7ff fcaf 	bl	8016c68 <__hi0bits>
 801730a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801730e:	e7df      	b.n	80172d0 <__d2b+0x70>
 8017310:	08019cd8 	.word	0x08019cd8
 8017314:	08019dc8 	.word	0x08019dc8

08017318 <__ratio>:
 8017318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801731c:	4688      	mov	r8, r1
 801731e:	4669      	mov	r1, sp
 8017320:	4681      	mov	r9, r0
 8017322:	f7ff ff4d 	bl	80171c0 <__b2d>
 8017326:	a901      	add	r1, sp, #4
 8017328:	4640      	mov	r0, r8
 801732a:	ec55 4b10 	vmov	r4, r5, d0
 801732e:	f7ff ff47 	bl	80171c0 <__b2d>
 8017332:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017336:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801733a:	eba3 0c02 	sub.w	ip, r3, r2
 801733e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017342:	1a9b      	subs	r3, r3, r2
 8017344:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017348:	ec51 0b10 	vmov	r0, r1, d0
 801734c:	2b00      	cmp	r3, #0
 801734e:	bfd6      	itet	le
 8017350:	460a      	movle	r2, r1
 8017352:	462a      	movgt	r2, r5
 8017354:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017358:	468b      	mov	fp, r1
 801735a:	462f      	mov	r7, r5
 801735c:	bfd4      	ite	le
 801735e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017362:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017366:	4620      	mov	r0, r4
 8017368:	ee10 2a10 	vmov	r2, s0
 801736c:	465b      	mov	r3, fp
 801736e:	4639      	mov	r1, r7
 8017370:	f7e9 fa94 	bl	800089c <__aeabi_ddiv>
 8017374:	ec41 0b10 	vmov	d0, r0, r1
 8017378:	b003      	add	sp, #12
 801737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801737e <__copybits>:
 801737e:	3901      	subs	r1, #1
 8017380:	b570      	push	{r4, r5, r6, lr}
 8017382:	1149      	asrs	r1, r1, #5
 8017384:	6914      	ldr	r4, [r2, #16]
 8017386:	3101      	adds	r1, #1
 8017388:	f102 0314 	add.w	r3, r2, #20
 801738c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017390:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017394:	1f05      	subs	r5, r0, #4
 8017396:	42a3      	cmp	r3, r4
 8017398:	d30c      	bcc.n	80173b4 <__copybits+0x36>
 801739a:	1aa3      	subs	r3, r4, r2
 801739c:	3b11      	subs	r3, #17
 801739e:	f023 0303 	bic.w	r3, r3, #3
 80173a2:	3211      	adds	r2, #17
 80173a4:	42a2      	cmp	r2, r4
 80173a6:	bf88      	it	hi
 80173a8:	2300      	movhi	r3, #0
 80173aa:	4418      	add	r0, r3
 80173ac:	2300      	movs	r3, #0
 80173ae:	4288      	cmp	r0, r1
 80173b0:	d305      	bcc.n	80173be <__copybits+0x40>
 80173b2:	bd70      	pop	{r4, r5, r6, pc}
 80173b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80173b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80173bc:	e7eb      	b.n	8017396 <__copybits+0x18>
 80173be:	f840 3b04 	str.w	r3, [r0], #4
 80173c2:	e7f4      	b.n	80173ae <__copybits+0x30>

080173c4 <__any_on>:
 80173c4:	f100 0214 	add.w	r2, r0, #20
 80173c8:	6900      	ldr	r0, [r0, #16]
 80173ca:	114b      	asrs	r3, r1, #5
 80173cc:	4298      	cmp	r0, r3
 80173ce:	b510      	push	{r4, lr}
 80173d0:	db11      	blt.n	80173f6 <__any_on+0x32>
 80173d2:	dd0a      	ble.n	80173ea <__any_on+0x26>
 80173d4:	f011 011f 	ands.w	r1, r1, #31
 80173d8:	d007      	beq.n	80173ea <__any_on+0x26>
 80173da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80173de:	fa24 f001 	lsr.w	r0, r4, r1
 80173e2:	fa00 f101 	lsl.w	r1, r0, r1
 80173e6:	428c      	cmp	r4, r1
 80173e8:	d10b      	bne.n	8017402 <__any_on+0x3e>
 80173ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80173ee:	4293      	cmp	r3, r2
 80173f0:	d803      	bhi.n	80173fa <__any_on+0x36>
 80173f2:	2000      	movs	r0, #0
 80173f4:	bd10      	pop	{r4, pc}
 80173f6:	4603      	mov	r3, r0
 80173f8:	e7f7      	b.n	80173ea <__any_on+0x26>
 80173fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80173fe:	2900      	cmp	r1, #0
 8017400:	d0f5      	beq.n	80173ee <__any_on+0x2a>
 8017402:	2001      	movs	r0, #1
 8017404:	e7f6      	b.n	80173f4 <__any_on+0x30>

08017406 <_calloc_r>:
 8017406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017408:	fba1 2402 	umull	r2, r4, r1, r2
 801740c:	b94c      	cbnz	r4, 8017422 <_calloc_r+0x1c>
 801740e:	4611      	mov	r1, r2
 8017410:	9201      	str	r2, [sp, #4]
 8017412:	f000 f87b 	bl	801750c <_malloc_r>
 8017416:	9a01      	ldr	r2, [sp, #4]
 8017418:	4605      	mov	r5, r0
 801741a:	b930      	cbnz	r0, 801742a <_calloc_r+0x24>
 801741c:	4628      	mov	r0, r5
 801741e:	b003      	add	sp, #12
 8017420:	bd30      	pop	{r4, r5, pc}
 8017422:	220c      	movs	r2, #12
 8017424:	6002      	str	r2, [r0, #0]
 8017426:	2500      	movs	r5, #0
 8017428:	e7f8      	b.n	801741c <_calloc_r+0x16>
 801742a:	4621      	mov	r1, r4
 801742c:	f7fb ff7c 	bl	8013328 <memset>
 8017430:	e7f4      	b.n	801741c <_calloc_r+0x16>
	...

08017434 <_free_r>:
 8017434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017436:	2900      	cmp	r1, #0
 8017438:	d044      	beq.n	80174c4 <_free_r+0x90>
 801743a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801743e:	9001      	str	r0, [sp, #4]
 8017440:	2b00      	cmp	r3, #0
 8017442:	f1a1 0404 	sub.w	r4, r1, #4
 8017446:	bfb8      	it	lt
 8017448:	18e4      	addlt	r4, r4, r3
 801744a:	f000 fced 	bl	8017e28 <__malloc_lock>
 801744e:	4a1e      	ldr	r2, [pc, #120]	; (80174c8 <_free_r+0x94>)
 8017450:	9801      	ldr	r0, [sp, #4]
 8017452:	6813      	ldr	r3, [r2, #0]
 8017454:	b933      	cbnz	r3, 8017464 <_free_r+0x30>
 8017456:	6063      	str	r3, [r4, #4]
 8017458:	6014      	str	r4, [r2, #0]
 801745a:	b003      	add	sp, #12
 801745c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017460:	f000 bce8 	b.w	8017e34 <__malloc_unlock>
 8017464:	42a3      	cmp	r3, r4
 8017466:	d908      	bls.n	801747a <_free_r+0x46>
 8017468:	6825      	ldr	r5, [r4, #0]
 801746a:	1961      	adds	r1, r4, r5
 801746c:	428b      	cmp	r3, r1
 801746e:	bf01      	itttt	eq
 8017470:	6819      	ldreq	r1, [r3, #0]
 8017472:	685b      	ldreq	r3, [r3, #4]
 8017474:	1949      	addeq	r1, r1, r5
 8017476:	6021      	streq	r1, [r4, #0]
 8017478:	e7ed      	b.n	8017456 <_free_r+0x22>
 801747a:	461a      	mov	r2, r3
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	b10b      	cbz	r3, 8017484 <_free_r+0x50>
 8017480:	42a3      	cmp	r3, r4
 8017482:	d9fa      	bls.n	801747a <_free_r+0x46>
 8017484:	6811      	ldr	r1, [r2, #0]
 8017486:	1855      	adds	r5, r2, r1
 8017488:	42a5      	cmp	r5, r4
 801748a:	d10b      	bne.n	80174a4 <_free_r+0x70>
 801748c:	6824      	ldr	r4, [r4, #0]
 801748e:	4421      	add	r1, r4
 8017490:	1854      	adds	r4, r2, r1
 8017492:	42a3      	cmp	r3, r4
 8017494:	6011      	str	r1, [r2, #0]
 8017496:	d1e0      	bne.n	801745a <_free_r+0x26>
 8017498:	681c      	ldr	r4, [r3, #0]
 801749a:	685b      	ldr	r3, [r3, #4]
 801749c:	6053      	str	r3, [r2, #4]
 801749e:	4421      	add	r1, r4
 80174a0:	6011      	str	r1, [r2, #0]
 80174a2:	e7da      	b.n	801745a <_free_r+0x26>
 80174a4:	d902      	bls.n	80174ac <_free_r+0x78>
 80174a6:	230c      	movs	r3, #12
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	e7d6      	b.n	801745a <_free_r+0x26>
 80174ac:	6825      	ldr	r5, [r4, #0]
 80174ae:	1961      	adds	r1, r4, r5
 80174b0:	428b      	cmp	r3, r1
 80174b2:	bf04      	itt	eq
 80174b4:	6819      	ldreq	r1, [r3, #0]
 80174b6:	685b      	ldreq	r3, [r3, #4]
 80174b8:	6063      	str	r3, [r4, #4]
 80174ba:	bf04      	itt	eq
 80174bc:	1949      	addeq	r1, r1, r5
 80174be:	6021      	streq	r1, [r4, #0]
 80174c0:	6054      	str	r4, [r2, #4]
 80174c2:	e7ca      	b.n	801745a <_free_r+0x26>
 80174c4:	b003      	add	sp, #12
 80174c6:	bd30      	pop	{r4, r5, pc}
 80174c8:	200002c0 	.word	0x200002c0

080174cc <sbrk_aligned>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4e0e      	ldr	r6, [pc, #56]	; (8017508 <sbrk_aligned+0x3c>)
 80174d0:	460c      	mov	r4, r1
 80174d2:	6831      	ldr	r1, [r6, #0]
 80174d4:	4605      	mov	r5, r0
 80174d6:	b911      	cbnz	r1, 80174de <sbrk_aligned+0x12>
 80174d8:	f000 fb92 	bl	8017c00 <_sbrk_r>
 80174dc:	6030      	str	r0, [r6, #0]
 80174de:	4621      	mov	r1, r4
 80174e0:	4628      	mov	r0, r5
 80174e2:	f000 fb8d 	bl	8017c00 <_sbrk_r>
 80174e6:	1c43      	adds	r3, r0, #1
 80174e8:	d00a      	beq.n	8017500 <sbrk_aligned+0x34>
 80174ea:	1cc4      	adds	r4, r0, #3
 80174ec:	f024 0403 	bic.w	r4, r4, #3
 80174f0:	42a0      	cmp	r0, r4
 80174f2:	d007      	beq.n	8017504 <sbrk_aligned+0x38>
 80174f4:	1a21      	subs	r1, r4, r0
 80174f6:	4628      	mov	r0, r5
 80174f8:	f000 fb82 	bl	8017c00 <_sbrk_r>
 80174fc:	3001      	adds	r0, #1
 80174fe:	d101      	bne.n	8017504 <sbrk_aligned+0x38>
 8017500:	f04f 34ff 	mov.w	r4, #4294967295
 8017504:	4620      	mov	r0, r4
 8017506:	bd70      	pop	{r4, r5, r6, pc}
 8017508:	200002c4 	.word	0x200002c4

0801750c <_malloc_r>:
 801750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017510:	1ccd      	adds	r5, r1, #3
 8017512:	f025 0503 	bic.w	r5, r5, #3
 8017516:	3508      	adds	r5, #8
 8017518:	2d0c      	cmp	r5, #12
 801751a:	bf38      	it	cc
 801751c:	250c      	movcc	r5, #12
 801751e:	2d00      	cmp	r5, #0
 8017520:	4607      	mov	r7, r0
 8017522:	db01      	blt.n	8017528 <_malloc_r+0x1c>
 8017524:	42a9      	cmp	r1, r5
 8017526:	d905      	bls.n	8017534 <_malloc_r+0x28>
 8017528:	230c      	movs	r3, #12
 801752a:	603b      	str	r3, [r7, #0]
 801752c:	2600      	movs	r6, #0
 801752e:	4630      	mov	r0, r6
 8017530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017534:	4e2e      	ldr	r6, [pc, #184]	; (80175f0 <_malloc_r+0xe4>)
 8017536:	f000 fc77 	bl	8017e28 <__malloc_lock>
 801753a:	6833      	ldr	r3, [r6, #0]
 801753c:	461c      	mov	r4, r3
 801753e:	bb34      	cbnz	r4, 801758e <_malloc_r+0x82>
 8017540:	4629      	mov	r1, r5
 8017542:	4638      	mov	r0, r7
 8017544:	f7ff ffc2 	bl	80174cc <sbrk_aligned>
 8017548:	1c43      	adds	r3, r0, #1
 801754a:	4604      	mov	r4, r0
 801754c:	d14d      	bne.n	80175ea <_malloc_r+0xde>
 801754e:	6834      	ldr	r4, [r6, #0]
 8017550:	4626      	mov	r6, r4
 8017552:	2e00      	cmp	r6, #0
 8017554:	d140      	bne.n	80175d8 <_malloc_r+0xcc>
 8017556:	6823      	ldr	r3, [r4, #0]
 8017558:	4631      	mov	r1, r6
 801755a:	4638      	mov	r0, r7
 801755c:	eb04 0803 	add.w	r8, r4, r3
 8017560:	f000 fb4e 	bl	8017c00 <_sbrk_r>
 8017564:	4580      	cmp	r8, r0
 8017566:	d13a      	bne.n	80175de <_malloc_r+0xd2>
 8017568:	6821      	ldr	r1, [r4, #0]
 801756a:	3503      	adds	r5, #3
 801756c:	1a6d      	subs	r5, r5, r1
 801756e:	f025 0503 	bic.w	r5, r5, #3
 8017572:	3508      	adds	r5, #8
 8017574:	2d0c      	cmp	r5, #12
 8017576:	bf38      	it	cc
 8017578:	250c      	movcc	r5, #12
 801757a:	4629      	mov	r1, r5
 801757c:	4638      	mov	r0, r7
 801757e:	f7ff ffa5 	bl	80174cc <sbrk_aligned>
 8017582:	3001      	adds	r0, #1
 8017584:	d02b      	beq.n	80175de <_malloc_r+0xd2>
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	442b      	add	r3, r5
 801758a:	6023      	str	r3, [r4, #0]
 801758c:	e00e      	b.n	80175ac <_malloc_r+0xa0>
 801758e:	6822      	ldr	r2, [r4, #0]
 8017590:	1b52      	subs	r2, r2, r5
 8017592:	d41e      	bmi.n	80175d2 <_malloc_r+0xc6>
 8017594:	2a0b      	cmp	r2, #11
 8017596:	d916      	bls.n	80175c6 <_malloc_r+0xba>
 8017598:	1961      	adds	r1, r4, r5
 801759a:	42a3      	cmp	r3, r4
 801759c:	6025      	str	r5, [r4, #0]
 801759e:	bf18      	it	ne
 80175a0:	6059      	strne	r1, [r3, #4]
 80175a2:	6863      	ldr	r3, [r4, #4]
 80175a4:	bf08      	it	eq
 80175a6:	6031      	streq	r1, [r6, #0]
 80175a8:	5162      	str	r2, [r4, r5]
 80175aa:	604b      	str	r3, [r1, #4]
 80175ac:	4638      	mov	r0, r7
 80175ae:	f104 060b 	add.w	r6, r4, #11
 80175b2:	f000 fc3f 	bl	8017e34 <__malloc_unlock>
 80175b6:	f026 0607 	bic.w	r6, r6, #7
 80175ba:	1d23      	adds	r3, r4, #4
 80175bc:	1af2      	subs	r2, r6, r3
 80175be:	d0b6      	beq.n	801752e <_malloc_r+0x22>
 80175c0:	1b9b      	subs	r3, r3, r6
 80175c2:	50a3      	str	r3, [r4, r2]
 80175c4:	e7b3      	b.n	801752e <_malloc_r+0x22>
 80175c6:	6862      	ldr	r2, [r4, #4]
 80175c8:	42a3      	cmp	r3, r4
 80175ca:	bf0c      	ite	eq
 80175cc:	6032      	streq	r2, [r6, #0]
 80175ce:	605a      	strne	r2, [r3, #4]
 80175d0:	e7ec      	b.n	80175ac <_malloc_r+0xa0>
 80175d2:	4623      	mov	r3, r4
 80175d4:	6864      	ldr	r4, [r4, #4]
 80175d6:	e7b2      	b.n	801753e <_malloc_r+0x32>
 80175d8:	4634      	mov	r4, r6
 80175da:	6876      	ldr	r6, [r6, #4]
 80175dc:	e7b9      	b.n	8017552 <_malloc_r+0x46>
 80175de:	230c      	movs	r3, #12
 80175e0:	603b      	str	r3, [r7, #0]
 80175e2:	4638      	mov	r0, r7
 80175e4:	f000 fc26 	bl	8017e34 <__malloc_unlock>
 80175e8:	e7a1      	b.n	801752e <_malloc_r+0x22>
 80175ea:	6025      	str	r5, [r4, #0]
 80175ec:	e7de      	b.n	80175ac <_malloc_r+0xa0>
 80175ee:	bf00      	nop
 80175f0:	200002c0 	.word	0x200002c0

080175f4 <__ssputs_r>:
 80175f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175f8:	688e      	ldr	r6, [r1, #8]
 80175fa:	429e      	cmp	r6, r3
 80175fc:	4682      	mov	sl, r0
 80175fe:	460c      	mov	r4, r1
 8017600:	4690      	mov	r8, r2
 8017602:	461f      	mov	r7, r3
 8017604:	d838      	bhi.n	8017678 <__ssputs_r+0x84>
 8017606:	898a      	ldrh	r2, [r1, #12]
 8017608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801760c:	d032      	beq.n	8017674 <__ssputs_r+0x80>
 801760e:	6825      	ldr	r5, [r4, #0]
 8017610:	6909      	ldr	r1, [r1, #16]
 8017612:	eba5 0901 	sub.w	r9, r5, r1
 8017616:	6965      	ldr	r5, [r4, #20]
 8017618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801761c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017620:	3301      	adds	r3, #1
 8017622:	444b      	add	r3, r9
 8017624:	106d      	asrs	r5, r5, #1
 8017626:	429d      	cmp	r5, r3
 8017628:	bf38      	it	cc
 801762a:	461d      	movcc	r5, r3
 801762c:	0553      	lsls	r3, r2, #21
 801762e:	d531      	bpl.n	8017694 <__ssputs_r+0xa0>
 8017630:	4629      	mov	r1, r5
 8017632:	f7ff ff6b 	bl	801750c <_malloc_r>
 8017636:	4606      	mov	r6, r0
 8017638:	b950      	cbnz	r0, 8017650 <__ssputs_r+0x5c>
 801763a:	230c      	movs	r3, #12
 801763c:	f8ca 3000 	str.w	r3, [sl]
 8017640:	89a3      	ldrh	r3, [r4, #12]
 8017642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017646:	81a3      	strh	r3, [r4, #12]
 8017648:	f04f 30ff 	mov.w	r0, #4294967295
 801764c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017650:	6921      	ldr	r1, [r4, #16]
 8017652:	464a      	mov	r2, r9
 8017654:	f7fb fe5a 	bl	801330c <memcpy>
 8017658:	89a3      	ldrh	r3, [r4, #12]
 801765a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017662:	81a3      	strh	r3, [r4, #12]
 8017664:	6126      	str	r6, [r4, #16]
 8017666:	6165      	str	r5, [r4, #20]
 8017668:	444e      	add	r6, r9
 801766a:	eba5 0509 	sub.w	r5, r5, r9
 801766e:	6026      	str	r6, [r4, #0]
 8017670:	60a5      	str	r5, [r4, #8]
 8017672:	463e      	mov	r6, r7
 8017674:	42be      	cmp	r6, r7
 8017676:	d900      	bls.n	801767a <__ssputs_r+0x86>
 8017678:	463e      	mov	r6, r7
 801767a:	6820      	ldr	r0, [r4, #0]
 801767c:	4632      	mov	r2, r6
 801767e:	4641      	mov	r1, r8
 8017680:	f000 fbb8 	bl	8017df4 <memmove>
 8017684:	68a3      	ldr	r3, [r4, #8]
 8017686:	1b9b      	subs	r3, r3, r6
 8017688:	60a3      	str	r3, [r4, #8]
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	4433      	add	r3, r6
 801768e:	6023      	str	r3, [r4, #0]
 8017690:	2000      	movs	r0, #0
 8017692:	e7db      	b.n	801764c <__ssputs_r+0x58>
 8017694:	462a      	mov	r2, r5
 8017696:	f000 fbd3 	bl	8017e40 <_realloc_r>
 801769a:	4606      	mov	r6, r0
 801769c:	2800      	cmp	r0, #0
 801769e:	d1e1      	bne.n	8017664 <__ssputs_r+0x70>
 80176a0:	6921      	ldr	r1, [r4, #16]
 80176a2:	4650      	mov	r0, sl
 80176a4:	f7ff fec6 	bl	8017434 <_free_r>
 80176a8:	e7c7      	b.n	801763a <__ssputs_r+0x46>
	...

080176ac <_svfiprintf_r>:
 80176ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b0:	4698      	mov	r8, r3
 80176b2:	898b      	ldrh	r3, [r1, #12]
 80176b4:	061b      	lsls	r3, r3, #24
 80176b6:	b09d      	sub	sp, #116	; 0x74
 80176b8:	4607      	mov	r7, r0
 80176ba:	460d      	mov	r5, r1
 80176bc:	4614      	mov	r4, r2
 80176be:	d50e      	bpl.n	80176de <_svfiprintf_r+0x32>
 80176c0:	690b      	ldr	r3, [r1, #16]
 80176c2:	b963      	cbnz	r3, 80176de <_svfiprintf_r+0x32>
 80176c4:	2140      	movs	r1, #64	; 0x40
 80176c6:	f7ff ff21 	bl	801750c <_malloc_r>
 80176ca:	6028      	str	r0, [r5, #0]
 80176cc:	6128      	str	r0, [r5, #16]
 80176ce:	b920      	cbnz	r0, 80176da <_svfiprintf_r+0x2e>
 80176d0:	230c      	movs	r3, #12
 80176d2:	603b      	str	r3, [r7, #0]
 80176d4:	f04f 30ff 	mov.w	r0, #4294967295
 80176d8:	e0d1      	b.n	801787e <_svfiprintf_r+0x1d2>
 80176da:	2340      	movs	r3, #64	; 0x40
 80176dc:	616b      	str	r3, [r5, #20]
 80176de:	2300      	movs	r3, #0
 80176e0:	9309      	str	r3, [sp, #36]	; 0x24
 80176e2:	2320      	movs	r3, #32
 80176e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80176ec:	2330      	movs	r3, #48	; 0x30
 80176ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017898 <_svfiprintf_r+0x1ec>
 80176f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176f6:	f04f 0901 	mov.w	r9, #1
 80176fa:	4623      	mov	r3, r4
 80176fc:	469a      	mov	sl, r3
 80176fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017702:	b10a      	cbz	r2, 8017708 <_svfiprintf_r+0x5c>
 8017704:	2a25      	cmp	r2, #37	; 0x25
 8017706:	d1f9      	bne.n	80176fc <_svfiprintf_r+0x50>
 8017708:	ebba 0b04 	subs.w	fp, sl, r4
 801770c:	d00b      	beq.n	8017726 <_svfiprintf_r+0x7a>
 801770e:	465b      	mov	r3, fp
 8017710:	4622      	mov	r2, r4
 8017712:	4629      	mov	r1, r5
 8017714:	4638      	mov	r0, r7
 8017716:	f7ff ff6d 	bl	80175f4 <__ssputs_r>
 801771a:	3001      	adds	r0, #1
 801771c:	f000 80aa 	beq.w	8017874 <_svfiprintf_r+0x1c8>
 8017720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017722:	445a      	add	r2, fp
 8017724:	9209      	str	r2, [sp, #36]	; 0x24
 8017726:	f89a 3000 	ldrb.w	r3, [sl]
 801772a:	2b00      	cmp	r3, #0
 801772c:	f000 80a2 	beq.w	8017874 <_svfiprintf_r+0x1c8>
 8017730:	2300      	movs	r3, #0
 8017732:	f04f 32ff 	mov.w	r2, #4294967295
 8017736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801773a:	f10a 0a01 	add.w	sl, sl, #1
 801773e:	9304      	str	r3, [sp, #16]
 8017740:	9307      	str	r3, [sp, #28]
 8017742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017746:	931a      	str	r3, [sp, #104]	; 0x68
 8017748:	4654      	mov	r4, sl
 801774a:	2205      	movs	r2, #5
 801774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017750:	4851      	ldr	r0, [pc, #324]	; (8017898 <_svfiprintf_r+0x1ec>)
 8017752:	f7e8 fd6d 	bl	8000230 <memchr>
 8017756:	9a04      	ldr	r2, [sp, #16]
 8017758:	b9d8      	cbnz	r0, 8017792 <_svfiprintf_r+0xe6>
 801775a:	06d0      	lsls	r0, r2, #27
 801775c:	bf44      	itt	mi
 801775e:	2320      	movmi	r3, #32
 8017760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017764:	0711      	lsls	r1, r2, #28
 8017766:	bf44      	itt	mi
 8017768:	232b      	movmi	r3, #43	; 0x2b
 801776a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801776e:	f89a 3000 	ldrb.w	r3, [sl]
 8017772:	2b2a      	cmp	r3, #42	; 0x2a
 8017774:	d015      	beq.n	80177a2 <_svfiprintf_r+0xf6>
 8017776:	9a07      	ldr	r2, [sp, #28]
 8017778:	4654      	mov	r4, sl
 801777a:	2000      	movs	r0, #0
 801777c:	f04f 0c0a 	mov.w	ip, #10
 8017780:	4621      	mov	r1, r4
 8017782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017786:	3b30      	subs	r3, #48	; 0x30
 8017788:	2b09      	cmp	r3, #9
 801778a:	d94e      	bls.n	801782a <_svfiprintf_r+0x17e>
 801778c:	b1b0      	cbz	r0, 80177bc <_svfiprintf_r+0x110>
 801778e:	9207      	str	r2, [sp, #28]
 8017790:	e014      	b.n	80177bc <_svfiprintf_r+0x110>
 8017792:	eba0 0308 	sub.w	r3, r0, r8
 8017796:	fa09 f303 	lsl.w	r3, r9, r3
 801779a:	4313      	orrs	r3, r2
 801779c:	9304      	str	r3, [sp, #16]
 801779e:	46a2      	mov	sl, r4
 80177a0:	e7d2      	b.n	8017748 <_svfiprintf_r+0x9c>
 80177a2:	9b03      	ldr	r3, [sp, #12]
 80177a4:	1d19      	adds	r1, r3, #4
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	9103      	str	r1, [sp, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	bfbb      	ittet	lt
 80177ae:	425b      	neglt	r3, r3
 80177b0:	f042 0202 	orrlt.w	r2, r2, #2
 80177b4:	9307      	strge	r3, [sp, #28]
 80177b6:	9307      	strlt	r3, [sp, #28]
 80177b8:	bfb8      	it	lt
 80177ba:	9204      	strlt	r2, [sp, #16]
 80177bc:	7823      	ldrb	r3, [r4, #0]
 80177be:	2b2e      	cmp	r3, #46	; 0x2e
 80177c0:	d10c      	bne.n	80177dc <_svfiprintf_r+0x130>
 80177c2:	7863      	ldrb	r3, [r4, #1]
 80177c4:	2b2a      	cmp	r3, #42	; 0x2a
 80177c6:	d135      	bne.n	8017834 <_svfiprintf_r+0x188>
 80177c8:	9b03      	ldr	r3, [sp, #12]
 80177ca:	1d1a      	adds	r2, r3, #4
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	9203      	str	r2, [sp, #12]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	bfb8      	it	lt
 80177d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80177d8:	3402      	adds	r4, #2
 80177da:	9305      	str	r3, [sp, #20]
 80177dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80178a8 <_svfiprintf_r+0x1fc>
 80177e0:	7821      	ldrb	r1, [r4, #0]
 80177e2:	2203      	movs	r2, #3
 80177e4:	4650      	mov	r0, sl
 80177e6:	f7e8 fd23 	bl	8000230 <memchr>
 80177ea:	b140      	cbz	r0, 80177fe <_svfiprintf_r+0x152>
 80177ec:	2340      	movs	r3, #64	; 0x40
 80177ee:	eba0 000a 	sub.w	r0, r0, sl
 80177f2:	fa03 f000 	lsl.w	r0, r3, r0
 80177f6:	9b04      	ldr	r3, [sp, #16]
 80177f8:	4303      	orrs	r3, r0
 80177fa:	3401      	adds	r4, #1
 80177fc:	9304      	str	r3, [sp, #16]
 80177fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017802:	4826      	ldr	r0, [pc, #152]	; (801789c <_svfiprintf_r+0x1f0>)
 8017804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017808:	2206      	movs	r2, #6
 801780a:	f7e8 fd11 	bl	8000230 <memchr>
 801780e:	2800      	cmp	r0, #0
 8017810:	d038      	beq.n	8017884 <_svfiprintf_r+0x1d8>
 8017812:	4b23      	ldr	r3, [pc, #140]	; (80178a0 <_svfiprintf_r+0x1f4>)
 8017814:	bb1b      	cbnz	r3, 801785e <_svfiprintf_r+0x1b2>
 8017816:	9b03      	ldr	r3, [sp, #12]
 8017818:	3307      	adds	r3, #7
 801781a:	f023 0307 	bic.w	r3, r3, #7
 801781e:	3308      	adds	r3, #8
 8017820:	9303      	str	r3, [sp, #12]
 8017822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017824:	4433      	add	r3, r6
 8017826:	9309      	str	r3, [sp, #36]	; 0x24
 8017828:	e767      	b.n	80176fa <_svfiprintf_r+0x4e>
 801782a:	fb0c 3202 	mla	r2, ip, r2, r3
 801782e:	460c      	mov	r4, r1
 8017830:	2001      	movs	r0, #1
 8017832:	e7a5      	b.n	8017780 <_svfiprintf_r+0xd4>
 8017834:	2300      	movs	r3, #0
 8017836:	3401      	adds	r4, #1
 8017838:	9305      	str	r3, [sp, #20]
 801783a:	4619      	mov	r1, r3
 801783c:	f04f 0c0a 	mov.w	ip, #10
 8017840:	4620      	mov	r0, r4
 8017842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017846:	3a30      	subs	r2, #48	; 0x30
 8017848:	2a09      	cmp	r2, #9
 801784a:	d903      	bls.n	8017854 <_svfiprintf_r+0x1a8>
 801784c:	2b00      	cmp	r3, #0
 801784e:	d0c5      	beq.n	80177dc <_svfiprintf_r+0x130>
 8017850:	9105      	str	r1, [sp, #20]
 8017852:	e7c3      	b.n	80177dc <_svfiprintf_r+0x130>
 8017854:	fb0c 2101 	mla	r1, ip, r1, r2
 8017858:	4604      	mov	r4, r0
 801785a:	2301      	movs	r3, #1
 801785c:	e7f0      	b.n	8017840 <_svfiprintf_r+0x194>
 801785e:	ab03      	add	r3, sp, #12
 8017860:	9300      	str	r3, [sp, #0]
 8017862:	462a      	mov	r2, r5
 8017864:	4b0f      	ldr	r3, [pc, #60]	; (80178a4 <_svfiprintf_r+0x1f8>)
 8017866:	a904      	add	r1, sp, #16
 8017868:	4638      	mov	r0, r7
 801786a:	f7fb fe05 	bl	8013478 <_printf_float>
 801786e:	1c42      	adds	r2, r0, #1
 8017870:	4606      	mov	r6, r0
 8017872:	d1d6      	bne.n	8017822 <_svfiprintf_r+0x176>
 8017874:	89ab      	ldrh	r3, [r5, #12]
 8017876:	065b      	lsls	r3, r3, #25
 8017878:	f53f af2c 	bmi.w	80176d4 <_svfiprintf_r+0x28>
 801787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801787e:	b01d      	add	sp, #116	; 0x74
 8017880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017884:	ab03      	add	r3, sp, #12
 8017886:	9300      	str	r3, [sp, #0]
 8017888:	462a      	mov	r2, r5
 801788a:	4b06      	ldr	r3, [pc, #24]	; (80178a4 <_svfiprintf_r+0x1f8>)
 801788c:	a904      	add	r1, sp, #16
 801788e:	4638      	mov	r0, r7
 8017890:	f7fc f896 	bl	80139c0 <_printf_i>
 8017894:	e7eb      	b.n	801786e <_svfiprintf_r+0x1c2>
 8017896:	bf00      	nop
 8017898:	08019f24 	.word	0x08019f24
 801789c:	08019f2e 	.word	0x08019f2e
 80178a0:	08013479 	.word	0x08013479
 80178a4:	080175f5 	.word	0x080175f5
 80178a8:	08019f2a 	.word	0x08019f2a

080178ac <__sfputc_r>:
 80178ac:	6893      	ldr	r3, [r2, #8]
 80178ae:	3b01      	subs	r3, #1
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	b410      	push	{r4}
 80178b4:	6093      	str	r3, [r2, #8]
 80178b6:	da08      	bge.n	80178ca <__sfputc_r+0x1e>
 80178b8:	6994      	ldr	r4, [r2, #24]
 80178ba:	42a3      	cmp	r3, r4
 80178bc:	db01      	blt.n	80178c2 <__sfputc_r+0x16>
 80178be:	290a      	cmp	r1, #10
 80178c0:	d103      	bne.n	80178ca <__sfputc_r+0x1e>
 80178c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178c6:	f7fd bbf7 	b.w	80150b8 <__swbuf_r>
 80178ca:	6813      	ldr	r3, [r2, #0]
 80178cc:	1c58      	adds	r0, r3, #1
 80178ce:	6010      	str	r0, [r2, #0]
 80178d0:	7019      	strb	r1, [r3, #0]
 80178d2:	4608      	mov	r0, r1
 80178d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178d8:	4770      	bx	lr

080178da <__sfputs_r>:
 80178da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178dc:	4606      	mov	r6, r0
 80178de:	460f      	mov	r7, r1
 80178e0:	4614      	mov	r4, r2
 80178e2:	18d5      	adds	r5, r2, r3
 80178e4:	42ac      	cmp	r4, r5
 80178e6:	d101      	bne.n	80178ec <__sfputs_r+0x12>
 80178e8:	2000      	movs	r0, #0
 80178ea:	e007      	b.n	80178fc <__sfputs_r+0x22>
 80178ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178f0:	463a      	mov	r2, r7
 80178f2:	4630      	mov	r0, r6
 80178f4:	f7ff ffda 	bl	80178ac <__sfputc_r>
 80178f8:	1c43      	adds	r3, r0, #1
 80178fa:	d1f3      	bne.n	80178e4 <__sfputs_r+0xa>
 80178fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017900 <_vfiprintf_r>:
 8017900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017904:	460d      	mov	r5, r1
 8017906:	b09d      	sub	sp, #116	; 0x74
 8017908:	4614      	mov	r4, r2
 801790a:	4698      	mov	r8, r3
 801790c:	4606      	mov	r6, r0
 801790e:	b118      	cbz	r0, 8017918 <_vfiprintf_r+0x18>
 8017910:	6983      	ldr	r3, [r0, #24]
 8017912:	b90b      	cbnz	r3, 8017918 <_vfiprintf_r+0x18>
 8017914:	f7fe fc24 	bl	8016160 <__sinit>
 8017918:	4b89      	ldr	r3, [pc, #548]	; (8017b40 <_vfiprintf_r+0x240>)
 801791a:	429d      	cmp	r5, r3
 801791c:	d11b      	bne.n	8017956 <_vfiprintf_r+0x56>
 801791e:	6875      	ldr	r5, [r6, #4]
 8017920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017922:	07d9      	lsls	r1, r3, #31
 8017924:	d405      	bmi.n	8017932 <_vfiprintf_r+0x32>
 8017926:	89ab      	ldrh	r3, [r5, #12]
 8017928:	059a      	lsls	r2, r3, #22
 801792a:	d402      	bmi.n	8017932 <_vfiprintf_r+0x32>
 801792c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801792e:	f7ff f828 	bl	8016982 <__retarget_lock_acquire_recursive>
 8017932:	89ab      	ldrh	r3, [r5, #12]
 8017934:	071b      	lsls	r3, r3, #28
 8017936:	d501      	bpl.n	801793c <_vfiprintf_r+0x3c>
 8017938:	692b      	ldr	r3, [r5, #16]
 801793a:	b9eb      	cbnz	r3, 8017978 <_vfiprintf_r+0x78>
 801793c:	4629      	mov	r1, r5
 801793e:	4630      	mov	r0, r6
 8017940:	f7fd fc0c 	bl	801515c <__swsetup_r>
 8017944:	b1c0      	cbz	r0, 8017978 <_vfiprintf_r+0x78>
 8017946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017948:	07dc      	lsls	r4, r3, #31
 801794a:	d50e      	bpl.n	801796a <_vfiprintf_r+0x6a>
 801794c:	f04f 30ff 	mov.w	r0, #4294967295
 8017950:	b01d      	add	sp, #116	; 0x74
 8017952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017956:	4b7b      	ldr	r3, [pc, #492]	; (8017b44 <_vfiprintf_r+0x244>)
 8017958:	429d      	cmp	r5, r3
 801795a:	d101      	bne.n	8017960 <_vfiprintf_r+0x60>
 801795c:	68b5      	ldr	r5, [r6, #8]
 801795e:	e7df      	b.n	8017920 <_vfiprintf_r+0x20>
 8017960:	4b79      	ldr	r3, [pc, #484]	; (8017b48 <_vfiprintf_r+0x248>)
 8017962:	429d      	cmp	r5, r3
 8017964:	bf08      	it	eq
 8017966:	68f5      	ldreq	r5, [r6, #12]
 8017968:	e7da      	b.n	8017920 <_vfiprintf_r+0x20>
 801796a:	89ab      	ldrh	r3, [r5, #12]
 801796c:	0598      	lsls	r0, r3, #22
 801796e:	d4ed      	bmi.n	801794c <_vfiprintf_r+0x4c>
 8017970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017972:	f7ff f807 	bl	8016984 <__retarget_lock_release_recursive>
 8017976:	e7e9      	b.n	801794c <_vfiprintf_r+0x4c>
 8017978:	2300      	movs	r3, #0
 801797a:	9309      	str	r3, [sp, #36]	; 0x24
 801797c:	2320      	movs	r3, #32
 801797e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017982:	f8cd 800c 	str.w	r8, [sp, #12]
 8017986:	2330      	movs	r3, #48	; 0x30
 8017988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017b4c <_vfiprintf_r+0x24c>
 801798c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017990:	f04f 0901 	mov.w	r9, #1
 8017994:	4623      	mov	r3, r4
 8017996:	469a      	mov	sl, r3
 8017998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801799c:	b10a      	cbz	r2, 80179a2 <_vfiprintf_r+0xa2>
 801799e:	2a25      	cmp	r2, #37	; 0x25
 80179a0:	d1f9      	bne.n	8017996 <_vfiprintf_r+0x96>
 80179a2:	ebba 0b04 	subs.w	fp, sl, r4
 80179a6:	d00b      	beq.n	80179c0 <_vfiprintf_r+0xc0>
 80179a8:	465b      	mov	r3, fp
 80179aa:	4622      	mov	r2, r4
 80179ac:	4629      	mov	r1, r5
 80179ae:	4630      	mov	r0, r6
 80179b0:	f7ff ff93 	bl	80178da <__sfputs_r>
 80179b4:	3001      	adds	r0, #1
 80179b6:	f000 80aa 	beq.w	8017b0e <_vfiprintf_r+0x20e>
 80179ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179bc:	445a      	add	r2, fp
 80179be:	9209      	str	r2, [sp, #36]	; 0x24
 80179c0:	f89a 3000 	ldrb.w	r3, [sl]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	f000 80a2 	beq.w	8017b0e <_vfiprintf_r+0x20e>
 80179ca:	2300      	movs	r3, #0
 80179cc:	f04f 32ff 	mov.w	r2, #4294967295
 80179d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179d4:	f10a 0a01 	add.w	sl, sl, #1
 80179d8:	9304      	str	r3, [sp, #16]
 80179da:	9307      	str	r3, [sp, #28]
 80179dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179e0:	931a      	str	r3, [sp, #104]	; 0x68
 80179e2:	4654      	mov	r4, sl
 80179e4:	2205      	movs	r2, #5
 80179e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179ea:	4858      	ldr	r0, [pc, #352]	; (8017b4c <_vfiprintf_r+0x24c>)
 80179ec:	f7e8 fc20 	bl	8000230 <memchr>
 80179f0:	9a04      	ldr	r2, [sp, #16]
 80179f2:	b9d8      	cbnz	r0, 8017a2c <_vfiprintf_r+0x12c>
 80179f4:	06d1      	lsls	r1, r2, #27
 80179f6:	bf44      	itt	mi
 80179f8:	2320      	movmi	r3, #32
 80179fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179fe:	0713      	lsls	r3, r2, #28
 8017a00:	bf44      	itt	mi
 8017a02:	232b      	movmi	r3, #43	; 0x2b
 8017a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a08:	f89a 3000 	ldrb.w	r3, [sl]
 8017a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a0e:	d015      	beq.n	8017a3c <_vfiprintf_r+0x13c>
 8017a10:	9a07      	ldr	r2, [sp, #28]
 8017a12:	4654      	mov	r4, sl
 8017a14:	2000      	movs	r0, #0
 8017a16:	f04f 0c0a 	mov.w	ip, #10
 8017a1a:	4621      	mov	r1, r4
 8017a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a20:	3b30      	subs	r3, #48	; 0x30
 8017a22:	2b09      	cmp	r3, #9
 8017a24:	d94e      	bls.n	8017ac4 <_vfiprintf_r+0x1c4>
 8017a26:	b1b0      	cbz	r0, 8017a56 <_vfiprintf_r+0x156>
 8017a28:	9207      	str	r2, [sp, #28]
 8017a2a:	e014      	b.n	8017a56 <_vfiprintf_r+0x156>
 8017a2c:	eba0 0308 	sub.w	r3, r0, r8
 8017a30:	fa09 f303 	lsl.w	r3, r9, r3
 8017a34:	4313      	orrs	r3, r2
 8017a36:	9304      	str	r3, [sp, #16]
 8017a38:	46a2      	mov	sl, r4
 8017a3a:	e7d2      	b.n	80179e2 <_vfiprintf_r+0xe2>
 8017a3c:	9b03      	ldr	r3, [sp, #12]
 8017a3e:	1d19      	adds	r1, r3, #4
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	9103      	str	r1, [sp, #12]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	bfbb      	ittet	lt
 8017a48:	425b      	neglt	r3, r3
 8017a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8017a4e:	9307      	strge	r3, [sp, #28]
 8017a50:	9307      	strlt	r3, [sp, #28]
 8017a52:	bfb8      	it	lt
 8017a54:	9204      	strlt	r2, [sp, #16]
 8017a56:	7823      	ldrb	r3, [r4, #0]
 8017a58:	2b2e      	cmp	r3, #46	; 0x2e
 8017a5a:	d10c      	bne.n	8017a76 <_vfiprintf_r+0x176>
 8017a5c:	7863      	ldrb	r3, [r4, #1]
 8017a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8017a60:	d135      	bne.n	8017ace <_vfiprintf_r+0x1ce>
 8017a62:	9b03      	ldr	r3, [sp, #12]
 8017a64:	1d1a      	adds	r2, r3, #4
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	9203      	str	r2, [sp, #12]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	bfb8      	it	lt
 8017a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a72:	3402      	adds	r4, #2
 8017a74:	9305      	str	r3, [sp, #20]
 8017a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b5c <_vfiprintf_r+0x25c>
 8017a7a:	7821      	ldrb	r1, [r4, #0]
 8017a7c:	2203      	movs	r2, #3
 8017a7e:	4650      	mov	r0, sl
 8017a80:	f7e8 fbd6 	bl	8000230 <memchr>
 8017a84:	b140      	cbz	r0, 8017a98 <_vfiprintf_r+0x198>
 8017a86:	2340      	movs	r3, #64	; 0x40
 8017a88:	eba0 000a 	sub.w	r0, r0, sl
 8017a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8017a90:	9b04      	ldr	r3, [sp, #16]
 8017a92:	4303      	orrs	r3, r0
 8017a94:	3401      	adds	r4, #1
 8017a96:	9304      	str	r3, [sp, #16]
 8017a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a9c:	482c      	ldr	r0, [pc, #176]	; (8017b50 <_vfiprintf_r+0x250>)
 8017a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017aa2:	2206      	movs	r2, #6
 8017aa4:	f7e8 fbc4 	bl	8000230 <memchr>
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d03f      	beq.n	8017b2c <_vfiprintf_r+0x22c>
 8017aac:	4b29      	ldr	r3, [pc, #164]	; (8017b54 <_vfiprintf_r+0x254>)
 8017aae:	bb1b      	cbnz	r3, 8017af8 <_vfiprintf_r+0x1f8>
 8017ab0:	9b03      	ldr	r3, [sp, #12]
 8017ab2:	3307      	adds	r3, #7
 8017ab4:	f023 0307 	bic.w	r3, r3, #7
 8017ab8:	3308      	adds	r3, #8
 8017aba:	9303      	str	r3, [sp, #12]
 8017abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017abe:	443b      	add	r3, r7
 8017ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ac2:	e767      	b.n	8017994 <_vfiprintf_r+0x94>
 8017ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ac8:	460c      	mov	r4, r1
 8017aca:	2001      	movs	r0, #1
 8017acc:	e7a5      	b.n	8017a1a <_vfiprintf_r+0x11a>
 8017ace:	2300      	movs	r3, #0
 8017ad0:	3401      	adds	r4, #1
 8017ad2:	9305      	str	r3, [sp, #20]
 8017ad4:	4619      	mov	r1, r3
 8017ad6:	f04f 0c0a 	mov.w	ip, #10
 8017ada:	4620      	mov	r0, r4
 8017adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ae0:	3a30      	subs	r2, #48	; 0x30
 8017ae2:	2a09      	cmp	r2, #9
 8017ae4:	d903      	bls.n	8017aee <_vfiprintf_r+0x1ee>
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d0c5      	beq.n	8017a76 <_vfiprintf_r+0x176>
 8017aea:	9105      	str	r1, [sp, #20]
 8017aec:	e7c3      	b.n	8017a76 <_vfiprintf_r+0x176>
 8017aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8017af2:	4604      	mov	r4, r0
 8017af4:	2301      	movs	r3, #1
 8017af6:	e7f0      	b.n	8017ada <_vfiprintf_r+0x1da>
 8017af8:	ab03      	add	r3, sp, #12
 8017afa:	9300      	str	r3, [sp, #0]
 8017afc:	462a      	mov	r2, r5
 8017afe:	4b16      	ldr	r3, [pc, #88]	; (8017b58 <_vfiprintf_r+0x258>)
 8017b00:	a904      	add	r1, sp, #16
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7fb fcb8 	bl	8013478 <_printf_float>
 8017b08:	4607      	mov	r7, r0
 8017b0a:	1c78      	adds	r0, r7, #1
 8017b0c:	d1d6      	bne.n	8017abc <_vfiprintf_r+0x1bc>
 8017b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b10:	07d9      	lsls	r1, r3, #31
 8017b12:	d405      	bmi.n	8017b20 <_vfiprintf_r+0x220>
 8017b14:	89ab      	ldrh	r3, [r5, #12]
 8017b16:	059a      	lsls	r2, r3, #22
 8017b18:	d402      	bmi.n	8017b20 <_vfiprintf_r+0x220>
 8017b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b1c:	f7fe ff32 	bl	8016984 <__retarget_lock_release_recursive>
 8017b20:	89ab      	ldrh	r3, [r5, #12]
 8017b22:	065b      	lsls	r3, r3, #25
 8017b24:	f53f af12 	bmi.w	801794c <_vfiprintf_r+0x4c>
 8017b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b2a:	e711      	b.n	8017950 <_vfiprintf_r+0x50>
 8017b2c:	ab03      	add	r3, sp, #12
 8017b2e:	9300      	str	r3, [sp, #0]
 8017b30:	462a      	mov	r2, r5
 8017b32:	4b09      	ldr	r3, [pc, #36]	; (8017b58 <_vfiprintf_r+0x258>)
 8017b34:	a904      	add	r1, sp, #16
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7fb ff42 	bl	80139c0 <_printf_i>
 8017b3c:	e7e4      	b.n	8017b08 <_vfiprintf_r+0x208>
 8017b3e:	bf00      	nop
 8017b40:	08019d0c 	.word	0x08019d0c
 8017b44:	08019d2c 	.word	0x08019d2c
 8017b48:	08019cec 	.word	0x08019cec
 8017b4c:	08019f24 	.word	0x08019f24
 8017b50:	08019f2e 	.word	0x08019f2e
 8017b54:	08013479 	.word	0x08013479
 8017b58:	080178db 	.word	0x080178db
 8017b5c:	08019f2a 	.word	0x08019f2a

08017b60 <_putc_r>:
 8017b60:	b570      	push	{r4, r5, r6, lr}
 8017b62:	460d      	mov	r5, r1
 8017b64:	4614      	mov	r4, r2
 8017b66:	4606      	mov	r6, r0
 8017b68:	b118      	cbz	r0, 8017b72 <_putc_r+0x12>
 8017b6a:	6983      	ldr	r3, [r0, #24]
 8017b6c:	b90b      	cbnz	r3, 8017b72 <_putc_r+0x12>
 8017b6e:	f7fe faf7 	bl	8016160 <__sinit>
 8017b72:	4b1c      	ldr	r3, [pc, #112]	; (8017be4 <_putc_r+0x84>)
 8017b74:	429c      	cmp	r4, r3
 8017b76:	d124      	bne.n	8017bc2 <_putc_r+0x62>
 8017b78:	6874      	ldr	r4, [r6, #4]
 8017b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b7c:	07d8      	lsls	r0, r3, #31
 8017b7e:	d405      	bmi.n	8017b8c <_putc_r+0x2c>
 8017b80:	89a3      	ldrh	r3, [r4, #12]
 8017b82:	0599      	lsls	r1, r3, #22
 8017b84:	d402      	bmi.n	8017b8c <_putc_r+0x2c>
 8017b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b88:	f7fe fefb 	bl	8016982 <__retarget_lock_acquire_recursive>
 8017b8c:	68a3      	ldr	r3, [r4, #8]
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	60a3      	str	r3, [r4, #8]
 8017b94:	da05      	bge.n	8017ba2 <_putc_r+0x42>
 8017b96:	69a2      	ldr	r2, [r4, #24]
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	db1c      	blt.n	8017bd6 <_putc_r+0x76>
 8017b9c:	b2eb      	uxtb	r3, r5
 8017b9e:	2b0a      	cmp	r3, #10
 8017ba0:	d019      	beq.n	8017bd6 <_putc_r+0x76>
 8017ba2:	6823      	ldr	r3, [r4, #0]
 8017ba4:	1c5a      	adds	r2, r3, #1
 8017ba6:	6022      	str	r2, [r4, #0]
 8017ba8:	701d      	strb	r5, [r3, #0]
 8017baa:	b2ed      	uxtb	r5, r5
 8017bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017bae:	07da      	lsls	r2, r3, #31
 8017bb0:	d405      	bmi.n	8017bbe <_putc_r+0x5e>
 8017bb2:	89a3      	ldrh	r3, [r4, #12]
 8017bb4:	059b      	lsls	r3, r3, #22
 8017bb6:	d402      	bmi.n	8017bbe <_putc_r+0x5e>
 8017bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bba:	f7fe fee3 	bl	8016984 <__retarget_lock_release_recursive>
 8017bbe:	4628      	mov	r0, r5
 8017bc0:	bd70      	pop	{r4, r5, r6, pc}
 8017bc2:	4b09      	ldr	r3, [pc, #36]	; (8017be8 <_putc_r+0x88>)
 8017bc4:	429c      	cmp	r4, r3
 8017bc6:	d101      	bne.n	8017bcc <_putc_r+0x6c>
 8017bc8:	68b4      	ldr	r4, [r6, #8]
 8017bca:	e7d6      	b.n	8017b7a <_putc_r+0x1a>
 8017bcc:	4b07      	ldr	r3, [pc, #28]	; (8017bec <_putc_r+0x8c>)
 8017bce:	429c      	cmp	r4, r3
 8017bd0:	bf08      	it	eq
 8017bd2:	68f4      	ldreq	r4, [r6, #12]
 8017bd4:	e7d1      	b.n	8017b7a <_putc_r+0x1a>
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	4622      	mov	r2, r4
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f7fd fa6c 	bl	80150b8 <__swbuf_r>
 8017be0:	4605      	mov	r5, r0
 8017be2:	e7e3      	b.n	8017bac <_putc_r+0x4c>
 8017be4:	08019d0c 	.word	0x08019d0c
 8017be8:	08019d2c 	.word	0x08019d2c
 8017bec:	08019cec 	.word	0x08019cec

08017bf0 <nan>:
 8017bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017bf8 <nan+0x8>
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop
 8017bf8:	00000000 	.word	0x00000000
 8017bfc:	7ff80000 	.word	0x7ff80000

08017c00 <_sbrk_r>:
 8017c00:	b538      	push	{r3, r4, r5, lr}
 8017c02:	4d06      	ldr	r5, [pc, #24]	; (8017c1c <_sbrk_r+0x1c>)
 8017c04:	2300      	movs	r3, #0
 8017c06:	4604      	mov	r4, r0
 8017c08:	4608      	mov	r0, r1
 8017c0a:	602b      	str	r3, [r5, #0]
 8017c0c:	f7ec fbba 	bl	8004384 <_sbrk>
 8017c10:	1c43      	adds	r3, r0, #1
 8017c12:	d102      	bne.n	8017c1a <_sbrk_r+0x1a>
 8017c14:	682b      	ldr	r3, [r5, #0]
 8017c16:	b103      	cbz	r3, 8017c1a <_sbrk_r+0x1a>
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	bd38      	pop	{r3, r4, r5, pc}
 8017c1c:	200002c8 	.word	0x200002c8

08017c20 <__sread>:
 8017c20:	b510      	push	{r4, lr}
 8017c22:	460c      	mov	r4, r1
 8017c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c28:	f000 f93a 	bl	8017ea0 <_read_r>
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	bfab      	itete	ge
 8017c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c32:	89a3      	ldrhlt	r3, [r4, #12]
 8017c34:	181b      	addge	r3, r3, r0
 8017c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c3a:	bfac      	ite	ge
 8017c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c3e:	81a3      	strhlt	r3, [r4, #12]
 8017c40:	bd10      	pop	{r4, pc}

08017c42 <__swrite>:
 8017c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c46:	461f      	mov	r7, r3
 8017c48:	898b      	ldrh	r3, [r1, #12]
 8017c4a:	05db      	lsls	r3, r3, #23
 8017c4c:	4605      	mov	r5, r0
 8017c4e:	460c      	mov	r4, r1
 8017c50:	4616      	mov	r6, r2
 8017c52:	d505      	bpl.n	8017c60 <__swrite+0x1e>
 8017c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c58:	2302      	movs	r3, #2
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	f000 f8b8 	bl	8017dd0 <_lseek_r>
 8017c60:	89a3      	ldrh	r3, [r4, #12]
 8017c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c6a:	81a3      	strh	r3, [r4, #12]
 8017c6c:	4632      	mov	r2, r6
 8017c6e:	463b      	mov	r3, r7
 8017c70:	4628      	mov	r0, r5
 8017c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c76:	f000 b837 	b.w	8017ce8 <_write_r>

08017c7a <__sseek>:
 8017c7a:	b510      	push	{r4, lr}
 8017c7c:	460c      	mov	r4, r1
 8017c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c82:	f000 f8a5 	bl	8017dd0 <_lseek_r>
 8017c86:	1c43      	adds	r3, r0, #1
 8017c88:	89a3      	ldrh	r3, [r4, #12]
 8017c8a:	bf15      	itete	ne
 8017c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c96:	81a3      	strheq	r3, [r4, #12]
 8017c98:	bf18      	it	ne
 8017c9a:	81a3      	strhne	r3, [r4, #12]
 8017c9c:	bd10      	pop	{r4, pc}

08017c9e <__sclose>:
 8017c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca2:	f000 b851 	b.w	8017d48 <_close_r>

08017ca6 <strncmp>:
 8017ca6:	b510      	push	{r4, lr}
 8017ca8:	b17a      	cbz	r2, 8017cca <strncmp+0x24>
 8017caa:	4603      	mov	r3, r0
 8017cac:	3901      	subs	r1, #1
 8017cae:	1884      	adds	r4, r0, r2
 8017cb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017cb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017cb8:	4290      	cmp	r0, r2
 8017cba:	d101      	bne.n	8017cc0 <strncmp+0x1a>
 8017cbc:	42a3      	cmp	r3, r4
 8017cbe:	d101      	bne.n	8017cc4 <strncmp+0x1e>
 8017cc0:	1a80      	subs	r0, r0, r2
 8017cc2:	bd10      	pop	{r4, pc}
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	d1f3      	bne.n	8017cb0 <strncmp+0xa>
 8017cc8:	e7fa      	b.n	8017cc0 <strncmp+0x1a>
 8017cca:	4610      	mov	r0, r2
 8017ccc:	e7f9      	b.n	8017cc2 <strncmp+0x1c>

08017cce <__ascii_wctomb>:
 8017cce:	b149      	cbz	r1, 8017ce4 <__ascii_wctomb+0x16>
 8017cd0:	2aff      	cmp	r2, #255	; 0xff
 8017cd2:	bf85      	ittet	hi
 8017cd4:	238a      	movhi	r3, #138	; 0x8a
 8017cd6:	6003      	strhi	r3, [r0, #0]
 8017cd8:	700a      	strbls	r2, [r1, #0]
 8017cda:	f04f 30ff 	movhi.w	r0, #4294967295
 8017cde:	bf98      	it	ls
 8017ce0:	2001      	movls	r0, #1
 8017ce2:	4770      	bx	lr
 8017ce4:	4608      	mov	r0, r1
 8017ce6:	4770      	bx	lr

08017ce8 <_write_r>:
 8017ce8:	b538      	push	{r3, r4, r5, lr}
 8017cea:	4d07      	ldr	r5, [pc, #28]	; (8017d08 <_write_r+0x20>)
 8017cec:	4604      	mov	r4, r0
 8017cee:	4608      	mov	r0, r1
 8017cf0:	4611      	mov	r1, r2
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	602a      	str	r2, [r5, #0]
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	f7ec faf3 	bl	80042e2 <_write>
 8017cfc:	1c43      	adds	r3, r0, #1
 8017cfe:	d102      	bne.n	8017d06 <_write_r+0x1e>
 8017d00:	682b      	ldr	r3, [r5, #0]
 8017d02:	b103      	cbz	r3, 8017d06 <_write_r+0x1e>
 8017d04:	6023      	str	r3, [r4, #0]
 8017d06:	bd38      	pop	{r3, r4, r5, pc}
 8017d08:	200002c8 	.word	0x200002c8

08017d0c <__assert_func>:
 8017d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d0e:	4614      	mov	r4, r2
 8017d10:	461a      	mov	r2, r3
 8017d12:	4b09      	ldr	r3, [pc, #36]	; (8017d38 <__assert_func+0x2c>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4605      	mov	r5, r0
 8017d18:	68d8      	ldr	r0, [r3, #12]
 8017d1a:	b14c      	cbz	r4, 8017d30 <__assert_func+0x24>
 8017d1c:	4b07      	ldr	r3, [pc, #28]	; (8017d3c <__assert_func+0x30>)
 8017d1e:	9100      	str	r1, [sp, #0]
 8017d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d24:	4906      	ldr	r1, [pc, #24]	; (8017d40 <__assert_func+0x34>)
 8017d26:	462b      	mov	r3, r5
 8017d28:	f000 f81e 	bl	8017d68 <fiprintf>
 8017d2c:	f000 f8ca 	bl	8017ec4 <abort>
 8017d30:	4b04      	ldr	r3, [pc, #16]	; (8017d44 <__assert_func+0x38>)
 8017d32:	461c      	mov	r4, r3
 8017d34:	e7f3      	b.n	8017d1e <__assert_func+0x12>
 8017d36:	bf00      	nop
 8017d38:	20000020 	.word	0x20000020
 8017d3c:	08019f35 	.word	0x08019f35
 8017d40:	08019f42 	.word	0x08019f42
 8017d44:	08019f70 	.word	0x08019f70

08017d48 <_close_r>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	4d06      	ldr	r5, [pc, #24]	; (8017d64 <_close_r+0x1c>)
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	4604      	mov	r4, r0
 8017d50:	4608      	mov	r0, r1
 8017d52:	602b      	str	r3, [r5, #0]
 8017d54:	f7ec fae1 	bl	800431a <_close>
 8017d58:	1c43      	adds	r3, r0, #1
 8017d5a:	d102      	bne.n	8017d62 <_close_r+0x1a>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	b103      	cbz	r3, 8017d62 <_close_r+0x1a>
 8017d60:	6023      	str	r3, [r4, #0]
 8017d62:	bd38      	pop	{r3, r4, r5, pc}
 8017d64:	200002c8 	.word	0x200002c8

08017d68 <fiprintf>:
 8017d68:	b40e      	push	{r1, r2, r3}
 8017d6a:	b503      	push	{r0, r1, lr}
 8017d6c:	4601      	mov	r1, r0
 8017d6e:	ab03      	add	r3, sp, #12
 8017d70:	4805      	ldr	r0, [pc, #20]	; (8017d88 <fiprintf+0x20>)
 8017d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d76:	6800      	ldr	r0, [r0, #0]
 8017d78:	9301      	str	r3, [sp, #4]
 8017d7a:	f7ff fdc1 	bl	8017900 <_vfiprintf_r>
 8017d7e:	b002      	add	sp, #8
 8017d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d84:	b003      	add	sp, #12
 8017d86:	4770      	bx	lr
 8017d88:	20000020 	.word	0x20000020

08017d8c <_fstat_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4d07      	ldr	r5, [pc, #28]	; (8017dac <_fstat_r+0x20>)
 8017d90:	2300      	movs	r3, #0
 8017d92:	4604      	mov	r4, r0
 8017d94:	4608      	mov	r0, r1
 8017d96:	4611      	mov	r1, r2
 8017d98:	602b      	str	r3, [r5, #0]
 8017d9a:	f7ec faca 	bl	8004332 <_fstat>
 8017d9e:	1c43      	adds	r3, r0, #1
 8017da0:	d102      	bne.n	8017da8 <_fstat_r+0x1c>
 8017da2:	682b      	ldr	r3, [r5, #0]
 8017da4:	b103      	cbz	r3, 8017da8 <_fstat_r+0x1c>
 8017da6:	6023      	str	r3, [r4, #0]
 8017da8:	bd38      	pop	{r3, r4, r5, pc}
 8017daa:	bf00      	nop
 8017dac:	200002c8 	.word	0x200002c8

08017db0 <_isatty_r>:
 8017db0:	b538      	push	{r3, r4, r5, lr}
 8017db2:	4d06      	ldr	r5, [pc, #24]	; (8017dcc <_isatty_r+0x1c>)
 8017db4:	2300      	movs	r3, #0
 8017db6:	4604      	mov	r4, r0
 8017db8:	4608      	mov	r0, r1
 8017dba:	602b      	str	r3, [r5, #0]
 8017dbc:	f7ec fac9 	bl	8004352 <_isatty>
 8017dc0:	1c43      	adds	r3, r0, #1
 8017dc2:	d102      	bne.n	8017dca <_isatty_r+0x1a>
 8017dc4:	682b      	ldr	r3, [r5, #0]
 8017dc6:	b103      	cbz	r3, 8017dca <_isatty_r+0x1a>
 8017dc8:	6023      	str	r3, [r4, #0]
 8017dca:	bd38      	pop	{r3, r4, r5, pc}
 8017dcc:	200002c8 	.word	0x200002c8

08017dd0 <_lseek_r>:
 8017dd0:	b538      	push	{r3, r4, r5, lr}
 8017dd2:	4d07      	ldr	r5, [pc, #28]	; (8017df0 <_lseek_r+0x20>)
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	4608      	mov	r0, r1
 8017dd8:	4611      	mov	r1, r2
 8017dda:	2200      	movs	r2, #0
 8017ddc:	602a      	str	r2, [r5, #0]
 8017dde:	461a      	mov	r2, r3
 8017de0:	f7ec fac2 	bl	8004368 <_lseek>
 8017de4:	1c43      	adds	r3, r0, #1
 8017de6:	d102      	bne.n	8017dee <_lseek_r+0x1e>
 8017de8:	682b      	ldr	r3, [r5, #0]
 8017dea:	b103      	cbz	r3, 8017dee <_lseek_r+0x1e>
 8017dec:	6023      	str	r3, [r4, #0]
 8017dee:	bd38      	pop	{r3, r4, r5, pc}
 8017df0:	200002c8 	.word	0x200002c8

08017df4 <memmove>:
 8017df4:	4288      	cmp	r0, r1
 8017df6:	b510      	push	{r4, lr}
 8017df8:	eb01 0402 	add.w	r4, r1, r2
 8017dfc:	d902      	bls.n	8017e04 <memmove+0x10>
 8017dfe:	4284      	cmp	r4, r0
 8017e00:	4623      	mov	r3, r4
 8017e02:	d807      	bhi.n	8017e14 <memmove+0x20>
 8017e04:	1e43      	subs	r3, r0, #1
 8017e06:	42a1      	cmp	r1, r4
 8017e08:	d008      	beq.n	8017e1c <memmove+0x28>
 8017e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e12:	e7f8      	b.n	8017e06 <memmove+0x12>
 8017e14:	4402      	add	r2, r0
 8017e16:	4601      	mov	r1, r0
 8017e18:	428a      	cmp	r2, r1
 8017e1a:	d100      	bne.n	8017e1e <memmove+0x2a>
 8017e1c:	bd10      	pop	{r4, pc}
 8017e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e26:	e7f7      	b.n	8017e18 <memmove+0x24>

08017e28 <__malloc_lock>:
 8017e28:	4801      	ldr	r0, [pc, #4]	; (8017e30 <__malloc_lock+0x8>)
 8017e2a:	f7fe bdaa 	b.w	8016982 <__retarget_lock_acquire_recursive>
 8017e2e:	bf00      	nop
 8017e30:	200002bb 	.word	0x200002bb

08017e34 <__malloc_unlock>:
 8017e34:	4801      	ldr	r0, [pc, #4]	; (8017e3c <__malloc_unlock+0x8>)
 8017e36:	f7fe bda5 	b.w	8016984 <__retarget_lock_release_recursive>
 8017e3a:	bf00      	nop
 8017e3c:	200002bb 	.word	0x200002bb

08017e40 <_realloc_r>:
 8017e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e44:	4680      	mov	r8, r0
 8017e46:	4614      	mov	r4, r2
 8017e48:	460e      	mov	r6, r1
 8017e4a:	b921      	cbnz	r1, 8017e56 <_realloc_r+0x16>
 8017e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e50:	4611      	mov	r1, r2
 8017e52:	f7ff bb5b 	b.w	801750c <_malloc_r>
 8017e56:	b92a      	cbnz	r2, 8017e64 <_realloc_r+0x24>
 8017e58:	f7ff faec 	bl	8017434 <_free_r>
 8017e5c:	4625      	mov	r5, r4
 8017e5e:	4628      	mov	r0, r5
 8017e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e64:	f000 f835 	bl	8017ed2 <_malloc_usable_size_r>
 8017e68:	4284      	cmp	r4, r0
 8017e6a:	4607      	mov	r7, r0
 8017e6c:	d802      	bhi.n	8017e74 <_realloc_r+0x34>
 8017e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017e72:	d812      	bhi.n	8017e9a <_realloc_r+0x5a>
 8017e74:	4621      	mov	r1, r4
 8017e76:	4640      	mov	r0, r8
 8017e78:	f7ff fb48 	bl	801750c <_malloc_r>
 8017e7c:	4605      	mov	r5, r0
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	d0ed      	beq.n	8017e5e <_realloc_r+0x1e>
 8017e82:	42bc      	cmp	r4, r7
 8017e84:	4622      	mov	r2, r4
 8017e86:	4631      	mov	r1, r6
 8017e88:	bf28      	it	cs
 8017e8a:	463a      	movcs	r2, r7
 8017e8c:	f7fb fa3e 	bl	801330c <memcpy>
 8017e90:	4631      	mov	r1, r6
 8017e92:	4640      	mov	r0, r8
 8017e94:	f7ff face 	bl	8017434 <_free_r>
 8017e98:	e7e1      	b.n	8017e5e <_realloc_r+0x1e>
 8017e9a:	4635      	mov	r5, r6
 8017e9c:	e7df      	b.n	8017e5e <_realloc_r+0x1e>
	...

08017ea0 <_read_r>:
 8017ea0:	b538      	push	{r3, r4, r5, lr}
 8017ea2:	4d07      	ldr	r5, [pc, #28]	; (8017ec0 <_read_r+0x20>)
 8017ea4:	4604      	mov	r4, r0
 8017ea6:	4608      	mov	r0, r1
 8017ea8:	4611      	mov	r1, r2
 8017eaa:	2200      	movs	r2, #0
 8017eac:	602a      	str	r2, [r5, #0]
 8017eae:	461a      	mov	r2, r3
 8017eb0:	f7ec f9fa 	bl	80042a8 <_read>
 8017eb4:	1c43      	adds	r3, r0, #1
 8017eb6:	d102      	bne.n	8017ebe <_read_r+0x1e>
 8017eb8:	682b      	ldr	r3, [r5, #0]
 8017eba:	b103      	cbz	r3, 8017ebe <_read_r+0x1e>
 8017ebc:	6023      	str	r3, [r4, #0]
 8017ebe:	bd38      	pop	{r3, r4, r5, pc}
 8017ec0:	200002c8 	.word	0x200002c8

08017ec4 <abort>:
 8017ec4:	b508      	push	{r3, lr}
 8017ec6:	2006      	movs	r0, #6
 8017ec8:	f000 f834 	bl	8017f34 <raise>
 8017ecc:	2001      	movs	r0, #1
 8017ece:	f7ec f9e1 	bl	8004294 <_exit>

08017ed2 <_malloc_usable_size_r>:
 8017ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ed6:	1f18      	subs	r0, r3, #4
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	bfbc      	itt	lt
 8017edc:	580b      	ldrlt	r3, [r1, r0]
 8017ede:	18c0      	addlt	r0, r0, r3
 8017ee0:	4770      	bx	lr

08017ee2 <_raise_r>:
 8017ee2:	291f      	cmp	r1, #31
 8017ee4:	b538      	push	{r3, r4, r5, lr}
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	460d      	mov	r5, r1
 8017eea:	d904      	bls.n	8017ef6 <_raise_r+0x14>
 8017eec:	2316      	movs	r3, #22
 8017eee:	6003      	str	r3, [r0, #0]
 8017ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef4:	bd38      	pop	{r3, r4, r5, pc}
 8017ef6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ef8:	b112      	cbz	r2, 8017f00 <_raise_r+0x1e>
 8017efa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017efe:	b94b      	cbnz	r3, 8017f14 <_raise_r+0x32>
 8017f00:	4620      	mov	r0, r4
 8017f02:	f000 f831 	bl	8017f68 <_getpid_r>
 8017f06:	462a      	mov	r2, r5
 8017f08:	4601      	mov	r1, r0
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f10:	f000 b818 	b.w	8017f44 <_kill_r>
 8017f14:	2b01      	cmp	r3, #1
 8017f16:	d00a      	beq.n	8017f2e <_raise_r+0x4c>
 8017f18:	1c59      	adds	r1, r3, #1
 8017f1a:	d103      	bne.n	8017f24 <_raise_r+0x42>
 8017f1c:	2316      	movs	r3, #22
 8017f1e:	6003      	str	r3, [r0, #0]
 8017f20:	2001      	movs	r0, #1
 8017f22:	e7e7      	b.n	8017ef4 <_raise_r+0x12>
 8017f24:	2400      	movs	r4, #0
 8017f26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017f2a:	4628      	mov	r0, r5
 8017f2c:	4798      	blx	r3
 8017f2e:	2000      	movs	r0, #0
 8017f30:	e7e0      	b.n	8017ef4 <_raise_r+0x12>
	...

08017f34 <raise>:
 8017f34:	4b02      	ldr	r3, [pc, #8]	; (8017f40 <raise+0xc>)
 8017f36:	4601      	mov	r1, r0
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	f7ff bfd2 	b.w	8017ee2 <_raise_r>
 8017f3e:	bf00      	nop
 8017f40:	20000020 	.word	0x20000020

08017f44 <_kill_r>:
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	4d07      	ldr	r5, [pc, #28]	; (8017f64 <_kill_r+0x20>)
 8017f48:	2300      	movs	r3, #0
 8017f4a:	4604      	mov	r4, r0
 8017f4c:	4608      	mov	r0, r1
 8017f4e:	4611      	mov	r1, r2
 8017f50:	602b      	str	r3, [r5, #0]
 8017f52:	f7ec f98f 	bl	8004274 <_kill>
 8017f56:	1c43      	adds	r3, r0, #1
 8017f58:	d102      	bne.n	8017f60 <_kill_r+0x1c>
 8017f5a:	682b      	ldr	r3, [r5, #0]
 8017f5c:	b103      	cbz	r3, 8017f60 <_kill_r+0x1c>
 8017f5e:	6023      	str	r3, [r4, #0]
 8017f60:	bd38      	pop	{r3, r4, r5, pc}
 8017f62:	bf00      	nop
 8017f64:	200002c8 	.word	0x200002c8

08017f68 <_getpid_r>:
 8017f68:	f7ec b97c 	b.w	8004264 <_getpid>
 8017f6c:	0000      	movs	r0, r0
	...

08017f70 <cos>:
 8017f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f72:	ec53 2b10 	vmov	r2, r3, d0
 8017f76:	4826      	ldr	r0, [pc, #152]	; (8018010 <cos+0xa0>)
 8017f78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017f7c:	4281      	cmp	r1, r0
 8017f7e:	dc06      	bgt.n	8017f8e <cos+0x1e>
 8017f80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8018008 <cos+0x98>
 8017f84:	b005      	add	sp, #20
 8017f86:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f8a:	f000 bb89 	b.w	80186a0 <__kernel_cos>
 8017f8e:	4821      	ldr	r0, [pc, #132]	; (8018014 <cos+0xa4>)
 8017f90:	4281      	cmp	r1, r0
 8017f92:	dd09      	ble.n	8017fa8 <cos+0x38>
 8017f94:	ee10 0a10 	vmov	r0, s0
 8017f98:	4619      	mov	r1, r3
 8017f9a:	f7e8 f99d 	bl	80002d8 <__aeabi_dsub>
 8017f9e:	ec41 0b10 	vmov	d0, r0, r1
 8017fa2:	b005      	add	sp, #20
 8017fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017fa8:	4668      	mov	r0, sp
 8017faa:	f000 f8b9 	bl	8018120 <__ieee754_rem_pio2>
 8017fae:	f000 0003 	and.w	r0, r0, #3
 8017fb2:	2801      	cmp	r0, #1
 8017fb4:	d00b      	beq.n	8017fce <cos+0x5e>
 8017fb6:	2802      	cmp	r0, #2
 8017fb8:	d016      	beq.n	8017fe8 <cos+0x78>
 8017fba:	b9e0      	cbnz	r0, 8017ff6 <cos+0x86>
 8017fbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017fc0:	ed9d 0b00 	vldr	d0, [sp]
 8017fc4:	f000 fb6c 	bl	80186a0 <__kernel_cos>
 8017fc8:	ec51 0b10 	vmov	r0, r1, d0
 8017fcc:	e7e7      	b.n	8017f9e <cos+0x2e>
 8017fce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017fd2:	ed9d 0b00 	vldr	d0, [sp]
 8017fd6:	f000 ff7b 	bl	8018ed0 <__kernel_sin>
 8017fda:	ec53 2b10 	vmov	r2, r3, d0
 8017fde:	ee10 0a10 	vmov	r0, s0
 8017fe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017fe6:	e7da      	b.n	8017f9e <cos+0x2e>
 8017fe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017fec:	ed9d 0b00 	vldr	d0, [sp]
 8017ff0:	f000 fb56 	bl	80186a0 <__kernel_cos>
 8017ff4:	e7f1      	b.n	8017fda <cos+0x6a>
 8017ff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017ffa:	ed9d 0b00 	vldr	d0, [sp]
 8017ffe:	2001      	movs	r0, #1
 8018000:	f000 ff66 	bl	8018ed0 <__kernel_sin>
 8018004:	e7e0      	b.n	8017fc8 <cos+0x58>
 8018006:	bf00      	nop
	...
 8018010:	3fe921fb 	.word	0x3fe921fb
 8018014:	7fefffff 	.word	0x7fefffff

08018018 <sin>:
 8018018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801801a:	ec53 2b10 	vmov	r2, r3, d0
 801801e:	4828      	ldr	r0, [pc, #160]	; (80180c0 <sin+0xa8>)
 8018020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018024:	4281      	cmp	r1, r0
 8018026:	dc07      	bgt.n	8018038 <sin+0x20>
 8018028:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80180b8 <sin+0xa0>
 801802c:	2000      	movs	r0, #0
 801802e:	b005      	add	sp, #20
 8018030:	f85d eb04 	ldr.w	lr, [sp], #4
 8018034:	f000 bf4c 	b.w	8018ed0 <__kernel_sin>
 8018038:	4822      	ldr	r0, [pc, #136]	; (80180c4 <sin+0xac>)
 801803a:	4281      	cmp	r1, r0
 801803c:	dd09      	ble.n	8018052 <sin+0x3a>
 801803e:	ee10 0a10 	vmov	r0, s0
 8018042:	4619      	mov	r1, r3
 8018044:	f7e8 f948 	bl	80002d8 <__aeabi_dsub>
 8018048:	ec41 0b10 	vmov	d0, r0, r1
 801804c:	b005      	add	sp, #20
 801804e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018052:	4668      	mov	r0, sp
 8018054:	f000 f864 	bl	8018120 <__ieee754_rem_pio2>
 8018058:	f000 0003 	and.w	r0, r0, #3
 801805c:	2801      	cmp	r0, #1
 801805e:	d00c      	beq.n	801807a <sin+0x62>
 8018060:	2802      	cmp	r0, #2
 8018062:	d011      	beq.n	8018088 <sin+0x70>
 8018064:	b9f0      	cbnz	r0, 80180a4 <sin+0x8c>
 8018066:	ed9d 1b02 	vldr	d1, [sp, #8]
 801806a:	ed9d 0b00 	vldr	d0, [sp]
 801806e:	2001      	movs	r0, #1
 8018070:	f000 ff2e 	bl	8018ed0 <__kernel_sin>
 8018074:	ec51 0b10 	vmov	r0, r1, d0
 8018078:	e7e6      	b.n	8018048 <sin+0x30>
 801807a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801807e:	ed9d 0b00 	vldr	d0, [sp]
 8018082:	f000 fb0d 	bl	80186a0 <__kernel_cos>
 8018086:	e7f5      	b.n	8018074 <sin+0x5c>
 8018088:	ed9d 1b02 	vldr	d1, [sp, #8]
 801808c:	ed9d 0b00 	vldr	d0, [sp]
 8018090:	2001      	movs	r0, #1
 8018092:	f000 ff1d 	bl	8018ed0 <__kernel_sin>
 8018096:	ec53 2b10 	vmov	r2, r3, d0
 801809a:	ee10 0a10 	vmov	r0, s0
 801809e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80180a2:	e7d1      	b.n	8018048 <sin+0x30>
 80180a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80180a8:	ed9d 0b00 	vldr	d0, [sp]
 80180ac:	f000 faf8 	bl	80186a0 <__kernel_cos>
 80180b0:	e7f1      	b.n	8018096 <sin+0x7e>
 80180b2:	bf00      	nop
 80180b4:	f3af 8000 	nop.w
	...
 80180c0:	3fe921fb 	.word	0x3fe921fb
 80180c4:	7fefffff 	.word	0x7fefffff

080180c8 <sqrt>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	ed2d 8b02 	vpush	{d8}
 80180ce:	ec55 4b10 	vmov	r4, r5, d0
 80180d2:	f000 fa31 	bl	8018538 <__ieee754_sqrt>
 80180d6:	4622      	mov	r2, r4
 80180d8:	462b      	mov	r3, r5
 80180da:	4620      	mov	r0, r4
 80180dc:	4629      	mov	r1, r5
 80180de:	eeb0 8a40 	vmov.f32	s16, s0
 80180e2:	eef0 8a60 	vmov.f32	s17, s1
 80180e6:	f7e8 fd49 	bl	8000b7c <__aeabi_dcmpun>
 80180ea:	b990      	cbnz	r0, 8018112 <sqrt+0x4a>
 80180ec:	2200      	movs	r2, #0
 80180ee:	2300      	movs	r3, #0
 80180f0:	4620      	mov	r0, r4
 80180f2:	4629      	mov	r1, r5
 80180f4:	f7e8 fd1a 	bl	8000b2c <__aeabi_dcmplt>
 80180f8:	b158      	cbz	r0, 8018112 <sqrt+0x4a>
 80180fa:	f7fb f8dd 	bl	80132b8 <__errno>
 80180fe:	2321      	movs	r3, #33	; 0x21
 8018100:	6003      	str	r3, [r0, #0]
 8018102:	2200      	movs	r2, #0
 8018104:	2300      	movs	r3, #0
 8018106:	4610      	mov	r0, r2
 8018108:	4619      	mov	r1, r3
 801810a:	f7e8 fbc7 	bl	800089c <__aeabi_ddiv>
 801810e:	ec41 0b18 	vmov	d8, r0, r1
 8018112:	eeb0 0a48 	vmov.f32	s0, s16
 8018116:	eef0 0a68 	vmov.f32	s1, s17
 801811a:	ecbd 8b02 	vpop	{d8}
 801811e:	bd38      	pop	{r3, r4, r5, pc}

08018120 <__ieee754_rem_pio2>:
 8018120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018124:	ed2d 8b02 	vpush	{d8}
 8018128:	ec55 4b10 	vmov	r4, r5, d0
 801812c:	4bca      	ldr	r3, [pc, #808]	; (8018458 <__ieee754_rem_pio2+0x338>)
 801812e:	b08b      	sub	sp, #44	; 0x2c
 8018130:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8018134:	4598      	cmp	r8, r3
 8018136:	4682      	mov	sl, r0
 8018138:	9502      	str	r5, [sp, #8]
 801813a:	dc08      	bgt.n	801814e <__ieee754_rem_pio2+0x2e>
 801813c:	2200      	movs	r2, #0
 801813e:	2300      	movs	r3, #0
 8018140:	ed80 0b00 	vstr	d0, [r0]
 8018144:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018148:	f04f 0b00 	mov.w	fp, #0
 801814c:	e028      	b.n	80181a0 <__ieee754_rem_pio2+0x80>
 801814e:	4bc3      	ldr	r3, [pc, #780]	; (801845c <__ieee754_rem_pio2+0x33c>)
 8018150:	4598      	cmp	r8, r3
 8018152:	dc78      	bgt.n	8018246 <__ieee754_rem_pio2+0x126>
 8018154:	9b02      	ldr	r3, [sp, #8]
 8018156:	4ec2      	ldr	r6, [pc, #776]	; (8018460 <__ieee754_rem_pio2+0x340>)
 8018158:	2b00      	cmp	r3, #0
 801815a:	ee10 0a10 	vmov	r0, s0
 801815e:	a3b0      	add	r3, pc, #704	; (adr r3, 8018420 <__ieee754_rem_pio2+0x300>)
 8018160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018164:	4629      	mov	r1, r5
 8018166:	dd39      	ble.n	80181dc <__ieee754_rem_pio2+0xbc>
 8018168:	f7e8 f8b6 	bl	80002d8 <__aeabi_dsub>
 801816c:	45b0      	cmp	r8, r6
 801816e:	4604      	mov	r4, r0
 8018170:	460d      	mov	r5, r1
 8018172:	d01b      	beq.n	80181ac <__ieee754_rem_pio2+0x8c>
 8018174:	a3ac      	add	r3, pc, #688	; (adr r3, 8018428 <__ieee754_rem_pio2+0x308>)
 8018176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801817a:	f7e8 f8ad 	bl	80002d8 <__aeabi_dsub>
 801817e:	4602      	mov	r2, r0
 8018180:	460b      	mov	r3, r1
 8018182:	e9ca 2300 	strd	r2, r3, [sl]
 8018186:	4620      	mov	r0, r4
 8018188:	4629      	mov	r1, r5
 801818a:	f7e8 f8a5 	bl	80002d8 <__aeabi_dsub>
 801818e:	a3a6      	add	r3, pc, #664	; (adr r3, 8018428 <__ieee754_rem_pio2+0x308>)
 8018190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018194:	f7e8 f8a0 	bl	80002d8 <__aeabi_dsub>
 8018198:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801819c:	f04f 0b01 	mov.w	fp, #1
 80181a0:	4658      	mov	r0, fp
 80181a2:	b00b      	add	sp, #44	; 0x2c
 80181a4:	ecbd 8b02 	vpop	{d8}
 80181a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8018430 <__ieee754_rem_pio2+0x310>)
 80181ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b2:	f7e8 f891 	bl	80002d8 <__aeabi_dsub>
 80181b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8018438 <__ieee754_rem_pio2+0x318>)
 80181b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181bc:	4604      	mov	r4, r0
 80181be:	460d      	mov	r5, r1
 80181c0:	f7e8 f88a 	bl	80002d8 <__aeabi_dsub>
 80181c4:	4602      	mov	r2, r0
 80181c6:	460b      	mov	r3, r1
 80181c8:	e9ca 2300 	strd	r2, r3, [sl]
 80181cc:	4620      	mov	r0, r4
 80181ce:	4629      	mov	r1, r5
 80181d0:	f7e8 f882 	bl	80002d8 <__aeabi_dsub>
 80181d4:	a398      	add	r3, pc, #608	; (adr r3, 8018438 <__ieee754_rem_pio2+0x318>)
 80181d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181da:	e7db      	b.n	8018194 <__ieee754_rem_pio2+0x74>
 80181dc:	f7e8 f87e 	bl	80002dc <__adddf3>
 80181e0:	45b0      	cmp	r8, r6
 80181e2:	4604      	mov	r4, r0
 80181e4:	460d      	mov	r5, r1
 80181e6:	d016      	beq.n	8018216 <__ieee754_rem_pio2+0xf6>
 80181e8:	a38f      	add	r3, pc, #572	; (adr r3, 8018428 <__ieee754_rem_pio2+0x308>)
 80181ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181ee:	f7e8 f875 	bl	80002dc <__adddf3>
 80181f2:	4602      	mov	r2, r0
 80181f4:	460b      	mov	r3, r1
 80181f6:	e9ca 2300 	strd	r2, r3, [sl]
 80181fa:	4620      	mov	r0, r4
 80181fc:	4629      	mov	r1, r5
 80181fe:	f7e8 f86b 	bl	80002d8 <__aeabi_dsub>
 8018202:	a389      	add	r3, pc, #548	; (adr r3, 8018428 <__ieee754_rem_pio2+0x308>)
 8018204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018208:	f7e8 f868 	bl	80002dc <__adddf3>
 801820c:	f04f 3bff 	mov.w	fp, #4294967295
 8018210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018214:	e7c4      	b.n	80181a0 <__ieee754_rem_pio2+0x80>
 8018216:	a386      	add	r3, pc, #536	; (adr r3, 8018430 <__ieee754_rem_pio2+0x310>)
 8018218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821c:	f7e8 f85e 	bl	80002dc <__adddf3>
 8018220:	a385      	add	r3, pc, #532	; (adr r3, 8018438 <__ieee754_rem_pio2+0x318>)
 8018222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018226:	4604      	mov	r4, r0
 8018228:	460d      	mov	r5, r1
 801822a:	f7e8 f857 	bl	80002dc <__adddf3>
 801822e:	4602      	mov	r2, r0
 8018230:	460b      	mov	r3, r1
 8018232:	e9ca 2300 	strd	r2, r3, [sl]
 8018236:	4620      	mov	r0, r4
 8018238:	4629      	mov	r1, r5
 801823a:	f7e8 f84d 	bl	80002d8 <__aeabi_dsub>
 801823e:	a37e      	add	r3, pc, #504	; (adr r3, 8018438 <__ieee754_rem_pio2+0x318>)
 8018240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018244:	e7e0      	b.n	8018208 <__ieee754_rem_pio2+0xe8>
 8018246:	4b87      	ldr	r3, [pc, #540]	; (8018464 <__ieee754_rem_pio2+0x344>)
 8018248:	4598      	cmp	r8, r3
 801824a:	f300 80d9 	bgt.w	8018400 <__ieee754_rem_pio2+0x2e0>
 801824e:	f000 fefd 	bl	801904c <fabs>
 8018252:	ec55 4b10 	vmov	r4, r5, d0
 8018256:	ee10 0a10 	vmov	r0, s0
 801825a:	a379      	add	r3, pc, #484	; (adr r3, 8018440 <__ieee754_rem_pio2+0x320>)
 801825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018260:	4629      	mov	r1, r5
 8018262:	f7e8 f9f1 	bl	8000648 <__aeabi_dmul>
 8018266:	4b80      	ldr	r3, [pc, #512]	; (8018468 <__ieee754_rem_pio2+0x348>)
 8018268:	2200      	movs	r2, #0
 801826a:	f7e8 f837 	bl	80002dc <__adddf3>
 801826e:	f7e8 fc9b 	bl	8000ba8 <__aeabi_d2iz>
 8018272:	4683      	mov	fp, r0
 8018274:	f7e8 f97e 	bl	8000574 <__aeabi_i2d>
 8018278:	4602      	mov	r2, r0
 801827a:	460b      	mov	r3, r1
 801827c:	ec43 2b18 	vmov	d8, r2, r3
 8018280:	a367      	add	r3, pc, #412	; (adr r3, 8018420 <__ieee754_rem_pio2+0x300>)
 8018282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018286:	f7e8 f9df 	bl	8000648 <__aeabi_dmul>
 801828a:	4602      	mov	r2, r0
 801828c:	460b      	mov	r3, r1
 801828e:	4620      	mov	r0, r4
 8018290:	4629      	mov	r1, r5
 8018292:	f7e8 f821 	bl	80002d8 <__aeabi_dsub>
 8018296:	a364      	add	r3, pc, #400	; (adr r3, 8018428 <__ieee754_rem_pio2+0x308>)
 8018298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801829c:	4606      	mov	r6, r0
 801829e:	460f      	mov	r7, r1
 80182a0:	ec51 0b18 	vmov	r0, r1, d8
 80182a4:	f7e8 f9d0 	bl	8000648 <__aeabi_dmul>
 80182a8:	f1bb 0f1f 	cmp.w	fp, #31
 80182ac:	4604      	mov	r4, r0
 80182ae:	460d      	mov	r5, r1
 80182b0:	dc0d      	bgt.n	80182ce <__ieee754_rem_pio2+0x1ae>
 80182b2:	4b6e      	ldr	r3, [pc, #440]	; (801846c <__ieee754_rem_pio2+0x34c>)
 80182b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80182b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182bc:	4543      	cmp	r3, r8
 80182be:	d006      	beq.n	80182ce <__ieee754_rem_pio2+0x1ae>
 80182c0:	4622      	mov	r2, r4
 80182c2:	462b      	mov	r3, r5
 80182c4:	4630      	mov	r0, r6
 80182c6:	4639      	mov	r1, r7
 80182c8:	f7e8 f806 	bl	80002d8 <__aeabi_dsub>
 80182cc:	e00f      	b.n	80182ee <__ieee754_rem_pio2+0x1ce>
 80182ce:	462b      	mov	r3, r5
 80182d0:	4622      	mov	r2, r4
 80182d2:	4630      	mov	r0, r6
 80182d4:	4639      	mov	r1, r7
 80182d6:	f7e7 ffff 	bl	80002d8 <__aeabi_dsub>
 80182da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80182de:	9303      	str	r3, [sp, #12]
 80182e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80182e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80182e8:	f1b8 0f10 	cmp.w	r8, #16
 80182ec:	dc02      	bgt.n	80182f4 <__ieee754_rem_pio2+0x1d4>
 80182ee:	e9ca 0100 	strd	r0, r1, [sl]
 80182f2:	e039      	b.n	8018368 <__ieee754_rem_pio2+0x248>
 80182f4:	a34e      	add	r3, pc, #312	; (adr r3, 8018430 <__ieee754_rem_pio2+0x310>)
 80182f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182fa:	ec51 0b18 	vmov	r0, r1, d8
 80182fe:	f7e8 f9a3 	bl	8000648 <__aeabi_dmul>
 8018302:	4604      	mov	r4, r0
 8018304:	460d      	mov	r5, r1
 8018306:	4602      	mov	r2, r0
 8018308:	460b      	mov	r3, r1
 801830a:	4630      	mov	r0, r6
 801830c:	4639      	mov	r1, r7
 801830e:	f7e7 ffe3 	bl	80002d8 <__aeabi_dsub>
 8018312:	4602      	mov	r2, r0
 8018314:	460b      	mov	r3, r1
 8018316:	4680      	mov	r8, r0
 8018318:	4689      	mov	r9, r1
 801831a:	4630      	mov	r0, r6
 801831c:	4639      	mov	r1, r7
 801831e:	f7e7 ffdb 	bl	80002d8 <__aeabi_dsub>
 8018322:	4622      	mov	r2, r4
 8018324:	462b      	mov	r3, r5
 8018326:	f7e7 ffd7 	bl	80002d8 <__aeabi_dsub>
 801832a:	a343      	add	r3, pc, #268	; (adr r3, 8018438 <__ieee754_rem_pio2+0x318>)
 801832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018330:	4604      	mov	r4, r0
 8018332:	460d      	mov	r5, r1
 8018334:	ec51 0b18 	vmov	r0, r1, d8
 8018338:	f7e8 f986 	bl	8000648 <__aeabi_dmul>
 801833c:	4622      	mov	r2, r4
 801833e:	462b      	mov	r3, r5
 8018340:	f7e7 ffca 	bl	80002d8 <__aeabi_dsub>
 8018344:	4602      	mov	r2, r0
 8018346:	460b      	mov	r3, r1
 8018348:	4604      	mov	r4, r0
 801834a:	460d      	mov	r5, r1
 801834c:	4640      	mov	r0, r8
 801834e:	4649      	mov	r1, r9
 8018350:	f7e7 ffc2 	bl	80002d8 <__aeabi_dsub>
 8018354:	9a03      	ldr	r2, [sp, #12]
 8018356:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801835a:	1ad3      	subs	r3, r2, r3
 801835c:	2b31      	cmp	r3, #49	; 0x31
 801835e:	dc24      	bgt.n	80183aa <__ieee754_rem_pio2+0x28a>
 8018360:	e9ca 0100 	strd	r0, r1, [sl]
 8018364:	4646      	mov	r6, r8
 8018366:	464f      	mov	r7, r9
 8018368:	e9da 8900 	ldrd	r8, r9, [sl]
 801836c:	4630      	mov	r0, r6
 801836e:	4642      	mov	r2, r8
 8018370:	464b      	mov	r3, r9
 8018372:	4639      	mov	r1, r7
 8018374:	f7e7 ffb0 	bl	80002d8 <__aeabi_dsub>
 8018378:	462b      	mov	r3, r5
 801837a:	4622      	mov	r2, r4
 801837c:	f7e7 ffac 	bl	80002d8 <__aeabi_dsub>
 8018380:	9b02      	ldr	r3, [sp, #8]
 8018382:	2b00      	cmp	r3, #0
 8018384:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018388:	f6bf af0a 	bge.w	80181a0 <__ieee754_rem_pio2+0x80>
 801838c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018390:	f8ca 3004 	str.w	r3, [sl, #4]
 8018394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018398:	f8ca 8000 	str.w	r8, [sl]
 801839c:	f8ca 0008 	str.w	r0, [sl, #8]
 80183a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80183a4:	f1cb 0b00 	rsb	fp, fp, #0
 80183a8:	e6fa      	b.n	80181a0 <__ieee754_rem_pio2+0x80>
 80183aa:	a327      	add	r3, pc, #156	; (adr r3, 8018448 <__ieee754_rem_pio2+0x328>)
 80183ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b0:	ec51 0b18 	vmov	r0, r1, d8
 80183b4:	f7e8 f948 	bl	8000648 <__aeabi_dmul>
 80183b8:	4604      	mov	r4, r0
 80183ba:	460d      	mov	r5, r1
 80183bc:	4602      	mov	r2, r0
 80183be:	460b      	mov	r3, r1
 80183c0:	4640      	mov	r0, r8
 80183c2:	4649      	mov	r1, r9
 80183c4:	f7e7 ff88 	bl	80002d8 <__aeabi_dsub>
 80183c8:	4602      	mov	r2, r0
 80183ca:	460b      	mov	r3, r1
 80183cc:	4606      	mov	r6, r0
 80183ce:	460f      	mov	r7, r1
 80183d0:	4640      	mov	r0, r8
 80183d2:	4649      	mov	r1, r9
 80183d4:	f7e7 ff80 	bl	80002d8 <__aeabi_dsub>
 80183d8:	4622      	mov	r2, r4
 80183da:	462b      	mov	r3, r5
 80183dc:	f7e7 ff7c 	bl	80002d8 <__aeabi_dsub>
 80183e0:	a31b      	add	r3, pc, #108	; (adr r3, 8018450 <__ieee754_rem_pio2+0x330>)
 80183e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e6:	4604      	mov	r4, r0
 80183e8:	460d      	mov	r5, r1
 80183ea:	ec51 0b18 	vmov	r0, r1, d8
 80183ee:	f7e8 f92b 	bl	8000648 <__aeabi_dmul>
 80183f2:	4622      	mov	r2, r4
 80183f4:	462b      	mov	r3, r5
 80183f6:	f7e7 ff6f 	bl	80002d8 <__aeabi_dsub>
 80183fa:	4604      	mov	r4, r0
 80183fc:	460d      	mov	r5, r1
 80183fe:	e75f      	b.n	80182c0 <__ieee754_rem_pio2+0x1a0>
 8018400:	4b1b      	ldr	r3, [pc, #108]	; (8018470 <__ieee754_rem_pio2+0x350>)
 8018402:	4598      	cmp	r8, r3
 8018404:	dd36      	ble.n	8018474 <__ieee754_rem_pio2+0x354>
 8018406:	ee10 2a10 	vmov	r2, s0
 801840a:	462b      	mov	r3, r5
 801840c:	4620      	mov	r0, r4
 801840e:	4629      	mov	r1, r5
 8018410:	f7e7 ff62 	bl	80002d8 <__aeabi_dsub>
 8018414:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018418:	e9ca 0100 	strd	r0, r1, [sl]
 801841c:	e694      	b.n	8018148 <__ieee754_rem_pio2+0x28>
 801841e:	bf00      	nop
 8018420:	54400000 	.word	0x54400000
 8018424:	3ff921fb 	.word	0x3ff921fb
 8018428:	1a626331 	.word	0x1a626331
 801842c:	3dd0b461 	.word	0x3dd0b461
 8018430:	1a600000 	.word	0x1a600000
 8018434:	3dd0b461 	.word	0x3dd0b461
 8018438:	2e037073 	.word	0x2e037073
 801843c:	3ba3198a 	.word	0x3ba3198a
 8018440:	6dc9c883 	.word	0x6dc9c883
 8018444:	3fe45f30 	.word	0x3fe45f30
 8018448:	2e000000 	.word	0x2e000000
 801844c:	3ba3198a 	.word	0x3ba3198a
 8018450:	252049c1 	.word	0x252049c1
 8018454:	397b839a 	.word	0x397b839a
 8018458:	3fe921fb 	.word	0x3fe921fb
 801845c:	4002d97b 	.word	0x4002d97b
 8018460:	3ff921fb 	.word	0x3ff921fb
 8018464:	413921fb 	.word	0x413921fb
 8018468:	3fe00000 	.word	0x3fe00000
 801846c:	08019f74 	.word	0x08019f74
 8018470:	7fefffff 	.word	0x7fefffff
 8018474:	ea4f 5428 	mov.w	r4, r8, asr #20
 8018478:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801847c:	ee10 0a10 	vmov	r0, s0
 8018480:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8018484:	ee10 6a10 	vmov	r6, s0
 8018488:	460f      	mov	r7, r1
 801848a:	f7e8 fb8d 	bl	8000ba8 <__aeabi_d2iz>
 801848e:	f7e8 f871 	bl	8000574 <__aeabi_i2d>
 8018492:	4602      	mov	r2, r0
 8018494:	460b      	mov	r3, r1
 8018496:	4630      	mov	r0, r6
 8018498:	4639      	mov	r1, r7
 801849a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801849e:	f7e7 ff1b 	bl	80002d8 <__aeabi_dsub>
 80184a2:	4b23      	ldr	r3, [pc, #140]	; (8018530 <__ieee754_rem_pio2+0x410>)
 80184a4:	2200      	movs	r2, #0
 80184a6:	f7e8 f8cf 	bl	8000648 <__aeabi_dmul>
 80184aa:	460f      	mov	r7, r1
 80184ac:	4606      	mov	r6, r0
 80184ae:	f7e8 fb7b 	bl	8000ba8 <__aeabi_d2iz>
 80184b2:	f7e8 f85f 	bl	8000574 <__aeabi_i2d>
 80184b6:	4602      	mov	r2, r0
 80184b8:	460b      	mov	r3, r1
 80184ba:	4630      	mov	r0, r6
 80184bc:	4639      	mov	r1, r7
 80184be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80184c2:	f7e7 ff09 	bl	80002d8 <__aeabi_dsub>
 80184c6:	4b1a      	ldr	r3, [pc, #104]	; (8018530 <__ieee754_rem_pio2+0x410>)
 80184c8:	2200      	movs	r2, #0
 80184ca:	f7e8 f8bd 	bl	8000648 <__aeabi_dmul>
 80184ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80184d2:	ad04      	add	r5, sp, #16
 80184d4:	f04f 0803 	mov.w	r8, #3
 80184d8:	46a9      	mov	r9, r5
 80184da:	2600      	movs	r6, #0
 80184dc:	2700      	movs	r7, #0
 80184de:	4632      	mov	r2, r6
 80184e0:	463b      	mov	r3, r7
 80184e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80184e6:	46c3      	mov	fp, r8
 80184e8:	3d08      	subs	r5, #8
 80184ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80184ee:	f7e8 fb13 	bl	8000b18 <__aeabi_dcmpeq>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	d1f3      	bne.n	80184de <__ieee754_rem_pio2+0x3be>
 80184f6:	4b0f      	ldr	r3, [pc, #60]	; (8018534 <__ieee754_rem_pio2+0x414>)
 80184f8:	9301      	str	r3, [sp, #4]
 80184fa:	2302      	movs	r3, #2
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	4622      	mov	r2, r4
 8018500:	465b      	mov	r3, fp
 8018502:	4651      	mov	r1, sl
 8018504:	4648      	mov	r0, r9
 8018506:	f000 f993 	bl	8018830 <__kernel_rem_pio2>
 801850a:	9b02      	ldr	r3, [sp, #8]
 801850c:	2b00      	cmp	r3, #0
 801850e:	4683      	mov	fp, r0
 8018510:	f6bf ae46 	bge.w	80181a0 <__ieee754_rem_pio2+0x80>
 8018514:	e9da 2100 	ldrd	r2, r1, [sl]
 8018518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801851c:	e9ca 2300 	strd	r2, r3, [sl]
 8018520:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8018524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018528:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801852c:	e73a      	b.n	80183a4 <__ieee754_rem_pio2+0x284>
 801852e:	bf00      	nop
 8018530:	41700000 	.word	0x41700000
 8018534:	08019ff4 	.word	0x08019ff4

08018538 <__ieee754_sqrt>:
 8018538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801853c:	ec55 4b10 	vmov	r4, r5, d0
 8018540:	4e55      	ldr	r6, [pc, #340]	; (8018698 <__ieee754_sqrt+0x160>)
 8018542:	43ae      	bics	r6, r5
 8018544:	ee10 0a10 	vmov	r0, s0
 8018548:	ee10 3a10 	vmov	r3, s0
 801854c:	462a      	mov	r2, r5
 801854e:	4629      	mov	r1, r5
 8018550:	d110      	bne.n	8018574 <__ieee754_sqrt+0x3c>
 8018552:	ee10 2a10 	vmov	r2, s0
 8018556:	462b      	mov	r3, r5
 8018558:	f7e8 f876 	bl	8000648 <__aeabi_dmul>
 801855c:	4602      	mov	r2, r0
 801855e:	460b      	mov	r3, r1
 8018560:	4620      	mov	r0, r4
 8018562:	4629      	mov	r1, r5
 8018564:	f7e7 feba 	bl	80002dc <__adddf3>
 8018568:	4604      	mov	r4, r0
 801856a:	460d      	mov	r5, r1
 801856c:	ec45 4b10 	vmov	d0, r4, r5
 8018570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018574:	2d00      	cmp	r5, #0
 8018576:	dc10      	bgt.n	801859a <__ieee754_sqrt+0x62>
 8018578:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801857c:	4330      	orrs	r0, r6
 801857e:	d0f5      	beq.n	801856c <__ieee754_sqrt+0x34>
 8018580:	b15d      	cbz	r5, 801859a <__ieee754_sqrt+0x62>
 8018582:	ee10 2a10 	vmov	r2, s0
 8018586:	462b      	mov	r3, r5
 8018588:	ee10 0a10 	vmov	r0, s0
 801858c:	f7e7 fea4 	bl	80002d8 <__aeabi_dsub>
 8018590:	4602      	mov	r2, r0
 8018592:	460b      	mov	r3, r1
 8018594:	f7e8 f982 	bl	800089c <__aeabi_ddiv>
 8018598:	e7e6      	b.n	8018568 <__ieee754_sqrt+0x30>
 801859a:	1512      	asrs	r2, r2, #20
 801859c:	d074      	beq.n	8018688 <__ieee754_sqrt+0x150>
 801859e:	07d4      	lsls	r4, r2, #31
 80185a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80185a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80185a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80185ac:	bf5e      	ittt	pl
 80185ae:	0fda      	lsrpl	r2, r3, #31
 80185b0:	005b      	lslpl	r3, r3, #1
 80185b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80185b6:	2400      	movs	r4, #0
 80185b8:	0fda      	lsrs	r2, r3, #31
 80185ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80185be:	107f      	asrs	r7, r7, #1
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	2516      	movs	r5, #22
 80185c4:	4620      	mov	r0, r4
 80185c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80185ca:	1886      	adds	r6, r0, r2
 80185cc:	428e      	cmp	r6, r1
 80185ce:	bfde      	ittt	le
 80185d0:	1b89      	suble	r1, r1, r6
 80185d2:	18b0      	addle	r0, r6, r2
 80185d4:	18a4      	addle	r4, r4, r2
 80185d6:	0049      	lsls	r1, r1, #1
 80185d8:	3d01      	subs	r5, #1
 80185da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80185de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80185e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80185e6:	d1f0      	bne.n	80185ca <__ieee754_sqrt+0x92>
 80185e8:	462a      	mov	r2, r5
 80185ea:	f04f 0e20 	mov.w	lr, #32
 80185ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80185f2:	4281      	cmp	r1, r0
 80185f4:	eb06 0c05 	add.w	ip, r6, r5
 80185f8:	dc02      	bgt.n	8018600 <__ieee754_sqrt+0xc8>
 80185fa:	d113      	bne.n	8018624 <__ieee754_sqrt+0xec>
 80185fc:	459c      	cmp	ip, r3
 80185fe:	d811      	bhi.n	8018624 <__ieee754_sqrt+0xec>
 8018600:	f1bc 0f00 	cmp.w	ip, #0
 8018604:	eb0c 0506 	add.w	r5, ip, r6
 8018608:	da43      	bge.n	8018692 <__ieee754_sqrt+0x15a>
 801860a:	2d00      	cmp	r5, #0
 801860c:	db41      	blt.n	8018692 <__ieee754_sqrt+0x15a>
 801860e:	f100 0801 	add.w	r8, r0, #1
 8018612:	1a09      	subs	r1, r1, r0
 8018614:	459c      	cmp	ip, r3
 8018616:	bf88      	it	hi
 8018618:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801861c:	eba3 030c 	sub.w	r3, r3, ip
 8018620:	4432      	add	r2, r6
 8018622:	4640      	mov	r0, r8
 8018624:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018628:	f1be 0e01 	subs.w	lr, lr, #1
 801862c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018630:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018634:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018638:	d1db      	bne.n	80185f2 <__ieee754_sqrt+0xba>
 801863a:	430b      	orrs	r3, r1
 801863c:	d006      	beq.n	801864c <__ieee754_sqrt+0x114>
 801863e:	1c50      	adds	r0, r2, #1
 8018640:	bf13      	iteet	ne
 8018642:	3201      	addne	r2, #1
 8018644:	3401      	addeq	r4, #1
 8018646:	4672      	moveq	r2, lr
 8018648:	f022 0201 	bicne.w	r2, r2, #1
 801864c:	1063      	asrs	r3, r4, #1
 801864e:	0852      	lsrs	r2, r2, #1
 8018650:	07e1      	lsls	r1, r4, #31
 8018652:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018656:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801865a:	bf48      	it	mi
 801865c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018660:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018664:	4614      	mov	r4, r2
 8018666:	e781      	b.n	801856c <__ieee754_sqrt+0x34>
 8018668:	0ad9      	lsrs	r1, r3, #11
 801866a:	3815      	subs	r0, #21
 801866c:	055b      	lsls	r3, r3, #21
 801866e:	2900      	cmp	r1, #0
 8018670:	d0fa      	beq.n	8018668 <__ieee754_sqrt+0x130>
 8018672:	02cd      	lsls	r5, r1, #11
 8018674:	d50a      	bpl.n	801868c <__ieee754_sqrt+0x154>
 8018676:	f1c2 0420 	rsb	r4, r2, #32
 801867a:	fa23 f404 	lsr.w	r4, r3, r4
 801867e:	1e55      	subs	r5, r2, #1
 8018680:	4093      	lsls	r3, r2
 8018682:	4321      	orrs	r1, r4
 8018684:	1b42      	subs	r2, r0, r5
 8018686:	e78a      	b.n	801859e <__ieee754_sqrt+0x66>
 8018688:	4610      	mov	r0, r2
 801868a:	e7f0      	b.n	801866e <__ieee754_sqrt+0x136>
 801868c:	0049      	lsls	r1, r1, #1
 801868e:	3201      	adds	r2, #1
 8018690:	e7ef      	b.n	8018672 <__ieee754_sqrt+0x13a>
 8018692:	4680      	mov	r8, r0
 8018694:	e7bd      	b.n	8018612 <__ieee754_sqrt+0xda>
 8018696:	bf00      	nop
 8018698:	7ff00000 	.word	0x7ff00000
 801869c:	00000000 	.word	0x00000000

080186a0 <__kernel_cos>:
 80186a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a4:	ec57 6b10 	vmov	r6, r7, d0
 80186a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80186ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80186b0:	ed8d 1b00 	vstr	d1, [sp]
 80186b4:	da07      	bge.n	80186c6 <__kernel_cos+0x26>
 80186b6:	ee10 0a10 	vmov	r0, s0
 80186ba:	4639      	mov	r1, r7
 80186bc:	f7e8 fa74 	bl	8000ba8 <__aeabi_d2iz>
 80186c0:	2800      	cmp	r0, #0
 80186c2:	f000 8088 	beq.w	80187d6 <__kernel_cos+0x136>
 80186c6:	4632      	mov	r2, r6
 80186c8:	463b      	mov	r3, r7
 80186ca:	4630      	mov	r0, r6
 80186cc:	4639      	mov	r1, r7
 80186ce:	f7e7 ffbb 	bl	8000648 <__aeabi_dmul>
 80186d2:	4b51      	ldr	r3, [pc, #324]	; (8018818 <__kernel_cos+0x178>)
 80186d4:	2200      	movs	r2, #0
 80186d6:	4604      	mov	r4, r0
 80186d8:	460d      	mov	r5, r1
 80186da:	f7e7 ffb5 	bl	8000648 <__aeabi_dmul>
 80186de:	a340      	add	r3, pc, #256	; (adr r3, 80187e0 <__kernel_cos+0x140>)
 80186e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186e4:	4682      	mov	sl, r0
 80186e6:	468b      	mov	fp, r1
 80186e8:	4620      	mov	r0, r4
 80186ea:	4629      	mov	r1, r5
 80186ec:	f7e7 ffac 	bl	8000648 <__aeabi_dmul>
 80186f0:	a33d      	add	r3, pc, #244	; (adr r3, 80187e8 <__kernel_cos+0x148>)
 80186f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186f6:	f7e7 fdf1 	bl	80002dc <__adddf3>
 80186fa:	4622      	mov	r2, r4
 80186fc:	462b      	mov	r3, r5
 80186fe:	f7e7 ffa3 	bl	8000648 <__aeabi_dmul>
 8018702:	a33b      	add	r3, pc, #236	; (adr r3, 80187f0 <__kernel_cos+0x150>)
 8018704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018708:	f7e7 fde6 	bl	80002d8 <__aeabi_dsub>
 801870c:	4622      	mov	r2, r4
 801870e:	462b      	mov	r3, r5
 8018710:	f7e7 ff9a 	bl	8000648 <__aeabi_dmul>
 8018714:	a338      	add	r3, pc, #224	; (adr r3, 80187f8 <__kernel_cos+0x158>)
 8018716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871a:	f7e7 fddf 	bl	80002dc <__adddf3>
 801871e:	4622      	mov	r2, r4
 8018720:	462b      	mov	r3, r5
 8018722:	f7e7 ff91 	bl	8000648 <__aeabi_dmul>
 8018726:	a336      	add	r3, pc, #216	; (adr r3, 8018800 <__kernel_cos+0x160>)
 8018728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872c:	f7e7 fdd4 	bl	80002d8 <__aeabi_dsub>
 8018730:	4622      	mov	r2, r4
 8018732:	462b      	mov	r3, r5
 8018734:	f7e7 ff88 	bl	8000648 <__aeabi_dmul>
 8018738:	a333      	add	r3, pc, #204	; (adr r3, 8018808 <__kernel_cos+0x168>)
 801873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801873e:	f7e7 fdcd 	bl	80002dc <__adddf3>
 8018742:	4622      	mov	r2, r4
 8018744:	462b      	mov	r3, r5
 8018746:	f7e7 ff7f 	bl	8000648 <__aeabi_dmul>
 801874a:	4622      	mov	r2, r4
 801874c:	462b      	mov	r3, r5
 801874e:	f7e7 ff7b 	bl	8000648 <__aeabi_dmul>
 8018752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018756:	4604      	mov	r4, r0
 8018758:	460d      	mov	r5, r1
 801875a:	4630      	mov	r0, r6
 801875c:	4639      	mov	r1, r7
 801875e:	f7e7 ff73 	bl	8000648 <__aeabi_dmul>
 8018762:	460b      	mov	r3, r1
 8018764:	4602      	mov	r2, r0
 8018766:	4629      	mov	r1, r5
 8018768:	4620      	mov	r0, r4
 801876a:	f7e7 fdb5 	bl	80002d8 <__aeabi_dsub>
 801876e:	4b2b      	ldr	r3, [pc, #172]	; (801881c <__kernel_cos+0x17c>)
 8018770:	4598      	cmp	r8, r3
 8018772:	4606      	mov	r6, r0
 8018774:	460f      	mov	r7, r1
 8018776:	dc10      	bgt.n	801879a <__kernel_cos+0xfa>
 8018778:	4602      	mov	r2, r0
 801877a:	460b      	mov	r3, r1
 801877c:	4650      	mov	r0, sl
 801877e:	4659      	mov	r1, fp
 8018780:	f7e7 fdaa 	bl	80002d8 <__aeabi_dsub>
 8018784:	460b      	mov	r3, r1
 8018786:	4926      	ldr	r1, [pc, #152]	; (8018820 <__kernel_cos+0x180>)
 8018788:	4602      	mov	r2, r0
 801878a:	2000      	movs	r0, #0
 801878c:	f7e7 fda4 	bl	80002d8 <__aeabi_dsub>
 8018790:	ec41 0b10 	vmov	d0, r0, r1
 8018794:	b003      	add	sp, #12
 8018796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801879a:	4b22      	ldr	r3, [pc, #136]	; (8018824 <__kernel_cos+0x184>)
 801879c:	4920      	ldr	r1, [pc, #128]	; (8018820 <__kernel_cos+0x180>)
 801879e:	4598      	cmp	r8, r3
 80187a0:	bfcc      	ite	gt
 80187a2:	4d21      	ldrgt	r5, [pc, #132]	; (8018828 <__kernel_cos+0x188>)
 80187a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80187a8:	2400      	movs	r4, #0
 80187aa:	4622      	mov	r2, r4
 80187ac:	462b      	mov	r3, r5
 80187ae:	2000      	movs	r0, #0
 80187b0:	f7e7 fd92 	bl	80002d8 <__aeabi_dsub>
 80187b4:	4622      	mov	r2, r4
 80187b6:	4680      	mov	r8, r0
 80187b8:	4689      	mov	r9, r1
 80187ba:	462b      	mov	r3, r5
 80187bc:	4650      	mov	r0, sl
 80187be:	4659      	mov	r1, fp
 80187c0:	f7e7 fd8a 	bl	80002d8 <__aeabi_dsub>
 80187c4:	4632      	mov	r2, r6
 80187c6:	463b      	mov	r3, r7
 80187c8:	f7e7 fd86 	bl	80002d8 <__aeabi_dsub>
 80187cc:	4602      	mov	r2, r0
 80187ce:	460b      	mov	r3, r1
 80187d0:	4640      	mov	r0, r8
 80187d2:	4649      	mov	r1, r9
 80187d4:	e7da      	b.n	801878c <__kernel_cos+0xec>
 80187d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018810 <__kernel_cos+0x170>
 80187da:	e7db      	b.n	8018794 <__kernel_cos+0xf4>
 80187dc:	f3af 8000 	nop.w
 80187e0:	be8838d4 	.word	0xbe8838d4
 80187e4:	bda8fae9 	.word	0xbda8fae9
 80187e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80187ec:	3e21ee9e 	.word	0x3e21ee9e
 80187f0:	809c52ad 	.word	0x809c52ad
 80187f4:	3e927e4f 	.word	0x3e927e4f
 80187f8:	19cb1590 	.word	0x19cb1590
 80187fc:	3efa01a0 	.word	0x3efa01a0
 8018800:	16c15177 	.word	0x16c15177
 8018804:	3f56c16c 	.word	0x3f56c16c
 8018808:	5555554c 	.word	0x5555554c
 801880c:	3fa55555 	.word	0x3fa55555
 8018810:	00000000 	.word	0x00000000
 8018814:	3ff00000 	.word	0x3ff00000
 8018818:	3fe00000 	.word	0x3fe00000
 801881c:	3fd33332 	.word	0x3fd33332
 8018820:	3ff00000 	.word	0x3ff00000
 8018824:	3fe90000 	.word	0x3fe90000
 8018828:	3fd20000 	.word	0x3fd20000
 801882c:	00000000 	.word	0x00000000

08018830 <__kernel_rem_pio2>:
 8018830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018834:	ed2d 8b02 	vpush	{d8}
 8018838:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801883c:	f112 0f14 	cmn.w	r2, #20
 8018840:	9308      	str	r3, [sp, #32]
 8018842:	9101      	str	r1, [sp, #4]
 8018844:	4bc4      	ldr	r3, [pc, #784]	; (8018b58 <__kernel_rem_pio2+0x328>)
 8018846:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018848:	900b      	str	r0, [sp, #44]	; 0x2c
 801884a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801884e:	9302      	str	r3, [sp, #8]
 8018850:	9b08      	ldr	r3, [sp, #32]
 8018852:	f103 33ff 	add.w	r3, r3, #4294967295
 8018856:	bfa8      	it	ge
 8018858:	1ed4      	subge	r4, r2, #3
 801885a:	9306      	str	r3, [sp, #24]
 801885c:	bfb2      	itee	lt
 801885e:	2400      	movlt	r4, #0
 8018860:	2318      	movge	r3, #24
 8018862:	fb94 f4f3 	sdivge	r4, r4, r3
 8018866:	f06f 0317 	mvn.w	r3, #23
 801886a:	fb04 3303 	mla	r3, r4, r3, r3
 801886e:	eb03 0a02 	add.w	sl, r3, r2
 8018872:	9b02      	ldr	r3, [sp, #8]
 8018874:	9a06      	ldr	r2, [sp, #24]
 8018876:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8018b48 <__kernel_rem_pio2+0x318>
 801887a:	eb03 0802 	add.w	r8, r3, r2
 801887e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018880:	1aa7      	subs	r7, r4, r2
 8018882:	ae22      	add	r6, sp, #136	; 0x88
 8018884:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018888:	2500      	movs	r5, #0
 801888a:	4545      	cmp	r5, r8
 801888c:	dd13      	ble.n	80188b6 <__kernel_rem_pio2+0x86>
 801888e:	9b08      	ldr	r3, [sp, #32]
 8018890:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8018b48 <__kernel_rem_pio2+0x318>
 8018894:	aa22      	add	r2, sp, #136	; 0x88
 8018896:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801889a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801889e:	f04f 0800 	mov.w	r8, #0
 80188a2:	9b02      	ldr	r3, [sp, #8]
 80188a4:	4598      	cmp	r8, r3
 80188a6:	dc2f      	bgt.n	8018908 <__kernel_rem_pio2+0xd8>
 80188a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80188ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80188b0:	462f      	mov	r7, r5
 80188b2:	2600      	movs	r6, #0
 80188b4:	e01b      	b.n	80188ee <__kernel_rem_pio2+0xbe>
 80188b6:	42ef      	cmn	r7, r5
 80188b8:	d407      	bmi.n	80188ca <__kernel_rem_pio2+0x9a>
 80188ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80188be:	f7e7 fe59 	bl	8000574 <__aeabi_i2d>
 80188c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80188c6:	3501      	adds	r5, #1
 80188c8:	e7df      	b.n	801888a <__kernel_rem_pio2+0x5a>
 80188ca:	ec51 0b18 	vmov	r0, r1, d8
 80188ce:	e7f8      	b.n	80188c2 <__kernel_rem_pio2+0x92>
 80188d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80188d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80188d8:	f7e7 feb6 	bl	8000648 <__aeabi_dmul>
 80188dc:	4602      	mov	r2, r0
 80188de:	460b      	mov	r3, r1
 80188e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188e4:	f7e7 fcfa 	bl	80002dc <__adddf3>
 80188e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80188ec:	3601      	adds	r6, #1
 80188ee:	9b06      	ldr	r3, [sp, #24]
 80188f0:	429e      	cmp	r6, r3
 80188f2:	f1a7 0708 	sub.w	r7, r7, #8
 80188f6:	ddeb      	ble.n	80188d0 <__kernel_rem_pio2+0xa0>
 80188f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80188fc:	f108 0801 	add.w	r8, r8, #1
 8018900:	ecab 7b02 	vstmia	fp!, {d7}
 8018904:	3508      	adds	r5, #8
 8018906:	e7cc      	b.n	80188a2 <__kernel_rem_pio2+0x72>
 8018908:	9b02      	ldr	r3, [sp, #8]
 801890a:	aa0e      	add	r2, sp, #56	; 0x38
 801890c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018910:	930d      	str	r3, [sp, #52]	; 0x34
 8018912:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018914:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018918:	9c02      	ldr	r4, [sp, #8]
 801891a:	930c      	str	r3, [sp, #48]	; 0x30
 801891c:	00e3      	lsls	r3, r4, #3
 801891e:	930a      	str	r3, [sp, #40]	; 0x28
 8018920:	ab9a      	add	r3, sp, #616	; 0x268
 8018922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018926:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801892a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801892e:	ab72      	add	r3, sp, #456	; 0x1c8
 8018930:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8018934:	46c3      	mov	fp, r8
 8018936:	46a1      	mov	r9, r4
 8018938:	f1b9 0f00 	cmp.w	r9, #0
 801893c:	f1a5 0508 	sub.w	r5, r5, #8
 8018940:	dc77      	bgt.n	8018a32 <__kernel_rem_pio2+0x202>
 8018942:	ec47 6b10 	vmov	d0, r6, r7
 8018946:	4650      	mov	r0, sl
 8018948:	f000 fc0a 	bl	8019160 <scalbn>
 801894c:	ec57 6b10 	vmov	r6, r7, d0
 8018950:	2200      	movs	r2, #0
 8018952:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018956:	ee10 0a10 	vmov	r0, s0
 801895a:	4639      	mov	r1, r7
 801895c:	f7e7 fe74 	bl	8000648 <__aeabi_dmul>
 8018960:	ec41 0b10 	vmov	d0, r0, r1
 8018964:	f000 fb7c 	bl	8019060 <floor>
 8018968:	4b7c      	ldr	r3, [pc, #496]	; (8018b5c <__kernel_rem_pio2+0x32c>)
 801896a:	ec51 0b10 	vmov	r0, r1, d0
 801896e:	2200      	movs	r2, #0
 8018970:	f7e7 fe6a 	bl	8000648 <__aeabi_dmul>
 8018974:	4602      	mov	r2, r0
 8018976:	460b      	mov	r3, r1
 8018978:	4630      	mov	r0, r6
 801897a:	4639      	mov	r1, r7
 801897c:	f7e7 fcac 	bl	80002d8 <__aeabi_dsub>
 8018980:	460f      	mov	r7, r1
 8018982:	4606      	mov	r6, r0
 8018984:	f7e8 f910 	bl	8000ba8 <__aeabi_d2iz>
 8018988:	9004      	str	r0, [sp, #16]
 801898a:	f7e7 fdf3 	bl	8000574 <__aeabi_i2d>
 801898e:	4602      	mov	r2, r0
 8018990:	460b      	mov	r3, r1
 8018992:	4630      	mov	r0, r6
 8018994:	4639      	mov	r1, r7
 8018996:	f7e7 fc9f 	bl	80002d8 <__aeabi_dsub>
 801899a:	f1ba 0f00 	cmp.w	sl, #0
 801899e:	4606      	mov	r6, r0
 80189a0:	460f      	mov	r7, r1
 80189a2:	dd6d      	ble.n	8018a80 <__kernel_rem_pio2+0x250>
 80189a4:	1e62      	subs	r2, r4, #1
 80189a6:	ab0e      	add	r3, sp, #56	; 0x38
 80189a8:	9d04      	ldr	r5, [sp, #16]
 80189aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80189ae:	f1ca 0118 	rsb	r1, sl, #24
 80189b2:	fa40 f301 	asr.w	r3, r0, r1
 80189b6:	441d      	add	r5, r3
 80189b8:	408b      	lsls	r3, r1
 80189ba:	1ac0      	subs	r0, r0, r3
 80189bc:	ab0e      	add	r3, sp, #56	; 0x38
 80189be:	9504      	str	r5, [sp, #16]
 80189c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80189c4:	f1ca 0317 	rsb	r3, sl, #23
 80189c8:	fa40 fb03 	asr.w	fp, r0, r3
 80189cc:	f1bb 0f00 	cmp.w	fp, #0
 80189d0:	dd65      	ble.n	8018a9e <__kernel_rem_pio2+0x26e>
 80189d2:	9b04      	ldr	r3, [sp, #16]
 80189d4:	2200      	movs	r2, #0
 80189d6:	3301      	adds	r3, #1
 80189d8:	9304      	str	r3, [sp, #16]
 80189da:	4615      	mov	r5, r2
 80189dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80189e0:	4294      	cmp	r4, r2
 80189e2:	f300 809c 	bgt.w	8018b1e <__kernel_rem_pio2+0x2ee>
 80189e6:	f1ba 0f00 	cmp.w	sl, #0
 80189ea:	dd07      	ble.n	80189fc <__kernel_rem_pio2+0x1cc>
 80189ec:	f1ba 0f01 	cmp.w	sl, #1
 80189f0:	f000 80c0 	beq.w	8018b74 <__kernel_rem_pio2+0x344>
 80189f4:	f1ba 0f02 	cmp.w	sl, #2
 80189f8:	f000 80c6 	beq.w	8018b88 <__kernel_rem_pio2+0x358>
 80189fc:	f1bb 0f02 	cmp.w	fp, #2
 8018a00:	d14d      	bne.n	8018a9e <__kernel_rem_pio2+0x26e>
 8018a02:	4632      	mov	r2, r6
 8018a04:	463b      	mov	r3, r7
 8018a06:	4956      	ldr	r1, [pc, #344]	; (8018b60 <__kernel_rem_pio2+0x330>)
 8018a08:	2000      	movs	r0, #0
 8018a0a:	f7e7 fc65 	bl	80002d8 <__aeabi_dsub>
 8018a0e:	4606      	mov	r6, r0
 8018a10:	460f      	mov	r7, r1
 8018a12:	2d00      	cmp	r5, #0
 8018a14:	d043      	beq.n	8018a9e <__kernel_rem_pio2+0x26e>
 8018a16:	4650      	mov	r0, sl
 8018a18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8018b50 <__kernel_rem_pio2+0x320>
 8018a1c:	f000 fba0 	bl	8019160 <scalbn>
 8018a20:	4630      	mov	r0, r6
 8018a22:	4639      	mov	r1, r7
 8018a24:	ec53 2b10 	vmov	r2, r3, d0
 8018a28:	f7e7 fc56 	bl	80002d8 <__aeabi_dsub>
 8018a2c:	4606      	mov	r6, r0
 8018a2e:	460f      	mov	r7, r1
 8018a30:	e035      	b.n	8018a9e <__kernel_rem_pio2+0x26e>
 8018a32:	4b4c      	ldr	r3, [pc, #304]	; (8018b64 <__kernel_rem_pio2+0x334>)
 8018a34:	2200      	movs	r2, #0
 8018a36:	4630      	mov	r0, r6
 8018a38:	4639      	mov	r1, r7
 8018a3a:	f7e7 fe05 	bl	8000648 <__aeabi_dmul>
 8018a3e:	f7e8 f8b3 	bl	8000ba8 <__aeabi_d2iz>
 8018a42:	f7e7 fd97 	bl	8000574 <__aeabi_i2d>
 8018a46:	4602      	mov	r2, r0
 8018a48:	460b      	mov	r3, r1
 8018a4a:	ec43 2b18 	vmov	d8, r2, r3
 8018a4e:	4b46      	ldr	r3, [pc, #280]	; (8018b68 <__kernel_rem_pio2+0x338>)
 8018a50:	2200      	movs	r2, #0
 8018a52:	f7e7 fdf9 	bl	8000648 <__aeabi_dmul>
 8018a56:	4602      	mov	r2, r0
 8018a58:	460b      	mov	r3, r1
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	4639      	mov	r1, r7
 8018a5e:	f7e7 fc3b 	bl	80002d8 <__aeabi_dsub>
 8018a62:	f7e8 f8a1 	bl	8000ba8 <__aeabi_d2iz>
 8018a66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018a6a:	f84b 0b04 	str.w	r0, [fp], #4
 8018a6e:	ec51 0b18 	vmov	r0, r1, d8
 8018a72:	f7e7 fc33 	bl	80002dc <__adddf3>
 8018a76:	f109 39ff 	add.w	r9, r9, #4294967295
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	460f      	mov	r7, r1
 8018a7e:	e75b      	b.n	8018938 <__kernel_rem_pio2+0x108>
 8018a80:	d106      	bne.n	8018a90 <__kernel_rem_pio2+0x260>
 8018a82:	1e63      	subs	r3, r4, #1
 8018a84:	aa0e      	add	r2, sp, #56	; 0x38
 8018a86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018a8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8018a8e:	e79d      	b.n	80189cc <__kernel_rem_pio2+0x19c>
 8018a90:	4b36      	ldr	r3, [pc, #216]	; (8018b6c <__kernel_rem_pio2+0x33c>)
 8018a92:	2200      	movs	r2, #0
 8018a94:	f7e8 f85e 	bl	8000b54 <__aeabi_dcmpge>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	d13d      	bne.n	8018b18 <__kernel_rem_pio2+0x2e8>
 8018a9c:	4683      	mov	fp, r0
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	4630      	mov	r0, r6
 8018aa4:	4639      	mov	r1, r7
 8018aa6:	f7e8 f837 	bl	8000b18 <__aeabi_dcmpeq>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	f000 80c0 	beq.w	8018c30 <__kernel_rem_pio2+0x400>
 8018ab0:	1e65      	subs	r5, r4, #1
 8018ab2:	462b      	mov	r3, r5
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	9902      	ldr	r1, [sp, #8]
 8018ab8:	428b      	cmp	r3, r1
 8018aba:	da6c      	bge.n	8018b96 <__kernel_rem_pio2+0x366>
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	f000 8089 	beq.w	8018bd4 <__kernel_rem_pio2+0x3a4>
 8018ac2:	ab0e      	add	r3, sp, #56	; 0x38
 8018ac4:	f1aa 0a18 	sub.w	sl, sl, #24
 8018ac8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f000 80ad 	beq.w	8018c2c <__kernel_rem_pio2+0x3fc>
 8018ad2:	4650      	mov	r0, sl
 8018ad4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8018b50 <__kernel_rem_pio2+0x320>
 8018ad8:	f000 fb42 	bl	8019160 <scalbn>
 8018adc:	ab9a      	add	r3, sp, #616	; 0x268
 8018ade:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018ae2:	ec57 6b10 	vmov	r6, r7, d0
 8018ae6:	00ec      	lsls	r4, r5, #3
 8018ae8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8018aec:	46aa      	mov	sl, r5
 8018aee:	f1ba 0f00 	cmp.w	sl, #0
 8018af2:	f280 80d6 	bge.w	8018ca2 <__kernel_rem_pio2+0x472>
 8018af6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8018b48 <__kernel_rem_pio2+0x318>
 8018afa:	462e      	mov	r6, r5
 8018afc:	2e00      	cmp	r6, #0
 8018afe:	f2c0 8104 	blt.w	8018d0a <__kernel_rem_pio2+0x4da>
 8018b02:	ab72      	add	r3, sp, #456	; 0x1c8
 8018b04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8018b08:	f8df a064 	ldr.w	sl, [pc, #100]	; 8018b70 <__kernel_rem_pio2+0x340>
 8018b0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8018b10:	f04f 0800 	mov.w	r8, #0
 8018b14:	1baf      	subs	r7, r5, r6
 8018b16:	e0ea      	b.n	8018cee <__kernel_rem_pio2+0x4be>
 8018b18:	f04f 0b02 	mov.w	fp, #2
 8018b1c:	e759      	b.n	80189d2 <__kernel_rem_pio2+0x1a2>
 8018b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8018b22:	b955      	cbnz	r5, 8018b3a <__kernel_rem_pio2+0x30a>
 8018b24:	b123      	cbz	r3, 8018b30 <__kernel_rem_pio2+0x300>
 8018b26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018b2a:	f8c8 3000 	str.w	r3, [r8]
 8018b2e:	2301      	movs	r3, #1
 8018b30:	3201      	adds	r2, #1
 8018b32:	f108 0804 	add.w	r8, r8, #4
 8018b36:	461d      	mov	r5, r3
 8018b38:	e752      	b.n	80189e0 <__kernel_rem_pio2+0x1b0>
 8018b3a:	1acb      	subs	r3, r1, r3
 8018b3c:	f8c8 3000 	str.w	r3, [r8]
 8018b40:	462b      	mov	r3, r5
 8018b42:	e7f5      	b.n	8018b30 <__kernel_rem_pio2+0x300>
 8018b44:	f3af 8000 	nop.w
	...
 8018b54:	3ff00000 	.word	0x3ff00000
 8018b58:	0801a140 	.word	0x0801a140
 8018b5c:	40200000 	.word	0x40200000
 8018b60:	3ff00000 	.word	0x3ff00000
 8018b64:	3e700000 	.word	0x3e700000
 8018b68:	41700000 	.word	0x41700000
 8018b6c:	3fe00000 	.word	0x3fe00000
 8018b70:	0801a100 	.word	0x0801a100
 8018b74:	1e62      	subs	r2, r4, #1
 8018b76:	ab0e      	add	r3, sp, #56	; 0x38
 8018b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018b80:	a90e      	add	r1, sp, #56	; 0x38
 8018b82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018b86:	e739      	b.n	80189fc <__kernel_rem_pio2+0x1cc>
 8018b88:	1e62      	subs	r2, r4, #1
 8018b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8018b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018b94:	e7f4      	b.n	8018b80 <__kernel_rem_pio2+0x350>
 8018b96:	a90e      	add	r1, sp, #56	; 0x38
 8018b98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	430a      	orrs	r2, r1
 8018ba0:	e789      	b.n	8018ab6 <__kernel_rem_pio2+0x286>
 8018ba2:	3301      	adds	r3, #1
 8018ba4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018ba8:	2900      	cmp	r1, #0
 8018baa:	d0fa      	beq.n	8018ba2 <__kernel_rem_pio2+0x372>
 8018bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018bae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8018bb2:	446a      	add	r2, sp
 8018bb4:	3a98      	subs	r2, #152	; 0x98
 8018bb6:	920a      	str	r2, [sp, #40]	; 0x28
 8018bb8:	9a08      	ldr	r2, [sp, #32]
 8018bba:	18e3      	adds	r3, r4, r3
 8018bbc:	18a5      	adds	r5, r4, r2
 8018bbe:	aa22      	add	r2, sp, #136	; 0x88
 8018bc0:	f104 0801 	add.w	r8, r4, #1
 8018bc4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8018bc8:	9304      	str	r3, [sp, #16]
 8018bca:	9b04      	ldr	r3, [sp, #16]
 8018bcc:	4543      	cmp	r3, r8
 8018bce:	da04      	bge.n	8018bda <__kernel_rem_pio2+0x3aa>
 8018bd0:	461c      	mov	r4, r3
 8018bd2:	e6a3      	b.n	801891c <__kernel_rem_pio2+0xec>
 8018bd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	e7e4      	b.n	8018ba4 <__kernel_rem_pio2+0x374>
 8018bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018be0:	f7e7 fcc8 	bl	8000574 <__aeabi_i2d>
 8018be4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8018be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bea:	46ab      	mov	fp, r5
 8018bec:	461c      	mov	r4, r3
 8018bee:	f04f 0900 	mov.w	r9, #0
 8018bf2:	2600      	movs	r6, #0
 8018bf4:	2700      	movs	r7, #0
 8018bf6:	9b06      	ldr	r3, [sp, #24]
 8018bf8:	4599      	cmp	r9, r3
 8018bfa:	dd06      	ble.n	8018c0a <__kernel_rem_pio2+0x3da>
 8018bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018bfe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8018c02:	f108 0801 	add.w	r8, r8, #1
 8018c06:	930a      	str	r3, [sp, #40]	; 0x28
 8018c08:	e7df      	b.n	8018bca <__kernel_rem_pio2+0x39a>
 8018c0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018c0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018c12:	f7e7 fd19 	bl	8000648 <__aeabi_dmul>
 8018c16:	4602      	mov	r2, r0
 8018c18:	460b      	mov	r3, r1
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	4639      	mov	r1, r7
 8018c1e:	f7e7 fb5d 	bl	80002dc <__adddf3>
 8018c22:	f109 0901 	add.w	r9, r9, #1
 8018c26:	4606      	mov	r6, r0
 8018c28:	460f      	mov	r7, r1
 8018c2a:	e7e4      	b.n	8018bf6 <__kernel_rem_pio2+0x3c6>
 8018c2c:	3d01      	subs	r5, #1
 8018c2e:	e748      	b.n	8018ac2 <__kernel_rem_pio2+0x292>
 8018c30:	ec47 6b10 	vmov	d0, r6, r7
 8018c34:	f1ca 0000 	rsb	r0, sl, #0
 8018c38:	f000 fa92 	bl	8019160 <scalbn>
 8018c3c:	ec57 6b10 	vmov	r6, r7, d0
 8018c40:	4ba0      	ldr	r3, [pc, #640]	; (8018ec4 <__kernel_rem_pio2+0x694>)
 8018c42:	ee10 0a10 	vmov	r0, s0
 8018c46:	2200      	movs	r2, #0
 8018c48:	4639      	mov	r1, r7
 8018c4a:	f7e7 ff83 	bl	8000b54 <__aeabi_dcmpge>
 8018c4e:	b1f8      	cbz	r0, 8018c90 <__kernel_rem_pio2+0x460>
 8018c50:	4b9d      	ldr	r3, [pc, #628]	; (8018ec8 <__kernel_rem_pio2+0x698>)
 8018c52:	2200      	movs	r2, #0
 8018c54:	4630      	mov	r0, r6
 8018c56:	4639      	mov	r1, r7
 8018c58:	f7e7 fcf6 	bl	8000648 <__aeabi_dmul>
 8018c5c:	f7e7 ffa4 	bl	8000ba8 <__aeabi_d2iz>
 8018c60:	4680      	mov	r8, r0
 8018c62:	f7e7 fc87 	bl	8000574 <__aeabi_i2d>
 8018c66:	4b97      	ldr	r3, [pc, #604]	; (8018ec4 <__kernel_rem_pio2+0x694>)
 8018c68:	2200      	movs	r2, #0
 8018c6a:	f7e7 fced 	bl	8000648 <__aeabi_dmul>
 8018c6e:	460b      	mov	r3, r1
 8018c70:	4602      	mov	r2, r0
 8018c72:	4639      	mov	r1, r7
 8018c74:	4630      	mov	r0, r6
 8018c76:	f7e7 fb2f 	bl	80002d8 <__aeabi_dsub>
 8018c7a:	f7e7 ff95 	bl	8000ba8 <__aeabi_d2iz>
 8018c7e:	1c65      	adds	r5, r4, #1
 8018c80:	ab0e      	add	r3, sp, #56	; 0x38
 8018c82:	f10a 0a18 	add.w	sl, sl, #24
 8018c86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018c8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018c8e:	e720      	b.n	8018ad2 <__kernel_rem_pio2+0x2a2>
 8018c90:	4630      	mov	r0, r6
 8018c92:	4639      	mov	r1, r7
 8018c94:	f7e7 ff88 	bl	8000ba8 <__aeabi_d2iz>
 8018c98:	ab0e      	add	r3, sp, #56	; 0x38
 8018c9a:	4625      	mov	r5, r4
 8018c9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018ca0:	e717      	b.n	8018ad2 <__kernel_rem_pio2+0x2a2>
 8018ca2:	ab0e      	add	r3, sp, #56	; 0x38
 8018ca4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8018ca8:	f7e7 fc64 	bl	8000574 <__aeabi_i2d>
 8018cac:	4632      	mov	r2, r6
 8018cae:	463b      	mov	r3, r7
 8018cb0:	f7e7 fcca 	bl	8000648 <__aeabi_dmul>
 8018cb4:	4b84      	ldr	r3, [pc, #528]	; (8018ec8 <__kernel_rem_pio2+0x698>)
 8018cb6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8018cba:	2200      	movs	r2, #0
 8018cbc:	4630      	mov	r0, r6
 8018cbe:	4639      	mov	r1, r7
 8018cc0:	f7e7 fcc2 	bl	8000648 <__aeabi_dmul>
 8018cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018cc8:	4606      	mov	r6, r0
 8018cca:	460f      	mov	r7, r1
 8018ccc:	e70f      	b.n	8018aee <__kernel_rem_pio2+0x2be>
 8018cce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8018cd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8018cd6:	f7e7 fcb7 	bl	8000648 <__aeabi_dmul>
 8018cda:	4602      	mov	r2, r0
 8018cdc:	460b      	mov	r3, r1
 8018cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ce2:	f7e7 fafb 	bl	80002dc <__adddf3>
 8018ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018cea:	f108 0801 	add.w	r8, r8, #1
 8018cee:	9b02      	ldr	r3, [sp, #8]
 8018cf0:	4598      	cmp	r8, r3
 8018cf2:	dc01      	bgt.n	8018cf8 <__kernel_rem_pio2+0x4c8>
 8018cf4:	45b8      	cmp	r8, r7
 8018cf6:	ddea      	ble.n	8018cce <__kernel_rem_pio2+0x49e>
 8018cf8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8018cfc:	ab4a      	add	r3, sp, #296	; 0x128
 8018cfe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8018d02:	ed87 7b00 	vstr	d7, [r7]
 8018d06:	3e01      	subs	r6, #1
 8018d08:	e6f8      	b.n	8018afc <__kernel_rem_pio2+0x2cc>
 8018d0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8018d0c:	2b02      	cmp	r3, #2
 8018d0e:	dc0b      	bgt.n	8018d28 <__kernel_rem_pio2+0x4f8>
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	dc35      	bgt.n	8018d80 <__kernel_rem_pio2+0x550>
 8018d14:	d059      	beq.n	8018dca <__kernel_rem_pio2+0x59a>
 8018d16:	9b04      	ldr	r3, [sp, #16]
 8018d18:	f003 0007 	and.w	r0, r3, #7
 8018d1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8018d20:	ecbd 8b02 	vpop	{d8}
 8018d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8018d2a:	2b03      	cmp	r3, #3
 8018d2c:	d1f3      	bne.n	8018d16 <__kernel_rem_pio2+0x4e6>
 8018d2e:	ab4a      	add	r3, sp, #296	; 0x128
 8018d30:	4423      	add	r3, r4
 8018d32:	9306      	str	r3, [sp, #24]
 8018d34:	461c      	mov	r4, r3
 8018d36:	469a      	mov	sl, r3
 8018d38:	9502      	str	r5, [sp, #8]
 8018d3a:	9b02      	ldr	r3, [sp, #8]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f1aa 0a08 	sub.w	sl, sl, #8
 8018d42:	dc6b      	bgt.n	8018e1c <__kernel_rem_pio2+0x5ec>
 8018d44:	46aa      	mov	sl, r5
 8018d46:	f1ba 0f01 	cmp.w	sl, #1
 8018d4a:	f1a4 0408 	sub.w	r4, r4, #8
 8018d4e:	f300 8085 	bgt.w	8018e5c <__kernel_rem_pio2+0x62c>
 8018d52:	9c06      	ldr	r4, [sp, #24]
 8018d54:	2000      	movs	r0, #0
 8018d56:	3408      	adds	r4, #8
 8018d58:	2100      	movs	r1, #0
 8018d5a:	2d01      	cmp	r5, #1
 8018d5c:	f300 809d 	bgt.w	8018e9a <__kernel_rem_pio2+0x66a>
 8018d60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8018d64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8018d68:	f1bb 0f00 	cmp.w	fp, #0
 8018d6c:	f040 809b 	bne.w	8018ea6 <__kernel_rem_pio2+0x676>
 8018d70:	9b01      	ldr	r3, [sp, #4]
 8018d72:	e9c3 5600 	strd	r5, r6, [r3]
 8018d76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8018d7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018d7e:	e7ca      	b.n	8018d16 <__kernel_rem_pio2+0x4e6>
 8018d80:	3408      	adds	r4, #8
 8018d82:	ab4a      	add	r3, sp, #296	; 0x128
 8018d84:	441c      	add	r4, r3
 8018d86:	462e      	mov	r6, r5
 8018d88:	2000      	movs	r0, #0
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	2e00      	cmp	r6, #0
 8018d8e:	da36      	bge.n	8018dfe <__kernel_rem_pio2+0x5ce>
 8018d90:	f1bb 0f00 	cmp.w	fp, #0
 8018d94:	d039      	beq.n	8018e0a <__kernel_rem_pio2+0x5da>
 8018d96:	4602      	mov	r2, r0
 8018d98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d9c:	9c01      	ldr	r4, [sp, #4]
 8018d9e:	e9c4 2300 	strd	r2, r3, [r4]
 8018da2:	4602      	mov	r2, r0
 8018da4:	460b      	mov	r3, r1
 8018da6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8018daa:	f7e7 fa95 	bl	80002d8 <__aeabi_dsub>
 8018dae:	ae4c      	add	r6, sp, #304	; 0x130
 8018db0:	2401      	movs	r4, #1
 8018db2:	42a5      	cmp	r5, r4
 8018db4:	da2c      	bge.n	8018e10 <__kernel_rem_pio2+0x5e0>
 8018db6:	f1bb 0f00 	cmp.w	fp, #0
 8018dba:	d002      	beq.n	8018dc2 <__kernel_rem_pio2+0x592>
 8018dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018dc0:	4619      	mov	r1, r3
 8018dc2:	9b01      	ldr	r3, [sp, #4]
 8018dc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018dc8:	e7a5      	b.n	8018d16 <__kernel_rem_pio2+0x4e6>
 8018dca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8018dce:	eb0d 0403 	add.w	r4, sp, r3
 8018dd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8018dd6:	2000      	movs	r0, #0
 8018dd8:	2100      	movs	r1, #0
 8018dda:	2d00      	cmp	r5, #0
 8018ddc:	da09      	bge.n	8018df2 <__kernel_rem_pio2+0x5c2>
 8018dde:	f1bb 0f00 	cmp.w	fp, #0
 8018de2:	d002      	beq.n	8018dea <__kernel_rem_pio2+0x5ba>
 8018de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018de8:	4619      	mov	r1, r3
 8018dea:	9b01      	ldr	r3, [sp, #4]
 8018dec:	e9c3 0100 	strd	r0, r1, [r3]
 8018df0:	e791      	b.n	8018d16 <__kernel_rem_pio2+0x4e6>
 8018df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018df6:	f7e7 fa71 	bl	80002dc <__adddf3>
 8018dfa:	3d01      	subs	r5, #1
 8018dfc:	e7ed      	b.n	8018dda <__kernel_rem_pio2+0x5aa>
 8018dfe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018e02:	f7e7 fa6b 	bl	80002dc <__adddf3>
 8018e06:	3e01      	subs	r6, #1
 8018e08:	e7c0      	b.n	8018d8c <__kernel_rem_pio2+0x55c>
 8018e0a:	4602      	mov	r2, r0
 8018e0c:	460b      	mov	r3, r1
 8018e0e:	e7c5      	b.n	8018d9c <__kernel_rem_pio2+0x56c>
 8018e10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8018e14:	f7e7 fa62 	bl	80002dc <__adddf3>
 8018e18:	3401      	adds	r4, #1
 8018e1a:	e7ca      	b.n	8018db2 <__kernel_rem_pio2+0x582>
 8018e1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8018e20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8018e24:	9b02      	ldr	r3, [sp, #8]
 8018e26:	3b01      	subs	r3, #1
 8018e28:	9302      	str	r3, [sp, #8]
 8018e2a:	4632      	mov	r2, r6
 8018e2c:	463b      	mov	r3, r7
 8018e2e:	4640      	mov	r0, r8
 8018e30:	4649      	mov	r1, r9
 8018e32:	f7e7 fa53 	bl	80002dc <__adddf3>
 8018e36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018e3a:	4602      	mov	r2, r0
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	4640      	mov	r0, r8
 8018e40:	4649      	mov	r1, r9
 8018e42:	f7e7 fa49 	bl	80002d8 <__aeabi_dsub>
 8018e46:	4632      	mov	r2, r6
 8018e48:	463b      	mov	r3, r7
 8018e4a:	f7e7 fa47 	bl	80002dc <__adddf3>
 8018e4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018e52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018e56:	ed8a 7b00 	vstr	d7, [sl]
 8018e5a:	e76e      	b.n	8018d3a <__kernel_rem_pio2+0x50a>
 8018e5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8018e60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8018e64:	4640      	mov	r0, r8
 8018e66:	4632      	mov	r2, r6
 8018e68:	463b      	mov	r3, r7
 8018e6a:	4649      	mov	r1, r9
 8018e6c:	f7e7 fa36 	bl	80002dc <__adddf3>
 8018e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e74:	4602      	mov	r2, r0
 8018e76:	460b      	mov	r3, r1
 8018e78:	4640      	mov	r0, r8
 8018e7a:	4649      	mov	r1, r9
 8018e7c:	f7e7 fa2c 	bl	80002d8 <__aeabi_dsub>
 8018e80:	4632      	mov	r2, r6
 8018e82:	463b      	mov	r3, r7
 8018e84:	f7e7 fa2a 	bl	80002dc <__adddf3>
 8018e88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018e90:	ed84 7b00 	vstr	d7, [r4]
 8018e94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e98:	e755      	b.n	8018d46 <__kernel_rem_pio2+0x516>
 8018e9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018e9e:	f7e7 fa1d 	bl	80002dc <__adddf3>
 8018ea2:	3d01      	subs	r5, #1
 8018ea4:	e759      	b.n	8018d5a <__kernel_rem_pio2+0x52a>
 8018ea6:	9b01      	ldr	r3, [sp, #4]
 8018ea8:	9a01      	ldr	r2, [sp, #4]
 8018eaa:	601d      	str	r5, [r3, #0]
 8018eac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8018eb0:	605c      	str	r4, [r3, #4]
 8018eb2:	609f      	str	r7, [r3, #8]
 8018eb4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8018eb8:	60d3      	str	r3, [r2, #12]
 8018eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ebe:	6110      	str	r0, [r2, #16]
 8018ec0:	6153      	str	r3, [r2, #20]
 8018ec2:	e728      	b.n	8018d16 <__kernel_rem_pio2+0x4e6>
 8018ec4:	41700000 	.word	0x41700000
 8018ec8:	3e700000 	.word	0x3e700000
 8018ecc:	00000000 	.word	0x00000000

08018ed0 <__kernel_sin>:
 8018ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed4:	ed2d 8b04 	vpush	{d8-d9}
 8018ed8:	eeb0 8a41 	vmov.f32	s16, s2
 8018edc:	eef0 8a61 	vmov.f32	s17, s3
 8018ee0:	ec55 4b10 	vmov	r4, r5, d0
 8018ee4:	b083      	sub	sp, #12
 8018ee6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018eea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018eee:	9001      	str	r0, [sp, #4]
 8018ef0:	da06      	bge.n	8018f00 <__kernel_sin+0x30>
 8018ef2:	ee10 0a10 	vmov	r0, s0
 8018ef6:	4629      	mov	r1, r5
 8018ef8:	f7e7 fe56 	bl	8000ba8 <__aeabi_d2iz>
 8018efc:	2800      	cmp	r0, #0
 8018efe:	d051      	beq.n	8018fa4 <__kernel_sin+0xd4>
 8018f00:	4622      	mov	r2, r4
 8018f02:	462b      	mov	r3, r5
 8018f04:	4620      	mov	r0, r4
 8018f06:	4629      	mov	r1, r5
 8018f08:	f7e7 fb9e 	bl	8000648 <__aeabi_dmul>
 8018f0c:	4682      	mov	sl, r0
 8018f0e:	468b      	mov	fp, r1
 8018f10:	4602      	mov	r2, r0
 8018f12:	460b      	mov	r3, r1
 8018f14:	4620      	mov	r0, r4
 8018f16:	4629      	mov	r1, r5
 8018f18:	f7e7 fb96 	bl	8000648 <__aeabi_dmul>
 8018f1c:	a341      	add	r3, pc, #260	; (adr r3, 8019024 <__kernel_sin+0x154>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	4680      	mov	r8, r0
 8018f24:	4689      	mov	r9, r1
 8018f26:	4650      	mov	r0, sl
 8018f28:	4659      	mov	r1, fp
 8018f2a:	f7e7 fb8d 	bl	8000648 <__aeabi_dmul>
 8018f2e:	a33f      	add	r3, pc, #252	; (adr r3, 801902c <__kernel_sin+0x15c>)
 8018f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f34:	f7e7 f9d0 	bl	80002d8 <__aeabi_dsub>
 8018f38:	4652      	mov	r2, sl
 8018f3a:	465b      	mov	r3, fp
 8018f3c:	f7e7 fb84 	bl	8000648 <__aeabi_dmul>
 8018f40:	a33c      	add	r3, pc, #240	; (adr r3, 8019034 <__kernel_sin+0x164>)
 8018f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f46:	f7e7 f9c9 	bl	80002dc <__adddf3>
 8018f4a:	4652      	mov	r2, sl
 8018f4c:	465b      	mov	r3, fp
 8018f4e:	f7e7 fb7b 	bl	8000648 <__aeabi_dmul>
 8018f52:	a33a      	add	r3, pc, #232	; (adr r3, 801903c <__kernel_sin+0x16c>)
 8018f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f58:	f7e7 f9be 	bl	80002d8 <__aeabi_dsub>
 8018f5c:	4652      	mov	r2, sl
 8018f5e:	465b      	mov	r3, fp
 8018f60:	f7e7 fb72 	bl	8000648 <__aeabi_dmul>
 8018f64:	a337      	add	r3, pc, #220	; (adr r3, 8019044 <__kernel_sin+0x174>)
 8018f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f6a:	f7e7 f9b7 	bl	80002dc <__adddf3>
 8018f6e:	9b01      	ldr	r3, [sp, #4]
 8018f70:	4606      	mov	r6, r0
 8018f72:	460f      	mov	r7, r1
 8018f74:	b9eb      	cbnz	r3, 8018fb2 <__kernel_sin+0xe2>
 8018f76:	4602      	mov	r2, r0
 8018f78:	460b      	mov	r3, r1
 8018f7a:	4650      	mov	r0, sl
 8018f7c:	4659      	mov	r1, fp
 8018f7e:	f7e7 fb63 	bl	8000648 <__aeabi_dmul>
 8018f82:	a325      	add	r3, pc, #148	; (adr r3, 8019018 <__kernel_sin+0x148>)
 8018f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f88:	f7e7 f9a6 	bl	80002d8 <__aeabi_dsub>
 8018f8c:	4642      	mov	r2, r8
 8018f8e:	464b      	mov	r3, r9
 8018f90:	f7e7 fb5a 	bl	8000648 <__aeabi_dmul>
 8018f94:	4602      	mov	r2, r0
 8018f96:	460b      	mov	r3, r1
 8018f98:	4620      	mov	r0, r4
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	f7e7 f99e 	bl	80002dc <__adddf3>
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	460d      	mov	r5, r1
 8018fa4:	ec45 4b10 	vmov	d0, r4, r5
 8018fa8:	b003      	add	sp, #12
 8018faa:	ecbd 8b04 	vpop	{d8-d9}
 8018fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb2:	4b1b      	ldr	r3, [pc, #108]	; (8019020 <__kernel_sin+0x150>)
 8018fb4:	ec51 0b18 	vmov	r0, r1, d8
 8018fb8:	2200      	movs	r2, #0
 8018fba:	f7e7 fb45 	bl	8000648 <__aeabi_dmul>
 8018fbe:	4632      	mov	r2, r6
 8018fc0:	ec41 0b19 	vmov	d9, r0, r1
 8018fc4:	463b      	mov	r3, r7
 8018fc6:	4640      	mov	r0, r8
 8018fc8:	4649      	mov	r1, r9
 8018fca:	f7e7 fb3d 	bl	8000648 <__aeabi_dmul>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	ec51 0b19 	vmov	r0, r1, d9
 8018fd6:	f7e7 f97f 	bl	80002d8 <__aeabi_dsub>
 8018fda:	4652      	mov	r2, sl
 8018fdc:	465b      	mov	r3, fp
 8018fde:	f7e7 fb33 	bl	8000648 <__aeabi_dmul>
 8018fe2:	ec53 2b18 	vmov	r2, r3, d8
 8018fe6:	f7e7 f977 	bl	80002d8 <__aeabi_dsub>
 8018fea:	a30b      	add	r3, pc, #44	; (adr r3, 8019018 <__kernel_sin+0x148>)
 8018fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ff0:	4606      	mov	r6, r0
 8018ff2:	460f      	mov	r7, r1
 8018ff4:	4640      	mov	r0, r8
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	f7e7 fb26 	bl	8000648 <__aeabi_dmul>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	460b      	mov	r3, r1
 8019000:	4630      	mov	r0, r6
 8019002:	4639      	mov	r1, r7
 8019004:	f7e7 f96a 	bl	80002dc <__adddf3>
 8019008:	4602      	mov	r2, r0
 801900a:	460b      	mov	r3, r1
 801900c:	4620      	mov	r0, r4
 801900e:	4629      	mov	r1, r5
 8019010:	f7e7 f962 	bl	80002d8 <__aeabi_dsub>
 8019014:	e7c4      	b.n	8018fa0 <__kernel_sin+0xd0>
 8019016:	bf00      	nop
 8019018:	55555549 	.word	0x55555549
 801901c:	3fc55555 	.word	0x3fc55555
 8019020:	3fe00000 	.word	0x3fe00000
 8019024:	5acfd57c 	.word	0x5acfd57c
 8019028:	3de5d93a 	.word	0x3de5d93a
 801902c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019030:	3e5ae5e6 	.word	0x3e5ae5e6
 8019034:	57b1fe7d 	.word	0x57b1fe7d
 8019038:	3ec71de3 	.word	0x3ec71de3
 801903c:	19c161d5 	.word	0x19c161d5
 8019040:	3f2a01a0 	.word	0x3f2a01a0
 8019044:	1110f8a6 	.word	0x1110f8a6
 8019048:	3f811111 	.word	0x3f811111

0801904c <fabs>:
 801904c:	ec51 0b10 	vmov	r0, r1, d0
 8019050:	ee10 2a10 	vmov	r2, s0
 8019054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019058:	ec43 2b10 	vmov	d0, r2, r3
 801905c:	4770      	bx	lr
	...

08019060 <floor>:
 8019060:	ec51 0b10 	vmov	r0, r1, d0
 8019064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019068:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801906c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019070:	2e13      	cmp	r6, #19
 8019072:	ee10 5a10 	vmov	r5, s0
 8019076:	ee10 8a10 	vmov	r8, s0
 801907a:	460c      	mov	r4, r1
 801907c:	dc32      	bgt.n	80190e4 <floor+0x84>
 801907e:	2e00      	cmp	r6, #0
 8019080:	da14      	bge.n	80190ac <floor+0x4c>
 8019082:	a333      	add	r3, pc, #204	; (adr r3, 8019150 <floor+0xf0>)
 8019084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019088:	f7e7 f928 	bl	80002dc <__adddf3>
 801908c:	2200      	movs	r2, #0
 801908e:	2300      	movs	r3, #0
 8019090:	f7e7 fd6a 	bl	8000b68 <__aeabi_dcmpgt>
 8019094:	b138      	cbz	r0, 80190a6 <floor+0x46>
 8019096:	2c00      	cmp	r4, #0
 8019098:	da57      	bge.n	801914a <floor+0xea>
 801909a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801909e:	431d      	orrs	r5, r3
 80190a0:	d001      	beq.n	80190a6 <floor+0x46>
 80190a2:	4c2d      	ldr	r4, [pc, #180]	; (8019158 <floor+0xf8>)
 80190a4:	2500      	movs	r5, #0
 80190a6:	4621      	mov	r1, r4
 80190a8:	4628      	mov	r0, r5
 80190aa:	e025      	b.n	80190f8 <floor+0x98>
 80190ac:	4f2b      	ldr	r7, [pc, #172]	; (801915c <floor+0xfc>)
 80190ae:	4137      	asrs	r7, r6
 80190b0:	ea01 0307 	and.w	r3, r1, r7
 80190b4:	4303      	orrs	r3, r0
 80190b6:	d01f      	beq.n	80190f8 <floor+0x98>
 80190b8:	a325      	add	r3, pc, #148	; (adr r3, 8019150 <floor+0xf0>)
 80190ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190be:	f7e7 f90d 	bl	80002dc <__adddf3>
 80190c2:	2200      	movs	r2, #0
 80190c4:	2300      	movs	r3, #0
 80190c6:	f7e7 fd4f 	bl	8000b68 <__aeabi_dcmpgt>
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d0eb      	beq.n	80190a6 <floor+0x46>
 80190ce:	2c00      	cmp	r4, #0
 80190d0:	bfbe      	ittt	lt
 80190d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80190d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80190da:	19a4      	addlt	r4, r4, r6
 80190dc:	ea24 0407 	bic.w	r4, r4, r7
 80190e0:	2500      	movs	r5, #0
 80190e2:	e7e0      	b.n	80190a6 <floor+0x46>
 80190e4:	2e33      	cmp	r6, #51	; 0x33
 80190e6:	dd0b      	ble.n	8019100 <floor+0xa0>
 80190e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80190ec:	d104      	bne.n	80190f8 <floor+0x98>
 80190ee:	ee10 2a10 	vmov	r2, s0
 80190f2:	460b      	mov	r3, r1
 80190f4:	f7e7 f8f2 	bl	80002dc <__adddf3>
 80190f8:	ec41 0b10 	vmov	d0, r0, r1
 80190fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019100:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019104:	f04f 33ff 	mov.w	r3, #4294967295
 8019108:	fa23 f707 	lsr.w	r7, r3, r7
 801910c:	4207      	tst	r7, r0
 801910e:	d0f3      	beq.n	80190f8 <floor+0x98>
 8019110:	a30f      	add	r3, pc, #60	; (adr r3, 8019150 <floor+0xf0>)
 8019112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019116:	f7e7 f8e1 	bl	80002dc <__adddf3>
 801911a:	2200      	movs	r2, #0
 801911c:	2300      	movs	r3, #0
 801911e:	f7e7 fd23 	bl	8000b68 <__aeabi_dcmpgt>
 8019122:	2800      	cmp	r0, #0
 8019124:	d0bf      	beq.n	80190a6 <floor+0x46>
 8019126:	2c00      	cmp	r4, #0
 8019128:	da02      	bge.n	8019130 <floor+0xd0>
 801912a:	2e14      	cmp	r6, #20
 801912c:	d103      	bne.n	8019136 <floor+0xd6>
 801912e:	3401      	adds	r4, #1
 8019130:	ea25 0507 	bic.w	r5, r5, r7
 8019134:	e7b7      	b.n	80190a6 <floor+0x46>
 8019136:	2301      	movs	r3, #1
 8019138:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801913c:	fa03 f606 	lsl.w	r6, r3, r6
 8019140:	4435      	add	r5, r6
 8019142:	4545      	cmp	r5, r8
 8019144:	bf38      	it	cc
 8019146:	18e4      	addcc	r4, r4, r3
 8019148:	e7f2      	b.n	8019130 <floor+0xd0>
 801914a:	2500      	movs	r5, #0
 801914c:	462c      	mov	r4, r5
 801914e:	e7aa      	b.n	80190a6 <floor+0x46>
 8019150:	8800759c 	.word	0x8800759c
 8019154:	7e37e43c 	.word	0x7e37e43c
 8019158:	bff00000 	.word	0xbff00000
 801915c:	000fffff 	.word	0x000fffff

08019160 <scalbn>:
 8019160:	b570      	push	{r4, r5, r6, lr}
 8019162:	ec55 4b10 	vmov	r4, r5, d0
 8019166:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801916a:	4606      	mov	r6, r0
 801916c:	462b      	mov	r3, r5
 801916e:	b99a      	cbnz	r2, 8019198 <scalbn+0x38>
 8019170:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019174:	4323      	orrs	r3, r4
 8019176:	d036      	beq.n	80191e6 <scalbn+0x86>
 8019178:	4b39      	ldr	r3, [pc, #228]	; (8019260 <scalbn+0x100>)
 801917a:	4629      	mov	r1, r5
 801917c:	ee10 0a10 	vmov	r0, s0
 8019180:	2200      	movs	r2, #0
 8019182:	f7e7 fa61 	bl	8000648 <__aeabi_dmul>
 8019186:	4b37      	ldr	r3, [pc, #220]	; (8019264 <scalbn+0x104>)
 8019188:	429e      	cmp	r6, r3
 801918a:	4604      	mov	r4, r0
 801918c:	460d      	mov	r5, r1
 801918e:	da10      	bge.n	80191b2 <scalbn+0x52>
 8019190:	a32b      	add	r3, pc, #172	; (adr r3, 8019240 <scalbn+0xe0>)
 8019192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019196:	e03a      	b.n	801920e <scalbn+0xae>
 8019198:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801919c:	428a      	cmp	r2, r1
 801919e:	d10c      	bne.n	80191ba <scalbn+0x5a>
 80191a0:	ee10 2a10 	vmov	r2, s0
 80191a4:	4620      	mov	r0, r4
 80191a6:	4629      	mov	r1, r5
 80191a8:	f7e7 f898 	bl	80002dc <__adddf3>
 80191ac:	4604      	mov	r4, r0
 80191ae:	460d      	mov	r5, r1
 80191b0:	e019      	b.n	80191e6 <scalbn+0x86>
 80191b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80191b6:	460b      	mov	r3, r1
 80191b8:	3a36      	subs	r2, #54	; 0x36
 80191ba:	4432      	add	r2, r6
 80191bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80191c0:	428a      	cmp	r2, r1
 80191c2:	dd08      	ble.n	80191d6 <scalbn+0x76>
 80191c4:	2d00      	cmp	r5, #0
 80191c6:	a120      	add	r1, pc, #128	; (adr r1, 8019248 <scalbn+0xe8>)
 80191c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191cc:	da1c      	bge.n	8019208 <scalbn+0xa8>
 80191ce:	a120      	add	r1, pc, #128	; (adr r1, 8019250 <scalbn+0xf0>)
 80191d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191d4:	e018      	b.n	8019208 <scalbn+0xa8>
 80191d6:	2a00      	cmp	r2, #0
 80191d8:	dd08      	ble.n	80191ec <scalbn+0x8c>
 80191da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80191de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80191e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80191e6:	ec45 4b10 	vmov	d0, r4, r5
 80191ea:	bd70      	pop	{r4, r5, r6, pc}
 80191ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80191f0:	da19      	bge.n	8019226 <scalbn+0xc6>
 80191f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80191f6:	429e      	cmp	r6, r3
 80191f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80191fc:	dd0a      	ble.n	8019214 <scalbn+0xb4>
 80191fe:	a112      	add	r1, pc, #72	; (adr r1, 8019248 <scalbn+0xe8>)
 8019200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d1e2      	bne.n	80191ce <scalbn+0x6e>
 8019208:	a30f      	add	r3, pc, #60	; (adr r3, 8019248 <scalbn+0xe8>)
 801920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920e:	f7e7 fa1b 	bl	8000648 <__aeabi_dmul>
 8019212:	e7cb      	b.n	80191ac <scalbn+0x4c>
 8019214:	a10a      	add	r1, pc, #40	; (adr r1, 8019240 <scalbn+0xe0>)
 8019216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d0b8      	beq.n	8019190 <scalbn+0x30>
 801921e:	a10e      	add	r1, pc, #56	; (adr r1, 8019258 <scalbn+0xf8>)
 8019220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019224:	e7b4      	b.n	8019190 <scalbn+0x30>
 8019226:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801922a:	3236      	adds	r2, #54	; 0x36
 801922c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019230:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019234:	4620      	mov	r0, r4
 8019236:	4b0c      	ldr	r3, [pc, #48]	; (8019268 <scalbn+0x108>)
 8019238:	2200      	movs	r2, #0
 801923a:	e7e8      	b.n	801920e <scalbn+0xae>
 801923c:	f3af 8000 	nop.w
 8019240:	c2f8f359 	.word	0xc2f8f359
 8019244:	01a56e1f 	.word	0x01a56e1f
 8019248:	8800759c 	.word	0x8800759c
 801924c:	7e37e43c 	.word	0x7e37e43c
 8019250:	8800759c 	.word	0x8800759c
 8019254:	fe37e43c 	.word	0xfe37e43c
 8019258:	c2f8f359 	.word	0xc2f8f359
 801925c:	81a56e1f 	.word	0x81a56e1f
 8019260:	43500000 	.word	0x43500000
 8019264:	ffff3cb0 	.word	0xffff3cb0
 8019268:	3c900000 	.word	0x3c900000

0801926c <_init>:
 801926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801926e:	bf00      	nop
 8019270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019272:	bc08      	pop	{r3}
 8019274:	469e      	mov	lr, r3
 8019276:	4770      	bx	lr

08019278 <_fini>:
 8019278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801927a:	bf00      	nop
 801927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801927e:	bc08      	pop	{r3}
 8019280:	469e      	mov	lr, r3
 8019282:	4770      	bx	lr
